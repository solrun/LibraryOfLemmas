Loading theory "Draft.Quasi_Order" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation" via "Draft.PlaneGraphIso")
Loading theory "Draft.RTranCl" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.FaceDivisionProps" via "Draft.Plane")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.ListAux" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
locale quasi_order
  fixes qle :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 60)
  assumes "quasi_order (\<preceq>)"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
Proofs for inductive predicate(s) "RTranClp"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
  Proving monotonicity ...
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Quasi_Order"
### 0.080s elapsed time, 0.350s cpu time, 0.000s GC time
Loading theory "Draft.PlaneGraphIso" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation")
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.523s cpu time, 0.055s GC time
Loading theory "Draft.IArray_Syntax" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator")
### Ignoring duplicate safe introduction (intro!)
### EX y. ?x = Some y ==> ?x ~= None
### Ignoring duplicate safe elimination (elim!)
### [| ?x ~= None; EX y. ?x = Some y ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### ?x = None ==> ALL y. ?x ~= Some y
### Ignoring duplicate safe elimination (elim!)
### [| ALL y. ?x ~= Some y; ?x = None ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX y. ?x = Some y ==> ?x ~= None
### Ignoring duplicate safe elimination (elim!)
### [| ?x ~= None; EX y. ?x = Some y ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?x1 ~= None == EX y. ?x1 = Some y
### Ignoring duplicate safe introduction (intro!)
### ?x = None ==> ALL y. ?x ~= Some y
### Ignoring duplicate safe elimination (elim!)
### [| ALL y. ?x ~= Some y; ?x = None ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ALL y. ?x1 ~= Some y == ?x1 = None
### Ambiguous input (line 130 of "$AFP/Flyspeck-Tame/ListAux.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Product_Type.Times" ("_position" as) ("_position" bs))
###   ("_concat" ("_position" a) ("_position" as)
###     ("_applC" ("_position" listProd1)
###       ("_cargs" ("_position" a) ("_position" bs)))))
### ("\<^const>Pure.eq" ("\<^fixed>listProd" ("_position" as) ("_position" bs))
###   ("_concat" ("_position" a) ("_position" as)
###     ("_applC" ("_position" listProd1)
###       ("_cargs" ("_position" a) ("_position" bs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
overloading
  congs \<equiv> pr_isomorphic :: 'a list => 'a list => bool
### Ambiguous input (line 132 of "$AFP/Flyspeck-Tame/ListAux.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set)
###       ("\<^const>ListAux.listProd" ("_position" xs) ("_position" ys)))
###     ("\<^const>Product_Type.Times"
###       ("_applC" ("_position" set) ("_position" xs))
###       ("_applC" ("_position" set) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set)
###       ("\<^const>Product_Type.Times" ("_position" xs) ("_position" ys)))
###     ("\<^const>Product_Type.Times"
###       ("_applC" ("_position" set) ("_position" xs))
###       ("_applC" ("_position" set) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### No equation for constructor "[]"
consts
  minimal :: "('a => nat) => 'a list => 'a"
### No equation for constructor "[]"
consts
  min_list :: "nat list => nat"
### No equation for constructor "[]"
### theory "Draft.RTranCl"
### 0.175s elapsed time, 0.715s cpu time, 0.055s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
consts
  max_list :: "nat list => nat"
### theory "Draft.IArray_Syntax"
### 0.055s elapsed time, 0.222s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  replace :: "'a => 'a list => 'a list => 'a list"
consts
  mapAt :: "nat list => ('a => 'a) => 'a list => 'a list"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  pr_iso_test0 ::
    "('a => 'b option) => 'a list list => 'b list list => bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  pr_iso_test1 ::
    "('a => 'b option) => 'a list list => 'b list list => bool"
consts
  splitAtRec :: "'a => 'a list => 'a list => 'a list * 'a list"
consts
  pr_iso_test2 ::
    "(('a * 'b) list => ('a * 'b) list => bool)
     => (('a * 'b) list => ('a * 'b) list => ('a * 'b) list)
        => ('a * 'b) list => 'a list list => 'b list list => bool"
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.851s cpu time, 0.095s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### ?A1 - ?B1 <= ?A1 == True
consts
  merge :: "('a * 'b) list => ('a * 'b) list => ('a * 'b) list"
consts
  pr_iso_test_rec ::
    "('a * 'b) list => 'a list list => 'b list list => bool"
### theory "HOL-Library.Nat_Bijection"
### 0.350s elapsed time, 1.374s cpu time, 0.185s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.ExtrEqs")
### theory "Draft.PlaneGraphIso"
### 0.515s elapsed time, 2.004s cpu time, 0.345s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.ExtrEqs")
consts
  removeKeyList :: "'a list => ('a * 'b) list => ('a * 'b) list"
### theory "Draft.ListAux"
### 0.667s elapsed time, 2.638s cpu time, 0.345s GC time
Loading theory "Draft.Rotation" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph")
### theory "Draft.Rotation"
### 0.202s elapsed time, 0.806s cpu time, 0.092s GC time
Loading theory "Draft.Graph" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.BigO"
### 1.037s elapsed time, 3.946s cpu time, 0.947s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.139s elapsed time, 4.308s cpu time, 1.052s GC time
overloading
  final_face \<equiv> final :: face => bool
  type_face \<equiv> type :: face => facetype
  vertices_face \<equiv> vertices :: face => nat list
  cong_face \<equiv> pr_isomorphic :: face => face => bool
consts
  final_face :: "face => bool"
consts
  type_face :: "face => facetype"
consts
  vertices_face :: "face => nat list"
consts
  nextElem :: "'a list => 'a => 'a => 'a"
Found termination order: "size <*mlex*> {}"
overloading
  edges_face \<equiv> edges :: face => (nat * nat) set
overloading
  op_vertices \<equiv> op :: nat list => nat list
overloading
  op_graph \<equiv> op :: face => face
consts
  op_graph :: "face => face"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  faces :: "graph => face list"
consts
  countVertices :: "graph => nat"
overloading
  vertices_graph \<equiv> vertices :: graph => nat list
consts
  vertices_graph :: "graph => nat list"
consts
  faceListAt :: "graph => face list list"
consts
  heights :: "graph => nat list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
overloading
  finalGraph \<equiv> final :: graph => bool
overloading
  edges_graph \<equiv> edges :: graph => (nat * nat) set
### Ambiguous input (line 257 of "$AFP/Flyspeck-Tame/Graph.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>nextFace" ("_position" p))
###   ("_lambda" ("_position" f)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_pattern" ("_position" g) ("_position" v))
###           ("_position" p))
###         ("_bind" ("_position" fs)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" v)))))
###       ("_case_syntax" ("_position" fs)
###         ("_case2" ("_case1" ("\<^const>List.list.Nil") ("_position" f))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" g) ("_position" gs))
###             ("_applC" ("_position" nextElem)
###               ("_cargs" ("_position" fs)
###                 ("_cargs" ("_applC" ("_position" hd) ("_position" fs))
###                   ("_position" f))))))))))
### ("\<^const>Pure.eq" ("\<^const>Graph.nextVertex" ("_position" p))
###   ("_lambda" ("_position" f)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_pattern" ("_position" g) ("_position" v))
###           ("_position" p))
###         ("_bind" ("_position" fs)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" v)))))
###       ("_case_syntax" ("_position" fs)
###         ("_case2" ("_case1" ("\<^const>List.list.Nil") ("_position" f))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" g) ("_position" gs))
###             ("_applC" ("_position" nextElem)
###               ("_cargs" ("_position" fs)
###                 ("_cargs" ("_applC" ("_position" hd) ("_position" fs))
###                   ("_position" f))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Graph"
### 1.340s elapsed time, 4.103s cpu time, 1.007s GC time
Loading theory "Draft.FaceDivision" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.FaceDivisionProps" via "Draft.Plane")
Loading theory "Draft.GraphProps" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.FaceDivisionProps" via "Draft.EnumeratorProps")
Loading theory "Draft.Enumerator" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.FaceDivisionProps" via "Draft.Plane")
### Ambiguous input (line 134 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" vertices) ("_position" f))
###       ("\<^const>List.list.Nil")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" vertices) ("_position" f))
###       ("\<^const>List.list.Nil")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 147 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" vertices) ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" vertices) ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 152 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 170 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("\<^const>List.nth"
###           ("_applC" ("_position" vertices) ("_position" f))
###           ("_position" i)))
###       ("\<^const>List.nth" ("_applC" ("_position" vertices) ("_position" f))
###         ("\<^const>Rings.modulo_class.modulo"
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("\<^const>List.nth"
###           ("_applC" ("_position" vertices) ("_position" f))
###           ("_position" i)))
###       ("\<^const>List.nth" ("_applC" ("_position" vertices) ("_position" f))
###         ("\<^const>Rings.modulo_class.modulo"
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/Flyspeck-Tame/FaceDivision.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" splitFace)
###     ("_cargs" ("_position" g)
###       ("_cargs" ("_position" ram\<^sub>1)
###         ("_cargs" ("_position" ram\<^sub>2)
###           ("_cargs" ("_position" oldF) ("_position" newVs))))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" faces) ("_position" g)))
###       ("_binds"
###         ("_bind" ("_position" n)
###           ("_applC" ("_position" countVertices) ("_position" g)))
###         ("_binds"
###           ("_bind" ("_position" Fs)
###             ("_applC" ("_position" faceListAt) ("_position" g)))
###           ("_binds"
###             ("_bind" ("_position" h)
###               ("_applC" ("_position" heights) ("_position" g)))
###             ("_binds"
###               ("_bind" ("_position" vs\<^sub>1)
###                 ("_applC" ("_position" between)
###                   ("_cargs"
###                     ("_applC" ("_position" vertices) ("_position" oldF))
###                     ("_cargs" ("_position" ram\<^sub>1)
###                       ("_position" ram\<^sub>2)))))
###               ("_binds"
###                 ("_bind" ("_position" vs\<^sub>2)
###                   ("_applC" ("_position" between)
###                     ("_cargs"
###                       ("_applC" ("_position" vertices) ("_position" oldF))
###                       ("_cargs" ("_position" ram\<^sub>2)
###                         ("_position" ram\<^sub>1)))))
###                 ("_binds"
###                   ("_bind"
###                     ("_pattern" ("_position" f\<^sub>1)
###                       ("_position" f\<^sub>2))
###                     ("_applC" ("_position" split_face)
###                       ("_cargs" ("_position" oldF)
###                         ("_cargs" ("_position" ram\<^sub>1)
###                           ("_cargs" ("_position" ram\<^sub>2)
###                             ("_position" newVs))))))
###                   ("_binds"
###                     ("_bind" ("_position" Fs)
###                       ("_applC" ("_position" replacefacesAt)
###                         ("_cargs" ("_position" vs\<^sub>1)
###                           ("_cargs" ("_position" oldF)
###                             ("_cargs" ("_list" ("_position" f\<^sub>1))
###                               ("_position" Fs))))))
###                     ("_binds"
###                       ("_bind" ("_position" Fs)
###                         ("_applC" ("_position" replacefacesAt)
###                           ("_cargs" ("_position" vs\<^sub>2)
###                             ("_cargs" ("_position" oldF)
###                               ("_cargs" ("_list" ("_position" f\<^sub>2))
###                                 ("_position" Fs))))))
###                       ("_binds"
###                         ("_bind" ("_position" Fs)
###                           ("_applC" ("_position" replacefacesAt)
###                             ("_cargs" ("_list" ("_position" ram\<^sub>1))
###                               ("_cargs" ("_position" oldF)
###                                 ("_cargs"
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>2)
### ("_position" f\<^sub>1)))
###                                   ("_position" Fs))))))
###                         ("_binds"
###                           ("_bind" ("_position" Fs)
###                             ("_applC" ("_position" replacefacesAt)
###                               ("_cargs" ("_list" ("_position" ram\<^sub>2))
###                                 ("_cargs" ("_position" oldF)
###                                   ("_cargs"
###                                     ("_list"
### ("_args" ("_position" f\<^sub>1) ("_position" f\<^sub>2)))
###                                     ("_position" Fs))))))
###                           ("_bind" ("_position" Fs)
###                             ("\<^const>HOL.disj"
###                               ("\<^const>List.append" ("_position" Fs)
###                                 ("_position" replicate))
###                               ("\<^const>HOL.disj" ("_position" newVs)
###                                 ("_list"
###                                   ("_args" ("_position" f\<^sub>1)
###                                     ("_position" f\<^sub>2)))))))))))))))))
###     ("_tuple" ("_position" f\<^sub>1)
###       ("_tuple_args" ("_position" f\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" Graph)
###             ("_cargs"
###               ("\<^const>List.append"
###                 ("_applC" ("_position" replace)
###                   ("_cargs" ("_position" oldF)
###                     ("_cargs" ("_list" ("_position" f\<^sub>2))
###                       ("_position" fs))))
###                 ("_list" ("_position" f\<^sub>1)))
###               ("_cargs"
###                 ("\<^const>Groups.plus_class.plus" ("_position" n)
###                   ("\<^const>List.length" ("_position" newVs)))
###                 ("_cargs" ("_position" Fs)
###                   ("\<^const>List.append" ("_position" h)
###                     ("_applC" ("_position" heightsNewVertices)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" h)
###                           ("_position" ram\<^sub>1))
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" h)
###                             ("_position" ram\<^sub>2))
###                           ("\<^const>List.length"
###                             ("_position" newVs)))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" splitFace)
###     ("_cargs" ("_position" g)
###       ("_cargs" ("_position" ram\<^sub>1)
###         ("_cargs" ("_position" ram\<^sub>2)
###           ("_cargs" ("_position" oldF) ("_position" newVs))))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" faces) ("_position" g)))
###       ("_binds"
###         ("_bind" ("_position" n)
###           ("_applC" ("_position" countVertices) ("_position" g)))
###         ("_binds"
###           ("_bind" ("_position" Fs)
###             ("_applC" ("_position" faceListAt) ("_position" g)))
###           ("_binds"
###             ("_bind" ("_position" h)
###               ("_applC" ("_position" heights) ("_position" g)))
###             ("_binds"
###               ("_bind" ("_position" vs\<^sub>1)
###                 ("_applC" ("_position" between)
###                   ("_cargs"
###                     ("_applC" ("_position" vertices) ("_position" oldF))
###                     ("_cargs" ("_position" ram\<^sub>1)
###                       ("_position" ram\<^sub>2)))))
###               ("_binds"
###                 ("_bind" ("_position" vs\<^sub>2)
###                   ("_applC" ("_position" between)
###                     ("_cargs"
###                       ("_applC" ("_position" vertices) ("_position" oldF))
###                       ("_cargs" ("_position" ram\<^sub>2)
###                         ("_position" ram\<^sub>1)))))
###                 ("_binds"
###                   ("_bind"
###                     ("_pattern" ("_position" f\<^sub>1)
###                       ("_position" f\<^sub>2))
###                     ("_applC" ("_position" split_face)
###                       ("_cargs" ("_position" oldF)
###                         ("_cargs" ("_position" ram\<^sub>1)
###                           ("_cargs" ("_position" ram\<^sub>2)
###                             ("_position" newVs))))))
###                   ("_binds"
###                     ("_bind" ("_position" Fs)
###                       ("_applC" ("_position" replacefacesAt)
###                         ("_cargs" ("_position" vs\<^sub>1)
###                           ("_cargs" ("_position" oldF)
###                             ("_cargs" ("_list" ("_position" f\<^sub>1))
###                               ("_position" Fs))))))
###                     ("_binds"
###                       ("_bind" ("_position" Fs)
###                         ("_applC" ("_position" replacefacesAt)
###                           ("_cargs" ("_position" vs\<^sub>2)
###                             ("_cargs" ("_position" oldF)
###                               ("_cargs" ("_list" ("_position" f\<^sub>2))
###                                 ("_position" Fs))))))
###                       ("_binds"
###                         ("_bind" ("_position" Fs)
###                           ("_applC" ("_position" replacefacesAt)
###                             ("_cargs" ("_list" ("_position" ram\<^sub>1))
###                               ("_cargs" ("_position" oldF)
###                                 ("_cargs"
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>2)
### ("_position" f\<^sub>1)))
###                                   ("_position" Fs))))))
###                         ("_binds"
###                           ("_bind" ("_position" Fs)
###                             ("_applC" ("_position" replacefacesAt)
###                               ("_cargs" ("_list" ("_position" ram\<^sub>2))
###                                 ("_cargs" ("_position" oldF)
###                                   ("_cargs"
###                                     ("_list"
### ("_args" ("_position" f\<^sub>1) ("_position" f\<^sub>2)))
###                                     ("_position" Fs))))))
###                           ("_bind" ("_position" Fs)
###                             ("\<^const>List.append" ("_position" Fs)
###                               ("_applC" ("_position" replicate)
###                                 ("_cargs"
###                                   ("\<^const>List.length"
###                                     ("_position" newVs))
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>1)
### ("_position" f\<^sub>2))))))))))))))))))
###     ("_tuple" ("_position" f\<^sub>1)
###       ("_tuple_args" ("_position" f\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" Graph)
###             ("_cargs"
###               ("\<^const>List.append"
###                 ("_applC" ("_position" replace)
###                   ("_cargs" ("_position" oldF)
###                     ("_cargs" ("_list" ("_position" f\<^sub>2))
###                       ("_position" fs))))
###                 ("_list" ("_position" f\<^sub>1)))
###               ("_cargs"
###                 ("\<^const>Groups.plus_class.plus" ("_position" n)
###                   ("\<^const>List.length" ("_position" newVs)))
###                 ("_cargs" ("_position" Fs)
###                   ("\<^const>List.append" ("_position" h)
###                     ("_applC" ("_position" heightsNewVertices)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" h)
###                           ("_position" ram\<^sub>1))
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" h)
###                             ("_position" ram\<^sub>2))
###                           ("\<^const>List.length"
###                             ("_position" newVs)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###       ("_applC" ("\<^const>Graph.edges")
###         ("_constrain" ("_position" f) ("_type_name" face))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" a))
###         ("_position" b))
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###       ("_applC" ("\<^const>Graph.edges")
###         ("_constrain" ("_position" f) ("_type_name" face))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" a))
###         ("_position" b))
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" v)
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))))
###       ("_applC" ("_position" edges) ("_position" f)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" v)
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))))
###       ("_applC" ("_position" edges) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Flyspeck-Tame/FaceDivision.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" u)
###             ("_cargs" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" vo)
###                 ("_position" vos)))))))
###     ("_case_syntax" ("_position" vo)
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" subdivFace')
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_applC" ("_position" Suc) ("_position" n))
###                     ("_position" vos)))))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" u))
###                 ("_position" v))
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("_applC" ("_position" subdivFace')
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("\<^const>Groups.zero_class.zero")
###                       ("_position" vos))))))
###             ("_Let"
###               ("_binds"
###                 ("_bind" ("_position" ws)
###                   ("\<^const>List.upt"
###                     ("_applC" ("_position" countVertices) ("_position" g))
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("_position" n))))
###                 ("_bind"
###                   ("_pattern" ("_position" f\<^sub>1)
###                     ("_patterns" ("_position" f\<^sub>2) ("_position" g')))
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" f) ("_position" ws))))))))
###               ("_applC" ("_position" subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f\<^sub>2)
###                     ("_cargs" ("_position" v)
###                       ("_cargs" ("\<^const>Groups.zero_class.zero")
###                         ("_position" vos)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" u)
###             ("_cargs" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" vo)
###                 ("_position" vos)))))))
###     ("_case_syntax" ("_position" vo)
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" subdivFace')
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_applC" ("_position" Suc) ("_position" n))
###                     ("_position" vos)))))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" u))
###                 ("_position" v))
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("_applC" ("_position" subdivFace')
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("\<^const>Groups.zero_class.zero")
###                       ("_position" vos))))))
###             ("_Let"
###               ("_binds"
###                 ("_bind" ("_position" ws)
###                   ("\<^const>List.upt"
###                     ("_applC" ("_position" countVertices) ("_position" g))
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("_position" n))))
###                 ("_bind"
###                   ("_pattern" ("_position" f\<^sub>1)
###                     ("_patterns" ("_position" f\<^sub>2) ("_position" g')))
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" f) ("_position" ws))))))))
###               ("_applC" ("_position" subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f\<^sub>2)
###                     ("_cargs" ("_position" v)
###                       ("_cargs" ("\<^const>Groups.zero_class.zero")
###                         ("_position" vos)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 215 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subdivFace' :: "graph => face => nat => nat => nat option list => graph"
### Ambiguous input (line 231 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 240 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.FaceDivision"
### 0.147s elapsed time, 0.575s cpu time, 0.062s GC time
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 257 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 64 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 281 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 315 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 322 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.greater"
###             ("\<^const>List.length"
###               ("_applC" ("_position" vertices) ("_position" f)))
###             ("\<^const>Groups.one_class.one"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.greater"
###             ("\<^const>List.length"
###               ("_applC" ("_position" vertices) ("_position" f)))
###             ("\<^const>Groups.one_class.one"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 343 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 360 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u)
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u)
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  hideDupsRec :: "'a => 'a list => 'a option list"
### Ambiguous input (line 383 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" v)
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.list.Nil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" v)
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.list.Nil"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 396 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" u)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" u)
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.append"
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u) ("_position" v))))
###         ("_list" ("_position" v))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" u)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" u)
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.append"
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u) ("_position" v))))
###         ("_list" ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  hideDups :: "'a list => 'a option list"
### Ambiguous input (line 403 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" v)
###                 ("_applC" ("_position" set)
###                   ("\<^const>List.list.Cons" ("_position" x)
###                     ("_applC" ("_position" between)
###                       ("_cargs"
###                         ("_applC" ("_position" vertices) ("_position" f))
###                         ("_cargs" ("_position" x)
###                           ("_position" y)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("_position" nextElem)
###         ("_cargs"
###           ("\<^const>List.list.Cons" ("_position" x)
###             ("\<^const>List.append"
###               ("_applC" ("_position" between)
###                 ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###                   ("_cargs" ("_position" x) ("_position" y))))
###               ("_list" ("_position" y))))
###           ("_cargs" ("_position" z) ("_position" v)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" v)
###                 ("_applC" ("_position" set)
###                   ("\<^const>List.list.Cons" ("_position" x)
###                     ("_applC" ("_position" between)
###                       ("_cargs"
###                         ("_applC" ("_position" vertices) ("_position" f))
###                         ("_cargs" ("_position" x)
###                           ("_position" y)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("_position" nextElem)
###         ("_cargs"
###           ("\<^const>List.list.Cons" ("_position" x)
###             ("\<^const>List.append"
###               ("_applC" ("_position" between)
###                 ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###                   ("_cargs" ("_position" x) ("_position" y))))
###               ("_list" ("_position" y))))
###           ("_cargs" ("_position" z) ("_position" v)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Enumerator"
### 0.281s elapsed time, 1.004s cpu time, 0.096s GC time
Loading theory "Draft.Plane" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.FaceDivisionProps")
### theory "Draft.GraphProps"
### 0.284s elapsed time, 1.010s cpu time, 0.096s GC time
Loading theory "Draft.EnumeratorProps" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.FaceDivisionProps")
### theory "HOL-Library.Tree"
### 2.167s elapsed time, 7.188s cpu time, 1.390s GC time
Loading theory "Draft.Templates" (required by "Draft.FaceDivisionPropsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.182s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FaceDivisionPropsTemplates")
### theory "Draft.EnumeratorProps"
### 0.270s elapsed time, 0.817s cpu time, 0.061s GC time
consts
  containsUnacceptableEdgeSnd ::
    "(nat => nat => bool) => nat => nat list => bool"
consts
  containsUnacceptableEdge :: "(nat => nat => bool) => nat list => bool"
### theory "Draft.Plane"
### 0.379s elapsed time, 1.080s cpu time, 0.133s GC time
Loading theory "Draft.FaceDivisionProps" (required by "Draft.FaceDivisionPropsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.613s elapsed time, 1.475s cpu time, 0.240s GC time
### Ambiguous input (line 1398 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" last)
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_position" v)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" vertices) ("_position" f)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))
###           ("_applC" ("_position" hd)
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" last)
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_position" v)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" vertices) ("_position" f)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))
###           ("_applC" ("_position" hd)
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1622 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" length)
###             ("_applC" ("_position" vertices) ("_position" f)))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal"
###             ("_applC" ("_position" last)
###               ("_applC" ("_position" verticesFrom)
###                 ("_cargs" ("_position" f) ("_position" v))))
###             ("_position" u)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" verticesFrom)
###                   ("_cargs" ("_position" f) ("_position" v)))
###                 ("_position" i))
###               ("_position" u)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" u))
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" verticesFrom)
###                   ("_cargs" ("_position" f) ("_position" v)))
###                 ("_applC" ("_position" Suc) ("_position" i))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" length)
###             ("_applC" ("_position" vertices) ("_position" f)))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal"
###             ("_applC" ("_position" last)
###               ("_applC" ("_position" verticesFrom)
###                 ("_cargs" ("_position" f) ("_position" v))))
###             ("_position" u)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" verticesFrom)
###                   ("_cargs" ("_position" f) ("_position" v)))
###                 ("_position" i))
###               ("_position" u)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" u))
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" verticesFrom)
###                   ("_cargs" ("_position" f) ("_position" v)))
###                 ("_applC" ("_position" Suc) ("_position" i))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  natToVertexListRec :: "nat => nat => face => nat list => nat option list"
consts
  natToVertexList :: "nat => face => nat list => nat option list"
### Ambiguous input (line 3534 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" i)
###           ("_applC" ("_position" set) ("_position" is))
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length)
###               ("_applC" ("_position" vertices) ("_position" f))))))
###       ("\<^const>Pure.all_binder" ("_position" a)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("_applC" ("_position" length)
###                 ("_applC" ("_position" vertices) ("_position" f)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" hideDupsRec)
###                 ("_cargs"
###                   ("_applC"
###                     ("\<^const>Nat.compower"
###                       ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a))
###                     ("_position" v))
###                   ("_listcompr"
###                     ("_applC"
###                       ("\<^const>Nat.compower"
###                         ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" k))
###                       ("_position" v))
###                     ("_lc_gen" ("_position" k) ("_position" is))
###                     ("_lc_end"))))
###               ("_applC" ("_position" natToVertexListRec)
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" f) ("_position" is))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" i)
###           ("_applC" ("_position" set) ("_position" is))
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length)
###               ("_applC" ("_position" vertices) ("_position" f))))))
###       ("\<^const>Pure.all_binder" ("_position" a)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("_applC" ("_position" length)
###                 ("_applC" ("_position" vertices) ("_position" f)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" hideDupsRec)
###                 ("_cargs"
###                   ("_applC"
###                     ("\<^const>Nat.compower"
###                       ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a))
###                     ("_position" v))
###                   ("_listcompr"
###                     ("_applC"
###                       ("\<^const>Nat.compower"
###                         ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" k))
###                       ("_position" v))
###                     ("_lc_gen" ("_position" k) ("_position" is))
###                     ("_lc_end"))))
###               ("_applC" ("_position" natToVertexListRec)
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" f) ("_position" is))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" i)
###           ("_applC" ("_position" set) ("_position" is))
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length)
###               ("_applC" ("_position" vertices) ("_position" f))))))
###       ("\<^const>Pure.all_binder" ("_position" a)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("_applC" ("_position" length)
###                 ("_applC" ("_position" vertices) ("_position" f)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" hideDupsRec)
###                 ("_cargs"
###                   ("_applC"
###                     ("\<^const>Nat.compower"
###                       ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a))
###                     ("_position" v))
###                   ("_listcompr"
###                     ("_applC"
###                       ("\<^const>Nat.compower"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_position" k))
###                       ("_position" v))
###                     ("_lc_gen" ("_position" k) ("_position" is))
###                     ("_lc_end"))))
###               ("_applC" ("_position" natToVertexListRec)
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" f) ("_position" is))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" i)
###           ("_applC" ("_position" set) ("_position" is))
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length)
###               ("_applC" ("_position" vertices) ("_position" f))))))
###       ("\<^const>Pure.all_binder" ("_position" a)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("_applC" ("_position" length)
###                 ("_applC" ("_position" vertices) ("_position" f)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" hideDupsRec)
###                 ("_cargs"
###                   ("_applC"
###                     ("\<^const>Nat.compower"
###                       ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a))
###                     ("_position" v))
###                   ("_listcompr"
###                     ("_applC"
###                       ("\<^const>Nat.compower"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_position" k))
###                       ("_position" v))
###                     ("_lc_gen" ("_position" k) ("_position" is))
###                     ("_lc_end"))))
###               ("_applC" ("_position" natToVertexListRec)
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" f) ("_position" is))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3912 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invalidVertexList)
###     ("_cargs" ("_position" g) ("_cargs" ("_position" f) ("_position" vs))))
###   ("_Ex_less" ("_position" i)
###     ("\<^const>Groups.minus_class.minus"
###       ("\<^const>List.length" ("_position" vs))
###       ("\<^const>Groups.one_class.one"))
###     ("_case_syntax" ("\<^const>List.nth" ("_position" vs) ("_position" i))
###       ("_case2" ("_case1" ("_position" None) ("_position" False))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" Some) ("_position" a))
###             ("_case_syntax"
###               ("\<^const>List.nth" ("_position" vs)
###                 ("\<^const>Groups.plus_class.plus" ("_position" i)
###                   ("\<^const>Groups.one_class.one")))
###               ("_case1" ("_position" None) ("_position" False))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" b))
###             ("_applC" ("_position" is_duplicateEdge)
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" a) ("_position" b)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invalidVertexList)
###     ("_cargs" ("_position" g) ("_cargs" ("_position" f) ("_position" vs))))
###   ("_Ex_less" ("_position" i)
###     ("\<^const>Groups.minus_class.minus"
###       ("\<^const>List.length" ("_position" vs))
###       ("\<^const>Groups.one_class.one"))
###     ("_case_syntax" ("\<^const>List.nth" ("_position" vs) ("_position" i))
###       ("_case2" ("_case1" ("_position" None) ("_position" False))
###         ("_case1" ("_applC" ("_position" Some) ("_position" a))
###           ("_case_syntax"
###             ("\<^const>List.nth" ("_position" vs)
###               ("\<^const>Groups.plus_class.plus" ("_position" i)
###                 ("\<^const>Groups.one_class.one")))
###             ("_case2" ("_case1" ("_position" None) ("_position" False))
###               ("_case1" ("_applC" ("_position" Some) ("_position" b))
###                 ("_applC" ("_position" is_duplicateEdge)
###                   ("_cargs" ("_position" g)
###                     ("_cargs" ("_position" f)
###                       ("_cargs" ("_position" a) ("_position" b)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Rewrite rule not in simpset:
### [| ?v'3 : \<V> ?f3; pre_between (vertices ?f3) ?u3 ?v3 |]
### ==> between (vertices ?f3) ?u3 ?v3 =
###     between (verticesFrom ?f3 ?v'3) ?u3 ?v3 ==
###     True
### Rewrite rule not in simpset:
### [| ?v'1 : \<V> ?f1; pre_between (vertices ?f1) ?u1 ?v1 |]
### ==> between (vertices ?f1) ?u1 ?v1 ==
###     between (verticesFrom ?f1 ?v'1) ?u1 ?v1
### Ambiguous input (line 4879 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pre_subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" v')
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" n)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Some) ("_position" u))
###                   ("_position" vol)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v))
###             ("_position" u))
###           ("\<^const>HOL.not_equal" ("_position" n)
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" pre_splitFace)
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" v)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_position" f)
###                     ("\<^const>List.upt"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" countVertices)
###                           ("_position" g))
###                         ("_position" n)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pre_subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" v')
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" n)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Some) ("_position" u))
###                   ("_position" vol)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v))
###             ("_position" u))
###           ("\<^const>HOL.not_equal" ("_position" n)
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" pre_splitFace)
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" v)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_position" f)
###                     ("\<^const>List.upt"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" countVertices)
###                           ("_position" g))
###                         ("_position" n)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4951 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pre_subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" v')
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" n)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Some) ("_position" u))
###                   ("_position" vol)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v))
###             ("_position" u))
###           ("\<^const>HOL.not_equal" ("_position" n)
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" f21)
###               ("_applC" ("_position" fst)
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" v)
###                         ("_cargs" ("_position" u)
###                           ("_cargs" ("_position" f)
###                             ("\<^const>List.upt"
###                               ("_applC" ("_position" countVertices)
###                                 ("_position" g))
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_applC" ("_position" countVertices)
###                                   ("_position" g))
###                                 ("_position" n))))))))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" g')
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" snd)
###                     ("_applC" ("_position" splitFace)
###                       ("_cargs" ("_position" g)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" u)
###                             ("_cargs" ("_position" f)
###                               ("\<^const>List.upt"
###                                 ("_applC" ("_position" countVertices)
###                                   ("_position" g))
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_applC" ("_position" countVertices)
###                                     ("_position" g))
###                                   ("_position" n))))))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" pre_subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f21)
###                     ("_cargs" ("_position" v')
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("\<^const>Groups.zero_class.zero")
###                           ("_position" vol))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pre_subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" v')
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" n)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Some) ("_position" u))
###                   ("_position" vol)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v))
###             ("_position" u))
###           ("\<^const>HOL.not_equal" ("_position" n)
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" f21)
###               ("_applC" ("_position" fst)
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" v)
###                         ("_cargs" ("_position" u)
###                           ("_cargs" ("_position" f)
###                             ("\<^const>List.upt"
###                               ("_applC" ("_position" countVertices)
###                                 ("_position" g))
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_applC" ("_position" countVertices)
###                                   ("_position" g))
###                                 ("_position" n))))))))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" g')
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" snd)
###                     ("_applC" ("_position" splitFace)
###                       ("_cargs" ("_position" g)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" u)
###                             ("_cargs" ("_position" f)
###                               ("\<^const>List.upt"
###                                 ("_applC" ("_position" countVertices)
###                                   ("_position" g))
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_applC" ("_position" countVertices)
###                                     ("_position" g))
###                                   ("_position" n))))))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" pre_subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f21)
###                     ("_cargs" ("_position" v')
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("\<^const>Groups.zero_class.zero")
###                           ("_position" vol))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.FaceDivisionProps"
### 1.623s elapsed time, 2.865s cpu time, 1.346s GC time
Loading theory "Draft.FaceDivisionPropsTemplates"
val templateLemmas =
   [("FaceDivisionProps.is_sublist_id", "is_sublist ?vs ?vs",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("FaceDivisionProps.finite_Edges", "finite (Edges ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("FaceDivisionProps.verticesFrom_hd", "hd (verticesFrom ?f ?v) = ?v",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("FaceDivisionProps.edges_makeFaceFinal",
     "\<E> (makeFaceFinal ?f ?g) = \<E> ?g",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("FaceDivisionProps.removeNones_none_hd",
     "removeNones (None # ?ls) = removeNones ?ls",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("FaceDivisionProps.vertices_makeFaceFinal",
     "vertices (makeFaceFinal ?f ?g) = vertices ?g",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("FaceDivisionProps.is_prefix_sublist",
     "is_prefix ?ls ?vs ==> is_sublist ?ls ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("FaceDivisionProps.pre_between_dist",
     "pre_between ?vs ?ram1.0 ?ram2.0 ==> distinct ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("FaceDivisionProps.len_faces_makeFaceFinal",
     "|faces (makeFaceFinal ?f ?g)| = |faces ?g|",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("FaceDivisionProps.natToVertexListRec_length",
     "|natToVertexListRec ?e ?v ?f ?es| = |?es|",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("FaceDivisionProps.nvlr_length",
     "|natToVertexListRec ?old ?v ?f ?ls| = |?ls|",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("FaceDivisionProps.removeNones_none_last",
     "removeNones (?ls @ [None]) = removeNones ?ls",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))),
       template_app (template_hole 4, template_var 0))),
    ("FaceDivisionProps.between_distinct",
     "distinct ?vs ==> distinct (between ?vs ?ram1.0 ?ram2.0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("FaceDivisionProps.pre_subdivFace_face_distinct",
     "pre_subdivFace_face ?f ?v ?vol ==> distinct (removeNones ?vol)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("FaceDivisionProps.splitFace_nonFinal_face",
     "~ final (fst (snd (splitFace ?g ?i ?j ?f' ?ns)))",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 4),
                           template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 0))))
             )
         )),
    ("FaceDivisionProps.is_nextElem_rev",
     "is_nextElem (rev ?zs) ?a ?b = is_nextElem ?zs ?b ?a",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_var 1))),
    ("FaceDivisionProps.is_sublist_hd_eq",
     "is_sublist [?a] ?vs = (?a : set ?vs)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FaceDivisionProps.removeNones_hd",
     "removeNones (Some ?a # ?ls) = ?a # removeNones ?ls",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 3, template_var 0)))),
    ("FaceDivisionProps.verticesFrom_split",
     "?v # tl (verticesFrom ?f ?v) = verticesFrom ?f ?v",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("FaceDivisionProps.before_r1",
     "before ?vs ?r1.0 ?r2.0 ==> ?r1.0 : set ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("FaceDivisionProps.before_r2",
     "before ?vs ?r1.0 ?r2.0 ==> ?r2.0 : set ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("FaceDivisionProps.is_nextElem_a",
     "is_nextElem ?vs ?a ?b ==> ?a : set ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("FaceDivisionProps.is_nextElem_b",
     "is_nextElem ?vs ?a ?b ==> ?b : set ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("FaceDivisionProps.pre_between_symI",
     "pre_between ?vs ?ram1.0 ?ram2.0 ==> pre_between ?vs ?ram2.0 ?ram1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("FaceDivisionProps.pre_between_r12",
     "pre_between ?vs ?ram1.0 ?ram2.0 ==> ?ram1.0 ~= ?ram2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("FaceDivisionProps.pre_between_r1",
     "pre_between ?vs ?ram1.0 ?ram2.0 ==> ?ram1.0 : set ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("FaceDivisionProps.pre_between_r2",
     "pre_between ?vs ?ram1.0 ?ram2.0 ==> ?ram2.0 : set ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("FaceDivisionProps.is_sublist_tl",
     "is_sublist (?a # ?as) ?vs ==> is_sublist ?as ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("FaceDivisionProps.is_nextElem_rotate_eq",
     "is_nextElem (rotate ?m ?ls) ?x ?y = is_nextElem ?ls ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0))),
    ("FaceDivisionProps.is_prefix_f",
     "is_prefix (?a # ?as) (?a # ?vs) = is_prefix ?as ?vs",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("FaceDivisionProps.removeNones_none_in",
     "removeNones (?as @ None # ?bs) = removeNones (?as @ ?bs)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("FaceDivisionProps.split_face_help",
     "Suc 0 < |vertices (fst (split_face ?f' ?v ?a ?nvl))|",
     template_inequation
      (less_than, template_app (template_hole 5, template_hole 4),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)))))),
    ("FaceDivisionProps.split_face_help'",
     "Suc 0 < |vertices (snd (split_face ?f' ?v ?a ?nvl))|",
     template_inequation
      (less_than, template_app (template_hole 5, template_hole 4),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)))))),
    ("FaceDivisionProps.pre_between_rotate1",
     "pre_between ?vs ?ram1.0 ?ram2.0 ==>
      pre_between (rotate1 ?vs) ?ram1.0 ?ram2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("FaceDivisionProps.is_sublist_in",
     "is_sublist (?a # ?as) ?vs ==> ?a : set ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("FaceDivisionProps.not_sublist_len",
     "|?ys| < |?xs| ==> ~ is_sublist ?xs ?ys",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)
               )
           ))),
    ("FaceDivisionProps.is_sublist_distinct",
     "[| is_sublist ?as ?vs; distinct ?vs |] ==> distinct ?as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("FaceDivisionProps.between_not_r1",
     "distinct ?vs ==> ?ram1.0 ~: set (between ?vs ?ram1.0 ?ram2.0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1),
                     template_var 0)))
               )
           ))),
    ("FaceDivisionProps.between_not_r2",
     "distinct ?vs ==> ?ram2.0 ~: set (between ?vs ?ram1.0 ?ram2.0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 0),
                     template_var 1)))
               )
           ))),
    ("FaceDivisionProps.Edges_rev_disj",
     "distinct ?xs ==> Edges (rev ?xs) Int Edges ?xs = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_app (template_hole 2, template_var 0)),
         template_hole 0))),
    ("FaceDivisionProps.is_prefix_add",
     "is_prefix ?ls ?vs ==> is_prefix (?as @ ?ls) (?as @ ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("FaceDivisionProps.is_sublist_add",
     "is_sublist ?as ?bs ==> is_sublist ?as (?xs @ ?bs @ ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("FaceDivisionProps.invalidVertexList_shorten",
     "invalidVertexList ?g ?f ?vol ==> invalidVertexList ?g ?f (?v # ?vol)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("FaceDivisionProps.pre_between_rotate",
     "pre_between ?vs ?ram1.0 ?ram2.0 ==>
      pre_between (rotate ?n ?vs) ?ram1.0 ?ram2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_var 1)
           ))),
    ("FaceDivisionProps.is_sublist_hd",
     "is_sublist (?a # ?as) ?vs ==> is_sublist [?a] ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)),
             template_var 0)
           ))),
    ("FaceDivisionProps.pre_split_face_p_between",
     "pre_split_face ?oldF ?ram1.0 ?ram2.0 ?newVertexList ==>
      pre_between (vertices ?oldF) ?ram1.0 ?ram2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)),
               template_var 2),
             template_var 1)
           ))),
    ("FaceDivisionProps.pre_split_face_symI",
     "pre_split_face ?oldF ?ram1.0 ?ram2.0 ?newVertexList ==>
      pre_split_face ?oldF ?ram2.0 ?ram1.0 ?newVertexList",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("FaceDivisionProps.removeNones_inI",
     "Some ?a : set ?ls ==> ?a : set (removeNones ?ls)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("FaceDivisionProps.is_nextElem_rotate1_aux",
     "is_nextElem (rotate ?m ?ls) ?x ?y ==> is_nextElem ?ls ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("FaceDivisionProps.pre_subdivFace'_distinct",
     "pre_subdivFace' ?g ?f ?v' ?v ?n ?vol ==> distinct (removeNones ?vol)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("FaceDivisionProps.pre_split_face_rev",
     "pre_split_face ?oldF ?ram1.0 ?ram2.0 ?newVertexList ==>
      pre_split_face ?oldF ?ram1.0 ?ram2.0 (rev ?newVertexList)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("FaceDivisionProps.nth_last", "Suc ?i = |?xs| ==> ?xs ! ?i = last ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FaceDivisionProps.verticesFrom_congs",
     "?v : \<V> ?f ==> vertices ?f \<cong> verticesFrom ?f ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("FaceDivisionProps.pre_splitFace_edges_f_in_g",
     "pre_splitFace ?g ?ram1.0 ?ram2.0 ?f ?vs ==> \<E> ?f <= \<E> ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 4)))),
    ("FaceDivisionProps.pre_splitFace_pre_split_face",
     "pre_splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?nvs ==>
      pre_split_face ?oldF ?ram1.0 ?ram2.0 ?nvs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("FaceDivisionProps.pre_splitFace_oldF",
     "pre_splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?nvs ==> ?oldF : \<F> ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 4)))
           ))),
    ("FaceDivisionProps.is_nextElem_sublistI",
     "is_sublist [?x, ?y] ?vs ==> is_nextElem ?vs ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_hole 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("FaceDivisionProps.is_sublist_in1",
     "is_sublist [?x, ?y] ?vs ==> ?y : set ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_hole 2))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("FaceDivisionProps.before_snd",
     "?r2.0 : set (snd (splitAt ?r1.0 ?vs)) ==> before ?vs ?r1.0 ?r2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 2)
           ))),
    ("FaceDivisionProps.is_sublist_trans",
     "[| is_sublist ?as ?bs; is_sublist ?bs ?cs |] ==> is_sublist ?as ?cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("FaceDivisionProps.Edges_rev",
     "Edges (rev ?zs) = {(b, a). (a, b) : Edges ?zs}",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3, template_app (template_hole 2, t_empty)))),
    ("FaceDivisionProps.in_Edges_rev",
     "((?a, ?b) : Edges (rev ?zs)) = ((?b, ?a) : Edges ?zs)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2)),
         template_app (template_hole 1, template_var 0)))),
    ("FaceDivisionProps.removeNones_last",
     "removeNones (?ls @ [Some ?a]) = removeNones ?ls @ [?a]",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_hole 3))),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 7, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("FaceDivisionProps.is_nextElem_congs_eq",
     "?ls \<cong> ?ms ==> is_nextElem ?ls ?x ?y = is_nextElem ?ms ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("FaceDivisionProps.nvl_length",
     "hd ?e = 0 ==> |natToVertexList ?v ?f ?e| = |?e|",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2), template_hole 3)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_var 2)),
         template_app (template_hole 0, template_var 2)))),
    ("FaceDivisionProps.verticesFrom_splitAt_v_fst",
     "distinct (verticesFrom ?f ?v) ==>
      fst (splitAt ?v (verticesFrom ?f ?v)) = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_hole 0))),
    ("FaceDivisionProps.splitAt_is_sublist2R",
     "?ram : set ?vs ==> is_sublist (?ram # snd (splitAt ?ram ?vs)) ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))),
             template_var 0)
           ))),
    ("FaceDivisionProps.notinset_notinEdge1",
     "?x ~: set ?xs ==> (?x, ?y) ~: Edges ?xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("FaceDivisionProps.notinset_notinEdge2",
     "?y ~: set ?xs ==> (?x, ?y) ~: Edges ?xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 2)),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("FaceDivisionProps.is_sublist_same_len",
     "|?xs| = |?ys| ==> is_sublist ?xs ?ys = (?xs = ?ys)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0)
              )],
         template_equation (template_var 1, template_var 0)))),
    ("FaceDivisionProps.makeFaceFinals_preserve_finals",
     "?f : set (finals ?g) ==> ?f : set (finals (makeFaceFinal ?f' ?g))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))))
           ))),
    ("FaceDivisionProps.is_prefix_hd",
     "is_prefix [?l] ?vs = (?l = hd ?vs & ?vs ~= [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_hole 5)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 5)))
           ))),
    ("FaceDivisionProps.removeNones_in",
     "removeNones (?as @ Some ?a # ?bs) =
      removeNones ?as @ ?a # removeNones ?bs",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 5, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 5, template_var 0))))),
    ("FaceDivisionProps.pre_between_before",
     "pre_between ?vs ?ram1.0 ?ram2.0 ==>
      before ?vs ?ram1.0 ?ram2.0 | before ?vs ?ram2.0 ?ram1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1))
           ))),
    ("FaceDivisionProps.split_face_distinct1'",
     "pre_split_face ?oldF ?ram1.0 ?ram2.0 ?newVertexList ==>
      distinct
       (vertices (fst (split_face ?oldF ?ram1.0 ?ram2.0 ?newVertexList)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0))))
           ))),
    ("FaceDivisionProps.split_face_distinct2'",
     "pre_split_face ?oldF ?ram1.0 ?ram2.0 ?newVertexList ==>
      distinct
       (vertices (snd (split_face ?oldF ?ram1.0 ?ram2.0 ?newVertexList)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0))))
           ))),
    ("FaceDivisionProps.len_vFrom",
     "?v : \<V> ?f ==> |verticesFrom ?f ?v| = |vertices ?f|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 3, template_var 0))))),
    ("FaceDivisionProps.verticesFrom_pres_nodes1",
     "?v : \<V> ?f ==> \<V> ?f = set (verticesFrom ?f ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("FaceDivisionProps.set_verticesFrom",
     "?v : \<V> ?f ==> set (verticesFrom ?f ?v) = \<V> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("FaceDivisionProps.nextVertices_in_face",
     "?v : \<V> ?f ==> ?f\<^bsup>?n\<^esup> \<bullet> ?v : \<V> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)))
           ))),
    ("FaceDivisionProps.before_dist_not1",
     "[| distinct ?vs; before ?vs ?ram1.0 ?ram2.0 |]
      ==> ~ before ?vs ?ram2.0 ?ram1.0",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0),
                 template_var 1)
               )
           ))),
    ("FaceDivisionProps.is_sublist_rev",
     "is_sublist [?a, ?b] (rev ?zs) = is_sublist [?b, ?a] ?zs",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1))),
         template_var 0))),
    ("FaceDivisionProps.nths_reduceIndices",
     "nths ?xs ?iset = nths ?xs {i. i < |?xs| & i : ?iset}",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, t_empty)))),
    ("FaceDivisionProps.before_dist_eq_snd",
     "distinct ?vs ==>
      (?r2.0 : set (snd (splitAt ?r1.0 ?vs))) = before ?vs ?r1.0 ?r2.0",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)))),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1)))),
    ("FaceDivisionProps.before_xor",
     "pre_between ?vs ?ram1.0 ?ram2.0 ==>
      (~ before ?vs ?ram1.0 ?ram2.0) = before ?vs ?ram2.0 ?ram1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1)))),
    ("FaceDivisionProps.splitAt_is_prefix",
     "?ram : set ?vs ==> is_prefix (fst (splitAt ?ram ?vs) @ [?ram]) ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0))),
             template_var 0)
           ))),
    ("FaceDivisionProps.splitAt_is_sublist1R",
     "?ram : set ?vs ==> is_sublist (fst (splitAt ?ram ?vs) @ [?ram]) ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0))),
             template_var 0)
           ))),
    ("FaceDivisionProps.pre_FaceDiv_between1",
     "pre_splitFace ?g' ?ram1.0 ?ram2.0 ?f [] ==>
      between (vertices ?f) ?ram1.0 ?ram2.0 ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 4)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 2),
               template_var 1),
             template_hole 4)
           ))),
    ("FaceDivisionProps.pre_FaceDiv_between2",
     "pre_splitFace ?g' ?ram1.0 ?ram2.0 ?f [] ==>
      between (vertices ?f) ?ram2.0 ?ram1.0 ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 4)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 1),
               template_var 2),
             template_hole 4)
           ))),
    ("FaceDivisionProps.disj_sets_disj_Edges",
     "set ?xs Int set ?ys = {} ==> Edges ?xs Int Edges ?ys = {}",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1)),
            template_app (template_hole 5, template_var 0)),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("FaceDivisionProps.disj_sets_disj_Edges2",
     "set ?ys Int set ?xs = {} ==> Edges ?xs Int Edges ?ys = {}",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1)),
            template_app (template_hole 5, template_var 0)),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("FaceDivisionProps.is_nextElem_between_empty",
     "[| distinct ?vs; is_nextElem ?vs ?a ?b |] ==> between ?vs ?a ?b = []",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("FaceDivisionProps.verticesFrom_distinct",
     "[| distinct (vertices ?f); ?v : \<V> ?f |]
      ==> distinct (verticesFrom ?f ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 3, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FaceDivisionProps.is_nextElem_edges_eq",
     "distinct (vertices ?f) ==>
      ((?a, ?b) : \<E> ?f) = is_nextElem (vertices ?f) ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app (template_hole 1, template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 5, template_var 2)),
             template_var 1),
           template_var 0)))),
    ("FaceDivisionProps.verticesFrom_splitAt_v_snd",
     "distinct (verticesFrom ?f ?v) ==>
      snd (splitAt ?v (verticesFrom ?f ?v)) = tl (verticesFrom ?f ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("FaceDivisionProps.verticesFrom_empty",
     "?v : \<V> ?f ==> (verticesFrom ?f ?v = []) = (vertices ?f = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_hole 0),
         template_equation
          (template_app (template_hole 4, template_var 0),
           template_hole 0)))),
    ("FaceDivisionProps.splitFace_distinct2",
     "pre_splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVertexList ==>
      distinct
       (vertices
         (fst (splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVertexList)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0))))
           ))),
    ("FaceDivisionProps.nths_take",
     "ALL i:?iset. i < ?n ==> nths (take ?n ?xs) ?iset = nths ?xs ?iset",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("FaceDivisionProps.in_Edges_in_set",
     "(?x, ?y) : Edges ?vs ==> ?x : set ?vs & ?y : set ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 0))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("FaceDivisionProps.natToVertexList_length",
     "incrIndexList ?es |?es| |vertices ?f| ==>
      |natToVertexList ?v ?f ?es| = |?es|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_app (template_hole 4, template_var 2)),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 2)),
         template_app (template_hole 4, template_var 2)))),
    ("FaceDivisionProps.natToVertexList_hd",
     "incrIndexList ?es |?es| |vertices ?f| ==>
      hd (natToVertexList ?v ?f ?es) = Some ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_app (template_hole 5, template_var 2)),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_var 2)),
         template_app (template_hole 0, template_var 0)))),
    ("FaceDivisionProps.before_dist_r1",
     "[| distinct ?vs; before ?vs ?r1.0 ?r2.0 |]
      ==> ?r1.0 : set (fst (splitAt ?r2.0 ?vs))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))))
           ))),
    ("FaceDivisionProps.before_dist_r2",
     "[| distinct ?vs; before ?vs ?r1.0 ?r2.0 |]
      ==> ?r2.0 : set (snd (splitAt ?r1.0 ?vs))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2))))
           ))),
    ("FaceDivisionProps.split_face_empty_ram1_ram2_in_f21'",
     "pre_split_face ?oldF ?ram1.0 ?ram2.0 [] ==>
      (?ram1.0, ?ram2.0)
      : \<E> (snd (split_face ?oldF ?ram1.0 ?ram2.0 []))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1),
                     template_var 0),
                   template_hole 5))))
           ))),
    ("FaceDivisionProps.split_face_empty_ram2_ram1_in_f12'",
     "pre_split_face ?oldF ?ram1.0 ?ram2.0 [] ==>
      (?ram2.0, ?ram1.0)
      : \<E> (fst (split_face ?oldF ?ram1.0 ?ram2.0 []))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1)),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1),
                     template_var 0),
                   template_hole 5))))
           ))),
    ("FaceDivisionProps.splitFace_distinct1",
     "pre_splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVertexList ==>
      distinct
       (vertices
         (fst (snd (splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVertexList))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 0, template_var 4),
                           template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 0)))))
           ))),
    ("FaceDivisionProps.before_dist_not_r1",
     "[| distinct ?vs; before ?vs ?r1.0 ?r2.0 |]
      ==> ?r1.0 ~: set (snd (splitAt ?r2.0 ?vs))",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 2))))
               )
           ))),
    ("FaceDivisionProps.before_dist_not_r2",
     "[| distinct ?vs; before ?vs ?r1.0 ?r2.0 |]
      ==> ?r2.0 ~: set (fst (splitAt ?r1.0 ?vs))",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 2))))
               )
           ))),
    ("FaceDivisionProps.is_sublist_notlast",
     "[| distinct ?vs; ?x = last ?vs |] ==> ~ is_sublist [?x, ?y] ?vs",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_equation
         (template_var 1, template_app (template_hole 4, template_var 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_hole 0))),
                 template_var 2)
               )
           ))),
    ("FaceDivisionProps.is_sublist_y_hd",
     "[| distinct ?vs; ?y = hd ?vs |] ==> ~ is_sublist [?x, ?y] ?vs",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_equation
         (template_var 1, template_app (template_hole 4, template_var 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_hole 0))),
                 template_var 2)
               )
           ))),
    ("FaceDivisionProps.is_nextElem_edges2",
     "[| distinct (vertices ?f); is_nextElem (vertices ?f) ?a ?b |]
      ==> (?a, ?b) : \<E> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 4, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("FaceDivisionProps.is_nextElem_edges1",
     "[| distinct (vertices ?f); (?a, ?b) : \<E> ?f |]
      ==> is_nextElem (vertices ?f) ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 4, template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("FaceDivisionProps.pre_subdivFace_face_in_f'",
     "[| pre_subdivFace_face ?f ?v ?ls; Some ?a : set ?ls |]
      ==> ?a : \<V> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)))
           ))),
    ("FaceDivisionProps.pre_splitFace_edges_f_in_g2",
     "[| pre_splitFace ?g ?ram1.0 ?ram2.0 ?f ?vs; ?x : \<E> ?f |]
      ==> ?x : \<E> ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 0, template_var 5))
           ))),
    ("FaceDivisionProps.is_sublist_distinct_prefix",
     "[| is_sublist (?v # ?as) (?v # ?vs); distinct (?v # ?vs) |]
      ==> is_prefix ?as ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("FaceDivisionProps.Edges_Cons",
     "Edges (?x # ?xs) =
      (if ?xs = [] then {} else Edges ?xs Un {(?x, hd ?xs)})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 5)),
               template_hole 4),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 9, template_var 0)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app (template_hole 0, template_var 0))),
                 template_hole 4)))
           ))),
    ("FaceDivisionProps.between_inter_empty",
     "pre_between ?vs ?ram1.0 ?ram2.0 ==>
      set (between ?vs ?ram1.0 ?ram2.0) Int
      set (between ?vs ?ram2.0 ?ram1.0) =
      {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0))),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0),
               template_var 1))),
         template_hole 0))),
    ("FaceDivisionProps.is_sublist_simp",
     "?a ~= ?v ==>
      is_sublist (?a # ?as) (?v # ?vs) = is_sublist (?a # ?as) ?vs",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0)))),
    ("FaceDivisionProps.subdivFace_subdivFace'_eq",
     "pre_subdivFace ?g ?f ?v ?vol ==>
      subdivFace ?g ?f ?vol = subdivFace' ?g ?f ?v 0 (tl ?vol)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("FaceDivisionProps.verticesFrom_is_nextElem",
     "?v : \<V> ?f ==>
      is_nextElem (vertices ?f) ?a ?b =
      is_nextElem (verticesFrom ?f ?v) ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3)),
             template_var 1),
           template_var 0)))),
    ("FaceDivisionProps.pre_subdivFace'_None",
     "pre_subdivFace' ?g ?f ?v' ?v ?n (None # ?vol) ==>
      pre_subdivFace' ?g ?f ?v' ?v (Suc ?n) ?vol",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("FaceDivisionProps.pre_subdivFace'_Some2",
     "pre_subdivFace' ?g ?f ?v' ?v 0 (Some ?u # ?vol) ==>
      pre_subdivFace' ?g ?f ?v' ?u 0 ?vol",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_hole 2),
              template_app
               (template_app
                 (template_hole 1,
                  template_app (template_hole 0, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 1),
               template_hole 2),
             template_var 0)
           ))),
    ("FaceDivisionProps.splitAt_fst",
     "[| distinct ?xs; ?xs = ?a @ ?v # ?b |] ==> fst (splitAt ?v ?xs) = ?a",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3)),
         template_var 2))),
    ("FaceDivisionProps.splitAt_snd",
     "[| distinct ?xs; ?xs = ?a @ ?v # ?b |] ==> snd (splitAt ?v ?xs) = ?b",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3)),
         template_var 0))),
    ("FaceDivisionProps.pre_subdivFace_face_in_f",
     "[| pre_subdivFace_face ?f ?v ?ls; Some ?a : set ?ls |]
      ==> ?a : set (verticesFrom ?f ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)))
           ))),
    ("FaceDivisionProps.in_set_repl",
     "[| ?f : set ?fs; ?f ~= ?f' |] ==> ?f : set (replace ?f' ?fs' ?fs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            ),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)))
           ))),
    ("FaceDivisionProps.before_fst",
     "[| ?r2.0 : set ?vs; ?r1.0 : set (fst (splitAt ?r2.0 ?vs)) |]
      ==> before ?vs ?r1.0 ?r2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("FaceDivisionProps.verticesFrom_in'",
     "[| ?a : set (verticesFrom ?f ?v); ?a ~= ?v |] ==> ?a : \<V> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_hole 4,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("FaceDivisionProps.snd_snd_splitFace_edges_incr",
     "pre_splitFace ?g ?v\<^sub>1 ?v\<^sub>2 ?f ?vs ==>
      \<E> ?g
      <= \<E> (snd (snd (splitFace ?g ?v\<^sub>1 ?v\<^sub>2 ?f ?vs)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 4),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0))))))),
    ("FaceDivisionProps.verticesFrom_length",
     "[| distinct (vertices ?f); ?v : \<V> ?f |]
      ==> |verticesFrom ?f ?v| = |vertices ?f|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 5, template_var 1)))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 5, template_var 1))))),
    ("FaceDivisionProps.last_vFrom",
     "[| distinct (vertices ?f); ?x : \<V> ?f |]
      ==> last (verticesFrom ?f ?x) = ?f\<^bsup>-1\<^esup> \<bullet> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 1)))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FaceDivisionProps.between_congs",
     "[| pre_between ?vs ?ram1.0 ?ram2.0; ?vs \<cong> ?vs' |]
      ==> between ?vs ?ram1.0 ?ram2.0 = between ?vs' ?ram1.0 ?ram2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1)))),
    ("FaceDivisionProps.in_set_repl_setFin",
     "[| ?f : set ?fs; final ?f |]
      ==> ?f : set (replace ?f' [setFinal ?f'] ?fs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)),
                     template_hole 0)),
                 template_var 1)))
           ))),
    ("FaceDivisionProps.pre_subdivFace_in_f",
     "[| pre_subdivFace ?g ?f ?v ?ls; Some ?a : set ?ls |]
      ==> ?a : set (verticesFrom ?f ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)))
           ))),
    ("FaceDivisionProps.verticesFrom_in",
     "[| ?v : \<V> ?f; ?a : \<V> ?f |] ==> ?a : set (verticesFrom ?f ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)))
           ))),
    ("FaceDivisionProps.verticesFrom_pres_nodes",
     "[| ?v : \<V> ?f; ?w : \<V> ?f |] ==> ?w : set (verticesFrom ?f ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)))
           ))),
    ("FaceDivisionProps.subdivFace_pres_finals",
     "[| ?f : set (finals ?g); ~ final ?f' |]
      ==> ?f : set (finals (subdivFace ?g ?f' ?is))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1),
                   template_var 0))))
           ))),
    ("FaceDivisionProps.is_nextElem_last_ne",
     "[| distinct ?vs; is_nextElem ?vs ?x ?y; ?x = last ?vs |]
      ==> ?vs ~= []",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation
         (template_var 1, template_app (template_hole 3, template_var 2))],
       template_negation
        (template_equation (template_var 2, template_hole 0)))),
    ("FaceDivisionProps.is_nextElem_last_hd",
     "[| distinct ?vs; is_nextElem ?vs ?x ?y; ?x = last ?vs |]
      ==> ?y = hd ?vs",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation
         (template_var 1, template_app (template_hole 1, template_var 2))],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 2)))),
    ("FaceDivisionProps.between_distinct_r12",
     "[| distinct ?vs; ?ram1.0 ~= ?ram2.0 |]
      ==> distinct (?ram1.0 # between ?vs ?ram1.0 ?ram2.0 @ [?ram2.0])",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 0))))
           ))),
    ("FaceDivisionProps.split_face_distinct1",
     "[| (?f12.0, ?f21.0) = split_face ?oldF ?ram1.0 ?ram2.0 ?newVertexList;
         pre_split_face ?oldF ?ram1.0 ?ram2.0 ?newVertexList |]
      ==> distinct (vertices ?f12.0)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 5), template_var 4),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 5))
           ))),
    ("FaceDivisionProps.split_face_distinct2",
     "[| (?f12.0, ?f21.0) = split_face ?oldF ?ram1.0 ?ram2.0 ?newVertexList;
         pre_split_face ?oldF ?ram1.0 ?ram2.0 ?newVertexList |]
      ==> distinct (vertices ?f21.0)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 5), template_var 4),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 4))
           ))),
    ("FaceDivisionProps.before_filter",
     "[| filter ?P ?xs = ?ys; distinct ?xs; before ?ys ?u ?v |]
      ==> before ?xs ?u ?v",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 3),
          template_var 2),
        template_predicate (template_app (template_hole 1, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("FaceDivisionProps.filter_Cons2",
     "?x ~: set ?ys ==> filter (%y. y = ?x | ?P y) ?ys = filter ?P ?ys",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 4, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_app
          (template_app (template_hole 2, t_empty), template_var 1)))),
    ("FaceDivisionProps.before_dist_eq_fst",
     "[| distinct ?vs; ?r2.0 : set ?vs |]
      ==> (?r1.0 : set (fst (splitAt ?r2.0 ?vs))) = before ?vs ?r1.0 ?r2.0",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_hole 4,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)))),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1)))),
    ("FaceDivisionProps.nextElem_is_nextElem",
     "[| distinct ?xs; ?x : set ?xs |]
      ==> is_nextElem ?xs ?x ?y = (nextElem ?xs (hd ?xs) ?x = ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0)
              )],
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0)))),
    ("FaceDivisionProps.before_dist_fst",
     "[| before ?vs ?ram1.0 ?ram2.0; distinct ?vs |]
      ==> fst (splitAt ?ram1.0 (fst (splitAt ?ram2.0 ?vs))) =
          fst (splitAt ?ram1.0 ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("FaceDivisionProps.before_dist_snd",
     "[| before ?vs ?ram1.0 ?ram2.0; distinct ?vs |]
      ==> fst (splitAt ?ram1.0 (snd (splitAt ?ram2.0 ?vs))) =
          snd (splitAt ?ram2.0 ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2))))),
    ("FaceDivisionProps.subdivFace'_preserve_finals",
     "[| ?f : set (finals ?g); ~ final ?f' |]
      ==> ?f : set (finals (subdivFace' ?g ?f' ?i ?n ?is))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 4)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 5),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0))))
           ))),
    ("FaceDivisionProps.is_nextElem_circ",
     "[| distinct ?xs; is_nextElem ?xs ?a ?b; is_nextElem ?xs ?b ?a |]
      ==> |?xs| <= 2",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("FaceDivisionProps.is_sublist_rec",
     "is_sublist ?xs ?ys =
      (if |?ys| < |?xs| then False
       else if ?xs = take |?xs| ?ys then True
            else is_sublist ?xs (tl ?ys))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 0)),
                   template_app (template_hole 5, template_var 1))),
               template_hole 4),
             template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 5, template_var 1)),
                       template_var 0))),
                 template_hole 1),
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("FaceDivisionProps.between_nextElem",
     "pre_between ?vs ?u ?v ==>
      between ?vs ?u (nextElem ?vs (hd ?vs) ?v) = between ?vs ?u ?v @ [?v]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_app (template_hole 3, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("FaceDivisionProps.len_nonFinals_makeFaceFinal",
     "[| ~ final ?f; ?f : \<F> ?g |]
      ==> |nonFinals (makeFaceFinal ?f ?g)| = |nonFinals ?g| - 1",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0))),
           template_hole 0)))),
    ("FaceDivisionProps.pre_subdivFace_pre_subdivFace'",
     "[| ?v : \<V> ?f; pre_subdivFace ?g ?f ?v (?vo # ?vol) |]
      ==> pre_subdivFace' ?g ?f ?v ?v 0 ?vol",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 3),
                template_var 4),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 3),
                   template_var 4),
                 template_var 4),
               template_hole 0),
             template_var 0)
           ))),
    ("FaceDivisionProps.len_finals_makeFaceFinal",
     "[| ?f : \<F> ?g; ~ final ?f |]
      ==> |finals (makeFaceFinal ?f ?g)| = |finals ?g| + 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0))),
           template_hole 0)))),
    ("FaceDivisionProps.is_nextElem2",
     "[| distinct ?vs; ?x : set ?vs; is_nextElem ?vs ?x ?y |]
      ==> nextElem ?vs (hd ?vs) ?x = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("FaceDivisionProps.is_nextElem1",
     "[| distinct ?vs; ?x : set ?vs; nextElem ?vs (hd ?vs) ?x = ?y |]
      ==> is_nextElem ?vs ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 2))
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 2)),
            template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("FaceDivisionProps.is_sublist_eq",
     "[| distinct ?vs; ?c ~= ?y |]
      ==> (nextElem ?vs ?c ?x = ?y) = is_sublist [?x, ?y] ?vs",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0))),
           template_var 3)))),
    ("FaceDivisionProps.verticesFrom_v",
     "[| distinct (vertices ?f); vertices ?f = ?a @ ?v # ?b |]
      ==> verticesFrom ?f ?v = ?v # ?b @ ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 3))
            ),
        template_equation
         (template_app (template_hole 4, template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2))))),
    ("FaceDivisionProps.set_finals_makeFaceFinal",
     "[| distinct (faces ?g); ?f : \<F> ?g |]
      ==> set (finals (makeFaceFinal ?f ?g)) =
          insert (setFinal ?f) (set (finals ?g))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 7, template_var 1)))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_hole 5,
             template_app (template_hole 3, template_var 1)))))),
    ("FaceDivisionProps.between_simp1",
     "[| before ?vs ?ram1.0 ?ram2.0; pre_between ?vs ?ram1.0 ?ram2.0 |]
      ==> between ?vs ?ram1.0 ?ram2.0 =
          fst (splitAt ?ram2.0 (snd (splitAt ?ram1.0 ?vs)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2))))))),
    ("FaceDivisionProps.split_face_empty_ram1_ram2_in_f21",
     "[| pre_split_face ?oldF ?ram1.0 ?ram2.0 [];
         (?f12.0, ?f21.0) = split_face ?oldF ?ram1.0 ?ram2.0 [] |]
      ==> (?ram1.0, ?ram2.0) : \<E> ?f21.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3),
                template_var 2),
              template_hole 6)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2),
            template_hole 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("FaceDivisionProps.split_face_empty_ram2_ram1_in_f12",
     "[| pre_split_face ?oldF ?ram1.0 ?ram2.0 [];
         (?f12.0, ?f21.0) = split_face ?oldF ?ram1.0 ?ram2.0 [] |]
      ==> (?ram2.0, ?ram1.0) : \<E> ?f12.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3),
                template_var 2),
              template_hole 6)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2),
            template_hole 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("FaceDivisionProps.splitFace_preserve_final",
     "[| ?f : set (finals ?g); ~ final ?f' |]
      ==> ?f : set (finals (snd (snd (splitFace ?g ?i ?j ?f' ?ns))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 4)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 5),
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 0, template_var 4),
                             template_var 2),
                           template_var 1),
                         template_var 3),
                       template_var 0))))))
           ))),
    ("FaceDivisionProps.before_dist_fst_fst",
     "[| before ?vs ?ram1.0 ?ram2.0; distinct ?vs |]
      ==> fst (splitAt ?ram2.0 (fst (splitAt ?ram1.0 ?vs))) =
          fst (splitAt ?ram1.0 (fst (splitAt ?ram2.0 ?vs)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))))))),
    ("FaceDivisionProps.before_dist_fst_snd",
     "[| before ?vs ?ram1.0 ?ram2.0; distinct ?vs |]
      ==> fst (splitAt ?ram2.0 (snd (splitAt ?ram1.0 ?vs))) =
          snd (splitAt ?ram1.0 (fst (splitAt ?ram2.0 ?vs)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2))))))),
    ("FaceDivisionProps.before_dist_snd_fst",
     "[| before ?vs ?ram1.0 ?ram2.0; distinct ?vs |]
      ==> snd (splitAt ?ram2.0 (fst (splitAt ?ram1.0 ?vs))) =
          snd (splitAt ?ram1.0 (snd (splitAt ?ram2.0 ?vs)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2))))))),
    ("FaceDivisionProps.before_dist_snd_snd",
     "[| before ?vs ?ram1.0 ?ram2.0; distinct ?vs |]
      ==> snd (splitAt ?ram2.0 (snd (splitAt ?ram1.0 ?vs))) =
          fst (splitAt ?ram1.0 (snd (splitAt ?ram2.0 ?vs)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2))))))),
    ("FaceDivisionProps.splitFace_f12_new_vertices",
     "[| (?f12.0, ?f21.0, ?newGraph) =
         splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVs;
         ?v : set ?newVs |]
      ==> ?v : \<V> ?f12.0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 8),
            template_app
             (template_app (template_hole 4, template_var 7),
              template_var 6)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 8)))
           ))),
    ("FaceDivisionProps.splitFace_f21_new_vertices",
     "[| (?f12.0, ?f21.0, ?newGraph) =
         splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVs;
         ?v : set ?newVs |]
      ==> ?v : \<V> ?f21.0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 8),
            template_app
             (template_app (template_hole 4, template_var 7),
              template_var 6)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 7)))
           ))),
    ("FaceDivisionProps.splitFace_add_vertices_direct",
     "vertices
       (snd (snd (splitFace ?g ?ram1.0 ?ram2.0 ?oldF
                   [countVertices ?g..<countVertices ?g + ?n]))) =
      vertices ?g @ [countVertices ?g..<countVertices ?g + ?n]",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 4)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 2, template_var 4)),
                   template_var 0)))))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 7, template_var 4)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 4)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 4)),
             template_var 0))))),
    ("FaceDivisionProps.verticesFrom_ram1",
     "pre_split_face ?f ?ram1.0 ?ram2.0 ?vs ==>
      verticesFrom ?f ?ram1.0 =
      ?ram1.0 #
      between (vertices ?f) ?ram1.0 ?ram2.0 @
      ?ram2.0 # between (vertices ?f) ?ram2.0 ?ram1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 3)),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 3)),
                   template_var 1),
                 template_var 2))))))),
    ("FaceDivisionProps.splitFace_add_f21'",
     "?f' : \<F> ?g' ==>
      fst (snd (splitFace ?g' ?v ?a ?f' ?nvl))
      : \<F> (snd (snd (splitFace ?g' ?v ?a ?f' ?nvl)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 1, template_var 3),
                           template_var 2),
                         template_var 1),
                       template_var 4),
                     template_var 0)))),
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 1, template_var 3),
                             template_var 2),
                           template_var 1),
                         template_var 4),
                       template_var 0))))))
           ))),
    ("FaceDivisionProps.between_simp2",
     "[| before ?vs ?ram1.0 ?ram2.0; pre_between ?vs ?ram1.0 ?ram2.0 |]
      ==> between ?vs ?ram2.0 ?ram1.0 =
          snd (splitAt ?ram2.0 ?vs) @ fst (splitAt ?ram1.0 ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2))),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)))))),
    ("FaceDivisionProps.verticesFrom_between",
     "[| ?v' : \<V> ?f; pre_between (vertices ?f) ?u ?v |]
      ==> between (vertices ?f) ?u ?v =
          between (verticesFrom ?f ?v') ?u ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 4, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 4, template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3)),
             template_var 1),
           template_var 0)))),
    ("FaceDivisionProps.nextElem_suc2",
     "[| distinct (vertices ?f); last (vertices ?f) = ?v; ?v : \<V> ?f |]
      ==> ?f \<bullet> ?v = hd (vertices ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1))
            ),
        template_equation
         (template_app
           (template_hole 4,
            template_app (template_hole 6, template_var 1)),
          template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 6, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_hole 0,
           template_app (template_hole 6, template_var 1))))),
    ("FaceDivisionProps.nextElem_congs_eq",
     "[| ?xs \<cong> ?ys; distinct ?xs; ?x : set ?xs |]
      ==> nextElem ?xs (hd ?xs) ?x = nextElem ?ys (hd ?ys) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("FaceDivisionProps.verticesFrom_is_nextElem_hd",
     "[| ?v' : \<V> ?f; distinct (vertices ?f);
         is_nextElem (verticesFrom ?f ?v') ?u ?v' |]
      ==> ?u = last (verticesFrom ?f ?v')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 2)),
                template_var 0),
              template_var 2)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2))))),
    ("FaceDivisionProps.verticesFrom_is_nextElem_last",
     "[| ?v' : \<V> ?f; distinct (vertices ?f);
         is_nextElem (verticesFrom ?f ?v') (last (verticesFrom ?f ?v'))
          ?v |]
      ==> ?v = ?v'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 2)),
                template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 2))),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 2))),
    ("FaceDivisionProps.edges_conv_Edges",
     "distinct (vertices ?f) ==>
      \<E> ?f =
      Edges (vertices ?f) Un
      (if vertices ?f = [] then {}
       else {(last (vertices ?f), hd (vertices ?f))})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 13,
              template_app (template_hole 12, template_var 0))
            )],
       template_implication
        ([template_predicate
           (template_app (template_hole 10, template_var 0))],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 12, template_var 0))),
               template_app
                (template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app (template_hole 12, template_var 0)),
                       template_hole 5)),
                   template_hole 4),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 12, template_var 0))),
                       template_app
                        (template_hole 0,
                         template_app (template_hole 12, template_var 0)))),
                   template_hole 4)))
             )))),
    ("FaceDivisionProps.splitFace_edges_incr",
     "[| pre_splitFace ?g ?ram1.0 ?ram2.0 ?f ?vs;
         (?f\<^sub>1, ?f\<^sub>2, ?g') =
         splitFace ?g ?ram1.0 ?ram2.0 ?f ?vs |]
      ==> \<E> ?g <= \<E> ?g'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4),
            template_var 3))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 7),
         template_app (template_hole 0, template_var 0)))),
    ("FaceDivisionProps.before_or",
     "[| ?ram1.0 : set ?vs; ?ram2.0 : set ?vs; ?ram1.0 ~= ?ram2.0 |]
      ==> before ?vs ?ram1.0 ?ram2.0 | before ?vs ?ram2.0 ?ram1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            ),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("FaceDivisionProps.splitFace_empty_ram1_ram2_in_f21",
     "[| pre_splitFace ?g ?ram1.0 ?ram2.0 ?oldF [];
         (?f12.0, ?f21.0, ?newGraph) =
         splitFace ?g ?ram1.0 ?ram2.0 ?oldF [] |]
      ==> (?ram1.0, ?ram2.0) : \<E> ?f21.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_hole 7)
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3),
            template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("FaceDivisionProps.splitFace_empty_ram2_ram1_in_f12",
     "[| pre_splitFace ?g ?ram1.0 ?ram2.0 ?oldF [];
         (?f12.0, ?f21.0, ?newGraph) =
         splitFace ?g ?ram1.0 ?ram2.0 ?oldF [] |]
      ==> (?ram2.0, ?ram1.0) : \<E> ?f12.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_hole 7)
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3),
            template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 5)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("FaceDivisionProps.natToVertexList_nth_0",
     "[| incrIndexList ?es |?es| |vertices ?f|; 0 < |?es| |]
      ==> natToVertexList ?v ?f ?es ! 0 =
          Some ?f\<^bsup>?es ! 0\<^esup> \<bullet> ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_app (template_hole 9, template_var 2)),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)))
            ),
        template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 9, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1),
               template_var 2)),
           template_hole 6),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_hole 6)),
             template_var 0))))),
    ("FaceDivisionProps.verticesFrom_nth",
     "[| distinct (vertices ?f); ?d < |vertices ?f|; ?v : \<V> ?f |]
      ==> verticesFrom ?f ?v ! ?d = ?f\<^bsup>?d\<^esup> \<bullet> ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 2))
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 6,
            template_app (template_hole 8, template_var 2))),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 8, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("FaceDivisionProps.Edges_append",
     "Edges (?xs @ ?ys) =
      (if ?xs = [] then Edges ?ys
       else if ?ys = [] then Edges ?xs
            else Edges ?xs Un Edges ?ys Un {(last ?xs, hd ?ys)})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_hole 6)),
               template_app (template_hole 10, template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_hole 6)),
                 template_app (template_hole 10, template_var 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 10, template_var 1)),
                     template_app (template_hole 10, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 1)),
                       template_app (template_hole 1, template_var 0))),
                   template_hole 0))))
           ))),
    ("FaceDivisionProps.splitFace_split_face",
     "[| ?oldF : \<F> ?g;
         (?f\<^sub>1, ?f\<^sub>2, ?newGraph) =
         splitFace ?g ?ram\<^sub>1 ?ram\<^sub>2 ?oldF ?newVs |]
      ==> (?f\<^sub>1, ?f\<^sub>2) =
          split_face ?oldF ?ram\<^sub>1 ?ram\<^sub>2 ?newVs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 7),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 6)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 5),
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 6),
                  template_var 2),
                template_var 1),
              template_var 7),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 5), template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 7),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("FaceDivisionProps.Edges_between_edges",
     "[| (?a, ?b) : Edges (?u # between (vertices ?f) ?u ?v @ [?v]);
         pre_split_face ?f ?u ?v ?vs |]
      ==> (?a, ?b) : \<E> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4)),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_app
                           (template_hole 4,
                            template_app (template_hole 3, template_var 2)),
                          template_var 3),
                        template_var 1)),
                    template_app
                     (template_app (template_hole 6, template_var 1),
                      template_hole 2)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 5),
                 template_var 4)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("FaceDivisionProps.verticesFrom_eq_if_vertices_cong",
     "[| distinct (vertices ?f); distinct (vertices ?f');
         vertices ?f \<cong> vertices ?f'; ?x : \<V> ?f |]
      ==> verticesFrom ?f ?x = verticesFrom ?f' ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 5, template_var 2)),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 5, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FaceDivisionProps.before_verticesFrom",
     "[| distinct (vertices ?f); ?v : \<V> ?f; ?w : \<V> ?f; ?v ~= ?w |]
      ==> before (verticesFrom ?f ?v) ?v ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 2)))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 1),
             template_var 0)
           ))),
    ("FaceDivisionProps.between_vs",
     "[| before ?vs ?ram1.0 ?ram2.0; pre_between ?vs ?ram1.0 ?ram2.0 |]
      ==> ?vs =
          fst (splitAt ?ram1.0 ?vs) @
          ?ram1.0 #
          between ?vs ?ram1.0 ?ram2.0 @
          ?ram2.0 # snd (splitAt ?ram2.0 ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 2))),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 2))))))))),
    ("FaceDivisionProps.indexToVertexList_last",
     "[| distinct (vertices ?f); ?v : \<V> ?f;
         incrIndexList ?es |?es| |vertices ?f| |]
      ==> last (indexToVertexList ?f ?v ?es) =
          Some (last (verticesFrom ?f ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_hole 8,
                template_app (template_hole 10, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 0),
                template_app (template_hole 6, template_var 0)),
              template_app
               (template_hole 6,
                template_app (template_hole 10, template_var 2)))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("FaceDivisionProps.natToVertexList_last",
     "[| distinct (vertices ?f); ?v : \<V> ?f;
         incrIndexList ?es |?es| |vertices ?f| |]
      ==> last (natToVertexList ?v ?f ?es) =
          Some (last (verticesFrom ?f ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_hole 8,
                template_app (template_hole 10, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 0),
                template_app (template_hole 6, template_var 0)),
              template_app
               (template_hole 6,
                template_app (template_hole 10, template_var 2)))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("FaceDivisionProps.before_between2",
     "[| before (verticesFrom ?f ?u) ?v ?w; distinct (vertices ?f);
         ?u : \<V> ?f |]
      ==> ?u = ?v | ?u : set (between (vertices ?f) ?w ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app (template_hole 5, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 0,
                       template_app (template_hole 5, template_var 3)),
                     template_var 0),
                   template_var 1))))
           ))),
    ("FaceDivisionProps.before_dist_eq",
     "[| distinct ?vs; ?ram1.0 : set ?vs; ?ram2.0 : set ?vs;
         ?ram1.0 ~= ?ram2.0 |]
      ==> (~ before ?vs ?ram1.0 ?ram2.0) = before ?vs ?ram2.0 ?ram1.0",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 2))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1)))),
    ("FaceDivisionProps.rotate_before_vFrom",
     "[| distinct (vertices ?f); ?r : \<V> ?f; ?r ~= ?u;
         before (verticesFrom ?f ?r) ?u ?v |]
      ==> before (verticesFrom ?f ?v) ?r ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 3)))
            ),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_var 2),
             template_var 1)
           ))),
    ("FaceDivisionProps.before_vs",
     "[| distinct ?vs; before ?vs ?ram1.0 ?ram2.0 |]
      ==> ?vs =
          fst (splitAt ?ram1.0 ?vs) @
          ?ram1.0 #
          fst (splitAt ?ram2.0 (snd (splitAt ?ram1.0 ?vs))) @
          ?ram2.0 # snd (splitAt ?ram2.0 ?vs)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app
                      (template_hole 0,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 2))))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 2))))))))),
    ("FaceDivisionProps.natToVertexList_nths",
     "[| distinct (vertices ?f); ?v : \<V> ?f;
         incrIndexList ?es |?es| |vertices ?f| |]
      ==> nths (verticesFrom ?f ?v) (set ?es) =
          removeNones (natToVertexList ?v ?f ?es)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_hole 7,
                template_app (template_hole 9, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 0),
                template_app (template_hole 5, template_var 0)),
              template_app
               (template_hole 5,
                template_app (template_hole 9, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app (template_hole 7, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0))))),
    ("FaceDivisionProps.is_sublist_at4",
     "[| distinct (?as @ ?bs); is_sublist [?x, ?y] (?as @ ?bs); ?as ~= [];
         ?x = last ?as |]
      ==> ?y = hd ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_hole 5))),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2))
            ),
        template_negation
         (template_equation (template_var 3, template_hole 5)),
        template_equation
         (template_var 1, template_app (template_hole 1, template_var 3))],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 2)))),
    ("FaceDivisionProps.before_dist_not2",
     "[| distinct ?vs; ?ram1.0 : set ?vs; ?ram2.0 : set ?vs;
         ?ram1.0 ~= ?ram2.0; ~ before ?vs ?ram1.0 ?ram2.0 |]
      ==> before ?vs ?ram2.0 ?ram1.0",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 2))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("FaceDivisionProps.before_between",
     "[| before (verticesFrom ?f ?x) ?y ?z; distinct (vertices ?f);
         ?x : \<V> ?f; ?x ~= ?y |]
      ==> ?y : set (between (vertices ?f) ?x ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app (template_hole 5, template_var 3)))
            ),
        template_negation
         (template_equation (template_var 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 5, template_var 3)),
                   template_var 2),
                 template_var 0)))
           ))),
    ("FaceDivisionProps.is_nextElem_between_empty'",
     "[| between ?vs ?a ?b = []; distinct ?vs; ?a : set ?vs; ?b : set ?vs;
         ?a ~= ?b |]
      ==> is_nextElem ?vs ?a ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 6),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 2))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("FaceDivisionProps.is_sublist_is_nextElem",
     "[| distinct ?vs; is_nextElem ?vs ?x ?y; is_sublist ?as ?vs;
         ?x : set ?as; ?x ~= last ?as |]
      ==> is_sublist [?x, ?y] ?as",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0))),
             template_var 0)
           ))),
    ("FaceDivisionProps.edges_split_face2",
     "pre_split_face ?f ?u ?v ?vs ==>
      \<E> (snd (split_face ?f ?u ?v ?vs)) =
      Edges (?u # ?vs @ [?v]) Un
      Edges (?v # between (vertices ?f) ?v ?u @ [?u])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 7, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_hole 2))))),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 0, template_var 3)),
                       template_var 1),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_hole 2)))))))),
    ("FaceDivisionProps.filter_congs_shorten1",
     "[| distinct (verticesFrom ?f ?v);
         filter (%v. v = ?a | v : set ?vs) (verticesFrom ?f ?v) =
         ?a # ?vs |]
      ==> filter (%v. v : set ?vs) (verticesFrom ?f ?v) = ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2))
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, t_empty),
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app (template_hole 7, template_var 3),
             template_var 2)),
         template_var 0))),
    ("FaceDivisionProps.split_face_edges_f12_f21_vs",
     "[| pre_split_face ?f ?ram1.0 ?ram2.0 [];
         (?f12.0, ?f21.0) = split_face ?f ?ram1.0 ?ram2.0 [] |]
      ==> \<E> ?f12.0 Un \<E> ?f21.0 =
          \<E> ?f Un {(?ram2.0, ?ram1.0), (?ram1.0, ?ram2.0)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 4),
                  template_var 3),
                template_var 2),
              template_hole 9)
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 1), template_var 0),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2),
            template_hole 9))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 4)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2)),
               template_hole 0)))))),
    ("FaceDivisionProps.verticesFrom_nextElem_eq",
     "[| distinct (vertices ?f); ?v : \<V> ?f; ?u : \<V> ?f |]
      ==> nextElem (verticesFrom ?f ?v) (hd (verticesFrom ?f ?v)) ?u =
          nextElem (vertices ?f) (hd (vertices ?f)) ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 6, template_var 2)),
             template_app
              (template_hole 0,
               template_app (template_hole 6, template_var 2))),
           template_var 0)))),
    ("FaceDivisionProps.edges_split_face1",
     "pre_split_face ?f ?u ?v ?vs ==>
      \<E> (fst (split_face ?f ?u ?v ?vs)) =
      Edges (?v # rev ?vs @ [?u]) Un
      Edges (?u # between (vertices ?f) ?u ?v @ [?v])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 8, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_hole 2))))),
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 0, template_var 3)),
                       template_var 2),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_hole 2)))))))),
    ("FaceDivisionProps.splitFace_edges_g'_vs",
     "[| pre_splitFace ?g ?ram1.0 ?ram2.0 ?f [];
         (?f12.0, ?f21.0, ?g') = splitFace ?g ?ram1.0 ?ram2.0 ?f [] |]
      ==> \<E> ?g' = \<E> ?g Un {(?ram1.0, ?ram2.0), (?ram2.0, ?ram1.0)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 11, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_hole 10)
            ),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 2),
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3),
            template_hole 10))],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 4, template_var 6)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 5)),
               template_hole 0)))))),
    ("FaceDivisionProps.split_face_edges_f_vs1_vs2",
     "[| pre_split_face ?f ?ram1.0 ?ram2.0 ?vs;
         between (vertices ?f) ?ram1.0 ?ram2.0 = [];
         between (vertices ?f) ?ram2.0 ?ram1.0 = [] |]
      ==> \<E> ?f = {(?ram2.0, ?ram1.0), (?ram1.0, ?ram2.0)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)),
              template_var 2),
            template_var 1),
          template_hole 5),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)),
              template_var 1),
            template_var 2),
          template_hole 5)],
       template_equation
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_hole 0))))),
    ("FaceDivisionProps.splitFace_delete_oldF",
     "[| (?f12.0, ?f21.0, ?newGraph) =
         splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVertexList;
         ?oldF ~= ?f12.0; ?oldF ~= ?f21.0; distinct (faces ?g) |]
      ==> ?oldF ~: \<F> ?newGraph",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 7),
            template_app
             (template_app (template_hole 7, template_var 6),
              template_var 5)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 1, template_var 7)),
        template_negation
         (template_equation (template_var 1, template_var 6)),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 4))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 2, template_var 5)))
               )
           ))),
    ("FaceDivisionProps.ovl_shorten",
     "[| distinct (verticesFrom ?f ?v);
         filter (%v. v : set (removeNones (?va # ?vol)))
          (verticesFrom ?f ?v) =
         removeNones (?va # ?vol) |]
      ==> filter (%v. v : set (removeNones ?vol)) (verticesFrom ?f ?v) =
          removeNones ?vol",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2))
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, t_empty),
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)),
          template_app
           (template_hole 1,
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2)),
         template_app (template_hole 1, template_var 0)))),
    ("FaceDivisionProps.splitFace_faces_1",
     "[| (?f12.0, ?f21.0, ?newGraph) =
         splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVertexList;
         ?oldF : \<F> ?g |]
      ==> \<F> ?newGraph Un {?oldF} = {?f12.0, ?f21.0} Un \<F> ?g",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 7),
            template_app
             (template_app (template_hole 8, template_var 6),
              template_var 5)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 4)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 5))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 7),
               template_app
                (template_app (template_hole 1, template_var 6),
                 template_hole 0))),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 4)))))),
    ("FaceDivisionProps.is_nextElem_nth1",
     "is_nextElem ?ls ?x ?y ==>
      EX i j.
         i < |?ls| &
         j < |?ls| & ?ls ! i = ?x & ?ls ! j = ?y & Suc i mod |?ls| = j",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("FaceDivisionProps.is_sublist_nth1",
     "is_sublist [?x, ?y] ?ls ==>
      EX i j.
         i < |?ls| & j < |?ls| & ?ls ! i = ?x & ?ls ! j = ?y & Suc i = j",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_app (template_hole 9, template_var 1),
                    template_hole 8))),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("FaceDivisionProps.is_sublist_nth2",
     "EX i j.
         i < |?ls| & j < |?ls| & ?ls ! i = ?x & ?ls ! j = ?y & Suc i = j ==>
      is_sublist [?x, ?y] ?ls",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))),
             template_var 2)
           ))),
    ("FaceDivisionProps.is_nextElem_nth2",
     "EX i j.
         i < |?ls| &
         j < |?ls| & ?ls ! i = ?x & ?ls ! j = ?y & Suc i mod |?ls| = j ==>
      is_nextElem ?ls ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("FaceDivisionProps.is_sublist_at1",
     "[| distinct (?as @ ?bs); is_sublist [?x, ?y] (?as @ ?bs);
         ?x ~= last ?as |]
      ==> is_sublist [?x, ?y] ?as | is_sublist [?x, ?y] ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_app (template_hole 5, template_var 0),
                    template_hole 4))),
              template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 1, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_app (template_hole 5, template_var 0),
                       template_hole 4))),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4))),
               template_var 2))
           ))),
    ("FaceDivisionProps.split_face_edges_f12_bet_vs",
     "[| pre_split_face ?f ?ram1.0 ?ram2.0 [];
         (?f12.0, ?f21.0) = split_face ?f ?ram1.0 ?ram2.0 [];
         between (vertices ?f) ?ram1.0 ?ram2.0 = [] |]
      ==> \<E> ?f12.0 = {(?ram2.0, ?ram1.0), (?ram1.0, ?ram2.0)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 4),
                  template_var 3),
                template_var 2),
              template_hole 11)
            ),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 1), template_var 0),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2),
            template_hole 11)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 4)),
              template_var 3),
            template_var 2),
          template_hole 11)],
       template_equation
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_hole 0))))),
    ("FaceDivisionProps.split_face_edges_f21_bet_vs",
     "[| pre_split_face ?f ?ram1.0 ?ram2.0 [];
         (?f12.0, ?f21.0) = split_face ?f ?ram1.0 ?ram2.0 [];
         between (vertices ?f) ?ram2.0 ?ram1.0 = [] |]
      ==> \<E> ?f21.0 = {(?ram1.0, ?ram2.0), (?ram2.0, ?ram1.0)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 4),
                  template_var 3),
                template_var 2),
              template_hole 11)
            ),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 1), template_var 0),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2),
            template_hole 11)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 4)),
              template_var 2),
            template_var 3),
          template_hole 11)],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3)),
             template_hole 0))))),
    ("FaceDivisionProps.split_face_edges_or",
     "[| (?f12.0, ?f21.0) = split_face ?oldF ?ram1.0 ?ram2.0 ?newVertexList;
         pre_split_face ?oldF ?ram1.0 ?ram2.0 ?newVertexList;
         (?a, ?b) : \<E> ?oldF |]
      ==> (?a, ?b) : \<E> ?f12.0 | (?a, ?b) : \<E> ?f21.0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 7), template_var 6),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_app (template_hole 1, template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_app (template_hole 1, template_var 7))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_app (template_hole 1, template_var 6)))
           ))),
    ("FaceDivisionProps.splitFace_split",
     "?f : \<F> (snd (snd (splitFace ?g ?v ?a ?f' ?nvl))) ==>
      ?f : \<F> ?g |
      ?f = fst (splitFace ?g ?v ?a ?f' ?nvl) |
      ?f = fst (snd (splitFace ?g ?v ?a ?f' ?nvl))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 4, template_var 4),
                              template_var 3),
                            template_var 2),
                          template_var 1),
                        template_var 0))))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 9, template_var 5),
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 4)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 4, template_var 4),
                             template_var 3),
                           template_var 2),
                         template_var 1),
                       template_var 0)))),
               template_app
                (template_app (template_hole 2, template_var 5),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_app (template_hole 4, template_var 4),
                             template_var 3),
                           template_var 2),
                         template_var 1),
                       template_var 0))))))
           ))),
    ("FaceDivisionProps.natToVertexList_removeNones",
     "[| distinct (vertices ?f); ?v : \<V> ?f;
         incrIndexList ?es |?es| |vertices ?f| |]
      ==> filter (%x. x : set (removeNones (natToVertexList ?v ?f ?es)))
           (verticesFrom ?f ?v) =
          removeNones (natToVertexList ?v ?f ?es)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_hole 7,
                template_app (template_hole 9, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 0),
                template_app (template_hole 5, template_var 0)),
              template_app
               (template_hole 5,
                template_app (template_hole 9, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0))))),
    ("FaceDivisionProps.nextVertex_inj",
     "[| distinct (vertices ?f); ?v : \<V> ?f; ?i < |vertices ?f|;
         ?a < |vertices ?f|;
         ?f\<^bsup>?a\<^esup> \<bullet> ?v =
         ?f\<^bsup>?i\<^esup> \<bullet> ?v |]
      ==> ?i = ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 3)))
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 2,
            template_app (template_hole 6, template_var 3))),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 2,
            template_app (template_hole 6, template_var 3))),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0),
            template_var 2),
          template_app
           (template_app
             (template_app (template_hole 0, template_var 3),
              template_var 1),
            template_var 2))],
       template_equation (template_var 1, template_var 0))),
    ("FaceDivisionProps.between_in",
     "[| before ?vs ?ram1.0 ?ram2.0; pre_between ?vs ?ram1.0 ?ram2.0;
         ?x : set ?vs |]
      ==> ?x = ?ram1.0 |
          ?x : set (between ?vs ?ram1.0 ?ram2.0) |
          ?x = ?ram2.0 | ?x : set (between ?vs ?ram2.0 ?ram1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 3),
                         template_var 2),
                       template_var 1)))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 3),
                         template_var 1),
                       template_var 2))))))
           ))),
    ("FaceDivisionProps.split_face_edges_f21_subset",
     "[| pre_split_face ?f ?ram1.0 ?ram2.0 ?vs;
         (?f12.0, ?f21.0) = split_face ?f ?ram1.0 ?ram2.0 ?vs; ?vs ~= [] |]
      ==> {(last ?vs, ?ram2.0), (?ram1.0, hd ?vs)} Un Edges ?vs
          <= \<E> ?f21.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 13, template_var 1),
            template_var 0),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 12, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 9))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 2)),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 4),
                     template_app (template_hole 3, template_var 2))),
                 template_hole 2))),
           template_app (template_hole 1, template_var 2)),
         template_app (template_hole 0, template_var 0)))),
    ("FaceDivisionProps.indexToVertexList_pre_subdivFace_face",
     "[| ~ final ?f; distinct (vertices ?f); ?v : \<V> ?f; 2 < |?es|;
         incrIndexList ?es |?es| |vertices ?f| |]
      ==> pre_subdivFace_face ?f ?v (indexToVertexList ?f ?v ?es)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 12, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_hole 8,
                template_app (template_hole 10, template_var 2)))
            ),
        template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 0),
                template_app (template_hole 3, template_var 0)),
              template_app
               (template_hole 3,
                template_app (template_hole 10, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("FaceDivisionProps.natToVertexList_pre_subdivFace_face",
     "[| ~ final ?f; distinct (vertices ?f); ?v : \<V> ?f; 2 < |?es|;
         incrIndexList ?es |?es| |vertices ?f| |]
      ==> pre_subdivFace_face ?f ?v (natToVertexList ?v ?f ?es)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 12, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_hole 8,
                template_app (template_hole 10, template_var 2)))
            ),
        template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 0),
                template_app (template_hole 3, template_var 0)),
              template_app
               (template_hole 3,
                template_app (template_hole 10, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("FaceDivisionProps.between_eq2",
     "[| pre_between ?vs ?ram1.0 ?ram2.0; before ?vs ?ram2.0 ?ram1.0 |]
      ==> EX as bs cs.
             between ?vs ?ram1.0 ?ram2.0 = cs @ as &
             ?vs = as @ [?ram2.0] @ bs @ [?ram1.0] @ cs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("FaceDivisionProps.is_sublist_at5",
     "[| distinct (?as @ ?bs); is_sublist [?x, ?y] (?as @ ?bs) |]
      ==> is_sublist [?x, ?y] ?as |
          is_sublist [?x, ?y] ?bs | ?x = last ?as & ?y = hd ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_hole 5))),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_hole 5))),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_hole 5))),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app (template_hole 1, template_var 3))),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app (template_hole 0, template_var 2)))))
           ))),
    ("FaceDivisionProps.natToVertexList_nth_Suc",
     "[| incrIndexList ?es |?es| |vertices ?f|; Suc ?n < |?es| |]
      ==> natToVertexList ?v ?f ?es ! Suc ?n =
          (if ?es ! ?n = ?es ! Suc ?n then None
           else Some ?f\<^bsup>?es ! Suc ?n\<^esup> \<bullet> ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 3),
                template_app (template_hole 12, template_var 3)),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 2)))
            ),
        template_inequation
         (less_than, template_app (template_hole 9, template_var 1),
          template_app (template_hole 12, template_var 3))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_app (template_hole 6, template_var 0),
                      template_var 2),
                    template_var 3)),
                template_app (template_hole 9, template_var 1))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_app (template_hole 9, template_var 1)))),
                 template_hole 2),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_app
                      (template_app (template_hole 3, template_var 3),
                       template_app (template_hole 9, template_var 1))),
                   template_var 0)))
             )))),
    ("FaceDivisionProps.split_face_edges_f12_subset",
     "[| pre_split_face ?f ?ram1.0 ?ram2.0 ?vs;
         (?f12.0, ?f21.0) = split_face ?f ?ram1.0 ?ram2.0 ?vs; ?vs ~= [] |]
      ==> {(hd ?vs, ?ram1.0), (?ram2.0, last ?vs)} Un Edges (rev ?vs)
          <= \<E> ?f12.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 1),
            template_var 0),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 13, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 10))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 2)),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_app (template_hole 4, template_var 2))),
                 template_hole 3))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2))),
         template_app (template_hole 0, template_var 1)))),
    ("FaceDivisionProps.filter_distinct_at",
     "[| distinct ?xs; ?xs = ?as @ ?u # ?bs;
         filter (%v. v = ?u | ?P v) ?xs = ?u # ?us |]
      ==> filter ?P ?bs = ?us & filter ?P ?as = []",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 5)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2))),
        template_equation
         (template_app
           (template_app (template_hole 4, t_empty), template_var 5),
          template_app
           (template_app (template_hole 5, template_var 3),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 4, t_empty),
                     template_var 2)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 4, t_empty),
                   template_var 4)),
               template_hole 0))
           ))),
    ("FaceDivisionProps.indexToVertexList_natToVertexList_eq",
     "[| distinct (vertices ?f); ?v : \<V> ?f;
         ALL i:set ?is. i < |vertices ?f|; ?is ~= []; hd ?is = 0 |]
      ==> indexToVertexList ?f ?v ?is = natToVertexList ?v ?f ?is",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 15,
              template_app (template_hole 14, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_hole 12,
                template_app (template_hole 14, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 12, template_var 0)),
              t_empty)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("FaceDivisionProps.is_nextElem_or",
     "[| pre_between ?vs ?ram1.0 ?ram2.0; is_nextElem ?vs ?x ?y |]
      ==> is_sublist [?x, ?y]
           (?ram1.0 # between ?vs ?ram1.0 ?ram2.0 @ [?ram2.0]) |
          is_sublist [?x, ?y]
           (?ram2.0 # between ?vs ?ram2.0 ?ram1.0 @ [?ram1.0])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2))),
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 4),
                           template_var 3),
                         template_var 2)),
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_hole 2))))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2))),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 2),
                       template_var 3)),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_hole 2)))))
           ))),
    ("FaceDivisionProps.Edges_compl",
     "[| distinct ?vs; ?x : set ?vs; ?y : set ?vs; ?x ~= ?y |]
      ==> Edges (?x # between ?vs ?x ?y @ [?y]) Int
          Edges (?y # between ?vs ?y ?x @ [?x]) =
          {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app (template_hole 10, template_var 2))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 1))))),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 0),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 1))))),
         template_hole 0))),
    ("FaceDivisionProps.nextElem_vFrom_suc1",
     "[| distinct (vertices ?f); ?v : \<V> ?f; ?i < |vertices ?f|;
         last (verticesFrom ?f ?v) ~= ?u; verticesFrom ?f ?v ! ?i = ?u |]
      ==> ?f \<bullet> ?u = verticesFrom ?f ?v ! Suc ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_hole 9,
                template_app (template_hole 11, template_var 3)))
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 7,
            template_app (template_hole 11, template_var 3))),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2)),
            template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2)),
           template_app (template_hole 0, template_var 1))))),
    ("FaceDivisionProps.a",
     "[| distinct (vertices ?f); ?v : \<V> ?f;
         ALL i:set ?is. i < |vertices ?f|; ?a < |vertices ?f| |]
      ==> hideDupsRec ((?f \<bullet> ^^ ?a) ?v)
           (map (%k. (?f \<bullet> ^^ k) ?v) ?is) =
          natToVertexListRec ?a ?v ?f ?is",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_hole 9,
                template_app (template_hole 11, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 9, template_var 1)),
              t_empty)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 6,
            template_app (template_hole 11, template_var 3)))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 0),
                 template_app (template_hole 2, template_var 3)),
               template_var 2)),
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 3),
           template_var 1)))),
    ("FaceDivisionProps.is_nextElem_or1",
     "[| pre_between ?vs ?ram1.0 ?ram2.0; is_nextElem ?vs ?x ?y;
         before ?vs ?ram1.0 ?ram2.0 |]
      ==> is_sublist [?x, ?y]
           (?ram1.0 # between ?vs ?ram1.0 ?ram2.0 @ [?ram2.0]) |
          is_sublist [?x, ?y]
           (?ram2.0 # between ?vs ?ram2.0 ?ram1.0 @ [?ram1.0])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_hole 2))),
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 4),
                           template_var 3),
                         template_var 2)),
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_hole 2))))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2))),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 2),
                       template_var 3)),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_hole 2)))))
           ))),
    ("FaceDivisionProps.filter_distinct_at3",
     "[| distinct ?xs; ?xs = ?as @ ?u # ?bs;
         filter (%v. v = ?u | ?P v) ?xs = ?u # ?us;
         ALL z:set ?zs. z : set ?as | ~ ?P z |]
      ==> filter ?P (?zs @ ?bs) = ?us",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 6)),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 8, template_var 5),
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3))),
        template_equation
         (template_app
           (template_app (template_hole 6, t_empty), template_var 6),
          template_app
           (template_app (template_hole 7, template_var 4),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app (template_hole 8, template_var 0),
             template_var 3)),
         template_var 1))),
    ("FaceDivisionProps.pre_subdivFace'_Some1'",
     "[| pre_subdivFace' ?g ?f ?v' ?v ?n (Some ?u # ?vol);
         pre_splitFace ?g ?v ?u ?f ?ws;
         ?f21.0 = fst (snd (splitFace ?g ?v ?u ?f ?ws));
         ?g' = snd (snd (splitFace ?g ?v ?u ?f ?ws)) |]
      ==> pre_subdivFace' ?g' ?f21.0 ?v' ?u 0 ?vol",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 10, template_var 9),
                      template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 4)),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 9),
                    template_var 6),
                  template_var 4),
                template_var 8),
              template_var 2)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_hole 5,
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 9),
                      template_var 6),
                    template_var 4),
                  template_var 8),
                template_var 2)))),
        template_equation
         (template_var 0,
          template_app
           (template_hole 1,
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 9),
                      template_var 6),
                    template_var 4),
                  template_var 8),
                template_var 2))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 10, template_var 0),
                     template_var 1),
                   template_var 7),
                 template_var 4),
               template_hole 0),
             template_var 3)
           ))),
    ("FaceDivisionProps.split_face_edges_f_vs2",
     "[| pre_split_face ?f ?ram1.0 ?ram2.0 ?vs;
         ?vs1.0 = between (vertices ?f) ?ram1.0 ?ram2.0; ?vs1.0 ~= [];
         between (vertices ?f) ?ram2.0 ?ram1.0 = [] |]
      ==> \<E> ?f =
          {(?ram2.0, ?ram1.0), (?ram1.0, hd ?vs1.0),
           (last ?vs1.0, ?ram2.0)} Un
          Edges ?vs1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 4)),
              template_var 3),
            template_var 2)),
        template_negation
         (template_equation (template_var 0, template_hole 9)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 4)),
              template_var 2),
            template_var 3),
          template_hole 9)],
       template_equation
        (template_app (template_hole 7, template_var 4),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_app (template_hole 3, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 2, template_var 0)),
                       template_var 2)),
                   template_hole 1)))),
           template_app (template_hole 0, template_var 0))))),
    ("FaceDivisionProps.split_face_edges_f_vs1",
     "[| pre_split_face ?f ?ram1.0 ?ram2.0 ?vs;
         between (vertices ?f) ?ram1.0 ?ram2.0 = [];
         ?vs2.0 = between (vertices ?f) ?ram2.0 ?ram1.0; ?vs2.0 ~= [] |]
      ==> \<E> ?f =
          {(last ?vs2.0, ?ram1.0), (?ram1.0, ?ram2.0),
           (?ram2.0, hd ?vs2.0)} Un
          Edges ?vs2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 4)),
              template_var 3),
            template_var 2),
          template_hole 10),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 4)),
              template_var 2),
            template_var 3)),
        template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_equation
        (template_app (template_hole 7, template_var 4),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_app (template_hole 2, template_var 0))),
                   template_hole 1)))),
           template_app (template_hole 0, template_var 0))))),
    ("FaceDivisionProps.pre_subdivFace'_preFaceDiv",
     "[| pre_subdivFace' ?g ?f ?v' ?v ?n (Some ?u # ?vol); ?f : \<F> ?g;
         ?f \<bullet> ?v = ?u --> ?n ~= 0; \<V> ?f <= \<V> ?g |]
      ==> pre_splitFace ?g ?v ?u ?f
           [countVertices ?g..<countVertices ?g + ?n]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 18, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app
                 (template_hole 17,
                  template_app (template_hole 16, template_var 1)),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 5),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 6)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 5),
                      template_var 3)),
                  template_var 1)),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_hole 8)))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 5)),
          template_app
           (template_hole 6,
            template_app (template_hole 4, template_var 6)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 6),
                   template_var 3),
                 template_var 1),
               template_var 5),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 6)),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 1, template_var 6)),
                 template_var 2)))
           ))),
    ("FaceDivisionProps.is_sublist_at5'",
     "[| distinct ?as; distinct ?bs; set ?as Int set ?bs = {};
         is_sublist [?x, ?y] (?as @ ?bs) |]
      ==> is_sublist [?x, ?y] ?as |
          is_sublist [?x, ?y] ?bs | ?x = last ?as & ?y = hd ?bs",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 3)),
        template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 3)),
            template_app (template_hole 10, template_var 2)),
          template_hole 9),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_app
                   (template_app (template_hole 7, template_var 0),
                    template_hole 6))),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6))),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_app
                        (template_app (template_hole 7, template_var 0),
                         template_hole 6))),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app (template_hole 1, template_var 3))),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app (template_hole 0, template_var 2)))))
           ))),
    ("FaceDivisionProps.edges_conv_Un_Edges",
     "[| distinct (vertices ?f); ?x : \<V> ?f; ?y : \<V> ?f; ?x ~= ?y |]
      ==> \<E> ?f =
          Edges (?x # between (vertices ?f) ?x ?y @ [?y]) Un
          Edges (?y # between (vertices ?f) ?y ?x @ [?x])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 13,
              template_app (template_hole 12, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_hole 10,
                template_app (template_hole 12, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app
               (template_hole 10,
                template_app (template_hole 12, template_var 2)))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 1,
                           template_app (template_hole 12, template_var 2)),
                         template_var 1),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 0))))),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 12, template_var 2)),
                       template_var 0),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 0)))))))),
    ("FaceDivisionProps.split_face_edges_f12_vs",
     "[| pre_split_face ?f ?ram1.0 ?ram2.0 [];
         (?f12.0, ?f21.0) = split_face ?f ?ram1.0 ?ram2.0 [];
         ?vs1.0 = between (vertices ?f) ?ram1.0 ?ram2.0; ?vs1.0 ~= [] |]
      ==> \<E> ?f12.0 =
          {(?ram2.0, ?ram1.0), (?ram1.0, hd ?vs1.0),
           (last ?vs1.0, ?ram2.0)} Un
          Edges ?vs1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 17, template_var 5),
                  template_var 4),
                template_var 3),
              template_hole 16)
            ),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 2),
            template_var 1),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 13, template_var 5),
                template_var 4),
              template_var 3),
            template_hole 16)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 5)),
              template_var 4),
            template_var 3)),
        template_negation
         (template_equation (template_var 0, template_hole 16))],
       template_equation
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_app (template_hole 3, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 2, template_var 0)),
                       template_var 3)),
                   template_hole 1)))),
           template_app (template_hole 0, template_var 0))))),
    ("FaceDivisionProps.split_face_edges_f21_vs",
     "[| pre_split_face ?f ?ram1.0 ?ram2.0 [];
         (?f12.0, ?f21.0) = split_face ?f ?ram1.0 ?ram2.0 [];
         ?vs2.0 = between (vertices ?f) ?ram2.0 ?ram1.0; ?vs2.0 ~= [] |]
      ==> \<E> ?f21.0 =
          {(last ?vs2.0, ?ram1.0), (?ram1.0, ?ram2.0),
           (?ram2.0, hd ?vs2.0)} Un
          Edges ?vs2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 17, template_var 5),
                  template_var 4),
                template_var 3),
              template_hole 16)
            ),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 2),
            template_var 1),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 13, template_var 5),
                template_var 4),
              template_var 3),
            template_hole 16)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 5)),
              template_var 3),
            template_var 4)),
        template_negation
         (template_equation (template_var 0, template_hole 16))],
       template_equation
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_app (template_hole 2, template_var 0))),
                   template_hole 1)))),
           template_app (template_hole 0, template_var 0))))),
    ("FaceDivisionProps.split_face_edges_f21_bet",
     "[| pre_split_face ?f ?ram1.0 ?ram2.0 ?vs;
         (?f12.0, ?f21.0) = split_face ?f ?ram1.0 ?ram2.0 ?vs; ?vs ~= [];
         between (vertices ?f) ?ram2.0 ?ram1.0 = [] |]
      ==> \<E> ?f21.0 =
          {(?ram1.0, hd ?vs), (last ?vs, ?ram2.0), (?ram2.0, ?ram1.0)} Un
          Edges ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 17, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 15, template_var 1),
            template_var 0),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 14, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 11)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 5)),
              template_var 3),
            template_var 4),
          template_hole 11)],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app (template_hole 3, template_var 2))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 2, template_var 2)),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_var 4)),
                   template_hole 1)))),
           template_app (template_hole 0, template_var 2))))),
    ("FaceDivisionProps.natToVertexList_nths1",
     "[| distinct (vertices ?f); ?v : \<V> ?f; ?vs = verticesFrom ?f ?v;
         incrIndexList ?es |?es| |?vs|; ?n <= |?es| |]
      ==> nths (take (Suc (?es ! (?n - 1))) ?vs) (set (take ?n ?es)) =
          removeNones (take ?n (natToVertexList ?v ?f ?es))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 17,
              template_app (template_hole 16, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 3),
              template_app
               (template_hole 14,
                template_app (template_hole 16, template_var 4)))
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 12, template_var 4),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 1),
                template_app (template_hole 10, template_var 1)),
              template_app (template_hole 10, template_var 2))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 10, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 3)))),
               template_var 2)),
           template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 7, template_var 0),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 4),
               template_var 1)))))),
    ("FaceDivisionProps.filter_distinct_at4",
     "[| distinct ?xs; ?xs = ?as @ ?u # ?bs;
         filter (%v. v = ?u | v : set ?us) ?xs = ?u # ?us;
         set ?zs Int set ?us <= {?u} Un set ?as |]
      ==> filter (%v. v : set ?us) (?zs @ ?bs) = ?us",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 5)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 11, template_var 4),
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2))),
        template_equation
         (template_app
           (template_app (template_hole 9, t_empty), template_var 5),
          template_app
           (template_app (template_hole 10, template_var 3),
            template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 5, template_var 0)),
            template_app (template_hole 5, template_var 1)),
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_hole 0)),
            template_app (template_hole 5, template_var 4)))],
       template_equation
        (template_app
          (template_app (template_hole 9, t_empty),
           template_app
            (template_app (template_hole 11, template_var 0),
             template_var 2)),
         template_var 1))),
    ("FaceDivisionProps.filter_distinct_at5",
     "[| distinct ?xs; ?xs = ?as @ ?u # ?bs;
         filter (%v. v = ?u | v : set ?us) ?xs = ?u # ?us;
         set ?zs Int set ?xs <= {?u} Un set ?as |]
      ==> filter (%v. v : set ?us) (?zs @ ?bs) = ?us",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 5)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 11, template_var 4),
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2))),
        template_equation
         (template_app
           (template_app (template_hole 9, t_empty), template_var 5),
          template_app
           (template_app (template_hole 10, template_var 3),
            template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 5, template_var 0)),
            template_app (template_hole 5, template_var 5)),
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_hole 0)),
            template_app (template_hole 5, template_var 4)))],
       template_equation
        (template_app
          (template_app (template_hole 9, t_empty),
           template_app
            (template_app (template_hole 11, template_var 0),
             template_var 2)),
         template_var 1))),
    ("FaceDivisionProps.split_face_edges_f12_bet",
     "[| pre_split_face ?f ?ram1.0 ?ram2.0 ?vs;
         (?f12.0, ?f21.0) = split_face ?f ?ram1.0 ?ram2.0 ?vs; ?vs ~= [];
         between (vertices ?f) ?ram1.0 ?ram2.0 = [] |]
      ==> \<E> ?f12.0 =
          {(hd ?vs, ?ram1.0), (?ram1.0, ?ram2.0), (?ram2.0, last ?vs)} Un
          Edges (rev ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 18, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 16, template_var 1),
            template_var 0),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 15, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 12)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 5)),
              template_var 4),
            template_var 3),
          template_hole 12)],
       template_equation
        (template_app (template_hole 8, template_var 1),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 2)),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 4),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 3),
                       template_app (template_hole 3, template_var 2))),
                   template_hole 2)))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)))))),
    ("FaceDivisionProps.split_face_edges_f12_f21",
     "[| pre_split_face ?f ?ram1.0 ?ram2.0 ?vs;
         (?f12.0, ?f21.0) = split_face ?f ?ram1.0 ?ram2.0 ?vs; ?vs ~= [] |]
      ==> \<E> ?f12.0 Un \<E> ?f21.0 =
          \<E> ?f Un
          {(hd ?vs, ?ram1.0), (?ram1.0, hd ?vs), (last ?vs, ?ram2.0),
           (?ram2.0, last ?vs)} Un
          Edges ?vs Un
          Edges (rev ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 1),
            template_var 0),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 13, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 10))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 1)),
           template_app (template_hole 7, template_var 0)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_var 5)),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app (template_hole 4, template_var 2)),
                         template_var 4)),
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_var 4),
                           template_app (template_hole 4, template_var 2))),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_app
                              (template_hole 5,
                               template_app
                                (template_hole 3, template_var 2)),
                             template_var 3)),
                         template_app
                          (template_app
                            (template_hole 6,
                             template_app
                              (template_app
                                (template_hole 5, template_var 3),
                               template_app
                                (template_hole 3, template_var 2))),
                           template_hole 2)))))),
               template_app (template_hole 1, template_var 2))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)))))),
    ("FaceDivisionProps.splitFace_edges_g'",
     "[| pre_splitFace ?g ?ram1.0 ?ram2.0 ?f ?vs;
         (?f12.0, ?f21.0, ?g') = splitFace ?g ?ram1.0 ?ram2.0 ?f ?vs;
         ?vs ~= [] |]
      ==> \<E> ?g' =
          \<E> ?g Un Edges ?vs Un Edges (rev ?vs) Un
          {(?ram2.0, last ?vs), (hd ?vs, ?ram1.0), (?ram1.0, hd ?vs),
           (last ?vs, ?ram2.0)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 17, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 15, template_var 2),
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 13, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4),
            template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 10))],
       template_equation
        (template_app (template_hole 8, template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 8, template_var 7)),
                   template_app (template_hole 6, template_var 3))),
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 3)))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_app (template_hole 2, template_var 3))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 1, template_var 3)),
                   template_var 6)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 6),
                     template_app (template_hole 1, template_var 3))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 3)),
                       template_var 5)),
                   template_hole 0)))))))),
    ("FaceDivisionProps.Edges_disj",
     "[| distinct ?vs; ?x : set ?vs; ?z : set ?vs; ?x ~= ?y; ?y ~= ?z;
         ?y : set (between ?vs ?x ?z) |]
      ==> Edges (?x # between ?vs ?x ?y @ [?y]) Int
          Edges (?y # between ?vs ?y ?z @ [?z]) =
          {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app (template_hole 10, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app (template_hole 10, template_var 3))
            ),
        template_negation
         (template_equation (template_var 2, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2),
                  template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 7, template_var 3),
                         template_var 2),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 1))))),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 3),
                       template_var 0),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 1))))),
         template_hole 0))),
    ("FaceDivisionProps.splitFace_edges_g'_help",
     "[| pre_splitFace ?g ?ram1.0 ?ram2.0 ?f ?vs;
         (?f12.0, ?f21.0, ?g') = splitFace ?g ?ram1.0 ?ram2.0 ?f ?vs;
         ?vs ~= [] |]
      ==> \<E> ?g' =
          \<E> ?g Un \<E> ?f Un Edges ?vs Un Edges (rev ?vs) Un
          {(?ram2.0, last ?vs), (hd ?vs, ?ram1.0), (?ram1.0, hd ?vs),
           (last ?vs, ?ram2.0)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 18, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 16, template_var 2),
            template_app
             (template_app (template_hole 15, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4),
            template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 11))],
       template_equation
        (template_app (template_hole 9, template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 9, template_var 7)),
                       template_app (template_hole 7, template_var 4))),
                   template_app (template_hole 6, template_var 3))),
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 3)))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_app (template_hole 2, template_var 3))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 1, template_var 3)),
                   template_var 6)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 6),
                     template_app (template_hole 1, template_var 3))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 3)),
                       template_var 5)),
                   template_hole 0)))))))),
    ("FaceDivisionProps.filter_distinct_at6",
     "[| distinct ?xs; ?xs = ?as @ ?u # ?bs;
         filter (%v. v = ?u | v : set ?us) ?xs = ?u # ?us;
         set ?zs Int set ?xs <= {?u} Un set ?as |]
      ==> filter (%v. v : set ?us) (?zs @ ?bs) = ?us &
          filter (%v. v : set ?us) ?bs = ?us",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 5)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 12, template_var 4),
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2))),
        template_equation
         (template_app
           (template_app (template_hole 10, t_empty), template_var 5),
          template_app
           (template_app (template_hole 11, template_var 3),
            template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 6, template_var 0)),
            template_app (template_hole 6, template_var 5)),
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 3),
                template_hole 1)),
            template_app (template_hole 6, template_var 4)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app (template_hole 10, t_empty),
                     template_app
                      (template_app (template_hole 12, template_var 0),
                       template_var 2))),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 10, t_empty),
                   template_var 2)),
               template_var 1))
           ))),
    ("FaceDivisionProps.filter_distinct_at_special",
     "[| distinct ?xs; ?xs = ?as @ ?u # ?bs;
         filter (%v. v = ?u | v : set ?us) ?xs = ?u # ?us;
         set ?zs Int set ?xs <= {?u} Un set ?as; ?us = ?hd_us # ?tl_us |]
      ==> filter (%v. v : set ?us) (?zs @ ?bs) = ?us & ?hd_us : set ?bs",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 7)),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 12, template_var 6),
            template_app
             (template_app (template_hole 11, template_var 5),
              template_var 4))),
        template_equation
         (template_app
           (template_app (template_hole 10, t_empty), template_var 7),
          template_app
           (template_app (template_hole 11, template_var 5),
            template_var 3)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 6, template_var 2)),
            template_app (template_hole 6, template_var 7)),
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 5),
                template_hole 1)),
            template_app (template_hole 6, template_var 6))),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 11, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app (template_hole 10, t_empty),
                     template_app
                      (template_app (template_hole 12, template_var 2),
                       template_var 4))),
                 template_var 3)),
             template_app
              (template_app (template_hole 7, template_var 1),
               template_app (template_hole 6, template_var 4)))
           ))),
    ("FaceDivisionProps.split_face_edges_f",
     "[| pre_split_face ?f ?ram1.0 ?ram2.0 ?vs;
         ?vs1.0 = between (vertices ?f) ?ram1.0 ?ram2.0; ?vs1.0 ~= [];
         ?vs2.0 = between (vertices ?f) ?ram2.0 ?ram1.0; ?vs2.0 ~= [] |]
      ==> \<E> ?f =
          {(last ?vs2.0, ?ram1.0), (?ram1.0, hd ?vs1.0),
           (last ?vs1.0, ?ram2.0), (?ram2.0, hd ?vs2.0)} Un
          Edges ?vs1.0 Un
          Edges ?vs2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 5)),
              template_var 4),
            template_var 3)),
        template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 5)),
              template_var 3),
            template_var 4)),
        template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app (template_hole 7, template_var 5),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 0)),
                       template_var 4)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 4),
                         template_app (template_hole 2, template_var 1))),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_var 1)),
                           template_var 3)),
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app (template_hole 4, template_var 3),
                             template_app
                              (template_hole 2, template_var 0))),
                         template_hole 1))))),
               template_app (template_hole 0, template_var 1))),
           template_app (template_hole 0, template_var 0))))),
    ("FaceDivisionProps.split_face_edges_f21",
     "[| pre_split_face ?f ?ram1.0 ?ram2.0 ?vs;
         (?f12.0, ?f21.0) = split_face ?f ?ram1.0 ?ram2.0 ?vs; ?vs ~= [];
         ?vs2.0 = between (vertices ?f) ?ram2.0 ?ram1.0; ?vs2.0 ~= [] |]
      ==> \<E> ?f21.0 =
          {(last ?vs2.0, ?ram1.0), (?ram1.0, hd ?vs), (last ?vs, ?ram2.0),
           (?ram2.0, hd ?vs2.0)} Un
          Edges ?vs Un
          Edges ?vs2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 17, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 15, template_var 2),
            template_var 1),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 14, template_var 6),
                template_var 5),
              template_var 4),
            template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 11)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 6)),
              template_var 4),
            template_var 5)),
        template_negation
         (template_equation (template_var 0, template_hole 11))],
       template_equation
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 0)),
                       template_var 5)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 5),
                         template_app (template_hole 2, template_var 3))),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_var 3)),
                           template_var 4)),
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app (template_hole 4, template_var 4),
                             template_app
                              (template_hole 2, template_var 0))),
                         template_hole 1))))),
               template_app (template_hole 0, template_var 3))),
           template_app (template_hole 0, template_var 0))))),
    ("FaceDivisionProps.split_face_edges_f12",
     "[| pre_split_face ?f ?ram1.0 ?ram2.0 ?vs;
         (?f12.0, ?f21.0) = split_face ?f ?ram1.0 ?ram2.0 ?vs; ?vs ~= [];
         ?vs1.0 = between (vertices ?f) ?ram1.0 ?ram2.0; ?vs1.0 ~= [] |]
      ==> \<E> ?f12.0 =
          {(hd ?vs, ?ram1.0), (?ram1.0, hd ?vs1.0), (last ?vs1.0, ?ram2.0),
           (?ram2.0, last ?vs)} Un
          Edges (rev ?vs) Un
          Edges ?vs1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 18, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 16, template_var 2),
            template_var 1),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 15, template_var 6),
                template_var 5),
              template_var 4),
            template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 12)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 6)),
              template_var 5),
            template_var 4)),
        template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_equation
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 4, template_var 3)),
                       template_var 5)),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 5),
                         template_app (template_hole 4, template_var 0))),
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app
                            (template_hole 5,
                             template_app
                              (template_hole 3, template_var 0)),
                           template_var 4)),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_app (template_hole 5, template_var 4),
                             template_app
                              (template_hole 3, template_var 3))),
                         template_hole 2))))),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)))),
           template_app (template_hole 1, template_var 0))))),
    ("FaceDivisionProps.split_face_edges_f12_f21_sym",
     "[| ?f : \<F> ?g; pre_split_face ?f ?ram1.0 ?ram2.0 ?vs;
         (?f12.0, ?f21.0) = split_face ?f ?ram1.0 ?ram2.0 ?vs |]
      ==> ((?a, ?b) : \<E> ?f12.0 | (?a, ?b) : \<E> ?f21.0) =
          ((?a, ?b) : \<E> ?f |
           ((?b, ?a) : \<E> ?f12.0 | (?b, ?a) : \<E> ?f21.0) &
           ((?a, ?b) : \<E> ?f12.0 | (?a, ?b) : \<E> ?f21.0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 8),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 7)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 8),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 3), template_var 2),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 6, template_var 8),
                template_var 6),
              template_var 5),
            template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_app (template_hole 1, template_var 3))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app (template_hole 1, template_var 2))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_app (template_hole 1, template_var 8))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 1)),
                     template_app (template_hole 1, template_var 3))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 1)),
                   template_app (template_hole 1, template_var 2)))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0)),
                   template_app (template_hole 1, template_var 3))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_app (template_hole 1, template_var 2)))))))),
    ("FaceDivisionProps.pre_subdivFace'_Some1",
     "[| pre_subdivFace' ?g ?f ?v' ?v ?n (Some ?u # ?vol); ?f : \<F> ?g;
         ?f \<bullet> ?v = ?u --> ?n ~= 0; \<V> ?f <= \<V> ?g;
         ?f21.0 =
         fst (snd (splitFace ?g ?v ?u ?f
                    [countVertices ?g..<countVertices ?g + ?n]));
         ?g' =
         snd (snd (splitFace ?g ?v ?u ?f
                    [countVertices ?g..<countVertices ?g + ?n])) |]
      ==> pre_subdivFace' ?g' ?f21.0 ?v' ?u 0 ?vol",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 23, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_app
               (template_app
                 (template_hole 22,
                  template_app (template_hole 21, template_var 3)),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 7),
              template_app
               (template_hole 19,
                template_app (template_hole 18, template_var 8)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_app (template_hole 15, template_var 7),
                      template_var 5)),
                  template_var 3)),
              template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 16, template_var 4),
                  template_hole 13)))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 11,
            template_app (template_hole 10, template_var 7)),
          template_app
           (template_hole 11,
            template_app (template_hole 9, template_var 8))),
        template_equation
         (template_var 1,
          template_app
           (template_hole 7,
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 8),
                      template_var 5),
                    template_var 3),
                  template_var 7),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 8)),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_hole 3, template_var 8)),
                    template_var 4)))))),
        template_equation
         (template_var 0,
          template_app
           (template_hole 0,
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 8),
                      template_var 5),
                    template_var 3),
                  template_var 7),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 8)),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_hole 3, template_var 8)),
                    template_var 4))))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 23, template_var 0),
                     template_var 1),
                   template_var 6),
                 template_var 3),
               template_hole 13),
             template_var 2)
           )))]:
   (string * thm * template) list
### theory "Draft.FaceDivisionPropsTemplates"
### 0.495s elapsed time, 0.625s cpu time, 0.066s GC time
val it = (): unit
