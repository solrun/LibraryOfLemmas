Loading theory "Draft.ListAux" (required by "Draft.InvariantsTemplates" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation")
Loading theory "Draft.RTranCl" (required by "Draft.InvariantsTemplates" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane")
Loading theory "Draft.Quasi_Order" (required by "Draft.InvariantsTemplates" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation" via "Draft.PlaneGraphIso")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.InvariantsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
locale quasi_order
  fixes qle :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 60)
  assumes "quasi_order (\<preceq>)"
Proofs for inductive predicate(s) "RTranClp"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
  Proving monotonicity ...
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Quasi_Order"
### 0.074s elapsed time, 0.321s cpu time, 0.000s GC time
Loading theory "Draft.PlaneGraphIso" (required by "Draft.InvariantsTemplates" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation")
### Ambiguous input (line 130 of "$AFP/Flyspeck-Tame/ListAux.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Product_Type.Times" ("_position" as) ("_position" bs))
###   ("_concat" ("_position" a) ("_position" as)
###     ("_applC" ("_position" listProd1)
###       ("_cargs" ("_position" a) ("_position" bs)))))
### ("\<^const>Pure.eq" ("\<^fixed>listProd" ("_position" as) ("_position" bs))
###   ("_concat" ("_position" a) ("_position" as)
###     ("_applC" ("_position" listProd1)
###       ("_cargs" ("_position" a) ("_position" bs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/Flyspeck-Tame/ListAux.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set)
###       ("\<^const>ListAux.listProd" ("_position" xs) ("_position" ys)))
###     ("\<^const>Product_Type.Times"
###       ("_applC" ("_position" set) ("_position" xs))
###       ("_applC" ("_position" set) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set)
###       ("\<^const>Product_Type.Times" ("_position" xs) ("_position" ys)))
###     ("\<^const>Product_Type.Times"
###       ("_applC" ("_position" set) ("_position" xs))
###       ("_applC" ("_position" set) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### No equation for constructor "[]"
consts
  minimal :: "('a => nat) => 'a list => 'a"
### Ignoring duplicate safe introduction (intro!)
### EX y. ?x = Some y ==> ?x ~= None
### Ignoring duplicate safe elimination (elim!)
### [| ?x ~= None; EX y. ?x = Some y ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### ?x = None ==> ALL y. ?x ~= Some y
### Ignoring duplicate safe elimination (elim!)
### [| ALL y. ?x ~= Some y; ?x = None ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX y. ?x = Some y ==> ?x ~= None
### Ignoring duplicate safe elimination (elim!)
### [| ?x ~= None; EX y. ?x = Some y ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?x1 ~= None == EX y. ?x1 = Some y
### Ignoring duplicate safe introduction (intro!)
### ?x = None ==> ALL y. ?x ~= Some y
### Ignoring duplicate safe elimination (elim!)
### [| ALL y. ?x ~= Some y; ?x = None ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ALL y. ?x1 ~= Some y == ?x1 = None
### No equation for constructor "[]"
consts
  min_list :: "nat list => nat"
### No equation for constructor "[]"
overloading
  congs \<equiv> pr_isomorphic :: 'a list => 'a list => bool
consts
  max_list :: "nat list => nat"
consts
  replace :: "'a => 'a list => 'a list => 'a list"
consts
  mapAt :: "nat list => ('a => 'a) => 'a list => 'a list"
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.604s cpu time, 0.039s GC time
Loading theory "Draft.IArray_Syntax" (required by "Draft.InvariantsTemplates" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator")
### theory "Draft.RTranCl"
### 0.158s elapsed time, 0.643s cpu time, 0.039s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.InvariantsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "Draft.IArray_Syntax"
### 0.068s elapsed time, 0.271s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.InvariantsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  pr_iso_test0 ::
    "('a => 'b option) => 'a list list => 'b list list => bool"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  splitAtRec :: "'a => 'a list => 'a list => 'a list * 'a list"
consts
  pr_iso_test1 ::
    "('a => 'b option) => 'a list list => 'b list list => bool"
consts
  pr_iso_test2 ::
    "(('a * 'b) list => ('a * 'b) list => bool)
     => (('a * 'b) list => ('a * 'b) list => ('a * 'b) list)
        => ('a * 'b) list => 'a list list => 'b list list => bool"
Found termination order: "size_list size <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### ?A1 - ?B1 <= ?A1 == True
### theory "HOL-Library.Set_Algebras"
### 0.227s elapsed time, 0.874s cpu time, 0.190s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.InvariantsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  merge :: "('a * 'b) list => ('a * 'b) list => ('a * 'b) list"
consts
  pr_iso_test_rec ::
    "('a * 'b) list => 'a list list => 'b list list => bool"
### theory "HOL-Library.Nat_Bijection"
### 0.349s elapsed time, 1.364s cpu time, 0.190s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.InvariantsTemplates" via "Draft.ExtrEqs")
### theory "Draft.PlaneGraphIso"
### 0.499s elapsed time, 1.935s cpu time, 0.328s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.InvariantsTemplates" via "Draft.ExtrEqs")
consts
  removeKeyList :: "'a list => ('a * 'b) list => ('a * 'b) list"
### theory "Draft.ListAux"
### 0.599s elapsed time, 2.346s cpu time, 0.328s GC time
Loading theory "Draft.Rotation" (required by "Draft.InvariantsTemplates" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph")
### theory "Draft.Rotation"
### 0.203s elapsed time, 0.797s cpu time, 0.083s GC time
Loading theory "Draft.Graph" (required by "Draft.InvariantsTemplates" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
overloading
  final_face \<equiv> final :: face => bool
  type_face \<equiv> type :: face => facetype
  vertices_face \<equiv> vertices :: face => nat list
  cong_face \<equiv> pr_isomorphic :: face => face => bool
### theory "HOL-Library.BigO"
### 1.063s elapsed time, 4.029s cpu time, 0.893s GC time
consts
  final_face :: "face => bool"
### theory "HOL-Library.Stream"
### 1.140s elapsed time, 4.317s cpu time, 0.992s GC time
consts
  type_face :: "face => facetype"
consts
  vertices_face :: "face => nat list"
consts
  nextElem :: "'a list => 'a => 'a => 'a"
Found termination order: "size <*mlex*> {}"
overloading
  edges_face \<equiv> edges :: face => (nat * nat) set
overloading
  op_vertices \<equiv> op :: nat list => nat list
overloading
  op_graph \<equiv> op :: face => face
consts
  op_graph :: "face => face"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  faces :: "graph => face list"
consts
  countVertices :: "graph => nat"
overloading
  vertices_graph \<equiv> vertices :: graph => nat list
consts
  vertices_graph :: "graph => nat list"
consts
  faceListAt :: "graph => face list list"
Found termination order: "size <*mlex*> {}"
consts
  heights :: "graph => nat list"
overloading
  finalGraph \<equiv> final :: graph => bool
overloading
  edges_graph \<equiv> edges :: graph => (nat * nat) set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 257 of "$AFP/Flyspeck-Tame/Graph.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>nextFace" ("_position" p))
###   ("_lambda" ("_position" f)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_pattern" ("_position" g) ("_position" v))
###           ("_position" p))
###         ("_bind" ("_position" fs)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" v)))))
###       ("_case_syntax" ("_position" fs)
###         ("_case2" ("_case1" ("\<^const>List.list.Nil") ("_position" f))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" g) ("_position" gs))
###             ("_applC" ("_position" nextElem)
###               ("_cargs" ("_position" fs)
###                 ("_cargs" ("_applC" ("_position" hd) ("_position" fs))
###                   ("_position" f))))))))))
### ("\<^const>Pure.eq" ("\<^const>Graph.nextVertex" ("_position" p))
###   ("_lambda" ("_position" f)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_pattern" ("_position" g) ("_position" v))
###           ("_position" p))
###         ("_bind" ("_position" fs)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" v)))))
###       ("_case_syntax" ("_position" fs)
###         ("_case2" ("_case1" ("\<^const>List.list.Nil") ("_position" f))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" g) ("_position" gs))
###             ("_applC" ("_position" nextElem)
###               ("_cargs" ("_position" fs)
###                 ("_cargs" ("_applC" ("_position" hd) ("_position" fs))
###                   ("_position" f))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Graph"
### 1.356s elapsed time, 4.237s cpu time, 0.966s GC time
Loading theory "Draft.FaceDivision" (required by "Draft.InvariantsTemplates" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane")
Loading theory "Draft.GraphProps" (required by "Draft.InvariantsTemplates" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.EnumeratorProps")
Loading theory "Draft.Enumerator" (required by "Draft.InvariantsTemplates" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane")
### Ambiguous input (line 134 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" vertices) ("_position" f))
###       ("\<^const>List.list.Nil")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" vertices) ("_position" f))
###       ("\<^const>List.list.Nil")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 147 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" vertices) ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" vertices) ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 152 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 170 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("\<^const>List.nth"
###           ("_applC" ("_position" vertices) ("_position" f))
###           ("_position" i)))
###       ("\<^const>List.nth" ("_applC" ("_position" vertices) ("_position" f))
###         ("\<^const>Rings.modulo_class.modulo"
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("\<^const>List.nth"
###           ("_applC" ("_position" vertices) ("_position" f))
###           ("_position" i)))
###       ("\<^const>List.nth" ("_applC" ("_position" vertices) ("_position" f))
###         ("\<^const>Rings.modulo_class.modulo"
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/Flyspeck-Tame/FaceDivision.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" splitFace)
###     ("_cargs" ("_position" g)
###       ("_cargs" ("_position" ram\<^sub>1)
###         ("_cargs" ("_position" ram\<^sub>2)
###           ("_cargs" ("_position" oldF) ("_position" newVs))))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" faces) ("_position" g)))
###       ("_binds"
###         ("_bind" ("_position" n)
###           ("_applC" ("_position" countVertices) ("_position" g)))
###         ("_binds"
###           ("_bind" ("_position" Fs)
###             ("_applC" ("_position" faceListAt) ("_position" g)))
###           ("_binds"
###             ("_bind" ("_position" h)
###               ("_applC" ("_position" heights) ("_position" g)))
###             ("_binds"
###               ("_bind" ("_position" vs\<^sub>1)
###                 ("_applC" ("_position" between)
###                   ("_cargs"
###                     ("_applC" ("_position" vertices) ("_position" oldF))
###                     ("_cargs" ("_position" ram\<^sub>1)
###                       ("_position" ram\<^sub>2)))))
###               ("_binds"
###                 ("_bind" ("_position" vs\<^sub>2)
###                   ("_applC" ("_position" between)
###                     ("_cargs"
###                       ("_applC" ("_position" vertices) ("_position" oldF))
###                       ("_cargs" ("_position" ram\<^sub>2)
###                         ("_position" ram\<^sub>1)))))
###                 ("_binds"
###                   ("_bind"
###                     ("_pattern" ("_position" f\<^sub>1)
###                       ("_position" f\<^sub>2))
###                     ("_applC" ("_position" split_face)
###                       ("_cargs" ("_position" oldF)
###                         ("_cargs" ("_position" ram\<^sub>1)
###                           ("_cargs" ("_position" ram\<^sub>2)
###                             ("_position" newVs))))))
###                   ("_binds"
###                     ("_bind" ("_position" Fs)
###                       ("_applC" ("_position" replacefacesAt)
###                         ("_cargs" ("_position" vs\<^sub>1)
###                           ("_cargs" ("_position" oldF)
###                             ("_cargs" ("_list" ("_position" f\<^sub>1))
###                               ("_position" Fs))))))
###                     ("_binds"
###                       ("_bind" ("_position" Fs)
###                         ("_applC" ("_position" replacefacesAt)
###                           ("_cargs" ("_position" vs\<^sub>2)
###                             ("_cargs" ("_position" oldF)
###                               ("_cargs" ("_list" ("_position" f\<^sub>2))
###                                 ("_position" Fs))))))
###                       ("_binds"
###                         ("_bind" ("_position" Fs)
###                           ("_applC" ("_position" replacefacesAt)
###                             ("_cargs" ("_list" ("_position" ram\<^sub>1))
###                               ("_cargs" ("_position" oldF)
###                                 ("_cargs"
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>2)
### ("_position" f\<^sub>1)))
###                                   ("_position" Fs))))))
###                         ("_binds"
###                           ("_bind" ("_position" Fs)
###                             ("_applC" ("_position" replacefacesAt)
###                               ("_cargs" ("_list" ("_position" ram\<^sub>2))
###                                 ("_cargs" ("_position" oldF)
###                                   ("_cargs"
###                                     ("_list"
### ("_args" ("_position" f\<^sub>1) ("_position" f\<^sub>2)))
###                                     ("_position" Fs))))))
###                           ("_bind" ("_position" Fs)
###                             ("\<^const>HOL.disj"
###                               ("\<^const>List.append" ("_position" Fs)
###                                 ("_position" replicate))
###                               ("\<^const>HOL.disj" ("_position" newVs)
###                                 ("_list"
###                                   ("_args" ("_position" f\<^sub>1)
###                                     ("_position" f\<^sub>2)))))))))))))))))
###     ("_tuple" ("_position" f\<^sub>1)
###       ("_tuple_args" ("_position" f\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" Graph)
###             ("_cargs"
###               ("\<^const>List.append"
###                 ("_applC" ("_position" replace)
###                   ("_cargs" ("_position" oldF)
###                     ("_cargs" ("_list" ("_position" f\<^sub>2))
###                       ("_position" fs))))
###                 ("_list" ("_position" f\<^sub>1)))
###               ("_cargs"
###                 ("\<^const>Groups.plus_class.plus" ("_position" n)
###                   ("\<^const>List.length" ("_position" newVs)))
###                 ("_cargs" ("_position" Fs)
###                   ("\<^const>List.append" ("_position" h)
###                     ("_applC" ("_position" heightsNewVertices)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" h)
###                           ("_position" ram\<^sub>1))
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" h)
###                             ("_position" ram\<^sub>2))
###                           ("\<^const>List.length"
###                             ("_position" newVs)))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" splitFace)
###     ("_cargs" ("_position" g)
###       ("_cargs" ("_position" ram\<^sub>1)
###         ("_cargs" ("_position" ram\<^sub>2)
###           ("_cargs" ("_position" oldF) ("_position" newVs))))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" faces) ("_position" g)))
###       ("_binds"
###         ("_bind" ("_position" n)
###           ("_applC" ("_position" countVertices) ("_position" g)))
###         ("_binds"
###           ("_bind" ("_position" Fs)
###             ("_applC" ("_position" faceListAt) ("_position" g)))
###           ("_binds"
###             ("_bind" ("_position" h)
###               ("_applC" ("_position" heights) ("_position" g)))
###             ("_binds"
###               ("_bind" ("_position" vs\<^sub>1)
###                 ("_applC" ("_position" between)
###                   ("_cargs"
###                     ("_applC" ("_position" vertices) ("_position" oldF))
###                     ("_cargs" ("_position" ram\<^sub>1)
###                       ("_position" ram\<^sub>2)))))
###               ("_binds"
###                 ("_bind" ("_position" vs\<^sub>2)
###                   ("_applC" ("_position" between)
###                     ("_cargs"
###                       ("_applC" ("_position" vertices) ("_position" oldF))
###                       ("_cargs" ("_position" ram\<^sub>2)
###                         ("_position" ram\<^sub>1)))))
###                 ("_binds"
###                   ("_bind"
###                     ("_pattern" ("_position" f\<^sub>1)
###                       ("_position" f\<^sub>2))
###                     ("_applC" ("_position" split_face)
###                       ("_cargs" ("_position" oldF)
###                         ("_cargs" ("_position" ram\<^sub>1)
###                           ("_cargs" ("_position" ram\<^sub>2)
###                             ("_position" newVs))))))
###                   ("_binds"
###                     ("_bind" ("_position" Fs)
###                       ("_applC" ("_position" replacefacesAt)
###                         ("_cargs" ("_position" vs\<^sub>1)
###                           ("_cargs" ("_position" oldF)
###                             ("_cargs" ("_list" ("_position" f\<^sub>1))
###                               ("_position" Fs))))))
###                     ("_binds"
###                       ("_bind" ("_position" Fs)
###                         ("_applC" ("_position" replacefacesAt)
###                           ("_cargs" ("_position" vs\<^sub>2)
###                             ("_cargs" ("_position" oldF)
###                               ("_cargs" ("_list" ("_position" f\<^sub>2))
###                                 ("_position" Fs))))))
###                       ("_binds"
###                         ("_bind" ("_position" Fs)
###                           ("_applC" ("_position" replacefacesAt)
###                             ("_cargs" ("_list" ("_position" ram\<^sub>1))
###                               ("_cargs" ("_position" oldF)
###                                 ("_cargs"
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>2)
### ("_position" f\<^sub>1)))
###                                   ("_position" Fs))))))
###                         ("_binds"
###                           ("_bind" ("_position" Fs)
###                             ("_applC" ("_position" replacefacesAt)
###                               ("_cargs" ("_list" ("_position" ram\<^sub>2))
###                                 ("_cargs" ("_position" oldF)
###                                   ("_cargs"
###                                     ("_list"
### ("_args" ("_position" f\<^sub>1) ("_position" f\<^sub>2)))
###                                     ("_position" Fs))))))
###                           ("_bind" ("_position" Fs)
###                             ("\<^const>List.append" ("_position" Fs)
###                               ("_applC" ("_position" replicate)
###                                 ("_cargs"
###                                   ("\<^const>List.length"
###                                     ("_position" newVs))
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>1)
### ("_position" f\<^sub>2))))))))))))))))))
###     ("_tuple" ("_position" f\<^sub>1)
###       ("_tuple_args" ("_position" f\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" Graph)
###             ("_cargs"
###               ("\<^const>List.append"
###                 ("_applC" ("_position" replace)
###                   ("_cargs" ("_position" oldF)
###                     ("_cargs" ("_list" ("_position" f\<^sub>2))
###                       ("_position" fs))))
###                 ("_list" ("_position" f\<^sub>1)))
###               ("_cargs"
###                 ("\<^const>Groups.plus_class.plus" ("_position" n)
###                   ("\<^const>List.length" ("_position" newVs)))
###                 ("_cargs" ("_position" Fs)
###                   ("\<^const>List.append" ("_position" h)
###                     ("_applC" ("_position" heightsNewVertices)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" h)
###                           ("_position" ram\<^sub>1))
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" h)
###                             ("_position" ram\<^sub>2))
###                           ("\<^const>List.length"
###                             ("_position" newVs)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###       ("_applC" ("\<^const>Graph.edges")
###         ("_constrain" ("_position" f) ("_type_name" face))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" a))
###         ("_position" b))
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###       ("_applC" ("\<^const>Graph.edges")
###         ("_constrain" ("_position" f) ("_type_name" face))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" a))
###         ("_position" b))
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" v)
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))))
###       ("_applC" ("_position" edges) ("_position" f)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" v)
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))))
###       ("_applC" ("_position" edges) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 215 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 231 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Flyspeck-Tame/FaceDivision.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" u)
###             ("_cargs" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" vo)
###                 ("_position" vos)))))))
###     ("_case_syntax" ("_position" vo)
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" subdivFace')
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_applC" ("_position" Suc) ("_position" n))
###                     ("_position" vos)))))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" u))
###                 ("_position" v))
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("_applC" ("_position" subdivFace')
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("\<^const>Groups.zero_class.zero")
###                       ("_position" vos))))))
###             ("_Let"
###               ("_binds"
###                 ("_bind" ("_position" ws)
###                   ("\<^const>List.upt"
###                     ("_applC" ("_position" countVertices) ("_position" g))
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("_position" n))))
###                 ("_bind"
###                   ("_pattern" ("_position" f\<^sub>1)
###                     ("_patterns" ("_position" f\<^sub>2) ("_position" g')))
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" f) ("_position" ws))))))))
###               ("_applC" ("_position" subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f\<^sub>2)
###                     ("_cargs" ("_position" v)
###                       ("_cargs" ("\<^const>Groups.zero_class.zero")
###                         ("_position" vos)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" u)
###             ("_cargs" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" vo)
###                 ("_position" vos)))))))
###     ("_case_syntax" ("_position" vo)
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" subdivFace')
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_applC" ("_position" Suc) ("_position" n))
###                     ("_position" vos)))))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" u))
###                 ("_position" v))
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("_applC" ("_position" subdivFace')
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("\<^const>Groups.zero_class.zero")
###                       ("_position" vos))))))
###             ("_Let"
###               ("_binds"
###                 ("_bind" ("_position" ws)
###                   ("\<^const>List.upt"
###                     ("_applC" ("_position" countVertices) ("_position" g))
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("_position" n))))
###                 ("_bind"
###                   ("_pattern" ("_position" f\<^sub>1)
###                     ("_patterns" ("_position" f\<^sub>2) ("_position" g')))
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" f) ("_position" ws))))))))
###               ("_applC" ("_position" subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f\<^sub>2)
###                     ("_cargs" ("_position" v)
###                       ("_cargs" ("\<^const>Groups.zero_class.zero")
###                         ("_position" vos)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 240 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subdivFace' :: "graph => face => nat => nat => nat option list => graph"
### theory "Draft.FaceDivision"
### 0.173s elapsed time, 0.672s cpu time, 0.065s GC time
### Ambiguous input (line 257 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 64 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 281 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 315 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 322 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.greater"
###             ("\<^const>List.length"
###               ("_applC" ("_position" vertices) ("_position" f)))
###             ("\<^const>Groups.one_class.one"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.greater"
###             ("\<^const>List.length"
###               ("_applC" ("_position" vertices) ("_position" f)))
###             ("\<^const>Groups.one_class.one"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 343 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 360 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u)
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u)
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 383 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" v)
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.list.Nil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" v)
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.list.Nil"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 396 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" u)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" u)
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.append"
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u) ("_position" v))))
###         ("_list" ("_position" v))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" u)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" u)
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.append"
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u) ("_position" v))))
###         ("_list" ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 403 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" v)
###                 ("_applC" ("_position" set)
###                   ("\<^const>List.list.Cons" ("_position" x)
###                     ("_applC" ("_position" between)
###                       ("_cargs"
###                         ("_applC" ("_position" vertices) ("_position" f))
###                         ("_cargs" ("_position" x)
###                           ("_position" y)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("_position" nextElem)
###         ("_cargs"
###           ("\<^const>List.list.Cons" ("_position" x)
###             ("\<^const>List.append"
###               ("_applC" ("_position" between)
###                 ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###                   ("_cargs" ("_position" x) ("_position" y))))
###               ("_list" ("_position" y))))
###           ("_cargs" ("_position" z) ("_position" v)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" v)
###                 ("_applC" ("_position" set)
###                   ("\<^const>List.list.Cons" ("_position" x)
###                     ("_applC" ("_position" between)
###                       ("_cargs"
###                         ("_applC" ("_position" vertices) ("_position" f))
###                         ("_cargs" ("_position" x)
###                           ("_position" y)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("_position" nextElem)
###         ("_cargs"
###           ("\<^const>List.list.Cons" ("_position" x)
###             ("\<^const>List.append"
###               ("_applC" ("_position" between)
###                 ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###                   ("_cargs" ("_position" x) ("_position" y))))
###               ("_list" ("_position" y))))
###           ("_cargs" ("_position" z) ("_position" v)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.GraphProps"
### 0.293s elapsed time, 1.068s cpu time, 0.107s GC time
Found termination order: "size <*mlex*> {}"
consts
  hideDupsRec :: "'a => 'a list => 'a option list"
consts
  hideDups :: "'a list => 'a option list"
### theory "Draft.Enumerator"
### 0.329s elapsed time, 1.145s cpu time, 0.107s GC time
Loading theory "Draft.EnumeratorProps" (required by "Draft.InvariantsTemplates" via "Draft.Invariants" via "Draft.FaceDivisionProps")
Loading theory "Draft.Plane" (required by "Draft.InvariantsTemplates" via "Draft.Invariants" via "Draft.FaceDivisionProps")
### theory "HOL-Library.Tree"
### 2.188s elapsed time, 7.236s cpu time, 1.255s GC time
Loading theory "Draft.Templates" (required by "Draft.InvariantsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.084s elapsed time, 0.266s cpu time, 0.081s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.InvariantsTemplates")
### theory "Draft.EnumeratorProps"
### 0.266s elapsed time, 0.807s cpu time, 0.081s GC time
consts
  containsUnacceptableEdgeSnd ::
    "(nat => nat => bool) => nat => nat list => bool"
consts
  containsUnacceptableEdge :: "(nat => nat => bool) => nat list => bool"
### theory "Draft.Plane"
### 0.357s elapsed time, 0.998s cpu time, 0.081s GC time
Loading theory "Draft.FaceDivisionProps" (required by "Draft.InvariantsTemplates" via "Draft.Invariants")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.850s elapsed time, 2.232s cpu time, 1.081s GC time
### Ambiguous input (line 1398 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" last)
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_position" v)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" vertices) ("_position" f)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))
###           ("_applC" ("_position" hd)
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" last)
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_position" v)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" vertices) ("_position" f)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))
###           ("_applC" ("_position" hd)
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1622 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" length)
###             ("_applC" ("_position" vertices) ("_position" f)))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal"
###             ("_applC" ("_position" last)
###               ("_applC" ("_position" verticesFrom)
###                 ("_cargs" ("_position" f) ("_position" v))))
###             ("_position" u)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" verticesFrom)
###                   ("_cargs" ("_position" f) ("_position" v)))
###                 ("_position" i))
###               ("_position" u)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" u))
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" verticesFrom)
###                   ("_cargs" ("_position" f) ("_position" v)))
###                 ("_applC" ("_position" Suc) ("_position" i))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" length)
###             ("_applC" ("_position" vertices) ("_position" f)))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal"
###             ("_applC" ("_position" last)
###               ("_applC" ("_position" verticesFrom)
###                 ("_cargs" ("_position" f) ("_position" v))))
###             ("_position" u)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" verticesFrom)
###                   ("_cargs" ("_position" f) ("_position" v)))
###                 ("_position" i))
###               ("_position" u)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" u))
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" verticesFrom)
###                   ("_cargs" ("_position" f) ("_position" v)))
###                 ("_applC" ("_position" Suc) ("_position" i))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  natToVertexListRec :: "nat => nat => face => nat list => nat option list"
consts
  natToVertexList :: "nat => face => nat list => nat option list"
### Ambiguous input (line 3534 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" i)
###           ("_applC" ("_position" set) ("_position" is))
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length)
###               ("_applC" ("_position" vertices) ("_position" f))))))
###       ("\<^const>Pure.all_binder" ("_position" a)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("_applC" ("_position" length)
###                 ("_applC" ("_position" vertices) ("_position" f)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" hideDupsRec)
###                 ("_cargs"
###                   ("_applC"
###                     ("\<^const>Nat.compower"
###                       ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a))
###                     ("_position" v))
###                   ("_listcompr"
###                     ("_applC"
###                       ("\<^const>Nat.compower"
###                         ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" k))
###                       ("_position" v))
###                     ("_lc_gen" ("_position" k) ("_position" is))
###                     ("_lc_end"))))
###               ("_applC" ("_position" natToVertexListRec)
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" f) ("_position" is))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" i)
###           ("_applC" ("_position" set) ("_position" is))
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length)
###               ("_applC" ("_position" vertices) ("_position" f))))))
###       ("\<^const>Pure.all_binder" ("_position" a)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("_applC" ("_position" length)
###                 ("_applC" ("_position" vertices) ("_position" f)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" hideDupsRec)
###                 ("_cargs"
###                   ("_applC"
###                     ("\<^const>Nat.compower"
###                       ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a))
###                     ("_position" v))
###                   ("_listcompr"
###                     ("_applC"
###                       ("\<^const>Nat.compower"
###                         ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" k))
###                       ("_position" v))
###                     ("_lc_gen" ("_position" k) ("_position" is))
###                     ("_lc_end"))))
###               ("_applC" ("_position" natToVertexListRec)
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" f) ("_position" is))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" i)
###           ("_applC" ("_position" set) ("_position" is))
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length)
###               ("_applC" ("_position" vertices) ("_position" f))))))
###       ("\<^const>Pure.all_binder" ("_position" a)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("_applC" ("_position" length)
###                 ("_applC" ("_position" vertices) ("_position" f)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" hideDupsRec)
###                 ("_cargs"
###                   ("_applC"
###                     ("\<^const>Nat.compower"
###                       ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a))
###                     ("_position" v))
###                   ("_listcompr"
###                     ("_applC"
###                       ("\<^const>Nat.compower"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_position" k))
###                       ("_position" v))
###                     ("_lc_gen" ("_position" k) ("_position" is))
###                     ("_lc_end"))))
###               ("_applC" ("_position" natToVertexListRec)
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" f) ("_position" is))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" i)
###           ("_applC" ("_position" set) ("_position" is))
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length)
###               ("_applC" ("_position" vertices) ("_position" f))))))
###       ("\<^const>Pure.all_binder" ("_position" a)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("_applC" ("_position" length)
###                 ("_applC" ("_position" vertices) ("_position" f)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" hideDupsRec)
###                 ("_cargs"
###                   ("_applC"
###                     ("\<^const>Nat.compower"
###                       ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a))
###                     ("_position" v))
###                   ("_listcompr"
###                     ("_applC"
###                       ("\<^const>Nat.compower"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_position" k))
###                       ("_position" v))
###                     ("_lc_gen" ("_position" k) ("_position" is))
###                     ("_lc_end"))))
###               ("_applC" ("_position" natToVertexListRec)
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" f) ("_position" is))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3912 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invalidVertexList)
###     ("_cargs" ("_position" g) ("_cargs" ("_position" f) ("_position" vs))))
###   ("_Ex_less" ("_position" i)
###     ("\<^const>Groups.minus_class.minus"
###       ("\<^const>List.length" ("_position" vs))
###       ("\<^const>Groups.one_class.one"))
###     ("_case_syntax" ("\<^const>List.nth" ("_position" vs) ("_position" i))
###       ("_case2" ("_case1" ("_position" None) ("_position" False))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" Some) ("_position" a))
###             ("_case_syntax"
###               ("\<^const>List.nth" ("_position" vs)
###                 ("\<^const>Groups.plus_class.plus" ("_position" i)
###                   ("\<^const>Groups.one_class.one")))
###               ("_case1" ("_position" None) ("_position" False))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" b))
###             ("_applC" ("_position" is_duplicateEdge)
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" a) ("_position" b)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invalidVertexList)
###     ("_cargs" ("_position" g) ("_cargs" ("_position" f) ("_position" vs))))
###   ("_Ex_less" ("_position" i)
###     ("\<^const>Groups.minus_class.minus"
###       ("\<^const>List.length" ("_position" vs))
###       ("\<^const>Groups.one_class.one"))
###     ("_case_syntax" ("\<^const>List.nth" ("_position" vs) ("_position" i))
###       ("_case2" ("_case1" ("_position" None) ("_position" False))
###         ("_case1" ("_applC" ("_position" Some) ("_position" a))
###           ("_case_syntax"
###             ("\<^const>List.nth" ("_position" vs)
###               ("\<^const>Groups.plus_class.plus" ("_position" i)
###                 ("\<^const>Groups.one_class.one")))
###             ("_case2" ("_case1" ("_position" None) ("_position" False))
###               ("_case1" ("_applC" ("_position" Some) ("_position" b))
###                 ("_applC" ("_position" is_duplicateEdge)
###                   ("_cargs" ("_position" g)
###                     ("_cargs" ("_position" f)
###                       ("_cargs" ("_position" a) ("_position" b)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Rewrite rule not in simpset:
### [| ?v'3 : \<V> ?f3; pre_between (vertices ?f3) ?u3 ?v3 |]
### ==> between (vertices ?f3) ?u3 ?v3 =
###     between (verticesFrom ?f3 ?v'3) ?u3 ?v3 ==
###     True
### Rewrite rule not in simpset:
### [| ?v'1 : \<V> ?f1; pre_between (vertices ?f1) ?u1 ?v1 |]
### ==> between (vertices ?f1) ?u1 ?v1 ==
###     between (verticesFrom ?f1 ?v'1) ?u1 ?v1
### Ambiguous input (line 4879 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pre_subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" v')
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" n)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Some) ("_position" u))
###                   ("_position" vol)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v))
###             ("_position" u))
###           ("\<^const>HOL.not_equal" ("_position" n)
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" pre_splitFace)
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" v)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_position" f)
###                     ("\<^const>List.upt"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" countVertices)
###                           ("_position" g))
###                         ("_position" n)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pre_subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" v')
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" n)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Some) ("_position" u))
###                   ("_position" vol)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v))
###             ("_position" u))
###           ("\<^const>HOL.not_equal" ("_position" n)
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" pre_splitFace)
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" v)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_position" f)
###                     ("\<^const>List.upt"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" countVertices)
###                           ("_position" g))
###                         ("_position" n)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4951 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pre_subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" v')
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" n)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Some) ("_position" u))
###                   ("_position" vol)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v))
###             ("_position" u))
###           ("\<^const>HOL.not_equal" ("_position" n)
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" f21)
###               ("_applC" ("_position" fst)
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" v)
###                         ("_cargs" ("_position" u)
###                           ("_cargs" ("_position" f)
###                             ("\<^const>List.upt"
###                               ("_applC" ("_position" countVertices)
###                                 ("_position" g))
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_applC" ("_position" countVertices)
###                                   ("_position" g))
###                                 ("_position" n))))))))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" g')
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" snd)
###                     ("_applC" ("_position" splitFace)
###                       ("_cargs" ("_position" g)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" u)
###                             ("_cargs" ("_position" f)
###                               ("\<^const>List.upt"
###                                 ("_applC" ("_position" countVertices)
###                                   ("_position" g))
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_applC" ("_position" countVertices)
###                                     ("_position" g))
###                                   ("_position" n))))))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" pre_subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f21)
###                     ("_cargs" ("_position" v')
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("\<^const>Groups.zero_class.zero")
###                           ("_position" vol))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pre_subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" v')
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" n)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Some) ("_position" u))
###                   ("_position" vol)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v))
###             ("_position" u))
###           ("\<^const>HOL.not_equal" ("_position" n)
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" f21)
###               ("_applC" ("_position" fst)
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" v)
###                         ("_cargs" ("_position" u)
###                           ("_cargs" ("_position" f)
###                             ("\<^const>List.upt"
###                               ("_applC" ("_position" countVertices)
###                                 ("_position" g))
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_applC" ("_position" countVertices)
###                                   ("_position" g))
###                                 ("_position" n))))))))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" g')
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" snd)
###                     ("_applC" ("_position" splitFace)
###                       ("_cargs" ("_position" g)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" u)
###                             ("_cargs" ("_position" f)
###                               ("\<^const>List.upt"
###                                 ("_applC" ("_position" countVertices)
###                                   ("_position" g))
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_applC" ("_position" countVertices)
###                                     ("_position" g))
###                                   ("_position" n))))))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" pre_subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f21)
###                     ("_cargs" ("_position" v')
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("\<^const>Groups.zero_class.zero")
###                           ("_position" vol))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.FaceDivisionProps"
### 1.641s elapsed time, 2.956s cpu time, 1.340s GC time
Loading theory "Draft.Invariants" (required by "Draft.InvariantsTemplates")
### Ambiguous input (line 247 of "$AFP/Flyspeck-Tame/Invariants.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))
###           ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 254 of "$AFP/Flyspeck-Tame/Invariants.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))
###           ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 267 of "$AFP/Flyspeck-Tame/Invariants.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g)
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" v))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g)
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" v))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 289 of "$AFP/Flyspeck-Tame/Invariants.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" g)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" g)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 294 of "$AFP/Flyspeck-Tame/Invariants.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>Graph.nextFace"
###         ("_Bex" ("_position" f')
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g)
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" v)))))
###           ("_position" f')))
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_position" v)))
###     ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>Graph.nextFace"
###         ("_Bex" ("_position" f')
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g)
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" v)))))
###           ("_position" f')))
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_position" v)))
###     ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Rewrite rule not in simpset:
### ?m1 <= ?n1 ==> ?m1 - ?n1 == 0
consts
  replacefacesAt2 ::
    "nat list => face => face list => face list list => face list list"
### theory "Draft.Invariants"
### 0.958s elapsed time, 1.991s cpu time, 1.412s GC time
Loading theory "Draft.InvariantsTemplates"
val templateLemmas =
   [("Invariants.Seed_holds_edges_disj",
     "edges_disj Seed\<^bsub>?p\<^esub>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Invariants.Seed_holds_edges_sym", "edges_sym Seed\<^bsub>?p\<^esub>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Invariants.Seed_holds_faceListAt_len",
     "faceListAt_len Seed\<^bsub>?p\<^esub>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Invariants.face_face_op_Seed", "face_face_op Seed\<^bsub>?p\<^esub>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Invariants.Seed_holds_facesAt_distinct",
     "facesAt_distinct Seed\<^bsub>?p\<^esub>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Invariants.Seed_holds_facesAt_eq",
     "facesAt_eq Seed\<^bsub>?p\<^esub>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Invariants.Seed_holds_faces_distinct",
     "faces_distinct Seed\<^bsub>?p\<^esub>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Invariants.Seed_holds_faces_subset",
     "faces_subset Seed\<^bsub>?p\<^esub>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Invariants.inv_Seed", "Invariants.inv Seed\<^bsub>?p\<^esub>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Invariants.Seed_holds_minGraphProps'",
     "minGraphProps' Seed\<^bsub>?p\<^esub>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Invariants.one_final_Seed", "one_final Seed\<^bsub>?p\<^esub>",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Invariants.inv_inv_next_plane0",
     "invariant Invariants.inv next_plane0\<^bsub>?p\<^esub>",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Invariants.inv_mgp", "Invariants.inv ?g ==> minGraphProps ?g",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Invariants.normFaces_makeFaceFinalFaceList",
     "normFaces (makeFaceFinalFaceList ?f ?fs) = normFaces ?fs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Invariants.replacefacesAt_Nil", "replacefacesAt [] ?f ?fs ?F = ?F",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2),
           template_var 1),
         template_var 0),
       template_var 0)),
    ("Invariants.minGraphProps11'",
     "minGraphProps ?g ==> distinct (faces ?g)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Invariants.one_final_antimono",
     "one_final ?g ==> one_final_but ?g ?E",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Invariants.normFaces_distinct",
     "distinct (normFaces ?fl) ==> distinct ?fl",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Invariants.two_face_Seed", "2 <= |faces Seed\<^bsub>?p\<^esub>|",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5, template_app (template_hole 4, template_hole 3)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Invariants.minGraphProps11",
     "minGraphProps ?g ==> distinct (normFaces (faces ?g))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Invariants.replacefacesAt2_length",
     "|replacefacesAt2 ?nvs ?f' ?f'' ?vs| = |?vs|",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Invariants.minVertex_zero1",
     "minVertex (Face [0..<Suc ?z] Final) = 0",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 0))),
           template_hole 0)),
       template_hole 2)),
    ("Invariants.makeFaceFinal_id", "final ?f ==> makeFaceFinal ?f ?g = ?g",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Invariants.inv_finals_nonempty",
     "Invariants.inv ?g ==> finals ?g ~= []",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Invariants.minVertex_zero2",
     "minVertex (Face (rev [0..<Suc ?z]) Nonfinal) = 0",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app (template_hole 1, template_var 0)))),
           template_hole 0)),
       template_hole 2)),
    ("Invariants.containsUnacceptableEdgeSnd_eq",
     "containsUnacceptableEdgeSnd ?N ?v ?is =
      containsUnacceptableEdgeSnd' ?N (?v # ?is)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Invariants.minGraphProps4",
     "minGraphProps ?g ==> |faceListAt ?g| = countVertices ?g",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Invariants.replacefacesAt_length",
     "|replacefacesAt ?nvs ?f' [?f''] ?vs| = |?vs|",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)),
       template_app (template_hole 3, template_var 0))),
    ("Invariants.containsDuplicateEdge_eq1",
     "containsDuplicateEdge ?g ?f ?v ?is =
      containsDuplicateEdge' ?g ?f ?v ?is",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Invariants.inv_two_faces", "Invariants.inv ?g ==> 2 <= |faces ?g|",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Invariants.no_self_edges",
     "minGraphProps' ?g ==> (?a, ?a) ~: \<E> ?g",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 0)),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("Invariants.normFace_in",
     "?f : set ?fs ==> normFace ?f : set (normFaces ?fs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Invariants.minVertex_in",
     "vertices ?f ~= [] ==> minVertex ?f : \<V> ?f",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_hole 0,
               template_app (template_hole 4, template_var 0)))
           ))),
    ("Invariants.one_final_but_antimono",
     "[| one_final_but ?g ?E; ?E <= ?E' |] ==> one_final_but ?g ?E'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Invariants.minVertex_eq_if_vertices_eq",
     "\<V> ?f = \<V> ?f' ==> minVertex ?f = minVertex ?f'",
     template_implication
      ([template_equation
         (template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 1)),
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0)))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Invariants.minGraphProps3",
     "[| minGraphProps ?g; ?f : \<F> ?g |] ==> distinct (vertices ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Invariants.mgp_dist_facesAt",
     "[| minGraphProps ?g; ?v : \<V> ?g |] ==> distinct (facesAt ?g ?v)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Invariants.MakeFaceFinal_edges_disj",
     "[| ?f : \<F> ?g; minGraphProps ?g |]
      ==> edges_disj (makeFaceFinal ?f ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Invariants.MakeFaceFinal_edges_sym",
     "[| ?f : \<F> ?g; minGraphProps ?g |]
      ==> edges_sym (makeFaceFinal ?f ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Invariants.MakeFaceFinal_faceListAt_len",
     "[| ?f : \<F> ?g; minGraphProps ?g |]
      ==> faceListAt_len (makeFaceFinal ?f ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Invariants.MakeFaceFinal_face_face_op",
     "[| ?f : \<F> ?g; minGraphProps ?g |]
      ==> face_face_op (makeFaceFinal ?f ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Invariants.MakeFaceFinal_facesAt_distinct",
     "[| ?f : \<F> ?g; minGraphProps ?g |]
      ==> facesAt_distinct (makeFaceFinal ?f ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Invariants.MakeFaceFinal_facesAt_eq",
     "[| ?f : \<F> ?g; minGraphProps ?g |]
      ==> facesAt_eq (makeFaceFinal ?f ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Invariants.MakeFaceFinal_faces_distinct",
     "[| ?f : \<F> ?g; minGraphProps ?g |]
      ==> faces_distinct (makeFaceFinal ?f ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Invariants.MakeFaceFinal_faces_subset",
     "[| ?f : \<F> ?g; minGraphProps ?g |]
      ==> faces_subset (makeFaceFinal ?f ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Invariants.MakeFaceFinal_minGraphProps",
     "[| ?f : \<F> ?g; minGraphProps ?g |]
      ==> minGraphProps (makeFaceFinal ?f ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Invariants.MakeFaceFinal_minGraphProps'",
     "[| ?f : \<F> ?g; minGraphProps ?g |]
      ==> minGraphProps' (makeFaceFinal ?f ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Invariants.minGraphProps8a'",
     "[| minGraphProps ?g; ?v < countVertices ?g |]
      ==> distinct (normFaces (faceListAt ?g ! ?v))",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0)))
           ))),
    ("Invariants.minGraphProps8",
     "[| minGraphProps ?g; ?v : \<V> ?g |]
      ==> distinct (normFaces (facesAt ?g ?v))",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Invariants.mgp_vertices_nonempty",
     "[| minGraphProps ?g; ?f : \<F> ?g |] ==> vertices ?f ~= []",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Invariants.minGraphProps8a",
     "[| minGraphProps ?g; ?v : \<V> ?g |]
      ==> distinct (normFaces (faceListAt ?g ! ?v))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 0)))
           ))),
    ("Invariants.replacefacesAt_notin",
     "?i ~: set ?is ==>
      replacefacesAt ?is ?olfF ?newFs ?Fss ! ?i = ?Fss ! ?i",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app (template_hole 3, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 4),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 4)))),
    ("Invariants.replacefacesAt2_notin",
     "?i ~: set ?is ==>
      replacefacesAt2 ?is ?olfF ?newFs ?Fss ! ?i = ?Fss ! ?i",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app (template_hole 3, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 4),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 4)))),
    ("Invariants.replacefacesAt2_nth1",
     "?k ~: set ?ns ==> replacefacesAt2 ?ns ?oldf ?newfs ?F ! ?k = ?F ! ?k",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app (template_hole 3, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 4),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 4)))),
    ("Invariants.facesAt_distinctI",
     "(!!v. v : \<V> ?g ==> distinct (normFaces (facesAt ?g v))) ==>
      facesAt_distinct ?g",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Invariants.minGraphProps2",
     "[| minGraphProps ?g; ?f : \<F> ?g |] ==> 2 < |vertices ?f|",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)))
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Invariants.mgp_vertices3",
     "[| minGraphProps ?g; ?f : \<F> ?g |] ==> 3 <= |vertices ?f|",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Invariants.minGraphProps10",
     "[| minGraphProps ?g; (?a, ?b) : \<E> ?g |] ==> (?b, ?a) : \<E> ?g",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Invariants.help", "[| ?xs ~= []; ?x ~: set ?xs |] ==> ?x ~= last ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_negation
        (
           template_equation
            (template_var 0, template_app (template_hole 0, template_var 1))
           ))),
    ("Invariants.help", "[| ?xs ~= []; ?x ~: set ?xs |] ==> ?x ~= hd ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_negation
        (
           template_equation
            (template_var 0, template_app (template_hole 0, template_var 1))
           ))),
    ("Invariants.help", "[| ?xs ~= []; ?x ~: set ?xs |] ==> last ?xs ~= ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Invariants.help", "[| ?xs ~= []; ?x ~: set ?xs |] ==> hd ?xs ~= ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Invariants.vertices_conv_Union_edges2",
     "distinct (vertices ?f) ==> \<V> ?f = (UN (a, b):\<E> ?f. {b})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 8, template_var 0)),
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app (template_hole 0, template_var 0)))))),
    ("Invariants.len_nth_repAt",
     "?i < |?xs| ==> |replacefacesAt ?is ?x [?y] ?xs ! ?i| = |?xs ! ?i|",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 6, template_var 3))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 0)),
                 template_var 3)),
             template_var 4)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 4))))),
    ("Invariants.splitFace_edges_disj2",
     "[| minGraphProps ?g; pre_splitFace ?g ?u ?v ?f ?vs |]
      ==> edges_disj (snd (snd (splitFace ?g ?u ?v ?f ?vs)))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0))))
           ))),
    ("Invariants.splitFace_face_face_op2",
     "[| minGraphProps ?g; pre_splitFace ?g ?u ?v ?f ?vs |]
      ==> face_face_op (snd (snd (splitFace ?g ?u ?v ?f ?vs)))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0))))
           ))),
    ("Invariants.incrIndexList_less_eq",
     "[| incrIndexList ?ls ?m ?nmax; Suc ?n < |?ls| |]
      ==> ?ls ! ?n <= ?ls ! Suc ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_app (template_hole 3, template_var 0),
          template_app (template_hole 2, template_var 3))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app (template_hole 3, template_var 0))))),
    ("Invariants.splitFace_holds_faceListAt_len",
     "[| pre_splitFace ?g' ?v ?a ?f' ?vs; minGraphProps ?g' |]
      ==> faceListAt_len (snd (snd (splitFace ?g' ?v ?a ?f' ?vs)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 4, template_var 4))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0))))
           ))),
    ("Invariants.splitFace_holds_minGraphProps'",
     "[| pre_splitFace ?g' ?v ?a ?f' ?vs; minGraphProps' ?g' |]
      ==> minGraphProps' (snd (snd (splitFace ?g' ?v ?a ?f' ?vs)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 4))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0))))
           ))),
    ("Invariants.splitFace_holds_edges_sym",
     "[| pre_splitFace ?g' ?v ?a ?f' ?ws; minGraphProps ?g' |]
      ==> edges_sym (snd (snd (splitFace ?g' ?v ?a ?f' ?ws)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 4, template_var 4))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0))))
           ))),
    ("Invariants.replacefacesAt_nth2",
     "?k < |?F| ==>
      replacefacesAt [?k] ?oldf ?newfs ?F ! ?k =
      replace ?oldf ?newfs (?F ! ?k)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_hole 1)),
                   template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 3))))),
    ("Invariants.replacefacesAt2_nth2",
     "?k < |?F| ==>
      replacefacesAt2 [?k] ?oldf ?newfs ?F ! ?k =
      replace ?oldf ?newfs (?F ! ?k)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_hole 1)),
                   template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 3))))),
    ("Invariants.minGraphProps9'",
     "[| minGraphProps ?g; ?f : \<F> ?g; ?v : \<V> ?f |]
      ==> ?v < countVertices ?g",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            )],
       template_inequation
        (less_than, template_var 0,
         template_app (template_hole 0, template_var 2)))),
    ("Invariants.replacefacesAt2_5",
     "?x : set (replacefacesAt2 ?ns ?oldf ?newfs ?F ! ?k) ==>
      ?x : set (?F ! ?k) | ?x : set ?newfs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 1, template_var 4),
                          template_var 3),
                        template_var 2),
                      template_var 1)),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 5),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)))),
             template_app
              (template_app (template_hole 4, template_var 5),
               template_app (template_hole 3, template_var 2)))
           ))),
    ("Invariants.minGraphProps9",
     "[| minGraphProps ?g; ?f : \<F> ?g; ?v : \<V> ?f |] ==> ?v : \<V> ?g",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Invariants.normFace_replace_in",
     "normFace ?a : set (normFaces (replace ?oldF ?newFs ?fs)) ==>
      normFace ?a : set (normFaces ?newFs) |
      normFace ?a : set (normFaces ?fs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app
                     (template_app (template_hole 1, template_var 2),
                      template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 3)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)))),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 3)),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0))))
           ))),
    ("Invariants.neighbors_edges",
     "[| minGraphProps ?g; ?a : \<V> ?g |]
      ==> (?b : set (neighbors ?g ?a)) = ((?a, ?b) : \<E> ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0),
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 2))))),
    ("Invariants.minGraphProps6",
     "[| minGraphProps ?g; ?v : \<V> ?g; ?f : set (facesAt ?g ?v) |]
      ==> ?v : \<V> ?f",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Invariants.minGraphProps5",
     "[| minGraphProps ?g; ?v : \<V> ?g; ?f : set (facesAt ?g ?v) |]
      ==> ?f : \<F> ?g",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Invariants.mgp_no_loop",
     "[| minGraphProps ?g; ?f : \<F> ?g; ?v : \<V> ?f |]
      ==> ?f \<bullet> ?v ~= ?v",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 0)
           ))),
    ("Invariants.minGraphProps7",
     "[| minGraphProps ?g; ?f : \<F> ?g; ?v : \<V> ?f |]
      ==> ?f : set (facesAt ?g ?v)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("Invariants.mgp_facesAt_no_loop",
     "[| minGraphProps ?g; ?v : \<V> ?g; ?f : set (facesAt ?g ?v) |]
      ==> ?f \<bullet> ?v ~= ?v",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 1)
           ))),
    ("Invariants.minGraphProps7'",
     "[| minGraphProps ?g; ?f : \<F> ?g; ?v : \<V> ?f |]
      ==> ?f : set (faceListAt ?g ! ?v)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 0)))
           ))),
    ("Invariants.nextVertex_in_graph",
     "[| minGraphProps ?g; ?v : \<V> ?g; ?f : set (facesAt ?g ?v) |]
      ==> ?f \<bullet> ?v : \<V> ?g",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)))
           ))),
    ("Invariants.minGraphProps12",
     "[| minGraphProps ?g; ?f : \<F> ?g; (?a, ?b) : \<E> ?f |]
      ==> (?b, ?a) ~: \<E> ?f",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_app (template_hole 1, template_var 2))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 1)),
                 template_app (template_hole 1, template_var 2))
               )
           ))),
    ("Invariants.in_facesAt_nextVertex",
     "[| minGraphProps ?g; ?v : \<V> ?g; ?f : set (facesAt ?g ?v) |]
      ==> ?f : set (facesAt ?g (?f \<bullet> ?v))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))))
           ))),
    ("Invariants.distinct_replace_norm",
     "[| distinct (normFaces ?fs); distinct (normFaces ?newFs);
         set (normFaces ?fs) Int set (normFaces ?newFs) <= {} |]
      ==> distinct (normFaces (replace ?oldF ?newFs ?fs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_hole 2,
                template_app (template_hole 5, template_var 2))),
            template_app
             (template_hole 2,
              template_app (template_hole 5, template_var 1))),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1),
                 template_var 2)))
           ))),
    ("Invariants.subdivFace'_holds_minGraphProps",
     "[| pre_subdivFace' ?g ?f ?v' ?v ?n ?ovl; ?f : \<F> ?g;
         minGraphProps ?g |]
      ==> minGraphProps (subdivFace' ?g ?f ?v ?n ?ovl)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 5)))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 5))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Invariants.splitFace_edge_disj",
     "[| minGraphProps ?g; pre_splitFace ?g ?u ?v ?f ?vs;
         (?f\<^sub>1, ?f\<^sub>2, ?g') = splitFace ?g ?u ?v ?f ?vs |]
      ==> edges_disj ?g'",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4),
            template_var 3))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Invariants.splitFace_face_face_op",
     "[| minGraphProps ?g; pre_splitFace ?g ?u ?v ?f ?vs;
         (?f\<^sub>1, ?f\<^sub>2, ?g') = splitFace ?g ?u ?v ?f ?vs |]
      ==> face_face_op ?g'",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4),
            template_var 3))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Invariants.normFace_in_cong",
     "[| vertices ?f ~= []; minGraphProps ?g;
         normFace ?f : set (normFaces (faces ?g)) |]
      ==> EX f':\<F> ?g. ?f \<cong> f'",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 10, template_var 1),
              template_hole 9)
            ),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 0))),
             t_empty)
           ))),
    ("Invariants.normFace_neq",
     "[| ?a : \<V> ?f; ?a ~: \<V> ?f'; vertices ?f' ~= [] |]
      ==> normFace ?f ~= normFace ?f'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 0)))
                )
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 0),
              template_hole 1)
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Invariants.minGraphProps_facesAt_eq",
     "[| minGraphProps ?g; ?v : \<V> ?g |]
      ==> set (facesAt ?g ?v) = {f: \<F> ?g. ?v : \<V> f}",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)))
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app (template_hole 4, t_empty)))),
    ("Invariants.replacefacesAt_in",
     "[| ?i : set ?is; distinct ?is; ?i < |?Fss| |]
      ==> replacefacesAt ?is ?olfF ?newFs ?Fss ! ?i =
          replace ?olfF ?newFs (?Fss ! ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate (template_app (template_hole 6, template_var 3)),
        template_inequation
         (less_than, template_var 4,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 4))))),
    ("Invariants.replacefacesAt2_in",
     "[| ?i : set ?is; distinct ?is; ?i < |?Fss| |]
      ==> replacefacesAt2 ?is ?olfF ?newFs ?Fss ! ?i =
          replace ?olfF ?newFs (?Fss ! ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate (template_app (template_hole 6, template_var 3)),
        template_inequation
         (less_than, template_var 4,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 4))))),
    ("Invariants.replacefacesAt2_nth1'",
     "[| ?k : set ?ns; ?k < |?F|; distinct ?ns |]
      ==> replacefacesAt2 ?ns ?oldf ?newfs ?F ! ?k =
          replace ?oldf ?newfs (?F ! ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app (template_hole 7, template_var 3))
            ),
        template_inequation
         (less_than, template_var 4,
          template_app (template_hole 5, template_var 2)),
        template_predicate
         (template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 4))))),
    ("Invariants.splitFace_f12_oldF_neq",
     "[| pre_splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVs; minGraphProps ?g;
         (?f12.0, ?f21.0, ?newGraph) =
         splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVs |]
      ==> ?oldF ~= ?f12.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 6, template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4),
            template_var 3))],
       template_negation
        (template_equation (template_var 4, template_var 2)))),
    ("Invariants.splitFace_f21_oldF_neq",
     "[| pre_splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVs; minGraphProps ?g;
         (?f12.0, ?f21.0, ?newGraph) =
         splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVs |]
      ==> ?oldF ~= ?f21.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 6, template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4),
            template_var 3))],
       template_negation
        (template_equation (template_var 4, template_var 1)))),
    ("Invariants.replacefacesAt_Cons",
     "replacefacesAt (?n # ?ns) ?f ?fs ?F =
      (if ?n < |?F|
       then replacefacesAt ?ns ?f ?fs (?F[?n := replace ?f ?fs (?F ! ?n)])
       else replacefacesAt ?ns ?f ?fs ?F)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 4),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 4))))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Invariants.next_plane0_incr_faces",
     "[| minGraphProps ?g; ?g' : set (next_plane0\<^bsub>?p\<^esub> ?g) |]
      ==> |finals ?g'| = |finals ?g| + 1 &
          |nonFinals ?g| - 1 <= |nonFinals ?g'|",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 0),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 1))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 2))),
                   template_hole 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 0, template_var 2))),
                   template_hole 3)),
               template_app
                (template_hole 6,
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Invariants.one_final_but_makeFaceFinal",
     "[| minGraphProps ?g; one_final_but ?g ?E; ?E <= \<E> ?f; ?f : \<F> ?g;
         ~ final ?f |]
      ==> one_final (makeFaceFinal ?f ?g)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 7, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Invariants.incrIndexList_less",
     "[| incrIndexList ?ls ?m ?nmax; Suc ?n < |?ls|;
         ?ls ! ?n ~= ?ls ! Suc ?n |]
      ==> ?ls ! ?n < ?ls ! Suc ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_app (template_hole 4, template_var 0),
          template_app (template_hole 3, template_var 3)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 0),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_app (template_hole 4, template_var 0)))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app (template_hole 4, template_var 0))))),
    ("Invariants.splitFace_new_f12",
     "[| pre_splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVs; minGraphProps ?g;
         (?f12.0, ?f21.0, ?newGraph) =
         splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVs |]
      ==> ?f12.0 ~: \<F> ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 8, template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4),
            template_var 3))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 7)))
               )
           ))),
    ("Invariants.splitFace_new_f21",
     "[| pre_splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVs; minGraphProps ?g;
         (?f12.0, ?f21.0, ?newGraph) =
         splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVs |]
      ==> ?f21.0 ~: \<F> ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 8, template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4),
            template_var 3))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 7)))
               )
           ))),
    ("Invariants.splitFace_f12_f21_neq_norm",
     "[| pre_splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?vs; minGraphProps ?g;
         (?f12.0, ?f21.0, ?newGraph) =
         splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?vs |]
      ==> normFace ?f12.0 ~= normFace ?f21.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 7, template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4),
            template_var 3))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Invariants.splitFace_holds_facesAt_distinct",
     "[| pre_splitFace ?g ?v ?w ?f
          [countVertices ?g..<countVertices ?g + ?n];
         minGraphProps ?g |]
      ==> facesAt_distinct
           (snd (snd (splitFace ?g ?v ?w ?f
                       [countVertices ?g..<countVertices ?g + ?n])))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 4)),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 6, template_var 4)),
                  template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 4))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 1),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_var 4)),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 6, template_var 4)),
                       template_var 0))))))
           ))),
    ("Invariants.splitFace_holds_faces_distinct",
     "[| pre_splitFace ?g' ?v ?a ?f'
          [countVertices ?g'..<countVertices ?g' + ?n];
         minGraphProps ?g' |]
      ==> faces_distinct
           (snd (snd (splitFace ?g' ?v ?a ?f'
                       [countVertices ?g'..<countVertices ?g' + ?n])))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 4)),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 6, template_var 4)),
                  template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 4))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 1),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_var 4)),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 6, template_var 4)),
                       template_var 0))))))
           ))),
    ("Invariants.splitFace_holds_faces_subset",
     "[| pre_splitFace ?g' ?v ?a ?f'
          [countVertices ?g'..<countVertices ?g' + ?n];
         minGraphProps ?g' |]
      ==> faces_subset
           (snd (snd (splitFace ?g' ?v ?a ?f'
                       [countVertices ?g'..<countVertices ?g' + ?n])))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 4)),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 6, template_var 4)),
                  template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 4))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 1),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_var 4)),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app (template_hole 6, template_var 4)),
                       template_var 0))))))
           ))),
    ("Invariants.splitFace_holds_minGraphProps",
     "[| pre_splitFace ?g' ?v ?a ?f'
          [countVertices ?g'..<countVertices ?g' + ?n];
         minGraphProps ?g' |]
      ==> minGraphProps
           (snd (snd (splitFace ?g' ?v ?a ?f'
                       [countVertices ?g'..<countVertices ?g' + ?n])))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 4)),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 5, template_var 4)),
                  template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 4))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3),
                       template_var 2),
                     template_var 1),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 4)),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 5, template_var 4)),
                       template_var 0))))))
           ))),
    ("Invariants.edge_pres_faceAt",
     "[| minGraphProps ?g; ?u : \<V> ?g; ?f : set (facesAt ?g ?u);
         (?u, ?v) : \<E> ?f |]
      ==> ?f : set (facesAt ?g ?v)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 0)))
           ))),
    ("Invariants.mgp_nextVertex_face_ex2",
     "[| minGraphProps ?g; ?v : \<V> ?g; ?f : set (facesAt ?g ?v) |]
      ==> EX f':set (facesAt ?g (?f \<bullet> ?v)).
             f' \<bullet> (?f \<bullet> ?v) = ?v",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 1)))),
             t_empty)
           ))),
    ("Invariants.splitFace_new_f12_norm",
     "[| pre_splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVs; minGraphProps ?g;
         (?f12.0, ?f21.0, ?newGraph) =
         splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVs |]
      ==> normFace ?f12.0 ~: set (normFaces (faces ?g))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 11, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 2),
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4),
            template_var 3))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 7))))
               )
           ))),
    ("Invariants.splitFace_new_f21_norm",
     "[| pre_splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVs; minGraphProps ?g;
         (?f12.0, ?f21.0, ?newGraph) =
         splitFace ?g ?ram1.0 ?ram2.0 ?oldF ?newVs |]
      ==> normFace ?f21.0 ~: set (normFaces (faces ?g))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 11, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 7)),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 2),
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4),
            template_var 3))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 7))))
               )
           ))),
    ("Invariants.mgp_edges_disj",
     "[| minGraphProps ?g; ?f ~= ?f'; ?f : \<F> ?g; ?f' : \<F> ?g;
         ?uv : \<E> ?f |]
      ==> ?uv ~: \<E> ?f'",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 2))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("Invariants.splitFace_incr_faces",
     "pre_splitFace ?g ?u ?v ?f ?vs ==>
      finals (snd (snd (splitFace ?g ?u ?v ?f ?vs))) = finals ?g &
      |nonFinals (snd (snd (splitFace ?g ?u ?v ?f ?vs)))| =
      Suc |nonFinals ?g|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 4, template_var 4),
                                 template_var 3),
                               template_var 2),
                             template_var 1),
                           template_var 0))))),
                 template_app (template_hole 7, template_var 4))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 4, template_var 4),
                                 template_var 3),
                               template_var 2),
                             template_var 1),
                           template_var 0)))))),
               template_app
                (template_hole 0,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 4)))))
           ))),
    ("Invariants.duplicateEdge_is_duplicateEdge_eq",
     "[| minGraphProps ?g; ?f : \<F> ?g; ?a : \<V> ?f; ?b : \<V> ?f |]
      ==> duplicateEdge ?g ?f ?a ?b = is_duplicateEdge ?g ?f ?a ?b",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Invariants.inv_genPoly",
     "[| Invariants.inv ?g; ?g' : set (generatePolygon ?i ?v ?f ?g);
         ?f : set (nonFinals ?g); 2 < ?i; ?v : \<V> ?f |]
      ==> Invariants.inv ?g'",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 10, template_var 2),
                      template_var 1),
                    template_var 0),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 4)))
            ),
        template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (template_app (template_hole 13, template_var 3)))),
    ("Invariants.splitFace_holds_facesAt_eq",
     "[| pre_splitFace ?g' ?v ?a ?f'
          [countVertices ?g'..<countVertices ?g' + ?n];
         minGraphProps ?g';
         ?g'' =
         snd (snd (splitFace ?g' ?v ?a ?f'
                    [countVertices ?g'..<countVertices ?g' + ?n])) |]
      ==> facesAt_eq ?g''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 5)),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 7, template_var 5)),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 5, template_var 5)),
        template_equation
         (template_var 0,
          template_app
           (template_hole 3,
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 5)),
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app (template_hole 7, template_var 5)),
                    template_var 1))))))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Invariants.mgp_edge_face_ex",
     "[| minGraphProps ?g; ?v : \<V> ?g; ?f : set (facesAt ?g ?v);
         (?u, ?v) : \<E> ?f |]
      ==> EX f':set (facesAt ?g ?v). (?v, ?u) : \<E> f'",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 2)),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2))),
             t_empty)
           ))),
    ("Invariants.two_faces_subdivFace'",
     "[| pre_subdivFace' ?g ?f ?u ?v ?n ?ovs; minGraphProps ?g;
         ?f : \<F> ?g; 2 <= |faces ?g| |]
      ==> 2 <= |faces (subdivFace' ?g ?f ?v ?n ?ovs)|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 10, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 9, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 5)))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)),
          template_app
           (template_hole 1,
            template_app (template_hole 6, template_var 5)))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app
          (template_hole 1,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 2),
                 template_var 1),
               template_var 0)))))),
    ("Invariants.distinct_replacefacesAt2_2",
     "[| ?i < |?Fss|; distinct ?is; distinct (?Fss ! ?i); distinct ?newFs;
         set (?Fss ! ?i) Int set ?newFs <= {?olfF} |]
      ==> distinct (replacefacesAt2 ?is ?olfF ?newFs ?Fss ! ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 9, template_var 3)),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 4))
            ),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 4))),
            template_app (template_hole 3, template_var 1)),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_hole 1))],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 0),
                     template_var 1),
                   template_var 3)),
               template_var 4))
           ))),
    ("Invariants.inv_one_finalD'",
     "[| Invariants.inv ?g; ?f : \<F> ?g; ~ final ?f; (?a, ?b) : \<E> ?f |]
      ==> EX f':\<F> ?g. final f' & f' ~= ?f & (?b, ?a) : \<E> f'",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 3)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app (template_hole 3, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 3))),
             t_empty)
           ))),
    ("Invariants.distinct_replacefacesAt_norm",
     "[| ?i < |?Fss|; distinct ?is; distinct (normFaces (?Fss ! ?i));
         distinct (normFaces ?newFs);
         set (normFaces (?Fss ! ?i)) Int set (normFaces ?newFs) <= {} |]
      ==> distinct (normFaces (replacefacesAt ?is ?olfF ?newFs ?Fss ! ?i))",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 9, template_var 3)),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_hole 2,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 4)))),
            template_app
             (template_hole 2,
              template_app (template_hole 6, template_var 1))),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 0),
                       template_var 1),
                     template_var 3)),
                 template_var 4)))
           ))),
    ("Invariants.distinct_replacefacesAt21",
     "[| ?i < |?Fss|; ?i : set ?is; distinct ?is; distinct (?Fss ! ?i);
         distinct ?newFs; set (?Fss ! ?i) Int set ?newFs <= {?olfF} |]
      ==> distinct (replacefacesAt2 ?is ?olfF ?newFs ?Fss ! ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 11, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 4),
              template_app (template_hole 9, template_var 2))
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 4))
            ),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 4))),
            template_app (template_hole 3, template_var 1)),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_hole 1))],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 0),
                     template_var 1),
                   template_var 3)),
               template_var 4))
           ))),
    ("Invariants.one_final_subdivFace'",
     "[| pre_subdivFace' ?g ?f ?u ?v ?n ?ovs; minGraphProps ?g;
         ?f : \<F> ?g;
         one_final_but ?g
          (if ?u = ?v then {}
           else Edges (?u # between (vertices ?f) ?u ?v @ [?v])) |]
      ==> one_final (subdivFace' ?g ?f ?v ?n ?ovs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 16, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 15, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 4),
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 5),
              template_app
               (template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 3),
                      template_var 2)),
                  template_hole 8),
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app
                           (template_app
                             (template_hole 4,
                              template_app
                               (template_hole 3, template_var 4)),
                            template_var 3),
                          template_var 2)),
                      template_app
                       (template_app (template_hole 6, template_var 2),
                        template_hole 2))))))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Invariants.distinct_replacefacesAt22",
     "[| ?i < |?Fss|; ?i ~: set ?is; distinct ?is; distinct (?Fss ! ?i);
         distinct ?newFs; set (?Fss ! ?i) Int set ?newFs <= {?olfF} |]
      ==> distinct (replacefacesAt2 ?is ?olfF ?newFs ?Fss ! ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 12, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_app (template_hole 9, template_var 2))
                )
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 4))
            ),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 4))),
            template_app (template_hole 3, template_var 1)),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_hole 1))],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 0),
                     template_var 1),
                   template_var 3)),
               template_var 4))
           ))),
    ("Invariants.subdivFace'_incr_faces",
     "[| pre_subdivFace' ?g ?f ?u ?v ?n ?ovs; minGraphProps ?g;
         ?f : \<F> ?g |]
      ==> |finals (subdivFace' ?g ?f ?v ?n ?ovs)| = Suc |finals ?g| &
          |nonFinals ?g| - Suc 0
          <= |nonFinals (subdivFace' ?g ?f ?v ?n ?ovs)|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 14, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 13, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 5)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 5, template_var 5),
                               template_var 4),
                             template_var 2),
                           template_var 1),
                         template_var 0)))),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_var 5))))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 1, template_var 5))),
                   template_app (template_hole 4, template_hole 0))),
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 5, template_var 5),
                           template_var 4),
                         template_var 2),
                       template_var 1),
                     template_var 0)))))
           ))),
    ("Invariants.set_faces_splitFace",
     "[| minGraphProps ?g; ?f : \<F> ?g;
         pre_splitFace ?g ?v1.0 ?v2.0 ?f ?vs;
         (?f1.0, ?f2.0, ?g') = splitFace ?g ?v1.0 ?v2.0 ?f ?vs |]
      ==> \<F> ?g' = {?f1.0, ?f2.0} Un (\<F> ?g - {?f})",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 6),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 7)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 7),
                    template_var 5),
                  template_var 4),
                template_var 6),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 2),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 7),
                  template_var 5),
                template_var 4),
              template_var 6),
            template_var 3))],
       template_equation
        (template_app
          (template_hole 11,
           template_app (template_hole 10, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 11,
                 template_app (template_hole 10, template_var 7))),
             template_app
              (template_app (template_hole 2, template_var 6),
               template_hole 1)))))),
    ("Invariants.distinct_replacefacesAt1_norm",
     "[| ?i < |?Fss|; ?i : set ?is; distinct ?is;
         distinct (normFaces (?Fss ! ?i)); distinct (normFaces ?newFs);
         set (normFaces (?Fss ! ?i)) Int set (normFaces ?newFs) <= {} |]
      ==> distinct (normFaces (replacefacesAt ?is ?oldF ?newFs ?Fss ! ?i))",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 11, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 4),
              template_app (template_hole 9, template_var 2))
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_hole 2,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 4)))),
            template_app
             (template_hole 2,
              template_app (template_hole 6, template_var 1))),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 0),
                       template_var 1),
                     template_var 3)),
                 template_var 4)))
           ))),
    ("Invariants.split_face_f12_f21_neq_norm",
     "[| pre_split_face ?oldF ?ram1.0 ?ram2.0 ?vs; 2 < |vertices ?oldF|;
         2 < |vertices ?f12.0|; 2 < |vertices ?f21.0|;
         (?f12.0, ?f21.0) = split_face ?oldF ?ram1.0 ?ram2.0 ?vs |]
      ==> normFace ?f12.0 ~= normFace ?f21.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 5))),
        template_inequation
         (less_than,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 1))),
        template_inequation
         (less_than,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)),
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 0))),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Invariants.pre_subdivFace_indexToVertexList",
     "[| minGraphProps ?g; ?f : set (nonFinals ?g); ?v : \<V> ?f;
         ?e : set (enumerator ?i |vertices ?f|);
         ~ containsDuplicateEdge ?g ?f ?v ?e; 2 < ?i |]
      ==> pre_subdivFace ?g ?f ?v (indexToVertexList ?f ?v ?e)",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 3),
              template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 0),
                  template_app
                   (template_hole 8,
                    template_app (template_hole 12, template_var 3)))))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)
                )
            ),
        template_inequation
         (less_than,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_hole 2)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1))
           ))),
    ("Invariants.distinct_replacefacesAt2_norm",
     "[| ?i < |?Fss|; ?i ~: set ?is; distinct ?is;
         distinct (normFaces (?Fss ! ?i)); distinct (normFaces ?newFs);
         set (normFaces (?Fss ! ?i)) Int set (normFaces ?newFs) <= {} |]
      ==> distinct (normFaces (replacefacesAt ?is ?oldF ?newFs ?Fss ! ?i))",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 12, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_app (template_hole 9, template_var 2))
                )
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_hole 2,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 4)))),
            template_app
             (template_hole 2,
              template_app (template_hole 6, template_var 1))),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 0),
                       template_var 1),
                     template_var 3)),
                 template_var 4)))
           ))),
    ("Invariants.split_face_edge_disj",
     "[| pre_split_face ?f ?a ?b ?vs;
         (?f\<^sub>1, ?f\<^sub>2) = split_face ?f ?a ?b ?vs;
         3 <= |vertices ?f|;
         ?vs = [] --> (?a, ?b) ~: \<E> ?f & (?b, ?a) ~: \<E> ?f |]
      ==> \<E> ?f\<^sub>1 Int \<E> ?f\<^sub>2 = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 20, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 1),
            template_var 0),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 17, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 15,
            template_app (template_hole 14, template_hole 13)),
          template_app
           (template_hole 12,
            template_app (template_hole 11, template_var 5))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_hole 8)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 4),
                          template_var 3)),
                      template_app (template_hole 3, template_var 5)))),
                template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 3),
                        template_var 4)),
                    template_app (template_hole 3, template_var 5)))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_hole 0))),
    ("Invariants.next_plane0_via_subdivFace'",
     "[| minGraphProps ?g; ?g' : set (next_plane0\<^bsub>?p\<^esub> ?g);
         !!f v' v n g ovs.
            [| minGraphProps g; pre_subdivFace' g f v' v n ovs;
               f : \<F> g |]
            ==> ?P g (subdivFace' g f v n ovs) |]
      ==> ?P ?g ?g'",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 3)))
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 3), template_var 2)
           ))),
    ("Invariants.replacefacesAt_nth",
     "[| ?k : set ?ns; ?k < |?F|; ?oldf ~: set ?newfs; distinct (?F ! ?k);
         distinct ?newfs;
         ?oldf : set (?F ! ?k) -->
         set ?newfs Int set (?F ! ?k) <= {?oldf} |]
      ==> replacefacesAt ?ns ?oldf ?newfs ?F ! ?k =
          replace ?oldf ?newfs (?F ! ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 4),
              template_app (template_hole 15, template_var 3))
            ),
        template_inequation
         (less_than, template_var 4,
          template_app (template_hole 13, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_app (template_hole 10, template_var 0))
                )
            ),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 4))
            ),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 8, template_var 2),
                      template_var 4)))),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 10, template_var 0)),
                    template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 8, template_var 2),
                        template_var 4)))),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 4))))),
    ("Invariants.replacefacesAt2_nth",
     "[| ?k : set ?ns; ?k < |?F|; ?oldf ~: set ?newfs; distinct (?F ! ?k);
         distinct ?newfs;
         ?oldf : set (?F ! ?k) -->
         set ?newfs Int set (?F ! ?k) <= {?oldf} |]
      ==> replacefacesAt2 ?ns ?oldf ?newfs ?F ! ?k =
          replace ?oldf ?newfs (?F ! ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 4),
              template_app (template_hole 15, template_var 3))
            ),
        template_inequation
         (less_than, template_var 4,
          template_app (template_hole 13, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_app (template_hole 10, template_var 0))
                )
            ),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 4))
            ),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 8, template_var 2),
                      template_var 4)))),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_hole 10, template_var 0)),
                    template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 8, template_var 2),
                        template_var 4)))),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 4))))),
    ("Invariants.FaceDivsionGraph_one_final_but",
     "[| minGraphProps ?g; pre_splitFace ?g ?u ?v ?f ?vs;
         (?f\<^sub>1, ?f\<^sub>2, ?g') = splitFace ?g ?u ?v ?f ?vs;
         ?r ~= ?v; before (verticesFrom ?f ?r) ?u ?v; ?r : \<V> ?f;
         one_final_but ?g
          (if ?r = ?u then {}
           else Edges (?r # between (vertices ?f) ?r ?u @ [?u])) |]
      ==> one_final_but ?g'
           (Edges (?r # between (vertices ?f\<^sub>2) ?r ?v @ [?v]))",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 19, template_var 8),
                    template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app (template_hole 17, template_var 3),
            template_app
             (template_app (template_hole 16, template_var 2),
              template_var 1)),
          template_app
           (template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5),
            template_var 4)),
        template_negation
         (template_equation (template_var 0, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 11, template_var 5),
                    template_var 0)),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 8),
              template_app
               (template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 13, template_var 0),
                      template_var 7)),
                  template_hole 5),
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_app
                     (template_app
                       (template_hole 2,
                        template_app
                         (template_app
                           (template_app
                             (template_hole 1,
                              template_app
                               (template_hole 8, template_var 5)),
                            template_var 0),
                          template_var 7)),
                      template_app
                       (template_app (template_hole 3, template_var 7),
                        template_hole 0))))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 1,
                           template_app (template_hole 8, template_var 2)),
                         template_var 0),
                       template_var 6)),
                   template_app
                    (template_app (template_hole 3, template_var 6),
                     template_hole 0)))))
           ))),
    ("Invariants.next_plane0_incr",
     "[| !!x y z. [| ?Q x y; ?P y z |] ==> ?P x z;
         !!f g. [| f : \<F> g; ~ final f |] ==> ?P g (makeFaceFinal f g);
         !!g u v f vs.
            pre_splitFace g u v f vs ==>
            ?Q g (snd (snd (splitFace g u v f vs)));
         minGraphProps ?g; ?g' : set (next_plane0\<^bsub>?p\<^esub> ?g) |]
      ==> ?P ?g ?g'",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 3, template_var 2), template_var 1)
           ))),
    ("Invariants.subdivFace'_incr",
     "[| !!x y z. [| ?Q x y; ?P y z |] ==> ?P x z;
         !!f g. [| f : \<F> g; ~ final f |] ==> ?P g (makeFaceFinal f g);
         !!g u v f vs.
            pre_splitFace g u v f vs ==>
            ?Q g (snd (snd (splitFace g u v f vs)));
         pre_subdivFace' ?g ?f' ?v' ?v ?n ?ovl; minGraphProps ?g;
         ?f' : \<F> ?g |]
      ==> ?P ?g (subdivFace' ?g ?f' ?v ?n ?ovl)",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 1, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 4),
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 5)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 6, template_var 5),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 2),
                 template_var 1),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.InvariantsTemplates"
### 0.475s elapsed time, 0.710s cpu time, 0.153s GC time
val it = (): unit
