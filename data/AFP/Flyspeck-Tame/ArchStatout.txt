Loading theory "Draft.ListAux" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.TameEnum" via "Draft.Generator" via "Draft.Plane1" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation")
Loading theory "Draft.RTranCl" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.TameEnum" via "Draft.Generator" via "Draft.Plane1" via "Draft.Plane")
Loading theory "Draft.Arch" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.ArchCompAux")
Loading theory "Draft.Quasi_Order" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.TameEnum" via "Draft.Generator" via "Draft.Plane1" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation" via "Draft.PlaneGraphIso")
locale quasi_order
  fixes qle :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 60)
  assumes "quasi_order (\<preceq>)"
Proofs for inductive predicate(s) "RTranClp"
  Proving monotonicity ...
### theory "Draft.Quasi_Order"
### 0.074s elapsed time, 0.322s cpu time, 0.000s GC time
Loading theory "Draft.PlaneGraphIso" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.TameEnum" via "Draft.Generator" via "Draft.Plane1" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation")
### Ignoring duplicate safe introduction (intro!)
### EX y. ?x = Some y ==> ?x ~= None
### Ignoring duplicate safe elimination (elim!)
### [| ?x ~= None; EX y. ?x = Some y ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### ?x = None ==> ALL y. ?x ~= Some y
### Ignoring duplicate safe elimination (elim!)
### [| ALL y. ?x ~= Some y; ?x = None ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX y. ?x = Some y ==> ?x ~= None
### Ignoring duplicate safe elimination (elim!)
### [| ?x ~= None; EX y. ?x = Some y ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?x1 ~= None == EX y. ?x1 = Some y
### Ignoring duplicate safe introduction (intro!)
### ?x = None ==> ALL y. ?x ~= Some y
### Ignoring duplicate safe elimination (elim!)
### [| ALL y. ?x ~= Some y; ?x = None ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ALL y. ?x1 ~= Some y == ?x1 = None
### Ambiguous input (line 130 of "$AFP/Flyspeck-Tame/ListAux.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Product_Type.Times" ("_position" as) ("_position" bs))
###   ("_concat" ("_position" a) ("_position" as)
###     ("_applC" ("_position" listProd1)
###       ("_cargs" ("_position" a) ("_position" bs)))))
### ("\<^const>Pure.eq" ("\<^fixed>listProd" ("_position" as) ("_position" bs))
###   ("_concat" ("_position" a) ("_position" as)
###     ("_applC" ("_position" listProd1)
###       ("_cargs" ("_position" a) ("_position" bs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.RTranCl"
### 0.128s elapsed time, 0.516s cpu time, 0.052s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ArchStatTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
overloading
  congs \<equiv> pr_isomorphic :: 'a list => 'a list => bool
### Ambiguous input (line 132 of "$AFP/Flyspeck-Tame/ListAux.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set)
###       ("\<^const>ListAux.listProd" ("_position" xs) ("_position" ys)))
###     ("\<^const>Product_Type.Times"
###       ("_applC" ("_position" set) ("_position" xs))
###       ("_applC" ("_position" set) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set)
###       ("\<^const>Product_Type.Times" ("_position" xs) ("_position" ys)))
###     ("\<^const>Product_Type.Times"
###       ("_applC" ("_position" set) ("_position" xs))
###       ("_applC" ("_position" set) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### No equation for constructor "[]"
consts
  minimal :: "('a => nat) => 'a list => 'a"
### No equation for constructor "[]"
consts
  min_list :: "nat list => nat"
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### No equation for constructor "[]"
consts
  max_list :: "nat list => nat"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
consts
  replace :: "'a => 'a list => 'a list => 'a list"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  mapAt :: "nat list => ('a => 'a) => 'a list => 'a list"
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.109s elapsed time, 0.435s cpu time, 0.000s GC time
Loading theory "Draft.IArray_Syntax" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.TameEnum" via "Draft.Generator" via "Draft.Plane1" via "Draft.Plane" via "Draft.Enumerator")
### theory "Draft.IArray_Syntax"
### 0.091s elapsed time, 0.346s cpu time, 0.161s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ArchStatTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
consts
  pr_iso_test0 ::
    "('a => 'b option) => 'a list list => 'b list list => bool"
consts
  splitAtRec :: "'a => 'a list => 'a list => 'a list * 'a list"
consts
  pr_iso_test1 ::
    "('a => 'b option) => 'a list list => 'b list list => bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  pr_iso_test2 ::
    "(('a * 'b) list => ('a * 'b) list => bool)
     => (('a * 'b) list => ('a * 'b) list => ('a * 'b) list)
        => ('a * 'b) list => 'a list list => 'b list list => bool"
### Ignoring duplicate rewrite rule:
### ?A1 - ?B1 <= ?A1 == True
Found termination order: "size_list size <*mlex*> {}"
consts
  merge :: "('a * 'b) list => ('a * 'b) list => ('a * 'b) list"
consts
  pr_iso_test_rec ::
    "('a * 'b) list => 'a list list => 'b list list => bool"
### theory "HOL-Library.Nat_Bijection"
### 0.753s elapsed time, 2.490s cpu time, 1.424s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ArchStatTemplates" via "Draft.ExtrEqs")
### theory "Draft.PlaneGraphIso"
### 0.992s elapsed time, 3.429s cpu time, 1.584s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ArchStatTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
consts
  removeKeyList :: "'a list => ('a * 'b) list => ('a * 'b) list"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.ListAux"
### 1.137s elapsed time, 4.005s cpu time, 1.636s GC time
Loading theory "Draft.ListSum" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.TameEnum" via "Draft.Generator" via "Draft.Tame")
consts
  ListSum :: "'b list => ('b => 'a) => 'a"
### theory "Draft.ListSum"
### 0.124s elapsed time, 0.480s cpu time, 0.216s GC time
Loading theory "Draft.Rotation" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.TameEnum" via "Draft.Generator" via "Draft.Plane1" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph")
### theory "HOL-Library.Set_Algebras"
### 0.320s elapsed time, 1.257s cpu time, 0.460s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ArchStatTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Rotation"
### 0.294s elapsed time, 1.151s cpu time, 0.400s GC time
Loading theory "Draft.Graph" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.TameEnum" via "Draft.Generator" via "Draft.Plane1" via "Draft.Plane" via "Draft.Enumerator")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.167s elapsed time, 4.588s cpu time, 1.265s GC time
Loading theory "Draft.Worklist" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.ArchCompAux" via "Draft.Maps")
Found termination order: "size <*mlex*> {}"
overloading
  final_face \<equiv> final :: face => bool
  type_face \<equiv> type :: face => facetype
  vertices_face \<equiv> vertices :: face => nat list
  cong_face \<equiv> pr_isomorphic :: face => face => bool
consts
  final_face :: "face => bool"
consts
  type_face :: "face => facetype"
consts
  vertices_face :: "face => nat list"
consts
  nextElem :: "'a list => 'a => 'a => 'a"
Found termination order: "size <*mlex*> {}"
overloading
  edges_face \<equiv> edges :: face => (nat * nat) set
overloading
  op_vertices \<equiv> op :: nat list => nat list
overloading
  op_graph \<equiv> op :: face => face
consts
  op_graph :: "face => face"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale set_modulo
  fixes qle :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 60)
    and empty :: "'s"
    and insert_mod :: "'a => 's => 's"
    and set_of :: "'s => 'a set"
    and I :: "'a => bool"
    and S :: "'s => bool"
  assumes "set_modulo (\<preceq>) empty insert_mod set_of I S"
consts
  faces :: "graph => face list"
consts
  countVertices :: "graph => nat"
overloading
  vertices_graph \<equiv> vertices :: graph => nat list
consts
  vertices_graph :: "graph => nat list"
Found termination order: "size <*mlex*> {}"
consts
  faceListAt :: "graph => face list list"
consts
  heights :: "graph => nat list"
### theory "Draft.Worklist"
### 1.138s elapsed time, 4.332s cpu time, 2.411s GC time
Loading theory "Draft.Maps" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.ArchCompAux")
overloading
  finalGraph \<equiv> final :: graph => bool
Found termination order: "size <*mlex*> {}"
locale maps
  fixes empty :: "'m"
    and up :: "'a => 'b list => 'm => 'm"
    and map_of :: "'m => 'a => 'b list"
    and M :: "'m => bool"
  assumes "maps empty up map_of M"
overloading
  edges_graph \<equiv> edges :: graph => (nat * nat) set
### Ambiguous input (line 257 of "$AFP/Flyspeck-Tame/Graph.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>nextFace" ("_position" p))
###   ("_lambda" ("_position" f)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_pattern" ("_position" g) ("_position" v))
###           ("_position" p))
###         ("_bind" ("_position" fs)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" v)))))
###       ("_case_syntax" ("_position" fs)
###         ("_case2" ("_case1" ("\<^const>List.list.Nil") ("_position" f))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" g) ("_position" gs))
###             ("_applC" ("_position" nextElem)
###               ("_cargs" ("_position" fs)
###                 ("_cargs" ("_applC" ("_position" hd) ("_position" fs))
###                   ("_position" f))))))))))
### ("\<^const>Pure.eq" ("\<^const>Graph.nextVertex" ("_position" p))
###   ("_lambda" ("_position" f)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_pattern" ("_position" g) ("_position" v))
###           ("_position" p))
###         ("_bind" ("_position" fs)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" v)))))
###       ("_case_syntax" ("_position" fs)
###         ("_case2" ("_case1" ("\<^const>List.list.Nil") ("_position" f))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" g) ("_position" gs))
###             ("_applC" ("_position" nextElem)
###               ("_cargs" ("_position" fs)
###                 ("_cargs" ("_applC" ("_position" hd) ("_position" fs))
###                   ("_position" f))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale set_mod_maps
  fixes empty :: "'m"
    and up :: "'a => 'b list => 'm => 'm"
    and map_of :: "'m => 'a => 'b list"
    and M :: "'m => bool"
    and qle :: "'b => 'b => bool"  (infix \<open>\<preceq>\<close> 60)
    and subsumed :: "'b => 'b => bool"
    and I :: "'b => bool"
    and key :: "'b => 'a"
  assumes "set_mod_maps empty up map_of M (\<preceq>) subsumed I key"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Maps"
### 0.144s elapsed time, 0.562s cpu time, 0.148s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ArchStatTemplates" via "Draft.ExtrEqs")
### theory "Draft.Graph"
### 1.972s elapsed time, 7.599s cpu time, 3.208s GC time
Loading theory "Draft.FaceDivision" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.TameEnum" via "Draft.Generator" via "Draft.Plane1" via "Draft.Plane")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 38 of "$AFP/Flyspeck-Tame/FaceDivision.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" splitFace)
###     ("_cargs" ("_position" g)
###       ("_cargs" ("_position" ram\<^sub>1)
###         ("_cargs" ("_position" ram\<^sub>2)
###           ("_cargs" ("_position" oldF) ("_position" newVs))))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" faces) ("_position" g)))
###       ("_binds"
###         ("_bind" ("_position" n)
###           ("_applC" ("_position" countVertices) ("_position" g)))
###         ("_binds"
###           ("_bind" ("_position" Fs)
###             ("_applC" ("_position" faceListAt) ("_position" g)))
###           ("_binds"
###             ("_bind" ("_position" h)
###               ("_applC" ("_position" heights) ("_position" g)))
###             ("_binds"
###               ("_bind" ("_position" vs\<^sub>1)
###                 ("_applC" ("_position" between)
###                   ("_cargs"
###                     ("_applC" ("_position" vertices) ("_position" oldF))
###                     ("_cargs" ("_position" ram\<^sub>1)
###                       ("_position" ram\<^sub>2)))))
###               ("_binds"
###                 ("_bind" ("_position" vs\<^sub>2)
###                   ("_applC" ("_position" between)
###                     ("_cargs"
###                       ("_applC" ("_position" vertices) ("_position" oldF))
###                       ("_cargs" ("_position" ram\<^sub>2)
###                         ("_position" ram\<^sub>1)))))
###                 ("_binds"
###                   ("_bind"
###                     ("_pattern" ("_position" f\<^sub>1)
###                       ("_position" f\<^sub>2))
###                     ("_applC" ("_position" split_face)
###                       ("_cargs" ("_position" oldF)
###                         ("_cargs" ("_position" ram\<^sub>1)
###                           ("_cargs" ("_position" ram\<^sub>2)
###                             ("_position" newVs))))))
###                   ("_binds"
###                     ("_bind" ("_position" Fs)
###                       ("_applC" ("_position" replacefacesAt)
###                         ("_cargs" ("_position" vs\<^sub>1)
###                           ("_cargs" ("_position" oldF)
###                             ("_cargs" ("_list" ("_position" f\<^sub>1))
###                               ("_position" Fs))))))
###                     ("_binds"
###                       ("_bind" ("_position" Fs)
###                         ("_applC" ("_position" replacefacesAt)
###                           ("_cargs" ("_position" vs\<^sub>2)
###                             ("_cargs" ("_position" oldF)
###                               ("_cargs" ("_list" ("_position" f\<^sub>2))
###                                 ("_position" Fs))))))
###                       ("_binds"
###                         ("_bind" ("_position" Fs)
###                           ("_applC" ("_position" replacefacesAt)
###                             ("_cargs" ("_list" ("_position" ram\<^sub>1))
###                               ("_cargs" ("_position" oldF)
###                                 ("_cargs"
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>2)
### ("_position" f\<^sub>1)))
###                                   ("_position" Fs))))))
###                         ("_binds"
###                           ("_bind" ("_position" Fs)
###                             ("_applC" ("_position" replacefacesAt)
###                               ("_cargs" ("_list" ("_position" ram\<^sub>2))
###                                 ("_cargs" ("_position" oldF)
###                                   ("_cargs"
###                                     ("_list"
### ("_args" ("_position" f\<^sub>1) ("_position" f\<^sub>2)))
###                                     ("_position" Fs))))))
###                           ("_bind" ("_position" Fs)
###                             ("\<^const>HOL.disj"
###                               ("\<^const>List.append" ("_position" Fs)
###                                 ("_position" replicate))
###                               ("\<^const>HOL.disj" ("_position" newVs)
###                                 ("_list"
###                                   ("_args" ("_position" f\<^sub>1)
###                                     ("_position" f\<^sub>2)))))))))))))))))
###     ("_tuple" ("_position" f\<^sub>1)
###       ("_tuple_args" ("_position" f\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" Graph)
###             ("_cargs"
###               ("\<^const>List.append"
###                 ("_applC" ("_position" replace)
###                   ("_cargs" ("_position" oldF)
###                     ("_cargs" ("_list" ("_position" f\<^sub>2))
###                       ("_position" fs))))
###                 ("_list" ("_position" f\<^sub>1)))
###               ("_cargs"
###                 ("\<^const>Groups.plus_class.plus" ("_position" n)
###                   ("\<^const>List.length" ("_position" newVs)))
###                 ("_cargs" ("_position" Fs)
###                   ("\<^const>List.append" ("_position" h)
###                     ("_applC" ("_position" heightsNewVertices)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" h)
###                           ("_position" ram\<^sub>1))
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" h)
###                             ("_position" ram\<^sub>2))
###                           ("\<^const>List.length"
###                             ("_position" newVs)))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" splitFace)
###     ("_cargs" ("_position" g)
###       ("_cargs" ("_position" ram\<^sub>1)
###         ("_cargs" ("_position" ram\<^sub>2)
###           ("_cargs" ("_position" oldF) ("_position" newVs))))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" faces) ("_position" g)))
###       ("_binds"
###         ("_bind" ("_position" n)
###           ("_applC" ("_position" countVertices) ("_position" g)))
###         ("_binds"
###           ("_bind" ("_position" Fs)
###             ("_applC" ("_position" faceListAt) ("_position" g)))
###           ("_binds"
###             ("_bind" ("_position" h)
###               ("_applC" ("_position" heights) ("_position" g)))
###             ("_binds"
###               ("_bind" ("_position" vs\<^sub>1)
###                 ("_applC" ("_position" between)
###                   ("_cargs"
###                     ("_applC" ("_position" vertices) ("_position" oldF))
###                     ("_cargs" ("_position" ram\<^sub>1)
###                       ("_position" ram\<^sub>2)))))
###               ("_binds"
###                 ("_bind" ("_position" vs\<^sub>2)
###                   ("_applC" ("_position" between)
###                     ("_cargs"
###                       ("_applC" ("_position" vertices) ("_position" oldF))
###                       ("_cargs" ("_position" ram\<^sub>2)
###                         ("_position" ram\<^sub>1)))))
###                 ("_binds"
###                   ("_bind"
###                     ("_pattern" ("_position" f\<^sub>1)
###                       ("_position" f\<^sub>2))
###                     ("_applC" ("_position" split_face)
###                       ("_cargs" ("_position" oldF)
###                         ("_cargs" ("_position" ram\<^sub>1)
###                           ("_cargs" ("_position" ram\<^sub>2)
###                             ("_position" newVs))))))
###                   ("_binds"
###                     ("_bind" ("_position" Fs)
###                       ("_applC" ("_position" replacefacesAt)
###                         ("_cargs" ("_position" vs\<^sub>1)
###                           ("_cargs" ("_position" oldF)
###                             ("_cargs" ("_list" ("_position" f\<^sub>1))
###                               ("_position" Fs))))))
###                     ("_binds"
###                       ("_bind" ("_position" Fs)
###                         ("_applC" ("_position" replacefacesAt)
###                           ("_cargs" ("_position" vs\<^sub>2)
###                             ("_cargs" ("_position" oldF)
###                               ("_cargs" ("_list" ("_position" f\<^sub>2))
###                                 ("_position" Fs))))))
###                       ("_binds"
###                         ("_bind" ("_position" Fs)
###                           ("_applC" ("_position" replacefacesAt)
###                             ("_cargs" ("_list" ("_position" ram\<^sub>1))
###                               ("_cargs" ("_position" oldF)
###                                 ("_cargs"
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>2)
### ("_position" f\<^sub>1)))
###                                   ("_position" Fs))))))
###                         ("_binds"
###                           ("_bind" ("_position" Fs)
###                             ("_applC" ("_position" replacefacesAt)
###                               ("_cargs" ("_list" ("_position" ram\<^sub>2))
###                                 ("_cargs" ("_position" oldF)
###                                   ("_cargs"
###                                     ("_list"
### ("_args" ("_position" f\<^sub>1) ("_position" f\<^sub>2)))
###                                     ("_position" Fs))))))
###                           ("_bind" ("_position" Fs)
###                             ("\<^const>List.append" ("_position" Fs)
###                               ("_applC" ("_position" replicate)
###                                 ("_cargs"
###                                   ("\<^const>List.length"
###                                     ("_position" newVs))
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>1)
### ("_position" f\<^sub>2))))))))))))))))))
###     ("_tuple" ("_position" f\<^sub>1)
###       ("_tuple_args" ("_position" f\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" Graph)
###             ("_cargs"
###               ("\<^const>List.append"
###                 ("_applC" ("_position" replace)
###                   ("_cargs" ("_position" oldF)
###                     ("_cargs" ("_list" ("_position" f\<^sub>2))
###                       ("_position" fs))))
###                 ("_list" ("_position" f\<^sub>1)))
###               ("_cargs"
###                 ("\<^const>Groups.plus_class.plus" ("_position" n)
###                   ("\<^const>List.length" ("_position" newVs)))
###                 ("_cargs" ("_position" Fs)
###                   ("\<^const>List.append" ("_position" h)
###                     ("_applC" ("_position" heightsNewVertices)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" h)
###                           ("_position" ram\<^sub>1))
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" h)
###                             ("_position" ram\<^sub>2))
###                           ("\<^const>List.length"
###                             ("_position" newVs)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Flyspeck-Tame/FaceDivision.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" u)
###             ("_cargs" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" vo)
###                 ("_position" vos)))))))
###     ("_case_syntax" ("_position" vo)
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" subdivFace')
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_applC" ("_position" Suc) ("_position" n))
###                     ("_position" vos)))))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" u))
###                 ("_position" v))
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("_applC" ("_position" subdivFace')
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("\<^const>Groups.zero_class.zero")
###                       ("_position" vos))))))
###             ("_Let"
###               ("_binds"
###                 ("_bind" ("_position" ws)
###                   ("\<^const>List.upt"
###                     ("_applC" ("_position" countVertices) ("_position" g))
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("_position" n))))
###                 ("_bind"
###                   ("_pattern" ("_position" f\<^sub>1)
###                     ("_patterns" ("_position" f\<^sub>2) ("_position" g')))
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" f) ("_position" ws))))))))
###               ("_applC" ("_position" subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f\<^sub>2)
###                     ("_cargs" ("_position" v)
###                       ("_cargs" ("\<^const>Groups.zero_class.zero")
###                         ("_position" vos)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" u)
###             ("_cargs" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" vo)
###                 ("_position" vos)))))))
###     ("_case_syntax" ("_position" vo)
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" subdivFace')
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_applC" ("_position" Suc) ("_position" n))
###                     ("_position" vos)))))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" u))
###                 ("_position" v))
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("_applC" ("_position" subdivFace')
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("\<^const>Groups.zero_class.zero")
###                       ("_position" vos))))))
###             ("_Let"
###               ("_binds"
###                 ("_bind" ("_position" ws)
###                   ("\<^const>List.upt"
###                     ("_applC" ("_position" countVertices) ("_position" g))
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("_position" n))))
###                 ("_bind"
###                   ("_pattern" ("_position" f\<^sub>1)
###                     ("_patterns" ("_position" f\<^sub>2) ("_position" g')))
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" f) ("_position" ws))))))))
###               ("_applC" ("_position" subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f\<^sub>2)
###                     ("_cargs" ("_position" v)
###                       ("_cargs" ("\<^const>Groups.zero_class.zero")
###                         ("_position" vos)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subdivFace' :: "graph => face => nat => nat => nat option list => graph"
Found termination order: "size <*mlex*> {}"
### theory "Draft.FaceDivision"
### 0.176s elapsed time, 0.688s cpu time, 0.189s GC time
Loading theory "Draft.Tame" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.TameEnum" via "Draft.Generator")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 68 of "$AFP/Flyspeck-Tame/Tame.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" separated\<^sub>2)
###     ("_cargs" ("_position" g) ("_position" V)))
###   ("_Ball" ("_position" v) ("_position" V)
###     ("\<^const>Set.not_member"
###       ("_applC"
###         ("\<^const>Graph.nextFace"
###           ("_Ball" ("_position" f)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" facesAt)
###                 ("_cargs" ("_position" g) ("_position" v))))
###             ("_position" f)))
###         ("_position" v))
###       ("_position" V))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" separated\<^sub>2)
###     ("_cargs" ("_position" g) ("_position" V)))
###   ("\<^const>Set.not_member"
###     ("_applC"
###       ("\<^const>Graph.nextFace"
###         ("_Ball" ("_position" v) ("_position" V)
###           ("_Ball" ("_position" f)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" facesAt)
###                 ("_cargs" ("_position" g) ("_position" v))))
###             ("_position" f))))
###       ("_position" v))
###     ("_position" V)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" separated\<^sub>2)
###     ("_cargs" ("_position" g) ("_position" V)))
###   ("_Ball" ("_position" v) ("_position" V)
###     ("_Ball" ("_position" f)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("\<^const>Set.not_member"
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v))
###         ("_position" V)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" separated\<^sub>2)
###     ("_cargs" ("_position" g) ("_position" V)))
###   ("_Ball" ("_position" v) ("_position" V)
###     ("_Ball" ("_position" f)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("\<^const>Set.not_member"
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v))
###         ("_position" V)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Tame"
### 0.895s elapsed time, 3.385s cpu time, 2.196s GC time
Loading theory "Draft.Enumerator" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.TameEnum" via "Draft.Generator" via "Draft.Plane1" via "Draft.Plane")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 4.093s elapsed time, 15.665s cpu time, 8.266s GC time
Loading theory "Draft.Templates" (required by "Draft.ArchStatTemplates" via "Draft.ExtrEqs")
consts
  hideDupsRec :: "'a => 'a list => 'a option list"
consts
  hideDups :: "'a list => 'a option list"
### theory "Draft.Enumerator"
### 0.916s elapsed time, 3.455s cpu time, 2.518s GC time
Loading theory "Draft.Plane" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.TameEnum" via "Draft.Generator" via "Draft.Plane1")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.112s elapsed time, 0.432s cpu time, 0.156s GC time
### theory "HOL-Library.BigO"
### 2.114s elapsed time, 7.984s cpu time, 5.059s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ArchStatTemplates")
consts
  containsUnacceptableEdgeSnd ::
    "(nat => nat => bool) => nat => nat list => bool"
consts
  containsUnacceptableEdge :: "(nat => nat => bool) => nat list => bool"
### theory "Draft.Plane"
### 1.336s elapsed time, 4.683s cpu time, 3.580s GC time
Loading theory "Draft.Plane1" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.TameEnum" via "Draft.Generator")
### theory "Draft.Plane1"
### 0.105s elapsed time, 0.354s cpu time, 0.197s GC time
Loading theory "Draft.Generator" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat" via "Draft.TameEnum")
### Ambiguous input (line 48 of "$AFP/Flyspeck-Tame/Generator.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" deleteAround)
###     ("_cargs" ("_position" g) ("_cargs" ("_position" v) ("_position" ps))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("_bind" ("_position" ws)
###         ("_concat" ("_position" f) ("_position" fs)
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.length"
###                 ("_applC" ("_position" vertices) ("_position" f)))
###               ("_Numeral" ("_constify" ("_position" 4))))
###             ("_list"
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" v))
###                 ("\<^const>Graph.nextVertices" ("_position" f)
###                   ("_Numeral" ("_constify" ("_position" 2)))
###                   ("_position" v))))
###             ("_list"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v)))))))
###     ("_applC" ("_position" removeKeyList)
###       ("_cargs" ("_position" ws) ("_position" ps)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" deleteAround)
###     ("_cargs" ("_position" g) ("_cargs" ("_position" v) ("_position" ps))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("_bind" ("_position" ws)
###         ("_concat" ("_position" f) ("_position" fs)
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.length"
###                 ("_applC" ("_position" vertices) ("_position" f)))
###               ("_Numeral" ("_constify" ("_position" 4))))
###             ("_list"
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" v))
###                 ("\<^const>Graph.nextVertices" ("_position" f)
###                   ("_Numeral" ("_constify" ("_position" 2)))
###                   ("_position" v))))
###             ("_list"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v)))))))
###     ("_applC" ("_position" removeKeyList)
###       ("_cargs" ("_position" ws) ("_position" ps)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" deleteAround)
###     ("_cargs" ("_position" g) ("_cargs" ("_position" v) ("_position" ps))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("_bind" ("_position" ws)
###         ("_concat" ("_position" f) ("_position" fs)
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.length"
###                 ("_applC" ("_position" vertices) ("_position" f)))
###               ("_Numeral" ("_constify" ("_position" 4))))
###             ("_list"
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" v))
###                 ("\<^const>Graph.nextVertices" ("_position" f)
###                   ("_Numeral" ("_constify" ("_position" 2)))
###                   ("_position" v))))
###             ("_list"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v)))))))
###     ("_applC" ("_position" removeKeyList)
###       ("_cargs" ("_position" ws) ("_position" ps)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" deleteAround)
###     ("_cargs" ("_position" g) ("_cargs" ("_position" v) ("_position" ps))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("_bind" ("_position" ws)
###         ("_concat" ("_position" f) ("_position" fs)
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.length"
###                 ("_applC" ("_position" vertices) ("_position" f)))
###               ("_Numeral" ("_constify" ("_position" 4))))
###             ("_list"
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" v))
###                 ("\<^const>Graph.nextVertices" ("_position" f)
###                   ("_Numeral" ("_constify" ("_position" 2)))
###                   ("_position" v))))
###             ("_list"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v)))))))
###     ("_applC" ("_position" removeKeyList)
###       ("_cargs" ("_position" ws) ("_position" ps)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/Flyspeck-Tame/Generator.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" v) ("_position" ps))))
###     ("_Let"
###       ("_bind" ("_position" vs)
###         ("_lambda" ("_position" f)
###           ("_Let"
###             ("_bind" ("_position" n)
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v)))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("\<^const>List.length"
###                   ("_applC" ("_position" vertices) ("_position" f)))
###                 ("_Numeral" ("_constify" ("_position" 4))))
###               ("_list"
###                 ("_args" ("_position" n)
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" n))))
###               ("_list" ("_position" n))))))
###       ("_applC" ("_position" removeKeyList)
###         ("_cargs"
###           ("_applC" ("_position" concat)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" vs)
###                 ("_applC" ("_position" facesAt)
###                   ("_cargs" ("_position" g) ("_position" v))))))
###           ("_position" ps))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" v) ("_position" ps))))
###     ("_Let"
###       ("_bind" ("_position" vs)
###         ("_lambda" ("_position" f)
###           ("_Let"
###             ("_bind" ("_position" n)
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v)))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("\<^const>List.length"
###                   ("_applC" ("_position" vertices) ("_position" f)))
###                 ("_Numeral" ("_constify" ("_position" 4))))
###               ("_list"
###                 ("_args" ("_position" n)
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" n))))
###               ("_list" ("_position" n))))))
###       ("_applC" ("_position" removeKeyList)
###         ("_cargs"
###           ("_applC" ("_position" concat)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" vs)
###                 ("_applC" ("_position" facesAt)
###                   ("_cargs" ("_position" g) ("_position" v))))))
###           ("_position" ps))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" v) ("_position" ps))))
###     ("_Let"
###       ("_bind" ("_position" vs)
###         ("_lambda" ("_position" f)
###           ("_Let"
###             ("_bind" ("_position" n)
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v)))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("\<^const>List.length"
###                   ("_applC" ("_position" vertices) ("_position" f)))
###                 ("_Numeral" ("_constify" ("_position" 4))))
###               ("_list"
###                 ("_args" ("_position" n)
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" n))))
###               ("_list" ("_position" n))))))
###       ("_applC" ("_position" removeKeyList)
###         ("_cargs"
###           ("_applC" ("_position" concat)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" vs)
###                 ("_applC" ("_position" facesAt)
###                   ("_cargs" ("_position" g) ("_position" v))))))
###           ("_position" ps))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" deleteAround)
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" v) ("_position" ps))))
###     ("_Let"
###       ("_bind" ("_position" vs)
###         ("_lambda" ("_position" f)
###           ("_Let"
###             ("_bind" ("_position" n)
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v)))
###             ("\<^const>HOL.If"
###               ("\<^const>HOL.eq"
###                 ("\<^const>List.length"
###                   ("_applC" ("_position" vertices) ("_position" f)))
###                 ("_Numeral" ("_constify" ("_position" 4))))
###               ("_list"
###                 ("_args" ("_position" n)
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" n))))
###               ("_list" ("_position" n))))))
###       ("_applC" ("_position" removeKeyList)
###         ("_cargs"
###           ("_applC" ("_position" concat)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" vs)
###                 ("_applC" ("_position" facesAt)
###                   ("_cargs" ("_position" g) ("_position" v))))))
###           ("_position" ps))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 3.854s elapsed time, 13.860s cpu time, 12.087s GC time
### theory "Draft.Generator"
### 2.781s elapsed time, 10.019s cpu time, 9.068s GC time
Loading theory "Draft.TameEnum" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat")
### theory "Draft.TameEnum"
### 0.134s elapsed time, 0.396s cpu time, 0.305s GC time
### theory "Draft.Arch"
### 11.836s elapsed time, 42.130s cpu time, 28.725s GC time
Loading theory "Draft.ArchCompAux" (required by "Draft.ArchStatTemplates" via "Draft.ArchStat")
### theory "Draft.ArchCompAux"
### 1.297s elapsed time, 3.669s cpu time, 3.191s GC time
Loading theory "Draft.ArchStat" (required by "Draft.ArchStatTemplates")
### theory "Draft.ArchStat"
### 0.033s elapsed time, 0.042s cpu time, 0.000s GC time
*** Inner syntax error (line 43 of "$AFP/Flyspeck-Tame/ArchStat.thy")
*** at ": set ys . iso_test fg y ) then t else Tries.update t h ( fg # ys ) in (
***      t' , tot + 1 , fins + 1 ) else ( t , tot + 1 , fins ) )"
*** Failed to parse prop
*** At command "fun" (line 37 of "$AFP/Flyspeck-Tame/ArchStat.thy")
*** Failed to load theory "Draft.ArchStatTemplates" (unresolved "Draft.ArchStat")
Exception- TOPLEVEL_ERROR raised
