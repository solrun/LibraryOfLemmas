Loading theory "Draft.Quasi_Order" (required by "Draft.TameTemplates" via "Draft.Tame" via "Draft.Graph" via "Draft.Rotation" via "Draft.PlaneGraphIso")
Loading theory "Draft.ListAux" (required by "Draft.TameTemplates" via "Draft.Tame" via "Draft.Graph" via "Draft.Rotation")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TameTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TameTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
locale quasi_order
  fixes qle :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 60)
  assumes "quasi_order (\<preceq>)"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Quasi_Order"
### 0.108s elapsed time, 0.443s cpu time, 0.056s GC time
Loading theory "Draft.PlaneGraphIso" (required by "Draft.TameTemplates" via "Draft.Tame" via "Draft.Graph" via "Draft.Rotation")
### theory "HOL-Library.Function_Algebras"
### 0.118s elapsed time, 0.489s cpu time, 0.056s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TameTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Ambiguous input (line 130 of "$AFP/Flyspeck-Tame/ListAux.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Product_Type.Times" ("_position" as) ("_position" bs))
###   ("_concat" ("_position" a) ("_position" as)
###     ("_applC" ("_position" listProd1)
###       ("_cargs" ("_position" a) ("_position" bs)))))
### ("\<^const>Pure.eq" ("\<^fixed>listProd" ("_position" as) ("_position" bs))
###   ("_concat" ("_position" a) ("_position" as)
###     ("_applC" ("_position" listProd1)
###       ("_cargs" ("_position" a) ("_position" bs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/Flyspeck-Tame/ListAux.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set)
###       ("\<^const>ListAux.listProd" ("_position" xs) ("_position" ys)))
###     ("\<^const>Product_Type.Times"
###       ("_applC" ("_position" set) ("_position" xs))
###       ("_applC" ("_position" set) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set)
###       ("\<^const>Product_Type.Times" ("_position" xs) ("_position" ys)))
###     ("\<^const>Product_Type.Times"
###       ("_applC" ("_position" set) ("_position" xs))
###       ("_applC" ("_position" set) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### No equation for constructor "[]"
consts
  minimal :: "('a => nat) => 'a list => 'a"
### No equation for constructor "[]"
### Ignoring duplicate safe introduction (intro!)
### EX y. ?x = Some y ==> ?x ~= None
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Ignoring duplicate safe elimination (elim!)
### [| ?x ~= None; EX y. ?x = Some y ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### ?x = None ==> ALL y. ?x ~= Some y
### Ignoring duplicate safe elimination (elim!)
### [| ALL y. ?x ~= Some y; ?x = None ==> PROP ?W |] ==> PROP ?W
consts
  min_list :: "nat list => nat"
### Ignoring duplicate safe introduction (intro!)
### EX y. ?x = Some y ==> ?x ~= None
### Ignoring duplicate safe elimination (elim!)
### [| ?x ~= None; EX y. ?x = Some y ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?x1 ~= None == EX y. ?x1 = Some y
### Ignoring duplicate safe introduction (intro!)
### ?x = None ==> ALL y. ?x ~= Some y
### Ignoring duplicate safe elimination (elim!)
### [| ALL y. ?x ~= Some y; ?x = None ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ALL y. ?x1 ~= Some y == ?x1 = None
### No equation for constructor "[]"
consts
  max_list :: "nat list => nat"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
overloading
  congs \<equiv> pr_isomorphic :: 'a list => 'a list => bool
consts
  replace :: "'a => 'a list => 'a list => 'a list"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  mapAt :: "nat list => ('a => 'a) => 'a list => 'a list"
Found termination order: "size_list size <*mlex*> {}"
consts
  pr_iso_test0 ::
    "('a => 'b option) => 'a list list => 'b list list => bool"
consts
  splitAtRec :: "'a => 'a list => 'a list => 'a list * 'a list"
### theory "HOL-Library.Nat_Bijection"
### 0.336s elapsed time, 1.340s cpu time, 0.147s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TameTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.229s elapsed time, 0.903s cpu time, 0.091s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TameTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  pr_iso_test1 ::
    "('a => 'b option) => 'a list list => 'b list list => bool"
consts
  pr_iso_test2 ::
    "(('a * 'b) list => ('a * 'b) list => bool)
     => (('a * 'b) list => ('a * 'b) list => ('a * 'b) list)
        => ('a * 'b) list => 'a list list => 'b list list => bool"
### Ignoring duplicate rewrite rule:
### ?A1 - ?B1 <= ?A1 == True
consts
  merge :: "('a * 'b) list => ('a * 'b) list => ('a * 'b) list"
consts
  pr_iso_test_rec ::
    "('a * 'b) list => 'a list list => 'b list list => bool"
### theory "Draft.PlaneGraphIso"
### 0.518s elapsed time, 2.032s cpu time, 0.270s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TameTemplates" via "Draft.ExtrEqs")
consts
  removeKeyList :: "'a list => ('a * 'b) list => ('a * 'b) list"
### theory "Draft.ListAux"
### 0.648s elapsed time, 2.549s cpu time, 0.326s GC time
Loading theory "Draft.ListSum" (required by "Draft.TameTemplates" via "Draft.Tame")
consts
  ListSum :: "'b list => ('b => 'a) => 'a"
### theory "Draft.ListSum"
### 0.070s elapsed time, 0.287s cpu time, 0.000s GC time
Loading theory "Draft.Rotation" (required by "Draft.TameTemplates" via "Draft.Tame" via "Draft.Graph")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
### theory "Draft.Rotation"
### 0.380s elapsed time, 1.393s cpu time, 0.615s GC time
Loading theory "Draft.Graph" (required by "Draft.TameTemplates" via "Draft.Tame")
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.130s elapsed time, 4.338s cpu time, 0.905s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.022s elapsed time, 3.757s cpu time, 0.795s GC time
Found termination order: "size <*mlex*> {}"
overloading
  final_face \<equiv> final :: face => bool
  type_face \<equiv> type :: face => facetype
  vertices_face \<equiv> vertices :: face => nat list
  cong_face \<equiv> pr_isomorphic :: face => face => bool
consts
  final_face :: "face => bool"
consts
  type_face :: "face => facetype"
consts
  vertices_face :: "face => nat list"
consts
  nextElem :: "'a list => 'a => 'a => 'a"
overloading
  edges_face \<equiv> edges :: face => (nat * nat) set
overloading
  op_vertices \<equiv> op :: nat list => nat list
Found termination order: "size <*mlex*> {}"
overloading
  op_graph \<equiv> op :: face => face
consts
  op_graph :: "face => face"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  faces :: "graph => face list"
consts
  countVertices :: "graph => nat"
overloading
  vertices_graph \<equiv> vertices :: graph => nat list
consts
  vertices_graph :: "graph => nat list"
consts
  faceListAt :: "graph => face list list"
consts
  heights :: "graph => nat list"
overloading
  finalGraph \<equiv> final :: graph => bool
overloading
  edges_graph \<equiv> edges :: graph => (nat * nat) set
### Ambiguous input (line 257 of "$AFP/Flyspeck-Tame/Graph.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>nextFace" ("_position" p))
###   ("_lambda" ("_position" f)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_pattern" ("_position" g) ("_position" v))
###           ("_position" p))
###         ("_bind" ("_position" fs)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" v)))))
###       ("_case_syntax" ("_position" fs)
###         ("_case2" ("_case1" ("\<^const>List.list.Nil") ("_position" f))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" g) ("_position" gs))
###             ("_applC" ("_position" nextElem)
###               ("_cargs" ("_position" fs)
###                 ("_cargs" ("_applC" ("_position" hd) ("_position" fs))
###                   ("_position" f))))))))))
### ("\<^const>Pure.eq" ("\<^const>Graph.nextVertex" ("_position" p))
###   ("_lambda" ("_position" f)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_pattern" ("_position" g) ("_position" v))
###           ("_position" p))
###         ("_bind" ("_position" fs)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" v)))))
###       ("_case_syntax" ("_position" fs)
###         ("_case2" ("_case1" ("\<^const>List.list.Nil") ("_position" f))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" g) ("_position" gs))
###             ("_applC" ("_position" nextElem)
###               ("_cargs" ("_position" fs)
###                 ("_cargs" ("_applC" ("_position" hd) ("_position" fs))
###                   ("_position" f))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Graph"
### 1.110s elapsed time, 3.170s cpu time, 0.295s GC time
Loading theory "Draft.Tame" (required by "Draft.TameTemplates")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.049s elapsed time, 6.442s cpu time, 1.119s GC time
Loading theory "Draft.Templates" (required by "Draft.TameTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 68 of "$AFP/Flyspeck-Tame/Tame.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" separated\<^sub>2)
###     ("_cargs" ("_position" g) ("_position" V)))
###   ("_Ball" ("_position" v) ("_position" V)
###     ("\<^const>Set.not_member"
###       ("_applC"
###         ("\<^const>Graph.nextFace"
###           ("_Ball" ("_position" f)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" facesAt)
###                 ("_cargs" ("_position" g) ("_position" v))))
###             ("_position" f)))
###         ("_position" v))
###       ("_position" V))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" separated\<^sub>2)
###     ("_cargs" ("_position" g) ("_position" V)))
###   ("\<^const>Set.not_member"
###     ("_applC"
###       ("\<^const>Graph.nextFace"
###         ("_Ball" ("_position" v) ("_position" V)
###           ("_Ball" ("_position" f)
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" facesAt)
###                 ("_cargs" ("_position" g) ("_position" v))))
###             ("_position" f))))
###       ("_position" v))
###     ("_position" V)))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" separated\<^sub>2)
###     ("_cargs" ("_position" g) ("_position" V)))
###   ("_Ball" ("_position" v) ("_position" V)
###     ("_Ball" ("_position" f)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("\<^const>Set.not_member"
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v))
###         ("_position" V)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" separated\<^sub>2)
###     ("_cargs" ("_position" g) ("_position" V)))
###   ("_Ball" ("_position" v) ("_position" V)
###     ("_Ball" ("_position" f)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" facesAt)
###           ("_cargs" ("_position" g) ("_position" v))))
###       ("\<^const>Set.not_member"
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v))
###         ("_position" V)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TameTemplates")
### theory "Draft.Tame"
### 0.261s elapsed time, 0.536s cpu time, 0.031s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.485s elapsed time, 0.581s cpu time, 0.048s GC time
Loading theory "Draft.TameTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.TameTemplates"
### 0.350s elapsed time, 0.513s cpu time, 0.053s GC time
val it = (): unit
