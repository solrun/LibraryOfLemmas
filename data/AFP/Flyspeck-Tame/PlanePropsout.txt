Loading theory "Draft.Quasi_Order" (required by "Draft.PlanePropsTemplates" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation" via "Draft.PlaneGraphIso")
Loading theory "Draft.RTranCl" (required by "Draft.PlanePropsTemplates" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane")
Loading theory "Draft.ListAux" (required by "Draft.PlanePropsTemplates" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PlanePropsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
locale quasi_order
  fixes qle :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 60)
  assumes "quasi_order (\<preceq>)"
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
Proofs for inductive predicate(s) "RTranClp"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
  Proving monotonicity ...
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Quasi_Order"
### 0.080s elapsed time, 0.344s cpu time, 0.000s GC time
Loading theory "Draft.PlaneGraphIso" (required by "Draft.PlanePropsTemplates" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation")
### Ignoring duplicate safe introduction (intro!)
### EX y. ?x = Some y ==> ?x ~= None
### Ignoring duplicate safe elimination (elim!)
### [| ?x ~= None; EX y. ?x = Some y ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### ?x = None ==> ALL y. ?x ~= Some y
### Ignoring duplicate safe elimination (elim!)
### [| ALL y. ?x ~= Some y; ?x = None ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX y. ?x = Some y ==> ?x ~= None
### Ignoring duplicate safe elimination (elim!)
### [| ?x ~= None; EX y. ?x = Some y ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?x1 ~= None == EX y. ?x1 = Some y
### Ignoring duplicate safe introduction (intro!)
### ?x = None ==> ALL y. ?x ~= Some y
### Ignoring duplicate safe elimination (elim!)
### [| ALL y. ?x ~= Some y; ?x = None ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ALL y. ?x1 ~= Some y == ?x1 = None
### Ambiguous input (line 130 of "$AFP/Flyspeck-Tame/ListAux.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Product_Type.Times" ("_position" as) ("_position" bs))
###   ("_concat" ("_position" a) ("_position" as)
###     ("_applC" ("_position" listProd1)
###       ("_cargs" ("_position" a) ("_position" bs)))))
### ("\<^const>Pure.eq" ("\<^fixed>listProd" ("_position" as) ("_position" bs))
###   ("_concat" ("_position" a) ("_position" as)
###     ("_applC" ("_position" listProd1)
###       ("_cargs" ("_position" a) ("_position" bs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.550s cpu time, 0.047s GC time
Loading theory "Draft.IArray_Syntax" (required by "Draft.PlanePropsTemplates" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator")
### Ambiguous input (line 132 of "$AFP/Flyspeck-Tame/ListAux.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set)
###       ("\<^const>ListAux.listProd" ("_position" xs) ("_position" ys)))
###     ("\<^const>Product_Type.Times"
###       ("_applC" ("_position" set) ("_position" xs))
###       ("_applC" ("_position" set) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set)
###       ("\<^const>Product_Type.Times" ("_position" xs) ("_position" ys)))
###     ("\<^const>Product_Type.Times"
###       ("_applC" ("_position" set) ("_position" xs))
###       ("_applC" ("_position" set) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
overloading
  congs \<equiv> pr_isomorphic :: 'a list => 'a list => bool
### No equation for constructor "[]"
consts
  minimal :: "('a => nat) => 'a list => 'a"
### No equation for constructor "[]"
consts
  min_list :: "nat list => nat"
### No equation for constructor "[]"
### theory "Draft.RTranCl"
### 0.174s elapsed time, 0.701s cpu time, 0.047s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PlanePropsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
consts
  max_list :: "nat list => nat"
consts
  replace :: "'a => 'a list => 'a list => 'a list"
### theory "Draft.IArray_Syntax"
### 0.054s elapsed time, 0.222s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PlanePropsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  mapAt :: "nat list => ('a => 'a) => 'a list => 'a list"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  pr_iso_test0 ::
    "('a => 'b option) => 'a list list => 'b list list => bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  pr_iso_test1 ::
    "('a => 'b option) => 'a list list => 'b list list => bool"
consts
  splitAtRec :: "'a => 'a list => 'a list => 'a list * 'a list"
consts
  pr_iso_test2 ::
    "(('a * 'b) list => ('a * 'b) list => bool)
     => (('a * 'b) list => ('a * 'b) list => ('a * 'b) list)
        => ('a * 'b) list => 'a list list => 'b list list => bool"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.217s elapsed time, 0.859s cpu time, 0.081s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PlanePropsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Ignoring duplicate rewrite rule:
### ?A1 - ?B1 <= ?A1 == True
consts
  merge :: "('a * 'b) list => ('a * 'b) list => ('a * 'b) list"
consts
  pr_iso_test_rec ::
    "('a * 'b) list => 'a list list => 'b list list => bool"
### theory "HOL-Library.Nat_Bijection"
### 0.339s elapsed time, 1.329s cpu time, 0.157s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PlanePropsTemplates" via "Draft.ExtrEqs")
### theory "Draft.PlaneGraphIso"
### 0.512s elapsed time, 1.998s cpu time, 0.301s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PlanePropsTemplates" via "Draft.ExtrEqs")
consts
  removeKeyList :: "'a list => ('a * 'b) list => ('a * 'b) list"
### theory "Draft.ListAux"
### 0.657s elapsed time, 2.595s cpu time, 0.301s GC time
Loading theory "Draft.Rotation" (required by "Draft.PlanePropsTemplates" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph")
### theory "Draft.Rotation"
### 0.208s elapsed time, 0.826s cpu time, 0.089s GC time
Loading theory "Draft.Graph" (required by "Draft.PlanePropsTemplates" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane" via "Draft.Enumerator")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.BigO"
### 1.030s elapsed time, 3.898s cpu time, 0.908s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.149s elapsed time, 4.325s cpu time, 1.004s GC time
overloading
  final_face \<equiv> final :: face => bool
  type_face \<equiv> type :: face => facetype
  vertices_face \<equiv> vertices :: face => nat list
  cong_face \<equiv> pr_isomorphic :: face => face => bool
consts
  final_face :: "face => bool"
consts
  type_face :: "face => facetype"
consts
  vertices_face :: "face => nat list"
Found termination order: "size <*mlex*> {}"
consts
  nextElem :: "'a list => 'a => 'a => 'a"
overloading
  edges_face \<equiv> edges :: face => (nat * nat) set
overloading
  op_vertices \<equiv> op :: nat list => nat list
overloading
  op_graph \<equiv> op :: face => face
consts
  op_graph :: "face => face"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  faces :: "graph => face list"
consts
  countVertices :: "graph => nat"
overloading
  vertices_graph \<equiv> vertices :: graph => nat list
consts
  vertices_graph :: "graph => nat list"
consts
  faceListAt :: "graph => face list list"
consts
  heights :: "graph => nat list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
overloading
  finalGraph \<equiv> final :: graph => bool
overloading
  edges_graph \<equiv> edges :: graph => (nat * nat) set
### Ambiguous input (line 257 of "$AFP/Flyspeck-Tame/Graph.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>nextFace" ("_position" p))
###   ("_lambda" ("_position" f)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_pattern" ("_position" g) ("_position" v))
###           ("_position" p))
###         ("_bind" ("_position" fs)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" v)))))
###       ("_case_syntax" ("_position" fs)
###         ("_case2" ("_case1" ("\<^const>List.list.Nil") ("_position" f))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" g) ("_position" gs))
###             ("_applC" ("_position" nextElem)
###               ("_cargs" ("_position" fs)
###                 ("_cargs" ("_applC" ("_position" hd) ("_position" fs))
###                   ("_position" f))))))))))
### ("\<^const>Pure.eq" ("\<^const>Graph.nextVertex" ("_position" p))
###   ("_lambda" ("_position" f)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_pattern" ("_position" g) ("_position" v))
###           ("_position" p))
###         ("_bind" ("_position" fs)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" v)))))
###       ("_case_syntax" ("_position" fs)
###         ("_case2" ("_case1" ("\<^const>List.list.Nil") ("_position" f))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" g) ("_position" gs))
###             ("_applC" ("_position" nextElem)
###               ("_cargs" ("_position" fs)
###                 ("_cargs" ("_applC" ("_position" hd) ("_position" fs))
###                   ("_position" f))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Graph"
### 1.343s elapsed time, 4.090s cpu time, 0.971s GC time
Loading theory "Draft.FaceDivision" (required by "Draft.PlanePropsTemplates" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane")
Loading theory "Draft.GraphProps" (required by "Draft.PlanePropsTemplates" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.EnumeratorProps")
Loading theory "Draft.Enumerator" (required by "Draft.PlanePropsTemplates" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps" via "Draft.Plane")
### Ambiguous input (line 134 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" vertices) ("_position" f))
###       ("\<^const>List.list.Nil")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" vertices) ("_position" f))
###       ("\<^const>List.list.Nil")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 147 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" vertices) ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" vertices) ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/Flyspeck-Tame/FaceDivision.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" splitFace)
###     ("_cargs" ("_position" g)
###       ("_cargs" ("_position" ram\<^sub>1)
###         ("_cargs" ("_position" ram\<^sub>2)
###           ("_cargs" ("_position" oldF) ("_position" newVs))))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" faces) ("_position" g)))
###       ("_binds"
###         ("_bind" ("_position" n)
###           ("_applC" ("_position" countVertices) ("_position" g)))
###         ("_binds"
###           ("_bind" ("_position" Fs)
###             ("_applC" ("_position" faceListAt) ("_position" g)))
###           ("_binds"
###             ("_bind" ("_position" h)
###               ("_applC" ("_position" heights) ("_position" g)))
###             ("_binds"
###               ("_bind" ("_position" vs\<^sub>1)
###                 ("_applC" ("_position" between)
###                   ("_cargs"
###                     ("_applC" ("_position" vertices) ("_position" oldF))
###                     ("_cargs" ("_position" ram\<^sub>1)
###                       ("_position" ram\<^sub>2)))))
###               ("_binds"
###                 ("_bind" ("_position" vs\<^sub>2)
###                   ("_applC" ("_position" between)
###                     ("_cargs"
###                       ("_applC" ("_position" vertices) ("_position" oldF))
###                       ("_cargs" ("_position" ram\<^sub>2)
###                         ("_position" ram\<^sub>1)))))
###                 ("_binds"
###                   ("_bind"
###                     ("_pattern" ("_position" f\<^sub>1)
###                       ("_position" f\<^sub>2))
###                     ("_applC" ("_position" split_face)
###                       ("_cargs" ("_position" oldF)
###                         ("_cargs" ("_position" ram\<^sub>1)
###                           ("_cargs" ("_position" ram\<^sub>2)
###                             ("_position" newVs))))))
###                   ("_binds"
###                     ("_bind" ("_position" Fs)
###                       ("_applC" ("_position" replacefacesAt)
###                         ("_cargs" ("_position" vs\<^sub>1)
###                           ("_cargs" ("_position" oldF)
###                             ("_cargs" ("_list" ("_position" f\<^sub>1))
###                               ("_position" Fs))))))
###                     ("_binds"
###                       ("_bind" ("_position" Fs)
###                         ("_applC" ("_position" replacefacesAt)
###                           ("_cargs" ("_position" vs\<^sub>2)
###                             ("_cargs" ("_position" oldF)
###                               ("_cargs" ("_list" ("_position" f\<^sub>2))
###                                 ("_position" Fs))))))
###                       ("_binds"
###                         ("_bind" ("_position" Fs)
###                           ("_applC" ("_position" replacefacesAt)
###                             ("_cargs" ("_list" ("_position" ram\<^sub>1))
###                               ("_cargs" ("_position" oldF)
###                                 ("_cargs"
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>2)
### ("_position" f\<^sub>1)))
###                                   ("_position" Fs))))))
###                         ("_binds"
###                           ("_bind" ("_position" Fs)
###                             ("_applC" ("_position" replacefacesAt)
###                               ("_cargs" ("_list" ("_position" ram\<^sub>2))
###                                 ("_cargs" ("_position" oldF)
###                                   ("_cargs"
###                                     ("_list"
### ("_args" ("_position" f\<^sub>1) ("_position" f\<^sub>2)))
###                                     ("_position" Fs))))))
###                           ("_bind" ("_position" Fs)
###                             ("\<^const>HOL.disj"
###                               ("\<^const>List.append" ("_position" Fs)
###                                 ("_position" replicate))
###                               ("\<^const>HOL.disj" ("_position" newVs)
###                                 ("_list"
###                                   ("_args" ("_position" f\<^sub>1)
###                                     ("_position" f\<^sub>2)))))))))))))))))
###     ("_tuple" ("_position" f\<^sub>1)
###       ("_tuple_args" ("_position" f\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" Graph)
###             ("_cargs"
###               ("\<^const>List.append"
###                 ("_applC" ("_position" replace)
###                   ("_cargs" ("_position" oldF)
###                     ("_cargs" ("_list" ("_position" f\<^sub>2))
###                       ("_position" fs))))
###                 ("_list" ("_position" f\<^sub>1)))
###               ("_cargs"
###                 ("\<^const>Groups.plus_class.plus" ("_position" n)
###                   ("\<^const>List.length" ("_position" newVs)))
###                 ("_cargs" ("_position" Fs)
###                   ("\<^const>List.append" ("_position" h)
###                     ("_applC" ("_position" heightsNewVertices)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" h)
###                           ("_position" ram\<^sub>1))
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" h)
###                             ("_position" ram\<^sub>2))
###                           ("\<^const>List.length"
###                             ("_position" newVs)))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" splitFace)
###     ("_cargs" ("_position" g)
###       ("_cargs" ("_position" ram\<^sub>1)
###         ("_cargs" ("_position" ram\<^sub>2)
###           ("_cargs" ("_position" oldF) ("_position" newVs))))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" faces) ("_position" g)))
###       ("_binds"
###         ("_bind" ("_position" n)
###           ("_applC" ("_position" countVertices) ("_position" g)))
###         ("_binds"
###           ("_bind" ("_position" Fs)
###             ("_applC" ("_position" faceListAt) ("_position" g)))
###           ("_binds"
###             ("_bind" ("_position" h)
###               ("_applC" ("_position" heights) ("_position" g)))
###             ("_binds"
###               ("_bind" ("_position" vs\<^sub>1)
###                 ("_applC" ("_position" between)
###                   ("_cargs"
###                     ("_applC" ("_position" vertices) ("_position" oldF))
###                     ("_cargs" ("_position" ram\<^sub>1)
###                       ("_position" ram\<^sub>2)))))
###               ("_binds"
###                 ("_bind" ("_position" vs\<^sub>2)
###                   ("_applC" ("_position" between)
###                     ("_cargs"
###                       ("_applC" ("_position" vertices) ("_position" oldF))
###                       ("_cargs" ("_position" ram\<^sub>2)
###                         ("_position" ram\<^sub>1)))))
###                 ("_binds"
###                   ("_bind"
###                     ("_pattern" ("_position" f\<^sub>1)
###                       ("_position" f\<^sub>2))
###                     ("_applC" ("_position" split_face)
###                       ("_cargs" ("_position" oldF)
###                         ("_cargs" ("_position" ram\<^sub>1)
###                           ("_cargs" ("_position" ram\<^sub>2)
###                             ("_position" newVs))))))
###                   ("_binds"
###                     ("_bind" ("_position" Fs)
###                       ("_applC" ("_position" replacefacesAt)
###                         ("_cargs" ("_position" vs\<^sub>1)
###                           ("_cargs" ("_position" oldF)
###                             ("_cargs" ("_list" ("_position" f\<^sub>1))
###                               ("_position" Fs))))))
###                     ("_binds"
###                       ("_bind" ("_position" Fs)
###                         ("_applC" ("_position" replacefacesAt)
###                           ("_cargs" ("_position" vs\<^sub>2)
###                             ("_cargs" ("_position" oldF)
###                               ("_cargs" ("_list" ("_position" f\<^sub>2))
###                                 ("_position" Fs))))))
###                       ("_binds"
###                         ("_bind" ("_position" Fs)
###                           ("_applC" ("_position" replacefacesAt)
###                             ("_cargs" ("_list" ("_position" ram\<^sub>1))
###                               ("_cargs" ("_position" oldF)
###                                 ("_cargs"
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>2)
### ("_position" f\<^sub>1)))
###                                   ("_position" Fs))))))
###                         ("_binds"
###                           ("_bind" ("_position" Fs)
###                             ("_applC" ("_position" replacefacesAt)
###                               ("_cargs" ("_list" ("_position" ram\<^sub>2))
###                                 ("_cargs" ("_position" oldF)
###                                   ("_cargs"
###                                     ("_list"
### ("_args" ("_position" f\<^sub>1) ("_position" f\<^sub>2)))
###                                     ("_position" Fs))))))
###                           ("_bind" ("_position" Fs)
###                             ("\<^const>List.append" ("_position" Fs)
###                               ("_applC" ("_position" replicate)
###                                 ("_cargs"
###                                   ("\<^const>List.length"
###                                     ("_position" newVs))
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>1)
### ("_position" f\<^sub>2))))))))))))))))))
###     ("_tuple" ("_position" f\<^sub>1)
###       ("_tuple_args" ("_position" f\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" Graph)
###             ("_cargs"
###               ("\<^const>List.append"
###                 ("_applC" ("_position" replace)
###                   ("_cargs" ("_position" oldF)
###                     ("_cargs" ("_list" ("_position" f\<^sub>2))
###                       ("_position" fs))))
###                 ("_list" ("_position" f\<^sub>1)))
###               ("_cargs"
###                 ("\<^const>Groups.plus_class.plus" ("_position" n)
###                   ("\<^const>List.length" ("_position" newVs)))
###                 ("_cargs" ("_position" Fs)
###                   ("\<^const>List.append" ("_position" h)
###                     ("_applC" ("_position" heightsNewVertices)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" h)
###                           ("_position" ram\<^sub>1))
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" h)
###                             ("_position" ram\<^sub>2))
###                           ("\<^const>List.length"
###                             ("_position" newVs)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 152 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 170 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("\<^const>List.nth"
###           ("_applC" ("_position" vertices) ("_position" f))
###           ("_position" i)))
###       ("\<^const>List.nth" ("_applC" ("_position" vertices) ("_position" f))
###         ("\<^const>Rings.modulo_class.modulo"
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("\<^const>List.nth"
###           ("_applC" ("_position" vertices) ("_position" f))
###           ("_position" i)))
###       ("\<^const>List.nth" ("_applC" ("_position" vertices) ("_position" f))
###         ("\<^const>Rings.modulo_class.modulo"
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###       ("_applC" ("\<^const>Graph.edges")
###         ("_constrain" ("_position" f) ("_type_name" face))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" a))
###         ("_position" b))
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###       ("_applC" ("\<^const>Graph.edges")
###         ("_constrain" ("_position" f) ("_type_name" face))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" a))
###         ("_position" b))
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" v)
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))))
###       ("_applC" ("_position" edges) ("_position" f)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" v)
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))))
###       ("_applC" ("_position" edges) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Flyspeck-Tame/FaceDivision.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" u)
###             ("_cargs" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" vo)
###                 ("_position" vos)))))))
###     ("_case_syntax" ("_position" vo)
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" subdivFace')
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_applC" ("_position" Suc) ("_position" n))
###                     ("_position" vos)))))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" u))
###                 ("_position" v))
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("_applC" ("_position" subdivFace')
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("\<^const>Groups.zero_class.zero")
###                       ("_position" vos))))))
###             ("_Let"
###               ("_binds"
###                 ("_bind" ("_position" ws)
###                   ("\<^const>List.upt"
###                     ("_applC" ("_position" countVertices) ("_position" g))
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("_position" n))))
###                 ("_bind"
###                   ("_pattern" ("_position" f\<^sub>1)
###                     ("_patterns" ("_position" f\<^sub>2) ("_position" g')))
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" f) ("_position" ws))))))))
###               ("_applC" ("_position" subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f\<^sub>2)
###                     ("_cargs" ("_position" v)
###                       ("_cargs" ("\<^const>Groups.zero_class.zero")
###                         ("_position" vos)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" u)
###             ("_cargs" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" vo)
###                 ("_position" vos)))))))
###     ("_case_syntax" ("_position" vo)
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" subdivFace')
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_applC" ("_position" Suc) ("_position" n))
###                     ("_position" vos)))))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" u))
###                 ("_position" v))
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("_applC" ("_position" subdivFace')
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("\<^const>Groups.zero_class.zero")
###                       ("_position" vos))))))
###             ("_Let"
###               ("_binds"
###                 ("_bind" ("_position" ws)
###                   ("\<^const>List.upt"
###                     ("_applC" ("_position" countVertices) ("_position" g))
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("_position" n))))
###                 ("_bind"
###                   ("_pattern" ("_position" f\<^sub>1)
###                     ("_patterns" ("_position" f\<^sub>2) ("_position" g')))
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" f) ("_position" ws))))))))
###               ("_applC" ("_position" subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f\<^sub>2)
###                     ("_cargs" ("_position" v)
###                       ("_cargs" ("\<^const>Groups.zero_class.zero")
###                         ("_position" vos)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subdivFace' :: "graph => face => nat => nat => nat option list => graph"
### Ambiguous input (line 215 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.FaceDivision"
### 0.164s elapsed time, 0.639s cpu time, 0.064s GC time
### Ambiguous input (line 231 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 240 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 257 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 64 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  hideDupsRec :: "'a => 'a list => 'a option list"
### Ambiguous input (line 271 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  hideDups :: "'a list => 'a option list"
### Ambiguous input (line 281 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Enumerator"
### 0.256s elapsed time, 0.946s cpu time, 0.116s GC time
Loading theory "Draft.Plane" (required by "Draft.PlanePropsTemplates" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps")
### Ambiguous input (line 315 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 322 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.greater"
###             ("\<^const>List.length"
###               ("_applC" ("_position" vertices) ("_position" f)))
###             ("\<^const>Groups.one_class.one"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.greater"
###             ("\<^const>List.length"
###               ("_applC" ("_position" vertices) ("_position" f)))
###             ("\<^const>Groups.one_class.one"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 343 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 360 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u)
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u)
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 383 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" v)
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.list.Nil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" v)
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.list.Nil"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 396 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" u)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" u)
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.append"
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u) ("_position" v))))
###         ("_list" ("_position" v))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" u)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" u)
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.append"
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u) ("_position" v))))
###         ("_list" ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 403 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" v)
###                 ("_applC" ("_position" set)
###                   ("\<^const>List.list.Cons" ("_position" x)
###                     ("_applC" ("_position" between)
###                       ("_cargs"
###                         ("_applC" ("_position" vertices) ("_position" f))
###                         ("_cargs" ("_position" x)
###                           ("_position" y)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("_position" nextElem)
###         ("_cargs"
###           ("\<^const>List.list.Cons" ("_position" x)
###             ("\<^const>List.append"
###               ("_applC" ("_position" between)
###                 ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###                   ("_cargs" ("_position" x) ("_position" y))))
###               ("_list" ("_position" y))))
###           ("_cargs" ("_position" z) ("_position" v)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" v)
###                 ("_applC" ("_position" set)
###                   ("\<^const>List.list.Cons" ("_position" x)
###                     ("_applC" ("_position" between)
###                       ("_cargs"
###                         ("_applC" ("_position" vertices) ("_position" f))
###                         ("_cargs" ("_position" x)
###                           ("_position" y)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("_position" nextElem)
###         ("_cargs"
###           ("\<^const>List.list.Cons" ("_position" x)
###             ("\<^const>List.append"
###               ("_applC" ("_position" between)
###                 ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###                   ("_cargs" ("_position" x) ("_position" y))))
###               ("_list" ("_position" y))))
###           ("_cargs" ("_position" z) ("_position" v)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.GraphProps"
### 0.306s elapsed time, 1.100s cpu time, 0.116s GC time
Loading theory "Draft.EnumeratorProps" (required by "Draft.PlanePropsTemplates" via "Draft.PlaneProps" via "Draft.Invariants" via "Draft.FaceDivisionProps")
### theory "HOL-Library.Tree"
### 2.132s elapsed time, 7.070s cpu time, 1.348s GC time
Loading theory "Draft.Templates" (required by "Draft.PlanePropsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.191s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PlanePropsTemplates")
consts
  containsUnacceptableEdgeSnd ::
    "(nat => nat => bool) => nat => nat list => bool"
consts
  containsUnacceptableEdge :: "(nat => nat => bool) => nat list => bool"
### theory "Draft.EnumeratorProps"
### 0.273s elapsed time, 0.821s cpu time, 0.074s GC time
### theory "Draft.Plane"
### 0.364s elapsed time, 1.064s cpu time, 0.074s GC time
Loading theory "Draft.FaceDivisionProps" (required by "Draft.PlanePropsTemplates" via "Draft.PlaneProps" via "Draft.Invariants")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.638s elapsed time, 1.578s cpu time, 0.280s GC time
### Ambiguous input (line 1398 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" last)
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_position" v)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" vertices) ("_position" f)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))
###           ("_applC" ("_position" hd)
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" last)
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_position" v)))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" vertices) ("_position" f)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))
###           ("_applC" ("_position" hd)
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1622 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" length)
###             ("_applC" ("_position" vertices) ("_position" f)))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal"
###             ("_applC" ("_position" last)
###               ("_applC" ("_position" verticesFrom)
###                 ("_cargs" ("_position" f) ("_position" v))))
###             ("_position" u)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" verticesFrom)
###                   ("_cargs" ("_position" f) ("_position" v)))
###                 ("_position" i))
###               ("_position" u)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" u))
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" verticesFrom)
###                   ("_cargs" ("_position" f) ("_position" v)))
###                 ("_applC" ("_position" Suc) ("_position" i))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("_applC" ("_position" length)
###             ("_applC" ("_position" vertices) ("_position" f)))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal"
###             ("_applC" ("_position" last)
###               ("_applC" ("_position" verticesFrom)
###                 ("_cargs" ("_position" f) ("_position" v))))
###             ("_position" u)))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" verticesFrom)
###                   ("_cargs" ("_position" f) ("_position" v)))
###                 ("_position" i))
###               ("_position" u)))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" u))
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" verticesFrom)
###                   ("_cargs" ("_position" f) ("_position" v)))
###                 ("_applC" ("_position" Suc) ("_position" i))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  natToVertexListRec :: "nat => nat => face => nat list => nat option list"
consts
  natToVertexList :: "nat => face => nat list => nat option list"
### Ambiguous input (line 3534 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" i)
###           ("_applC" ("_position" set) ("_position" is))
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length)
###               ("_applC" ("_position" vertices) ("_position" f))))))
###       ("\<^const>Pure.all_binder" ("_position" a)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("_applC" ("_position" length)
###                 ("_applC" ("_position" vertices) ("_position" f)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" hideDupsRec)
###                 ("_cargs"
###                   ("_applC"
###                     ("\<^const>Nat.compower"
###                       ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a))
###                     ("_position" v))
###                   ("_listcompr"
###                     ("_applC"
###                       ("\<^const>Nat.compower"
###                         ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" k))
###                       ("_position" v))
###                     ("_lc_gen" ("_position" k) ("_position" is))
###                     ("_lc_end"))))
###               ("_applC" ("_position" natToVertexListRec)
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" f) ("_position" is))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" i)
###           ("_applC" ("_position" set) ("_position" is))
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length)
###               ("_applC" ("_position" vertices) ("_position" f))))))
###       ("\<^const>Pure.all_binder" ("_position" a)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("_applC" ("_position" length)
###                 ("_applC" ("_position" vertices) ("_position" f)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" hideDupsRec)
###                 ("_cargs"
###                   ("_applC"
###                     ("\<^const>Nat.compower"
###                       ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a))
###                     ("_position" v))
###                   ("_listcompr"
###                     ("_applC"
###                       ("\<^const>Nat.compower"
###                         ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" k))
###                       ("_position" v))
###                     ("_lc_gen" ("_position" k) ("_position" is))
###                     ("_lc_end"))))
###               ("_applC" ("_position" natToVertexListRec)
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" f) ("_position" is))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" i)
###           ("_applC" ("_position" set) ("_position" is))
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length)
###               ("_applC" ("_position" vertices) ("_position" f))))))
###       ("\<^const>Pure.all_binder" ("_position" a)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("_applC" ("_position" length)
###                 ("_applC" ("_position" vertices) ("_position" f)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" hideDupsRec)
###                 ("_cargs"
###                   ("_applC"
###                     ("\<^const>Nat.compower"
###                       ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a))
###                     ("_position" v))
###                   ("_listcompr"
###                     ("_applC"
###                       ("\<^const>Nat.compower"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_position" k))
###                       ("_position" v))
###                     ("_lc_gen" ("_position" k) ("_position" is))
###                     ("_lc_end"))))
###               ("_applC" ("_position" natToVertexListRec)
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" f) ("_position" is))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" i)
###           ("_applC" ("_position" set) ("_position" is))
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length)
###               ("_applC" ("_position" vertices) ("_position" f))))))
###       ("\<^const>Pure.all_binder" ("_position" a)
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Orderings.ord_class.less" ("_position" a)
###               ("_applC" ("_position" length)
###                 ("_applC" ("_position" vertices) ("_position" f)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" hideDupsRec)
###                 ("_cargs"
###                   ("_applC"
###                     ("\<^const>Nat.compower"
###                       ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a))
###                     ("_position" v))
###                   ("_listcompr"
###                     ("_applC"
###                       ("\<^const>Nat.compower"
###                         ("\<^const>Graph.nextVertex" ("_position" f))
###                         ("_position" k))
###                       ("_position" v))
###                     ("_lc_gen" ("_position" k) ("_position" is))
###                     ("_lc_end"))))
###               ("_applC" ("_position" natToVertexListRec)
###                 ("_cargs" ("_position" a)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("_position" f) ("_position" is))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3912 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invalidVertexList)
###     ("_cargs" ("_position" g) ("_cargs" ("_position" f) ("_position" vs))))
###   ("_Ex_less" ("_position" i)
###     ("\<^const>Groups.minus_class.minus"
###       ("\<^const>List.length" ("_position" vs))
###       ("\<^const>Groups.one_class.one"))
###     ("_case_syntax" ("\<^const>List.nth" ("_position" vs) ("_position" i))
###       ("_case2" ("_case1" ("_position" None) ("_position" False))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" Some) ("_position" a))
###             ("_case_syntax"
###               ("\<^const>List.nth" ("_position" vs)
###                 ("\<^const>Groups.plus_class.plus" ("_position" i)
###                   ("\<^const>Groups.one_class.one")))
###               ("_case1" ("_position" None) ("_position" False))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" b))
###             ("_applC" ("_position" is_duplicateEdge)
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" a) ("_position" b)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invalidVertexList)
###     ("_cargs" ("_position" g) ("_cargs" ("_position" f) ("_position" vs))))
###   ("_Ex_less" ("_position" i)
###     ("\<^const>Groups.minus_class.minus"
###       ("\<^const>List.length" ("_position" vs))
###       ("\<^const>Groups.one_class.one"))
###     ("_case_syntax" ("\<^const>List.nth" ("_position" vs) ("_position" i))
###       ("_case2" ("_case1" ("_position" None) ("_position" False))
###         ("_case1" ("_applC" ("_position" Some) ("_position" a))
###           ("_case_syntax"
###             ("\<^const>List.nth" ("_position" vs)
###               ("\<^const>Groups.plus_class.plus" ("_position" i)
###                 ("\<^const>Groups.one_class.one")))
###             ("_case2" ("_case1" ("_position" None) ("_position" False))
###               ("_case1" ("_applC" ("_position" Some) ("_position" b))
###                 ("_applC" ("_position" is_duplicateEdge)
###                   ("_cargs" ("_position" g)
###                     ("_cargs" ("_position" f)
###                       ("_cargs" ("_position" a) ("_position" b)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Rewrite rule not in simpset:
### [| ?v'3 : \<V> ?f3; pre_between (vertices ?f3) ?u3 ?v3 |]
### ==> between (vertices ?f3) ?u3 ?v3 =
###     between (verticesFrom ?f3 ?v'3) ?u3 ?v3 ==
###     True
### Rewrite rule not in simpset:
### [| ?v'1 : \<V> ?f1; pre_between (vertices ?f1) ?u1 ?v1 |]
### ==> between (vertices ?f1) ?u1 ?v1 ==
###     between (verticesFrom ?f1 ?v'1) ?u1 ?v1
### Ambiguous input (line 4879 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pre_subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" v')
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" n)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Some) ("_position" u))
###                   ("_position" vol)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v))
###             ("_position" u))
###           ("\<^const>HOL.not_equal" ("_position" n)
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" pre_splitFace)
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" v)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_position" f)
###                     ("\<^const>List.upt"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" countVertices)
###                           ("_position" g))
###                         ("_position" n)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pre_subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" v')
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" n)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Some) ("_position" u))
###                   ("_position" vol)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v))
###             ("_position" u))
###           ("\<^const>HOL.not_equal" ("_position" n)
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" pre_splitFace)
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" v)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_position" f)
###                     ("\<^const>List.upt"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("\<^const>Groups.plus_class.plus"
###                         ("_applC" ("_position" countVertices)
###                           ("_position" g))
###                         ("_position" n)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 4951 of "$AFP/Flyspeck-Tame/FaceDivisionProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pre_subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" v')
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" n)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Some) ("_position" u))
###                   ("_position" vol)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v))
###             ("_position" u))
###           ("\<^const>HOL.not_equal" ("_position" n)
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" f21)
###               ("_applC" ("_position" fst)
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" v)
###                         ("_cargs" ("_position" u)
###                           ("_cargs" ("_position" f)
###                             ("\<^const>List.upt"
###                               ("_applC" ("_position" countVertices)
###                                 ("_position" g))
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_applC" ("_position" countVertices)
###                                   ("_position" g))
###                                 ("_position" n))))))))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" g')
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" snd)
###                     ("_applC" ("_position" splitFace)
###                       ("_cargs" ("_position" g)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" u)
###                             ("_cargs" ("_position" f)
###                               ("\<^const>List.upt"
###                                 ("_applC" ("_position" countVertices)
###                                   ("_position" g))
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_applC" ("_position" countVertices)
###                                     ("_position" g))
###                                   ("_position" n))))))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" pre_subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f21)
###                     ("_cargs" ("_position" v')
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("\<^const>Groups.zero_class.zero")
###                           ("_position" vol))))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" pre_subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" v')
###             ("_cargs" ("_position" v)
###               ("_cargs" ("_position" n)
###                 ("\<^const>List.list.Cons"
###                   ("_applC" ("_position" Some) ("_position" u))
###                   ("_position" vol)))))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq"
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v))
###             ("_position" u))
###           ("\<^const>HOL.not_equal" ("_position" n)
###             ("\<^const>Groups.zero_class.zero"))))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" f21)
###               ("_applC" ("_position" fst)
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" v)
###                         ("_cargs" ("_position" u)
###                           ("_cargs" ("_position" f)
###                             ("\<^const>List.upt"
###                               ("_applC" ("_position" countVertices)
###                                 ("_position" g))
###                               ("\<^const>Groups.plus_class.plus"
###                                 ("_applC" ("_position" countVertices)
###                                   ("_position" g))
###                                 ("_position" n))))))))))))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" g')
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" snd)
###                     ("_applC" ("_position" splitFace)
###                       ("_cargs" ("_position" g)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" u)
###                             ("_cargs" ("_position" f)
###                               ("\<^const>List.upt"
###                                 ("_applC" ("_position" countVertices)
###                                   ("_position" g))
###                                 ("\<^const>Groups.plus_class.plus"
###                                   ("_applC" ("_position" countVertices)
###                                     ("_position" g))
###                                   ("_position" n))))))))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" pre_subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f21)
###                     ("_cargs" ("_position" v')
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("\<^const>Groups.zero_class.zero")
###                           ("_position" vol))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.FaceDivisionProps"
### 1.617s elapsed time, 2.783s cpu time, 1.229s GC time
Loading theory "Draft.Invariants" (required by "Draft.PlanePropsTemplates" via "Draft.PlaneProps")
### Ambiguous input (line 247 of "$AFP/Flyspeck-Tame/Invariants.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" f)
###         ("_applC" ("\<^const>Graph.Faces") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))
###           ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 254 of "$AFP/Flyspeck-Tame/Invariants.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))
###           ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 267 of "$AFP/Flyspeck-Tame/Invariants.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g)
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" v))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g)
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" v))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 289 of "$AFP/Flyspeck-Tame/Invariants.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" g)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" minGraphProps) ("_position" g)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" v)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" g))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" f)
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g) ("_position" v))))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" g)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 294 of "$AFP/Flyspeck-Tame/Invariants.thy") produces 12 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>Graph.nextFace"
###         ("_Bex" ("_position" f')
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g)
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" v)))))
###           ("_position" f')))
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_position" v)))
###     ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>Graph.nextFace"
###         ("_Bex" ("_position" f')
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" facesAt)
###               ("_cargs" ("_position" g)
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" v)))))
###           ("_position" f')))
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_position" v)))
###     ("_position" v)))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("\<^const>HOL.Trueprop"
###   ("_Bex" ("_position" f')
###     ("_applC" ("_position" set)
###       ("_applC" ("_position" facesAt)
###         ("_cargs" ("_position" g)
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f'))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Rewrite rule not in simpset:
### ?m1 <= ?n1 ==> ?m1 - ?n1 == 0
consts
  replacefacesAt2 ::
    "nat list => face => face list => face list list => face list list"
### theory "Draft.Invariants"
### 0.954s elapsed time, 2.019s cpu time, 1.463s GC time
Loading theory "Draft.PlaneProps" (required by "Draft.PlanePropsTemplates")
### Ignoring duplicate rewrite rule:
### ?i1 : {?l1..<?u1} == ?l1 <= ?i1 & ?i1 < ?u1
### theory "Draft.PlaneProps"
### 0.157s elapsed time, 0.203s cpu time, 0.062s GC time
Loading theory "Draft.PlanePropsTemplates"
val templateLemmas =
   [("PlaneProps.Seed_max_final_ex",
     "EX f:set (finals Seed\<^bsub>?p\<^esub>). |vertices f| = maxGon ?p",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0)))),
           t_empty)
         )),
    ("PlaneProps.next_plane0_nonfinals",
     "?g' : set (next_plane0\<^bsub>?p\<^esub> ?g) ==> nonFinals ?g ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("PlaneProps.next_plane0_finals_subset",
     "?g' : set (next_plane0\<^bsub>?p\<^esub> ?g) ==>
      set (finals ?g) <= set (finals ?g')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 2))))),
    ("PlaneProps.next_plane0_set_edges_subset",
     "[| minGraphProps ?g; ?g' : set (next_plane0\<^bsub>?p\<^esub> ?g) |]
      ==> \<E> ?g <= \<E> ?g'",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 2)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("PlaneProps.planeN4",
     "[| Invariants.inv ?g; ?f : \<F> ?g |] ==> 3 <= |vertices ?f|",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("PlaneProps.finalVertexI",
     "[| Invariants.inv ?g; final ?g; ?v : \<V> ?g |]
      ==> finalVertex ?g ?v",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("PlaneProps.next_plane0_vertices_subset",
     "[| ?g' : set (next_plane0\<^bsub>?p\<^esub> ?g); minGraphProps ?g |]
      ==> \<V> ?g <= \<V> ?g'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 2))))),
    ("PlaneProps.next_plane0_finals_incr",
     "[| ?g' : set (next_plane0\<^bsub>?p\<^esub> ?g);
         ?f : set (finals ?g) |]
      ==> ?f : set (finals ?g')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)))
           ))),
    ("PlaneProps.max_face_ex",
     "Seed\<^bsub>?p\<^esub> [next_plane0\<^bsub>?p\<^esub>]\<rightarrow>* ?g ==>
      EX f:set (finals ?g). |vertices f| = maxGon ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 1)),
                  template_var 0)),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0))),
             t_empty)
           ))),
    ("PlaneProps.setFinal_notin_finals",
     "[| ?f : \<F> ?g; ~ final ?f; minGraphProps ?g |]
      ==> setFinal ?f ~: set (finals ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 1, template_var 1)),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("PlaneProps.next_plane0_final_mono",
     "[| ?g' : set (next_plane0\<^bsub>?p\<^esub> ?g); ?f : \<F> ?g;
         final ?f |]
      ==> ?f : \<F> ?g'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 3)))
           ))),
    ("PlaneProps.step_outside2",
     "[| Invariants.inv ?g; ?g' : set (next_plane0\<^bsub>?p\<^esub> ?g);
         ~ final ?g' |]
      ==> |faces ?g'| ~= 2",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_var 2)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 1))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("PlaneProps.plane_final_facesAt",
     "[| Invariants.inv ?g; final ?g; ?v : \<V> ?g;
         ?f : set (facesAt ?g ?v) |]
      ==> final ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("PlaneProps.between_last",
     "[| distinct (vertices ?f); ?u : \<V> ?f |]
      ==> between (vertices ?f) ?u (last (verticesFrom ?f ?u)) =
          butlast (tl (verticesFrom ?f ?u))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app (template_hole 8, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 8, template_var 1)),
             template_var 0),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)))))),
    ("PlaneProps.set_finals_splitFace",
     "[| ?f : \<F> ?g; ~ final ?f |]
      ==> set (finals (snd (snd (splitFace ?g ?u ?v ?f ?vs)))) =
          set (finals ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 3)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 4))
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 3),
                         template_var 2),
                       template_var 1),
                     template_var 4),
                   template_var 0))))),
         template_app
          (template_hole 8,
           template_app (template_hole 3, template_var 3))))),
    ("PlaneProps.next_plane0_incr_except",
     "[| ?g' : set (next_plane0\<^bsub>?p\<^esub> ?g); Invariants.inv ?g;
         ?v : \<V> ?g |]
      ==> except ?g ?v <= except ?g' ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("PlaneProps.next_plane0_incr_degree",
     "[| ?g' : set (next_plane0\<^bsub>?p\<^esub> ?g); minGraphProps ?g;
         ?v : \<V> ?g |]
      ==> degree ?g ?v <= degree ?g' ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("PlaneProps.next_plane0_finalVertex_mono",
     "[| ?g' : set (next_plane0\<^bsub>?p\<^esub> ?g); Invariants.inv ?g;
         ?u : \<V> ?g; finalVertex ?g ?u |]
      ==> finalVertex ?g' ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 0)
           ))),
    ("PlaneProps.degree_eq",
     "[| Invariants.inv ?g; final ?g; ?v : \<V> ?g |]
      ==> degree ?g ?v = tri ?g ?v + quad ?g ?v + except ?g ?v",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("PlaneProps.next_plane0_finalVertex_facesAt_eq",
     "[| ?g' : set (next_plane0\<^bsub>?p\<^esub> ?g); Invariants.inv ?g;
         ?v : \<V> ?g; finalVertex ?g ?v |]
      ==> set (facesAt ?g' ?v) = set (facesAt ?g ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1)))
            ),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("PlaneProps.next_plane0_ex",
     "?g' : set (next_plane0\<^bsub>?p\<^esub> ?g) ==>
      EX f:set (nonFinals ?g).
         EX v:\<V> f.
            EX i:set [3..<Suc (maxGon ?p)].
               ?g' : set (generatePolygon i v f ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_hole 11,
                 template_app (template_hole 10, template_var 0))),
             t_empty)
           ))),
    ("PlaneProps.next_plane0_len_filter_eq",
     "[| ?g' : set (next_plane0\<^bsub>?p\<^esub> ?g); Invariants.inv ?g;
         ?v : \<V> ?g; finalVertex ?g ?v |]
      ==> |filter ?P (facesAt ?g' ?v)| = |filter ?P (facesAt ?g ?v)|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)))
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("PlaneProps.not_exceptional",
     "[| Invariants.inv ?g; final ?g; ?v : \<V> ?g;
         ?f : set (facesAt ?g ?v); ~ exceptionalVertex ?g ?v |]
      ==> |vertices ?f| <= 4",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 2)),
        template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)
                )
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 1, template_hole 0)))))),
    ("PlaneProps.next_plane0_incr_faceListAt",
     "[| ?g' : set (next_plane0\<^bsub>?p\<^esub> ?g); minGraphProps ?g |]
      ==> |faceListAt ?g| <= |faceListAt ?g'| &
          (ALL v<|faceListAt ?g|.
              |faceListAt ?g ! v| <= |faceListAt ?g' ! v|)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 0))),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 2)))),
             template_app (template_hole 4, t_empty))
           ))),
    ("PlaneProps.in_next_plane0I",
     "[| ?g' : set (generatePolygon ?n ?v ?f ?g); ?f : set (nonFinals ?g);
         ?v : \<V> ?f; 3 <= ?n; ?n < 4 + ?p |]
      ==> ?g' : set (next_plane0\<^bsub>?p\<^esub> ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 5),
              template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 14, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 2)))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 4),
        template_inequation
         (less_than, template_var 4,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_hole 6,
                template_app
                 (template_hole 1,
                  template_app (template_hole 1, template_hole 4)))),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 16, template_var 5),
             template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("PlaneProps.next_plane0_incr_finV",
     "[| ?g' : set (next_plane0\<^bsub>?p\<^esub> ?g); minGraphProps ?g |]
      ==> ALL v:\<V> ?g.
             v : \<V> ?g' &
             ((ALL f:\<F> ?g. v : \<V> f --> final f) -->
              (ALL f:\<F> ?g'. v : \<V> f --> f : \<F> ?g))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 12, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 0))),
             t_empty)
           ))),
    ("PlaneProps.dist_edges_subdivFace'",
     "[| pre_subdivFace' ?g ?f ?u ?v ?n ?ovs; minGraphProps ?g;
         ?f : \<F> ?g |]
      ==> subdivFace' ?g ?f ?v ?n ?ovs = makeFaceFinal ?f ?g |
          (ALL f':\<F> (subdivFace' ?g ?f ?v ?n ?ovs) - (\<F> ?g - {?f}).
              \<E> f' ~= \<E> ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 15, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 14, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 4),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 5)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 8, template_var 5),
                           template_var 4),
                         template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 7, template_var 4),
                   template_var 5))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 12,
                       template_app
                        (template_hole 11,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 8, template_var 5),
                                 template_var 4),
                               template_var 2),
                             template_var 1),
                           template_var 0)))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 12,
                         template_app (template_hole 11, template_var 5))),
                     template_app
                      (template_app (template_hole 4, template_var 4),
                       template_hole 3)))),
               t_empty))
           ))),
    ("PlaneProps.new_edge_subdivFace'",
     "[| pre_subdivFace' ?g ?f ?u ?v ?n ?ovs; minGraphProps ?g;
         ?f : \<F> ?g |]
      ==> subdivFace' ?g ?f ?v ?n ?ovs = makeFaceFinal ?f ?g |
          (ALL f':\<F> (subdivFace' ?g ?f ?v ?n ?ovs) - (\<F> ?g - {?f}).
              EX e:\<E> f'. e ~: \<E> ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 17, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 16, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 4),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 5)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 10, template_var 5),
                           template_var 4),
                         template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 9, template_var 4),
                   template_var 5))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 14,
                       template_app
                        (template_hole 13,
                         template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_app
                                  (template_hole 10, template_var 5),
                                 template_var 4),
                               template_var 2),
                             template_var 1),
                           template_var 0)))),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_hole 14,
                         template_app (template_hole 13, template_var 5))),
                     template_app
                      (template_app (template_hole 6, template_var 4),
                       template_hole 5)))),
               t_empty))
           ))),
    ("PlaneProps.final_subdivFace'",
     "[| minGraphProps ?g; pre_subdivFace' ?g ?f ?r ?u ?n ?ovs;
         ?f : \<F> ?g;
         ?ovs = [] --> ?n = 0 & ?u = last (verticesFrom ?f ?r) |]
      ==> EX f':set (finals (subdivFace' ?g ?f ?u ?n ?ovs)) -
                set (finals ?g).
             (?f\<^bsup>-1\<^esup> \<bullet> ?r, ?r) : \<E> f' &
             |vertices f'| =
             ?n + |?ovs| +
             (if ?r = ?u then 1 else |between (vertices ?f) ?r ?u| + 2)",
     template_implication
      ([template_predicate
         (template_app (template_hole 30, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 29, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 28, template_var 4),
              template_app
               (template_hole 27,
                template_app (template_hole 26, template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app (template_hole 24, template_var 0),
                  template_hole 23)),
              template_app
               (template_app
                 (template_hole 22,
                  template_app
                   (template_app (template_hole 21, template_var 1),
                    template_hole 20)),
                template_app
                 (template_app (template_hole 21, template_var 2),
                  template_app
                   (template_hole 19,
                    template_app
                     (template_app (template_hole 18, template_var 4),
                      template_var 3)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app
                  (template_hole 16,
                   template_app
                    (template_hole 27,
                     template_app
                      (template_hole 15,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 14, template_var 5),
                               template_var 4),
                             template_var 2),
                           template_var 1),
                         template_var 0)))),
                 template_app
                  (template_hole 27,
                   template_app (template_hole 15, template_var 5)))),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.PlanePropsTemplates"
### 0.421s elapsed time, 0.640s cpu time, 0.099s GC time
val it = (): unit
