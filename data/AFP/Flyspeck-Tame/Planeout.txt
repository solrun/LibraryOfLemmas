Loading theory "Draft.Quasi_Order" (required by "Draft.PlaneTemplates" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation" via "Draft.PlaneGraphIso")
Loading theory "Draft.ListAux" (required by "Draft.PlaneTemplates" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation")
Loading theory "Draft.RTranCl" (required by "Draft.PlaneTemplates" via "Draft.Plane")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PlaneTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
locale quasi_order
  fixes qle :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 60)
  assumes "quasi_order (\<preceq>)"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
Proofs for inductive predicate(s) "RTranClp"
  Proving monotonicity ...
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Quasi_Order"
### 0.100s elapsed time, 0.430s cpu time, 0.000s GC time
Loading theory "Draft.PlaneGraphIso" (required by "Draft.PlaneTemplates" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph" via "Draft.Rotation")
### Ambiguous input (line 130 of "$AFP/Flyspeck-Tame/ListAux.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Product_Type.Times" ("_position" as) ("_position" bs))
###   ("_concat" ("_position" a) ("_position" as)
###     ("_applC" ("_position" listProd1)
###       ("_cargs" ("_position" a) ("_position" bs)))))
### ("\<^const>Pure.eq" ("\<^fixed>listProd" ("_position" as) ("_position" bs))
###   ("_concat" ("_position" a) ("_position" as)
###     ("_applC" ("_position" listProd1)
###       ("_cargs" ("_position" a) ("_position" bs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/Flyspeck-Tame/ListAux.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set)
###       ("\<^const>ListAux.listProd" ("_position" xs) ("_position" ys)))
###     ("\<^const>Product_Type.Times"
###       ("_applC" ("_position" set) ("_position" xs))
###       ("_applC" ("_position" set) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set)
###       ("\<^const>Product_Type.Times" ("_position" xs) ("_position" ys)))
###     ("\<^const>Product_Type.Times"
###       ("_applC" ("_position" set) ("_position" xs))
###       ("_applC" ("_position" set) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### No equation for constructor "[]"
### theory "HOL-Library.Function_Algebras"
### 0.145s elapsed time, 0.586s cpu time, 0.043s GC time
Loading theory "Draft.IArray_Syntax" (required by "Draft.PlaneTemplates" via "Draft.Plane" via "Draft.Enumerator")
consts
  minimal :: "('a => nat) => 'a list => 'a"
### Ignoring duplicate safe introduction (intro!)
### EX y. ?x = Some y ==> ?x ~= None
### Ignoring duplicate safe elimination (elim!)
### [| ?x ~= None; EX y. ?x = Some y ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### ?x = None ==> ALL y. ?x ~= Some y
### Ignoring duplicate safe elimination (elim!)
### [| ALL y. ?x ~= Some y; ?x = None ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX y. ?x = Some y ==> ?x ~= None
### Ignoring duplicate safe elimination (elim!)
### [| ?x ~= None; EX y. ?x = Some y ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?x1 ~= None == EX y. ?x1 = Some y
### Ignoring duplicate safe introduction (intro!)
### ?x = None ==> ALL y. ?x ~= Some y
### Ignoring duplicate safe elimination (elim!)
### [| ALL y. ?x ~= Some y; ?x = None ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ALL y. ?x1 ~= Some y == ?x1 = None
### No equation for constructor "[]"
consts
  min_list :: "nat list => nat"
### theory "Draft.RTranCl"
### 0.162s elapsed time, 0.656s cpu time, 0.043s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PlaneTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
overloading
  congs \<equiv> pr_isomorphic :: 'a list => 'a list => bool
### No equation for constructor "[]"
consts
  max_list :: "nat list => nat"
consts
  replace :: "'a => 'a list => 'a list => 'a list"
consts
  mapAt :: "nat list => ('a => 'a) => 'a list => 'a list"
### theory "Draft.IArray_Syntax"
### 0.052s elapsed time, 0.208s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PlaneTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  pr_iso_test0 ::
    "('a => 'b option) => 'a list list => 'b list list => bool"
consts
  splitAtRec :: "'a => 'a list => 'a list => 'a list * 'a list"
consts
  pr_iso_test1 ::
    "('a => 'b option) => 'a list list => 'b list list => bool"
Found termination order: "size_list size <*mlex*> {}"
consts
  pr_iso_test2 ::
    "(('a * 'b) list => ('a * 'b) list => bool)
     => (('a * 'b) list => ('a * 'b) list => ('a * 'b) list)
        => ('a * 'b) list => 'a list list => 'b list list => bool"
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.836s cpu time, 0.087s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PlaneTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Ignoring duplicate rewrite rule:
### ?A1 - ?B1 <= ?A1 == True
### theory "HOL-Library.Nat_Bijection"
### 0.333s elapsed time, 1.317s cpu time, 0.167s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PlaneTemplates" via "Draft.ExtrEqs")
consts
  merge :: "('a * 'b) list => ('a * 'b) list => ('a * 'b) list"
consts
  pr_iso_test_rec ::
    "('a * 'b) list => 'a list list => 'b list list => bool"
### theory "Draft.PlaneGraphIso"
### 0.489s elapsed time, 1.917s cpu time, 0.267s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PlaneTemplates" via "Draft.ExtrEqs")
consts
  removeKeyList :: "'a list => ('a * 'b) list => ('a * 'b) list"
### theory "Draft.ListAux"
### 0.624s elapsed time, 2.457s cpu time, 0.310s GC time
Loading theory "Draft.Rotation" (required by "Draft.PlaneTemplates" via "Draft.Plane" via "Draft.Enumerator" via "Draft.Graph")
### theory "Draft.Rotation"
### 0.177s elapsed time, 0.700s cpu time, 0.078s GC time
Loading theory "Draft.Graph" (required by "Draft.PlaneTemplates" via "Draft.Plane" via "Draft.Enumerator")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.047s elapsed time, 4.006s cpu time, 0.862s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.943s elapsed time, 3.595s cpu time, 0.762s GC time
overloading
  final_face \<equiv> final :: face => bool
  type_face \<equiv> type :: face => facetype
  vertices_face \<equiv> vertices :: face => nat list
  cong_face \<equiv> pr_isomorphic :: face => face => bool
consts
  final_face :: "face => bool"
consts
  type_face :: "face => facetype"
consts
  vertices_face :: "face => nat list"
consts
  nextElem :: "'a list => 'a => 'a => 'a"
overloading
  edges_face \<equiv> edges :: face => (nat * nat) set
overloading
  op_vertices \<equiv> op :: nat list => nat list
overloading
  op_graph \<equiv> op :: face => face
consts
  op_graph :: "face => face"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  faces :: "graph => face list"
consts
  countVertices :: "graph => nat"
overloading
  vertices_graph \<equiv> vertices :: graph => nat list
consts
  vertices_graph :: "graph => nat list"
consts
  faceListAt :: "graph => face list list"
consts
  heights :: "graph => nat list"
overloading
  finalGraph \<equiv> final :: graph => bool
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
overloading
  edges_graph \<equiv> edges :: graph => (nat * nat) set
### Ambiguous input (line 257 of "$AFP/Flyspeck-Tame/Graph.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>nextFace" ("_position" p))
###   ("_lambda" ("_position" f)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_pattern" ("_position" g) ("_position" v))
###           ("_position" p))
###         ("_bind" ("_position" fs)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" v)))))
###       ("_case_syntax" ("_position" fs)
###         ("_case2" ("_case1" ("\<^const>List.list.Nil") ("_position" f))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" g) ("_position" gs))
###             ("_applC" ("_position" nextElem)
###               ("_cargs" ("_position" fs)
###                 ("_cargs" ("_applC" ("_position" hd) ("_position" fs))
###                   ("_position" f))))))))))
### ("\<^const>Pure.eq" ("\<^const>Graph.nextVertex" ("_position" p))
###   ("_lambda" ("_position" f)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_pattern" ("_position" g) ("_position" v))
###           ("_position" p))
###         ("_bind" ("_position" fs)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" v)))))
###       ("_case_syntax" ("_position" fs)
###         ("_case2" ("_case1" ("\<^const>List.list.Nil") ("_position" f))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" g) ("_position" gs))
###             ("_applC" ("_position" nextElem)
###               ("_cargs" ("_position" fs)
###                 ("_cargs" ("_applC" ("_position" hd) ("_position" fs))
###                   ("_position" f))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Graph"
### 1.272s elapsed time, 3.921s cpu time, 0.801s GC time
Loading theory "Draft.FaceDivision" (required by "Draft.PlaneTemplates" via "Draft.Plane")
Loading theory "Draft.Enumerator" (required by "Draft.PlaneTemplates" via "Draft.Plane")
### Ambiguous input (line 38 of "$AFP/Flyspeck-Tame/FaceDivision.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" splitFace)
###     ("_cargs" ("_position" g)
###       ("_cargs" ("_position" ram\<^sub>1)
###         ("_cargs" ("_position" ram\<^sub>2)
###           ("_cargs" ("_position" oldF) ("_position" newVs))))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" faces) ("_position" g)))
###       ("_binds"
###         ("_bind" ("_position" n)
###           ("_applC" ("_position" countVertices) ("_position" g)))
###         ("_binds"
###           ("_bind" ("_position" Fs)
###             ("_applC" ("_position" faceListAt) ("_position" g)))
###           ("_binds"
###             ("_bind" ("_position" h)
###               ("_applC" ("_position" heights) ("_position" g)))
###             ("_binds"
###               ("_bind" ("_position" vs\<^sub>1)
###                 ("_applC" ("_position" between)
###                   ("_cargs"
###                     ("_applC" ("_position" vertices) ("_position" oldF))
###                     ("_cargs" ("_position" ram\<^sub>1)
###                       ("_position" ram\<^sub>2)))))
###               ("_binds"
###                 ("_bind" ("_position" vs\<^sub>2)
###                   ("_applC" ("_position" between)
###                     ("_cargs"
###                       ("_applC" ("_position" vertices) ("_position" oldF))
###                       ("_cargs" ("_position" ram\<^sub>2)
###                         ("_position" ram\<^sub>1)))))
###                 ("_binds"
###                   ("_bind"
###                     ("_pattern" ("_position" f\<^sub>1)
###                       ("_position" f\<^sub>2))
###                     ("_applC" ("_position" split_face)
###                       ("_cargs" ("_position" oldF)
###                         ("_cargs" ("_position" ram\<^sub>1)
###                           ("_cargs" ("_position" ram\<^sub>2)
###                             ("_position" newVs))))))
###                   ("_binds"
###                     ("_bind" ("_position" Fs)
###                       ("_applC" ("_position" replacefacesAt)
###                         ("_cargs" ("_position" vs\<^sub>1)
###                           ("_cargs" ("_position" oldF)
###                             ("_cargs" ("_list" ("_position" f\<^sub>1))
###                               ("_position" Fs))))))
###                     ("_binds"
###                       ("_bind" ("_position" Fs)
###                         ("_applC" ("_position" replacefacesAt)
###                           ("_cargs" ("_position" vs\<^sub>2)
###                             ("_cargs" ("_position" oldF)
###                               ("_cargs" ("_list" ("_position" f\<^sub>2))
###                                 ("_position" Fs))))))
###                       ("_binds"
###                         ("_bind" ("_position" Fs)
###                           ("_applC" ("_position" replacefacesAt)
###                             ("_cargs" ("_list" ("_position" ram\<^sub>1))
###                               ("_cargs" ("_position" oldF)
###                                 ("_cargs"
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>2)
### ("_position" f\<^sub>1)))
###                                   ("_position" Fs))))))
###                         ("_binds"
###                           ("_bind" ("_position" Fs)
###                             ("_applC" ("_position" replacefacesAt)
###                               ("_cargs" ("_list" ("_position" ram\<^sub>2))
###                                 ("_cargs" ("_position" oldF)
###                                   ("_cargs"
###                                     ("_list"
### ("_args" ("_position" f\<^sub>1) ("_position" f\<^sub>2)))
###                                     ("_position" Fs))))))
###                           ("_bind" ("_position" Fs)
###                             ("\<^const>HOL.disj"
###                               ("\<^const>List.append" ("_position" Fs)
###                                 ("_position" replicate))
###                               ("\<^const>HOL.disj" ("_position" newVs)
###                                 ("_list"
###                                   ("_args" ("_position" f\<^sub>1)
###                                     ("_position" f\<^sub>2)))))))))))))))))
###     ("_tuple" ("_position" f\<^sub>1)
###       ("_tuple_args" ("_position" f\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" Graph)
###             ("_cargs"
###               ("\<^const>List.append"
###                 ("_applC" ("_position" replace)
###                   ("_cargs" ("_position" oldF)
###                     ("_cargs" ("_list" ("_position" f\<^sub>2))
###                       ("_position" fs))))
###                 ("_list" ("_position" f\<^sub>1)))
###               ("_cargs"
###                 ("\<^const>Groups.plus_class.plus" ("_position" n)
###                   ("\<^const>List.length" ("_position" newVs)))
###                 ("_cargs" ("_position" Fs)
###                   ("\<^const>List.append" ("_position" h)
###                     ("_applC" ("_position" heightsNewVertices)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" h)
###                           ("_position" ram\<^sub>1))
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" h)
###                             ("_position" ram\<^sub>2))
###                           ("\<^const>List.length"
###                             ("_position" newVs)))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" splitFace)
###     ("_cargs" ("_position" g)
###       ("_cargs" ("_position" ram\<^sub>1)
###         ("_cargs" ("_position" ram\<^sub>2)
###           ("_cargs" ("_position" oldF) ("_position" newVs))))))
###   ("_Let"
###     ("_binds"
###       ("_bind" ("_position" fs)
###         ("_applC" ("_position" faces) ("_position" g)))
###       ("_binds"
###         ("_bind" ("_position" n)
###           ("_applC" ("_position" countVertices) ("_position" g)))
###         ("_binds"
###           ("_bind" ("_position" Fs)
###             ("_applC" ("_position" faceListAt) ("_position" g)))
###           ("_binds"
###             ("_bind" ("_position" h)
###               ("_applC" ("_position" heights) ("_position" g)))
###             ("_binds"
###               ("_bind" ("_position" vs\<^sub>1)
###                 ("_applC" ("_position" between)
###                   ("_cargs"
###                     ("_applC" ("_position" vertices) ("_position" oldF))
###                     ("_cargs" ("_position" ram\<^sub>1)
###                       ("_position" ram\<^sub>2)))))
###               ("_binds"
###                 ("_bind" ("_position" vs\<^sub>2)
###                   ("_applC" ("_position" between)
###                     ("_cargs"
###                       ("_applC" ("_position" vertices) ("_position" oldF))
###                       ("_cargs" ("_position" ram\<^sub>2)
###                         ("_position" ram\<^sub>1)))))
###                 ("_binds"
###                   ("_bind"
###                     ("_pattern" ("_position" f\<^sub>1)
###                       ("_position" f\<^sub>2))
###                     ("_applC" ("_position" split_face)
###                       ("_cargs" ("_position" oldF)
###                         ("_cargs" ("_position" ram\<^sub>1)
###                           ("_cargs" ("_position" ram\<^sub>2)
###                             ("_position" newVs))))))
###                   ("_binds"
###                     ("_bind" ("_position" Fs)
###                       ("_applC" ("_position" replacefacesAt)
###                         ("_cargs" ("_position" vs\<^sub>1)
###                           ("_cargs" ("_position" oldF)
###                             ("_cargs" ("_list" ("_position" f\<^sub>1))
###                               ("_position" Fs))))))
###                     ("_binds"
###                       ("_bind" ("_position" Fs)
###                         ("_applC" ("_position" replacefacesAt)
###                           ("_cargs" ("_position" vs\<^sub>2)
###                             ("_cargs" ("_position" oldF)
###                               ("_cargs" ("_list" ("_position" f\<^sub>2))
###                                 ("_position" Fs))))))
###                       ("_binds"
###                         ("_bind" ("_position" Fs)
###                           ("_applC" ("_position" replacefacesAt)
###                             ("_cargs" ("_list" ("_position" ram\<^sub>1))
###                               ("_cargs" ("_position" oldF)
###                                 ("_cargs"
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>2)
### ("_position" f\<^sub>1)))
###                                   ("_position" Fs))))))
###                         ("_binds"
###                           ("_bind" ("_position" Fs)
###                             ("_applC" ("_position" replacefacesAt)
###                               ("_cargs" ("_list" ("_position" ram\<^sub>2))
###                                 ("_cargs" ("_position" oldF)
###                                   ("_cargs"
###                                     ("_list"
### ("_args" ("_position" f\<^sub>1) ("_position" f\<^sub>2)))
###                                     ("_position" Fs))))))
###                           ("_bind" ("_position" Fs)
###                             ("\<^const>List.append" ("_position" Fs)
###                               ("_applC" ("_position" replicate)
###                                 ("_cargs"
###                                   ("\<^const>List.length"
###                                     ("_position" newVs))
###                                   ("_list"
###                                     ("_args" ("_position" f\<^sub>1)
### ("_position" f\<^sub>2))))))))))))))))))
###     ("_tuple" ("_position" f\<^sub>1)
###       ("_tuple_args" ("_position" f\<^sub>2)
###         ("_tuple_arg"
###           ("_applC" ("_position" Graph)
###             ("_cargs"
###               ("\<^const>List.append"
###                 ("_applC" ("_position" replace)
###                   ("_cargs" ("_position" oldF)
###                     ("_cargs" ("_list" ("_position" f\<^sub>2))
###                       ("_position" fs))))
###                 ("_list" ("_position" f\<^sub>1)))
###               ("_cargs"
###                 ("\<^const>Groups.plus_class.plus" ("_position" n)
###                   ("\<^const>List.length" ("_position" newVs)))
###                 ("_cargs" ("_position" Fs)
###                   ("\<^const>List.append" ("_position" h)
###                     ("_applC" ("_position" heightsNewVertices)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" h)
###                           ("_position" ram\<^sub>1))
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" h)
###                             ("_position" ram\<^sub>2))
###                           ("\<^const>List.length"
###                             ("_position" newVs)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 60 of "$AFP/Flyspeck-Tame/FaceDivision.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" u)
###             ("_cargs" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" vo)
###                 ("_position" vos)))))))
###     ("_case_syntax" ("_position" vo)
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" subdivFace')
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_applC" ("_position" Suc) ("_position" n))
###                     ("_position" vos)))))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" u))
###                 ("_position" v))
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("_applC" ("_position" subdivFace')
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("\<^const>Groups.zero_class.zero")
###                       ("_position" vos))))))
###             ("_Let"
###               ("_binds"
###                 ("_bind" ("_position" ws)
###                   ("\<^const>List.upt"
###                     ("_applC" ("_position" countVertices) ("_position" g))
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("_position" n))))
###                 ("_bind"
###                   ("_pattern" ("_position" f\<^sub>1)
###                     ("_patterns" ("_position" f\<^sub>2) ("_position" g')))
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" f) ("_position" ws))))))))
###               ("_applC" ("_position" subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f\<^sub>2)
###                     ("_cargs" ("_position" v)
###                       ("_cargs" ("\<^const>Groups.zero_class.zero")
###                         ("_position" vos)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" subdivFace')
###       ("_cargs" ("_position" g)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" u)
###             ("_cargs" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" vo)
###                 ("_position" vos)))))))
###     ("_case_syntax" ("_position" vo)
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" subdivFace')
###             ("_cargs" ("_position" g)
###               ("_cargs" ("_position" f)
###                 ("_cargs" ("_position" u)
###                   ("_cargs" ("_applC" ("_position" Suc) ("_position" n))
###                     ("_position" vos)))))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("\<^const>HOL.If"
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" u))
###                 ("_position" v))
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("_applC" ("_position" subdivFace')
###               ("_cargs" ("_position" g)
###                 ("_cargs" ("_position" f)
###                   ("_cargs" ("_position" v)
###                     ("_cargs" ("\<^const>Groups.zero_class.zero")
###                       ("_position" vos))))))
###             ("_Let"
###               ("_binds"
###                 ("_bind" ("_position" ws)
###                   ("\<^const>List.upt"
###                     ("_applC" ("_position" countVertices) ("_position" g))
###                     ("\<^const>Groups.plus_class.plus"
###                       ("_applC" ("_position" countVertices) ("_position" g))
###                       ("_position" n))))
###                 ("_bind"
###                   ("_pattern" ("_position" f\<^sub>1)
###                     ("_patterns" ("_position" f\<^sub>2) ("_position" g')))
###                   ("_applC" ("_position" splitFace)
###                     ("_cargs" ("_position" g)
###                       ("_cargs" ("_position" u)
###                         ("_cargs" ("_position" v)
###                           ("_cargs" ("_position" f) ("_position" ws))))))))
###               ("_applC" ("_position" subdivFace')
###                 ("_cargs" ("_position" g')
###                   ("_cargs" ("_position" f\<^sub>2)
###                     ("_cargs" ("_position" v)
###                       ("_cargs" ("\<^const>Groups.zero_class.zero")
###                         ("_position" vos)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  subdivFace' :: "graph => face => nat => nat => nat option list => graph"
### theory "Draft.FaceDivision"
### 0.117s elapsed time, 0.361s cpu time, 0.037s GC time
Found termination order: "size <*mlex*> {}"
consts
  hideDupsRec :: "'a => 'a list => 'a option list"
consts
  hideDups :: "'a list => 'a option list"
### theory "Draft.Enumerator"
### 0.232s elapsed time, 0.592s cpu time, 0.037s GC time
Loading theory "Draft.Plane" (required by "Draft.PlaneTemplates")
### theory "HOL-Library.Tree"
### 1.954s elapsed time, 6.146s cpu time, 1.016s GC time
Loading theory "Draft.Templates" (required by "Draft.PlaneTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.159s cpu time, 0.046s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PlaneTemplates")
consts
  containsUnacceptableEdgeSnd ::
    "(nat => nat => bool) => nat => nat list => bool"
consts
  containsUnacceptableEdge :: "(nat => nat => bool) => nat list => bool"
### theory "Draft.Plane"
### 0.319s elapsed time, 0.653s cpu time, 0.046s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.500s elapsed time, 0.737s cpu time, 0.044s GC time
Loading theory "Draft.PlaneTemplates"
val templateLemmas =
   [("PlaneGraphIso.iso_fgraph_refl", "?g \<simeq> ?g",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("PlaneGraphIso.congs_refl", "?xs \<cong> ?xs",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Plane.Seed_not_final", "~ final Seed\<^bsub>?p\<^esub>",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("PlaneGraphIso.merge_conv_merge0", "merge ?I' ?I = merge0 ?I' ?I",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PlaneGraphIso.congs_sym", "?xs \<cong> ?ys ==> ?ys \<cong> ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("PlaneGraphIso.list_cong_rev_iff",
     "rev ?xs \<cong> rev ?ys = ?xs \<cong> ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("PlaneGraphIso.congs_length",
     "?F\<^sub>1 \<cong> ?F\<^sub>2 ==> |?F\<^sub>2| = |?F\<^sub>1|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("PlaneGraphIso.congs_pres_nodes",
     "?F\<^sub>1 \<cong> ?F\<^sub>2 ==> set ?F\<^sub>1 = set ?F\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("PlaneGraphIso.congs_distinct",
     "?F\<^sub>1 \<cong> ?F\<^sub>2 ==>
      distinct ?F\<^sub>2 = distinct ?F\<^sub>1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("PlaneGraphIso.pr_iso_test_rec_conv_2",
     "pr_iso_test_rec ?I ?Fs\<^sub>1 ?Fs\<^sub>2 =
      pr_iso_test2 PlaneGraphIso.compat merge0 ?I ?Fs\<^sub>1 ?Fs\<^sub>2",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("PlaneGraphIso.Collect_congs_eq_iff",
     "(Collect ((\<cong>) ?x) = Collect ((\<cong>) ?y)) = ?x \<cong> ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PlaneGraphIso.congs_map",
     "?F\<^sub>1 \<cong> ?F\<^sub>2 ==>
      map ?f ?F\<^sub>1 \<cong> map ?f ?F\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("PlaneGraphIso.iso_fgraph_trans",
     "[| ?f \<simeq> ?g; ?g \<simeq> ?h |] ==> ?f \<simeq> ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("PlaneGraphIso.congs_trans",
     "[| ?xs \<cong> ?ys; ?ys \<cong> ?zs |] ==> ?xs \<cong> ?zs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("PlaneGraphIso.is_pr_Hom_rev",
     "is_pr_Hom ?\<phi> ?A ?B ==> is_pr_Hom ?\<phi> (rev ` ?A) (rev ` ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("PlaneGraphIso.lem",
     "Ball (set ?xs) ?P ==> Ball (set (remove1 ?x ?xs)) ?P = True",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2))),
           template_var 1),
         template_hole 0))),
    ("PlaneGraphIso.singleton_list_cong_eq_iff",
     "({?xs} // {\<cong>} = {?ys} // {\<cong>}) = ?xs \<cong> ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_hole 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("PlaneGraphIso.UN_subset_iff",
     "(\<Union> (?f ` ?I) <= ?B) = (ALL i:?I. ?f i <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("PlaneGraphIso.test0_conv_test1",
     "[] ~: set ?Fs\<^sub>2 ==>
      pr_iso_test1 ?m ?Fs\<^sub>1 ?Fs\<^sub>2 =
      pr_iso_test0 ?m ?Fs\<^sub>1 ?Fs\<^sub>2",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("PlaneGraphIso.image_image_id_if",
     "(!!x. ?f (?f x) = x) ==> ?f ` ?f ` ?M = ?M",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("PlaneGraphIso.notin_range_map_of",
     "?y ~: snd ` set ?xys ==> Some ?y ~: range (map_of ?xys)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_app (template_hole 5, template_var 0)))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)),
                   template_hole 0))
               )
           ))),
    ("PlaneGraphIso.map_image_eq",
     "[| ?A <= dom ?m; ?m \<subseteq>\<^sub>m ?m' |]
      ==> ?m ` ?A = ?m' ` ?A",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("PlaneGraphIso.is_pr_Hom_trans",
     "[| is_pr_Hom ?f ?A ?B; is_pr_Hom ?g ?B ?C |]
      ==> is_pr_Hom (?g o ?f) ?A ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 4)),
               template_var 3),
             template_var 0)
           ))),
    ("PlaneGraphIso.inj_on_map_of_zip",
     "[| |?xs| = |?ys|; distinct ?ys |]
      ==> inj_on (map_of (zip ?xs ?ys)) (set ?xs)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("PlaneGraphIso.map_compatI",
     "[| ?f \<subseteq>\<^sub>m Some o ?h;
         ?g \<subseteq>\<^sub>m Some o ?h |]
      ==> ?f \<subseteq>\<^sub>m ?f ++ ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("PlaneGraphIso.congs_map_eq_iff",
     "inj_on ?f (set ?xs Un set ?ys) ==>
      map ?f ?xs \<cong> map ?f ?ys = ?xs \<cong> ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1)),
                template_app (template_hole 4, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("PlaneGraphIso.pr_Hom_pres_nodes",
     "is_pr_Hom ?\<phi> ?Fs\<^sub>1 ?Fs\<^sub>2 ==>
      ?\<phi> ` \<Union> (set ` ?Fs\<^sub>1) =
      \<Union> (set ` ?Fs\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 2),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty), template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("PlaneGraphIso.map_of_zip_eq_SomeD",
     "[| |?xs| = |?ys|; map_of (zip ?xs ?ys) ?x = Some ?y |]
      ==> ?y : set ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 3),
          template_app (template_hole 6, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2)),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("PlaneGraphIso.pr_iso_same_no_nodes",
     "is_pr_iso ?\<phi> ?Fs\<^sub>1 ?Fs\<^sub>2 ==>
      card (\<Union> (set ` set ?Fs\<^sub>1)) =
      card (\<Union> (set ` set ?Fs\<^sub>2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, t_empty),
               template_app (template_hole 5, template_var 1)))),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_hole 0, template_var 0))))))),
    ("PlaneGraphIso.inj_on_map_upd",
     "[| inj_on ?m (dom ?m); Some ?y ~: range ?m |]
      ==> inj_on (?m(?x |-> ?y)) (dom ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 1)),
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_hole 1))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_app (template_hole 3, template_var 1))),
             template_app (template_hole 6, template_var 2))
           ))),
    ("PlaneGraphIso.inj_on_map_addI1",
     "[| inj_on ?m ?A; ?m \<subseteq>\<^sub>m ?m ++ ?m'; ?A <= dom ?m |]
      ==> inj_on (?m ++ ?m') ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 0))
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("PlaneGraphIso.map_upd_submap",
     "?x ~: dom ?m ==>
      (?m(?x |-> ?y) \<subseteq>\<^sub>m ?m') =
      (?m' ?x = Some ?y & ?m \<subseteq>\<^sub>m ?m')",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app (template_hole 6, template_var 2))
                )
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 3),
                    template_app (template_hole 2, template_var 1))),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 0, template_var 3)),
                   template_app (template_hole 2, template_var 1))),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0))
             )))),
    ("PlaneGraphIso.pr_Hom_pres_face_nodes",
     "is_pr_Hom ?\<phi> ?Fs\<^sub>1 ?Fs\<^sub>2 ==>
      (UN F:?Fs\<^sub>1. {?\<phi> ` set F}) = (UN F:?Fs\<^sub>2. {set F})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, t_empty), template_var 1)),
         template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("PlaneGraphIso.pr_Iso_same_no_nodes",
     "[| is_pr_Iso ?\<phi> ?Fs\<^sub>1 ?Fs\<^sub>2; finite ?Fs\<^sub>1 |]
      ==> card (\<Union> (set ` ?Fs\<^sub>1)) =
          card (\<Union> (set ` ?Fs\<^sub>2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, t_empty), template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty),
               template_var 0)))))),
    ("PlaneGraphIso.map_of_zip_submap",
     "[| |?xs| = |?ys|; distinct ?xs |]
      ==> (map_of (zip ?xs ?ys) \<subseteq>\<^sub>m Some o ?f) =
          (map ?f ?xs = ?ys)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 2),
          template_app (template_hole 9, template_var 1)),
        template_predicate
         (template_app (template_hole 8, template_var 2))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1))),
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 0))
              )],
         template_equation
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1)))),
    ("PlaneGraphIso.is_Hom_distinct",
     "[| is_pr_Hom ?\<phi> ?Fs\<^sub>1 ?Fs\<^sub>2;
         ALL F:?Fs\<^sub>1. distinct F; ALL F:?Fs\<^sub>2. distinct F |]
      ==> ALL F:?Fs\<^sub>1. distinct (map ?\<phi> F)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1), t_empty)
           ))),
    ("PlaneGraphIso.help1",
     "distinct (map fst ?xys) ==>
      map_of (filter ?P ?xys) =
      map_of ?xys |` {x. EX y. (x, y) : set ?xys & ?P (x, y)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_hole 10),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 8, template_var 1)),
           template_app (template_hole 5, t_empty))))),
    ("PlaneGraphIso.image_map_of_conv_Image",
     "distinct (map fst ?xys) ==>
      map_of ?xys ` ?A =
      Some ` set ?xys `` ?A Un
      (if ?A <= fst ` set ?xys then {} else {None})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app (template_hole 11, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 1)),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_app (template_hole 3, template_hole 14),
                     template_app (template_hole 6, template_var 1)))),
               template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 2)))))),
    ("PlaneGraphIso.image_map_upd",
     "?x ~: dom ?m ==>
      ?m(?x |-> ?y) ` ?A =
      ?m ` (?A - {?x}) Un (if ?x : ?A then {Some ?y} else {})",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 12, template_var 3),
                  template_app (template_hole 11, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_app (template_hole 8, template_var 2),
                 template_var 3),
               template_app (template_hole 7, template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 9, template_var 2),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_hole 3)))),
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 12, template_var 3),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 7, template_var 1)),
                 template_hole 0)),
             template_hole 0))))),
    ("PlaneGraphIso.compat_correct",
     "[| oneone ?I; oneone ?I' |]
      ==> PlaneGraphIso.compat ?I' ?I =
          (let m = map_of ?I; m' = map_of ?I'
           in m \<subseteq>\<^sub>m m ++ m' &
              inj_on (m ++ m') (dom (m ++ m')))",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           t_empty)))),
    ("PlaneGraphIso.pr_iso_same_no_faces",
     "[| distinct ?Fs\<^sub>1; distinct ?Fs\<^sub>2;
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>1);
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>2);
         is_pr_iso ?\<phi> ?Fs\<^sub>1 ?Fs\<^sub>2 |]
      ==> |?Fs\<^sub>1| = |?Fs\<^sub>2|",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, t_empty),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, t_empty),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 0),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("PlaneGraphIso.inj_on_map_add_Un",
     "[| inj_on ?m (dom ?m); inj_on ?m' (dom ?m');
         ?m \<subseteq>\<^sub>m Some o ?f;
         ?m' \<subseteq>\<^sub>m Some o ?f; inj_on ?f (dom ?m' Un dom ?m);
         ?A = dom ?m'; ?B = dom ?m |]
      ==> inj_on (?m ++ ?m') (?A Un ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app (template_hole 7, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 7, template_var 3)),
                template_app (template_hole 7, template_var 4)))
            ),
        template_equation
         (template_var 1, template_app (template_hole 7, template_var 3)),
        template_equation
         (template_var 0, template_app (template_hole 7, template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))
           ))),
    ("PlaneGraphIso.pr_iso_test0_corr",
     "[| ALL F:set ?Fs\<^sub>1. distinct F;
         ALL F:set ?Fs\<^sub>2. distinct F; distinct ?Fs\<^sub>1;
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>1);
         distinct ?Fs\<^sub>2;
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>2) |]
      ==> pr_iso_test0 Map.empty ?Fs\<^sub>1 ?Fs\<^sub>2 =
          (EX \<phi>. is_pr_iso \<phi> ?Fs\<^sub>1 ?Fs\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app (template_hole 21, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app (template_hole 18, template_var 0)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, t_empty),
              template_app (template_hole 21, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, t_empty),
              template_app (template_hole 18, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty), template_var 1),
           template_var 0),
         template_app (template_hole 1, t_empty)))),
    ("PlaneGraphIso.iso_correct",
     "[| ALL F:set ?Fs\<^sub>1. distinct F;
         ALL F:set ?Fs\<^sub>2. distinct F; [] ~: set ?Fs\<^sub>2;
         distinct ?Fs\<^sub>1;
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>1);
         distinct ?Fs\<^sub>2;
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>2) |]
      ==> iso_test ?Fs\<^sub>1 ?Fs\<^sub>2 =
          ?Fs\<^sub>1 \<simeq> ?Fs\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 0)),
              t_empty)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_hole 9),
                  template_app (template_hole 13, template_var 0))
                )
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty),
              template_app (template_hole 13, template_var 1))
            ),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty),
              template_app (template_hole 13, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("PlaneGraphIso.pr_iso_test_correct",
     "[| ALL F:set ?Fs\<^sub>1. distinct F;
         ALL F:set ?Fs\<^sub>2. distinct F; [] ~: set ?Fs\<^sub>2;
         distinct ?Fs\<^sub>1;
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>1);
         distinct ?Fs\<^sub>2;
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>2) |]
      ==> pr_iso_test ?Fs\<^sub>1 ?Fs\<^sub>2 =
          (EX \<phi>. is_pr_iso \<phi> ?Fs\<^sub>1 ?Fs\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app (template_hole 23, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app (template_hole 20, template_var 0)),
              t_empty)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 17, template_hole 16),
                  template_app (template_hole 20, template_var 0))
                )
            ),
        template_predicate
         (template_app (template_hole 15, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, t_empty),
              template_app (template_hole 23, template_var 1))
            ),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, t_empty),
              template_app (template_hole 20, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app (template_hole 1, t_empty)))),
    ("PlaneGraphIso.pr_iso_test_rec_corr",
     "[| ALL F:set ?Fs\<^sub>1. distinct F;
         ALL F:set ?Fs\<^sub>2. distinct F; [] ~: set ?Fs\<^sub>2;
         distinct ?Fs\<^sub>1;
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>1);
         distinct ?Fs\<^sub>2;
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>2) |]
      ==> pr_iso_test_rec [] ?Fs\<^sub>1 ?Fs\<^sub>2 =
          (EX \<phi>. is_pr_iso \<phi> ?Fs\<^sub>1 ?Fs\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app (template_hole 24, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app (template_hole 21, template_var 0)),
              t_empty)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 18, template_hole 17),
                  template_app (template_hole 21, template_var 0))
                )
            ),
        template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, t_empty),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, t_empty),
              template_app (template_hole 21, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1),
           template_var 0),
         template_app (template_hole 1, t_empty)))),
    ("PlaneGraphIso.pr_iso_test1_corr",
     "[| ALL F:set ?Fs\<^sub>1. distinct F;
         ALL F:set ?Fs\<^sub>2. distinct F; [] ~: set ?Fs\<^sub>2;
         distinct ?Fs\<^sub>1;
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>1);
         distinct ?Fs\<^sub>2;
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>2) |]
      ==> pr_iso_test1 Map.empty ?Fs\<^sub>1 ?Fs\<^sub>2 =
          (EX \<phi>. is_pr_iso \<phi> ?Fs\<^sub>1 ?Fs\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app (template_hole 24, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app (template_hole 21, template_var 0)),
              t_empty)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 18, template_hole 17),
                  template_app (template_hole 21, template_var 0))
                )
            ),
        template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, t_empty),
              template_app (template_hole 24, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, t_empty),
              template_app (template_hole 21, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, t_empty), template_var 1),
           template_var 0),
         template_app (template_hole 1, t_empty)))),
    ("PlaneGraphIso.pr_iso_test2_corr",
     "[| ALL F:set ?Fs\<^sub>1. distinct F;
         ALL F:set ?Fs\<^sub>2. distinct F; [] ~: set ?Fs\<^sub>2;
         distinct ?Fs\<^sub>1;
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>1);
         distinct ?Fs\<^sub>2;
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>2) |]
      ==> pr_iso_test2 PlaneGraphIso.compat merge0 [] ?Fs\<^sub>1
           ?Fs\<^sub>2 =
          (EX \<phi>. is_pr_iso \<phi> ?Fs\<^sub>1 ?Fs\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 27,
                template_app (template_hole 26, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app (template_hole 23, template_var 0)),
              t_empty)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 20, template_hole 19),
                  template_app (template_hole 23, template_var 0))
                )
            ),
        template_predicate
         (template_app (template_hole 18, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, t_empty),
              template_app (template_hole 26, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, t_empty),
              template_app (template_hole 23, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_hole 3),
               template_hole 2),
             template_var 1),
           template_var 0),
         template_app (template_hole 1, t_empty)))),
    ("PlaneGraphIso.is_pr_Iso_rec",
     "[| inj_on (%xs. {xs} // {\<cong>}) ?Fs\<^sub>1;
         inj_on (%xs. {xs} // {\<cong>}) ?Fs\<^sub>2;
         ?F\<^sub>1 : ?Fs\<^sub>1 |]
      ==> is_pr_Iso ?\<phi> ?Fs\<^sub>1 ?Fs\<^sub>2 =
          (EX F\<^sub>2:?Fs\<^sub>2.
              |?F\<^sub>1| = |F\<^sub>2| &
              is_pr_Iso ?\<phi> (?Fs\<^sub>1 - {?F\<^sub>1})
               (?Fs\<^sub>2 - {F\<^sub>2}) &
              (EX n. map ?\<phi> ?F\<^sub>1 = rotate n F\<^sub>2) &
              inj_on ?\<phi> (\<Union> (set ` ?Fs\<^sub>1)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 27, t_empty), template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, t_empty), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 15, template_var 0),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 14, template_var 2), t_empty)))),
    ("PlaneGraphIso.is_iso_Cons",
     "[| distinct (?F\<^sub>1 # ?Fs\<^sub>1'); distinct ?Fs\<^sub>2;
         inj_on (%xs. {xs} // {\<cong>}) (set (?F\<^sub>1 # ?Fs\<^sub>1'));
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>2) |]
      ==> is_pr_iso ?\<phi> (?F\<^sub>1 # ?Fs\<^sub>1') ?Fs\<^sub>2 =
          (EX F\<^sub>2:set ?Fs\<^sub>2.
              |?F\<^sub>1| = |F\<^sub>2| &
              is_pr_iso ?\<phi> ?Fs\<^sub>1'
               (remove1 F\<^sub>2 ?Fs\<^sub>2) &
              (EX n. map ?\<phi> ?F\<^sub>1 = rotate n F\<^sub>2) &
              inj_on ?\<phi>
               (set ?F\<^sub>1 Un \<Union> (set ` set ?Fs\<^sub>1')))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 31,
              template_app
               (template_app (template_hole 30, template_var 3),
                template_var 2))
            ),
        template_predicate
         (template_app (template_hole 29, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 28, t_empty),
              template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 30, template_var 3),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, t_empty),
              template_app (template_hole 17, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 15, template_var 0),
             template_app
              (template_app (template_hole 30, template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 14,
             template_app (template_hole 17, template_var 1)),
           t_empty)))),
    ("PlaneGraphIso.pr_iso_test0_correct",
     "[| ALL F:set ?Fs\<^sub>1. distinct F;
         ALL F:set ?Fs\<^sub>2. distinct F; distinct ?Fs\<^sub>1;
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>1);
         distinct ?Fs\<^sub>2;
         inj_on (%xs. {xs} // {\<cong>}) (set ?Fs\<^sub>2);
         inj_on ?m (dom ?m) |]
      ==> pr_iso_test0 ?m ?Fs\<^sub>1 ?Fs\<^sub>2 =
          (EX \<phi>.
              is_pr_iso \<phi> ?Fs\<^sub>1 ?Fs\<^sub>2 &
              ?m \<subseteq>\<^sub>m Some o \<phi> &
              inj_on \<phi> (dom ?m Un \<Union> (set ` set ?Fs\<^sub>1)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 32,
                template_app (template_hole 31, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 29,
                template_app (template_hole 28, template_var 1)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 26, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 25, t_empty),
              template_app (template_hole 31, template_var 2))
            ),
        template_predicate
         (template_app (template_hole 20, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, t_empty),
              template_app (template_hole 28, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_app (template_hole 13, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 11, template_var 0),
             template_var 2),
           template_var 1),
         template_app (template_hole 10, t_empty)))),
    ("PlaneGraphIso.pr_iso_test2_conv_1",
     "[| ALL I I'.
            oneone I -->
            oneone I' -->
            ?tst I' I =
            (let m = map_of I; m' = map_of I'
             in m \<subseteq>\<^sub>m m ++ m' &
                inj_on (m ++ m') (dom (m ++ m')));
         ALL I I'.
            oneone I -->
            oneone I' -->
            ?tst I' I --> map_of (?mrg I' I) = map_of I ++ map_of I';
         ALL I I'.
            oneone I & oneone I' --> ?tst I' I --> oneone (?mrg I' I);
         oneone ?I; ALL F:set ?Fs\<^sub>1. distinct F;
         ALL F:set ?Fs\<^sub>2. distinct F |]
      ==> pr_iso_test2 ?tst ?mrg ?I ?Fs\<^sub>1 ?Fs\<^sub>2 =
          pr_iso_test1 (map_of ?I) ?Fs\<^sub>1 ?Fs\<^sub>2",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 14, template_var 2)),
             template_var 1),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.PlaneTemplates"
### 0.376s elapsed time, 0.513s cpu time, 0.047s GC time
val it = (): unit
