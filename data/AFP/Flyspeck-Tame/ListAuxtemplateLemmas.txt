   [("ListAux.conj_aci", "(?A & ?A) = ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("ListAux.removeKey_empty", "removeKey ?a [] = []",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("ListAux.removeKeyList_empty", "removeKeyList ?ps [] = []",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("ListAux.conj_aci", "(?P & ?Q) = (?Q & ?P)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("ListAux.splitAt_1", "splitAt ?ram [] = ([], [])",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app
        (template_app (template_hole 0, template_hole 1),
         template_hole 1))),
    ("ListAux.length_removeKey", "|removeKey ?w ?ps| <= |?ps|",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("ListAux.length_removeKeyList", "|removeKeyList ?ws ?ps| <= |?ps|",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("ListAux.removeKey_subset", "set (removeKey ?a ?ps) <= set ?ps",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("ListAux.removeKeyList_subset",
     "set (removeKeyList ?ws ?ps) <= set ?ps",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("ListAux.length_mapAt", "|mapAt ?vs ?f ?xs| = |?xs|",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("ListAux.replace_id", "replace ?x [?x] ?xs = ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("ListAux.splitAt_simpA", "fst (splitAt ?ram (?ram # ?b)) = []",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_hole 0)),
    ("ListAux.splitAt_simpE", "snd (splitAt ?ram (?ram # ?b)) = ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_var 0)),
    ("ListAux.notin_removeKey1", "(?a, ?b) ~: set (removeKey ?a ?ps)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)))
             )
         )),
    ("ListAux.conj_aci", "(?A & ?A & ?B) = (?A & ?B)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ListAux.rotate_Suc2", "rotate ?n (rotate1 ?xs) = rotate (Suc ?n) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("ListAux.splitAt_distinct_fst_aux",
     "distinct ?vs ==> distinct (fst (splitAt ?ram ?vs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("ListAux.splitAt_distinct_fst",
     "distinct ?vs ==> distinct (fst (splitAt ?ram1.0 ?vs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("ListAux.splitAt_distinct_snd_aux",
     "distinct ?vs ==> distinct (snd (splitAt ?ram ?vs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("ListAux.splitAt_distinct_snd",
     "distinct ?vs ==> distinct (snd (splitAt ?ram1.0 ?vs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("ListAux.length_replace1", "|replace ?x [?y] ?xs| = |?xs|",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)),
       template_app (template_hole 3, template_var 0))),
    ("ListAux.plus_length1", "rotate (?k + |?ls|) ?ls = rotate ?k ?ls",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("ListAux.plus_length2", "rotate (|?ls| + ?k) ?ls = rotate ?k ?ls",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_var 1),
       template_app
        (template_app (template_hole 2, template_var 0), template_var 1))),
    ("ListAux.rotate_conv_mod'",
     "rotate (?n mod |?ls|) ?ls = rotate ?n ?ls",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("ListAux.nth_rotate1_0", "?ls ! 0 = rotate1 ?ls ! (|?ls| - 1)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("ListAux.conj_aci", "(?P & ?Q & ?R) = (?Q & ?P & ?R)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ListAux.conj_aci", "((?P & ?Q) & ?R) = (?P & ?Q & ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ListAux.help''''",
     "snd (splitAtRec ?ram ?xs ?b) = snd (splitAtRec ?ram ?ys ?b)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 1)))),
    ("ListAux.splitAt_distinct_ram_fst",
     "distinct ?vs ==> ?ram ~: set (fst (splitAt ?ram ?vs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 1))))
               )
           ))),
    ("ListAux.splitAt_distinct_ram_snd",
     "distinct ?vs ==> ?ram ~: set (snd (splitAt ?ram ?vs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 1))))
               )
           ))),
    ("ListAux.minimal_in_set", "?xs ~= [] ==> minimal ?f ?xs : set ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("ListAux.max_list_conv_Max",
     "?xs ~= [] ==> max_list ?xs = Max (set ?xs)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("ListAux.min_list_conv_Min",
     "?xs ~= [] ==> ListAux.min_list ?xs = Min (set ?xs)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("ListAux.filter_prop", "?x : set (filter ?P ?ys) ==> ?P ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, t_empty), template_var 0)))
            )],
       template_predicate (template_app (template_var 1, template_var 2)))),
    ("ListAux.help'''",
     "fst (splitAtRec ?ram ?xs ?b) = ?xs @ fst (splitAtRec ?ram [] ?b)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 0),
             template_var 0))))),
    ("ListAux.rotate_id",
     "rotate (|?ls| - ?n mod |?ls|) (rotate ?n ?ls) = ?ls",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 1, template_var 1)))),
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1)),
       template_var 1)),
    ("ListAux.drop_last_in", "?n < |?ls| ==> last ?ls : set (drop ?n ?ls)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("ListAux.replace2", "?f' ~: set ?ls ==> replace ?f' ?fs ?ls = ?ls",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1),
         template_var 1))),
    ("ListAux.splitAt_in_fst",
     "?v : set (fst (splitAt ?ram ?vs)) ==> ?v : set ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 0))
           ))),
    ("ListAux.splitAt_in_snd",
     "?v : set (snd (splitAt ?ram ?vs)) ==> ?v : set ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 0))
           ))),
    ("ListAux.inbetween_inset",
     "?x : set (between ?xs ?a ?b) ==> ?x : set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_hole 1,
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app (template_hole 1, template_var 2))
           ))),
    ("ListAux.len_replace_ge_same",
     "1 <= |?ys| ==> |?xs| <= |replace ?x ?ys ?xs|",
     template_implication
      ([template_inequation
         (less_equals, template_hole 2,
          template_app (template_hole 1, template_var 2))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1))))),
    ("ListAux.splitAt_no_ram",
     "?ram ~: set ?vs ==> splitAt ?ram ?vs = (?vs, [])",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app (template_hole 4, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("ListAux.isTable_eq", "isTable ?E ?vs ((?a, ?b) # ?ps) ==> ?b = ?E ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_equation
        (template_var 1, template_app (template_var 4, template_var 2)))),
    ("ListAux.isTable_Cons",
     "isTable ?E ?vs ((?a, ?b) # ?ps) ==> isTable ?E ?vs ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_var 0)
           ))),
    ("ListAux.splitAt_not1",
     "?v ~: set ?vs ==> ?v ~: set (fst (splitAt ?ram ?vs))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 1))))
               )
           ))),
    ("ListAux.notinset_notinbetween",
     "?x ~: set ?xs ==> ?x ~: set (between ?xs ?a ?b)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app (template_hole 1, template_var 2))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1),
                     template_var 0)))
               )
           ))),
    ("ListAux.splitAt_distinct_a",
     "[| distinct ?vs; (?a, ?b) = splitAt ?ram ?vs |] ==> distinct ?a",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 3))],
       template_predicate
        (template_app (template_hole 3, template_var 2)))),
    ("ListAux.splitAt_distinct_b",
     "[| distinct ?vs; (?a, ?b) = splitAt ?ram ?vs |] ==> distinct ?b",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 3))],
       template_predicate
        (template_app (template_hole 3, template_var 1)))),
    ("ListAux.filter_compl1",
     "(filter ?P ?xs = []) = (filter (%x. ~ ?P x) ?xs = ?xs)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 0),
         template_hole 1),
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 0),
         template_var 0))),
    ("ListAux.removeKeyList_eq",
     "removeKeyList ?as ?ps = filter (%p. ALL a:set ?as. a ~= fst p) ?ps",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 5, t_empty), template_var 0))),
    ("ListAux.pairD", "(?a, ?b) = ?p ==> ?a = fst ?p & ?b = snd ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("ListAux.nth_rotate1_Suc",
     "Suc ?n < |?ls| ==> ?ls ! Suc ?n = rotate1 ?ls ! ?n",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 4, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("ListAux.filter_emptyE",
     "[| filter ?P ?xs = []; ?x : set ?xs |] ==> ~ ?P ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_hole 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_negation
        (
           template_predicate
            (template_app (template_var 2, template_var 0))
           ))),
    ("ListAux.filter_comm",
     "filter (%x. ?P x & ?Q x) ?xs = filter (%x. ?Q x & ?P x) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("ListAux.splitAt_distinct",
     "distinct ?vs ==>
      set (fst (splitAt ?ram ?vs)) Int set (snd (splitAt ?ram ?vs)) = {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1)))),
           template_app
            (template_hole 4,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)))),
         template_hole 0))),
    ("ListAux.splitAt_simpD'",
     "?a ~= ?ram ==> snd (splitAt ?ram (?a # ?b)) = snd (splitAt ?ram ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("ListAux.splitAt_simpD",
     "?ram ~= ?a ==> snd (splitAt ?ram (?a # ?b)) = snd (splitAt ?ram ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("ListAux.splitAtRec_notRam",
     "?ram ~: set ?vs ==> splitAtRec ?ram ?us ?vs = (?us @ ?vs, [])",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_hole 0)))),
    ("ListAux.set_help",
     "?v : set (?as @ ?bs) ==> ?v : set ?as | ?v : set ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app (template_hole 2, template_var 1))),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 2, template_var 0)))
           ))),
    ("ListAux.isTable_subset",
     "[| set ?qs <= set ?ps; isTable ?E ?vs ?ps |] ==> isTable ?E ?vs ?qs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 3)
           ))),
    ("ListAux.filter_True_eq1",
     "[| |filter ?P ?xs| = |?xs|; ?y : set ?xs |] ==> ?P ?y",
     template_implication
      ([template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)),
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate (template_app (template_var 2, template_var 0)))),
    ("ListAux.splitAt_simpF",
     "?ram ~: set ?a ==>
      snd (splitAt ?ram (?a @ ?b)) = snd (splitAt ?ram ?b)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 4, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("ListAux.rotate_inv2",
     "rotate ?n ?ls = ?ms ==> ?ls = rotate (|?ls| - ?n mod |?ls|) ?ms",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_var 1,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app (template_hole 1, template_var 1)))),
           template_var 0)))),
    ("ListAux.replace5",
     "?f : set (replace ?oldF ?newfs ?fs) ==>
      ?f : set ?fs | ?f : set ?newfs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app (template_hole 2, template_var 1)))
           ))),
    ("ListAux.splitAt_distinct_ab_aux",
     "[| distinct ?vs; (?a, ?b) = splitAt ?ram ?vs |]
      ==> distinct ?a & distinct ?b",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 4, template_var 2)),
             template_app (template_hole 4, template_var 1))
           ))),
    ("ListAux.fst_splitAt_last",
     "[| ?xs ~= []; distinct ?xs |]
      ==> fst (splitAt (last ?xs) ?xs) = butlast ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("ListAux.splitAt_simpB'",
     "?a ~= ?ram ==>
      fst (splitAt ?ram (?a # ?b)) = ?a # fst (splitAt ?ram ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))))),
    ("ListAux.splitAt_simpB",
     "?ram ~= ?a ==>
      fst (splitAt ?ram (?a # ?b)) = ?a # fst (splitAt ?ram ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("ListAux.help'''_in",
     "?ram : set ?b ==>
      fst (splitAtRec ?ram ?xs ?b) = ?xs @ fst (splitAtRec ?ram [] ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 0),
               template_var 1)))))),
    ("ListAux.splitAt_ram",
     "?ram : set ?vs ==>
      ?vs = fst (splitAt ?ram ?vs) @ ?ram # snd (splitAt ?ram ?vs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))))))),
    ("ListAux.replace4",
     "[| ?f : set ?ls; ?oldF ~= ?f |] ==> ?f : set (replace ?oldF ?fs ?ls)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            ),
        template_negation
         (template_equation (template_var 1, template_var 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)))
           ))),
    ("ListAux.replace3",
     "[| ?f' : set ?ls; ?f : set ?fs |] ==> ?f : set (replace ?f' ?fs ?ls)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app (template_hole 1, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0),
                 template_var 2)))
           ))),
    ("ListAux.removeKeyList_cons",
     "removeKeyList ?ws (?p # ?ps) =
      (if fst ?p : set ?ws then removeKeyList ?ws ?ps
       else ?p # removeKeyList ?ws ?ps)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 2))),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 0))))),
    ("ListAux.splitAt_conv",
     "splitAt ?x ?xs =
      (takeWhile (%y. y ~= ?x) ?xs, tl (dropWhile (%y. y ~= ?x) ?xs))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("ListAux.splitAt_simpC",
     "?ram ~: set ?a ==>
      fst (splitAt ?ram (?a @ ?b)) = ?a @ fst (splitAt ?ram ?b)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 4, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("ListAux.help'''_notin",
     "?ram ~: set ?b ==>
      fst (splitAtRec ?ram ?xs ?b) = ?xs @ fst (splitAtRec ?ram [] ?b)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 0),
               template_var 1)))))),
    ("ListAux.splitAt_subset",
     "(?a, ?b) = splitAt ?ram ?vs ==>
      set ?a <= set ?vs & set ?b <= set ?vs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 3)),
                 template_app (template_hole 0, template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("ListAux.splitAt_take",
     "[| distinct ?ls; ?i < |?ls| |]
      ==> fst (splitAt (?ls ! ?i) ?ls) = take ?i ?ls",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("ListAux.splitAt_dist_ram",
     "[| distinct ?vs; ?vs = ?a @ ?ram # ?b |]
      ==> (?a, ?b) = splitAt ?ram ?vs",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 3)))),
    ("ListAux.splitAt_distinct_ab",
     "[| distinct ?vs; (?a, ?b) = splitAt ?ram ?vs |]
      ==> set ?a Int set ?b = {}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 4, template_var 0),
            template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("ListAux.distinct_split1",
     "[| distinct ?xs; ?xs = ?y @ [?r] @ ?z |] ==> ?r ~: set ?y",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)),
              template_var 0)))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 2))
               )
           ))),
    ("ListAux.distinct_split2",
     "[| distinct ?xs; ?xs = ?y @ [?r] @ ?z |] ==> ?r ~: set ?z",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)),
              template_var 0)))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("ListAux.fst_splitAt_upt",
     "[| ?j <= ?i; ?i < ?k |] ==> fst (splitAt ?i [?j..<?k]) = [?j..<?i]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("ListAux.replace1",
     "[| ?f : set (replace ?f' ?fs ?ls); ?f ~: set ?ls |] ==> ?f : set ?fs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app (template_hole 2, template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app (template_hole 2, template_var 1))
           ))),
    ("ListAux.nth_rotate1",
     "0 < |?ls| ==>
      ?ls ! (Suc ?n mod |?ls|) = rotate1 ?ls ! (?n mod |?ls|)",
     template_implication
      ([template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 5, template_var 1))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 5, template_var 1)))))),
    ("ListAux.splitAt_drop",
     "[| distinct ?ls; ?i < |?ls| |]
      ==> snd (splitAt (?ls ! ?i) ?ls) = drop (Suc ?i) ?ls",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("ListAux.distinct_unique1",
     "[| distinct ?vs; ?ram : set ?vs |]
      ==> EX! s. ?vs = fst s @ ?ram # snd s",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("ListAux.distinct_hd_not_cons",
     "[| distinct ?vs; EX as bs. ?vs = as @ ?x # hd ?vs # bs |] ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_hole 0))),
    ("ListAux.fst_splitAt_rev",
     "[| distinct ?xs; ?x : set ?xs |]
      ==> fst (splitAt ?x (rev ?xs)) = rev (snd (splitAt ?x ?xs))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)))))),
    ("ListAux.snd_splitAt_rev",
     "[| distinct ?xs; ?x : set ?xs |]
      ==> snd (splitAt ?x (rev ?xs)) = rev (fst (splitAt ?x ?xs))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)))))),
    ("ListAux.rotate_inv1",
     "[| ?n < |?ls|; rotate ?n ?ls = ?ms |]
      ==> ?ls = rotate (|?ls| - ?n) ?ms",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_var 1,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 3, template_var 1)),
               template_var 2)),
           template_var 0)))),
    ("ListAux.len_replace_ge",
     "[| 1 <= |?ys|; |?zs| <= |?xs| |] ==> |?zs| <= |replace ?x ?ys ?xs|",
     template_implication
      ([template_inequation
         (less_equals, template_hole 3,
          template_app (template_hole 2, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3),
             template_var 1))))),
    ("ListAux.set_between_id",
     "[| distinct ?xs; ?x : set ?xs |]
      ==> set (between ?xs ?x ?x) = set ?xs - {?x}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 5, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("ListAux.snd_splitAt_upt",
     "[| ?j <= ?i; ?i < ?k |]
      ==> snd (splitAt ?i [?j..<?k]) = [?i + 1..<?k]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)))),
    ("ListAux.splitAt_split",
     "[| ?ram : set ?vs; (?a, ?b) = splitAt ?ram ?vs |]
      ==> ?vs = ?a @ ?ram # ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 2))
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_var 2))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("ListAux.splitAtRec_conv",
     "splitAtRec ?x ?bs ?xs =
      (?bs @ takeWhile (%y. y ~= ?x) ?xs,
       tl (dropWhile (%y. y ~= ?x) ?xs))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 4, t_empty), template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("ListAux.nth_rotate",
     "0 < |?ls| ==>
      ?ls ! ((?n + ?m) mod |?ls|) = rotate ?m ?ls ! (?n mod |?ls|)",
     template_implication
      ([template_inequation
         (less_than, template_hole 6,
          template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 5, template_var 2))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 5, template_var 2)))))),
    ("ListAux.length3D", "|?xs| = 3 ==> EX x y z. ?xs = [x, y, z]",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 0),
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("ListAux.splitAt_dist_ram10",
     "[| distinct ?vs; ?vs = ?a @ ?ram1.0 # ?b @ ?ram2.0 # ?c |]
      ==> ?a = fst (splitAt ?ram1.0 ?vs)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 5)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 3, template_var 4),
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))))],
       template_equation
        (template_var 4,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 5))))),
    ("ListAux.splitAt_dist_ram20",
     "[| distinct ?vs; ?vs = ?a @ ?ram1.0 # ?b @ ?ram2.0 # ?c |]
      ==> ?c = snd (splitAt ?ram2.0 ?vs)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 5)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 3, template_var 4),
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))))],
       template_equation
        (template_var 0,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 5))))),
    ("ListAux.replace_replace",
     "[| ?oldf ~: set ?newfs; distinct ?xs |]
      ==> replace ?oldf ?newfs (replace ?oldf ?newfs ?xs) =
          replace ?oldf ?newfs ?xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))
                )
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("ListAux.nth_last_Suc_n",
     "[| distinct ?ls; ?n < |?ls|; last ?ls = ?ls ! ?n |]
      ==> Suc ?n = |?ls|",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_var 1)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0),
         template_app (template_hole 5, template_var 1)))),
    ("ListAux.splitAtRec_distinct_fst",
     "[| distinct ?vs; distinct ?s; set ?s Int set ?vs = {} |]
      ==> distinct (fst (splitAtRec ?ram1.0 ?s ?vs))",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            template_app (template_hole 3, template_var 2)),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1),
                 template_var 2)))
           ))),
    ("ListAux.splitAtRec_distinct_snd",
     "[| distinct ?vs; distinct ?s; set ?s Int set ?vs = {} |]
      ==> distinct (snd (splitAtRec ?ram1.0 ?s ?vs))",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            template_app (template_hole 3, template_var 2)),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1),
                 template_var 2)))
           ))),
    ("ListAux.replace_append",
     "replace ?x ?ys (?as @ ?bs) =
      (if ?x : set ?as then replace ?x ?ys ?as @ ?bs
       else ?as @ replace ?x ?ys ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app (template_hole 0, template_var 1))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 0))))),
    ("ListAux.filter_replace2",
     "[| ~ ?P ?x; ALL y:set ?ys. ~ ?P y |]
      ==> filter ?P (replace ?x ?ys ?xs) = filter ?P ?xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0)))),
    ("ListAux.rotate_minus1'",
     "[| 0 < ?n; rotate ?n ?ls = ?ms |]
      ==> rotate (?n - 1) ?ls = rotate (|?ms| - 1) ?ms",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 1)),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 0)),
               template_hole 1)),
           template_var 0)))),
    ("ListAux.splitAt_simp1",
     "[| ?ram ~: set ?a; ?ram ~: set ?b |]
      ==> fst (splitAt ?ram (?a @ ?ram # ?b)) = ?a",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_app (template_hole 5, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))),
         template_var 1))),
    ("ListAux.distinct_replace",
     "[| distinct ?fs; distinct ?newFs; set ?fs Int set ?newFs <= {?oldF} |]
      ==> distinct (replace ?oldF ?newFs ?fs)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 2)),
            template_app (template_hole 3, template_var 1)),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_hole 1))],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 2))
           ))),
    ("ListAux.dist_at1",
     "[| distinct ?vs; ?vs = ?a @ ?r # ?b; ?vs = ?c @ ?r # ?d |]
      ==> ?a = ?c",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 5)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 1, template_var 4),
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 2))),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)))],
       template_equation (template_var 4, template_var 1))),
    ("ListAux.dist_at2",
     "[| distinct ?vs; ?vs = ?a @ ?r # ?b; ?vs = ?c @ ?r # ?d |]
      ==> ?b = ?d",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 5)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 1, template_var 4),
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 2))),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)))],
       template_equation (template_var 2, template_var 0))),
    ("ListAux.distinct_set_replace",
     "distinct ?xs ==>
      set (replace ?x ?ys ?xs) =
      (if ?x : set ?xs then set ?xs - {?x} Un set ?ys else set ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 2))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app (template_hole 7, template_var 2))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 7, template_var 2)),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_hole 0))),
               template_app (template_hole 7, template_var 0))),
           template_app (template_hole 7, template_var 2))))),
    ("ListAux.filter_simp",
     "(!!x. x : set ?xs ==> ?P x) ==>
      filter (%x. ?P x & ?Q x) ?xs = filter ?Q ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty), template_var 2),
         template_app
          (template_app (template_hole 1, t_empty), template_var 2)))),
    ("ListAux.filter_eqI",
     "(!!v. v : set ?vs ==> ?P v = ?Q v) ==> filter ?P ?vs = filter ?Q ?vs",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, t_empty), template_var 2),
         template_app
          (template_app (template_hole 0, t_empty), template_var 2)))),
    ("ListAux.splitAt_dist_ram11",
     "[| distinct ?vs; ?vs = ?a @ ?ram1.0 # ?b @ ?ram2.0 # ?c |]
      ==> (?a, []) = splitAt ?ram2.0 (fst (splitAt ?ram1.0 ?vs))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 5)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)))))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 4), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 5)))))),
    ("ListAux.splitAt_dist_ram21",
     "[| distinct ?vs; ?vs = ?a @ ?ram1.0 # ?b @ ?ram2.0 # ?c |]
      ==> (?a, ?b) = splitAt ?ram1.0 (fst (splitAt ?ram2.0 ?vs))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 5)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 5, template_var 4),
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 5)))))),
    ("ListAux.splitAt_dist_ram12",
     "[| distinct ?vs; ?vs = ?a @ ?ram1.0 # ?b @ ?ram2.0 # ?c |]
      ==> (?b, ?c) = splitAt ?ram2.0 (snd (splitAt ?ram1.0 ?vs))",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 5)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 5, template_var 4),
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 5)))))),
    ("ListAux.splitAt_dist_ram22",
     "[| distinct ?vs; ?vs = ?a @ ?ram1.0 # ?b @ ?ram2.0 # ?c |]
      ==> (?c, []) = splitAt ?ram1.0 (snd (splitAt ?ram2.0 ?vs))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 5)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)))))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 5)))))),
    ("ListAux.splitAtRec_ram",
     "[| ?ram : set ?vs; (?a, ?b) = splitAtRec ?ram ?us ?vs |]
      ==> ?us @ ?vs = ?a @ [?ram] @ ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app (template_hole 7, template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 0),
            template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_hole 0)),
             template_var 1))))),
    ("ListAux.length4D", "|?xs| = 4 ==> EX a b c d. ?xs = [a, b, c, d]",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 0),
          template_app
           (template_hole 6,
            template_app
             (template_hole 5,
              template_app (template_hole 5, template_hole 4))))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("ListAux.splitAt_dist_ram1",
     "[| distinct ?vs; ?vs = ?a @ ?ram1.0 # ?b @ ?ram2.0 # ?c |]
      ==> (?a, ?b @ ?ram2.0 # ?c) = splitAt ?ram1.0 ?vs",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 5)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 4, template_var 4),
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 5)))),
    ("ListAux.splitAt_dist_ram2",
     "[| distinct ?vs; ?vs = ?a @ ?ram1.0 # ?b @ ?ram2.0 # ?c |]
      ==> (?a @ ?ram1.0 # ?b, ?c) = splitAt ?ram2.0 ?vs",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 5)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 4, template_var 4),
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2))),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 5)))),
    ("ListAux.splitAt_2",
     "[| ?v : set ?vs; (?a, ?b) = splitAt ?ram ?vs |]
      ==> ?v : set ?a | ?v : set ?b | ?v = ?ram",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app (template_hole 5, template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_app (template_hole 5, template_var 2))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 6, template_var 4),
                   template_app (template_hole 5, template_var 1))),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0)))
           ))),
    ("ListAux.length_filter_replace1",
     "[| ?x : set ?xs; ~ ?P ?x |]
      ==> |filter ?P (replace ?x ?ys ?xs)| =
          |filter ?P ?xs| + |filter ?P ?ys|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_var 1, template_var 3))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0),
               template_var 2))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)))))),
    ("ListAux.splitAtRec_union",
     "(?a, ?b) = splitAtRec ?ram ?s ?vs ==>
      set ?a Un set ?b - {?ram} = set ?vs Un set ?s - {?ram}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 4), template_var 3),
          template_app
           (template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 4)),
               template_app (template_hole 2, template_var 3))),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_app (template_hole 2, template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0))))),
    ("ListAux.length_filter_replace2",
     "[| ?x : set ?xs; ?P ?x |]
      ==> |filter ?P (replace ?x ?ys ?xs)| =
          |filter ?P ?xs| + |filter ?P ?ys| - 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate (template_app (template_var 1, template_var 3))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 0),
               template_var 2))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2))),
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)))),
           template_hole 0)))),
    ("ListAux.replace_distinct",
     "[| distinct ?fs; distinct ?newfs;
         ?oldf : set ?fs --> set ?newfs Int set ?fs <= {?oldf} |]
      ==> distinct (replace ?oldf ?newfs ?fs)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_app (template_hole 5, template_var 2))),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 5, template_var 1)),
                    template_app (template_hole 5, template_var 2))),
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1)))
            )],
       template_predicate
        (
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 2))
           ))),
    ("ListAux.dist_at",
     "[| distinct ?vs; ?vs = ?a @ ?r # ?b; ?vs = ?c @ ?r # ?d |]
      ==> ?a = ?c & ?b = ?d",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 5)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 2, template_var 4),
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2))),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("ListAux.rotate_minus1",
     "[| 0 < ?n; 0 < ?m; rotate ?n ?ls = rotate ?m ?ms |]
      ==> rotate (?n - 1) ?ls = rotate (?m - 1) ?ms",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 3),
        template_inequation (less_than, template_hole 4, template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_hole 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0)),
           template_var 0)))),
    ("ListAux.splitAtRec_distinct",
     "[| distinct ?vs; distinct ?s; set ?s Int set ?vs = {} |]
      ==> set (fst (splitAtRec ?ram ?s ?vs)) Int
          set (snd (splitAtRec ?ram ?s ?vs)) =
          {}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1)),
            template_app (template_hole 4, template_var 2)),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 1),
                   template_var 2)))),
           template_app
            (template_hole 4,
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1),
                 template_var 2)))),
         template_hole 3))),
    ("ListAux.splitAt_rotate_pair_conv",
     "[| distinct ?xs; ?x : set ?xs |]
      ==> snd (splitAt ?x (rotate ?n ?xs)) @
          fst (splitAt ?x (rotate ?n ?xs)) =
          snd (splitAt ?x ?xs) @ fst (splitAt ?x ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2)))),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)))))),
    ("ListAux.splitAt_elements",
     "[| ?ram1.0 : set ?vs; ?ram2.0 : set ?vs |]
      ==> ?ram2.0 : set (fst (splitAt ?ram1.0 ?vs)) |
          ?ram2.0 : set [?ram1.0] |
          ?ram2.0 : set (snd (splitAt ?ram1.0 ?vs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1))))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_hole 1)))),
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1))))))
           ))),
    ("ListAux.local_help'",
     "[| ?a @ ?r # ?b = ?c @ ?r # ?d; ?r ~: set ?a; ?r ~: set ?b |]
      ==> ?a = ?c & ?b = ?d",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4),
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 0))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app (template_hole 1, template_var 4))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app (template_hole 1, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 0))
           ))),
    ("ListAux.local_help1",
     "[| ?vs = ?c @ ?r # ?d; ?vs = ?a @ ?r # ?b; ?r ~: set ?a;
         ?r ~: set ?b |]
      ==> ?a = ?c",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 4, template_var 4),
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2))),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 0))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_app (template_hole 0, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_app (template_hole 0, template_var 0))
                )
            )],
       template_equation (template_var 1, template_var 4))),
    ("ListAux.splitAt_ram3",
     "[| ?ram2.0 ~: set (fst (splitAt ?ram1.0 ?vs)); ?ram1.0 : set ?vs;
         ?ram2.0 : set ?vs; ?ram1.0 ~= ?ram2.0 |]
      ==> ?ram2.0 : set (snd (splitAt ?ram1.0 ?vs))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 1),
                        template_var 0))))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 0))
            ),
        template_negation
         (template_equation (template_var 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_hole 4,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))))
           ))),
    ("ListAux.replace6",
     "distinct ?oldfs ==>
      (?x : set (replace ?oldF ?newfs ?oldfs)) =
      ((?x ~= ?oldF | ?oldF : set ?newfs) &
       (?oldF : set ?oldfs & ?x : set ?newfs | ?x : set ?oldfs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 3))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 6, template_var 2),
                template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_app (template_hole 4, template_var 1),
                      template_var 0),
                    template_var 3)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 1))),
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_app (template_hole 5, template_var 0)))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 6, template_var 1),
                         template_app (template_hole 5, template_var 3))),
                     template_app
                      (template_app (template_hole 6, template_var 2),
                       template_app (template_hole 5, template_var 0)))),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app (template_hole 5, template_var 3))))
             )))),
    ("ListAux.local_help",
     "[| ?vs = ?a @ ?r # ?b; ?vs = ?c @ ?r # ?d; ?r ~: set ?a;
         ?r ~: set ?b |]
      ==> ?a = ?c & ?b = ?d",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 5, template_var 4),
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2))),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 0))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app (template_hole 1, template_var 4))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app (template_hole 1, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 0))
           ))),
    ("ListAux.split_between",
     "[| distinct ?vs; ?r : set ?vs; ?v : set ?vs;
         ?u : set (between ?vs ?r ?v) |]
      ==> between ?vs ?r ?v =
          (if ?r = ?u then [] else between ?vs ?r ?u @ [?u]) @
          between ?vs ?u ?v",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_var 1)))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 0)),
                     template_hole 1),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app (template_hole 6, template_var 3),
                           template_var 2),
                         template_var 0)),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_hole 1)))),
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 0),
                 template_var 1))
             )))),
    ("ListAux.splitAt_dist_ram_all",
     "[| distinct ?vs; ?vs = ?a @ ?ram1.0 # ?b @ ?ram2.0 # ?c |]
      ==> (?a, ?b) = splitAt ?ram1.0 (fst (splitAt ?ram2.0 ?vs)) &
          (?c, []) = splitAt ?ram1.0 (snd (splitAt ?ram2.0 ?vs)) &
          (?a, []) = splitAt ?ram2.0 (fst (splitAt ?ram1.0 ?vs)) &
          (?b, ?c) = splitAt ?ram2.0 (snd (splitAt ?ram1.0 ?vs)) &
          ?c = snd (splitAt ?ram2.0 ?vs) & ?a = fst (splitAt ?ram1.0 ?vs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 5)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 8, template_var 4),
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 4),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 5))))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 1)),
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app
                      (template_hole 0,
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_var 5))))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 4),
                         template_hole 1)),
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 3, template_var 3),
                           template_var 5))))),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_var 2),
                           template_var 0)),
                       template_app
                        (template_app (template_hole 3, template_var 1),
                         template_app
                          (template_hole 0,
                           template_app
                            (template_app (template_hole 3, template_var 3),
                             template_var 5))))),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 9, template_var 0),
                         template_app
                          (template_hole 0,
                           template_app
                            (template_app (template_hole 3, template_var 1),
                             template_var 5)))),
                     template_app
                      (template_app (template_hole 9, template_var 4),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 3, template_var 3),
                           template_var 5))))))))
           )))]
