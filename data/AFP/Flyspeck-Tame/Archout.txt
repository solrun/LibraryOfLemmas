Loading theory "Draft.Arch" (required by "Draft.ArchTemplates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ArchTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ArchTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ArchTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.526s cpu time, 0.064s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ArchTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.246s elapsed time, 0.992s cpu time, 0.064s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ArchTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.345s elapsed time, 1.382s cpu time, 0.214s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ArchTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.222s elapsed time, 4.676s cpu time, 1.881s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.336s elapsed time, 4.999s cpu time, 2.014s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.780s elapsed time, 9.130s cpu time, 3.966s GC time
Loading theory "Draft.Templates" (required by "Draft.ArchTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.109s elapsed time, 0.315s cpu time, 0.201s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ArchTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 1.186s elapsed time, 3.435s cpu time, 2.333s GC time
### theory "Draft.Arch"
### 9.035s elapsed time, 27.777s cpu time, 19.622s GC time
Loading theory "Draft.ArchTemplates"
val templateLemmas =
   [("Archimedean_Field.frac_lt_1", "frac ?x < (1::?'a)",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 0),
       template_hole 0)),
    ("Archimedean_Field.frac_ge_0", "(0::?'a) <= frac ?x",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.frac_of_int", "frac (of_int ?z) = (0::?'a)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Archimedean_Field.ceiling_of_int", "\<lceil>of_int ?z\<rceil> = ?z",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Archimedean_Field.floor_of_int", "\<lfloor>of_int ?z\<rfloor> = ?z",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Archimedean_Field.round_of_int", "round (of_int ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Archimedean_Field.le_of_int_ceiling",
     "?x <= of_int \<lceil>?x\<rceil>",
     template_inequation
      (less_equals, template_var 0,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.of_int_floor_le",
     "of_int \<lfloor>?x\<rfloor> <= ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Archimedean_Field.floor_le_ceiling",
     "\<lfloor>?x\<rfloor> <= \<lceil>?x\<rceil>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.floor_le_round", "\<lfloor>?x\<rfloor> <= round ?x",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.ceiling_ge_round", "round ?x <= \<lceil>?x\<rceil>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.ex_less_of_int", "EX z. ?x < of_int z",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Archimedean_Field.ex_of_int_less", "EX z. of_int z < ?x",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Archimedean_Field.reals_Archimedean2", "EX n. ?x < of_nat n",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Archimedean_Field.real_arch_simple", "EX n. ?x <= of_nat n",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Archimedean_Field.frac_frac", "frac (frac ?x) = frac ?x",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.ceiling_of_nat",
     "\<lceil>of_nat ?n\<rceil> = int ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.ceiling_numeral",
     "\<lceil>numeral ?v\<rceil> = numeral ?v",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.floor_of_nat",
     "\<lfloor>of_nat ?n\<rfloor> = int ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.floor_numeral",
     "\<lfloor>numeral ?v\<rfloor> = numeral ?v",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.round_of_nat", "round (of_nat ?n) = int ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.round_numeral", "round (numeral ?n) = numeral ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.of_nat_ceiling",
     "?r <= of_nat (nat \<lceil>?r\<rceil>)",
     template_inequation
      (less_equals, template_var 0,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Archimedean_Field.frac_1_eq", "frac (?x + (1::?'a)) = frac ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app (template_hole 2, template_var 0))),
    ("Archimedean_Field.ceiling_minus",
     "\<lceil>- ?x\<rceil> = - \<lfloor>?x\<rfloor>",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.floor_minus",
     "\<lfloor>- ?x\<rfloor> = - \<lceil>?x\<rceil>",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.floor_uminus_of_int",
     "\<lfloor>- of_int ?z\<rfloor> = - ?z",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Archimedean_Field.ceiling_diff_floor_le_1",
     "\<lceil>?x\<rceil> - \<lfloor>?x\<rfloor> <= 1",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Archimedean_Field.ceiling_neg_numeral",
     "\<lceil>- numeral ?v\<rceil> = - numeral ?v",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.floor_neg_numeral",
     "\<lfloor>- numeral ?v\<rfloor> = - numeral ?v",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.round_neg_numeral",
     "round (- numeral ?n) = - numeral ?n",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.frac_eq_0_iff",
     "(frac ?x = (0::?'a)) = (?x : \<int>)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Archimedean_Field.one_less_ceiling",
     "(1 < \<lceil>?x\<rceil>) = ((1::?'a) < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Archimedean_Field.zero_less_ceiling",
     "(0 < \<lceil>?x\<rceil>) = ((0::?'a) < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Archimedean_Field.zero_less_floor",
     "(0 < \<lfloor>?x\<rfloor>) = ((1::?'a) <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Archimedean_Field.ceiling_less_one",
     "(\<lceil>?x\<rceil> < 1) = (?x <= (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Archimedean_Field.floor_less_one",
     "(\<lfloor>?x\<rfloor> < 1) = (?x < (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Archimedean_Field.floor_less_zero",
     "(\<lfloor>?x\<rfloor> < 0) = (?x < (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Archimedean_Field.one_le_ceiling",
     "(1 <= \<lceil>?x\<rceil>) = ((0::?'a) < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Archimedean_Field.one_le_floor",
     "(1 <= \<lfloor>?x\<rfloor>) = ((1::?'a) <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Archimedean_Field.zero_le_floor",
     "(0 <= \<lfloor>?x\<rfloor>) = ((0::?'a) <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Archimedean_Field.ceiling_le_one",
     "(\<lceil>?x\<rceil> <= 1) = (?x <= (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Archimedean_Field.ceiling_le_zero",
     "(\<lceil>?x\<rceil> <= 0) = (?x <= (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Archimedean_Field.floor_le_zero",
     "(\<lfloor>?x\<rfloor> <= 0) = (?x < (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Archimedean_Field.frac_in_Ints_iff",
     "(frac ?x : \<int>) = (?x : \<int>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Archimedean_Field.ceiling_diff_one",
     "\<lceil>?x - (1::?'a)\<rceil> = \<lceil>?x\<rceil> - 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 0)),
         template_hole 0))),
    ("Archimedean_Field.ceiling_add_one",
     "\<lceil>?x + (1::?'a)\<rceil> = \<lceil>?x\<rceil> + 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 0)),
         template_hole 0))),
    ("Archimedean_Field.floor_diff_one",
     "\<lfloor>?x - (1::?'a)\<rfloor> = \<lfloor>?x\<rfloor> - 1",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 2)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 0)),
         template_hole 0))),
    ("Archimedean_Field.one_add_floor",
     "\<lfloor>?x\<rfloor> + 1 = \<lfloor>?x + (1::?'a)\<rfloor>",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Archimedean_Field.frac_gt_0_iff",
     "((0::?'a) < frac ?x) = (?x ~: \<int>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Archimedean_Field.less_ceiling_iff",
     "(?z < \<lceil>?x\<rceil>) = (of_int ?z < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Archimedean_Field.ceiling_less_zero",
     "(\<lceil>?x\<rceil> < 0) = (?x <= - (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_hole 3),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Archimedean_Field.floor_less_iff",
     "(\<lfloor>?x\<rfloor> < ?z) = (?x < of_int ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.zero_le_ceiling",
     "(0 <= \<lceil>?x\<rceil>) = (- (1::?'a) < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Archimedean_Field.le_floor_iff",
     "(?z <= \<lfloor>?x\<rfloor>) = (of_int ?z <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Archimedean_Field.ceiling_le_iff",
     "(\<lceil>?x\<rceil> <= ?z) = (?x <= of_int ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.int_add_floor",
     "?z + \<lfloor>?x\<rfloor> = \<lfloor>of_int ?z + ?x\<rfloor>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Archimedean_Field.floor_add_int",
     "\<lfloor>?x\<rfloor> + ?z = \<lfloor>?x + of_int ?z\<rfloor>",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Archimedean_Field.ceiling_diff_of_int",
     "\<lceil>?x - of_int ?z\<rceil> = \<lceil>?x\<rceil> - ?z",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 1)),
         template_var 0))),
    ("Archimedean_Field.ceiling_add_of_int",
     "\<lceil>?x + of_int ?z\<rceil> = \<lceil>?x\<rceil> + ?z",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 1)),
         template_var 0))),
    ("Archimedean_Field.floor_diff_of_int",
     "\<lfloor>?x - of_int ?z\<rfloor> = \<lfloor>?x\<rfloor> - ?z",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 1)),
         template_var 0))),
    ("Archimedean_Field.floor_divide_of_int_eq",
     "\<lfloor>of_int ?k / of_int ?l\<rfloor> = ?k div ?l",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Archimedean_Field.one_less_floor",
     "(1 < \<lfloor>?x\<rfloor>) = ((2::?'a) <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))),
         template_var 0))),
    ("Archimedean_Field.floor_le_one",
     "(\<lfloor>?x\<rfloor> <= 1) = (?x < (2::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_hole 4),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Archimedean_Field.floor_less_numeral",
     "(\<lfloor>?x\<rfloor> < numeral ?v) = (?x < numeral ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.numeral_less_ceiling",
     "(numeral ?v < \<lceil>?x\<rceil>) = (numeral ?v < ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Archimedean_Field.ceiling_le_numeral",
     "(\<lceil>?x\<rceil> <= numeral ?v) = (?x <= numeral ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.numeral_le_floor",
     "(numeral ?v <= \<lfloor>?x\<rfloor>) = (numeral ?v <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Archimedean_Field.ceiling_add_le",
     "\<lceil>?x + ?y\<rceil> <= \<lceil>?x\<rceil> + \<lceil>?y\<rceil>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Archimedean_Field.le_floor_add",
     "\<lfloor>?x\<rfloor> + \<lfloor>?y\<rfloor>
      <= \<lfloor>?x + ?y\<rfloor>",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Archimedean_Field.floor_mono",
     "?x <= ?y ==> \<lfloor>?x\<rfloor> <= \<lfloor>?y\<rfloor>",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.round_mono", "?x <= ?y ==> round ?x <= round ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.ceiling_mono",
     "?y <= ?x ==> \<lceil>?y\<rceil> <= \<lceil>?x\<rceil>",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.ceiling_less_cancel",
     "\<lceil>?x\<rceil> < \<lceil>?y\<rceil> ==> ?x < ?y",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("Archimedean_Field.floor_less_cancel",
     "\<lfloor>?x\<rfloor> < \<lfloor>?y\<rfloor> ==> ?x < ?y",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("Archimedean_Field.finite_abs_int_segment",
     "finite {k: \<int>. \<bar>k\<bar> <= ?a}",
     template_predicate
      (
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))
         )),
    ("Archimedean_Field.ceiling_diff_numeral",
     "\<lceil>?x - numeral ?v\<rceil> = \<lceil>?x\<rceil> - numeral ?v",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.ceiling_add_numeral",
     "\<lceil>?x + numeral ?v\<rceil> = \<lceil>?x\<rceil> + numeral ?v",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.floor_diff_numeral",
     "\<lfloor>?x - numeral ?v\<rfloor> =
      \<lfloor>?x\<rfloor> - numeral ?v",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.floor_divide_of_nat_eq",
     "\<lfloor>of_nat ?m / of_nat ?n\<rfloor> = int (?m div ?n)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Archimedean_Field.less_floor_iff",
     "(?z < \<lfloor>?x\<rfloor>) = (of_int ?z + (1::?'a) <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_hole 0)),
         template_var 0))),
    ("Archimedean_Field.ceiling_less_iff",
     "(\<lceil>?x\<rceil> < ?z) = (?x <= of_int ?z - (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Archimedean_Field.le_ceiling_iff",
     "(?z <= \<lceil>?x\<rceil>) = (of_int ?z - (1::?'a) < ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_hole 0)),
         template_var 0))),
    ("Archimedean_Field.floor_le_iff",
     "(\<lfloor>?x\<rfloor> <= ?z) = (?x < of_int ?z + (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Archimedean_Field.of_int_round_gt",
     "?x - (1::?'a) / (2::?'a) < of_int (round ?x)",
     template_inequation
      (less_than,
       template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.of_int_round_le",
     "of_int (round ?x) <= ?x + (1::?'a) / (2::?'a)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Archimedean_Field.of_int_round_ge",
     "?x - (1::?'a) / (2::?'a) <= of_int (round ?x)",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.of_nat_floor",
     "(0::?'a) <= ?r ==> of_nat (nat \<lfloor>?r\<rfloor>) <= ?r",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Archimedean_Field.frac_eq",
     "(frac ?x = ?x) = ((0::?'a) <= ?x & ?x < (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Archimedean_Field.ceiling_less_numeral",
     "(\<lceil>?x\<rceil> < numeral ?v) = (?x <= numeral ?v - (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Archimedean_Field.numeral_less_floor",
     "(numeral ?v < \<lfloor>?x\<rfloor>) = (numeral ?v + (1::?'a) <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_hole 0)),
         template_var 0))),
    ("Archimedean_Field.floor_le_numeral",
     "(\<lfloor>?x\<rfloor> <= numeral ?v) = (?x < numeral ?v + (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Archimedean_Field.numeral_le_ceiling",
     "(numeral ?v <= \<lceil>?x\<rceil>) = (numeral ?v - (1::?'a) < ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_hole 0)),
         template_var 0))),
    ("Archimedean_Field.floor_less_neg_numeral",
     "(\<lfloor>?x\<rfloor> < - numeral ?v) = (?x < - numeral ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Archimedean_Field.neg_numeral_less_ceiling",
     "(- numeral ?v < \<lceil>?x\<rceil>) = (- numeral ?v < ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("Archimedean_Field.ceiling_le_neg_numeral",
     "(\<lceil>?x\<rceil> <= - numeral ?v) = (?x <= - numeral ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Archimedean_Field.neg_numeral_le_floor",
     "(- numeral ?v <= \<lfloor>?x\<rfloor>) = (- numeral ?v <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("Archimedean_Field.round_diff_minimal",
     "\<bar>?z - of_int (round ?z)\<bar> <= \<bar>?z - of_int ?m\<bar>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("Archimedean_Field.of_int_round_abs_le",
     "\<bar>of_int (round ?x) - ?x\<bar> <= (1::?'a) / (2::?'a)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0))),
           template_var 0)),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Archimedean_Field.floor_exists",
     "EX z. of_int z <= ?x & ?x < of_int (z + 1)",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Archimedean_Field.floor_exists1",
     "EX! z. of_int z <= ?x & ?x < of_int (z + 1)",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Archimedean_Field.ceiling_correct",
     "of_int \<lceil>?x\<rceil> - (1::?'a) < ?x &
      ?x <= of_int \<lceil>?x\<rceil>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0))),
                   template_hole 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))))
         )),
    ("Archimedean_Field.frac_neg",
     "frac (- ?x) = (if ?x : \<int> then 0::?'a else (1::?'a) - frac ?x)",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3)),
           template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 7, template_var 0))))),
    ("Archimedean_Field.ex_less_of_nat_mult",
     "(0::?'a) < ?x ==> EX n. ?y < of_nat n * ?x",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Archimedean_Field.reals_Archimedean",
     "(0::?'a) < ?x ==> EX n. inverse (of_nat (Suc n)) < ?x",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Archimedean_Field.finite_int_segment",
     "finite {x: \<int>. ?a <= x & x <= ?b}",
     template_predicate
      (
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))
         )),
    ("Archimedean_Field.ceiling_less_neg_numeral",
     "(\<lceil>?x\<rceil> < - numeral ?v) =
      (?x <= - numeral ?v - (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)))),
    ("Archimedean_Field.neg_numeral_less_floor",
     "(- numeral ?v < \<lfloor>?x\<rfloor>) =
      (- numeral ?v + (1::?'a) <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1))),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             template_hole 0)),
         template_var 0))),
    ("Archimedean_Field.floor_le_neg_numeral",
     "(\<lfloor>?x\<rfloor> <= - numeral ?v) =
      (?x < - numeral ?v + (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)))),
    ("Archimedean_Field.neg_numeral_le_ceiling",
     "(- numeral ?v <= \<lceil>?x\<rceil>) =
      (- numeral ?v - (1::?'a) < ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1))),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             template_hole 0)),
         template_var 0))),
    ("Archimedean_Field.ceiling_divide_upper",
     "(0::?'a) < ?q ==> ?p <= of_int \<lceil>?p / ?q\<rceil> * ?q",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)))),
           template_var 1)))),
    ("Archimedean_Field.floor_divide_lower",
     "(0::?'a) < ?q ==> of_int \<lfloor>?p / ?q\<rfloor> * ?q <= ?p",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)))),
           template_var 1),
         template_var 0))),
    ("Archimedean_Field.ceiling_altdef",
     "\<lceil>?x\<rceil> =
      (if ?x = of_int \<lfloor>?x\<rfloor> then \<lfloor>?x\<rfloor>
       else \<lfloor>?x\<rfloor> + 1)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)))),
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 2, template_var 0)),
               template_hole 0))
           ))),
    ("Real.reals_Archimedean3", "0 < ?x ==> ALL y. EX n. y < real n * ?x",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Archimedean_Field.round_altdef",
     "round ?x =
      (if (1::?'a) / (2::?'a) <= frac ?x then \<lceil>?x\<rceil>
       else \<lfloor>?x\<rfloor>)",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)))),
               template_app (template_hole 2, template_var 0))),
           template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Archimedean_Field.ceiling_eq_iff",
     "(\<lceil>?x\<rceil> = ?a) =
      (of_int ?a - (1::?'a) < ?x & ?x <= of_int ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_hole 1)),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("Archimedean_Field.floor_eq_iff",
     "(\<lfloor>?x\<rfloor> = ?a) =
      (of_int ?a <= ?x & ?x < of_int ?a + (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 3, template_var 0)),
             template_hole 0))))),
    ("Archimedean_Field.floor_divide_upper",
     "(0::?'a) < ?q ==>
      ?p < (of_int \<lfloor>?p / ?q\<rfloor> + (1::?'a)) * ?q",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 1)))),
               template_hole 0)),
           template_var 1)))),
    ("Archimedean_Field.ceiling_divide_lower",
     "(0::?'a) < ?q ==>
      (of_int \<lceil>?p / ?q\<rceil> - (1::?'a)) * ?q < ?p",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 1)))),
               template_hole 0)),
           template_var 1),
         template_var 0))),
    ("Archimedean_Field.ex_inverse_of_nat_less",
     "(0::?'a) < ?x ==> EX n>0. inverse (of_nat n) < ?x",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Archimedean_Field.round_unique'",
     "\<bar>?x - of_int ?n\<bar> < (1::?'a) / (2::?'a) ==> round ?x = ?n",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))),
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_hole 2))))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Archimedean_Field.frac_unique_iff",
     "(frac ?x = ?a) = (?x - ?a : \<int> & (0::?'a) <= ?a & ?a < (1::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_hole 4)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Archimedean_Field.floor_unique",
     "[| of_int ?z <= ?x; ?x < of_int ?z + (1::?'a) |]
      ==> \<lfloor>?x\<rfloor> = ?z",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 5, template_var 1)),
            template_hole 2))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Archimedean_Field.ceiling_unique",
     "[| of_int ?z - (1::?'a) < ?x; ?x <= of_int ?z |]
      ==> \<lceil>?x\<rceil> = ?z",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1)),
            template_hole 3),
          template_var 0),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Archimedean_Field.floor_add2",
     "?x : \<int> | ?y : \<int> ==>
      \<lfloor>?x + ?y\<rfloor> =
      \<lfloor>?x\<rfloor> + \<lfloor>?y\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Archimedean_Field.ceiling_split",
     "?P \<lceil>?t\<rceil> =
      (ALL i. of_int i - (1::?'a) < ?t & ?t <= of_int i --> ?P i)",
     template_equation
      (template_app
        (template_var 1, template_app (template_hole 8, template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Archimedean_Field.floor_split",
     "?P \<lfloor>?t\<rfloor> =
      (ALL i. of_int i <= ?t & ?t < of_int i + (1::?'a) --> ?P i)",
     template_equation
      (template_app
        (template_var 1, template_app (template_hole 8, template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Archimedean_Field.exists_least_lemma",
     "[| ~ ?P 0; EX n. ?P n |] ==> EX n. ~ ?P n & ?P (Suc n)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 0, template_hole 3))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Archimedean_Field.nat_approx_posE",
     "[| (0::?'a) < ?e; !!n. (1::?'a) / of_nat (Suc n) < ?e ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Archimedean_Field.mult_ceiling_le",
     "[| (0::?'a) <= ?a; (0::?'a) <= ?b |]
      ==> \<lceil>?a * ?b\<rceil>
          <= \<lceil>?a\<rceil> * \<lceil>?b\<rceil>",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1),
        template_inequation (less_equals, template_hole 4, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Archimedean_Field.le_mult_floor",
     "[| (0::?'a) <= ?a; (0::?'a) <= ?b |]
      ==> \<lfloor>?a\<rfloor> * \<lfloor>?b\<rfloor>
          <= \<lfloor>?a * ?b\<rfloor>",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1),
        template_inequation (less_equals, template_hole 4, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Archimedean_Field.mult_ceiling_le_Ints",
     "[| (0::?'b) <= ?a; ?a : \<int> |]
      ==> of_int \<lceil>?a * ?b\<rceil>
          <= of_int (\<lceil>?a\<rceil> * \<lceil>?b\<rceil>)",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 0)))))),
    ("Archimedean_Field.le_mult_floor_Ints",
     "[| (0::?'b) <= ?a; ?a : \<int> |]
      ==> of_int (\<lfloor>?a\<rfloor> * \<lfloor>?b\<rfloor>)
          <= of_int \<lfloor>?a * ?b\<rfloor>",
     template_implication
      ([template_inequation (less_equals, template_hole 7, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_hole 5)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Archimedean_Field.cInf_asclose",
     "[| ?S ~= {}; ALL x:?S. \<bar>x - ?l\<bar> <= ?e |]
      ==> \<bar>Inf ?S - ?l\<bar> <= ?e",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_var 0))),
    ("Archimedean_Field.cSup_asclose",
     "[| ?S ~= {}; ALL x:?S. \<bar>x - ?l\<bar> <= ?e |]
      ==> \<bar>Sup ?S - ?l\<bar> <= ?e",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1)),
         template_var 0))),
    ("Archimedean_Field.cInf_abs_ge",
     "[| ?S ~= {}; !!x. x : ?S ==> \<bar>x\<bar> <= ?a |]
      ==> \<bar>Inf ?S\<bar> <= ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Archimedean_Field.frac_add",
     "frac (?x + ?y) =
      (if frac ?x + frac ?y < (1::?'a) then frac ?x + frac ?y
       else frac ?x + frac ?y - (1::?'a))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 5, template_var 1)),
                   template_app (template_hole 5, template_var 0))),
               template_hole 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 5, template_var 1)),
             template_app (template_hole 5, template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 5, template_var 1)),
               template_app (template_hole 5, template_var 0))),
           template_hole 1)))),
    ("Archimedean_Field.floor_add",
     "\<lfloor>?x + ?y\<rfloor> =
      (if frac ?x + frac ?y < (1::?'a)
       then \<lfloor>?x\<rfloor> + \<lfloor>?y\<rfloor>
       else \<lfloor>?x\<rfloor> + \<lfloor>?y\<rfloor> + 1)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 3, template_var 0))),
               template_hole 2)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 7, template_var 1)),
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 7, template_var 1)),
               template_app (template_hole 7, template_var 0))),
           template_hole 0)))),
    ("Archimedean_Field.round_unique",
     "[| ?x - (1::?'a) / (2::?'a) < of_int ?y;
         of_int ?y <= ?x + (1::?'a) / (2::?'a) |]
      ==> round ?x = ?y",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 10, template_var 1),
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5)))),
          template_app (template_hole 4, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5)))))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0)))]:
   (string * thm * template) list
### theory "Draft.ArchTemplates"
### 0.332s elapsed time, 0.565s cpu time, 0.131s GC time
val it = (): unit
