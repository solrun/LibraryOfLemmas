Loading theory "Draft.ListAux" (required by "Draft.GraphPropsTemplates" via "Draft.GraphProps" via "Draft.Graph" via "Draft.Rotation")
Loading theory "Draft.Quasi_Order" (required by "Draft.GraphPropsTemplates" via "Draft.GraphProps" via "Draft.Graph" via "Draft.Rotation" via "Draft.PlaneGraphIso")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.GraphPropsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.GraphPropsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
locale quasi_order
  fixes qle :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 60)
  assumes "quasi_order (\<preceq>)"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Quasi_Order"
### 0.108s elapsed time, 0.455s cpu time, 0.039s GC time
Loading theory "Draft.PlaneGraphIso" (required by "Draft.GraphPropsTemplates" via "Draft.GraphProps" via "Draft.Graph" via "Draft.Rotation")
### Ambiguous input (line 130 of "$AFP/Flyspeck-Tame/ListAux.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Product_Type.Times" ("_position" as) ("_position" bs))
###   ("_concat" ("_position" a) ("_position" as)
###     ("_applC" ("_position" listProd1)
###       ("_cargs" ("_position" a) ("_position" bs)))))
### ("\<^const>Pure.eq" ("\<^fixed>listProd" ("_position" as) ("_position" bs))
###   ("_concat" ("_position" a) ("_position" as)
###     ("_applC" ("_position" listProd1)
###       ("_cargs" ("_position" a) ("_position" bs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 132 of "$AFP/Flyspeck-Tame/ListAux.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set)
###       ("\<^const>ListAux.listProd" ("_position" xs) ("_position" ys)))
###     ("\<^const>Product_Type.Times"
###       ("_applC" ("_position" set) ("_position" xs))
###       ("_applC" ("_position" set) ("_position" ys)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set)
###       ("\<^const>Product_Type.Times" ("_position" xs) ("_position" ys)))
###     ("\<^const>Product_Type.Times"
###       ("_applC" ("_position" set) ("_position" xs))
###       ("_applC" ("_position" set) ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### No equation for constructor "[]"
consts
  minimal :: "('a => nat) => 'a list => 'a"
### No equation for constructor "[]"
consts
  min_list :: "nat list => nat"
### No equation for constructor "[]"
consts
  max_list :: "nat list => nat"
consts
  replace :: "'a => 'a list => 'a list => 'a list"
### Ignoring duplicate safe introduction (intro!)
### EX y. ?x = Some y ==> ?x ~= None
### Ignoring duplicate safe elimination (elim!)
### [| ?x ~= None; EX y. ?x = Some y ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### ?x = None ==> ALL y. ?x ~= Some y
### Ignoring duplicate safe elimination (elim!)
### [| ALL y. ?x ~= Some y; ?x = None ==> PROP ?W |] ==> PROP ?W
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.630s cpu time, 0.039s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.GraphPropsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Ignoring duplicate safe introduction (intro!)
### EX y. ?x = Some y ==> ?x ~= None
### Ignoring duplicate safe elimination (elim!)
### [| ?x ~= None; EX y. ?x = Some y ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?x1 ~= None == EX y. ?x1 = Some y
### Ignoring duplicate safe introduction (intro!)
### ?x = None ==> ALL y. ?x ~= Some y
### Ignoring duplicate safe elimination (elim!)
### [| ALL y. ?x ~= Some y; ?x = None ==> PROP ?W |] ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ALL y. ?x1 ~= Some y == ?x1 = None
consts
  mapAt :: "nat list => ('a => 'a) => 'a list => 'a list"
overloading
  congs \<equiv> pr_isomorphic :: 'a list => 'a list => bool
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  splitAtRec :: "'a => 'a list => 'a list => 'a list * 'a list"
consts
  pr_iso_test0 ::
    "('a => 'b option) => 'a list list => 'b list list => bool"
### theory "HOL-Library.Nat_Bijection"
### 0.332s elapsed time, 1.329s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.GraphPropsTemplates" via "Draft.ExtrEqs")
consts
  pr_iso_test1 ::
    "('a => 'b option) => 'a list list => 'b list list => bool"
### theory "HOL-Library.Set_Algebras"
### 0.236s elapsed time, 0.928s cpu time, 0.089s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.GraphPropsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  pr_iso_test2 ::
    "(('a * 'b) list => ('a * 'b) list => bool)
     => (('a * 'b) list => ('a * 'b) list => ('a * 'b) list)
        => ('a * 'b) list => 'a list list => 'b list list => bool"
### Ignoring duplicate rewrite rule:
### ?A1 - ?B1 <= ?A1 == True
consts
  merge :: "('a * 'b) list => ('a * 'b) list => ('a * 'b) list"
consts
  pr_iso_test_rec ::
    "('a * 'b) list => 'a list list => 'b list list => bool"
consts
  removeKeyList :: "'a list => ('a * 'b) list => ('a * 'b) list"
### theory "Draft.ListAux"
### 0.577s elapsed time, 2.272s cpu time, 0.273s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.GraphPropsTemplates" via "Draft.ExtrEqs")
### theory "Draft.PlaneGraphIso"
### 0.500s elapsed time, 1.955s cpu time, 0.235s GC time
Loading theory "Draft.Rotation" (required by "Draft.GraphPropsTemplates" via "Draft.GraphProps" via "Draft.Graph")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.Rotation"
### 0.176s elapsed time, 0.710s cpu time, 0.061s GC time
Loading theory "Draft.Graph" (required by "Draft.GraphPropsTemplates" via "Draft.GraphProps")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 1.030s elapsed time, 3.927s cpu time, 0.869s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
overloading
  final_face \<equiv> final :: face => bool
  type_face \<equiv> type :: face => facetype
  vertices_face \<equiv> vertices :: face => nat list
  cong_face \<equiv> pr_isomorphic :: face => face => bool
Found termination order: "size <*mlex*> {}"
consts
  final_face :: "face => bool"
consts
  type_face :: "face => facetype"
consts
  vertices_face :: "face => nat list"
### theory "HOL-Library.BigO"
### 0.960s elapsed time, 3.497s cpu time, 0.805s GC time
consts
  nextElem :: "'a list => 'a => 'a => 'a"
overloading
  edges_face \<equiv> edges :: face => (nat * nat) set
overloading
  op_vertices \<equiv> op :: nat list => nat list
overloading
  op_graph \<equiv> op :: face => face
consts
  op_graph :: "face => face"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  faces :: "graph => face list"
consts
  countVertices :: "graph => nat"
overloading
  vertices_graph \<equiv> vertices :: graph => nat list
consts
  vertices_graph :: "graph => nat list"
consts
  faceListAt :: "graph => face list list"
consts
  heights :: "graph => nat list"
overloading
  finalGraph \<equiv> final :: graph => bool
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
overloading
  edges_graph \<equiv> edges :: graph => (nat * nat) set
### Ambiguous input (line 257 of "$AFP/Flyspeck-Tame/Graph.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>nextFace" ("_position" p))
###   ("_lambda" ("_position" f)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_pattern" ("_position" g) ("_position" v))
###           ("_position" p))
###         ("_bind" ("_position" fs)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" v)))))
###       ("_case_syntax" ("_position" fs)
###         ("_case2" ("_case1" ("\<^const>List.list.Nil") ("_position" f))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" g) ("_position" gs))
###             ("_applC" ("_position" nextElem)
###               ("_cargs" ("_position" fs)
###                 ("_cargs" ("_applC" ("_position" hd) ("_position" fs))
###                   ("_position" f))))))))))
### ("\<^const>Pure.eq" ("\<^const>Graph.nextVertex" ("_position" p))
###   ("_lambda" ("_position" f)
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_pattern" ("_position" g) ("_position" v))
###           ("_position" p))
###         ("_bind" ("_position" fs)
###           ("_applC" ("_position" facesAt)
###             ("_cargs" ("_position" g) ("_position" v)))))
###       ("_case_syntax" ("_position" fs)
###         ("_case2" ("_case1" ("\<^const>List.list.Nil") ("_position" f))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" g) ("_position" gs))
###             ("_applC" ("_position" nextElem)
###               ("_cargs" ("_position" fs)
###                 ("_cargs" ("_applC" ("_position" hd) ("_position" fs))
###                   ("_position" f))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Graph"
### 1.277s elapsed time, 3.802s cpu time, 0.866s GC time
Loading theory "Draft.GraphProps" (required by "Draft.GraphPropsTemplates")
### Ambiguous input (line 134 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" vertices) ("_position" f))
###       ("\<^const>List.list.Nil")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" vertices) ("_position" f))
###       ("\<^const>List.list.Nil")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 147 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" vertices) ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" vertices) ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 152 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" v)))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 170 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("\<^const>List.nth"
###           ("_applC" ("_position" vertices) ("_position" f))
###           ("_position" i)))
###       ("\<^const>List.nth" ("_applC" ("_position" vertices) ("_position" f))
###         ("\<^const>Rings.modulo_class.modulo"
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" i)
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("\<^const>List.nth"
###           ("_applC" ("_position" vertices) ("_position" f))
###           ("_position" i)))
###       ("\<^const>List.nth" ("_applC" ("_position" vertices) ("_position" f))
###         ("\<^const>Rings.modulo_class.modulo"
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("\<^const>Groups.one_class.one"))
###           ("\<^const>List.length"
###             ("_applC" ("_position" vertices) ("_position" f))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 180 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###       ("_applC" ("\<^const>Graph.edges")
###         ("_constrain" ("_position" f) ("_type_name" face))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_position" a))
###         ("_position" b))
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))
###       ("_applC" ("\<^const>Graph.edges")
###         ("_constrain" ("_position" f) ("_type_name" face))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_position" a))
###         ("_position" b))
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 204 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" v)
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_position" v))))
###       ("_applC" ("_position" edges) ("_position" f)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" v)
###         ("_tuple_arg"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_position" v))))
###       ("_applC" ("_position" edges) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 215 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_position" a)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 231 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))))
###           ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 240 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 3)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" a)))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 257 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 64 parse trees (10 displayed):
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))
###           ("_Finset"
###             ("_args" ("_position" a)
###               ("_args"
###                 ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                   ("_position" a))
###                 ("_args"
###                   ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_position" a)))
###                   ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                     ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                         ("_position" a)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>List.length"
###           ("_applC" ("_position" vertices) ("_position" f)))
###         ("_Numeral" ("_constify" ("_position" 4)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###         ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 281 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.length"
###         ("_applC" ("_position" vertices) ("_position" f)))
###       ("_Numeral" ("_constify" ("_position" 4)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" a)
###         ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" distinct)
###           ("_applC" ("_position" vertices) ("_position" f))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" a))))
###           ("_applC" ("\<^const>Graph.prevVertex" ("_position" f))
###             ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 315 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 322 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.greater"
###             ("\<^const>List.length"
###               ("_applC" ("_position" vertices) ("_position" f)))
###             ("\<^const>Groups.one_class.one"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_position" v))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.greater"
###             ("\<^const>List.length"
###               ("_applC" ("_position" vertices) ("_position" f)))
###             ("\<^const>Groups.one_class.one"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 343 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v))
###               ("_position" u)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" v) ("_position" u))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 360 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u)
###               ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###                 ("_position" v)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" v)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" u)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" v)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u)
###               ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###                 ("_position" v)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 383 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" v)
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.list.Nil"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distinct)
###       ("_applC" ("_position" vertices) ("_position" f))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" v)
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.list.Nil"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 396 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" u)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" u)
###             ("_applC" ("\<^const>Graph.nextFace" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.append"
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u) ("_position" v))))
###         ("_list" ("_position" v))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" u)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" v)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" u) ("_position" v)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" between)
###         ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###           ("_cargs" ("_position" u)
###             ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###               ("_position" v)))))
###       ("\<^const>List.append"
###         ("_applC" ("_position" between)
###           ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###             ("_cargs" ("_position" u) ("_position" v))))
###         ("_list" ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 403 of "$AFP/Flyspeck-Tame/GraphProps.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" v)
###                 ("_applC" ("_position" set)
###                   ("\<^const>List.list.Cons" ("_position" x)
###                     ("_applC" ("_position" between)
###                       ("_cargs"
###                         ("_applC" ("_position" vertices) ("_position" f))
###                         ("_cargs" ("_position" x)
###                           ("_position" y)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextVertex" ("_position" f))
###         ("_position" v))
###       ("_applC" ("_position" nextElem)
###         ("_cargs"
###           ("\<^const>List.list.Cons" ("_position" x)
###             ("\<^const>List.append"
###               ("_applC" ("_position" between)
###                 ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###                   ("_cargs" ("_position" x) ("_position" y))))
###               ("_list" ("_position" y))))
###           ("_cargs" ("_position" z) ("_position" v)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" distinct)
###         ("_applC" ("_position" vertices) ("_position" f))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("\<^const>Graph.vertices_set") ("_position" f))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" x) ("_position" y)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" v)
###                 ("_applC" ("_position" set)
###                   ("\<^const>List.list.Cons" ("_position" x)
###                     ("_applC" ("_position" between)
###                       ("_cargs"
###                         ("_applC" ("_position" vertices) ("_position" f))
###                         ("_cargs" ("_position" x)
###                           ("_position" y)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("\<^const>Graph.nextFace" ("_position" f)) ("_position" v))
###       ("_applC" ("_position" nextElem)
###         ("_cargs"
###           ("\<^const>List.list.Cons" ("_position" x)
###             ("\<^const>List.append"
###               ("_applC" ("_position" between)
###                 ("_cargs" ("_applC" ("_position" vertices) ("_position" f))
###                   ("_cargs" ("_position" x) ("_position" y))))
###               ("_list" ("_position" y))))
###           ("_cargs" ("_position" z) ("_position" v)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.GraphProps"
### 0.249s elapsed time, 0.539s cpu time, 0.042s GC time
### theory "HOL-Library.Tree"
### 1.980s elapsed time, 5.987s cpu time, 1.115s GC time
Loading theory "Draft.Templates" (required by "Draft.GraphPropsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.073s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.GraphPropsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.494s elapsed time, 0.535s cpu time, 0.050s GC time
Loading theory "Draft.GraphPropsTemplates"
val templateLemmas =
   [("GraphProps.final_setFinal", "final (setFinal ?f)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("GraphProps.distinct_vertices", "distinct (vertices ?g)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("GraphProps.edges_setFinal", "\<E> (setFinal ?f) = \<E> ?f",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("GraphProps.eq_setFinal_iff", "(?f = setFinal ?f) = final ?f",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("GraphProps.setFinal_eq_iff", "(setFinal ?f = ?f) = final ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("GraphProps.nextElem_in", "nextElem ?xs ?x ?y : set (?x # ?xs)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)))
         )),
    ("GraphProps.len_faces_sum",
     "|faces ?g| = |finals ?g| + |nonFinals ?g|",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 4,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 4,
           template_app (template_hole 0, template_var 0))))),
    ("GraphProps.graph_max_final_ex",
     "EX f:set (finals (graph ?n)). |vertices f| = ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)))),
           t_empty)
         )),
    ("GraphProps.nextElem_last",
     "distinct ?xs ==> nextElem ?xs ?c (last ?xs) = ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("GraphProps.nextElem_notin",
     "?a ~: set ?as ==> nextElem ?as ?c ?a = ?c",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2),
         template_var 0))),
    ("GraphProps.vertices_conv_Union_edges",
     "\<V> ?f = (UN (a, b):\<E> ?f. {a})",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_app (template_hole 0, template_var 0))))),
    ("GraphProps.between_next_empty",
     "distinct (vertices ?f) ==>
      between (vertices ?f) ?v (?f \<bullet> ?v) = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 4, template_var 1)),
             template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("GraphProps.nextVertex_in_face'",
     "vertices ?f ~= [] ==> ?f \<bullet> ?v : \<V> ?f",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 0,
               template_app (template_hole 4, template_var 1)))
           ))),
    ("GraphProps.nextVertex_in_face",
     "?v : \<V> ?f ==> ?f \<bullet> ?v : \<V> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("GraphProps.prevVertex_in_face",
     "?v : \<V> ?f ==> ?f\<^bsup>-1\<^esup> \<bullet> ?v : \<V> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))
           ))),
    ("GraphProps.nextElem_notin_butlast",
     "?y ~: set (butlast ?xs) ==> nextElem ?xs ?x ?y = ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2),
         template_var 0))),
    ("GraphProps.nextVertex_in_edges",
     "?v : \<V> ?f ==> (?v, ?f \<bullet> ?v) : \<E> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("GraphProps.edges_face_eq",
     "((?a, ?b) : \<E> ?f) = (?f \<bullet> ?a = ?b & ?a : \<V> ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 2)),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("GraphProps.nextElem_append",
     "?y ~: set ?xs ==> nextElem (?xs @ ?ys) ?d ?y = nextElem ?ys ?d ?y",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app (template_hole 3, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 3)))),
    ("GraphProps.between_front",
     "?v ~: set ?us ==> between (?u # ?us @ ?v # ?vs) ?u ?v = ?us",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app (template_hole 4, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)))),
             template_var 1),
           template_var 3),
         template_var 2))),
    ("GraphProps.in_edges_in_vertices",
     "(?x, ?y) : \<E> ?f ==> ?x : \<V> ?f & ?y : \<V> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("GraphProps.nextVertex_prevVertex",
     "[| distinct (vertices ?f); ?v : \<V> ?f |]
      ==> ?f \<bullet> (?f\<^bsup>-1\<^esup> \<bullet> ?v) = ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 5, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("GraphProps.prevVertex_nextVertex",
     "[| distinct (vertices ?f); ?v : \<V> ?f |]
      ==> ?f\<^bsup>-1\<^esup> \<bullet> (?f \<bullet> ?v) = ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 5, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("GraphProps.prevVertex_in_edges",
     "[| distinct (vertices ?f); ?v : \<V> ?f |]
      ==> (?f\<^bsup>-1\<^esup> \<bullet> ?v, ?v) : \<E> ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("GraphProps.nextElem_prevElem",
     "[| distinct ?xs; ?x : set ?xs |]
      ==> nextElem ?xs (hd ?xs) (nextElem (rev ?xs) (last ?xs) ?x) = ?x",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_var 0))),
    ("GraphProps.prevElem_nextElem",
     "[| distinct ?xs; ?x : set ?xs |]
      ==> nextElem (rev ?xs) (last ?xs) (nextElem ?xs (hd ?xs) ?x) = ?x",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_var 0))),
    ("GraphProps.distinct_no_loop1",
     "[| distinct (vertices ?f); ?v : \<V> ?f; 1 < |vertices ?f| |]
      ==> ?f \<bullet> ?v ~= ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app (template_hole 8, template_var 1)))
            ),
        template_inequation
         (less_than, template_hole 4,
          template_app
           (template_hole 3,
            template_app (template_hole 8, template_var 1)))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 0)
           ))),
    ("GraphProps.nextVertex_nth",
     "[| distinct (vertices ?f); ?i < |vertices ?f| |]
      ==> ?f \<bullet> (vertices ?f ! ?i) =
          vertices ?f ! ((?i + 1) mod |vertices ?f|)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 6,
            template_app (template_hole 8, template_var 1)))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 8, template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 8, template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_app
              (template_hole 6,
               template_app (template_hole 8, template_var 1))))))),
    ("GraphProps.nextElem_nth",
     "[| distinct ?xs; ?i < |?xs| |]
      ==> nextElem ?xs ?z (?xs ! ?i) =
          (if |?xs| = ?i + 1 then ?z else ?xs ! (?i + 1))",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 7, template_var 2))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 0),
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 7, template_var 2)),
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_hole 0))),
                 template_var 0),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)))
             )))),
    ("GraphProps.tri_next3_id",
     "[| Graph.triangle ?f; distinct (vertices ?f); ?v : \<V> ?f |]
      ==> ?f \<bullet> (?f \<bullet> (?f \<bullet> ?v)) = ?v",
     template_implication
      ([template_equation
         (template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 1)),
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4))),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 7, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_var 0))),
    ("GraphProps.triangle_nextVertex_prevVertex",
     "[| Graph.triangle ?f; ?a : \<V> ?f; distinct (vertices ?f) |]
      ==> ?f \<bullet> (?f \<bullet> ?a) =
          ?f\<^bsup>-1\<^esup> \<bullet> ?a",
     template_implication
      ([template_equation
         (template_app
           (template_hole 9,
            template_app (template_hole 8, template_var 1)),
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5))),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 8, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 8, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GraphProps.distinct_no_loop2",
     "[| distinct (vertices ?f); ?v : \<V> ?f; ?u : \<V> ?f; ?u ~= ?v |]
      ==> ?f \<bullet> ?v ~= ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 5, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 5, template_var 2)))
            ),
        template_negation
         (template_equation (template_var 0, template_var 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 1)
           ))),
    ("GraphProps.between_back",
     "[| ?v ~: set ?us; ?u ~: set ?vs; ?v ~= ?u |]
      ==> between (?v # ?vs @ ?u # ?us) ?u ?v = ?us",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app (template_hole 5, template_var 2))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app (template_hole 5, template_var 0))
                )
            ),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 2)))),
             template_var 1),
           template_var 3),
         template_var 2))),
    ("GraphProps.quad_next4_id",
     "[| |vertices ?f| = 4; distinct (vertices ?f); ?v : \<V> ?f |]
      ==> ?f \<bullet> (?f \<bullet> (?f \<bullet> (?f \<bullet> ?v))) =
          ?v",
     template_implication
      ([template_equation
         (template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 1)),
          template_app
           (template_hole 6,
            template_app
             (template_hole 5,
              template_app (template_hole 5, template_hole 4)))),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 7, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))),
         template_var 0))),
    ("GraphProps.quad_nextVertex_prevVertex",
     "[| |vertices ?f| = 4; ?a : \<V> ?f; distinct (vertices ?f) |]
      ==> ?f \<bullet> (?f \<bullet> (?f \<bullet> ?a)) =
          ?f\<^bsup>-1\<^esup> \<bullet> ?a",
     template_implication
      ([template_equation
         (template_app
           (template_hole 9,
            template_app (template_hole 8, template_var 1)),
          template_app
           (template_hole 7,
            template_app
             (template_hole 6,
              template_app (template_hole 6, template_hole 5)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 8, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 8, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("GraphProps.next_between2",
     "[| distinct (vertices ?f); ?v : \<V> ?f; ?u : \<V> ?f; ?u ~= ?v |]
      ==> ?v : set (between (vertices ?f) ?u (?f \<bullet> ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 2)))
            ),
        template_negation
         (template_equation (template_var 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 6, template_var 2)),
                   template_var 0),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))))
           ))),
    ("GraphProps.next_between",
     "[| distinct (vertices ?f); ?v : \<V> ?f; ?u : \<V> ?f;
         ?f \<bullet> ?v ~= ?u |]
      ==> ?f \<bullet> ?v : set (between (vertices ?f) ?v ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 2)))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 6, template_var 2)),
                   template_var 1),
                 template_var 0)))
           ))),
    ("GraphProps.vertices_triangle",
     "[| Graph.triangle ?f; ?a : \<V> ?f; distinct (vertices ?f) |]
      ==> \<V> ?f = {?a, ?f \<bullet> ?a, ?f \<bullet> (?f \<bullet> ?a)}",
     template_implication
      ([template_equation
         (template_app
           (template_hole 11,
            template_app (template_hole 10, template_var 1)),
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_hole 7))),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 10, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 10, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app (template_hole 10, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0))),
               template_hole 0)))))),
    ("GraphProps.unroll_between_next2",
     "[| distinct (vertices ?f); ?u : \<V> ?f; ?v : \<V> ?f; ?u ~= ?v |]
      ==> between (vertices ?f) ?u (?f \<bullet> ?v) =
          between (vertices ?f) ?u ?v @ [?v]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_hole 8,
                template_app (template_hole 10, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_hole 8,
                template_app (template_hole 10, template_var 2)))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 10, template_var 2)),
             template_var 1),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 10, template_var 2)),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("GraphProps.vertices_quad",
     "[| |vertices ?f| = 4; ?a : \<V> ?f; distinct (vertices ?f) |]
      ==> \<V> ?f =
          {?a, ?f \<bullet> ?a, ?f \<bullet> (?f \<bullet> ?a),
           ?f \<bullet> (?f \<bullet> (?f \<bullet> ?a))}",
     template_implication
      ([template_equation
         (template_app
           (template_hole 11,
            template_app (template_hole 10, template_var 1)),
          template_app
           (template_hole 9,
            template_app
             (template_hole 8,
              template_app (template_hole 8, template_hole 7)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 10, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 10, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app (template_hole 10, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 0)))),
                 template_hole 0))))))),
    ("GraphProps.nextVertex_eq_lemma",
     "[| distinct (vertices ?f); ?x : \<V> ?f; ?y : \<V> ?f; ?x ~= ?y;
         ?v : set (?x # between (vertices ?f) ?x ?y) |]
      ==> ?f \<bullet> ?v =
          nextElem (?x # between (vertices ?f) ?x ?y @ [?y]) ?z ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_hole 8,
                template_app (template_hole 10, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_hole 8,
                template_app (template_hole 10, template_var 4)))
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 10, template_var 4)),
                      template_var 3),
                    template_var 2))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 4), template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app
                          (template_hole 4,
                           template_app (template_hole 10, template_var 4)),
                         template_var 3),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_hole 0)))),
             template_var 0),
           template_var 1)))),
    ("GraphProps.nextElem_cases",
     "nextElem ?xs ?d ?x = ?y ==>
      ?x ~: set ?xs & ?y = ?d |
      ?xs ~= [] & ?x = last ?xs & ?y = ?d & ?x ~: set (butlast ?xs) |
      (EX us vs. ?xs = us @ [?x, ?y] @ vs & ?x ~: set us)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 12, template_var 3),
              template_var 2),
            template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_app (template_hole 7, template_var 3)))),
                 template_app
                  (template_app (template_hole 13, template_var 0),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 6, template_var 3),
                         template_hole 5))),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 13, template_var 1),
                         template_app (template_hole 4, template_var 3))),
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_app (template_hole 13, template_var 0),
                           template_var 2)),
                       template_app
                        (template_hole 9,
                         template_app
                          (template_app (template_hole 8, template_var 1),
                           template_app
                            (template_hole 7,
                             template_app
                              (template_hole 3, template_var 3)))))))),
               template_app (template_hole 2, t_empty)))
           )))]:
   (string * thm * template) list
### theory "Draft.GraphPropsTemplates"
### 0.372s elapsed time, 0.513s cpu time, 0.054s GC time
val it = (): unit
