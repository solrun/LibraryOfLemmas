   [("Polynomial_Expression.polynate_norm", "isnpoly (polynate ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Polynomial_Expression.one_normh", "isnpolyh (1::?'a)\<^sub>p ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)
         )),
    ("Polynomial_Expression.zero_normh", "isnpolyh 0\<^sub>p ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)
         )),
    ("Polynomial_Expression.coefficients_Nil", "coefficients ?p ~= []",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Polynomial_Expression.degree_head",
     "Polynomial_Expression.degree (head ?p) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Polynomial_Expression.swapnorm_isnpoly",
     "isnpoly (swapnorm ?n ?m ?p)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("Polynomial_Expression.shift1_nz", "shift1 ?p ~= 0\<^sub>p",
     template_negation
      (
         template_equation
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))
         )),
    ("Polynomial_Expression.RIpoly_eqs", "Ipoly ?bs (?c)\<^sub>p = ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Polynomial_Expression.degree_eq_degreen0",
     "Polynomial_Expression.degree ?p = degreen ?p 0",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Polynomial_Expression.head_eq_headn0", "head ?p = headn ?p 0",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Polynomial_Expression.coefficients_head",
     "last (coefficients ?p) = head ?p",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Polynomial_Expression.swap_same_id", "swap ?n ?n ?t = ?t",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 1),
         template_var 0),
       template_var 0)),
    ("Polynomial_Expression.polynate_idempotent",
     "polynate (polynate ?p) = polynate ?p",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Polynomial_Expression.polyneg_norm",
     "isnpoly ?p ==> isnpoly (~\<^sub>p ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Polynomial_Expression.isnpolyh_isweaknpoly",
     "isnpolyh ?p ?n0.0 ==> isweaknpoly ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Polynomial_Expression.polynate",
     "Ipoly ?bs (polynate ?p) = Ipoly ?bs ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Polynomial_Expression.RIpoly_eqs", "Ipoly ?bs (Bound ?n) = ?bs ! ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Polynomial_Expression.degree_coefficients",
     "Polynomial_Expression.degree ?p = length (coefficients ?p) - 1",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Polynomial_Expression.shift1_degree",
     "Polynomial_Expression.degree (shift1 ?p) =
      1 + Polynomial_Expression.degree ?p",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 3, template_var 0)))),
    ("Polynomial_Expression.poly_nate_polypoly'",
     "poly_nate ?bs ?p = polypoly' ?bs (polynate ?p)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Polynomial_Expression.polypow_norm",
     "isnpoly ?p ==> isnpoly (?p ^\<^sub>p ?k)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Polynomial_Expression.polysubst0_polybound0",
     "polybound0 ?t ==> polybound0 (polysubst0 ?t ?a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Polynomial_Expression.head_polybound0",
     "isnpolyh ?p ?n0.0 ==> polybound0 (head ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))
           ))),
    ("Polynomial_Expression.isnpolyh_Suc_const",
     "isnpolyh ?p (Suc ?n) ==> isconstant ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Polynomial_Expression.isnpolyh_polybound0",
     "isnpolyh ?p (Suc ?n) ==> polybound0 ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Polynomial_Expression.RIpoly_eqs",
     "Ipoly ?bs (Neg ?a) = - Ipoly ?bs ?a",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Polynomial_Expression.polyneg",
     "Ipoly ?bs (~\<^sub>p ?p) = - Ipoly ?bs ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Polynomial_Expression.swap_commute", "swap ?n ?m ?p = swap ?m ?n ?p",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Polynomial_Expression.swap_swap_id",
     "swap ?n ?m (swap ?m ?n ?t) = ?t",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)),
       template_var 0)),
    ("Polynomial_Expression.isnonconstant_coefficients_length",
     "isnonconstant ?p ==> 1 < length (coefficients ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Polynomial_Expression.swap_isweanpoly",
     "isweaknpoly ?p ==> isweaknpoly (swap ?n ?m ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Polynomial_Expression.behead_isnpolyh",
     "isnpolyh ?p ?n ==> isnpolyh (behead ?p) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Polynomial_Expression.head_isnpolyh",
     "isnpolyh ?p ?n0.0 ==> isnpolyh (head ?p) ?n0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Polynomial_Expression.polyneg_normh",
     "isnpolyh ?p ?n ==> isnpolyh (~\<^sub>p ?p) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Polynomial_Expression.isnpolyh_polynate_id",
     "isnpolyh ?p ?n0.0 ==> polynate ?p = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 1))),
    ("Polynomial_Expression.wf_bs_polyneg",
     "wf_bs ?bs ?p ==> wf_bs ?bs (~\<^sub>p ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Polynomial_Expression.funpow_shift1_degree",
     "Polynomial_Expression.degree ((shift1 ^^ ?k) ?p) =
      ?k + Polynomial_Expression.degree ?p",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 3, template_var 0)))),
    ("Polynomial_Expression.decrpoly_zero",
     "(decrpoly ?p = 0\<^sub>p) = (?p = 0\<^sub>p)",
     template_bimplication
      (template_equation
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_equation
        (template_var 0, template_app (template_hole 1, template_hole 0)))),
    ("Polynomial_Expression.maxindex_coefficients",
     "ALL c:set (coefficients ?p). maxindex c <= maxindex ?p",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           t_empty)
         )),
    ("Polynomial_Expression.isconstant_polybound0",
     "isnpolyh ?p ?n0.0 ==> isconstant ?p = polybound0 ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 1)))),
    ("Polynomial_Expression.polypow_normh",
     "isnpolyh ?p ?n ==> isnpolyh (?p ^\<^sub>p ?k) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Polynomial_Expression.polyneg_polyneg",
     "isnpolyh ?p ?n0.0 ==> ~\<^sub>p (~\<^sub>p ?p) = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 0, template_app (template_hole 0, template_var 1)),
         template_var 1))),
    ("Polynomial_Expression.degree_isnpolyh_Suc",
     "isnpolyh ?p (Suc ?n) ==> Polynomial_Expression.degree ?p = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 1), template_hole 0))),
    ("Polynomial_Expression.head_isnpolyh_Suc",
     "isnpolyh ?p (Suc ?n) ==> head ?p = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 1))),
    ("Polynomial_Expression.polypow",
     "Ipoly ?bs (?p ^\<^sub>p ?n) = Ipoly ?bs ?p ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Polynomial_Expression.RIpoly_eqs",
     "Ipoly ?bs (Pw ?t ?n) = Ipoly ?bs ?t ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Polynomial_Expression.shift1",
     "Ipoly ?bs (shift1 ?p) = Ipoly ?bs (Mul (Bound 0) ?p)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)))),
    ("Polynomial_Expression.poly_nate_poly",
     "poly (poly_nate ?bs ?p) = (%x. Ipoly (x # ?bs) ?p)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       t_empty)),
    ("Polynomial_Expression.wf_bs_insensitive'",
     "wf_bs (?x # ?bs) ?p = wf_bs (?y # ?bs) ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2)),
         template_var 1),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_var 1))),
    ("Polynomial_Expression.head_head",
     "isnpolyh ?p ?n0.0 ==> head (head ?p) = head ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 0, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 1)))),
    ("Polynomial_Expression.shift1_head",
     "isnpolyh ?p ?n0.0 ==> head (shift1 ?p) = head ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("Polynomial_Expression.polysub_same_0",
     "isnpolyh ?p ?n0.0 ==> ?p -\<^sub>p ?p = 0\<^sub>p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 1),
         template_app (template_hole 1, template_hole 0)))),
    ("Polynomial_Expression.degree_polyneg",
     "isnpolyh ?p ?n ==>
      Polynomial_Expression.degree (~\<^sub>p ?p) =
      Polynomial_Expression.degree ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("Polynomial_Expression.polymul_1",
     "isnpolyh ?p ?n0.0 ==> ?p *\<^sub>p (1::?'a)\<^sub>p = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_hole 0)),
         template_var 1))),
    ("Polynomial_Expression.polymul_1",
     "isnpolyh ?p ?n0.0 ==> (1::?'a)\<^sub>p *\<^sub>p ?p = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 1),
         template_var 1))),
    ("Polynomial_Expression.polyadd_0",
     "isnpolyh ?p ?n0.0 ==> ?p +\<^sub>p 0\<^sub>p = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_hole 0)),
         template_var 1))),
    ("Polynomial_Expression.polyadd_0",
     "isnpolyh ?p ?n0.0 ==> 0\<^sub>p +\<^sub>p ?p = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 1),
         template_var 1))),
    ("Polynomial_Expression.wf_bs_decrpoly",
     "wf_bs ?bs (decrpoly ?p) ==> wf_bs (?x # ?bs) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Polynomial_Expression.poly_cmul",
     "Ipoly ?bs (poly_cmul ?c ?p) = Ipoly ?bs (Mul (?c)\<^sub>p ?p)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Polynomial_Expression.swap_nz",
     "(swap ?n ?m ?p = 0\<^sub>p) = (?p = 0\<^sub>p)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_equation
        (template_var 0, template_app (template_hole 1, template_hole 0)))),
    ("Polynomial_Expression.decr_maxindex",
     "polybound0 ?p ==> maxindex (decrpoly ?p) = maxindex ?p - 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_hole 0)))),
    ("Polynomial_Expression.coefficients_isconst",
     "isnpolyh ?p ?n ==> ALL q:set (coefficients ?p). isconstant q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             t_empty)
           ))),
    ("Polynomial_Expression.polyneg_head",
     "isnpolyh ?p ?n ==> head (~\<^sub>p ?p) = ~\<^sub>p (head ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 1))))),
    ("Polynomial_Expression.polymul_0",
     "isnpolyh ?p ?n0.0 ==> ?p *\<^sub>p 0\<^sub>p = 0\<^sub>p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_hole 0)),
         template_app (template_hole 1, template_hole 0)))),
    ("Polynomial_Expression.polymul_0",
     "isnpolyh ?p ?n0.0 ==> 0\<^sub>p *\<^sub>p ?p = 0\<^sub>p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 1),
         template_app (template_hole 1, template_hole 0)))),
    ("Polynomial_Expression.degree_npolyhCN",
     "isnpolyh (CN ?c ?n ?p) ?n0.0 ==> Polynomial_Expression.degree ?c = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 3), template_hole 0))),
    ("Polynomial_Expression.polyadd_norm",
     "[| isnpoly ?p; isnpoly ?q |] ==> isnpoly (?p +\<^sub>p ?q)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Polynomial_Expression.polymul_norm",
     "[| isnpoly ?p; isnpoly ?q |] ==> isnpoly (?p *\<^sub>p ?q)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Polynomial_Expression.polysub_norm",
     "[| isnpoly ?p; isnpoly ?q |] ==> isnpoly (?p -\<^sub>p ?q)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Polynomial_Expression.polymul",
     "Ipoly ?bs (?p *\<^sub>p ?q) = Ipoly ?bs ?p * Ipoly ?bs ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Polynomial_Expression.RIpoly_eqs",
     "Ipoly ?bs (Add ?a ?b) = Ipoly ?bs ?a + Ipoly ?bs ?b",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Polynomial_Expression.RIpoly_eqs",
     "Ipoly ?bs (Mul ?a ?b) = Ipoly ?bs ?a * Ipoly ?bs ?b",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Polynomial_Expression.RIpoly_eqs",
     "Ipoly ?bs (Sub ?a ?b) = Ipoly ?bs ?a - Ipoly ?bs ?b",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Polynomial_Expression.polyadd",
     "Ipoly ?bs (?p +\<^sub>p ?q) = Ipoly ?bs ?p + Ipoly ?bs ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Polynomial_Expression.polysub",
     "Ipoly ?bs (?p -\<^sub>p ?q) = Ipoly ?bs ?p - Ipoly ?bs ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Polynomial_Expression.wf_bs_polyadd",
     "wf_bs ?bs ?p & wf_bs ?bs ?q --> wf_bs ?bs (?p +\<^sub>p ?q)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("Polynomial_Expression.degree_CN'",
     "isnpolyh ?p ?n ==>
      Polynomial_Expression.degree ?p
      <= Polynomial_Expression.degree (CN ?c ?n ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_var 2))))),
    ("Polynomial_Expression.coefficients_normh",
     "isnpolyh ?p ?n0.0 ==> ALL q:set (coefficients ?p). isnpolyh q ?n0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             t_empty)
           ))),
    ("Polynomial_Expression.degreen_polyneg",
     "isnpolyh ?p ?n0.0 ==> degreen (~\<^sub>p ?p) ?m = degreen ?p ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Polynomial_Expression.wf_bs_coefficients",
     "wf_bs ?bs ?p ==> ALL c:set (coefficients ?p). wf_bs ?bs c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))),
             t_empty)
           ))),
    ("Polynomial_Expression.degreen_npolyhCN",
     "isnpolyh (CN ?c ?n ?p) ?n0.0 ==> degreen ?c ?n = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_hole 0))),
    ("Polynomial_Expression.isnpolyh_mono",
     "[| ?n' <= ?n; isnpolyh ?p ?n |] ==> isnpolyh ?p ?n'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Polynomial_Expression.degree0_polybound0",
     "[| isnpolyh ?p ?n; Polynomial_Expression.degree ?p = 0 |]
      ==> polybound0 ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app (template_hole 2, template_var 1), template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Polynomial_Expression.decrpoly",
     "polybound0 ?t ==> Ipoly (?x # ?bs) ?t = Ipoly ?bs (decrpoly ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 0, template_var 2))))),
    ("Polynomial_Expression.headconst_zero",
     "isnpolyh ?p ?n0.0 ==> (headconst ?p = (0::?'a)) = (?p = 0\<^sub>p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_bimplication
        (template_equation
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_equation
          (template_var 1,
           template_app (template_hole 0, template_hole 2))))),
    ("Polynomial_Expression.polypoly_polypoly'",
     "isnpolyh ?p ?n0.0 ==> polypoly (?x # ?bs) ?p = polypoly' ?bs ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 3)))),
    ("Polynomial_Expression.wf_bs_I",
     "wf_bs ?bs ?p ==> Ipoly (?bs @ ?bs') ?p = Ipoly ?bs ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 1)))),
    ("Polynomial_Expression.length_le_list_ex",
     "length ?xs <= ?n ==> EX ys. length (?xs @ ys) = ?n",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Polynomial_Expression.wf_bs_insensitive",
     "length ?bs = length ?bs' ==> wf_bs ?bs ?p = wf_bs ?bs' ?p",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Polynomial_Expression.shift1_isnpoly",
     "[| isnpoly ?p; ?p ~= 0\<^sub>p |] ==> isnpoly (shift1 ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 2, template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Polynomial_Expression.degree_isnpolyh_Suc'",
     "[| 0 < ?n; isnpolyh ?p ?n |] ==> Polynomial_Expression.degree ?p = 0",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 3))),
    ("Polynomial_Expression.head_isnpolyh_Suc'",
     "[| 0 < ?n; isnpolyh ?p ?n |] ==> head ?p = ?p",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Polynomial_Expression.funpow_shift1",
     "Ipoly ?bs ((shift1 ^^ ?n) ?p) = Ipoly ?bs (Mul (Pw (Bound 0) ?n) ?p)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 1),
             template_hole 4),
           template_var 0)),
       template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)),
               template_var 1)),
           template_var 0)))),
    ("Polynomial_Expression.polybound0_I",
     "polybound0 ?a ==> Ipoly (?b # ?bs) ?a = Ipoly (?b' # ?bs) ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 3)))),
    ("Polynomial_Expression.degree_CN",
     "isnpolyh ?p ?n ==>
      Polynomial_Expression.degree (CN ?c ?n ?p)
      <= 1 + Polynomial_Expression.degree ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 3, template_var 2))))),
    ("Polynomial_Expression.head_nz",
     "isnpolyh ?p ?n0.0 ==> (head ?p = 0\<^sub>p) = (?p = 0\<^sub>p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_bimplication
        (template_equation
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_hole 0)),
         template_equation
          (template_var 1,
           template_app (template_hole 1, template_hole 0))))),
    ("Polynomial_Expression.polyneg0",
     "isnpolyh ?p ?n ==> (~\<^sub>p ?p = 0\<^sub>p) = (?p = 0\<^sub>p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_bimplication
        (template_equation
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_hole 0)),
         template_equation
          (template_var 1,
           template_app (template_hole 1, template_hole 0))))),
    ("Polynomial_Expression.take_maxindex_wf",
     "wf_bs ?bs ?p ==> Ipoly (take (maxindex ?p) ?bs) ?p = Ipoly ?bs ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Polynomial_Expression.pnormal_length",
     "?p ~= [] ==> pnormal ?p = (length (pnormalize ?p) = length ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_implication
        ([template_predicate
           (template_app (template_hole 3, template_var 0))],
         template_equation
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 1, template_var 0))))),
    ("Polynomial_Expression.funpow_shift1_nz",
     "?p ~= 0\<^sub>p ==> (shift1 ^^ ?n) ?p ~= 0\<^sub>p",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 3, template_hole 2))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0),
               template_var 1),
             template_app (template_hole 3, template_hole 2))
           ))),
    ("Polynomial_Expression.wf_bs_coefficients'",
     "ALL c:set (coefficients ?p). wf_bs ?bs c ==> wf_bs (?x # ?bs) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 2))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 2)
           ))),
    ("Polynomial_Expression.degreen_0",
     "[| isnpolyh ?p ?n; ?m < ?n |] ==> degreen ?p ?m = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_hole 0))),
    ("Polynomial_Expression.headn_0",
     "[| isnpolyh ?p ?n; ?m < ?n |] ==> headn ?p ?m = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 2))),
    ("Polynomial_Expression.decrpoly_normh",
     "[| isnpolyh ?p ?n0.0; polybound0 ?p |]
      ==> isnpolyh (decrpoly ?p) (?n0.0 - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Polynomial_Expression.wf_bs_polyul",
     "[| wf_bs ?bs ?p; wf_bs ?bs ?q |] ==> wf_bs ?bs (?p *\<^sub>p ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Polynomial_Expression.wf_bs_polysub",
     "[| wf_bs ?bs ?p; wf_bs ?bs ?q |] ==> wf_bs ?bs (?p -\<^sub>p ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Polynomial_Expression.funpow_shift1_1",
     "Ipoly ?bs ((shift1 ^^ ?n) ?p) =
      Ipoly ?bs ((shift1 ^^ ?n) (1::?'a)\<^sub>p *\<^sub>p ?p)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 1),
             template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 3),
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Polynomial_Expression.isnonconstant_nonconstant",
     "isnonconstant ?p ==>
      nonconstant (polypoly ?bs ?p) = (Ipoly ?bs (head ?p) ~= (0::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_var 1))
              )],
         template_negation
          (
             template_equation
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 1, template_var 1)),
               template_hole 0)
             )))),
    ("Polynomial_Expression.isnonconstant_pnormal_iff",
     "isnonconstant ?p ==>
      pnormal (polypoly ?bs ?p) = (Ipoly ?bs (head ?p) ~= (0::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_var 1))
              )],
         template_negation
          (
             template_equation
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 1, template_var 1)),
               template_hole 0)
             )))),
    ("Polynomial_Expression.headn_nz",
     "isnpolyh ?p ?n0.0 ==> (headn ?p ?m = 0\<^sub>p) = (?p = 0\<^sub>p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0),
           template_app (template_hole 1, template_hole 0)),
         template_equation
          (template_var 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Polynomial_Expression.polypoly'_poly",
     "isnpolyh ?p ?n0.0 ==>
      Ipoly (?x # ?bs) ?p = poly (polypoly' ?bs ?p) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)),
           template_var 1)))),
    ("Polynomial_Expression.funpow_shift1_isnpoly",
     "[| isnpoly ?p; ?p ~= 0\<^sub>p |] ==> isnpoly ((shift1 ^^ ?n) ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 3, template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0),
               template_var 1))
           ))),
    ("Polynomial_Expression.shift1_isnpolyh",
     "[| isnpolyh ?p ?n0.0; ?p ~= 0\<^sub>p |] ==> isnpolyh (shift1 ?p) 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 3, template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 1, template_var 1)),
             template_hole 0)
           ))),
    ("Polynomial_Expression.polysubst0_I",
     "Ipoly (?b # ?bs) (polysubst0 ?a ?t) =
      Ipoly (Ipoly (?b # ?bs) ?a # ?bs) ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2)),
                 template_var 1)),
             template_var 2)),
         template_var 0))),
    ("Polynomial_Expression.polyadd_normh",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0 |]
      ==> isnpolyh (?p +\<^sub>p ?q) (min ?n0.0 ?n1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Polynomial_Expression.polymul_normh",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0 |]
      ==> isnpolyh (?p *\<^sub>p ?q) (min ?n0.0 ?n1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Polynomial_Expression.polysub_normh",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0 |]
      ==> isnpolyh (?p -\<^sub>p ?q) (min ?n0.0 ?n1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Polynomial_Expression.polymul_commute",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0 |]
      ==> ?p *\<^sub>p ?q = ?q *\<^sub>p ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 3)))),
    ("Polynomial_Expression.polyadd_commute",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0 |]
      ==> ?p +\<^sub>p ?q = ?q +\<^sub>p ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 3)))),
    ("Polynomial_Expression.RIpoly_eqs",
     "Ipoly ?bs (CN ?c ?n ?p) = Ipoly ?bs ?c + ?bs ! ?n * Ipoly ?bs ?p",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0))))),
    ("Polynomial_Expression.polypoly_poly",
     "isnpolyh ?p ?n0.0 ==>
      Ipoly (?x # ?bs) ?p = poly (polypoly (?x # ?bs) ?p) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_var 3)),
           template_var 1)))),
    ("Polynomial_Expression.polypoly_poly_polybound0",
     "[| isnpolyh ?p ?n0.0; polybound0 ?p |]
      ==> polypoly ?bs ?p = [Ipoly ?bs ?p]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_hole 0)))),
    ("Polynomial_Expression.degree_degree",
     "isnonconstant ?p ==>
      (Polynomial_Expression.degree ?p =
       semiring_0_class.degree (polypoly ?bs ?p)) =
      (Ipoly ?bs (head ?p) ~= (0::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1))],
       template_bimplication
        (template_equation
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 1))),
         template_negation
          (
             template_equation
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 1, template_var 1)),
               template_hole 0)
             )))),
    ("Polynomial_Expression.headnz",
     "[| isnpolyh ?p ?n; ?p ~= 0\<^sub>p |] ==> headn ?p ?m ~= 0\<^sub>p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 2, template_hole 1))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_app (template_hole 2, template_hole 1))
           ))),
    ("Polynomial_Expression.degree_polyadd",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0 |]
      ==> Polynomial_Expression.degree (?p +\<^sub>p ?q)
          <= max (Polynomial_Expression.degree ?p)
              (Polynomial_Expression.degree ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 3)),
           template_app (template_hole 2, template_var 1))))),
    ("Polynomial_Expression.funpow_shift1_head",
     "[| isnpolyh ?p ?n0.0; ?p ~= 0\<^sub>p |]
      ==> head ((shift1 ^^ ?k) ?p) = head ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 4, template_hole 3))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0),
             template_var 2)),
         template_app (template_hole 2, template_var 2)))),
    ("Polynomial_Expression.degree_polymul",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0 |]
      ==> Polynomial_Expression.degree (?p *\<^sub>p ?q)
          <= Polynomial_Expression.degree ?p +
             Polynomial_Expression.degree ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 3)),
           template_app (template_hole 2, template_var 1))))),
    ("Polynomial_Expression.polysub_0",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0 |]
      ==> (?p -\<^sub>p ?q = 0\<^sub>p) = (?p = ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_app (template_hole 1, template_hole 0)),
         template_equation (template_var 3, template_var 1)))),
    ("Polynomial_Expression.degree_polysub",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0 |]
      ==> Polynomial_Expression.degree (?p -\<^sub>p ?q)
          <= max (Polynomial_Expression.degree ?p)
              (Polynomial_Expression.degree ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 3)),
           template_app (template_hole 2, template_var 1))))),
    ("Polynomial_Expression.polysubst0_I'",
     "polybound0 ?a ==>
      Ipoly (?b # ?bs) (polysubst0 ?a ?t) =
      Ipoly (Ipoly (?b' # ?bs) ?a # ?bs) ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 2)),
                   template_var 4)),
               template_var 2)),
           template_var 1)))),
    ("Polynomial_Expression.behead",
     "isnpolyh ?p ?n ==>
      Ipoly ?bs
       (Add (Mul (head ?p) (Pw (Bound 0) (Polynomial_Expression.degree ?p)))
         (behead ?p)) =
      Ipoly ?bs ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 2)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)),
                   template_app (template_hole 1, template_var 2)))),
             template_app (template_hole 0, template_var 2))),
         template_app
          (template_app (template_hole 8, template_var 0),
           template_var 2)))),
    ("Polynomial_Expression.isnpolyh_zero_iff",
     "[| isnpolyh ?p ?n0.0;
         ALL bs. wf_bs bs ?p --> Ipoly bs ?p = (0::?'a) |]
      ==> ?p = 0\<^sub>p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_hole 2)))),
    ("Polynomial_Expression.isnpolyh_unique",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0 |]
      ==> (ALL bs. Ipoly bs ?p = Ipoly bs ?q) = (?p = ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_implication
        ([template_predicate (template_app (template_hole 3, t_empty))],
         template_equation (template_var 3, template_var 1)))),
    ("Polynomial_Expression.polyadd_eq_const_degree",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0;
         ?p +\<^sub>p ?q = (?c)\<^sub>p |]
      ==> Polynomial_Expression.degree ?p =
          Polynomial_Expression.degree ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 2),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 4),
         template_app (template_hole 0, template_var 2)))),
    ("Polynomial_Expression.funpow_isnpolyh",
     "[| !!p. isnpolyh p ?n ==> isnpolyh (?f p) ?n; isnpolyh ?p ?n |]
      ==> isnpolyh ((?f ^^ ?k) ?p) ?n",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 1)),
             template_var 3)
           ))),
    ("Polynomial_Expression.polymul_properties",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0; ?m <= min ?n0.0 ?n1.0 |]
      ==> isnpolyh (?p *\<^sub>p ?q) (min ?n0.0 ?n1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 1, template_var 3),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1))
           ))),
    ("Polynomial_Expression.polyadd_eq_const_degreen",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0;
         ?p +\<^sub>p ?q = (?c)\<^sub>p |]
      ==> degreen ?p ?m = degreen ?q ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 5), template_var 3),
          template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 5), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Polynomial_Expression.polymul_eq0_iff",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0 |]
      ==> (?p *\<^sub>p ?q = 0\<^sub>p) =
          (?p = 0\<^sub>p | ?q = 0\<^sub>p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 1),
           template_app (template_hole 2, template_hole 1)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app (template_hole 2, template_hole 1))),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app (template_hole 2, template_hole 1)))
             )))),
    ("Polynomial_Expression.polyadd_different_degree",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0;
         Polynomial_Expression.degree ?p ~=
         Polynomial_Expression.degree ?q |]
      ==> Polynomial_Expression.degree (?p +\<^sub>p ?q) =
          max (Polynomial_Expression.degree ?p)
           (Polynomial_Expression.degree ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 3),
              template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 3)),
           template_app (template_hole 2, template_var 1))))),
    ("Polynomial_Expression.degreen_polyadd",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0; ?m <= max ?n0.0 ?n1.0 |]
      ==> degreen (?p +\<^sub>p ?q) ?m
          <= max (degreen ?p ?m) (degreen ?q ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Polynomial_Expression.swapnorm",
     "[| ?n < length ?bs; ?m < length ?bs |]
      ==> Ipoly ?bs (swapnorm ?n ?m ?t) =
          Ipoly (?bs[?n := ?bs ! ?m, ?m := ?bs ! ?n]) ?t",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 3),
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1))),
                 template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3))),
           template_var 0)))),
    ("Polynomial_Expression.swap",
     "[| ?n < length ?bs; ?m < length ?bs |]
      ==> Ipoly ?bs (swap ?n ?m ?t) =
          Ipoly (?bs[?n := ?bs ! ?m, ?m := ?bs ! ?n]) ?t",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 3),
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1))),
                 template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3))),
           template_var 0)))),
    ("Polynomial_Expression.polyadd_head",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0;
         Polynomial_Expression.degree ?p ~=
         Polynomial_Expression.degree ?q |]
      ==> head (?p +\<^sub>p ?q) =
          (if Polynomial_Expression.degree ?p
              < Polynomial_Expression.degree ?q
           then head ?q else head ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 3),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 5, template_var 3)),
                 template_app (template_hole 5, template_var 1))),
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 3))))),
    ("Polynomial_Expression.polymul_properties",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0; ?m <= min ?n0.0 ?n1.0 |]
      ==> (?p *\<^sub>p ?q = 0\<^sub>p) =
          (?p = 0\<^sub>p | ?q = 0\<^sub>p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 6, template_var 3),
            template_var 1))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 2),
           template_app (template_hole 2, template_hole 1)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app (template_hole 2, template_hole 1))),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app (template_hole 2, template_hole 1)))
             )))),
    ("Polynomial_Expression.polymul_head_polyeq",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0; ?p ~= 0\<^sub>p;
         ?q ~= 0\<^sub>p |]
      ==> head (?p *\<^sub>p ?q) = head ?p *\<^sub>p head ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_var 3,
              template_app (template_hole 3, template_hole 2))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 3, template_hole 2))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 3)),
           template_app (template_hole 1, template_var 1))))),
    ("Polynomial_Expression.degree_polysub_samehead",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0; head ?p = head ?q;
         Polynomial_Expression.degree ?p =
         Polynomial_Expression.degree ?q |]
      ==> Polynomial_Expression.degree (?p -\<^sub>p ?q)
          < Polynomial_Expression.degree ?p |
          ?p -\<^sub>p ?q = 0\<^sub>p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app (template_hole 7, template_var 3),
          template_app (template_hole 7, template_var 1)),
        template_equation
         (template_app (template_hole 5, template_var 3),
          template_app (template_hole 5, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 1))),
                 template_app (template_hole 5, template_var 3))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1)),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Polynomial_Expression.polyadd_different_degreen",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0;
         degreen ?p ?m ~= degreen ?q ?m; ?m <= min ?n0.0 ?n1.0 |]
      ==> degreen (?p +\<^sub>p ?q) ?m =
          max (degreen ?p ?m) (degreen ?q ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 0),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 0))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 2, template_var 3),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0))))),
    ("Polynomial_Expression.polymul_degreen",
     "[| isnpolyh ?p ?n0.0; isnpolyh ?q ?n1.0; ?m <= min ?n0.0 ?n1.0 |]
      ==> degreen (?p *\<^sub>p ?q) ?m =
          (if ?p = 0\<^sub>p | ?q = 0\<^sub>p then 0
           else degreen ?p ?m + degreen ?q ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 10, template_var 3),
            template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 2)),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 4),
                         template_app (template_hole 3, template_hole 2))),
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_app (template_hole 3, template_hole 2)))),
                 template_hole 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 8, template_var 4),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_var 0)))
             ))))]
