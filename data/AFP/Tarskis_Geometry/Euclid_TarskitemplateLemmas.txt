   [("Euclid_Tarski.Col_dep2",
     "real_euclid.Col ?a ?b ?c = dep2 (?b - ?a) (?c - ?a)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Euclid_Tarski.rearrange_real_euclid_B",
     "(?y - ?w = ?h *\<^sub>R (?z - ?w)) =
      (?y = ?h *\<^sub>R ?z + (1 - ?h) *\<^sub>R ?w)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 2))),
       template_equation
        (template_var 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 2))))),
    ("Euclid_Tarski.real_euclid_th5_3",
     "[| B\<^sub>\<real> ?a ?b ?d; B\<^sub>\<real> ?a ?c ?d |]
      ==> B\<^sub>\<real> ?a ?b ?c | B\<^sub>\<real> ?a ?c ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0),
               template_var 2))
           ))),
    ("Euclid_Tarski.real_euclid_B_disjunction",
     "[| 0 <= ?l; ?b - ?a = ?l *\<^sub>R (?c - ?a) |]
      ==> B\<^sub>\<real> ?a ?b ?c | B\<^sub>\<real> ?a ?c ?b",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 3),
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Euclid_Tarski.real_euclid_th5_1",
     "[| ?a ~= ?b; B\<^sub>\<real> ?a ?b ?c; B\<^sub>\<real> ?a ?b ?d |]
      ==> B\<^sub>\<real> ?a ?c ?d | B\<^sub>\<real> ?a ?d ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("Euclid_Tarski.rearrange_real_euclid_B_2",
     "?l ~= 0 ==>
      (?b - ?a = ?l *\<^sub>R (?c - ?a)) =
      (?c = (1 / ?l) *\<^sub>R ?b + (1 - 1 / ?l) *\<^sub>R ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 8))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 1))),
         template_equation
          (template_var 0,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 3)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_hole 1),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 3))),
               template_var 1))))))]
