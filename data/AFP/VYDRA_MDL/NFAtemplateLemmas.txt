   [("NFA.finite_SQ", "finite (NFA.SQ ?q0.0 ?transs)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("NFA.finite_Q", "finite (NFA.Q ?q0.0 ?qf ?transs)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("NFA.step_symb_set_empty", "NFA.step_symb_set ?q0.0 ?transs {} = {}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("NFA.run_empty", "NFA.run ?q0.0 ?transs {} ?bss = {}",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_hole 0),
         template_var 0),
       template_hole 0)),
    ("NFA.run_Nil", "NFA.run ?q0.0 ?transs ?R [] = ?R",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0),
       template_var 0)),
    ("NFA.step_eps_closure_set_empty",
     "NFA.step_eps_closure_set ?q0.0 ?transs {} ?bs = {}",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_hole 0),
         template_var 0),
       template_hole 0)),
    ("NFA.step_eps_closure_set_refl",
     "?R <= NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs",
     template_inequation
      (less_equals, template_var 3,
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 3),
         template_var 0))),
    ("NFA.run_accept_eps_empty",
     "~ NFA.run_accept_eps ?q0.0 ?qf ?transs {} ?bss ?bs",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_hole 0),
                 template_var 1),
               template_var 0)
             )
         )),
    ("NFA.accept_eps_empty",
     "NFA.accept_eps ?q0.0 ?qf ?transs {} ?bs = False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_hole 1),
         template_var 0),
       template_hole 0)),
    ("NFA.SQ_sub_Q", "NFA.SQ ?q0.0 ?transs <= NFA.Q ?q0.0 ?qf ?transs",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 2), template_var 1),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("NFA.step_symb_set_code",
     "NFA.step_symb_set ?q0.0 ?transs ?R =
      \<Union> (NFA.step_symb_sucs ?q0.0 ?transs ` ?R)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("NFA.step_eps_closure_set_mono'",
     "NFA.step_eps_closure_set ?q0.0 ?transs ?R []
      <= NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_hole 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("NFA.step_symb_sucs_sound",
     "(?q' : NFA.step_symb_sucs ?q0.0 ?transs ?q) =
      NFA.step_symb ?q0.0 ?transs ?q ?q'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 3))),
    ("NFA.step_symb_dest",
     "NFA.step_symb ?q0.0 ?transs ?q ?q' ==> ?q : NFA.SQ ?q0.0 ?transs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("NFA.step_symb_set_proj",
     "NFA.step_symb_set ?q0.0 ?transs ?R =
      NFA.step_symb_set ?q0.0 ?transs (?R Int NFA.SQ ?q0.0 ?transs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("NFA.step_eps_dest",
     "NFA.step_eps ?q0.0 ?transs ?bs ?q ?q' ==> ?q : NFA.SQ ?q0.0 ?transs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3))
           ))),
    ("NFA.run_accept_eps_Nil",
     "NFA.run_accept_eps ?q0.0 ?qf ?transs ?R [] ?cs =
      NFA.accept_eps ?q0.0 ?qf ?transs ?R ?cs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_hole 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("NFA.step_eps_sucs_sound",
     "(?q' : NFA.step_eps_sucs ?q0.0 ?transs ?bs ?q) =
      NFA.step_eps ?q0.0 ?transs ?bs ?q ?q'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_var 4))),
    ("NFA.step_eps_sucs'_sound",
     "(?q' : NFA.step_eps_sucs' ?transs ?len ?bs ?q) =
      NFA.step_eps' ?transs ?len ?bs ?q ?q'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_var 4))),
    ("NFA.step_symb_set_mono",
     "?R <= ?S ==>
      NFA.step_symb_set ?q0.0 ?transs ?R
      <= NFA.step_symb_set ?q0.0 ?transs ?S",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("NFA.step_eps_mono",
     "NFA.step_eps ?q0.0 ?transs [] ?q ?q' ==>
      NFA.step_eps ?q0.0 ?transs ?bs ?q ?q'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_hole 0),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("NFA.delta_eps",
     "NFA.delta ?q0.0 ?transs
       (NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs) ?bs =
      NFA.delta ?q0.0 ?transs ?R ?bs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("NFA.step_eps_closure_set_idem",
     "NFA.step_eps_closure_set ?q0.0 ?transs
       (NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs) ?bs =
      NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("NFA.transs_q_in_set",
     "?q : NFA.SQ ?q0.0 ?transs ==> ?transs ! (?q - ?q0.0) : set ?transs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("NFA.delta_step_symb_set_absorb",
     "NFA.delta ?q0.0 ?transs ?R ?bs =
      NFA.delta ?q0.0 ?transs ?R ?bs Un NFA.step_symb_set ?q0.0 ?transs ?R",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1)))),
    ("NFA.step_symb_set_split",
     "NFA.step_symb_set ?q0.0 ?transs (?R Un ?S) =
      NFA.step_symb_set ?q0.0 ?transs ?R Un
      NFA.step_symb_set ?q0.0 ?transs ?S",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("NFA.q_in_SQ",
     "(?q : NFA.SQ ?q0.0 ?transs) =
      (?q0.0 <= ?q & ?q < ?q0.0 + length ?transs)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("NFA.step_eps_closure_set_mono",
     "?R <= ?S ==>
      NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs
      <= NFA.step_eps_closure_set ?q0.0 ?transs ?S ?bs",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 3),
           template_var 0)))),
    ("NFA.step_eps_set_mono",
     "?R <= ?S ==>
      NFA.step_eps_set ?q0.0 ?transs ?bs ?R
      <= NFA.step_eps_set ?q0.0 ?transs ?bs ?S",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 3)))),
    ("NFA.step_eps_set_sound",
     "NFA.step_eps_set ?q0.0 ?transs ?bs ?R =
      {q'. EX q:?R. NFA.step_eps ?q0.0 ?transs ?bs q q'}",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("NFA.step_eps_set'_sound",
     "NFA.step_eps_set' ?transs ?len ?bs ?R =
      {q'. EX q:?R. NFA.step_eps' ?transs ?len ?bs q q'}",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("NFA.run_comp",
     "NFA.run ?q0.0 ?transs ?R (?bss @ ?css) =
      NFA.run ?q0.0 ?transs (NFA.run ?q0.0 ?transs ?R ?bss) ?css",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("NFA.run_Cons",
     "NFA.run ?q0.0 ?transs ?R (?bs # ?bss) =
      NFA.run ?q0.0 ?transs (NFA.delta ?q0.0 ?transs ?R ?bs) ?bss",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("NFA.delta_split",
     "NFA.delta ?q0.0 ?transs (?R Un ?S) ?bs =
      NFA.delta ?q0.0 ?transs ?R ?bs Un NFA.delta ?q0.0 ?transs ?S ?bs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("NFA.run_split",
     "NFA.run ?q0.0 ?transs (?R Un ?S) ?bss =
      NFA.run ?q0.0 ?transs ?R ?bss Un NFA.run ?q0.0 ?transs ?S ?bss",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("NFA.step_eps_closure_set_split",
     "NFA.step_eps_closure_set ?q0.0 ?transs (?R Un ?S) ?bs =
      NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs Un
      NFA.step_eps_closure_set ?q0.0 ?transs ?S ?bs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("NFA.step_symb_set_Un",
     "NFA.step_symb_set ?q0.0 ?transs (\<Union> (?R ` ?X)) =
      (UN x:?X. NFA.step_symb_set ?q0.0 ?transs (?R x))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("NFA.run_accept_eps_Nil_eps",
     "NFA.run_accept_eps ?q0.0 ?qf ?transs
       (NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs) [] ?bs =
      NFA.run_accept_eps ?q0.0 ?qf ?transs ?R [] ?bs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 0),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_hole 0),
         template_var 0))),
    ("NFA.step_eps_accept_eps",
     "[| NFA.step_eps ?q0.0 ?transs ?bs ?q ?qf; ?q : ?R |]
      ==> NFA.accept_eps ?q0.0 ?qf ?transs ?R ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 1),
                 template_var 4),
               template_var 0),
             template_var 3)
           ))),
    ("NFA.step_eps_closure_dest",
     "[| NFA.step_eps_closure ?q0.0 ?transs ?bs ?q ?q'; ?q ~= ?q' |]
      ==> ?q : NFA.SQ ?q0.0 ?transs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3))
           ))),
    ("NFA.rtranclp_closed_sub'",
     "?R^** ?q ?q' ==> ?q' = ?q | (EX q''. ?R ?q q'' & ?R^** q'' ?q')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_app (template_hole 1, t_empty))
           ))),
    ("NFA.rtranclp_unfold",
     "?R^** ?x ?z ==> ?x = ?z | (EX y. ?R ?x y & ?R^** y ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app (template_hole 1, t_empty))
           ))),
    ("NFA.delta_sub_eps_mono",
     "?S <= NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs ==>
      NFA.delta ?q0.0 ?transs ?S ?bs <= NFA.delta ?q0.0 ?transs ?R ?bs",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("NFA.step_eps_closure_set_flip",
     "NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs = ?R Un ?S ==>
      NFA.step_eps_closure_set ?q0.0 ?transs ?S ?bs <= ?R Un ?S",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2),
            template_var 1),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_var 0),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("NFA.step_step_eps_closure",
     "[| NFA.step_eps ?q0.0 ?transs ?bs ?q ?q'; ?q : ?R |]
      ==> ?q' : NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 4),
                 template_var 0),
               template_var 3))
           ))),
    ("NFA.delta_Un",
     "NFA.delta ?q0.0 ?transs (\<Union> (?R ` ?X)) ?bs =
      (UN x:?X. NFA.delta ?q0.0 ?transs (?R x) ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("NFA.run_Un",
     "NFA.run ?q0.0 ?transs (\<Union> (?R ` ?X)) ?bss =
      (UN x:?X. NFA.run ?q0.0 ?transs (?R x) ?bss)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("NFA.step_eps_closure_set_Un",
     "NFA.step_eps_closure_set ?q0.0 ?transs (\<Union> (?R ` ?X)) ?bs =
      (UN x:?X. NFA.step_eps_closure_set ?q0.0 ?transs (?R x) ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("NFA.run_accept_eps_Cons",
     "NFA.run_accept_eps ?q0.0 ?qf ?transs ?R (?bs # ?bss) ?cs =
      NFA.run_accept_eps ?q0.0 ?qf ?transs (NFA.delta ?q0.0 ?transs ?R ?bs)
       ?bss ?cs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("NFA.accept_eps_split",
     "NFA.accept_eps ?q0.0 ?qf ?transs (?R Un ?S) ?bs =
      (NFA.accept_eps ?q0.0 ?qf ?transs ?R ?bs |
       NFA.accept_eps ?q0.0 ?qf ?transs ?S ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 5),
               template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("NFA.accept_eps_Un",
     "NFA.accept_eps ?q0.0 ?qf ?transs (\<Union> (?R ` ?X)) ?bs =
      (EX x:?X. NFA.accept_eps ?q0.0 ?qf ?transs (?R x) ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_var 4),
             template_var 3),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("NFA.step_eps_closure_empty",
     "[| NFA.step_eps_closure ?q0.0 ?transs ?bs ?q ?q';
         !!q'. ~ NFA.step_eps ?q0.0 ?transs ?bs ?q q' |]
      ==> ?q = ?q'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("NFA.run_accept_eps_Cons_eps",
     "NFA.run_accept_eps ?q0.0 ?qf ?transs
       (NFA.step_eps_closure_set ?q0.0 ?transs ?R ?cs) (?cs # ?css) ?bs =
      NFA.run_accept_eps ?q0.0 ?qf ?transs ?R (?cs # ?css) ?bs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 6),
                   template_var 4),
                 template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("NFA.run_accept_eps_Un",
     "NFA.run_accept_eps ?q0.0 ?qf ?transs (\<Union> (?R ` ?X)) ?bss ?bs =
      (EX x:?X. NFA.run_accept_eps ?q0.0 ?qf ?transs (?R x) ?bss ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty), template_var 2))),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("NFA.step_eps_closure_set_code",
     "NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs =
      (let R' = ?R Un NFA.step_eps_set ?q0.0 ?transs ?bs ?R
       in if ?R = R' then ?R
          else NFA.step_eps_closure_set ?q0.0 ?transs R' ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 0),
               template_var 1))),
         t_empty))),
    ("NFA.step_eps_closure_set'_code",
     "NFA.step_eps_closure_set' ?transs ?len ?R ?bs =
      (let R' = ?R Un NFA.step_eps_set' ?transs ?len ?bs ?R
       in if ?R = R' then ?R
          else NFA.step_eps_closure_set' ?transs ?len R' ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 0),
               template_var 1))),
         t_empty))),
    ("NFA.run_accept_eps_split",
     "NFA.run_accept_eps ?q0.0 ?qf ?transs (?R Un ?S) ?bss ?bs =
      (NFA.run_accept_eps ?q0.0 ?qf ?transs ?R ?bss ?bs |
       NFA.run_accept_eps ?q0.0 ?qf ?transs ?S ?bss ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("NFA.step_eps_closure_set_step_id",
     "(!!q q'. q : ?R ==> ~ NFA.step_eps ?q0.0 ?transs ?bs q q') ==>
      NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs = ?R",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 3),
           template_var 0),
         template_var 3))),
    ("NFA.rtranclp_closed_sub",
     "[| ?R^** ?q ?q'; {q'. EX q:?X. ?R q q'} <= ?X; ?q : ?X |]
      ==> ?q' : ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 2, t_empty),
          template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("NFA.delta_eps_split",
     "NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs = ?R Un ?S ==>
      NFA.delta ?q0.0 ?transs ?R ?bs =
      NFA.step_symb_set ?q0.0 ?transs ?R Un NFA.delta ?q0.0 ?transs ?S ?bs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2),
            template_var 1),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 0),
             template_var 1))))),
    ("NFA.rtranclp_closed",
     "[| ?R^** ?q ?q'; ?X = ?X Un {q'. EX q:?X. ?R q q'}; ?q : ?X |]
      ==> ?q' : ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 3, template_var 0),
            template_app (template_hole 2, t_empty))),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("NFA.list_split_unfold",
     "(UN (ys, zs):list_split (?x # ?xs). ?f ys zs) =
      ?f [] (?x # ?xs) Un (UN (ys, zs):list_split ?xs. ?f (?x # ys) zs)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_var 2, template_hole 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app (template_hole 3, template_var 0)))))),
    ("NFA.step_eps_closure_set_unfold",
     "(!!q'. NFA.step_eps ?q0.0 ?transs ?bs ?q q' = (q' : ?X)) ==>
      NFA.step_eps_closure_set ?q0.0 ?transs {?q} ?bs =
      {?q} Un NFA.step_eps_closure_set ?q0.0 ?transs ?X ?bs",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3),
               template_var 0),
             template_var 2))))),
    ("NFA.run_accept_eps_Cons_delta_cong",
     "NFA.delta ?q0.0 ?transs ?R ?bs = NFA.delta ?q0.0 ?transs ?S ?bs ==>
      NFA.run_accept_eps ?q0.0 ?qf ?transs ?R (?bs # ?bss) ?cs =
      NFA.run_accept_eps ?q0.0 ?qf ?transs ?S (?bs # ?bss) ?cs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 7),
                template_var 6),
              template_var 3),
            template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 2),
                 template_var 6),
               template_var 5),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 2),
                 template_var 6),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_var 0)))),
    ("NFA.rtranclp_step",
     "[| ?R^** ?q ?q''; !!q'. ?R ?q q' = (q' : ?X) |]
      ==> ?q = ?q'' | (EX q':?X. ?R ?q q' & ?R^** q' ?q'')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0), t_empty))
           ))),
    ("NFA.run_eps_split",
     "[| NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs = ?R Un ?S;
         NFA.step_symb_set ?q0.0 ?transs ?R = {} |]
      ==> NFA.run ?q0.0 ?transs ?R (?bs # ?bss) =
          NFA.run ?q0.0 ?transs ?S (?bs # ?bss)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 5),
              template_var 4),
            template_var 3),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("NFA.run_accept_eps_Nil_eps_split",
     "[| NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs = ?R Un ?S;
         NFA.step_symb_set ?q0.0 ?transs ?R = {}; ?qf ~: ?R |]
      ==> NFA.run_accept_eps ?q0.0 ?qf ?transs ?R [] ?bs =
          NFA.run_accept_eps ?q0.0 ?qf ?transs ?S [] ?bs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 5),
              template_var 4),
            template_var 3),
          template_hole 5),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 3)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 0),
                 template_var 4),
               template_var 3),
             template_hole 0),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 0),
                 template_var 4),
               template_var 1),
             template_hole 0),
           template_var 2)))),
    ("NFA.run_accept_eps_Cons_eps_split",
     "[| NFA.step_eps_closure_set ?q0.0 ?transs ?R ?cs = ?R Un ?S;
         NFA.step_symb_set ?q0.0 ?transs ?R = {}; ?qf ~: ?R |]
      ==> NFA.run_accept_eps ?q0.0 ?qf ?transs ?R (?cs # ?css) ?bs =
          NFA.run_accept_eps ?q0.0 ?qf ?transs ?S (?cs # ?css) ?bs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 8, template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 7, template_var 5),
            template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 7),
              template_var 6),
            template_var 5),
          template_hole 5),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 5)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 2),
                 template_var 6),
               template_var 5),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 2),
                 template_var 6),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_var 0))))]
