Loading theory "HOL-Library.AList" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.Window")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TemporalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.IArray" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.NFA")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.MDL" via "Draft.Interval" via "Draft.Timestamp" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.538s cpu time, 0.043s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TemporalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.334s elapsed time, 1.337s cpu time, 0.126s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.MDL" via "Draft.Interval" via "Draft.Timestamp" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
consts
  list_of :: "'a iarray => 'a list"
### theory "HOL-Library.Nat_Bijection"
### 0.309s elapsed time, 1.222s cpu time, 0.156s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TemporalMoreTemplates" via "Draft.ExtrEqs")
consts
  tabulate :: "integer * (integer => 'a) => 'a iarray"
consts
  sub' :: "'a iarray * integer => 'a"
### theory "HOL-Library.IArray"
### 0.491s elapsed time, 1.961s cpu time, 0.199s GC time
Loading theory "Draft.NFA" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.406s elapsed time, 1.597s cpu time, 0.243s GC time
Loading theory "HOL-Library.Product_Lexorder" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.MDL" via "Draft.Interval")
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  prod :: (linorder, linorder) distrib_lattice
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
### theory "HOL-Library.Product_Lexorder"
### 0.092s elapsed time, 0.369s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TemporalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  shift :: "'a list => 'a stream => 'a stream"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
  Proving monotonicity ...
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "{}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "{}"
### theory "HOL-Library.Set_Algebras"
### 0.403s elapsed time, 1.450s cpu time, 0.559s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TemporalMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.AList"
### 1.286s elapsed time, 4.949s cpu time, 0.928s GC time
Loading theory "HOL-Library.Mapping" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.Window")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.132s elapsed time, 4.318s cpu time, 0.875s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.Window")
locale nfa_array
  fixes transs :: "transition list"
    and transs' :: "transition iarray"
    and len :: "nat"
  assumes "nfa_array transs transs' len"
locale nfa
  fixes q0 :: "nat"
    and qf :: "nat"
    and transs :: "transition list"
  assumes "nfa q0 qf transs"
locale nfa_cong
  fixes q0 :: "nat"
    and q0' :: "nat"
    and qf :: "nat"
    and qf' :: "nat"
    and transs :: "transition list"
    and transs' :: "transition list"
  assumes "nfa_cong q0 q0' qf qf' transs transs'"
Found termination order: "{}"
instantiation
  mapping :: (type, type) equal
  equal_mapping == equal_class.equal ::
    ('a, 'b) mapping => ('a, 'b) mapping => bool
Found termination order: "length <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale nfa_cong'
  fixes q0 :: "nat"
    and q0' :: "nat"
    and qf :: "nat"
    and qf' :: "nat"
    and transs :: "transition list"
    and transs' :: "transition list"
  assumes "nfa_cong' q0 q0' qf qf' transs transs'"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
locale nfa_cong_Plus
  fixes q0 :: "nat"
    and q0' :: "nat"
    and q0'' :: "nat"
    and qf :: "nat"
    and qf' :: "nat"
    and qf'' :: "nat"
    and transs :: "transition list"
    and transs' :: "transition list"
    and transs'' :: "transition list"
  assumes "nfa_cong_Plus q0 q0' q0'' qf qf' qf'' transs transs' transs''"
### theory "HOL-Library.While_Combinator"
### 0.458s elapsed time, 1.799s cpu time, 0.205s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.MDL" via "Draft.Interval" via "Draft.Timestamp" via "HOL-Library.Extended_Nat")
locale nfa_cong_Times
  fixes q0 :: "nat"
    and q0' :: "nat"
    and qf :: "nat"
    and transs :: "transition list"
    and transs' :: "transition list"
    and transs'' :: "transition list"
  assumes "nfa_cong_Times q0 q0' qf transs transs' transs''"
Found termination order: "size <*mlex*> {}"
locale nfa_cong_Star
  fixes q0 :: "nat"
    and q0' :: "nat"
    and qf :: "nat"
    and transs :: "transition list"
    and transs' :: "transition list"
  assumes "nfa_cong_Star q0 q0' qf transs transs'"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "Draft.NFA"
### 1.645s elapsed time, 6.323s cpu time, 1.153s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TemporalMoreTemplates" via "Draft.ExtrEqs")
locale combine_mapping_abel_semigroup
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "combine_mapping_abel_semigroup (\<^bold>*)"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Mapping"
### 1.139s elapsed time, 4.481s cpu time, 0.478s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.MDL" via "Draft.Interval" via "Draft.Timestamp" via "HOL-Library.Extended_Real")
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
### theory "HOL-Library.Liminf_Limsup"
### 0.551s elapsed time, 2.164s cpu time, 0.262s GC time
### theory "HOL-Library.BigO"
### 0.859s elapsed time, 3.389s cpu time, 0.316s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.486s elapsed time, 5.286s cpu time, 1.372s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.MDL" via "Draft.Interval" via "Draft.Timestamp" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
### theory "HOL-Library.Tree"
### 2.341s elapsed time, 8.521s cpu time, 1.723s GC time
Loading theory "Draft.Templates" (required by "Draft.TemporalMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.078s elapsed time, 0.191s cpu time, 0.034s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TemporalMoreTemplates")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Countable_Set"
### 0.356s elapsed time, 0.749s cpu time, 0.034s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.MDL" via "Draft.Interval" via "Draft.Timestamp" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.518s elapsed time, 1.066s cpu time, 0.058s GC time
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.448s elapsed time, 1.817s cpu time, 0.120s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.MDL" via "Draft.Interval" via "Draft.Timestamp" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.395s elapsed time, 0.453s cpu time, 0.056s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.MDL" via "Draft.Interval" via "Draft.Timestamp")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.464s elapsed time, 0.515s cpu time, 0.070s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.MDL" via "Draft.Interval" via "Draft.Timestamp")
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
### theory "HOL-Library.Extended_Real"
### 2.192s elapsed time, 3.108s cpu time, 1.273s GC time
Loading theory "Draft.Timestamp" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.MDL" via "Draft.Interval")
"- \<infinity>"
  :: "ereal"
"\<infinity>"
  :: "ereal"
"True"
  :: "bool"
"True"
  :: "bool"
class timestamp = comm_monoid_add + semilattice_sup +
  fixes tfin :: "'a set"
    and \<iota> :: "nat => 'a"
  assumes "\<iota>_mono": "!!i j. i <= j ==> \<iota> i <= \<iota> j"
    and "\<iota>_fin": "!!i. \<iota> i : tfin"
    and
    "\<iota>_progressing":
      "!!x i. x : tfin ==> EX j. ~ \<iota> j <= \<iota> i + x"
    and "zero_tfin": "(0::'a) : tfin"
    and "tfin_closed": "!!c d. [| c : tfin; d : tfin |] ==> c + d : tfin"
    and "add_mono": "!!c d a. c <= d ==> a + c <= a + d"
    and "add_pos": "!!a c. [| a : tfin; (0::'a) < c |] ==> a < a + c"
"ereal (13 / 4)"
  :: "ereal"
instantiation
  prod :: (comm_monoid_add, comm_monoid_add) comm_monoid_add
  zero_prod == zero_class.zero :: 'a * 'b
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
Found termination order: "{}"
instantiation
  enat :: timestamp
  tfin_enat == tfin :: enat set
  \<iota>_enat == \<iota> :: nat => enat
instantiation
  ereal :: timestamp
  tfin_ereal == tfin :: ereal set
  \<iota>_ereal == \<iota> :: nat => ereal
class timestamp_strict = timestamp +
  assumes "timestamp_strict_total": "!!a b. a <= b | b <= a"
    and "add_mono_strict": "!!c d a. c < d ==> a + c < a + d"
instantiation
  nat :: timestamp_strict
  tfin_nat == tfin :: nat set
  \<iota>_nat == \<iota> :: nat => nat
instantiation
  real :: timestamp_strict
  tfin_real == tfin :: real set
  \<iota>_real == \<iota> :: nat => real
class timestamp_total = timestamp +
  assumes "timestamp_total": "!!a b. a <= b | b <= a"
  assumes
    "aux":
      "!!a c b.
          [| (0::'a) <= a; a <= c; a : tfin; c : tfin; (0::'a) <= b;
             b ~: tfin |]
          ==> c < a + b"
instantiation
  enat :: timestamp_total
instantiation
  ereal :: timestamp_total
class timestamp_total_strict = timestamp_total +
  assumes "add_mono_strict_total": "!!c d a. c < d ==> a + c < a + d"
instantiation
  nat :: timestamp_total_strict
instantiation
  real :: timestamp_total_strict
### theory "Draft.Timestamp"
### 1.140s elapsed time, 1.974s cpu time, 0.235s GC time
Loading theory "Draft.Interval" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.MDL")
Loading theory "Draft.Trace" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal" via "Draft.MDL")
Loading theory "Draft.Window" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal")
Proofs for inductive predicate(s) "sorted_list"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "ssorted"
  Proving monotonicity ...
instantiation
  \<I> :: (timestamp) equal
  equal_\<I> == equal_class.equal :: 'a \<I> => 'a \<I> => bool
Proofs for inductive predicate(s) "chain_le"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reaches_on"
  Proving monotonicity ...
### theory "Draft.Trace"
### 0.579s elapsed time, 1.779s cpu time, 0.205s GC time
Proofs for inductive predicate(s) "reaches"
  Proving monotonicity ...
### theory "Draft.Interval"
### 0.651s elapsed time, 1.925s cpu time, 0.205s GC time
Loading theory "Draft.MDL" (required by "Draft.TemporalMoreTemplates" via "Draft.Temporal")
Found termination order: "{}"
### The transfer theorems can't be generated:
### No quotient theorem has been registered for window_ext.
### Use setup_lifting to register a quotient or type definition theorem.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  mmap_combine ::
    "'key
     => 'val
        => ('val => 'val => 'val)
           => ('key * 'val) list => ('key * 'val) list"
Found termination order:
  "(%p. size_list (%p. size_option (%p. size (snd p)) (snd (snd p)))
         (snd (snd (snd (snd (snd (snd (snd p)))))))) <*mlex*>
   {}"
### theory "Draft.Window"
### 3.002s elapsed time, 7.043s cpu time, 1.128s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "case_sum size size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "case_sum size size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale MDL
  fixes \<sigma> :: "('a, 't) trace"
Found termination order: "case_sum (%p. size (fst p)) size <*mlex*> {}"
### theory "Draft.MDL"
### 4.511s elapsed time, 7.805s cpu time, 1.261s GC time
Loading theory "Draft.Temporal" (required by "Draft.TemporalMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale MDL
  fixes \<sigma> :: "('a, 't) trace"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
locale MDL_window
  fixes \<sigma> :: "('a, 'd) trace"
    and r :: "('a, 'd) regex"
    and t0 :: "'t"
    and sub :: "'e"
    and args :: "(bool iarray, nat set, 'd, 't, 'e) Window.args"
  assumes "MDL_window \<sigma> r t0 sub args"
[| valid_matchF ?I t0 sub ?rho ?i ?w; eval_mF ?I ?w = Some ((?t, ?b), ?w'');
   right ?I : tfin; wf_regex r |]
==> ?t = \<tau> \<sigma> ?i &
    ?b = sat (MatchF ?I r) ?i &
    (EX rho'. valid_matchF ?I t0 sub rho' (Suc ?i) ?w'')
### theory "Draft.Temporal"
### 1.945s elapsed time, 2.231s cpu time, 0.340s GC time
Loading theory "Draft.TemporalMoreTemplates"
[| valid_matchP ?I t0 sub ?rho ?j ?w;
   w_run_t args (w_tj ?w) = Some (?tj''', ?t);
   w_run_sub args (w_sj ?w) = Some (?sj''', ?b); wf_regex r |]
==> EX w'.
       eval_mP ?I ?w =
       Some ((\<tau> \<sigma> ?j, sat (MatchP ?I r) ?j), w') &
       ?t = \<tau> \<sigma> ?j &
       valid_matchP ?I t0 sub (?rho @ [(?t, ?b)]) (Suc ?j) w'
[| valid_matchF ?I t0 sub ?rho ?i ?w;
   reaches_on (w_run_t args) (w_tj ?w) (map fst ?rho') ?tj''';
   reaches_on (w_run_sub args) (w_sj ?w) (map snd ?rho') ?sj''';
   w_read_t args (w_ti ?w) = Some ?t; w_read_t args ?tj''' = Some ?tm;
   ~ memR ?t ?tm ?I; wf_regex r |]
==> EX w'.
       eval_mF ?I ?w =
       Some ((\<tau> \<sigma> ?i, sat (MatchF ?I r) ?i), w') &
       valid_matchF ?I t0 sub (take (w_j w') (?rho @ ?rho')) (Suc ?i) w'
val templateLemmas =
   [("Temporal.state_cnt_pos", "0 < state_cnt ?r",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Temporal.length_collect_subfmlas",
     "length ?phis <= length (collect_subfmlas ?r ?phis)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Temporal.collect_subfmlas_app",
     "EX phis'. collect_subfmlas ?r ?phis = ?phis @ phis'",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Temporal.build_nfa_impl_not_Nil",
     "build_nfa_impl ?r (?q0.0, ?qf, ?phis) ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_hole 0)
         )),
    ("Temporal.collect_subfmlas_atms",
     "set (collect_subfmlas ?r ?phis) = set ?phis Un atms ?r",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Temporal.build_nfa_impl_state_cnt",
     "length (build_nfa_impl ?r (?q0.0, ?qf, ?phis)) = state_cnt ?r",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app (template_hole 0, template_var 3))),
    ("Temporal.collect_subfmlas_set",
     "set (collect_subfmlas ?r ?phis) =
      set (collect_subfmlas ?r []) Un set ?phis",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 0))),
         template_app (template_hole 3, template_var 0)))),
    ("Temporal.pos_complete", "pos ?a ?xs = None ==> ?a ~: set ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Temporal.collect_subfmlas_size",
     "?x : set (collect_subfmlas ?r []) ==> size ?x < size ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)))
            )],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Temporal.valid_window_matchP_len_rho",
     "valid_window_matchP ?args ?I ?t0.0 ?sub ?rho ?i ?w ==>
      length ?rho = ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 2, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 2), template_var 1))),
    ("Temporal.pos_sound",
     "pos ?a ?xs = Some ?i ==> ?i < length ?xs & ?xs ! ?i = ?a",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app (template_hole 2, template_var 1))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 2))
           ))),
    ("Temporal.valid_window_matchF_reach_sj",
     "valid_window_matchF ?args ?I ?t0.0 ?sub ?rho ?i ?w ==>
      reaches_on (w_run_sub ?args) ?sub (map snd ?rho) (w_sj ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 5, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 6)),
                 template_var 3),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Temporal.valid_window_matchF_reach_tj",
     "valid_window_matchF ?args ?I ?t0.0 ?sub ?rho ?i ?w ==>
      reaches_on (w_run_t ?args) ?t0.0 (map fst ?rho) (w_tj ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 5, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 6)),
                 template_var 4),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Temporal.valid_window_matchP_reach_sj",
     "valid_window_matchP ?args ?I ?t0.0 ?sub ?rho ?i ?w ==>
      reaches_on (w_run_sub ?args) ?sub (map snd ?rho) (w_sj ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 5, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 6)),
                 template_var 3),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Temporal.valid_window_matchP_reach_tj",
     "valid_window_matchP ?args ?I ?t0.0 ?sub ?rho ?i ?w ==>
      reaches_on (w_run_t ?args) ?t0.0 (map fst ?rho) (w_tj ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 5, template_var 6),
                        template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 6)),
                 template_var 4),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Temporal.bf_collect_subfmlas",
     "[| bounded_future_regex ?r; ?phi : set (collect_subfmlas ?r ?phis) |]
      ==> ?phi : set ?phis | bounded_future_fmla ?phi",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app (template_hole 3, template_var 0))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Temporal.build_nfa_impl_fmla_set",
     "[| ?t : set (build_nfa_impl ?r (?q0.0, ?qf, ?phis));
         ?n : fmla_set ?t |]
      ==> ?n < length (collect_subfmlas ?r ?phis)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1)))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 5))
            )],
       template_inequation
        (less_than, template_var 0,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1))))),
    ("Temporal.build_nfa_impl_state_set",
     "?t : set (build_nfa_impl ?r (?q0.0, ?qf, ?phis)) ==>
      state_set ?t
      <= {?q0.0..<?q0.0 + length (build_nfa_impl ?r (?q0.0, ?qf, ?phis))} Un
         {?qf}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_app
                     (template_app (template_hole 8, template_var 1),
                      template_var 0)))))
            )],
       template_inequation
        (less_equals, template_app (template_hole 6, template_var 4),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 10, template_var 3),
                     template_app
                      (template_app (template_hole 9, template_var 2),
                       template_app
                        (template_app (template_hole 8, template_var 1),
                         template_var 0))))))),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Temporal.wf_while_break",
     "wf {(t, s). ?P s & ?b s & Some t = ?c s} ==>
      wf {(t, s).
          pred_option ?P s & pred_option' ?b s & t = map_option' ?c s}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_hole 10, template_app (template_hole 9, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_hole 4, template_app (template_hole 3, t_empty)))
           ))),
    ("Temporal.wf_while_break'",
     "wf {(t, s). ?P s & ?b s & Some t = ?c s} ==>
      wf {(t, s).
          pred_option' ?P s & pred_option' ?b s & t = map_option' ?c s}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_hole 9, template_app (template_hole 8, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_hole 3, template_app (template_hole 2, t_empty)))
           ))),
    ("Temporal.ex_key_sound",
     "[| !!q. case Mapping.lookup ?ac q of None => True
              | Some v => ?accept q = v;
         distinct (map fst ?qts);
         ex_key ?qts ?time ?accept ?ac = (?b, ?ac') |]
      ==> ?b =
          (EX q:mmap_keys ?qts.
              ?time (the (mmap_lookup ?qts q)) & ?accept q) &
          (ALL q.
              case Mapping.lookup ?ac' q of None => True
              | Some v => ?accept q = v)",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 13, template_var 1),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 3)),
                   t_empty))),
             template_app (template_hole 0, t_empty))
           ))),
    ("Temporal.while_break_complete",
     "[| !!s. [| ?P s; ?b s |] ==> pred_option' ?P (?c s);
         !!s. [| ?P s; ~ ?b s |] ==> ?Q s;
         wf {(t, s). ?P s & ?b s & Some t = ?c s}; ?P ?s |]
      ==> pred_option' ?Q (while_break ?b ?c ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_hole 5, template_app (template_hole 4, t_empty)))
            ),
        template_predicate (template_app (template_var 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("Temporal.while_break_sound",
     "[| !!s s'. [| ?P s; ?b s; ?c s = Some s' |] ==> ?P s';
         !!s. [| ?P s; ~ ?b s |] ==> ?Q s;
         wf {(t, s). ?P s & ?b s & Some t = ?c s}; ?P ?s |]
      ==> pred_option ?Q (while_break ?b ?c ?s)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_hole 4, template_app (template_hole 3, t_empty)))
            ),
        template_predicate (template_app (template_var 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.TemporalMoreTemplates"
### 0.528s elapsed time, 0.741s cpu time, 0.111s GC time
val it = (): unit
