Loading theory "HOL-Library.Function_Algebras" (required by "Draft.NFAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.NFAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.NFAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.IArray" (required by "Draft.NFAMoreTemplates" via "Draft.NFA")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.156s elapsed time, 0.648s cpu time, 0.046s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.NFAMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.852s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.NFAMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.363s elapsed time, 1.456s cpu time, 0.125s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.NFAMoreTemplates" via "Draft.ExtrEqs")
consts
  list_of :: "'a iarray => 'a list"
consts
  tabulate :: "integer * (integer => 'a) => 'a iarray"
consts
  sub' :: "'a iarray * integer => 'a"
### theory "HOL-Library.IArray"
### 0.489s elapsed time, 1.957s cpu time, 0.192s GC time
Loading theory "Draft.NFA" (required by "Draft.NFAMoreTemplates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.935s elapsed time, 3.534s cpu time, 0.804s GC time
Found termination order: "{}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.036s elapsed time, 3.719s cpu time, 0.829s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale nfa_array
  fixes transs :: "transition list"
    and transs' :: "transition iarray"
    and len :: "nat"
  assumes "nfa_array transs transs' len"
Found termination order: "size <*mlex*> {}"
locale nfa
  fixes q0 :: "nat"
    and qf :: "nat"
    and transs :: "transition list"
  assumes "nfa q0 qf transs"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale nfa_cong
  fixes q0 :: "nat"
    and q0' :: "nat"
    and qf :: "nat"
    and qf' :: "nat"
    and transs :: "transition list"
    and transs' :: "transition list"
  assumes "nfa_cong q0 q0' qf qf' transs transs'"
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale nfa_cong'
  fixes q0 :: "nat"
    and q0' :: "nat"
    and qf :: "nat"
    and qf' :: "nat"
    and transs :: "transition list"
    and transs' :: "transition list"
  assumes "nfa_cong' q0 q0' qf qf' transs transs'"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale nfa_cong_Plus
  fixes q0 :: "nat"
    and q0' :: "nat"
    and q0'' :: "nat"
    and qf :: "nat"
    and qf' :: "nat"
    and qf'' :: "nat"
    and transs :: "transition list"
    and transs' :: "transition list"
    and transs'' :: "transition list"
  assumes "nfa_cong_Plus q0 q0' q0'' qf qf' qf'' transs transs' transs''"
locale nfa_cong_Times
  fixes q0 :: "nat"
    and q0' :: "nat"
    and qf :: "nat"
    and transs :: "transition list"
    and transs' :: "transition list"
    and transs'' :: "transition list"
  assumes "nfa_cong_Times q0 q0' qf transs transs' transs''"
locale nfa_cong_Star
  fixes q0 :: "nat"
    and q0' :: "nat"
    and qf :: "nat"
    and transs :: "transition list"
    and transs' :: "transition list"
  assumes "nfa_cong_Star q0 q0' qf transs transs'"
### theory "Draft.NFA"
### 1.425s elapsed time, 4.310s cpu time, 0.861s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.941s elapsed time, 5.820s cpu time, 1.008s GC time
Loading theory "Draft.Templates" (required by "Draft.NFAMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.NFAMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.459s elapsed time, 0.500s cpu time, 0.051s GC time
Loading theory "Draft.NFAMoreTemplates"
val templateLemmas =
   [("NFA.finite_SQ", "finite (NFA.SQ ?q0.0 ?transs)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("NFA.finite_Q", "finite (NFA.Q ?q0.0 ?qf ?transs)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("NFA.step_symb_set_empty", "NFA.step_symb_set ?q0.0 ?transs {} = {}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("NFA.run_empty", "NFA.run ?q0.0 ?transs {} ?bss = {}",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_hole 0),
         template_var 0),
       template_hole 0)),
    ("NFA.run_Nil", "NFA.run ?q0.0 ?transs ?R [] = ?R",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0),
       template_var 0)),
    ("NFA.step_eps_closure_set_empty",
     "NFA.step_eps_closure_set ?q0.0 ?transs {} ?bs = {}",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_hole 0),
         template_var 0),
       template_hole 0)),
    ("NFA.step_eps_closure_set_refl",
     "?R <= NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs",
     template_inequation
      (less_equals, template_var 3,
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 3),
         template_var 0))),
    ("NFA.run_accept_eps_empty",
     "~ NFA.run_accept_eps ?q0.0 ?qf ?transs {} ?bss ?bs",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_hole 0),
                 template_var 1),
               template_var 0)
             )
         )),
    ("NFA.accept_eps_empty",
     "NFA.accept_eps ?q0.0 ?qf ?transs {} ?bs = False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_hole 1),
         template_var 0),
       template_hole 0)),
    ("NFA.SQ_sub_Q", "NFA.SQ ?q0.0 ?transs <= NFA.Q ?q0.0 ?qf ?transs",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 2), template_var 1),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("NFA.step_symb_set_code",
     "NFA.step_symb_set ?q0.0 ?transs ?R =
      \<Union> (NFA.step_symb_sucs ?q0.0 ?transs ` ?R)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("NFA.step_eps_closure_set_mono'",
     "NFA.step_eps_closure_set ?q0.0 ?transs ?R []
      <= NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_hole 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("NFA.step_symb_sucs_sound",
     "(?q' : NFA.step_symb_sucs ?q0.0 ?transs ?q) =
      NFA.step_symb ?q0.0 ?transs ?q ?q'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_var 3))),
    ("NFA.step_symb_dest",
     "NFA.step_symb ?q0.0 ?transs ?q ?q' ==> ?q : NFA.SQ ?q0.0 ?transs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("NFA.step_symb_set_proj",
     "NFA.step_symb_set ?q0.0 ?transs ?R =
      NFA.step_symb_set ?q0.0 ?transs (?R Int NFA.SQ ?q0.0 ?transs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("NFA.step_eps_dest",
     "NFA.step_eps ?q0.0 ?transs ?bs ?q ?q' ==> ?q : NFA.SQ ?q0.0 ?transs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3))
           ))),
    ("NFA.run_accept_eps_Nil",
     "NFA.run_accept_eps ?q0.0 ?qf ?transs ?R [] ?cs =
      NFA.accept_eps ?q0.0 ?qf ?transs ?R ?cs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_hole 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("NFA.step_eps_sucs_sound",
     "(?q' : NFA.step_eps_sucs ?q0.0 ?transs ?bs ?q) =
      NFA.step_eps ?q0.0 ?transs ?bs ?q ?q'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_var 4))),
    ("NFA.step_eps_sucs'_sound",
     "(?q' : NFA.step_eps_sucs' ?transs ?len ?bs ?q) =
      NFA.step_eps' ?transs ?len ?bs ?q ?q'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_var 4))),
    ("NFA.step_symb_set_mono",
     "?R <= ?S ==>
      NFA.step_symb_set ?q0.0 ?transs ?R
      <= NFA.step_symb_set ?q0.0 ?transs ?S",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("NFA.step_eps_mono",
     "NFA.step_eps ?q0.0 ?transs [] ?q ?q' ==>
      NFA.step_eps ?q0.0 ?transs ?bs ?q ?q'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 3),
                  template_hole 0),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 3),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("NFA.delta_eps",
     "NFA.delta ?q0.0 ?transs
       (NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs) ?bs =
      NFA.delta ?q0.0 ?transs ?R ?bs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("NFA.step_eps_closure_set_idem",
     "NFA.step_eps_closure_set ?q0.0 ?transs
       (NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs) ?bs =
      NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("NFA.transs_q_in_set",
     "?q : NFA.SQ ?q0.0 ?transs ==> ?transs ! (?q - ?q0.0) : set ?transs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("NFA.delta_step_symb_set_absorb",
     "NFA.delta ?q0.0 ?transs ?R ?bs =
      NFA.delta ?q0.0 ?transs ?R ?bs Un NFA.step_symb_set ?q0.0 ?transs ?R",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1)))),
    ("NFA.step_symb_set_split",
     "NFA.step_symb_set ?q0.0 ?transs (?R Un ?S) =
      NFA.step_symb_set ?q0.0 ?transs ?R Un
      NFA.step_symb_set ?q0.0 ?transs ?S",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("NFA.q_in_SQ",
     "(?q : NFA.SQ ?q0.0 ?transs) =
      (?q0.0 <= ?q & ?q < ?q0.0 + length ?transs)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0)))))),
    ("NFA.step_eps_closure_set_mono",
     "?R <= ?S ==>
      NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs
      <= NFA.step_eps_closure_set ?q0.0 ?transs ?S ?bs",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 3),
           template_var 0)))),
    ("NFA.step_eps_set_mono",
     "?R <= ?S ==>
      NFA.step_eps_set ?q0.0 ?transs ?bs ?R
      <= NFA.step_eps_set ?q0.0 ?transs ?bs ?S",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 3)))),
    ("NFA.step_eps_set_sound",
     "NFA.step_eps_set ?q0.0 ?transs ?bs ?R =
      {q'. EX q:?R. NFA.step_eps ?q0.0 ?transs ?bs q q'}",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("NFA.step_eps_set'_sound",
     "NFA.step_eps_set' ?transs ?len ?bs ?R =
      {q'. EX q:?R. NFA.step_eps' ?transs ?len ?bs q q'}",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("NFA.run_comp",
     "NFA.run ?q0.0 ?transs ?R (?bss @ ?css) =
      NFA.run ?q0.0 ?transs (NFA.run ?q0.0 ?transs ?R ?bss) ?css",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("NFA.run_Cons",
     "NFA.run ?q0.0 ?transs ?R (?bs # ?bss) =
      NFA.run ?q0.0 ?transs (NFA.delta ?q0.0 ?transs ?R ?bs) ?bss",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("NFA.delta_split",
     "NFA.delta ?q0.0 ?transs (?R Un ?S) ?bs =
      NFA.delta ?q0.0 ?transs ?R ?bs Un NFA.delta ?q0.0 ?transs ?S ?bs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("NFA.run_split",
     "NFA.run ?q0.0 ?transs (?R Un ?S) ?bss =
      NFA.run ?q0.0 ?transs ?R ?bss Un NFA.run ?q0.0 ?transs ?S ?bss",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("NFA.step_eps_closure_set_split",
     "NFA.step_eps_closure_set ?q0.0 ?transs (?R Un ?S) ?bs =
      NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs Un
      NFA.step_eps_closure_set ?q0.0 ?transs ?S ?bs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("NFA.step_symb_set_Un",
     "NFA.step_symb_set ?q0.0 ?transs (\<Union> (?R ` ?X)) =
      (UN x:?X. NFA.step_symb_set ?q0.0 ?transs (?R x))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("NFA.run_accept_eps_Nil_eps",
     "NFA.run_accept_eps ?q0.0 ?qf ?transs
       (NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs) [] ?bs =
      NFA.run_accept_eps ?q0.0 ?qf ?transs ?R [] ?bs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2),
                 template_var 1),
               template_var 0)),
           template_hole 0),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_hole 0),
         template_var 0))),
    ("NFA.step_eps_accept_eps",
     "[| NFA.step_eps ?q0.0 ?transs ?bs ?q ?qf; ?q : ?R |]
      ==> NFA.accept_eps ?q0.0 ?qf ?transs ?R ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 1),
                 template_var 4),
               template_var 0),
             template_var 3)
           ))),
    ("NFA.step_eps_closure_dest",
     "[| NFA.step_eps_closure ?q0.0 ?transs ?bs ?q ?q'; ?q ~= ?q' |]
      ==> ?q : NFA.SQ ?q0.0 ?transs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3))
           ))),
    ("NFA.rtranclp_closed_sub'",
     "?R^** ?q ?q' ==> ?q' = ?q | (EX q''. ?R ?q q'' & ?R^** q'' ?q')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_app (template_hole 1, t_empty))
           ))),
    ("NFA.rtranclp_unfold",
     "?R^** ?x ?z ==> ?x = ?z | (EX y. ?R ?x y & ?R^** y ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app (template_hole 1, t_empty))
           ))),
    ("NFA.delta_sub_eps_mono",
     "?S <= NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs ==>
      NFA.delta ?q0.0 ?transs ?S ?bs <= NFA.delta ?q0.0 ?transs ?R ?bs",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("NFA.step_eps_closure_set_flip",
     "NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs = ?R Un ?S ==>
      NFA.step_eps_closure_set ?q0.0 ?transs ?S ?bs <= ?R Un ?S",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2),
            template_var 1),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_var 0),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("NFA.step_step_eps_closure",
     "[| NFA.step_eps ?q0.0 ?transs ?bs ?q ?q'; ?q : ?R |]
      ==> ?q' : NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 4),
                 template_var 0),
               template_var 3))
           ))),
    ("NFA.delta_Un",
     "NFA.delta ?q0.0 ?transs (\<Union> (?R ` ?X)) ?bs =
      (UN x:?X. NFA.delta ?q0.0 ?transs (?R x) ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("NFA.run_Un",
     "NFA.run ?q0.0 ?transs (\<Union> (?R ` ?X)) ?bss =
      (UN x:?X. NFA.run ?q0.0 ?transs (?R x) ?bss)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("NFA.step_eps_closure_set_Un",
     "NFA.step_eps_closure_set ?q0.0 ?transs (\<Union> (?R ` ?X)) ?bs =
      (UN x:?X. NFA.step_eps_closure_set ?q0.0 ?transs (?R x) ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("NFA.run_accept_eps_Cons",
     "NFA.run_accept_eps ?q0.0 ?qf ?transs ?R (?bs # ?bss) ?cs =
      NFA.run_accept_eps ?q0.0 ?qf ?transs (NFA.delta ?q0.0 ?transs ?R ?bs)
       ?bss ?cs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("NFA.accept_eps_split",
     "NFA.accept_eps ?q0.0 ?qf ?transs (?R Un ?S) ?bs =
      (NFA.accept_eps ?q0.0 ?qf ?transs ?R ?bs |
       NFA.accept_eps ?q0.0 ?qf ?transs ?S ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 5),
               template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("NFA.accept_eps_Un",
     "NFA.accept_eps ?q0.0 ?qf ?transs (\<Union> (?R ` ?X)) ?bs =
      (EX x:?X. NFA.accept_eps ?q0.0 ?qf ?transs (?R x) ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 5),
               template_var 4),
             template_var 3),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("NFA.step_eps_closure_empty",
     "[| NFA.step_eps_closure ?q0.0 ?transs ?bs ?q ?q';
         !!q'. ~ NFA.step_eps ?q0.0 ?transs ?bs ?q q' |]
      ==> ?q = ?q'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("NFA.run_accept_eps_Cons_eps",
     "NFA.run_accept_eps ?q0.0 ?qf ?transs
       (NFA.step_eps_closure_set ?q0.0 ?transs ?R ?cs) (?cs # ?css) ?bs =
      NFA.run_accept_eps ?q0.0 ?qf ?transs ?R (?cs # ?css) ?bs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 6),
                   template_var 4),
                 template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("NFA.run_accept_eps_Un",
     "NFA.run_accept_eps ?q0.0 ?qf ?transs (\<Union> (?R ` ?X)) ?bss ?bs =
      (EX x:?X. NFA.run_accept_eps ?q0.0 ?qf ?transs (?R x) ?bss ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty), template_var 2))),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("NFA.step_eps_closure_set_code",
     "NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs =
      (let R' = ?R Un NFA.step_eps_set ?q0.0 ?transs ?bs ?R
       in if ?R = R' then ?R
          else NFA.step_eps_closure_set ?q0.0 ?transs R' ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 0),
               template_var 1))),
         t_empty))),
    ("NFA.step_eps_closure_set'_code",
     "NFA.step_eps_closure_set' ?transs ?len ?R ?bs =
      (let R' = ?R Un NFA.step_eps_set' ?transs ?len ?bs ?R
       in if ?R = R' then ?R
          else NFA.step_eps_closure_set' ?transs ?len R' ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 0),
               template_var 1))),
         t_empty))),
    ("NFA.run_accept_eps_split",
     "NFA.run_accept_eps ?q0.0 ?qf ?transs (?R Un ?S) ?bss ?bs =
      (NFA.run_accept_eps ?q0.0 ?qf ?transs ?R ?bss ?bs |
       NFA.run_accept_eps ?q0.0 ?qf ?transs ?S ?bss ?bs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 5),
               template_var 4),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("NFA.step_eps_closure_set_step_id",
     "(!!q q'. q : ?R ==> ~ NFA.step_eps ?q0.0 ?transs ?bs q q') ==>
      NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs = ?R",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 3),
           template_var 0),
         template_var 3))),
    ("NFA.rtranclp_closed_sub",
     "[| ?R^** ?q ?q'; {q'. EX q:?X. ?R q q'} <= ?X; ?q : ?X |]
      ==> ?q' : ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 2, t_empty),
          template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("NFA.delta_eps_split",
     "NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs = ?R Un ?S ==>
      NFA.delta ?q0.0 ?transs ?R ?bs =
      NFA.step_symb_set ?q0.0 ?transs ?R Un NFA.delta ?q0.0 ?transs ?S ?bs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2),
            template_var 1),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 0),
             template_var 1))))),
    ("NFA.rtranclp_closed",
     "[| ?R^** ?q ?q'; ?X = ?X Un {q'. EX q:?X. ?R q q'}; ?q : ?X |]
      ==> ?q' : ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 3, template_var 0),
            template_app (template_hole 2, t_empty))),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("NFA.list_split_unfold",
     "(UN (ys, zs):list_split (?x # ?xs). ?f ys zs) =
      ?f [] (?x # ?xs) Un (UN (ys, zs):list_split ?xs. ?f (?x # ys) zs)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_var 2, template_hole 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app (template_hole 3, template_var 0)))))),
    ("NFA.step_eps_closure_set_unfold",
     "(!!q'. NFA.step_eps ?q0.0 ?transs ?bs ?q q' = (q' : ?X)) ==>
      NFA.step_eps_closure_set ?q0.0 ?transs {?q} ?bs =
      {?q} Un NFA.step_eps_closure_set ?q0.0 ?transs ?X ?bs",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3),
               template_var 0),
             template_var 2))))),
    ("NFA.run_accept_eps_Cons_delta_cong",
     "NFA.delta ?q0.0 ?transs ?R ?bs = NFA.delta ?q0.0 ?transs ?S ?bs ==>
      NFA.run_accept_eps ?q0.0 ?qf ?transs ?R (?bs # ?bss) ?cs =
      NFA.run_accept_eps ?q0.0 ?qf ?transs ?S (?bs # ?bss) ?cs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 7),
                template_var 6),
              template_var 3),
            template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 2),
                 template_var 6),
               template_var 5),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 2),
                 template_var 6),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_var 0)))),
    ("NFA.rtranclp_step",
     "[| ?R^** ?q ?q''; !!q'. ?R ?q q' = (q' : ?X) |]
      ==> ?q = ?q'' | (EX q':?X. ?R ?q q' & ?R^** q' ?q'')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0), t_empty))
           ))),
    ("NFA.run_eps_split",
     "[| NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs = ?R Un ?S;
         NFA.step_symb_set ?q0.0 ?transs ?R = {} |]
      ==> NFA.run ?q0.0 ?transs ?R (?bs # ?bss) =
          NFA.run ?q0.0 ?transs ?S (?bs # ?bss)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 5),
              template_var 4),
            template_var 3),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("NFA.run_accept_eps_Nil_eps_split",
     "[| NFA.step_eps_closure_set ?q0.0 ?transs ?R ?bs = ?R Un ?S;
         NFA.step_symb_set ?q0.0 ?transs ?R = {}; ?qf ~: ?R |]
      ==> NFA.run_accept_eps ?q0.0 ?qf ?transs ?R [] ?bs =
          NFA.run_accept_eps ?q0.0 ?qf ?transs ?S [] ?bs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 8, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 5),
              template_var 4),
            template_var 3),
          template_hole 5),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 3)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 0),
                 template_var 4),
               template_var 3),
             template_hole 0),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 0),
                 template_var 4),
               template_var 1),
             template_hole 0),
           template_var 2)))),
    ("NFA.run_accept_eps_Cons_eps_split",
     "[| NFA.step_eps_closure_set ?q0.0 ?transs ?R ?cs = ?R Un ?S;
         NFA.step_symb_set ?q0.0 ?transs ?R = {}; ?qf ~: ?R |]
      ==> NFA.run_accept_eps ?q0.0 ?qf ?transs ?R (?cs # ?css) ?bs =
          NFA.run_accept_eps ?q0.0 ?qf ?transs ?S (?cs # ?css) ?bs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 8, template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 7, template_var 5),
            template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 7),
              template_var 6),
            template_var 5),
          template_hole 5),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 5)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 2),
                 template_var 6),
               template_var 5),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 2),
                 template_var 6),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.NFAMoreTemplates"
### 0.352s elapsed time, 0.520s cpu time, 0.068s GC time
val it = (): unit
