   [("ElementPointer.is_element_ptr_ref", "is_element_ptr (Ref ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("ElementPointer.is_element_ptr_kind_cast",
     "is_element_ptr_kind (cast ?element_ptr)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("ElementPointer.element_ptr_casts_commute2",
     "cast (cast ?element_ptr) = Some ?element_ptr",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("ElementPointer.cast\<^sub>n\<^sub>o\<^sub>d\<^sub>e\<^sub>_\<^sub>p\<^sub>t\<^sub>r\<^sub>2\<^sub>e\<^sub>l\<^sub>e\<^sub>m\<^sub>e\<^sub>n\<^sub>t\<^sub>_\<^sub>p\<^sub>t\<^sub>r_ext_none",
     "cast (node_ptr.Ext (Inr (Inr ?node_ext_ptr))) = None",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)))),
       template_hole 0)),
    ("ElementPointer.cast\<^sub>e\<^sub>l\<^sub>e\<^sub>m\<^sub>e\<^sub>n\<^sub>t\<^sub>_\<^sub>p\<^sub>t\<^sub>r\<^sub>2\<^sub>n\<^sub>o\<^sub>d\<^sub>e\<^sub>_\<^sub>p\<^sub>t\<^sub>r_inject",
     "(cast ?x = cast ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("ElementPointer.is_element_ptr_kind_none",
     "~ is_element_ptr_kind ?node_ptr ==> cast ?node_ptr = None",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("ElementPointer.element_ptr_casts_commute",
     "(cast ?node_ptr = Some ?element_ptr) =
      (cast ?element_ptr = ?node_ptr)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("ElementPointer.element_ptr_casts_commute3",
     "is_element_ptr_kind ?node_ptr ==>
      cast (the (cast ?node_ptr)) = ?node_ptr",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("ElementPointer.is_element_ptr_implies_kind",
     "case cast ?ptr of None => False
      | Some element_ptr => is_element_ptr element_ptr ==>
      is_element_ptr_kind ?ptr",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3), t_empty),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("ElementPointer.is_element_ptr_kind_obtains",
     "[| is_element_ptr_kind ?node_ptr;
         !!element_ptr. ?node_ptr = cast element_ptr ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0)))]
