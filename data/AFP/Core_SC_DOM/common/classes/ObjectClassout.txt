Loading theory "Draft.Core_DOM_Basic_Datatypes" (required by "Draft.ObjectClassTemplates" via "Draft.ObjectClass" via "Draft.BaseClass")
Loading theory "Draft.Hiding_Type_Variables" (required by "Draft.ObjectClassTemplates" via "Draft.ObjectClass" via "Draft.BaseClass" via "Draft.Ref")
Loading theory "Draft.Templates" (required by "Draft.ObjectClassTemplates" via "Draft.ExtrEqs")
locale l_dummy
### theory "Draft.Core_DOM_Basic_Datatypes"
### 0.042s elapsed time, 0.161s cpu time, 0.000s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.230s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ObjectClassTemplates")
signature HIDE_TVAR =
  sig
    val hide_tvar_ast_tr: Proof.context -> Ast.ast list -> Ast.ast
    val hide_tvar_subst_ast_tr:
       tvar_subst -> Proof.context -> Ast.ast list -> Ast.ast
    val hide_tvar_subst_return_ast_tr:
       tvar_subst -> Proof.context -> Ast.ast list -> Ast.ast
    val hide_tvar_tr': string -> Proof.context -> term list -> term
    type hide_varT =
       {name: string,
        parse_mode: parse_mode,
        print_mode: print_mode,
        tvars: typ list,
        typ_syn_tab: (string * typ list * string) Symtab.table}
    val lookup: theory -> string -> hide_varT option
    datatype parse_mode = noparse | parse
    val parse_parse_mode: string -> parse_mode
    val parse_print_mode: string -> print_mode
    datatype print_mode = noprint | print | print_all
    val register:
       string -> print_mode option -> parse_mode option -> theory -> theory
    datatype tvar_subst = left | right
    val update_mode:
       string -> print_mode option -> parse_mode option -> theory -> theory
  end
structure Hide_Tvar: HIDE_TVAR
val modeP = fn: Token.T list -> (string * string) * Token.T list
val typ_modeP = fn:
   Token.T list -> (string * (string * string)) * Token.T list
### theory "Draft.Hiding_Type_Variables"
### 0.598s elapsed time, 1.284s cpu time, 0.089s GC time
Loading theory "Draft.Ref" (required by "Draft.ObjectClassTemplates" via "Draft.ObjectClass" via "Draft.BaseClass")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.529s elapsed time, 1.084s cpu time, 0.089s GC time
instantiation
  sum :: (linorder, linorder) linorder
  less_eq_sum == less_eq :: 'a + 'b => 'a + 'b => bool
  less_sum == less :: 'a + 'b => 'a + 'b => bool
### theory "Draft.Ref"
### 0.123s elapsed time, 0.126s cpu time, 0.000s GC time
Loading theory "Draft.ObjectPointer" (required by "Draft.ObjectClassTemplates" via "Draft.ObjectClass")
Loading theory "Draft.BaseClass" (required by "Draft.ObjectClassTemplates" via "Draft.ObjectClass")
instantiation
  (_) object_ptr :: (linorder) linorder
  less_eq_object_ptr == less_eq :: (_) object_ptr => (_) object_ptr => bool
  less_object_ptr == less :: (_) object_ptr => (_) object_ptr => bool
### theory "Draft.ObjectPointer"
### 0.315s elapsed time, 0.646s cpu time, 0.052s GC time
locale l_type_wf
  fixes type_wf :: "'heap => bool"
locale l_known_ptr
  fixes known_ptr :: "'ptr => bool"
### theory "Draft.BaseClass"
### 0.400s elapsed time, 0.739s cpu time, 0.052s GC time
Loading theory "Draft.ObjectClass" (required by "Draft.ObjectClassTemplates")
locale l_type_wf_def\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t
locale l_type_wf\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t
  fixes type_wf :: "(_) heap => bool"
  assumes
    "l_type_wf\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t type_wf"
locale l_get\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_lemmas
  fixes type_wf :: "(_) heap => bool"
  assumes
    "l_get\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_lemmas type_wf"
locale l_known_ptr\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t
locale l_known_ptrs
  fixes known_ptr :: "(_) object_ptr => bool"
    and known_ptrs :: "(_) heap => bool"
  assumes "l_known_ptrs known_ptr known_ptrs"
locale l_known_ptrs\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t
  fixes known_ptr :: "(_) object_ptr => bool"
### Type
### ((_) object_ptr, (_) Object) fmap => (_) object_ptr => (_) Object option
### of constant "Finite_Map.fmap.fmlookup"
### is too specific compared to declared type
### (?'a::{}, ?'b::{}) fmap => ?'a::{} => ?'b::{} option, in theorem:
### fmlookup (the_heap (create_heap ?xs)) ?x == map_of ?xs ?x
### theory "Draft.ObjectClass"
### 0.652s elapsed time, 0.682s cpu time, 0.045s GC time
Loading theory "Draft.ObjectClassTemplates"
val templateLemmas =
   [("ObjectClass.object_ptr_kinds_code5", "the_heap (Heap ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("ObjectClass.object_more_extend_id", "more (extend ?x ?y) = ?y",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("ObjectClass.object_ptr_kinds_code4",
     "the_heap (create_heap ?xs) = fmap_of_list ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("ObjectClass.object_empty", "(| nothing = (), ... = more ?x |) = ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("ObjectClass.type_wf\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t",
     "type_wf ?h ==> type_wf ?h",
     template_implication
      ([template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("ObjectClass.object_ptr_kinds_code3",
     "fmlookup (the_heap (create_heap ?xs)) ?x = map_of ?xs ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ObjectClass.get_object_ptr_simp1",
     "get ?object_ptr (put ?object_ptr ?object ?h) = Some ?object",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("ObjectClass.known_ptr_not_object_ptr",
     "[| known_ptr ?ptr; ~ ?is_object_ptr ?ptr |] ==> ?known_ptr ?ptr",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_negation
         (
            template_predicate
             (template_app (template_var 1, template_var 2))
            )],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("ObjectClass.delete\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_ok",
     "?ptr |\<in>| object_ptr_kinds ?h ==>
      delete\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t ?ptr ?h ~=
      None",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("ObjectClass.known_ptrs_preserved",
     "object_ptr_kinds ?h = object_ptr_kinds ?h' ==>
      known_ptrs ?h = known_ptrs ?h'",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ObjectClass.delete\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_pointer_ptr_in_heap",
     "delete\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t ?ptr ?h =
      Some ?h' ==>
      ?ptr |\<in>| object_ptr_kinds ?h",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("ObjectClass.put\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_ptr_in_heap",
     "put ?object_ptr ?object ?h = ?h' ==>
      ?object_ptr |\<in>| object_ptr_kinds ?h'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ObjectClass.known_ptrs_known_ptr",
     "[| known_ptrs ?h; ?ptr |\<in>| object_ptr_kinds ?h |]
      ==> known_ptr ?ptr",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("ObjectClass.delete\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_pointer_removed",
     "delete\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t ?ptr ?h =
      Some ?h' ==>
      ?ptr |\<notin>| object_ptr_kinds ?h'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("ObjectClass.known_ptrs_subset",
     "[| object_ptr_kinds ?h' |\<subseteq>| object_ptr_kinds ?h;
         known_ptrs ?h |]
      ==> known_ptrs ?h'",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("ObjectClass.object_ptr_kinds_simp",
     "object_ptr_kinds (Heap (fmupd ?object_ptr ?object (the_heap ?h))) =
      {|?object_ptr|} |\<union>| object_ptr_kinds ?h",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_app (template_hole 3, template_var 0)))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)),
         template_app (template_hole 6, template_var 0)))),
    ("ObjectClass.get\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_type_wf",
     "type_wf ?h ==>
      (?object_ptr |\<in>| object_ptr_kinds ?h) =
      (get ?object_ptr ?h ~= None)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_var 0),
                template_app (template_hole 4, template_var 1))
              )],
         template_negation
          (
             template_equation
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1),
               template_hole 0)
             )))),
    ("ObjectClass.get_object_ptr_simp2",
     "?object_ptr ~= ?object_ptr' ==>
      get ?object_ptr (put ?object_ptr' ?object ?h) = get ?object_ptr ?h",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0)))),
    ("ObjectClass.put\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_put_ptrs",
     "put ?object_ptr ?object ?h = ?h' ==>
      object_ptr_kinds ?h' =
      object_ptr_kinds ?h |\<union>| {|?object_ptr|}",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2),
            template_var 1),
          template_var 0)],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_hole 0))))),
    ("ObjectClass.known_ptrs_new_ptr",
     "[| object_ptr_kinds ?h' = object_ptr_kinds ?h |\<union>| {|?new_ptr|};
         known_ptr ?new_ptr; known_ptrs ?h |]
      ==> known_ptrs ?h'",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2),
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1)),
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3))),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 2))))]:
   (string * thm * template) list
### theory "Draft.ObjectClassTemplates"
### 0.384s elapsed time, 0.532s cpu time, 0.053s GC time
val it = (): unit
