Loading theory "Draft.Core_DOM_Basic_Datatypes" (required by "Draft.ObjectMonadTemplates" via "Draft.ObjectMonad" via "Draft.BaseMonad" via "Draft.BaseClass")
Loading theory "Draft.Hiding_Type_Variables" (required by "Draft.ObjectMonadTemplates" via "Draft.ObjectMonad" via "Draft.BaseMonad" via "Draft.BaseClass" via "Draft.Ref")
Loading theory "Draft.Templates" (required by "Draft.ObjectMonadTemplates" via "Draft.ExtrEqs")
locale l_dummy
### theory "Draft.Core_DOM_Basic_Datatypes"
### 0.045s elapsed time, 0.165s cpu time, 0.000s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.213s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ObjectMonadTemplates")
signature HIDE_TVAR =
  sig
    val hide_tvar_ast_tr: Proof.context -> Ast.ast list -> Ast.ast
    val hide_tvar_subst_ast_tr:
       tvar_subst -> Proof.context -> Ast.ast list -> Ast.ast
    val hide_tvar_subst_return_ast_tr:
       tvar_subst -> Proof.context -> Ast.ast list -> Ast.ast
    val hide_tvar_tr': string -> Proof.context -> term list -> term
    type hide_varT =
       {name: string,
        parse_mode: parse_mode,
        print_mode: print_mode,
        tvars: typ list,
        typ_syn_tab: (string * typ list * string) Symtab.table}
    val lookup: theory -> string -> hide_varT option
    datatype parse_mode = noparse | parse
    val parse_parse_mode: string -> parse_mode
    val parse_print_mode: string -> print_mode
    datatype print_mode = noprint | print | print_all
    val register:
       string -> print_mode option -> parse_mode option -> theory -> theory
    datatype tvar_subst = left | right
    val update_mode:
       string -> print_mode option -> parse_mode option -> theory -> theory
  end
structure Hide_Tvar: HIDE_TVAR
val modeP = fn: Token.T list -> (string * string) * Token.T list
val typ_modeP = fn:
   Token.T list -> (string * (string * string)) * Token.T list
### theory "Draft.Hiding_Type_Variables"
### 0.560s elapsed time, 1.203s cpu time, 0.083s GC time
Loading theory "Draft.Ref" (required by "Draft.ObjectMonadTemplates" via "Draft.ObjectMonad" via "Draft.BaseMonad" via "Draft.BaseClass")
Loading theory "Draft.Heap_Error_Monad" (required by "Draft.ObjectMonadTemplates" via "Draft.ObjectMonad" via "Draft.BaseMonad")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.527s elapsed time, 1.109s cpu time, 0.083s GC time
instantiation
  sum :: (linorder, linorder) linorder
  less_eq_sum == less_eq :: 'a + 'b => 'a + 'b => bool
  less_sum == less :: 'a + 'b => 'a + 'b => bool
### theory "Draft.Ref"
### 0.122s elapsed time, 0.277s cpu time, 0.000s GC time
Loading theory "Draft.ObjectPointer" (required by "Draft.ObjectMonadTemplates" via "Draft.ObjectMonad" via "Draft.ObjectClass")
Loading theory "Draft.BaseClass" (required by "Draft.ObjectMonadTemplates" via "Draft.ObjectMonad" via "Draft.BaseMonad")
instantiation
  (_) object_ptr :: (linorder) linorder
  less_eq_object_ptr == less_eq :: (_) object_ptr => (_) object_ptr => bool
  less_object_ptr == less :: (_) object_ptr => (_) object_ptr => bool
### theory "Draft.ObjectPointer"
### 0.355s elapsed time, 1.071s cpu time, 0.144s GC time
locale l_type_wf
  fixes type_wf :: "'heap => bool"
locale l_known_ptr
  fixes known_ptr :: "'ptr => bool"
### theory "Draft.BaseClass"
### 0.492s elapsed time, 1.347s cpu time, 0.144s GC time
Loading theory "Draft.ObjectClass" (required by "Draft.ObjectMonadTemplates" via "Draft.ObjectMonad")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale l_type_wf_def\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t
locale l_type_wf\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t
  fixes type_wf :: "(_) heap => bool"
  assumes
    "l_type_wf\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t type_wf"
locale l_get\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_lemmas
  fixes type_wf :: "(_) heap => bool"
  assumes
    "l_get\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_lemmas type_wf"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale l_known_ptr\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t
locale l_known_ptrs
  fixes known_ptr :: "(_) object_ptr => bool"
    and known_ptrs :: "(_) heap => bool"
  assumes "l_known_ptrs known_ptr known_ptrs"
locale l_known_ptrs\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t
  fixes known_ptr :: "(_) object_ptr => bool"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### Type
### ((_) object_ptr, (_) Object) fmap => (_) object_ptr => (_) Object option
### of constant "Finite_Map.fmap.fmlookup"
### is too specific compared to declared type
### (?'a::{}, ?'b::{}) fmap => ?'a::{} => ?'b::{} option, in theorem:
### fmlookup (the_heap (create_heap ?xs)) ?x == map_of ?xs ?x
### theory "Draft.ObjectClass"
### 0.971s elapsed time, 2.120s cpu time, 0.504s GC time
### Ambiguous input (line 569 of "$AFP/Core_SC_DOM/common/preliminaries/Heap_Error_Monad.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Heap_Error_Monad.returns_result" ("_position" h)
###       ("_applC" ("_position" filter_M)
###         ("_cargs" ("_position" P) ("_position" xs)))
###       ("_position" ys)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.all_binder" ("_position" x)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" set) ("_position" xs))))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" pure)
###             ("_cargs" ("_applC" ("_position" P) ("_position" x))
###               ("_position" h))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" x)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("_applC"
###             ("\<^const>Heap_Error_Monad.is_OK" ("_position" h)
###               ("_position" P))
###             ("_position" x)))
###         ("\<^const>HOL.eq" ("_position" ys)
###           ("_applC" ("_position" filter)
###             ("_cargs"
###               ("_lambda" ("_position" x)
###                 ("\<^const>Heap_Error_Monad.select_result"
###                   ("\<^const>Heap_Error_Monad.execute" ("_position" h)
###                     ("_applC" ("_position" P) ("_position" x)))))
###               ("_position" xs))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Heap_Error_Monad.returns_result" ("_position" h)
###       ("_applC" ("_position" filter_M)
###         ("_cargs" ("_position" P) ("_position" xs)))
###       ("_position" ys)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.all_binder" ("_position" x)
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" set) ("_position" xs))))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" pure)
###             ("_cargs" ("_applC" ("_position" P) ("_position" x))
###               ("_position" h))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" x)
###           ("_applC" ("_position" set) ("_position" xs))
###           ("\<^const>Heap_Error_Monad.is_OK" ("_position" h)
###             ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>HOL.eq" ("_position" ys)
###           ("_applC" ("_position" filter)
###             ("_cargs"
###               ("_lambda" ("_position" x)
###                 ("\<^const>Heap_Error_Monad.select_result"
###                   ("\<^const>Heap_Error_Monad.execute" ("_position" h)
###                     ("_applC" ("_position" P) ("_position" x)))))
###               ("_position" xs))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 574 of "$AFP/Core_SC_DOM/common/preliminaries/Heap_Error_Monad.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder" ("_position" x)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" set) ("_position" xs))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pure)
###             ("_cargs" ("_applC" ("_position" P) ("_position" x))
###               ("_position" h)))
###           ("_applC"
###             ("\<^const>Heap_Error_Monad.is_OK" ("_position" h)
###               ("_position" P))
###             ("_position" x))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" filter)
###           ("_cargs"
###             ("_lambda" ("_position" x)
###               ("\<^const>Heap_Error_Monad.select_result"
###                 ("\<^const>Heap_Error_Monad.execute" ("_position" h)
###                   ("_applC" ("_position" P) ("_position" x)))))
###             ("_position" xs)))
###         ("_position" ys)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Heap_Error_Monad.returns_result" ("_position" h)
###         ("_applC" ("_position" filter_M)
###           ("_cargs" ("_position" P) ("_position" xs)))
###         ("_position" ys)))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder" ("_position" x)
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" set) ("_position" xs))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pure)
###             ("_cargs" ("_applC" ("_position" P) ("_position" x))
###               ("_position" h)))
###           ("\<^const>Heap_Error_Monad.is_OK" ("_position" h)
###             ("_applC" ("_position" P) ("_position" x)))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" filter)
###           ("_cargs"
###             ("_lambda" ("_position" x)
###               ("\<^const>Heap_Error_Monad.select_result"
###                 ("\<^const>Heap_Error_Monad.execute" ("_position" h)
###                   ("_applC" ("_position" P) ("_position" x)))))
###             ("_position" xs)))
###         ("_position" ys)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Heap_Error_Monad.returns_result" ("_position" h)
###         ("_applC" ("_position" filter_M)
###           ("_cargs" ("_position" P) ("_position" xs)))
###         ("_position" ys)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size_list size <*mlex*> {}"
### Ambiguous input (line 681 of "$AFP/Core_SC_DOM/common/preliminaries/Heap_Error_Monad.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Monad_Syntax.bind"
###       ("\<^const>Heap_Error_Monad.execute" ("_position" h) ("_position" f))
###       ("_position" g))
###     ("\<^const>Heap_Error_Monad.execute" ("_position" h')
###       ("_applC" ("_position" g) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Heap_Error_Monad.execute" ("_position" h)
###       ("\<^const>Monad_Syntax.bind" ("_position" f) ("_position" g)))
###     ("\<^const>Heap_Error_Monad.execute" ("_position" h')
###       ("_applC" ("_position" g) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Heap_Error_Monad"
### 1.848s elapsed time, 4.039s cpu time, 0.717s GC time
Loading theory "Draft.BaseMonad" (required by "Draft.ObjectMonadTemplates" via "Draft.ObjectMonad")
locale l_ptr_kinds_M
  fixes ptr_kinds :: "'heap => 'ptr fset"
locale l_get_M
  fixes get :: "'ptr => 'heap => 'obj option"
    and type_wf :: "'heap => bool"
    and ptr_kinds :: "'heap => 'ptr fset"
  assumes "l_get_M get type_wf ptr_kinds"
locale l_put_M
  fixes type_wf :: "'heap => bool"
    and ptr_kinds :: "'heap => 'ptr fset"
    and get :: "'ptr => 'heap => 'obj option"
    and put :: "'ptr => 'obj => 'heap => 'heap"
  assumes "l_put_M type_wf ptr_kinds get"
### Cannot skip proof of schematic goal statement
### theory "Draft.BaseMonad"
### 0.846s elapsed time, 0.924s cpu time, 0.105s GC time
Loading theory "Draft.ObjectMonad" (required by "Draft.ObjectMonadTemplates")
locale l_get_M\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_lemmas
  fixes type_wf :: "(_) heap => bool"
  assumes
    "l_get_M\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_lemmas type_wf"
### Cannot skip proof of schematic goal statement
locale l_put_M\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_lemmas
  fixes type_wf :: "(_) heap => bool"
  assumes
    "l_put_M\<^sub>O\<^sub>b\<^sub>j\<^sub>e\<^sub>c\<^sub>t_lemmas type_wf"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "Draft.ObjectMonad"
### 0.565s elapsed time, 0.970s cpu time, 0.567s GC time
Loading theory "Draft.ObjectMonadTemplates"
val templateLemmas =
   [("ObjectMonad.ptr_kinds_M_ok", "?h \<turnstile> ok object_ptr_kinds_M",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("ObjectMonad.ptr_kinds_M_pure", "pure object_ptr_kinds_M ?h",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("ObjectMonad.check_in_heap_pure", "pure (check_in_heap ?ptr) ?h",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("ObjectMonad.type_wf_preserved", "type_wf ?h = type_wf ?h'",
     template_equation
      (template_app (template_hole 1, template_var 1),
       template_app (template_hole 0, template_var 0))),
    ("ObjectMonad.get_M_pure", "pure (get_M ?ptr ?getter) ?h",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)
         )),
    ("ObjectMonad.invoke_pure", "pure (invoke [] ?ptr ?args) ?h",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 2),
               template_var 1)),
           template_var 0)
         )),
    ("ObjectMonad.invoke_empty",
     "~ ?h \<turnstile> ok invoke [] ?ptr ?args",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1),
                 template_var 0))
             )
         )),
    ("ObjectMonad.check_in_heap_ptr_in_heap",
     "(?ptr |\<in>| object_ptr_kinds ?h) =
      ?h \<turnstile> ok check_in_heap ?ptr",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("ObjectMonad.type_wf_put_I",
     "type_wf ?h ==> type_wf (put ?ptr ?obj ?h)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("ObjectMonad.ptr_kinds_M_ptr_kinds",
     "?h \<turnstile> object_ptr_kinds_M \<rightarrow>\<^sub>r ?xa =
      (?xa = sorted_list_of_set (fset (object_ptr_kinds ?h)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)))))),
    ("ObjectMonad.check_in_heap_reads",
     "reads {preserved (get_M ?object_ptr nothing)}
       (check_in_heap ?object_ptr) ?h ?h'",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 2),
                         template_hole 2))),
                   template_hole 1)),
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0)
         )),
    ("ObjectMonad.get_M_ptr_in_heap",
     "?h \<turnstile> ok get_M ?ptr ?getter ==>
      ?ptr |\<in>| object_ptr_kinds ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("ObjectMonad.ptr_kinds_ptr_kinds_M",
     "(?ptr : set |?h \<turnstile> object_ptr_kinds_M|\<^sub>r) =
      (?ptr |\<in>| object_ptr_kinds ?h)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)))),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ObjectMonad.object_ptr_kinds_simp",
     "object_ptr_kinds (put ?ptr ?obj ?h) =
      object_ptr_kinds ?h |\<union>| {|?ptr|}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("ObjectMonad.invoke_ptr_in_heap",
     "?h \<turnstile> ok invoke ?xs ?ptr ?args ==>
      ?ptr |\<in>| object_ptr_kinds ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 3))
           ))),
    ("ObjectMonad.put_M_ptr_in_heap",
     "?h \<turnstile> ok put_M ?ptr ?setter ?v ==>
      ?ptr |\<in>| object_ptr_kinds ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 3))
           ))),
    ("ObjectMonad.object_ptr_kinds_M_reads",
     "reads (UN object_ptr. {preserved (get_M object_ptr nothing)})
       object_ptr_kinds_M ?h ?h'",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, t_empty),
                     template_hole 1))),
               template_hole 0),
             template_var 1),
           template_var 0)
         )),
    ("ObjectMonad.ptr_kinds_M_ptr_kinds_returns_heap",
     "?h \<turnstile> object_ptr_kinds_M >>= ?f \<rightarrow>\<^sub>h ?h' =
      ?h \<turnstile> ?f (sorted_list_of_set (fset (object_ptr_kinds ?h)))
      \<rightarrow>\<^sub>h ?h'",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_var 1,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2))))),
         template_var 0))),
    ("ObjectMonad.ptr_kinds_M_ptr_kinds_returns_result",
     "?h \<turnstile> object_ptr_kinds_M >>= ?f \<rightarrow>\<^sub>r ?x =
      ?h \<turnstile> ?f (sorted_list_of_set (fset (object_ptr_kinds ?h)))
      \<rightarrow>\<^sub>r ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_var 1,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2))))),
         template_var 0))),
    ("ObjectMonad.object_ptr_kinds_preserved_small",
     "(!!object_ptr. preserved (get_M object_ptr nothing) ?h ?h') ==>
      object_ptr_kinds ?h = object_ptr_kinds ?h'",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ObjectMonad.get_M_ok",
     "[| type_wf ?h; ?ptr |\<in>| object_ptr_kinds ?h |]
      ==> ?h \<turnstile> ok get_M ?ptr ?getter",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("ObjectMonad.type_wf_put_ptr_in_heap_E",
     "[| type_wf (put ?ptr ?obj ?h); ?ptr |\<in>| object_ptr_kinds ?h |]
      ==> type_wf ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 3, template_var 0)))),
    ("ObjectMonad.get_object_ptr_simp",
     "get ?object_ptr (put ?ptr ?obj ?h) =
      (if ?ptr = ?object_ptr then Some ?obj else get ?object_ptr ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3)),
               template_app (template_hole 0, template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 0))
           ))),
    ("ObjectMonad.put_M_ok",
     "[| type_wf ?h; ?ptr |\<in>| object_ptr_kinds ?h |]
      ==> ?h \<turnstile> ok put_M ?ptr ?setter ?v",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("ObjectMonad.type_wf_put_ptr_not_in_heap_E",
     "[| type_wf (put ?ptr ?obj ?h); ?ptr |\<notin>| object_ptr_kinds ?h |]
      ==> type_wf ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_app (template_hole 0, template_var 0))
                )
            )],
       template_predicate
        (template_app (template_hole 4, template_var 0)))),
    ("ObjectMonad.check_in_heap_is_OK",
     "?ptr |\<in>| object_ptr_kinds ?h ==>
      ?h \<turnstile> ok (check_in_heap ?ptr >>= ?f) =
      ?h \<turnstile> ok ?f ()",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_var 0, template_hole 0))))),
    ("ObjectMonad.invoke_not",
     "~ ?Pred ?ptr ==>
      invoke ((?Pred, ?f) # ?xs) ?ptr ?args = invoke ?xs ?ptr ?args",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 4, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 2)),
                 template_var 1)),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 3),
           template_var 0)))),
    ("ObjectMonad.invoke_empty_reads",
     "ALL P:?S. reflp P & transp P ==>
      reads ?S (invoke [] ?ptr ?args) ?h ?h'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 3),
                   template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("ObjectMonad.check_in_heap_returns_heap",
     "?ptr |\<in>| object_ptr_kinds ?h ==>
      ?h \<turnstile> check_in_heap ?ptr >>= ?f \<rightarrow>\<^sub>h ?h' =
      ?h \<turnstile> ?f () \<rightarrow>\<^sub>h ?h'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_var 1, template_hole 0)),
           template_var 0)))),
    ("ObjectMonad.check_in_heap_returns_result",
     "?ptr |\<in>| object_ptr_kinds ?h ==>
      ?h \<turnstile> check_in_heap ?ptr >>= ?f \<rightarrow>\<^sub>r ?x =
      ?h \<turnstile> ?f () \<rightarrow>\<^sub>r ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_var 1, template_hole 0)),
           template_var 0)))),
    ("ObjectMonad.invoke_is_OK",
     "[| ?ptr |\<in>| object_ptr_kinds ?h; ?Pred ?ptr |]
      ==> ?h \<turnstile> ok invoke ((?Pred, ?f) # ?xs) ?ptr ?args =
          ?h \<turnstile> ok ?f ?ptr ?args",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_app (template_hole 5, template_var 4))
            ),
        template_predicate (template_app (template_var 3, template_var 5))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2)),
                   template_var 1)),
               template_var 5),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_var 2, template_var 5),
             template_var 0))))),
    ("ObjectMonad.invoke_returns_heap",
     "[| ?ptr |\<in>| object_ptr_kinds ?h; ?Pred ?ptr |]
      ==> ?h \<turnstile> invoke ((?Pred, ?f) # ?xs) ?ptr ?args
          \<rightarrow>\<^sub>h ?h' =
          ?h \<turnstile> ?f ?ptr ?args \<rightarrow>\<^sub>h ?h'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 6),
              template_app (template_hole 5, template_var 5))
            ),
        template_predicate (template_app (template_var 4, template_var 6))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3)),
                     template_var 2)),
                 template_var 6),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_app
              (template_app (template_var 3, template_var 6),
               template_var 1)),
           template_var 0)))),
    ("ObjectMonad.invoke_returns_result",
     "[| ?ptr |\<in>| object_ptr_kinds ?h; ?Pred ?ptr |]
      ==> ?h \<turnstile> invoke ((?Pred, ?f) # ?xs) ?ptr ?args
          \<rightarrow>\<^sub>r ?x =
          ?h \<turnstile> ?f ?ptr ?args \<rightarrow>\<^sub>r ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 6),
              template_app (template_hole 5, template_var 5))
            ),
        template_predicate (template_app (template_var 4, template_var 6))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 3)),
                     template_var 2)),
                 template_var 6),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_app
              (template_app (template_var 3, template_var 6),
               template_var 1)),
           template_var 0)))),
    ("ObjectMonad.invoke_split",
     "?P (invoke ((?Pred, ?f) # ?xs) ?ptr ?args) =
      ((~ ?Pred ?ptr --> ?P (invoke ?xs ?ptr ?args)) &
       (?Pred ?ptr --> ?P (check_in_heap ?ptr >>= (%_. ?f ?ptr ?args))))",
     template_equation
      (template_app
        (template_var 5,
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 4),
                     template_var 3)),
                 template_var 2)),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_var 4, template_var 1))),
             template_app
              (template_var 5,
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_var 4, template_var 1)),
           template_app
            (template_var 5,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               t_empty)))))),
    ("ObjectMonad.invoke_split_asm",
     "?P (invoke ((?Pred, ?f) # ?xs) ?ptr ?args) =
      (~ (~ ?Pred ?ptr & ~ ?P (invoke ?xs ?ptr ?args) |
          ?Pred ?ptr & ~ ?P (check_in_heap ?ptr >>= (%_. ?f ?ptr ?args))))",
     template_equation
      (template_app
        (template_var 5,
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 4),
                     template_var 3)),
                 template_var 2)),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 4,
                   template_app (template_var 4, template_var 1))),
               template_app
                (template_hole 4,
                 template_app
                  (template_var 5,
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 2),
                       template_var 1),
                     template_var 0))))),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_var 4, template_var 1)),
             template_app
              (template_hole 4,
               template_app
                (template_var 5,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1)),
                   t_empty)))))))),
    ("ObjectMonad.reads_writes_preserved2",
     "[| writes ?SW ?setter ?h ?h';
         ?h \<turnstile> ?setter \<rightarrow>\<^sub>h ?h';
         !!h h' x.
            ALL w:?SW.
               h \<turnstile> w \<rightarrow>\<^sub>h h' -->
               preserved (get_M ?ptr ?getter) h h' |]
      ==> preserved (get_M ?ptr ?getter) ?h ?h'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 4),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 3),
             template_var 2)
           ))),
    ("ObjectMonad.object_ptr_kinds_preserved",
     "[| writes ?SW ?setter ?h ?h';
         ?h \<turnstile> ?setter \<rightarrow>\<^sub>h ?h';
         !!h h' w object_ptr.
            [| w : ?SW; h \<turnstile> w \<rightarrow>\<^sub>h h' |]
            ==> preserved (get_M object_ptr nothing) h h' |]
      ==> object_ptr_kinds ?h = object_ptr_kinds ?h'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 1),
                template_var 2),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.ObjectMonadTemplates"
### 0.492s elapsed time, 0.620s cpu time, 0.044s GC time
val it = (): unit
