   [("BaseMonad.finite_set_in", "(?x : fset ?FS) = (?x |\<in>| ?FS)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("BaseMonad.sorted_list_set_cong",
     "(sorted_list_of_set (fset ?FS) = sorted_list_of_set (fset ?FS')) =
      (?FS = ?FS')",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_equation (template_var 1, template_var 0))),
    ("BaseMonad.sorted_list_of_set_eq",
     "sorted_list_of_set (fset ?x) = sorted_list_of_set (fset ?y) ==>
      ?x = ?y",
     template_implication
      ([template_equation
         (template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 1)),
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 0)))],
       template_equation (template_var 1, template_var 0))),
    ("BaseMonad.dom_prog_ordI",
     "(!!h. h \<turnstile> ?f
            \<rightarrow>\<^sub>e NonTerminationException |
            h \<turnstile> ?f = h \<turnstile> ?g) ==>
      dom_prog_ord ?f ?g",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("BaseMonad.mono_dom_prog1",
     "(!!x. mono_dom_prog (%f. ?g f x)) ==>
      mono_dom_prog (%f. map_M (?g f) ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 4, template_hole 3)),
               template_hole 1),
             t_empty)
           ))),
    ("BaseMonad.mono_dom_prog2",
     "(!!x. mono_dom_prog (%f. ?g f x)) ==>
      mono_dom_prog (%f. forall_M (?g f) ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 4, template_hole 3)),
               template_hole 1),
             t_empty)
           ))),
    ("BaseMonad.dom_prog_ordE",
     "[| dom_prog_ord ?x ?y;
         ?h \<turnstile> ?x
         \<rightarrow>\<^sub>e NonTerminationException ==>
         ?thesis;
         ?h \<turnstile> ?x = ?h \<turnstile> ?y ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 3),
                 template_hole 2)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("BaseMonad.admissible_dom_prog",
     "dom_prog.admissible
       (%f. ALL x h h' r.
               h \<turnstile> f x \<rightarrow>\<^sub>r r -->
               h \<turnstile> f x \<rightarrow>\<^sub>h h' -->
               ?P x h h' r)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app (template_hole 9, template_hole 8)),
             template_app (template_hole 7, template_hole 6)),
           t_empty)
         )),
    ("BaseMonad.execute_admissible",
     "ccpo.admissible (fun_lub (flat_lub (Inl ?e)))
       (fun_ord (flat_ord (Inl ?e)))
       ((%a. ALL h h2 r. h \<turnstile> a = Inr (r, h2) --> ?P h h2 r) o
        Prog)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 14,
               template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_var 1)))),
             template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app (template_hole 11, template_var 1)))),
           template_app
            (template_app (template_hole 8, t_empty), template_hole 0))
         )),
    ("BaseMonad.bind_mono",
     "[| mono_dom_prog ?B; !!y. mono_dom_prog (?C y) |]
      ==> mono_dom_prog (%f. ?B f >>= (%y. ?C y f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5)),
                template_hole 4),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 6, template_hole 5)),
               template_hole 1),
             t_empty)
           ))),
    ("BaseMonad.execute_admissible2",
     "ccpo.admissible (fun_lub (flat_lub (Inl ?e)))
       (fun_ord (flat_ord (Inl ?e)))
       ((%a. ALL h h' h2 h2' r r'.
                h \<turnstile> a = Inr (r, h2) -->
                h' \<turnstile> a = Inr (r', h2') --> ?P h h' h2 h2' r r') o
        Prog)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 14,
               template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app (template_hole 11, template_var 1)))),
             template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app (template_hole 11, template_var 1)))),
           template_app
            (template_app (template_hole 8, t_empty), template_hole 0))
         )),
    ("BaseMonad.admissible_dom_prog2",
     "dom_prog.admissible
       (%f. ALL x h h2 h' h2' r r2.
               h \<turnstile> f x \<rightarrow>\<^sub>r r -->
               h \<turnstile> f x \<rightarrow>\<^sub>h h' -->
               h2 \<turnstile> f x \<rightarrow>\<^sub>r r2 -->
               h2 \<turnstile> f x \<rightarrow>\<^sub>h h2' -->
               ?P x h h2 h' h2' r r2)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app (template_hole 9, template_hole 8)),
             template_app (template_hole 7, template_hole 6)),
           t_empty)
         ))]
