Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AnglesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.AnglesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AnglesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AnglesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.570s cpu time, 0.047s GC time
Loading theory "HOL-Library.Periodic_Fun" (required by "Draft.AnglesMoreTemplates" via "Draft.Angles" via "Draft.More_Transcendental")
locale periodic_fun
  fixes f :: "'a => 'b"
    and g :: "'a => 'a => 'a"
    and gm :: "'a => 'a => 'a"
    and g1 :: "'a => 'a"
    and gn1 :: "'a => 'a"
  assumes "periodic_fun f g gm g1 gn1"
Found termination order: "size_list size <*mlex*> {}"
locale periodic_fun_simple
  fixes f :: "'a => 'b"
    and period :: "'a"
  assumes "periodic_fun_simple f period"
locale periodic_fun_simple'
  fixes f :: "'a => 'b"
  assumes "periodic_fun_simple' f"
### theory "HOL-Library.Set_Algebras"
### 0.225s elapsed time, 0.923s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AnglesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Periodic_Fun"
### 0.177s elapsed time, 0.690s cpu time, 0.097s GC time
Loading theory "Draft.More_Transcendental" (required by "Draft.AnglesMoreTemplates" via "Draft.Angles")
### theory "HOL-Library.Nat_Bijection"
### 0.331s elapsed time, 1.330s cpu time, 0.144s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AnglesMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.More_Transcendental"
### 0.084s elapsed time, 0.337s cpu time, 0.000s GC time
Loading theory "Draft.Canonical_Angle" (required by "Draft.AnglesMoreTemplates" via "Draft.Angles")
### theory "Draft.Canonical_Angle"
### 0.106s elapsed time, 0.420s cpu time, 0.094s GC time
Loading theory "Draft.More_Complex" (required by "Draft.AnglesMoreTemplates" via "Draft.Angles")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.More_Complex"
### 0.327s elapsed time, 1.287s cpu time, 0.151s GC time
Loading theory "Draft.Angles" (required by "Draft.AnglesMoreTemplates")
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "Draft.Angles"
### 0.317s elapsed time, 1.103s cpu time, 0.545s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.013s elapsed time, 3.768s cpu time, 0.937s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.067s elapsed time, 3.690s cpu time, 0.840s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.961s elapsed time, 5.702s cpu time, 1.111s GC time
Loading theory "Draft.Templates" (required by "Draft.AnglesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.077s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AnglesMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.484s elapsed time, 0.543s cpu time, 0.073s GC time
Loading theory "Draft.AnglesMoreTemplates"
val templateLemmas =
   [("Angles.ang_vec_a_sym",
     "\<angle>a ?z1.0 ?z2.0 = \<angle>a ?z2.0 ?z1.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Angles.ang_vec_c_sym",
     "\<angle>c ?z1.0 ?z2.0 = \<angle>c ?z2.0 ?z1.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Angles.ang_vec_a_opposite2",
     "\<angle>a ?z1.0 ?z2.0 = \<angle>a ?z1.0 (- ?z2.0)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Angles.ang_vec_a_opposite1",
     "\<angle>a ?z1.0 ?z2.0 = \<angle>a (- ?z1.0) ?z2.0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Angles.ang_a_cnj_cnj",
     "\<angle>a ?z1.0 ?z2.0 = \<angle>a (cnj ?z1.0) (cnj ?z2.0)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Angles.cos_c_",
     "cos (\<angle>c ?z1.0 ?z2.0) = cos (\<angle> ?z1.0 ?z2.0)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Angles.cos_a_c",
     "cos (\<angle>a ?z1.0 ?z2.0) =
      \<bar>cos (\<angle>c ?z1.0 ?z2.0)\<bar>",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Angles.ang_vec_c_bounded",
     "0 <= \<angle>c ?z1.0 ?z2.0 & \<angle>c ?z1.0 ?z2.0 <= pi",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0))
         )),
    ("Angles.ang_vec_bounded",
     "- pi < \<angle> ?z1.0 ?z2.0 & \<angle> ?z1.0 ?z2.0 <= pi",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 2))
         )),
    ("Angles.ang_vec_sym_pi",
     "\<angle> ?z1.0 ?z2.0 = pi ==>
      \<angle> ?z1.0 ?z2.0 = \<angle> ?z2.0 ?z1.0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_hole 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Angles.ang_vec_a_scale2",
     "?k ~= 0 ==> \<angle>a ?z1.0 (cor ?k * ?z2.0) = \<angle>a ?z1.0 ?z2.0",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Angles.ang_vec_a_scale1",
     "?k ~= 0 ==> \<angle>a (cor ?k * ?z1.0) ?z2.0 = \<angle>a ?z1.0 ?z2.0",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Angles.ang_vec_sym",
     "\<angle> ?z1.0 ?z2.0 ~= pi ==>
      \<angle> ?z1.0 ?z2.0 = - \<angle> ?z2.0 ?z1.0",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("Angles.ang_vec_opposite1",
     "?z1.0 ~= 0 ==>
      \<angle> (- ?z1.0) ?z2.0 =
      \<downharpoonright>\<angle> ?z1.0 ?z2.0 - pi\<downharpoonleft>",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_hole 0))))),
    ("Angles.ang_vec_opposite2",
     "?z2.0 ~= 0 ==>
      \<angle> ?z1.0 (- ?z2.0) =
      \<downharpoonright>\<angle> ?z1.0 ?z2.0 + pi\<downharpoonleft>",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app (template_hole 3, template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1)),
             template_hole 0))))),
    ("Angles.ang_vec_plus_pi1",
     "0 < \<angle> ?z1.0 ?z2.0 ==>
      \<downharpoonright>\<angle> ?z1.0 ?z2.0 + pi\<downharpoonleft> =
      \<angle> ?z1.0 ?z2.0 - pi",
     template_implication
      ([template_inequation
         (less_than, template_hole 6,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_hole 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_hole 1)))),
    ("Angles.ang_vec_plus_pi2",
     "\<angle> ?z1.0 ?z2.0 <= 0 ==>
      \<downharpoonright>\<angle> ?z1.0 ?z2.0 + pi\<downharpoonleft> =
      \<angle> ?z1.0 ?z2.0 + pi",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_hole 4)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("Angles.ang_vec_opposite_opposite",
     "[| ?z1.0 ~= 0; ?z2.0 ~= 0 |]
      ==> \<angle> (- ?z1.0) (- ?z2.0) = \<angle> ?z1.0 ?z2.0",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Angles.cos_cmod_scalprod",
     "cmod ?z1.0 * cmod ?z2.0 * cos (\<angle> ?z1.0 ?z2.0) =
      Re (scalprod ?z1.0 ?z2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 11,
               template_app (template_hole 10, template_var 1)),
             template_app (template_hole 10, template_var 0))),
         template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0))),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_var 0)),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app (template_hole 3, template_var 0)))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Angles.ang_vec_a_scale",
     "[| ?k1.0 ~= 0; ?k2.0 ~= 0 |]
      ==> \<angle>a (cor ?k1.0 * ?z1.0) (cor ?k2.0 * ?z2.0) =
          \<angle>a ?z1.0 ?z2.0",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 3)),
        template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Angles.ang_vec_opposite_opposite'",
     "[| ?z1.0 ~= ?z; ?z2.0 ~= ?z |]
      ==> \<angle> (?z - ?z1.0) (?z - ?z2.0) =
          \<angle> (?z1.0 - ?z) (?z2.0 - ?z)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Angles.cos0_scalprod0",
     "[| ?z1.0 ~= 0; ?z2.0 ~= 0 |]
      ==> (cos (\<angle> ?z1.0 ?z2.0) = 0) = (scalprod ?z1.0 ?z2.0 = 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 12)),
        template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_bimplication
        (template_equation
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 1),
               template_var 0)),
           template_hole 7),
         template_equation
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 1)),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app (template_hole 3, template_var 0)))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_hole 12)))),
    ("Angles.ortho_a_scalprod0",
     "[| ?z1.0 ~= 0; ?z2.0 ~= 0 |]
      ==> (\<angle>a ?z1.0 ?z2.0 = pi / 2) = (scalprod ?z1.0 ?z2.0 = 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 13)),
        template_negation
         (template_equation (template_var 0, template_hole 13))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 10, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5)))),
         template_equation
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 1)),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app (template_hole 1, template_var 0)))),
             template_app
              (template_hole 0,
               template_app (template_hole 6, template_hole 5))),
           template_hole 13)))),
    ("Angles.ortho_c_scalprod0",
     "[| ?z1.0 ~= 0; ?z2.0 ~= 0 |]
      ==> (\<angle>c ?z1.0 ?z2.0 = pi / 2) = (scalprod ?z1.0 ?z2.0 = 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 13)),
        template_negation
         (template_equation (template_var 0, template_hole 13))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 10, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5)))),
         template_equation
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 1)),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app (template_hole 1, template_var 0)))),
             template_app
              (template_hole 0,
               template_app (template_hole 6, template_hole 5))),
           template_hole 13)))),
    ("Angles.law_of_cosines",
     "(cdist ?B ?C)\<^sup>2 =
      (cdist ?A ?C)\<^sup>2 + (cdist ?A ?B)\<^sup>2 -
      2 * cdist ?A ?C * cdist ?A ?B * cos (\<angle> (?C - ?A) (?B - ?A))",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1)),
         template_app
          (template_hole 9,
           template_app (template_hole 8, template_hole 7))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_var 0),
                     template_var 1)),
                 template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_hole 7)))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_var 0),
                   template_var 2)),
               template_app
                (template_hole 9,
                 template_app (template_hole 8, template_hole 7))))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 8, template_hole 7))),
                   template_app
                    (template_app (template_hole 10, template_var 0),
                     template_var 1))),
               template_app
                (template_app (template_hole 10, template_var 0),
                 template_var 2))),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))))))),
    ("Angles.ortho_scalprod0",
     "[| ?z1.0 ~= 0; ?z2.0 ~= 0 |]
      ==> (\<angle> ?z1.0 ?z2.0 = pi / 2 |
           \<angle> ?z1.0 ?z2.0 = - pi / 2) =
          (scalprod ?z1.0 ?z2.0 = 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 15)),
        template_negation
         (template_equation (template_var 0, template_hole 15))],
       template_bimplication
        (template_predicate
          (
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app
                    (template_hole 12,
                     template_app
                      (template_app (template_hole 11, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_hole 6))))),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_hole 5, template_hole 9)),
                   template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6)))))
             ),
         template_equation
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 1)),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app (template_hole 1, template_var 0)))),
             template_app
              (template_hole 0,
               template_app (template_hole 7, template_hole 6))),
           template_hole 15))))]:
   (string * thm * template) list
### theory "Draft.AnglesMoreTemplates"
### 0.316s elapsed time, 0.427s cpu time, 0.000s GC time
val it = (): unit
