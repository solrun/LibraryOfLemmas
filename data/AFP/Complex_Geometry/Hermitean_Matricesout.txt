Loading theory "Draft.Linear_Systems" (required by "Draft.Hermitean_MatricesMoreTemplates" via "Draft.Hermitean_Matrices" via "Draft.Unitary_Matrices" via "Draft.Matrices")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Hermitean_MatricesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Hermitean_MatricesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Hermitean_MatricesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Linear_Systems"
### 0.088s elapsed time, 0.379s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Hermitean_MatricesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.573s cpu time, 0.044s GC time
Loading theory "HOL-Library.Periodic_Fun" (required by "Draft.Hermitean_MatricesMoreTemplates" via "Draft.Hermitean_Matrices" via "Draft.Unitary_Matrices" via "Draft.Matrices" via "Draft.More_Complex" via "Draft.More_Transcendental")
locale periodic_fun
  fixes f :: "'a => 'b"
    and g :: "'a => 'a => 'a"
    and gm :: "'a => 'a => 'a"
    and g1 :: "'a => 'a"
    and gn1 :: "'a => 'a"
  assumes "periodic_fun f g gm g1 gn1"
locale periodic_fun_simple
  fixes f :: "'a => 'b"
    and period :: "'a"
  assumes "periodic_fun_simple f period"
locale periodic_fun_simple'
  fixes f :: "'a => 'b"
  assumes "periodic_fun_simple' f"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.269s elapsed time, 1.089s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Hermitean_MatricesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Periodic_Fun"
### 0.179s elapsed time, 0.701s cpu time, 0.081s GC time
Loading theory "Draft.More_Transcendental" (required by "Draft.Hermitean_MatricesMoreTemplates" via "Draft.Hermitean_Matrices" via "Draft.Unitary_Matrices" via "Draft.Matrices" via "Draft.More_Complex")
### theory "HOL-Library.Nat_Bijection"
### 0.378s elapsed time, 1.508s cpu time, 0.124s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Hermitean_MatricesMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.More_Transcendental"
### 0.085s elapsed time, 0.337s cpu time, 0.000s GC time
Loading theory "Draft.Canonical_Angle" (required by "Draft.Hermitean_MatricesMoreTemplates" via "Draft.Hermitean_Matrices" via "Draft.Unitary_Matrices" via "Draft.Matrices" via "Draft.More_Complex")
### theory "Draft.Canonical_Angle"
### 0.101s elapsed time, 0.391s cpu time, 0.074s GC time
Loading theory "Draft.More_Complex" (required by "Draft.Hermitean_MatricesMoreTemplates" via "Draft.Hermitean_Matrices" via "Draft.Unitary_Matrices" via "Draft.Matrices")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.More_Complex"
### 0.314s elapsed time, 1.241s cpu time, 0.130s GC time
Loading theory "HOL-Library.Quadratic_Discriminant" (required by "Draft.Hermitean_MatricesMoreTemplates" via "Draft.Hermitean_Matrices" via "Draft.Unitary_Matrices" via "Draft.Matrices" via "Draft.Quadratic")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "HOL-Library.Quadratic_Discriminant"
### 0.271s elapsed time, 0.928s cpu time, 0.523s GC time
Loading theory "Draft.Quadratic" (required by "Draft.Hermitean_MatricesMoreTemplates" via "Draft.Hermitean_Matrices" via "Draft.Unitary_Matrices" via "Draft.Matrices")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.978s elapsed time, 3.700s cpu time, 0.847s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.064s elapsed time, 3.883s cpu time, 0.842s GC time
### theory "Draft.Quadratic"
### 0.358s elapsed time, 1.212s cpu time, 0.114s GC time
Loading theory "Draft.Matrices" (required by "Draft.Hermitean_MatricesMoreTemplates" via "Draft.Hermitean_Matrices" via "Draft.Unitary_Matrices")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 1.956s elapsed time, 6.291s cpu time, 1.092s GC time
Loading theory "Draft.Templates" (required by "Draft.Hermitean_MatricesMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.128s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Hermitean_MatricesMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.556s elapsed time, 1.168s cpu time, 0.120s GC time
Found termination order: "{}"
### theory "Draft.Matrices"
### 1.330s elapsed time, 2.695s cpu time, 0.296s GC time
Loading theory "Draft.Unitary_Matrices" (required by "Draft.Hermitean_MatricesMoreTemplates" via "Draft.Hermitean_Matrices")
### theory "Draft.Unitary_Matrices"
### 0.073s elapsed time, 0.077s cpu time, 0.000s GC time
Loading theory "Draft.Hermitean_Matrices" (required by "Draft.Hermitean_MatricesMoreTemplates")
### theory "Draft.Hermitean_Matrices"
### 0.071s elapsed time, 0.071s cpu time, 0.000s GC time
Loading theory "Draft.Hermitean_MatricesMoreTemplates"
val templateLemmas =
   [("Hermitean_Matrices.hermitean_mat_cnj",
     "hermitean ?H = hermitean (mat_cnj ?H)",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Hermitean_Matrices.hermitean_transpose",
     "hermitean ?A = (mat_transpose ?A = mat_cnj ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Hermitean_Matrices.hermitean_congruence",
     "hermitean ?H ==> hermitean (congruence ?M ?H)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Hermitean_Matrices.mat_det_hermitean_real",
     "hermitean ?A ==> is_real (mat_det ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Hermitean_Matrices.hermitean_mult_real",
     "hermitean ?H ==> hermitean (cor ?k *\<^sub>s\<^sub>m ?H)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("Hermitean_Matrices.quad_form_hermitean_real",
     "hermitean ?H ==> is_real (quad_form ?z ?H)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("Hermitean_Matrices.hermitean_mk_circline",
     "hermitean (cor ?A, ?B, cnj ?B, cor ?D)",
     template_predicate
      (
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_app (template_hole 3, template_var 0)))))
         )),
    ("Hermitean_Matrices.quad_form_vec_cnj_mat_cnj",
     "hermitean ?H ==>
      quad_form (vec_cnj ?z) (mat_cnj ?H) = quad_form ?z ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("Hermitean_Matrices.hermitean_eigenval_real",
     "[| hermitean ?H; eigenval ?k ?H |] ==> is_real ?k",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Hermitean_Matrices.bilinear_form_hermitean_commute",
     "hermitean ?H ==>
      bilinear_form ?v1.0 ?v2.0 ?H = cnj (bilinear_form ?v2.0 ?v1.0 ?H)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_var 2))))),
    ("Hermitean_Matrices.hermitean_elems",
     "hermitean (?A, ?B, ?C, ?D) ==> is_real ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 3),
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))))
            )],
       template_equation
        (template_app (template_hole 1, template_var 3), template_hole 0))),
    ("Hermitean_Matrices.hermitean_elems",
     "hermitean (?A, ?B, ?C, ?D) ==> is_real ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 3),
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Hermitean_Matrices.hermitean_elems",
     "hermitean (?A, ?B, ?C, ?D) ==> ?B = cnj ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))))
            )],
       template_equation
        (template_var 2, template_app (template_hole 0, template_var 1)))),
    ("Hermitean_Matrices.hermitean_elems",
     "hermitean (?A, ?B, ?C, ?D) ==> cnj ?B = ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))))
            )],
       template_equation
        (template_app (template_hole 0, template_var 2), template_var 1))),
    ("Hermitean_Matrices.hermitean_det_zero_trace_zero",
     "[| mat_det ?A = 0; mat_trace ?A = 0; hermitean ?A |]
      ==> ?A = mat_zero",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0), template_hole 4),
        template_equation
         (template_app (template_hole 3, template_var 0), template_hole 4),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation (template_var 0, template_hole 0))),
    ("Hermitean_Matrices.hermitean_mk_circline'",
     "[| is_real ?A; is_real ?D |] ==> hermitean (?A, ?B, cnj ?B, ?D)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2), template_hole 5),
        template_equation
         (template_app (template_hole 6, template_var 1), template_hole 5)],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0)),
                   template_var 1))))
           ))),
    ("Hermitean_Matrices.hermitean_distinct_eigenvals",
     "hermitean ?H ==>
      (EX k\<^sub>1 k\<^sub>2.
          k\<^sub>1 ~= k\<^sub>2 &
          eigenval k\<^sub>1 ?H & eigenval k\<^sub>2 ?H) |
      mat_diagonal ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Hermitean_Matrices.hermitean_ortho_eigenvecs",
     "[| hermitean ?H; eigenpair ?k1.0 ?v1.0 ?H; eigenpair ?k2.0 ?v2.0 ?H;
         ?k1.0 ~= ?k2.0 |]
      ==> vec_cnj ?v1.0 *\<^sub>v\<^sub>v ?v2.0 = 0",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_var 4)
            ),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 0),
         template_hole 0))),
    ("Hermitean_Matrices.hermitean_ortho_eigenvecs",
     "[| hermitean ?H; eigenpair ?k1.0 ?v1.0 ?H; eigenpair ?k2.0 ?v2.0 ?H;
         ?k1.0 ~= ?k2.0 |]
      ==> vec_cnj ?v2.0 *\<^sub>v\<^sub>v ?v1.0 = 0",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_var 4)
            ),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 2),
         template_hole 0))),
    ("Hermitean_Matrices.hermitean_diagonizable",
     "hermitean ?H ==>
      EX k1 k2 M.
         mat_det M ~= 0 &
         unitary M &
         congruence M ?H = (k1, 0, 0, k2) &
         is_real k1 &
         is_real k2 & sgn (Re k1 * Re k2) = sgn (Re (mat_det ?H))",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 0))],
       template_predicate (template_app (template_hole 18, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Hermitean_MatricesMoreTemplates"
### 0.326s elapsed time, 0.471s cpu time, 0.070s GC time
val it = (): unit
