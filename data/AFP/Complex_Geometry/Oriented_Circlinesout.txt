Loading theory "Draft.More_Set" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.Oriented_Circlines" via "Draft.Circlines")
Loading theory "Draft.Linear_Systems" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.Oriented_Circlines" via "Draft.Circlines" via "Draft.Moebius" via "Draft.Homogeneous_Coordinates" via "Draft.Matrices")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.More_Set"
### 0.048s elapsed time, 0.223s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "Draft.Linear_Systems"
### 0.089s elapsed time, 0.384s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.155s elapsed time, 0.632s cpu time, 0.046s GC time
Loading theory "HOL-Library.Periodic_Fun" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.Oriented_Circlines" via "Draft.Circlines" via "Draft.Moebius" via "Draft.Homogeneous_Coordinates" via "Draft.More_Complex" via "Draft.More_Transcendental")
Found termination order: "size_list size <*mlex*> {}"
locale periodic_fun
  fixes f :: "'a => 'b"
    and g :: "'a => 'a => 'a"
    and gm :: "'a => 'a => 'a"
    and g1 :: "'a => 'a"
    and gn1 :: "'a => 'a"
  assumes "periodic_fun f g gm g1 gn1"
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.836s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.ExtrEqs")
locale periodic_fun_simple
  fixes f :: "'a => 'b"
    and period :: "'a"
  assumes "periodic_fun_simple f period"
locale periodic_fun_simple'
  fixes f :: "'a => 'b"
  assumes "periodic_fun_simple' f"
### theory "HOL-Library.Nat_Bijection"
### 0.339s elapsed time, 1.349s cpu time, 0.143s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Periodic_Fun"
### 0.239s elapsed time, 0.942s cpu time, 0.097s GC time
Loading theory "Draft.More_Transcendental" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.Oriented_Circlines" via "Draft.Circlines" via "Draft.Moebius" via "Draft.Homogeneous_Coordinates" via "Draft.More_Complex")
### theory "Draft.More_Transcendental"
### 0.085s elapsed time, 0.337s cpu time, 0.000s GC time
Loading theory "Draft.Canonical_Angle" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.Oriented_Circlines" via "Draft.Circlines" via "Draft.Moebius" via "Draft.Homogeneous_Coordinates" via "Draft.More_Complex")
### theory "Draft.Canonical_Angle"
### 0.097s elapsed time, 0.376s cpu time, 0.065s GC time
Loading theory "Draft.More_Complex" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.Oriented_Circlines" via "Draft.Circlines" via "Draft.Moebius" via "Draft.Homogeneous_Coordinates")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.More_Complex"
### 0.304s elapsed time, 1.202s cpu time, 0.129s GC time
Loading theory "Draft.Angles" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.Oriented_Circlines" via "Draft.Circlines" via "Draft.Elementary_Complex_Geometry")
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "Draft.Angles"
### 0.331s elapsed time, 1.142s cpu time, 0.589s GC time
Loading theory "Draft.Elementary_Complex_Geometry" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.Oriented_Circlines" via "Draft.Circlines")
### theory "HOL-Library.BigO"
### 0.973s elapsed time, 3.677s cpu time, 0.880s GC time
Loading theory "HOL-Library.Quadratic_Discriminant" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.Oriented_Circlines" via "Draft.Circlines" via "Draft.Moebius" via "Draft.Homogeneous_Coordinates" via "Draft.Matrices" via "Draft.Quadratic")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.012s elapsed time, 3.841s cpu time, 0.782s GC time
### theory "HOL-Library.Quadratic_Discriminant"
### 0.146s elapsed time, 0.568s cpu time, 0.113s GC time
Loading theory "Draft.Quadratic" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.Oriented_Circlines" via "Draft.Circlines" via "Draft.Moebius" via "Draft.Homogeneous_Coordinates" via "Draft.Matrices")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Quadratic"
### 0.290s elapsed time, 0.894s cpu time, 0.087s GC time
Loading theory "Draft.Matrices" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.Oriented_Circlines" via "Draft.Circlines" via "Draft.Moebius" via "Draft.Homogeneous_Coordinates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Elementary_Complex_Geometry"
### 0.540s elapsed time, 1.788s cpu time, 0.200s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.095s elapsed time, 7.005s cpu time, 1.233s GC time
Loading theory "Draft.Templates" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.122s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Oriented_CirclinesMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.570s elapsed time, 1.207s cpu time, 0.139s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Matrices"
### 1.358s elapsed time, 2.771s cpu time, 0.353s GC time
Loading theory "Draft.Homogeneous_Coordinates" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.Oriented_Circlines" via "Draft.Circlines" via "Draft.Moebius")
Loading theory "Draft.Unitary_Matrices" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.Oriented_Circlines" via "Draft.Circlines" via "Draft.Hermitean_Matrices")
### theory "Draft.Unitary_Matrices"
### 0.073s elapsed time, 0.150s cpu time, 0.000s GC time
Loading theory "Draft.Hermitean_Matrices" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.Oriented_Circlines" via "Draft.Circlines")
### theory "Draft.Hermitean_Matrices"
### 0.098s elapsed time, 0.233s cpu time, 0.079s GC time
### theory "Draft.Homogeneous_Coordinates"
### 0.832s elapsed time, 1.682s cpu time, 0.990s GC time
Loading theory "Draft.Moebius" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.Oriented_Circlines" via "Draft.Circlines")
instantiation
  moebius :: group_add
  minus_moebius == minus :: moebius => moebius => moebius
  uminus_moebius == uminus_class.uminus :: moebius => moebius
  zero_moebius == zero_class.zero :: moebius
  plus_moebius == plus :: moebius => moebius => moebius
### theory "Draft.Moebius"
### 0.600s elapsed time, 0.658s cpu time, 0.080s GC time
Loading theory "Draft.Circlines" (required by "Draft.Oriented_CirclinesMoreTemplates" via "Draft.Oriented_Circlines")
### theory "Draft.Circlines"
### 1.306s elapsed time, 1.493s cpu time, 0.252s GC time
Loading theory "Draft.Oriented_Circlines" (required by "Draft.Oriented_CirclinesMoreTemplates")
### theory "Draft.Oriented_Circlines"
### 0.718s elapsed time, 1.564s cpu time, 1.179s GC time
Loading theory "Draft.Oriented_CirclinesMoreTemplates"
val templateLemmas =
   [("Oriented_Circlines.ocircline_eq_cmat_id", "ocircline_eq_cmat ?H ?H",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Oriented_Circlines.pos_oriented_of_circline",
     "pos_oriented (of_circline ?H)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Oriented_Circlines.inj_moebius_ocircline",
     "inj (moebius_ocircline ?M)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Oriented_Circlines.of_ocircline_of_circline",
     "of_ocircline (of_circline ?H) = ?H",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Oriented_Circlines.moebius_ocircline_id_moebius",
     "moebius_ocircline id_moebius ?H = ?H",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Oriented_Circlines.opposite_ocircline_involution",
     "opposite_ocircline (opposite_ocircline ?H) = ?H",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Oriented_Circlines.pos_oriented",
     "pos_oriented ?H | pos_oriented (opposite_ocircline ?H)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Oriented_Circlines.circline_set_of_ocircline",
     "circline_set (of_ocircline ?H) = ocircline_set ?H",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Oriented_Circlines.disc_opposite_ocircline",
     "disc (opposite_ocircline ?H) = disc_compl ?H",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Oriented_Circlines.disc_compl_opposite_ocircline",
     "disc_compl (opposite_ocircline ?H) = disc ?H",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Oriented_Circlines.ocircline_set_of_circline",
     "ocircline_set (of_circline ?H) = circline_set ?H",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Oriented_Circlines.ocircline_set_opposite_ocircline",
     "ocircline_set (opposite_ocircline ?H) = ocircline_set ?H",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Oriented_Circlines.of_ocircline_opposite_ocircline",
     "of_ocircline (opposite_ocircline ?H) = of_ocircline ?H",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Oriented_Circlines.disc_inter_disc_compl",
     "disc ?H Int disc_compl ?H = {}",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Oriented_Circlines.disc_inter_ocircline_set",
     "disc ?H Int ocircline_set ?H = {}",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Oriented_Circlines.disc_compl_inter_ocircline_set",
     "disc_compl ?H Int ocircline_set ?H = {}",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Oriented_Circlines.pos_oriented_opposite_ocircline",
     "pos_oriented (opposite_ocircline ?H) = (~ pos_oriented ?H)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Oriented_Circlines.on_ocircline_of_circline",
     "on_circline (of_ocircline ?H) ?z = on_ocircline ?H ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Oriented_Circlines.on_circline_opposite_ocircline",
     "on_ocircline (opposite_ocircline ?H) ?z = on_ocircline ?H ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Oriented_Circlines.moebius_ocircline_comp_inv_right",
     "moebius_ocircline ?M (moebius_ocircline (moebius_inv ?M) ?H) = ?H",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_var 0)),
    ("Oriented_Circlines.moebius_ocircline_comp_inv_left",
     "moebius_ocircline (moebius_inv ?M) (moebius_ocircline ?M ?H) = ?H",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_var 0)),
    ("Oriented_Circlines.unit_disc_iff_cmod_lt_1",
     "(of_complex ?c : unit_disc) = (cmod ?c < 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_hole 3),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Oriented_Circlines.moebius_circline_ocircline",
     "moebius_circline ?M ?H =
      of_ocircline (moebius_ocircline ?M (of_circline ?H))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Oriented_Circlines.moebius_ocircline_opposite_ocircline",
     "moebius_ocircline ?M (opposite_ocircline ?H) =
      opposite_ocircline (moebius_ocircline ?M ?H)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Oriented_Circlines.of_circline_of_ocircline_pos_oriented",
     "pos_oriented ?H ==> of_circline (of_ocircline ?H) = ?H",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Oriented_Circlines.disc_I", "in_ocircline ?H ?z ==> ?z : disc ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Oriented_Circlines.in_ocircline_ounit_circle_conjugate",
     "in_ocircline ounit_circle ?z ==>
      in_ocircline ounit_circle (conjugate ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Oriented_Circlines.ocircline_set_I",
     "on_ocircline ?H ?z ==> ?z : ocircline_set ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Oriented_Circlines.disc_compl_I",
     "out_ocircline ?H ?z ==> ?z : disc_compl ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Oriented_Circlines.out_ocircline_ounit_circle_conjugate",
     "out_ocircline ounit_circle ?z ==>
      out_ocircline ounit_circle (conjugate ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Oriented_Circlines.conjugate_in_unit_disc",
     "?z : unit_disc ==> conjugate ?z : unit_disc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("Oriented_Circlines.conjugate_in_unit_disc_compl",
     "?z : unit_disc_compl ==> conjugate ?z : unit_disc_compl",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("Oriented_Circlines.disc_moebius_ocircline",
     "disc (moebius_ocircline ?M ?H) = moebius_pt ?M ` disc ?H",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Oriented_Circlines.disc_compl_moebius_ocircline",
     "disc_compl (moebius_ocircline ?M ?H) = moebius_pt ?M ` disc_compl ?H",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Oriented_Circlines.ocircline_set_moebius_ocircline",
     "ocircline_set (moebius_ocircline ?M ?H) =
      moebius_pt ?M ` ocircline_set ?H",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Oriented_Circlines.in_on_out_univ",
     "disc ?H Un disc_compl ?H Un ocircline_set ?H = UNIV",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app (template_hole 2, template_var 0))),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Oriented_Circlines.of_complex_in_o_x_axis_disc",
     "(of_complex ?z : disc o_x_axis) = (Im ?z < 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_app (template_hole 4, template_hole 3)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Oriented_Circlines.reciprocal_preserve_orientation",
     "0\<^sub>h : disc_compl ?H ==>
      pos_oriented (moebius_ocircline moebius_reciprocal ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Oriented_Circlines.inj_of_circline",
     "of_circline ?H = of_circline ?H' ==> ?H = ?H'",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Oriented_Circlines.in_on_out",
     "in_ocircline ?H ?z | on_ocircline ?H ?z | out_ocircline ?H ?z",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("Oriented_Circlines.moebius_ocircline_comp",
     "moebius_ocircline (moebius_comp ?M1.0 ?M2.0) ?H =
      moebius_ocircline ?M1.0 (moebius_ocircline ?M2.0 ?H)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Oriented_Circlines.reciprocal_not_preserve_orientation",
     "0\<^sub>h : disc ?H ==>
      ~ pos_oriented (moebius_ocircline moebius_reciprocal ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app (template_hole 4, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0))
               )
           ))),
    ("Oriented_Circlines.of_circline_of_ocircline",
     "of_circline (of_ocircline ?H') = ?H' |
      of_circline (of_ocircline ?H') = opposite_ocircline ?H'",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0))),
               template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Oriented_Circlines.unit_disc_cmod_square_lt_1",
     "?z : unit_disc ==> (cmod (to_complex ?z))\<^sup>2 < 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_hole 8)
            )],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_hole 0))),
    ("Oriented_Circlines.pos_oriented_circle_inf",
     "\<infinity>\<^sub>h ~: ocircline_set ?H ==>
      pos_oriented ?H = (\<infinity>\<^sub>h ~: disc ?H)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app (template_hole 0, template_var 0)))))),
    ("Oriented_Circlines.inj_of_ocircline",
     "of_ocircline ?H = of_ocircline ?H' ==>
      ?H = ?H' | ?H = opposite_ocircline ?H'",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Oriented_Circlines.inversion_noteq_unit_disc",
     "[| ?u : unit_disc; ?v : unit_disc |] ==> inversion ?u ~= ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Oriented_Circlines.ocircline_set_0h",
     "ocircline_set ?H = {0\<^sub>h} ==>
      ?H = o_circline_point_0 | ?H = opposite_ocircline o_circline_point_0",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 0),
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 0, template_hole 1)))
           ))),
    ("Oriented_Circlines.pos_oriented_opposite_ocircline_cmat",
     "hermitean ?H & ?H ~= mat_zero ==>
      pos_oriented_cmat (opposite_ocircline_cmat ?H) =
      (~ pos_oriented_cmat ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)))
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 5,
           template_app (template_hole 1, template_var 0))))),
    ("Oriented_Circlines.moebius_similarity_oriented_lines_to_oriented_lines",
     "?a ~= 0 ==>
      (\<infinity>\<^sub>h : ocircline_set ?H) =
      (\<infinity>\<^sub>h
       : ocircline_set (moebius_ocircline (moebius_similarity ?a ?b) ?H))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 1)))))),
    ("Oriented_Circlines.moebius_ocircline_circline",
     "moebius_ocircline ?M ?H =
      of_circline (moebius_circline ?M (of_ocircline ?H)) |
      moebius_ocircline ?M ?H =
      opposite_ocircline
       (of_circline (moebius_circline ?M (of_ocircline ?H)))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app (template_hole 1, template_var 0))))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 0,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app (template_hole 1, template_var 0))))))
         )),
    ("Oriented_Circlines.unit_disc_to_complex_inj",
     "[| ?u : unit_disc; ?v : unit_disc; to_complex ?u = to_complex ?v |]
      ==> ?u = ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            ),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Oriented_Circlines.moebius_similarity_preserve_orientation",
     "[| ?a ~= 0; \<infinity>\<^sub>h ~: ocircline_set ?H |]
      ==> pos_oriented ?H =
          pos_oriented (moebius_ocircline (moebius_similarity ?a ?b) ?H)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_app (template_hole 4, template_var 1))
                )
            )],
       template_equation
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1))))),
    ("Oriented_Circlines.inj_ocircline_set",
     "[| ocircline_set ?H = ocircline_set ?H'; ocircline_set ?H ~= {} |]
      ==> ?H = ?H' | ?H = opposite_ocircline ?H'",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 1),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Oriented_Circlines.on_circline_opposite_ocircline_cmat",
     "[| hermitean ?H & ?H ~= mat_zero; ?z ~= vec_zero |]
      ==> on_circline_cmat_cvec (opposite_ocircline_cmat ?H) ?z =
          on_circline_cmat_cvec ?H ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_hole 5)))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Oriented_Circlines.moebius_similarity_preserve_orientation'",
     "[| ?a ~= 0; \<infinity>\<^sub>h ~: ocircline_set ?H;
         pos_oriented ?H |]
      ==> pos_oriented (moebius_ocircline (moebius_similarity ?a ?b) ?H)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app (template_hole 3, template_var 1))
                )
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 1))
           ))),
    ("Oriented_Circlines.ocircline_01inf",
     "0\<^sub>h : ocircline_set ?H &
      1\<^sub>h : ocircline_set ?H &
      \<infinity>\<^sub>h : ocircline_set ?H ==>
      ?H = o_x_axis | ?H = opposite_ocircline o_x_axis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_app (template_hole 6, template_var 0))),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_hole 5),
                    template_app (template_hole 6, template_var 0))),
                template_app
                 (template_app (template_hole 8, template_hole 4),
                  template_app (template_hole 6, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 0, template_hole 1)))
           ))),
    ("Oriented_Circlines.ocircline_set_fix_iff_ocircline_fix",
     "ocircline_set ?H' ~= {} ==>
      (ocircline_set (moebius_ocircline ?M ?H) = ocircline_set ?H') =
      (moebius_ocircline ?M ?H = ?H' |
       moebius_ocircline ?M ?H = opposite_ocircline ?H')",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 2),
              template_hole 5)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app (template_hole 6, template_var 2)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0)),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app (template_hole 0, template_var 2)))
             )))),
    ("Oriented_Circlines.pos_oriented_euclidean_circle",
     "[| is_circle (of_ocircline ?H);
         (?a, ?r) = euclidean_circle (of_ocircline ?H);
         circline_type (of_ocircline ?H) < 0 |]
      ==> pos_oriented ?H = (of_complex ?a : disc ?H)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 2))
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 1), template_var 0),
          template_app
           (template_hole 8,
            template_app (template_hole 11, template_var 2))),
        template_inequation
         (less_than,
          template_app
           (template_hole 6,
            template_app (template_hole 11, template_var 2)),
          template_hole 5)],
       template_equation
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 2))))),
    ("Oriented_Circlines.unique_ocircline_set",
     "[| ?A ~= ?B; ?A ~= ?C; ?B ~= ?C |]
      ==> EX! H.
             pos_oriented H &
             ?A : ocircline_set H &
             ?B : ocircline_set H & ?C : ocircline_set H",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 2, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Oriented_Circlines.pos_oriented_cmat_mult_positive",
     "[| hermitean ?H1.0 & ?H1.0 ~= mat_zero;
         hermitean ?H2.0 & ?H2.0 ~= mat_zero;
         EX k>0. ?H2.0 = cor k *\<^sub>s\<^sub>m ?H1.0 |]
      ==> pos_oriented_cmat ?H1.0 = pos_oriented_cmat ?H2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_hole 7)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 0)),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_hole 7)))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Oriented_Circlines.pos_oriented_cmat_mult_negative",
     "[| hermitean ?H1.0 & ?H1.0 ~= mat_zero;
         hermitean ?H2.0 & ?H2.0 ~= mat_zero;
         EX k<0. ?H2.0 = cor k *\<^sub>s\<^sub>m ?H1.0 |]
      ==> pos_oriented_cmat ?H1.0 = (~ pos_oriented_cmat ?H2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_hole 7)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 0)),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_hole 7)))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_hole 9,
           template_app (template_hole 0, template_var 0))))),
    ("Oriented_Circlines.pos_oriented_cmat_mult_positive'",
     "[| hermitean ?H1.0 & ?H1.0 ~= mat_zero;
         hermitean ?H2.0 & ?H2.0 ~= mat_zero;
         EX k>0. ?H2.0 = cor k *\<^sub>s\<^sub>m ?H1.0;
         pos_oriented_cmat ?H1.0 |]
      ==> pos_oriented_cmat ?H2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 1)),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_hole 6)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 0)),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_hole 6)))
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Oriented_Circlines.pole_in_disc_compl",
     "[| ?M = mk_moebius ?a ?b ?c ?d; ?c ~= 0; ?a * ?d - ?b * ?c ~= 0;
         is_pole ?M ?z; ?z : disc_compl ?H |]
      ==> pos_oriented (moebius_ocircline ?M ?H)",
     template_implication
      ([template_equation
         (template_var 6,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 10, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2)),
        template_negation
         (template_equation (template_var 3, template_hole 7)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 5),
                    template_var 2)),
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3)),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 6),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 6),
               template_var 0))
           ))),
    ("Oriented_Circlines.pole_in_disc",
     "[| ?M = mk_moebius ?a ?b ?c ?d; ?c ~= 0; ?a * ?d - ?b * ?c ~= 0;
         is_pole ?M ?z; ?z : disc ?H |]
      ==> ~ pos_oriented (moebius_ocircline ?M ?H)",
     template_implication
      ([template_equation
         (template_var 6,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 10, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2)),
        template_negation
         (template_equation (template_var 3, template_hole 7)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 5),
                    template_var 2)),
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3)),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 6),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 0))
               )
           )))]:
   (string * thm * template) list
### theory "Draft.Oriented_CirclinesMoreTemplates"
### 0.428s elapsed time, 0.617s cpu time, 0.107s GC time
val it = (): unit
