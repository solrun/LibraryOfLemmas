Loading theory "Draft.Linear_Systems" (required by "Draft.MatricesMoreTemplates" via "Draft.Matrices")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MatricesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MatricesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MatricesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.Linear_Systems"
### 0.081s elapsed time, 0.351s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.MatricesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.145s elapsed time, 0.586s cpu time, 0.049s GC time
Loading theory "HOL-Library.Periodic_Fun" (required by "Draft.MatricesMoreTemplates" via "Draft.Matrices" via "Draft.More_Complex" via "Draft.More_Transcendental")
locale periodic_fun
  fixes f :: "'a => 'b"
    and g :: "'a => 'a => 'a"
    and gm :: "'a => 'a => 'a"
    and g1 :: "'a => 'a"
    and gn1 :: "'a => 'a"
  assumes "periodic_fun f g gm g1 gn1"
Found termination order: "size_list size <*mlex*> {}"
locale periodic_fun_simple
  fixes f :: "'a => 'b"
    and period :: "'a"
  assumes "periodic_fun_simple f period"
### theory "HOL-Library.Set_Algebras"
### 0.236s elapsed time, 0.953s cpu time, 0.049s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MatricesMoreTemplates" via "Draft.ExtrEqs")
locale periodic_fun_simple'
  fixes f :: "'a => 'b"
  assumes "periodic_fun_simple' f"
### theory "HOL-Library.Periodic_Fun"
### 0.173s elapsed time, 0.676s cpu time, 0.077s GC time
Loading theory "Draft.More_Transcendental" (required by "Draft.MatricesMoreTemplates" via "Draft.Matrices" via "Draft.More_Complex")
### theory "HOL-Library.Nat_Bijection"
### 0.332s elapsed time, 1.322s cpu time, 0.126s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MatricesMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.More_Transcendental"
### 0.086s elapsed time, 0.338s cpu time, 0.000s GC time
Loading theory "Draft.Canonical_Angle" (required by "Draft.MatricesMoreTemplates" via "Draft.Matrices" via "Draft.More_Complex")
### theory "Draft.Canonical_Angle"
### 0.107s elapsed time, 0.420s cpu time, 0.080s GC time
Loading theory "Draft.More_Complex" (required by "Draft.MatricesMoreTemplates" via "Draft.Matrices")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.More_Complex"
### 0.317s elapsed time, 1.248s cpu time, 0.134s GC time
Loading theory "HOL-Library.Quadratic_Discriminant" (required by "Draft.MatricesMoreTemplates" via "Draft.Matrices" via "Draft.Quadratic")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.Quadratic_Discriminant"
### 0.275s elapsed time, 0.936s cpu time, 0.554s GC time
Loading theory "Draft.Quadratic" (required by "Draft.MatricesMoreTemplates" via "Draft.Matrices")
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.003s elapsed time, 3.790s cpu time, 0.883s GC time
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.086s elapsed time, 3.974s cpu time, 0.886s GC time
### theory "Draft.Quadratic"
### 0.341s elapsed time, 1.116s cpu time, 0.117s GC time
Loading theory "Draft.Matrices" (required by "Draft.MatricesMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 1.989s elapsed time, 6.333s cpu time, 1.134s GC time
Loading theory "Draft.Templates" (required by "Draft.MatricesMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.122s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MatricesMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.555s elapsed time, 1.170s cpu time, 0.120s GC time
### theory "Draft.Matrices"
### 1.333s elapsed time, 2.727s cpu time, 0.295s GC time
Loading theory "Draft.MatricesMoreTemplates"
val templateLemmas =
   [("Matrices.mat_t_mat_t", "mat_transpose (mat_transpose ?A) = ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Matrices.vec_zero_l", "?A *\<^sub>m\<^sub>v vec_zero = vec_zero",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Matrices.eye_mv_l", "eye *\<^sub>m\<^sub>v ?v = ?v",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Matrices.one_mult_sv", "1 *\<^sub>s\<^sub>v ?v = ?v",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Matrices.vec_zero_r", "vec_zero *\<^sub>v\<^sub>m ?A = vec_zero",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Matrices.vec_cnj_vec_cnj", "vec_cnj (vec_cnj ?v) = ?v",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Matrices.congruence_eye", "congruence eye ?H = ?H",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Matrices.mat_adj_adj", "mat_adj (mat_adj ?A) = ?A",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Matrices.mat_cnj_cnj", "mat_cnj (mat_cnj ?A) = ?A",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Matrices.mat_eye_r", "?A *\<^sub>m\<^sub>m eye = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Matrices.mat_zero_r", "?A *\<^sub>m\<^sub>m mat_zero = mat_zero",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Matrices.mat_eye_l", "eye *\<^sub>m\<^sub>m ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Matrices.mat_zero_l", "mat_zero *\<^sub>m\<^sub>m ?A = mat_zero",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Matrices.mult_sm_neutral", "1 *\<^sub>s\<^sub>m ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Matrices.similarity_eye", "similarity eye ?M = ?M",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Matrices.mat_det_transpose",
     "mat_det (mat_transpose ?M) = mat_det ?M",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Matrices.mat_transpose_mat_cnj",
     "mat_transpose (mat_cnj ?A) = mat_adj ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Matrices.mat_det_adj", "mat_det (mat_adj ?A) = cnj (mat_det ?A)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Matrices.mat_det_cnj", "mat_det (mat_cnj ?A) = cnj (mat_det ?A)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Matrices.mult_vv_commute",
     "?v1.0 *\<^sub>v\<^sub>v ?v2.0 = ?v2.0 *\<^sub>v\<^sub>v ?v1.0",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Matrices.mat_inv_cnj", "mat_cnj (mat_inv ?M) = mat_inv (mat_cnj ?M)",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Matrices.mat_inv_transpose",
     "mat_transpose (mat_inv ?M) = mat_inv (mat_transpose ?M)",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Matrices.nonzero_mat_cnj",
     "(mat_cnj ?A = mat_zero) = (?A = mat_zero)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Matrices.quad_form_bilinear_form",
     "quad_form ?v ?H = bilinear_form ?v ?v ?H",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 1),
         template_var 0))),
    ("Matrices.mult_mv_mult_vm",
     "?A *\<^sub>m\<^sub>v ?x = ?x *\<^sub>v\<^sub>m mat_transpose ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Matrices.cnj_quad_form",
     "cnj (quad_form ?z ?H) = quad_form ?z (mat_adj ?H)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Matrices.fst_mult_sv", "fst (?k *\<^sub>s\<^sub>v ?v) = ?k * fst ?v",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Matrices.snd_mult_sv", "snd (?k *\<^sub>s\<^sub>v ?v) = ?k * snd ?v",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Matrices.mat_t_mult_sm",
     "mat_transpose (?k *\<^sub>s\<^sub>m ?A) =
      ?k *\<^sub>s\<^sub>m mat_transpose ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Matrices.mult_sm_eye_mm",
     "?k *\<^sub>s\<^sub>m eye *\<^sub>m\<^sub>m ?A =
      ?k *\<^sub>s\<^sub>m ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Matrices.scalsquare_vv_zero",
     "(vec_cnj ?v *\<^sub>v\<^sub>v ?v = 0) = (?v = vec_zero)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Matrices.cnj_mult_vv",
     "cnj (?v1.0 *\<^sub>v\<^sub>v ?v2.0) =
      vec_cnj ?v1.0 *\<^sub>v\<^sub>v vec_cnj ?v2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Matrices.mat_det_mult",
     "mat_det (?A *\<^sub>m\<^sub>m ?B) = mat_det ?A * mat_det ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Matrices.vec_cnj_mult_mv",
     "vec_cnj (?A *\<^sub>m\<^sub>v ?x) =
      mat_cnj ?A *\<^sub>m\<^sub>v vec_cnj ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Matrices.vec_cnj_sv",
     "vec_cnj (?k *\<^sub>s\<^sub>v ?A) =
      cnj ?k *\<^sub>s\<^sub>v vec_cnj ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Matrices.vec_cnj_mult_vm",
     "vec_cnj (?v *\<^sub>v\<^sub>m ?A) =
      vec_cnj ?v *\<^sub>v\<^sub>m mat_cnj ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Matrices.mat_adj_mult_mm",
     "mat_adj (?A *\<^sub>m\<^sub>m ?B) =
      mat_adj ?B *\<^sub>m\<^sub>m mat_adj ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("Matrices.mat_adj_mult_sm",
     "mat_adj (?k *\<^sub>s\<^sub>m ?A) =
      cnj ?k *\<^sub>s\<^sub>m mat_adj ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Matrices.mat_cnj_sm",
     "mat_cnj (?k *\<^sub>s\<^sub>m ?A) =
      cnj ?k *\<^sub>s\<^sub>m mat_cnj ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Matrices.mat_t_mult_mm",
     "mat_transpose (?A *\<^sub>m\<^sub>m ?B) =
      mat_transpose ?B *\<^sub>m\<^sub>m mat_transpose ?A",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("Matrices.mat_det_mult_sm",
     "mat_det (?k *\<^sub>s\<^sub>m ?A) = ?k * ?k * mat_det ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Matrices.mult_vv_scale_sv2",
     "?v1.0 *\<^sub>v\<^sub>v (?k *\<^sub>s\<^sub>v ?v2.0) =
      ?k * ?v1.0 *\<^sub>v\<^sub>v ?v2.0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Matrices.mult_vv_mv",
     "?x *\<^sub>v\<^sub>v (?A *\<^sub>m\<^sub>v ?y) =
      ?x *\<^sub>v\<^sub>m ?A *\<^sub>v\<^sub>v ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Matrices.mult_vv_scale_sv1",
     "?k *\<^sub>s\<^sub>v ?v1.0 *\<^sub>v\<^sub>v ?v2.0 =
      ?k * ?v1.0 *\<^sub>v\<^sub>v ?v2.0",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Matrices.quad_form_scale_m",
     "quad_form ?v (?k *\<^sub>s\<^sub>m ?H) = ?k * quad_form ?v ?H",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Matrices.mult_mv_mv",
     "?B *\<^sub>m\<^sub>v (?A *\<^sub>m\<^sub>v ?v) =
      ?B *\<^sub>m\<^sub>m ?A *\<^sub>m\<^sub>v ?v",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Matrices.mult_sv_mv",
     "?k *\<^sub>s\<^sub>v (?A *\<^sub>m\<^sub>v ?v) =
      ?A *\<^sub>m\<^sub>v (?k *\<^sub>s\<^sub>v ?v)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Matrices.mult_sv_mult_sv",
     "?k1.0 *\<^sub>s\<^sub>v (?k2.0 *\<^sub>s\<^sub>v ?v) =
      (?k1.0 * ?k2.0) *\<^sub>s\<^sub>v ?v",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Matrices.mult_vm_vm",
     "?v *\<^sub>v\<^sub>m ?A *\<^sub>v\<^sub>m ?B =
      ?v *\<^sub>v\<^sub>m (?A *\<^sub>m\<^sub>m ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Matrices.congruence_scale_m",
     "congruence ?M (?k *\<^sub>s\<^sub>m ?H) =
      ?k *\<^sub>s\<^sub>m congruence ?M ?H",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Matrices.congruence_congruence",
     "congruence ?M1.0 (congruence ?M2.0 ?H) =
      congruence (?M2.0 *\<^sub>m\<^sub>m ?M1.0) ?H",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("Matrices.mult_mm_assoc",
     "?A *\<^sub>m\<^sub>m (?B *\<^sub>m\<^sub>m ?C) =
      ?A *\<^sub>m\<^sub>m ?B *\<^sub>m\<^sub>m ?C",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Matrices.mult_mm_sm",
     "?A *\<^sub>m\<^sub>m (?k *\<^sub>s\<^sub>m ?B) =
      ?k *\<^sub>s\<^sub>m (?A *\<^sub>m\<^sub>m ?B)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Matrices.mult_sm_mm",
     "?k *\<^sub>s\<^sub>m ?A *\<^sub>m\<^sub>m ?B =
      ?k *\<^sub>s\<^sub>m (?A *\<^sub>m\<^sub>m ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Matrices.mult_sm_distribution",
     "?k1.0 *\<^sub>s\<^sub>m (?k2.0 *\<^sub>s\<^sub>m ?A) =
      (?k1.0 * ?k2.0) *\<^sub>s\<^sub>m ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Matrices.similarity_eye'", "similarity (1, 0, 0, 1) ?M = ?M",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_hole 1),
                 template_hole 3)))),
         template_var 0),
       template_var 0)),
    ("Matrices.mult_sv_ex_id2",
     "EX k. k ~= 0 & ?v = k *\<^sub>s\<^sub>v ?v",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Matrices.mult_sv_ex_id1",
     "EX k. k ~= 0 & k *\<^sub>s\<^sub>v ?v = ?v",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Matrices.mult_sm_ex_id2",
     "EX k. k ~= 0 & ?M = k *\<^sub>s\<^sub>m ?M",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Matrices.mult_sm_ex_id1",
     "EX k. k ~= 0 & k *\<^sub>s\<^sub>m ?M = ?M",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Matrices.mult_mv_vv",
     "?A *\<^sub>m\<^sub>v ?v1.0 *\<^sub>v\<^sub>v ?v2.0 =
      ?v1.0 *\<^sub>v\<^sub>v (mat_transpose ?A *\<^sub>m\<^sub>v ?v2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("Matrices.mat_inv_inv",
     "mat_det ?M ~= 0 ==> mat_inv (mat_inv ?M) = ?M",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_hole 0, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Matrices.bilinear_form_scale_m",
     "bilinear_form ?v1.0 ?v2.0 (?k *\<^sub>s\<^sub>m ?H) =
      ?k * bilinear_form ?v1.0 ?v2.0 ?H",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Matrices.bilinear_form_scale_v2",
     "bilinear_form ?v1.0 (?k *\<^sub>s\<^sub>v ?v2.0) ?H =
      ?k * bilinear_form ?v1.0 ?v2.0 ?H",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Matrices.mat_inv_r",
     "mat_det ?A ~= 0 ==> ?A *\<^sub>m\<^sub>m mat_inv ?A = eye",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Matrices.mat_inv_l",
     "mat_det ?A ~= 0 ==> mat_inv ?A *\<^sub>m\<^sub>m ?A = eye",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 0),
         template_hole 0))),
    ("Matrices.bilinear_form_scale_v1",
     "bilinear_form (?k *\<^sub>s\<^sub>v ?v1.0) ?v2.0 ?H =
      cnj ?k * bilinear_form ?v1.0 ?v2.0 ?H",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Matrices.mat_det_similarity",
     "mat_det ?A ~= 0 ==> mat_det (similarity ?A ?M) = mat_det ?M",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Matrices.mat_trace_similarity",
     "mat_det ?A ~= 0 ==> mat_trace (similarity ?A ?M) = mat_trace ?M",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Matrices.mat_adj_inv",
     "mat_det ?M ~= 0 ==> mat_adj (mat_inv ?M) = mat_inv (mat_adj ?M)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Matrices.mat_det_inv",
     "mat_det ?A ~= 0 ==> mat_det (mat_inv ?A) = 1 / mat_det ?A",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 4, template_var 0))))),
    ("Matrices.congruence_congruence_inv",
     "mat_det ?M ~= 0 ==> congruence ?M (congruence (mat_inv ?M) ?H) = ?H",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_var 0))),
    ("Matrices.mat_det_congruence",
     "mat_det (congruence ?M ?H) =
      cor ((cmod (mat_det ?M))\<^sup>2) * mat_det ?H",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 8, template_var 1))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))))),
         template_app (template_hole 8, template_var 0)))),
    ("Matrices.det_sgn_congruence",
     "mat_det ?M ~= 0 ==>
      sgn (mat_det (congruence ?M ?H)) = sgn (mat_det ?H)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_hole 1,
           template_app (template_hole 3, template_var 0))))),
    ("Matrices.quad_form_scale_v",
     "quad_form (?k *\<^sub>s\<^sub>v ?v) ?H =
      cor ((cmod ?k)\<^sup>2) * quad_form ?v ?H",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))))),
         template_app
          (template_app (template_hole 8, template_var 1),
           template_var 0)))),
    ("Matrices.mat_inv_mult_sm",
     "?k ~= 0 ==>
      mat_inv (?k *\<^sub>s\<^sub>m ?A) =
      (1 / ?k) *\<^sub>s\<^sub>m mat_inv ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Matrices.Re_det_sgn_congruence",
     "mat_det ?M ~= 0 ==>
      sgn (Re (mat_det (congruence ?M ?H))) = sgn (Re (mat_det ?H))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 5, template_var 0)))))),
    ("Matrices.nonzero_mult_real",
     "[| ?A ~= mat_zero; ?k ~= 0 |]
      ==> ?k *\<^sub>s\<^sub>m ?A ~= mat_zero",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_hole 3)
           ))),
    ("Matrices.eigen_equation",
     "eigenval ?k ?H = (?k\<^sup>2 - mat_trace ?H * ?k + mat_det ?H = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4)))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_var 1))),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Matrices.mult_assoc_5",
     "?A *\<^sub>m\<^sub>m
      (?B *\<^sub>m\<^sub>m ?C *\<^sub>m\<^sub>m ?D) *\<^sub>m\<^sub>m
      ?E =
      ?A *\<^sub>m\<^sub>m ?B *\<^sub>m\<^sub>m ?C *\<^sub>m\<^sub>m
      (?D *\<^sub>m\<^sub>m ?E)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 4),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Matrices.quad_form_congruence",
     "mat_det ?M ~= 0 ==>
      quad_form (?M *\<^sub>m\<^sub>v ?z) (congruence (mat_inv ?M) ?H) =
      quad_form ?z ?H",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 2),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Matrices.mult_mv_nonzero",
     "[| ?v ~= vec_zero; mat_det ?A ~= 0 |]
      ==> ?A *\<^sub>m\<^sub>v ?v ~= vec_zero",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_hole 4)
           ))),
    ("Matrices.mult_vm_nonzero",
     "[| ?v ~= vec_zero; mat_det ?A ~= 0 |]
      ==> ?v *\<^sub>v\<^sub>m ?A ~= vec_zero",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 4)
           ))),
    ("Matrices.mult_mm_non_zero_r",
     "[| ?A ~= mat_zero; mat_det ?B ~= 0 |]
      ==> ?A *\<^sub>m\<^sub>m ?B ~= mat_zero",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 4)
           ))),
    ("Matrices.congruence_nonzero",
     "[| ?H ~= mat_zero; mat_det ?M ~= 0 |]
      ==> congruence ?M ?H ~= mat_zero",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_hole 4)
           ))),
    ("Matrices.mult_mm_non_zero_l",
     "[| mat_det ?A ~= 0; ?B ~= mat_zero |]
      ==> ?A *\<^sub>m\<^sub>m ?B ~= mat_zero",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 1)
           ))),
    ("Matrices.mult_mv_cancel_l",
     "[| mat_det ?A ~= 0;
         ?A *\<^sub>m\<^sub>v ?v = ?A *\<^sub>m\<^sub>v ?v' |]
      ==> ?v = ?v'",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 2),
              template_hole 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Matrices.mult_vm_cancel_r",
     "[| mat_det ?A ~= 0;
         ?v *\<^sub>v\<^sub>m ?A = ?v' *\<^sub>v\<^sub>m ?A |]
      ==> ?v = ?v'",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 2),
              template_hole 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 1), template_var 2),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 2))],
       template_equation (template_var 1, template_var 0))),
    ("Matrices.inj_congruence",
     "[| mat_det ?M ~= 0; congruence ?M ?H = congruence ?M ?H' |]
      ==> ?H = ?H'",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 2),
              template_hole 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Matrices.mult_mm_cancel_r",
     "[| mat_det ?M ~= 0;
         ?A *\<^sub>m\<^sub>m ?M = ?B *\<^sub>m\<^sub>m ?M |]
      ==> ?A = ?B",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 2),
              template_hole 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 1), template_var 2),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 2))],
       template_equation (template_var 1, template_var 0))),
    ("Matrices.mult_mm_cancel_l",
     "[| mat_det ?M ~= 0;
         ?M *\<^sub>m\<^sub>m ?A = ?M *\<^sub>m\<^sub>m ?B |]
      ==> ?A = ?B",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 2),
              template_hole 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Matrices.mult_sm_inv_l",
     "[| ?k ~= 0; ?k *\<^sub>s\<^sub>m ?A = ?B |]
      ==> ?A = (1 / ?k) *\<^sub>s\<^sub>m ?B",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_var 1,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2)),
           template_var 0)))),
    ("Matrices.mult_mm_inv_l",
     "[| mat_det ?A ~= 0; ?A *\<^sub>m\<^sub>m ?B = ?C |]
      ==> ?B = mat_inv ?A *\<^sub>m\<^sub>m ?C",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_var 1,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("Matrices.mult_mm_inv_r",
     "[| mat_det ?B ~= 0; ?A *\<^sub>m\<^sub>m ?B = ?C |]
      ==> ?A = ?C *\<^sub>m\<^sub>m mat_inv ?B",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 2),
          template_var 0)],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 2))))),
    ("Matrices.congruence_inv",
     "[| mat_det ?M ~= 0; congruence ?M ?H = ?H' |]
      ==> congruence (mat_inv ?M) ?H' = ?H",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0),
         template_var 1))),
    ("Matrices.mult_mv_inv",
     "[| ?x = ?A *\<^sub>m\<^sub>v ?y; mat_det ?A ~= 0 |]
      ==> ?y = mat_inv ?A *\<^sub>m\<^sub>v ?x",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 0, template_var 1)),
           template_var 2)))),
    ("Matrices.mult_vm_inv",
     "[| ?x = ?y *\<^sub>v\<^sub>m ?A; mat_det ?A ~= 0 |]
      ==> ?y = ?x *\<^sub>v\<^sub>m mat_inv ?A",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("Matrices.similarity_inv",
     "[| similarity ?A ?M1.0 = ?M2.0; mat_det ?A ~= 0 |]
      ==> similarity (mat_inv ?A) ?M2.0 = ?M1.0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 2),
              template_hole 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 0, template_var 2)),
           template_var 0),
         template_var 1))),
    ("Matrices.bilinear_form_congruence",
     "mat_det ?M ~= 0 ==>
      bilinear_form (?M *\<^sub>m\<^sub>v ?v1.0)
       (?M *\<^sub>m\<^sub>v ?v2.0) (congruence (mat_inv ?M) ?H) =
      bilinear_form ?v1.0 ?v2.0 ?H",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 5, template_var 3),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Matrices.mat_inv_mult_mm",
     "[| mat_det ?A ~= 0; mat_det ?B ~= 0 |]
      ==> mat_inv (?A *\<^sub>m\<^sub>m ?B) =
          mat_inv ?B *\<^sub>m\<^sub>m mat_inv ?A",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 1, template_var 1))))),
    ("Matrices.similarity_comp",
     "[| mat_det ?A1.0 ~= 0; mat_det ?A2.0 ~= 0 |]
      ==> similarity ?A1.0 (similarity ?A2.0 ?M) =
          similarity (?A2.0 *\<^sub>m\<^sub>m ?A1.0) ?M",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.MatricesMoreTemplates"
### 0.326s elapsed time, 0.436s cpu time, 0.000s GC time
val it = (): unit
