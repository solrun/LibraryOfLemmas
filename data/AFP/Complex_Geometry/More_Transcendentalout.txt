Loading theory "HOL-Library.Function_Algebras" (required by "Draft.More_TranscendentalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.More_TranscendentalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.More_TranscendentalMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Tree" (required by "Draft.More_TranscendentalMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.520s cpu time, 0.045s GC time
Loading theory "HOL-Library.Periodic_Fun" (required by "Draft.More_TranscendentalMoreTemplates" via "Draft.More_Transcendental")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale periodic_fun
  fixes f :: "'a => 'b"
    and g :: "'a => 'a => 'a"
    and gm :: "'a => 'a => 'a"
    and g1 :: "'a => 'a"
    and gn1 :: "'a => 'a"
  assumes "periodic_fun f g gm g1 gn1"
locale periodic_fun_simple
  fixes f :: "'a => 'b"
    and period :: "'a"
  assumes "periodic_fun_simple f period"
locale periodic_fun_simple'
  fixes f :: "'a => 'b"
  assumes "periodic_fun_simple' f"
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.859s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.More_TranscendentalMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Periodic_Fun"
### 0.159s elapsed time, 0.638s cpu time, 0.000s GC time
Loading theory "Draft.More_Transcendental" (required by "Draft.More_TranscendentalMoreTemplates")
### theory "Draft.More_Transcendental"
### 0.105s elapsed time, 0.404s cpu time, 0.073s GC time
### theory "HOL-Library.Nat_Bijection"
### 0.411s elapsed time, 1.627s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.More_TranscendentalMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.734s elapsed time, 2.402s cpu time, 0.287s GC time
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.950s elapsed time, 2.666s cpu time, 0.745s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.968s elapsed time, 4.985s cpu time, 0.948s GC time
Loading theory "Draft.Templates" (required by "Draft.More_TranscendentalMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.More_TranscendentalMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.455s elapsed time, 0.509s cpu time, 0.066s GC time
Loading theory "Draft.More_TranscendentalMoreTemplates"
val templateLemmas =
   [("More_Transcendental.sin_kpi", "sin (real_of_int ?k * pi) = 0",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1)),
       template_hole 0)),
    ("More_Transcendental.atan2_bounded",
     "- pi <= atan2 ?y ?x & atan2 ?y ?x < pi",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 2))
         )),
    ("More_Transcendental.cos_periodic_int",
     "cos (?x + real_of_int ?i * (2 * pi)) = cos ?x",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_hole 0)))),
       template_app (template_hole 7, template_var 1))),
    ("More_Transcendental.cos_periodic_nat",
     "cos (?x + real ?n * (2 * pi)) = cos ?x",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_hole 0)))),
       template_app (template_hole 7, template_var 1))),
    ("More_Transcendental.sin_periodic_int",
     "sin (?x + real_of_int ?i * (2 * pi)) = sin ?x",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_hole 0)))),
       template_app (template_hole 7, template_var 1))),
    ("More_Transcendental.sin_periodic_nat",
     "sin (?x + real ?n * (2 * pi)) = sin ?x",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_hole 0)))),
       template_app (template_hole 7, template_var 1))),
    ("More_Transcendental.cos_even_kpi",
     "even ?k ==> cos (real_of_int ?k * pi) = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6))),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 1)),
         template_hole 0))),
    ("More_Transcendental.cos_odd_kpi",
     "odd ?k ==> cos (real_of_int ?k * pi) = - 1",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_hole 2)),
         template_app (template_hole 1, template_hole 0)))),
    ("More_Transcendental.cos_lt_zero_on_pi2_pi",
     "[| pi / 2 < ?x; ?x <= pi |] ==> cos ?x < 0",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_hole 3))),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 6)],
       template_inequation
        (less_than, template_app (template_hole 1, template_var 0),
         template_hole 0))),
    ("More_Transcendental.sin_pi2_plus_even_kpi",
     "even ?k ==> sin (pi / 2 + real_of_int ?k * pi) = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_hole 9))),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 10, template_hole 9)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 4))),
         template_hole 0))),
    ("More_Transcendental.sin_pi2_plus_odd_kpi",
     "odd ?k ==> sin (pi / 2 + real_of_int ?k * pi) = - 1",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app (template_hole 11, template_hole 10))),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 11, template_hole 10)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_hole 5))),
         template_app (template_hole 1, template_hole 0)))),
    ("More_Transcendental.cos0_sin1",
     "sin ?\<phi> = 1 ==> EX x. ?\<phi> = pi / 2 + 2 * real_of_int x * pi",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 0),
          template_hole 9)],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("More_Transcendental.sin_0_iff_canon",
     "[| sin ?\<phi> = 0; - pi < ?\<phi>; ?\<phi> <= pi |]
      ==> ?\<phi> = 0 | ?\<phi> = pi",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 0), template_hole 5),
        template_inequation
         (less_than, template_app (template_hole 3, template_hole 2),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_hole 5)),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_hole 2))
           ))),
    ("More_Transcendental.sin_cos_eq",
     "[| cos ?a = cos ?b; sin ?a = sin ?b |]
      ==> EX x. ?a - ?b = 2 * real_of_int x * pi",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 1),
          template_app (template_hole 9, template_var 0)),
        template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("More_Transcendental.cos_0_iff_canon",
     "[| cos ?\<phi> = 0; - pi < ?\<phi>; ?\<phi> <= pi |]
      ==> ?\<phi> = pi / 2 | ?\<phi> = - pi / 2",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 0), template_hole 9),
        template_inequation
         (less_than, template_app (template_hole 7, template_hole 6),
          template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 6)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 11, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_hole 6),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))))),
             template_app
              (template_app (template_hole 11, template_var 0),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 7, template_hole 6)),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0)))))
           ))),
    ("More_Transcendental.sin_inj",
     "[| - pi / 2 <= ?\<alpha> & ?\<alpha> <= pi / 2;
         - pi / 2 <= ?\<alpha>' & ?\<alpha>' <= pi / 2;
         ?\<alpha> ~= ?\<alpha>' |]
      ==> sin ?\<alpha> ~= sin ?\<alpha>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app (template_hole 7, template_hole 6)),
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_hole 3)))),
                  template_var 1)),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_app
                 (template_app (template_hole 8, template_hole 6),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_hole 3)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app (template_hole 7, template_hole 6)),
                      template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_hole 3)))),
                  template_var 0)),
              template_app
               (template_app (template_hole 9, template_var 0),
                template_app
                 (template_app (template_hole 8, template_hole 6),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_hole 3)))))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("More_Transcendental.ex_cos_gt",
     "[| - pi / 2 <= ?\<alpha> & ?\<alpha> <= pi / 2; ?a < 1 |]
      ==> EX \<alpha>'>=- pi / 2.
             \<alpha>' <= pi / 2 &
             \<alpha>' ~= ?\<alpha> & ?a < cos (?\<alpha> - \<alpha>')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app (template_hole 11, template_hole 10)),
                      template_app
                       (template_hole 9,
                        template_app (template_hole 8, template_hole 7)))),
                  template_var 1)),
              template_app
               (template_app (template_hole 13, template_var 1),
                template_app
                 (template_app (template_hole 12, template_hole 10),
                  template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_hole 7)))))
            ),
        template_inequation (less_than, template_var 0, template_hole 5)],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("More_Transcendental.ex_cos_eq",
     "[| - pi / 2 <= ?\<alpha> & ?\<alpha> <= pi / 2; 0 <= ?a; ?a < 1 |]
      ==> EX \<alpha>'>=- pi / 2.
             \<alpha>' <= pi / 2 &
             \<alpha>' ~= ?\<alpha> & cos (?\<alpha> - \<alpha>') = ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app
                       (template_hole 13,
                        template_app (template_hole 12, template_hole 11)),
                      template_app
                       (template_hole 10,
                        template_app (template_hole 9, template_hole 8)))),
                  template_var 1)),
              template_app
               (template_app (template_hole 14, template_var 1),
                template_app
                 (template_app (template_hole 13, template_hole 11),
                  template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_hole 8)))))
            ),
        template_inequation (less_equals, template_hole 7, template_var 0),
        template_inequation (less_than, template_var 0, template_hole 5)],
       template_predicate (template_app (template_hole 4, t_empty))))]:
   (string * thm * template) list
### theory "Draft.More_TranscendentalMoreTemplates"
### 0.273s elapsed time, 0.389s cpu time, 0.000s GC time
val it = (): unit
