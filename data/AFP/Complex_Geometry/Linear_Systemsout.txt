Loading theory "Draft.Linear_Systems" (required by "Draft.Linear_SystemsMoreTemplates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Linear_SystemsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Linear_SystemsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Linear_SystemsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Linear_Systems"
### 0.089s elapsed time, 0.386s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Linear_SystemsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.157s elapsed time, 0.648s cpu time, 0.045s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.852s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Linear_SystemsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.346s elapsed time, 1.219s cpu time, 0.123s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Linear_SystemsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.700s elapsed time, 2.150s cpu time, 0.290s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.740s elapsed time, 2.109s cpu time, 0.212s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.788s elapsed time, 4.097s cpu time, 0.855s GC time
Loading theory "Draft.Templates" (required by "Draft.Linear_SystemsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.078s elapsed time, 0.136s cpu time, 0.047s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Linear_SystemsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.436s elapsed time, 0.443s cpu time, 0.000s GC time
Loading theory "Draft.Linear_SystemsMoreTemplates"
val templateLemmas =
   [("Linear_Systems.regular_system",
     "det2 ?a11.0 ?a12.0 ?a21.0 ?a22.0 ~= (0::?'a) ==>
      EX! x.
         ?a11.0 * fst x + ?a12.0 * snd x = ?b1.0 &
         ?a21.0 * fst x + ?a22.0 * snd x = ?b2.0",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_hole 6)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Linear_Systems.regular_homogenous_system",
     "[| det2 ?a11.0 ?a12.0 ?a21.0 ?a22.0 ~= (0::?'a);
         ?a11.0 * ?x1.0 + ?a12.0 * ?x2.0 = (0::?'a);
         ?a21.0 * ?x1.0 + ?a22.0 * ?x2.0 = (0::?'a) |]
      ==> ?x1.0 = (0::?'a) & ?x2.0 = (0::?'a)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_hole 3)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 5),
                template_var 1)),
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 0)),
          template_hole 3),
        template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 1)),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 3)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 3))
           ))),
    ("Linear_Systems.singular_system",
     "[| det2 ?a11.0 ?a12.0 ?a21.0 ?a22.0 = (0::?'a);
         ?a11.0 ~= (0::?'a) | ?a12.0 ~= (0::?'a);
         ?a11.0 * fst ?x0.0 + ?a12.0 * snd ?x0.0 = ?b1.0;
         ?a21.0 * fst ?x0.0 + ?a22.0 * snd ?x0.0 = ?b2.0;
         ?a11.0 * fst ?x + ?a12.0 * snd ?x = ?b1.0 |]
      ==> ?a21.0 * fst ?x + ?a22.0 * snd ?x = ?b2.0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 7, template_var 7),
                template_var 6),
              template_var 5),
            template_var 4),
          template_hole 6),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 8, template_var 7),
                    template_hole 6))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 8, template_var 6),
                  template_hole 6)))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 7),
                template_app (template_hole 1, template_var 3))),
            template_app
             (template_app (template_hole 2, template_var 6),
              template_app (template_hole 0, template_var 3))),
          template_var 2),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 5),
                template_app (template_hole 1, template_var 3))),
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app (template_hole 0, template_var 3))),
          template_var 1),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 7),
                template_app (template_hole 1, template_var 0))),
            template_app
             (template_app (template_hole 2, template_var 6),
              template_app (template_hole 0, template_var 0))),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 5),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app (template_hole 0, template_var 0))),
         template_var 1))),
    ("Linear_Systems.linear_system_homogenous_3_2",
     "[| ?f1.0 = (%x y z. ?a11.0 * x + ?a12.0 * y + ?a13.0 * z);
         ?f2.0 = (%x y z. ?a21.0 * x + ?a22.0 * y + ?a23.0 * z);
         ?f1.0 ?x1.0 ?y1.0 ?z1.0 = (0::?'a);
         ?f2.0 ?x1.0 ?y1.0 ?z1.0 = (0::?'a);
         ?f1.0 ?x2.0 ?y2.0 ?z2.0 = (0::?'a);
         ?f2.0 ?x2.0 ?y2.0 ?z2.0 = (0::?'a);
         ?x2.0 ~= (0::?'a) | ?y2.0 ~= (0::?'a) | ?z2.0 ~= (0::?'a);
         det2 ?a11.0 ?a12.0 ?a21.0 ?a22.0 ~= (0::?'a) |
         det2 ?a11.0 ?a13.0 ?a21.0 ?a23.0 ~= (0::?'a) |
         det2 ?a12.0 ?a13.0 ?a22.0 ?a23.0 ~= (0::?'a) |]
      ==> EX k. ?x1.0 = k * ?x2.0 & ?y1.0 = k * ?y2.0 & ?z1.0 = k * ?z2.0",
     template_implication
      ([template_equation (template_var 13, t_empty),
        template_equation (template_var 9, t_empty),
        template_equation
         (template_app
           (template_app
             (template_app (template_var 13, template_var 5),
              template_var 4),
            template_var 3),
          template_hole 5),
        template_equation
         (template_app
           (template_app
             (template_app (template_var 9, template_var 5),
              template_var 4),
            template_var 3),
          template_hole 5),
        template_equation
         (template_app
           (template_app
             (template_app (template_var 13, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 5),
        template_equation
         (template_app
           (template_app
             (template_app (template_var 9, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 5),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_hole 5))),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 6, template_var 1),
                      template_hole 5))),
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 6, template_var 0),
                    template_hole 5))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 2, template_var 12),
                            template_var 11),
                          template_var 8),
                        template_var 7)),
                    template_hole 5))),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app
                           (template_app
                             (template_app
                               (template_hole 2, template_var 12),
                              template_var 10),
                            template_var 8),
                          template_var 6)),
                      template_hole 5))),
                template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app
                         (template_app
                           (template_app (template_hole 2, template_var 11),
                            template_var 10),
                          template_var 7),
                        template_var 6)),
                    template_hole 5))))
            )],
       template_predicate (template_app (template_hole 1, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Linear_SystemsMoreTemplates"
### 0.283s elapsed time, 0.423s cpu time, 0.072s GC time
val it = (): unit
