Loading theory "Draft.Linear_Systems" (required by "Draft.Elementary_Complex_GeometryMoreTemplates" via "Draft.Elementary_Complex_Geometry")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Elementary_Complex_GeometryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Elementary_Complex_GeometryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Elementary_Complex_GeometryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.Linear_Systems"
### 0.077s elapsed time, 0.332s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Elementary_Complex_GeometryMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.523s cpu time, 0.042s GC time
Loading theory "HOL-Library.Periodic_Fun" (required by "Draft.Elementary_Complex_GeometryMoreTemplates" via "Draft.Elementary_Complex_Geometry" via "Draft.More_Complex" via "Draft.More_Transcendental")
locale periodic_fun
  fixes f :: "'a => 'b"
    and g :: "'a => 'a => 'a"
    and gm :: "'a => 'a => 'a"
    and g1 :: "'a => 'a"
    and gn1 :: "'a => 'a"
  assumes "periodic_fun f g gm g1 gn1"
locale periodic_fun_simple
  fixes f :: "'a => 'b"
    and period :: "'a"
  assumes "periodic_fun_simple f period"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.209s elapsed time, 0.848s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Elementary_Complex_GeometryMoreTemplates" via "Draft.ExtrEqs")
locale periodic_fun_simple'
  fixes f :: "'a => 'b"
  assumes "periodic_fun_simple' f"
### theory "HOL-Library.Periodic_Fun"
### 0.176s elapsed time, 0.690s cpu time, 0.077s GC time
Loading theory "Draft.More_Transcendental" (required by "Draft.Elementary_Complex_GeometryMoreTemplates" via "Draft.Elementary_Complex_Geometry" via "Draft.More_Complex")
### theory "HOL-Library.Nat_Bijection"
### 0.323s elapsed time, 1.296s cpu time, 0.119s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Elementary_Complex_GeometryMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.More_Transcendental"
### 0.086s elapsed time, 0.350s cpu time, 0.000s GC time
Loading theory "Draft.Canonical_Angle" (required by "Draft.Elementary_Complex_GeometryMoreTemplates" via "Draft.Elementary_Complex_Geometry" via "Draft.More_Complex")
### theory "Draft.Canonical_Angle"
### 0.101s elapsed time, 0.390s cpu time, 0.073s GC time
Loading theory "Draft.More_Complex" (required by "Draft.Elementary_Complex_GeometryMoreTemplates" via "Draft.Elementary_Complex_Geometry")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.More_Complex"
### 0.312s elapsed time, 1.225s cpu time, 0.135s GC time
Loading theory "Draft.Angles" (required by "Draft.Elementary_Complex_GeometryMoreTemplates" via "Draft.Elementary_Complex_Geometry")
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Angles"
### 0.331s elapsed time, 1.168s cpu time, 0.565s GC time
Loading theory "Draft.Elementary_Complex_Geometry" (required by "Draft.Elementary_Complex_GeometryMoreTemplates")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.985s elapsed time, 3.725s cpu time, 0.905s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.075s elapsed time, 3.921s cpu time, 0.907s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Elementary_Complex_Geometry"
### 0.503s elapsed time, 1.330s cpu time, 0.151s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.948s elapsed time, 5.863s cpu time, 1.139s GC time
Loading theory "Draft.Templates" (required by "Draft.Elementary_Complex_GeometryMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Elementary_Complex_GeometryMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.448s elapsed time, 0.495s cpu time, 0.057s GC time
Loading theory "Draft.Elementary_Complex_GeometryMoreTemplates"
val templateLemmas =
   [("Elementary_Complex_Geometry.collinear_sym1",
     "collinear ?z1.0 ?z2.0 ?z3.0 = collinear ?z1.0 ?z3.0 ?z2.0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Elementary_Complex_Geometry.collinear_sym2",
     "collinear ?z1.0 ?z2.0 ?z3.0 = collinear ?z2.0 ?z1.0 ?z3.0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Elementary_Complex_Geometry.collinear_sym2'",
     "collinear ?z1.0 ?z2.0 ?z3.0 ==> collinear ?z2.0 ?z1.0 ?z3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("Elementary_Complex_Geometry.circ_tang_vec_opposite_orient",
     "circ_tang_vec ?\<mu> ?E ?p = - circ_tang_vec ?\<mu> ?E (~ ?p)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Elementary_Complex_Geometry.line_param",
     "?z1.0 + cor ?k * (?z2.0 - ?z1.0) : line ?z1.0 ?z2.0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2)))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))
         )),
    ("Elementary_Complex_Geometry.collinear_ex_real",
     "collinear ?z1.0 ?z2.0 ?z3.0 =
      (EX k. ?z1.0 = ?z2.0 | ?z3.0 - ?z1.0 = cor k * (?z2.0 - ?z1.0))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Elementary_Complex_Geometry.collinear_trans1",
     "[| collinear ?z0.0 ?z2.0 ?z1.0; collinear ?z0.0 ?z3.0 ?z1.0;
         ?z0.0 ~= ?z1.0 |]
      ==> collinear ?z0.0 ?z2.0 ?z3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 0),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Elementary_Complex_Geometry.circ_tang_vec_ortho",
     "scalprod (?E - ?\<mu>) (circ_tang_vec ?\<mu> ?E ?p) = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1))),
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 1)),
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2),
                   template_var 0))))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1))),
       template_hole 0)),
    ("Elementary_Complex_Geometry.collinear_det",
     "~ collinear ?z1.0 ?z2.0 ?z3.0 ==>
      det2 (?z3.0 - ?z1.0) (cnj (?z3.0 - ?z1.0)) (?z1.0 - ?z2.0)
       (cnj (?z1.0 - ?z2.0)) ~=
      0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 2)),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_var 2))),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1))),
             template_hole 0)
           ))),
    ("Elementary_Complex_Geometry.ang_circ_a_pTrue",
     "[| ?E ~= ?\<mu>1.0; ?E ~= ?\<mu>2.0 |]
      ==> ang_circ_a ?E ?\<mu>1.0 ?\<mu>2.0 ?p1.0 ?p2.0 =
          ang_circ_a' ?E ?\<mu>1.0 ?\<mu>2.0",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_negation
         (template_equation (template_var 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_hole 0),
           template_hole 0)))),
    ("Elementary_Complex_Geometry.ang_circ_a'_simp",
     "[| ?E ~= ?\<mu>1.0; ?E ~= ?\<mu>2.0 |]
      ==> ang_circ_a' ?E ?\<mu>1.0 ?\<mu>2.0 =
          \<angle>a (?E - ?\<mu>1.0) (?E - ?\<mu>2.0)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 2),
           template_hole 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Elementary_Complex_Geometry.ang_circ_a_simp1",
     "[| ?E ~= ?\<mu>1.0; ?E ~= ?\<mu>2.0 |]
      ==> ang_circ_a ?E ?\<mu>1.0 ?\<mu>2.0 ?p1.0 ?p2.0 =
          \<angle>a (?E - ?\<mu>1.0) (?E - ?\<mu>2.0)",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_negation
         (template_equation (template_var 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2))))),
    ("Elementary_Complex_Geometry.line_ex_circline",
     "[| ?cl = line ?z1.0 ?z2.0; ?z1.0 ~= ?z2.0 |]
      ==> EX BC D. BC ~= 0 & ?cl = circline 0 BC D",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Elementary_Complex_Geometry.circle_circline",
     "[| ?cl = circle ?\<mu> ?r; 0 <= ?r |]
      ==> ?cl = circline 1 (- ?\<mu>) ((cmod ?\<mu>)\<^sup>2 - ?r\<^sup>2)",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 11, template_var 1),
            template_var 0)),
        template_inequation (less_equals, template_hole 9, template_var 0)],
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_app (template_hole 8, template_hole 7),
             template_app (template_hole 6, template_var 1)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1)),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0)))),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))))))),
    ("Elementary_Complex_Geometry.line_points_collinear",
     "[| ?z1.0 : line ?z ?z'; ?z2.0 : line ?z ?z'; ?z3.0 : line ?z ?z';
         ?z ~= ?z' |]
      ==> collinear ?z1.0 ?z2.0 ?z3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_negation
         (template_equation (template_var 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("Elementary_Complex_Geometry.circline_ex_line",
     "[| ?A = 0; ?BC ~= 0; ?cl = circline ?A ?BC ?D |]
      ==> EX z1 z2. z1 ~= z2 & ?cl = line z1 z2",
     template_implication
      ([template_equation (template_var 3, template_hole 8),
        template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Elementary_Complex_Geometry.circline_ex_circle",
     "[| ?A ~= 0; ?A * ?D <= (cmod ?BC)\<^sup>2; ?cl = circline ?A ?BC ?D |]
      ==> EX \<mu> r. ?cl = circle \<mu> r",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 12)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 10, template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1)),
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_hole 5)))),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 1),
            template_var 2))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Elementary_Complex_Geometry.circline_line'",
     "?z1.0 ~= ?z2.0 ==>
      circline 0 (\<i> * (?z2.0 - ?z1.0))
       (Re (- cnj_mix (\<i> * (?z2.0 - ?z1.0)) ?z1.0)) =
      line ?z1.0 ?z2.0",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 9, template_hole 8),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 1))),
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 7, template_hole 6),
                           template_app
                            (template_app (template_hole 5, template_var 0),
                             template_var 1)))),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_app
                        (template_app (template_hole 5, template_var 0),
                         template_var 1))),
                   template_app (template_hole 1, template_var 1)))))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Elementary_Complex_Geometry.circle_equation",
     "0 <= ?r ==>
      circle ?\<mu> ?r =
      {z. z * cnj z - z * cnj ?\<mu> - cnj z * ?\<mu> +
          ?\<mu> * cnj ?\<mu> -
          cor (?r * ?r) =
          0}",
     template_implication
      ([template_inequation
         (less_equals, template_hole 11, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 9, template_var 0), template_var 1),
         template_app (template_hole 8, t_empty)))),
    ("Elementary_Complex_Geometry.cos_ang_circ_simp",
     "[| ?E ~= ?\<mu>1.0; ?E ~= ?\<mu>2.0 |]
      ==> cos (ang_circ ?E ?\<mu>1.0 ?\<mu>2.0 ?p1.0 ?p2.0) =
          sgn_bool (?p1.0 = ?p2.0) *
          cos (Arg (?E - ?\<mu>2.0) - Arg (?E - ?\<mu>1.0))",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_negation
         (template_equation (template_var 4, template_var 2))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 8, template_var 4),
                        template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_var 0)),
                     template_hole 4),
                   template_app (template_hole 3, template_hole 4))),
               template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 2))),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 3)))))
             )))),
    ("Elementary_Complex_Geometry.circle_ex_circline",
     "[| ?cl = circle ?\<mu> ?r; 0 <= ?r |]
      ==> EX A BC D.
             A ~= 0 & A * D <= (cmod BC)\<^sup>2 & ?cl = circline A BC D",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 14, template_var 1),
            template_var 0)),
        template_inequation
         (less_equals, template_hole 12, template_var 0)],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Elementary_Complex_Geometry.line_equation",
     "[| ?z1.0 ~= ?z2.0; ?\<mu> = rot90 (?z2.0 - ?z1.0) |]
      ==> line ?z1.0 ?z2.0 =
          {z. cnj_mix ?\<mu> z - cnj_mix ?\<mu> ?z1.0 = 0}",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_var 2)))),
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 2))))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app (template_hole 4, t_empty)))),
    ("Elementary_Complex_Geometry.ang_circ_simp",
     "[| ?E ~= ?\<mu>1.0; ?E ~= ?\<mu>2.0 |]
      ==> ang_circ ?E ?\<mu>1.0 ?\<mu>2.0 ?p1.0 ?p2.0 =
          \<downharpoonright>Arg (?E - ?\<mu>2.0) - Arg (?E - ?\<mu>1.0) +
                             sgn_bool ?p1.0 * pi / 2 -
                             sgn_bool ?p2.0 * pi / 2\<downharpoonleft>",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_negation
         (template_equation (template_var 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 14, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_hole 13,
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_hole 10,
                         template_app
                          (template_app (template_hole 9, template_var 4),
                           template_var 2))),
                     template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 9, template_var 4),
                         template_var 3)))),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_app (template_hole 6, template_var 1),
                             template_hole 5),
                           template_app
                            (template_hole 4, template_hole 5))),
                       template_hole 3)),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_app (template_hole 6, template_var 0),
                         template_hole 5),
                       template_app (template_hole 4, template_hole 5))),
                   template_hole 3)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))))))),
    ("Elementary_Complex_Geometry.ang_circ_c_simp",
     "[| ?E ~= ?\<mu>1.0; ?E ~= ?\<mu>2.0 |]
      ==> ang_circ_c ?E ?\<mu>1.0 ?\<mu>2.0 ?p1.0 ?p2.0 =
          \<bar>\<downharpoonright>Arg (?E - ?\<mu>2.0) -
                                   Arg (?E - ?\<mu>1.0) +
                                   sgn_bool ?p1.0 * pi / 2 -
                                   sgn_bool ?p2.0 * pi /
                                   2\<downharpoonleft>\<bar>",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_negation
         (template_equation (template_var 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 15, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_hole 14,
           template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app
                          (template_hole 10,
                           template_app
                            (template_app (template_hole 9, template_var 4),
                             template_var 2))),
                       template_app
                        (template_hole 10,
                         template_app
                          (template_app (template_hole 9, template_var 4),
                           template_var 3)))),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 6, template_var 1),
                               template_hole 5),
                             template_app
                              (template_hole 4, template_hole 5))),
                         template_hole 3)),
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0))))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_app (template_hole 6, template_var 0),
                           template_hole 5),
                         template_app (template_hole 4, template_hole 5))),
                     template_hole 3)),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0))))))))),
    ("Elementary_Complex_Geometry.ang_circ_a_simp",
     "[| ?E ~= ?\<mu>1.0; ?E ~= ?\<mu>2.0 |]
      ==> ang_circ_a ?E ?\<mu>1.0 ?\<mu>2.0 ?p1.0 ?p2.0 =
          acute_ang
           \<bar>\<downharpoonright>Arg (?E - ?\<mu>2.0) -
                                    Arg (?E - ?\<mu>1.0) +
                                    sgn_bool ?p1.0 * pi / 2 -
                                    sgn_bool ?p2.0 * pi /
                                    2\<downharpoonleft>\<bar>",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_negation
         (template_equation (template_var 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 16, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_hole 15,
           template_app
            (template_hole 14,
             template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app
                          (template_hole 12,
                           template_app
                            (template_hole 10,
                             template_app
                              (template_app
                                (template_hole 9, template_var 4),
                               template_var 2))),
                         template_app
                          (template_hole 10,
                           template_app
                            (template_app (template_hole 9, template_var 4),
                             template_var 3)))),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 6, template_var 1),
                                 template_hole 5),
                               template_app
                                (template_hole 4, template_hole 5))),
                           template_hole 3)),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1, template_hole 0))))),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_app (template_hole 6, template_var 0),
                             template_hole 5),
                           template_app
                            (template_hole 4, template_hole 5))),
                       template_hole 3)),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1, template_hole 0)))))))))),
    ("Elementary_Complex_Geometry.circline_line",
     "[| ?A = 0; ?BC ~= 0; ?cl = circline ?A ?BC ?D;
         ?z1.0 = - cor ?D * ?BC / (2 * ?BC * cnj ?BC);
         ?z2.0 = ?z1.0 + \<i> * sgn (if 0 < Arg ?BC then - ?BC else ?BC) |]
      ==> ?cl = line ?z1.0 ?z2.0",
     template_implication
      ([template_equation (template_var 5, template_hole 20),
        template_negation
         (template_equation (template_var 4, template_hole 17)),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app (template_hole 15, template_var 5),
              template_var 4),
            template_var 2)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 2))),
                template_var 4)),
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 10,
                      template_app (template_hole 9, template_hole 8))),
                  template_var 4)),
              template_app (template_hole 7, template_var 4)))),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 6, template_var 1),
            template_app
             (template_app (template_hole 13, template_hole 5),
              template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_hole 20),
                        template_app (template_hole 1, template_var 4))),
                    template_app (template_hole 12, template_var 4)),
                  template_var 4)))))],
       template_equation
        (template_var 3,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Elementary_Complex_Geometry.circline_circle",
     "[| ?A ~= 0; ?A * ?D <= (cmod ?BC)\<^sup>2; ?cl = circline ?A ?BC ?D;
         ?\<mu> = - ?BC / cor ?A;
         ?r2.0 = ((cmod ?BC)\<^sup>2 - ?A * ?D) / ?A\<^sup>2;
         ?r = sqrt ?r2.0 |]
      ==> ?cl = circle ?\<mu> ?r",
     template_implication
      ([template_negation
         (template_equation (template_var 6, template_hole 17)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 15, template_var 6),
            template_var 5),
          template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 4)),
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_hole 10)))),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app (template_hole 8, template_var 6),
              template_var 4),
            template_var 5)),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 4)),
            template_app (template_hole 4, template_var 6))),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app (template_hole 13, template_var 4)),
                    template_app
                     (template_hole 12,
                      template_app (template_hole 11, template_hole 10)))),
                template_app
                 (template_app (template_hole 15, template_var 6),
                  template_var 5))),
            template_app
             (template_app (template_hole 14, template_var 6),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_hole 10))))),
        template_equation
         (template_var 0, template_app (template_hole 1, template_var 1))],
       template_equation
        (template_var 3,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Elementary_Complex_GeometryMoreTemplates"
### 0.300s elapsed time, 0.392s cpu time, 0.000s GC time
val it = (): unit
