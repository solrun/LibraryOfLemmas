Loading theory "HOL-Library.Case_Converter" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames" via "Draft.AlternatingLists" via "Draft.MoreCoinductiveList2" via "Parity_Game.MoreCoinductiveList" via "Coinductive.Coinductive_List" via "HOL-Library.Simps_Case_Conv")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames" via "Draft.AlternatingLists" via "Draft.MoreCoinductiveList2" via "Parity_Game.MoreCoinductiveList" via "Coinductive.Coinductive_List")
Loading theory "HOL-Library.Complete_Partial_Order2" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames" via "Draft.AlternatingLists" via "Draft.MoreCoinductiveList2" via "Parity_Game.MoreCoinductiveList" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.118s elapsed time, 0.483s cpu time, 0.049s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.185s elapsed time, 0.755s cpu time, 0.049s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames" via "Draft.AlternatingLists" via "Draft.MoreCoinductiveList2" via "Parity_Game.MoreCoinductiveList" via "Coinductive.Coinductive_List")
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.112s elapsed time, 0.429s cpu time, 0.052s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames" via "Draft.AlternatingLists" via "Draft.MoreCoinductiveList2" via "Parity_Game.MoreCoinductiveList" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
Found termination order: "size_list size <*mlex*> {}"
val cont_intro_tac = fn: Proof.context -> int -> tactic
val cont_intro_simproc = fn: Proof.context -> cterm -> thm option
### theory "HOL-Library.Infinite_Set"
### 0.354s elapsed time, 1.409s cpu time, 0.101s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.331s elapsed time, 1.308s cpu time, 0.124s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
### theory "HOL-Library.Set_Algebras"
### 0.268s elapsed time, 1.047s cpu time, 0.144s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames" via "Draft.AlternatingLists" via "Draft.MoreCoinductiveList2" via "Parity_Game.MoreCoinductiveList" via "Coinductive.Coinductive_List")
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.503s elapsed time, 1.967s cpu time, 0.228s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
consts
  prefixes :: "'a list => 'a list list"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Proofs for inductive predicate(s) "compact"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |]
          ==> x <= \<Squnion> A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> \<Squnion> A <= z"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
consts
  suffixes :: "'a list => 'a list list"
### theory "HOL-Library.Stream"
### 1.170s elapsed time, 4.469s cpu time, 0.839s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames" via "Draft.AlternatingLists" via "Draft.MoreCoinductiveList2" via "Parity_Game.MoreCoinductiveList" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat")
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> \<Sqinter> A <= x"
    and
    "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= \<Sqinter> A"
    and "Sup_upper": "!!x A. x : A ==> x <= \<Squnion> A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> \<Squnion> A <= z"
    and "Inf_empty": "\<Sqinter> {} = \<top>"
    and "Sup_empty": "\<Squnion> {} = \<bottom>"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
class complete_distrib_lattice = complete_lattice + distrib_lattice +
  assumes
    "Inf_Sup_le":
      "!!A. \<Sqinter> (Sup ` A)
            <= \<Squnion> (Inf ` {f ` A |f. ALL Y:A. f Y : Y})"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
class complete_lattice = ccpo + conditionally_complete_lattice +
  bounded_lattice +
  assumes "Inf_lower": "!!x A. x : A ==> \<Sqinter> A <= x"
    and
    "Inf_greatest": "!!A z. (!!x. x : A ==> z <= x) ==> z <= \<Sqinter> A"
    and "Sup_upper": "!!x A. x : A ==> x <= \<Squnion> A"
    and "Sup_least": "!!A z. (!!x. x : A ==> x <= z) ==> \<Squnion> A <= z"
    and "Inf_empty": "\<Sqinter> {} = \<top>"
    and "Sup_empty": "\<Squnion> {} = \<bottom>"
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
### theory "HOL-Library.Sublist"
### 1.704s elapsed time, 6.558s cpu time, 1.077s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
locale partial_function_definitions
  fixes leq :: "'a => 'a => bool"
    and lub :: "'a set => 'a"
  assumes "partial_function_definitions leq lub"
### theory "HOL-Library.Complete_Partial_Order2"
### 2.657s elapsed time, 10.297s cpu time, 1.422s GC time
### theory "HOL-Library.Countable"
### 1.201s elapsed time, 4.724s cpu time, 0.452s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames" via "Draft.AlternatingLists" via "Draft.MoreCoinductiveList2" via "Parity_Game.MoreCoinductiveList" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.246s elapsed time, 8.542s cpu time, 1.182s GC time
Loading theory "Draft.Templates" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.084s elapsed time, 0.277s cpu time, 0.071s GC time
### theory "HOL-Library.BigO"
### 0.817s elapsed time, 2.934s cpu time, 0.260s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates")
### theory "HOL-Library.Countable_Set"
### 0.440s elapsed time, 1.273s cpu time, 0.167s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames" via "Draft.AlternatingLists" via "Draft.MoreCoinductiveList2" via "Parity_Game.MoreCoinductiveList" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.545s elapsed time, 1.124s cpu time, 0.087s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.452s elapsed time, 1.952s cpu time, 0.089s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames" via "Draft.AlternatingLists" via "Draft.MoreCoinductiveList2" via "Parity_Game.MoreCoinductiveList" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.374s elapsed time, 0.409s cpu time, 0.022s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames" via "Draft.AlternatingLists" via "Draft.MoreCoinductiveList2" via "Parity_Game.MoreCoinductiveList" via "Coinductive.Coinductive_List" via "Coinductive.Coinductive_Nat")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.464s elapsed time, 0.525s cpu time, 0.085s GC time
Loading theory "Coinductive.Coinductive_Nat" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames" via "Draft.AlternatingLists" via "Draft.MoreCoinductiveList2" via "Parity_Game.MoreCoinductiveList" via "Coinductive.Coinductive_List")
Proofs for coinductive predicate(s) "enat_setp"
  Proving monotonicity ...
locale co
Proofs for coinductive predicate(s) "Le_enatp"
  Proving monotonicity ...
### theory "Coinductive.Coinductive_Nat"
### 0.470s elapsed time, 0.496s cpu time, 0.038s GC time
Loading theory "Coinductive.Coinductive_List" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames" via "Draft.AlternatingLists" via "Draft.MoreCoinductiveList2" via "Parity_Game.MoreCoinductiveList")
consts
  unfold_llist ::
    "('a => bool) => ('a => 'b) => ('a => 'a) => 'a => 'b llist"
Proofs for inductive predicate(s) "lsetp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "lfinite"
  Proving monotonicity ...
consts
  lappend :: "'a llist => 'a llist => 'a llist"
### Ignoring duplicate rewrite rule:
### lnull (lappend ?xs1 ?ys1) == lnull ?xs1 & lnull ?ys1
Proofs for coinductive predicate(s) "lprefix"
  Proving monotonicity ...
consts
  lSup :: "'a llist set => 'a llist"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
consts
  iterates :: "('a => 'a) => 'a => 'a llist"
consts
  llist_of :: "'a list => 'a llist"
consts
  ltake :: "enat => 'a llist => 'a llist"
### Ambiguous input (line 1019 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ldrop)
###       ("_cargs" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" n)
###       ("_case2"
###         ("_case1" ("\<^const>Groups.zero_class.zero") ("_position" xs))
###         ("_case1" ("_applC" ("_position" eSuc) ("_position" n'))
###           ("_case_syntax" ("_position" xs)
###             ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###               ("_case1"
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" x) ("_position" xs')))
###                 ("_applC" ("_position" ldrop)
###                   ("_cargs" ("_position" n') ("_position" xs')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ldrop)
###       ("_cargs" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" n)
###       ("_case2"
###         ("_case1" ("\<^const>Groups.zero_class.zero") ("_position" xs))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" eSuc) ("_position" n'))
###             ("_case_syntax" ("_position" xs)
###               ("_case1" ("_position" LNil) ("_position" LNil))))
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs')))
###             ("_applC" ("_position" ldrop)
###               ("_cargs" ("_position" n') ("_position" xs')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  ltakeWhile :: "('a => bool) => 'a llist => 'a llist"
consts
  lnth :: "'a llist => nat => 'a"
consts
  lzip :: "'a llist => 'b llist => ('a * 'b) llist"
Proofs for coinductive predicate(s) "ldistinct"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "llexord"
  Proving monotonicity ...
### Ambiguous input (line 1508 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" ltake)
###       ("_pttrns" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs)))
###             ("_case_syntax" ("_position" n)
###               ("_case1" ("\<^const>Groups.zero_class.zero")
###                 ("_position" LNil))))
###           ("_case1" ("_applC" ("_position" eSuc) ("_position" n))
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x)
###                 ("_applC" ("_position" ltake)
###                   ("_cargs" ("_position" n) ("_position" xs)))))))))))
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" ltake)
###       ("_pttrns" ("_position" n) ("_position" xs)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case1"
###           ("_applC" ("_position" LCons)
###             ("_cargs" ("_position" x) ("_position" xs)))
###           ("_case_syntax" ("_position" n)
###             ("_case2"
###               ("_case1" ("\<^const>Groups.zero_class.zero")
###                 ("_position" LNil))
###               ("_case1" ("_applC" ("_position" eSuc) ("_position" n))
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" x)
###                     ("_applC" ("_position" ltake)
###                       ("_cargs" ("_position" n) ("_position" xs)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate rewrite rule:
### lnull (lzip ?xs1 ?ys1) == lnull ?xs1 | lnull ?ys1
### Ambiguous input (line 2485 of "$AFP/Coinductive/Coinductive_List.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" lzip)
###       ("_pattern" ("_position" xs) ("_position" ys)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" x) ("_position" xs')))
###             ("_case_syntax" ("_position" ys)
###               ("_case1" ("_position" LNil) ("_position" LNil))))
###           ("_case1"
###             ("_applC" ("_position" LCons)
###               ("_cargs" ("_position" y) ("_position" ys')))
###             ("_applC" ("_position" LCons)
###               ("_cargs"
###                 ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y)))
###                 ("_applC" ("_position" curry)
###                   ("_cargs" ("_position" lzip)
###                     ("_cargs" ("_position" xs') ("_position" ys'))))))))))))
### ("\<^const>Pure.eq" ("_position" F)
###   ("_lambda"
###     ("_pttrns" ("_position" lzip)
###       ("_pattern" ("_position" xs) ("_position" ys)))
###     ("_case_syntax" ("_position" xs)
###       ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###         ("_case1"
###           ("_applC" ("_position" LCons)
###             ("_cargs" ("_position" x) ("_position" xs')))
###           ("_case_syntax" ("_position" ys)
###             ("_case2" ("_case1" ("_position" LNil) ("_position" LNil))
###               ("_case1"
###                 ("_applC" ("_position" LCons)
###                   ("_cargs" ("_position" y) ("_position" ys')))
###                 ("_applC" ("_position" LCons)
###                   ("_cargs"
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" y)))
###                     ("_applC" ("_position" curry)
###                       ("_cargs" ("_position" lzip)
###                         ("_cargs" ("_position" xs')
###                           ("_position" ys'))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Proofs for coinductive predicate(s) "lsorted"
  Proving monotonicity ...
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted LNil == True
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.list_emb" on left hand side of equation, in theorem:
### subseq_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### subseq ?x ?y & subseq_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted LNil == True
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.sublist" on left hand side of equation, in theorem:
### sublist_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### sublist ?x ?y & sublist_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted LNil == True
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.suffix" on left hand side of equation, in theorem:
### suffix_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### suffix ?x ?y & suffix_order.lsorted (LCons ?y ?xs)
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted LNil == True
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted (LCons ?x LNil) == True
### Partially applied constant "Sublist.prefix" on left hand side of equation, in theorem:
### prefix_order.lsorted (LCons ?x (LCons ?y ?xs)) ==
### prefix ?x ?y & prefix_order.lsorted (LCons ?y ?xs)
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Introduced fixed type variable(s): 'a in "P__" or "xs__"
### Introduced fixed type variable(s): 'a in "P__" or "xs__"
### Introduced fixed type variable(s): 'a in "P__" or "Q__"
### Introduced fixed type variable(s): 'a in "xs__"
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
### theory "Coinductive.Coinductive_List"
### 3.598s elapsed time, 5.455s cpu time, 2.570s GC time
Loading theory "Parity_Game.MoreCoinductiveList" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames" via "Draft.AlternatingLists" via "Draft.MoreCoinductiveList2")
### theory "Parity_Game.MoreCoinductiveList"
### 0.072s elapsed time, 0.102s cpu time, 0.000s GC time
Loading theory "Draft.MoreCoinductiveList2" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames" via "Draft.AlternatingLists")
### theory "Draft.MoreCoinductiveList2"
### 0.040s elapsed time, 0.041s cpu time, 0.000s GC time
Loading theory "Draft.AlternatingLists" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames")
Loading theory "Draft.MoreENat" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames")
Loading theory "Draft.MorePrefix" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies" via "Draft.GaleStewartGames")
### theory "Draft.MoreENat"
### 0.049s elapsed time, 0.147s cpu time, 0.000s GC time
[| prefix ?ps ?xs; prefix ?qs ?xs; length ?ps <= length ?qs |]
==> prefix ?ps ?qs
[| prefix ?a ?b; length ?a <= ?n |] ==> prefix ?a (take ?n ?b)
Found termination order: "length <*mlex*> {}"
### theory "Draft.MorePrefix"
### 0.074s elapsed time, 0.196s cpu time, 0.000s GC time
consts
  lalternate :: "'a llist => 'a llist"
### theory "Draft.AlternatingLists"
### 0.129s elapsed time, 0.299s cpu time, 0.063s GC time
Loading theory "Draft.GaleStewartGames" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames" via "Draft.GaleStewartDefensiveStrategies")
locale GSgame
  fixes A :: "'a llist set"
    and N :: "enat"
  assumes "GSgame A N"
locale GSgame
  fixes A :: "'a llist set"
    and N :: "enat"
  assumes "GSgame A N"
### theory "Draft.GaleStewartGames"
### 0.340s elapsed time, 0.341s cpu time, 0.000s GC time
Loading theory "Draft.GaleStewartDefensiveStrategies" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates" via "Draft.GaleStewartDeterminedGames")
locale GSgame
  fixes A :: "'a llist set"
    and N :: "enat"
  assumes "GSgame A N"
locale closed_GSgame
  fixes A :: "'a llist set"
    and N :: "enat"
  assumes "closed_GSgame A N"
locale finite_GSgame
  fixes A :: "'a llist set"
    and N :: "enat"
  assumes "finite_GSgame A N"
locale closed_GSgame
  fixes A :: "'a llist set"
    and N :: "enat"
  assumes "closed_GSgame A N"
### theory "Draft.GaleStewartDefensiveStrategies"
### 0.103s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.GaleStewartDeterminedGames" (required by "Draft.GaleStewartDeterminedGamesMoreTemplates")
locale GaleStewartDeterminedGames.closed_GSgame
  fixes A :: "'a llist set"
    and N :: "enat"
  assumes "GaleStewartDeterminedGames.closed_GSgame A N"
locale GaleStewartDeterminedGames.finite_GSgame
  fixes A :: "'a llist set"
    and N :: "enat"
  assumes "GaleStewartDeterminedGames.finite_GSgame A N"
locale GaleStewartDeterminedGames.closed_GSgame
  fixes A :: "'a llist set"
    and N :: "enat"
  assumes "GaleStewartDeterminedGames.closed_GSgame A N"
### theory "Draft.GaleStewartDeterminedGames"
### 0.086s elapsed time, 0.124s cpu time, 0.051s GC time
Loading theory "Draft.GaleStewartDeterminedGamesMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.GaleStewartDeterminedGamesMoreTemplates"
### 0.390s elapsed time, 0.539s cpu time, 0.000s GC time
val it = (): unit
