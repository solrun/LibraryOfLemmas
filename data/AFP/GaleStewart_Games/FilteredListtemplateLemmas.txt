   [("FilteredList.ldistinct_lfilter_ltake",
     "ldistinct (lfilter ?P ?xs) ==> ldistinct (lfilter ?P (ltake ?x ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("FilteredList.lfilter_lfind",
     "lfilter ?P ?lst ~= LNil ==> ?P (?lst $ lfind ?P ?lst)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_var 1,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("FilteredList.ltake_lfind_lset",
     "?x : lset (ltake (enat (lfind ?P ?lst)) ?lst) ==> ~ ?P ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 1),
                        template_var 0))),
                  template_var 0)))
            )],
       template_negation
        (
           template_predicate
            (template_app (template_var 1, template_var 2))
           ))),
    ("FilteredList.lfilter_lfind",
     "lfilter ?P ?lst ~= LNil ==> enat (lfind ?P ?lst) < llength ?lst",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0),
              template_hole 4)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("FilteredList.lfilter_lfind",
     "[| lfilter ?P ?lst ~= LNil; ?P (?lst $ ?y) |]
      ==> lfind ?P ?lst <= ?y",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("FilteredList.ltake_lfind_conv",
     "lfilter ?P ?lst ~= LNil ==>
      ldrop (enat (lfind ?P ?lst)) ?lst = ldropWhile (Not o ?P) ?lst",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 8),
               template_var 1)),
           template_var 0)))),
    ("FilteredList.ltake_lfind_conv",
     "lfilter ?P ?lst ~= LNil ==>
      ltake (enat (lfind ?P ?lst)) ?lst = ltakeWhile (Not o ?P) ?lst",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 8),
               template_var 1)),
           template_var 0)))),
    ("FilteredList.ltake_lfilter",
     "EX n. ltake (enat ?x) (lfilter ?P ?lst) =
            lfilter ?P (ltake (enat n) ?lst) &
            ldrop (enat ?x) (lfilter ?P ?lst) =
            lfilter ?P (ldrop (enat n) ?lst)",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("FilteredList.lfilter_hdtl",
     "lfilter ?P ?lst ~= LNil ==>
      EX n. LCons (lhd (lfilter ?P ?lst)) LNil =
            lfilter ?P (ltake (enat n) ?lst) &
            ltl (lfilter ?P ?lst) = lfilter ?P (ldrop (enat n) ?lst)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0),
              template_hole 8)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("FilteredList.ldistinct_lfilter_conv",
     "ldistinct (lfilter ?P ?lst) =
      (ALL i j.
          enat i < llength ?lst -->
          enat j < llength ?lst -->
          ?P (?lst $ i) --> ?lst $ i = ?lst $ j --> i = j)",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("FilteredList.ldistinct_lfilterE",
     "[| ldistinct (lfilter ?P ?lst); ?e = ?lst $ ?i; ?e = ?lst $ ?j;
         enat ?i < llength ?lst; enat ?j < llength ?lst; ?P ?e |]
      ==> ?i = ?j",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3))
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 1)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 0)),
        template_inequation
         (less_than, template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 3)),
        template_inequation
         (less_than, template_app (template_hole 2, template_var 0),
          template_app (template_hole 1, template_var 3)),
        template_predicate (template_app (template_var 4, template_var 2))],
       template_equation (template_var 1, template_var 0))),
    ("FilteredList.ldistinct_lfilterI",
     "(!!i j.
          [| enat i < llength ?lst; enat j < llength ?lst;
             ?lst $ i = ?lst $ j; ?P (?lst $ i) |]
          ==> i = j) ==>
      ldistinct (lfilter ?P ?lst)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("FilteredList.filter_obtain_two",
     "[| ?i < ?j; ?j < length (filter ?P ?lst) |]
      ==> EX i2 j2.
             i2 < j2 &
             j2 < length ?lst &
             ?lst ! i2 = filter ?P ?lst ! ?i &
             ?lst ! j2 = filter ?P ?lst ! ?j",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)))],
       template_predicate (template_app (template_hole 3, t_empty))))]
