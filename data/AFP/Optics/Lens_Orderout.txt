Loading theory "Draft.Interp" (required by "Draft.Lens_OrderMoreTemplates" via "Draft.Lens_Order" via "Draft.Lens_Algebra" via "Draft.Lens_Laws")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Lens_OrderMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Lens_OrderMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Lens_OrderMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
locale interp
  fixes f :: "'a => 'b"
  assumes "interp f"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Interp"
### 0.047s elapsed time, 0.220s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Lens_OrderMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.545s cpu time, 0.040s GC time
Loading theory "Draft.Two" (required by "Draft.Lens_OrderMoreTemplates" via "Draft.Lens_Order" via "Draft.Lens_Algebra" via "Draft.Lens_Laws")
### Additional type variable(s) in locale specification "two": 'a
class two = type +
  assumes "card_two": "infinite UNIV | 2 <= card UNIV"
### theory "HOL-Library.Set_Algebras"
### 0.198s elapsed time, 0.814s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Lens_OrderMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Two"
### 0.069s elapsed time, 0.278s cpu time, 0.000s GC time
Loading theory "Draft.Lens_Laws" (required by "Draft.Lens_OrderMoreTemplates" via "Draft.Lens_Order" via "Draft.Lens_Algebra")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.333s elapsed time, 1.337s cpu time, 0.136s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Lens_OrderMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
locale weak_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "weak_lens x"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale wb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "wb_lens x"
locale mwb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "mwb_lens x"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale vwb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "vwb_lens x"
consts
  snth :: "'a stream => nat => 'a"
locale ief_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "ief_lens x"
consts
  stake :: "nat => 'a stream => 'a list"
locale pbij_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "pbij_lens x"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale bij_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "bij_lens x"
locale lens_indep
  fixes X :: "'a \<Longrightarrow> 'c"
    and Y :: "'b \<Longrightarrow> 'c"
  assumes "lens_indep X Y"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lens_Laws"
### 0.766s elapsed time, 3.014s cpu time, 0.322s GC time
Loading theory "Draft.Lens_Algebra" (required by "Draft.Lens_OrderMoreTemplates" via "Draft.Lens_Order")
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.967s elapsed time, 3.663s cpu time, 0.853s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "Draft.Lens_Algebra"
### 0.426s elapsed time, 1.333s cpu time, 0.567s GC time
Loading theory "Draft.Lens_Order" (required by "Draft.Lens_OrderMoreTemplates")
### theory "HOL-Library.Stream"
### 1.061s elapsed time, 3.840s cpu time, 0.793s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lens_Order"
### 0.275s elapsed time, 0.587s cpu time, 0.072s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.954s elapsed time, 5.948s cpu time, 1.060s GC time
Loading theory "Draft.Templates" (required by "Draft.Lens_OrderMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Lens_OrderMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.457s elapsed time, 0.496s cpu time, 0.045s GC time
Loading theory "Draft.Lens_OrderMoreTemplates"
val templateLemmas =
   [("Lens_Order.lens_equiv_refl", "?X \<approx>\<^sub>L ?X",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Lens_Order.sublens_refl", "?X \<subseteq>\<^sub>L ?X",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Lens_Order.lens_plus_right_unit",
     "?X +\<^sub>L 0\<^sub>L \<approx>\<^sub>L ?X",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)),
           template_var 0)
         )),
    ("Lens_Order.lens_plus_left_unit",
     "0\<^sub>L +\<^sub>L ?X \<approx>\<^sub>L ?X",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)),
           template_var 0)
         )),
    ("Lens_Order.lens_unit_plus_sublens_1",
     "?X \<subseteq>\<^sub>L 0\<^sub>L +\<^sub>L ?X",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("Lens_Order.lens_unit_prod_sublens_2",
     "0\<^sub>L +\<^sub>L ?X \<subseteq>\<^sub>L ?X",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)),
           template_var 0)
         )),
    ("Lens_Order.lens_override_id",
     "?S\<^sub>1 \<triangleleft>\<^bsub>1\<^sub>L\<^esub> ?S\<^sub>2 =
      ?S\<^sub>2",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_var 0)),
    ("Lens_Order.lens_override_unit",
     "?S\<^sub>1 \<triangleleft>\<^bsub>0\<^sub>L\<^esub> ?S\<^sub>2 =
      ?S\<^sub>1",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_var 1)),
    ("Lens_Order.bij_lens_equiv_id",
     "bij_lens ?X = ?X \<approx>\<^sub>L 1\<^sub>L",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Lens_Order.sublens_greatest",
     "vwb_lens ?X ==> ?X \<subseteq>\<^sub>L 1\<^sub>L",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Lens_Order.sublens_least",
     "wb_lens ?X ==> 0\<^sub>L \<subseteq>\<^sub>L ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Lens_Order.lens_equiv_sym",
     "?X \<approx>\<^sub>L ?Y ==> ?Y \<approx>\<^sub>L ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Lens_Order.lens_comp_lb",
     "vwb_lens ?X ==> ?X ;\<^sub>L ?Y \<subseteq>\<^sub>L ?Y",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0)
           ))),
    ("Lens_Order.lens_plus_ub",
     "wb_lens ?Y ==> ?X \<subseteq>\<^sub>L ?X +\<^sub>L ?Y",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Lens_Order.bij_lens_inv_right",
     "bij_lens ?X ==> ?X ;\<^sub>L inv\<^sub>L ?X = 1\<^sub>L",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Lens_Order.bij_lens_inv_left",
     "bij_lens ?X ==> inv\<^sub>L ?X ;\<^sub>L ?X = 1\<^sub>L",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 0),
         template_hole 0))),
    ("Lens_Order.lens_override_idem",
     "vwb_lens ?X ==> ?S \<triangleleft>\<^bsub>?X\<^esub> ?S = ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0),
         template_var 0))),
    ("Lens_Order.bij_lens_cong",
     "?X \<approx>\<^sub>L ?Y ==> bij_lens ?X = bij_lens ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Lens_Order.lens_plus_assoc",
     "(?X +\<^sub>L ?Y) +\<^sub>L ?Z \<approx>\<^sub>L
      ?X +\<^sub>L ?Y +\<^sub>L ?Z",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("Lens_Order.lens_plus_sub_assoc_1",
     "?X +\<^sub>L ?Y +\<^sub>L ?Z \<subseteq>\<^sub>L
      (?X +\<^sub>L ?Y) +\<^sub>L ?Z",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))
         )),
    ("Lens_Order.lens_plus_sub_assoc_2",
     "(?X +\<^sub>L ?Y) +\<^sub>L ?Z \<subseteq>\<^sub>L
      ?X +\<^sub>L ?Y +\<^sub>L ?Z",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("Lens_Order.bij_lens_equiv",
     "[| bij_lens ?X; ?X \<approx>\<^sub>L ?Y |] ==> bij_lens ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Order.sublens_pres_mwb",
     "[| mwb_lens ?Y; ?X \<subseteq>\<^sub>L ?Y |] ==> mwb_lens ?X",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Order.sublens_pres_vwb",
     "[| vwb_lens ?Y; ?X \<subseteq>\<^sub>L ?Y |] ==> vwb_lens ?X",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Order.sublens_pres_wb",
     "[| wb_lens ?Y; ?X \<subseteq>\<^sub>L ?Y |] ==> wb_lens ?X",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Order.lens_plus_comm",
     "?X \<bowtie> ?Y ==>
      ?X +\<^sub>L ?Y \<approx>\<^sub>L ?Y +\<^sub>L ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Lens_Order.lens_plus_sub_comm",
     "?X \<bowtie> ?Y ==>
      ?X +\<^sub>L ?Y \<subseteq>\<^sub>L ?Y +\<^sub>L ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Lens_Order.lens_comp_cong_1",
     "?X \<approx>\<^sub>L ?Y ==>
      ?X ;\<^sub>L ?Z \<approx>\<^sub>L ?Y ;\<^sub>L ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Order.sublens_implies_sublens'",
     "[| vwb_lens ?Y; ?X \<subseteq>\<^sub>L ?Y |]
      ==> ?X \<subseteq>\<^sub>L' ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Lens_Order.lens_quotient_mwb",
     "[| mwb_lens ?Y; ?X \<subseteq>\<^sub>L ?Y |]
      ==> mwb_lens (?X /\<^sub>L ?Y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Lens_Order.lens_equiv_pres_indep",
     "[| ?X \<approx>\<^sub>L ?Y; ?Y \<bowtie> ?Z |] ==> ?X \<bowtie> ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Lens_Order.lens_equiv_pres_indep'",
     "[| ?X \<approx>\<^sub>L ?Y; ?Z \<bowtie> ?Y |] ==> ?Z \<bowtie> ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Lens_Order.lens_equiv_trans",
     "[| ?X \<approx>\<^sub>L ?Y; ?Y \<approx>\<^sub>L ?Z |]
      ==> ?X \<approx>\<^sub>L ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Lens_Order.sublens_pres_indep",
     "[| ?X \<subseteq>\<^sub>L ?Y; ?Y \<bowtie> ?Z |] ==> ?X \<bowtie> ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Lens_Order.sublens_pres_indep'",
     "[| ?X \<subseteq>\<^sub>L ?Y; ?Z \<bowtie> ?Y |] ==> ?Z \<bowtie> ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Lens_Order.lens_equivI",
     "[| ?X \<subseteq>\<^sub>L ?Y; ?Y \<subseteq>\<^sub>L ?X |]
      ==> ?X \<approx>\<^sub>L ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Lens_Order.sublens_trans",
     "[| ?X \<subseteq>\<^sub>L ?Y; ?Y \<subseteq>\<^sub>L ?Z |]
      ==> ?X \<subseteq>\<^sub>L ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Lens_Order.lens_equiv_via_bij",
     "[| bij_lens ?Z; ?X = ?Z ;\<^sub>L ?Y |] ==> ?X \<approx>\<^sub>L ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Lens_Order.sublens_comp",
     "[| vwb_lens ?b; ?c \<subseteq>\<^sub>L ?a |]
      ==> ?b ;\<^sub>L ?c \<subseteq>\<^sub>L ?a",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Lens_Order.lens_id_unique",
     "[| weak_lens ?Y; ?Y = ?X ;\<^sub>L ?Y |] ==> ?X = 1\<^sub>L",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 1))],
       template_equation (template_var 0, template_hole 0))),
    ("Lens_Order.lens_plus_prod_exchange",
     "(?X\<^sub>1 +\<^sub>L ?X\<^sub>2) \<times>\<^sub>L
      (?Y\<^sub>1 +\<^sub>L ?Y\<^sub>2) \<approx>\<^sub>L
      ?X\<^sub>1 \<times>\<^sub>L ?Y\<^sub>1 +\<^sub>L
      ?X\<^sub>2 \<times>\<^sub>L ?Y\<^sub>2",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))
         )),
    ("Lens_Order.lens_equiv_iff_lens_equiv'",
     "[| vwb_lens ?X; vwb_lens ?Y |]
      ==> ?X \<approx>\<^sub>L ?Y = ?X \<approx>\<^sub>L' ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Lens_Order.sublens_iff_sublens'",
     "[| vwb_lens ?X; vwb_lens ?Y |]
      ==> ?X \<subseteq>\<^sub>L ?Y = ?X \<subseteq>\<^sub>L' ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Lens_Order.lens_override_overshadow_right",
     "mwb_lens ?X ==>
      ?S\<^sub>1 \<triangleleft>\<^bsub>?X\<^esub>
      (?S\<^sub>2 \<triangleleft>\<^bsub>?X\<^esub> ?S\<^sub>3) =
      ?S\<^sub>1 \<triangleleft>\<^bsub>?X\<^esub> ?S\<^sub>3",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Lens_Order.lens_override_overshadow_left",
     "mwb_lens ?X ==>
      ?S\<^sub>1 \<triangleleft>\<^bsub>?X\<^esub>
      ?S\<^sub>2 \<triangleleft>\<^bsub>?X\<^esub>
      ?S\<^sub>3 =
      ?S\<^sub>1 \<triangleleft>\<^bsub>?X\<^esub> ?S\<^sub>3",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Lens_Order.lens_override_mwb_idem",
     "[| mwb_lens ?X; ?S : \<S>\<^bsub>?X\<^esub> |]
      ==> ?S \<triangleleft>\<^bsub>?X\<^esub> ?S = ?S",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0),
         template_var 0))),
    ("Lens_Order.override_idem_implies_vwb",
     "[| mwb_lens ?X; !!s. s \<triangleleft>\<^bsub>?X\<^esub> s = s |]
      ==> vwb_lens ?X",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Order.lens_quotient_comp",
     "[| weak_lens ?Y; ?X \<subseteq>\<^sub>L ?Y |]
      ==> ?X /\<^sub>L ?Y ;\<^sub>L ?Y = ?X",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("Lens_Order.sublens_compat",
     "[| vwb_lens ?X; vwb_lens ?Y; ?X \<subseteq>\<^sub>L ?Y |]
      ==> ?X ##\<^sub>L ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Lens_Order.sublens'_implies_sublens",
     "[| vwb_lens ?X; vwb_lens ?Y; ?X \<subseteq>\<^sub>L' ?Y |]
      ==> ?X \<subseteq>\<^sub>L ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Lens_Order.lens_override_irr",
     "?X \<bowtie> ?Y ==>
      ?S\<^sub>1 \<triangleleft>\<^bsub>?X\<^esub>
      (?S\<^sub>2 \<triangleleft>\<^bsub>?Y\<^esub> ?S\<^sub>3) =
      ?S\<^sub>1 \<triangleleft>\<^bsub>?X\<^esub> ?S\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_var 1)))),
    ("Lens_Order.lens_plus_eq_right",
     "[| ?X \<bowtie> ?Y; ?Y \<approx>\<^sub>L ?Z |]
      ==> ?X +\<^sub>L ?Y \<approx>\<^sub>L ?X +\<^sub>L ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Lens_Order.lens_plus_eq_left",
     "[| ?X \<bowtie> ?Z; ?X \<approx>\<^sub>L ?Y |]
      ==> ?X +\<^sub>L ?Z \<approx>\<^sub>L ?Y +\<^sub>L ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Lens_Order.lens_plus_mono_right",
     "[| ?X \<bowtie> ?Z; ?Y \<subseteq>\<^sub>L ?Z |]
      ==> ?X +\<^sub>L ?Y \<subseteq>\<^sub>L ?X +\<^sub>L ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Lens_Order.lens_plus_mono_left",
     "[| ?Y \<bowtie> ?Z; ?X \<subseteq>\<^sub>L ?Y |]
      ==> ?X +\<^sub>L ?Z \<subseteq>\<^sub>L ?Y +\<^sub>L ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Lens_Order.prod_lens_equiv_cong",
     "[| ?X\<^sub>1 \<approx>\<^sub>L ?X\<^sub>2;
         ?Y\<^sub>1 \<approx>\<^sub>L ?Y\<^sub>2 |]
      ==> ?X\<^sub>1 \<times>\<^sub>L ?Y\<^sub>1 \<approx>\<^sub>L
          ?X\<^sub>2 \<times>\<^sub>L ?Y\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Lens_Order.prod_lens_sublens_cong",
     "[| ?X\<^sub>1 \<subseteq>\<^sub>L ?X\<^sub>2;
         ?Y\<^sub>1 \<subseteq>\<^sub>L ?Y\<^sub>2 |]
      ==> ?X\<^sub>1 \<times>\<^sub>L ?Y\<^sub>1 \<subseteq>\<^sub>L
          ?X\<^sub>2 \<times>\<^sub>L ?Y\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Lens_Order.bij_lens_via_comp_id_left",
     "[| wb_lens ?X; wb_lens ?Y; ?X ;\<^sub>L ?Y = 1\<^sub>L |]
      ==> bij_lens ?X",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Lens_Order.bij_lens_via_comp_id_right",
     "[| wb_lens ?X; wb_lens ?Y; ?X ;\<^sub>L ?Y = 1\<^sub>L |]
      ==> bij_lens ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Order.lens_equiv_iff_bij",
     "weak_lens ?Y ==>
      ?X \<approx>\<^sub>L ?Y = (EX Z. bij_lens Z & ?X = Z ;\<^sub>L ?Y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0), template_var 1),
         template_app (template_hole 4, t_empty)))),
    ("Lens_Order.lens_override_plus",
     "?X \<bowtie> ?Y ==>
      ?S\<^sub>1 \<triangleleft>\<^bsub>?X +\<^sub>L ?Y\<^esub> ?S\<^sub>2 =
      ?S\<^sub>1 \<triangleleft>\<^bsub>?X\<^esub>
      ?S\<^sub>2 \<triangleleft>\<^bsub>?Y\<^esub>
      ?S\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 0)))),
    ("Lens_Order.lens_plus_right_sublens",
     "[| vwb_lens ?Y; ?Y \<bowtie> ?Z; ?X \<subseteq>\<^sub>L ?Z |]
      ==> ?X \<subseteq>\<^sub>L ?Y +\<^sub>L ?Z",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Lens_Order.lens_quotient_plus_den1",
     "[| weak_lens ?x; weak_lens ?y; ?x \<bowtie> ?y |]
      ==> ?x /\<^sub>L (?x +\<^sub>L ?y) = fst\<^sub>L",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Lens_Order.sublens_put_put",
     "[| mwb_lens ?X; ?Y \<subseteq>\<^sub>L ?X |]
      ==> put\<^bsub>?X\<^esub> (put\<^bsub>?Y\<^esub> ?\<sigma> ?v) ?u =
          put\<^bsub>?X\<^esub> ?\<sigma> ?u",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_var 0)))),
    ("Lens_Order.lens_override_overshadow",
     "[| mwb_lens ?Y; ?X \<subseteq>\<^sub>L ?Y |]
      ==> ?S\<^sub>1 \<triangleleft>\<^bsub>?X\<^esub>
          ?S\<^sub>2 \<triangleleft>\<^bsub>?Y\<^esub>
          ?S\<^sub>3 =
          ?S\<^sub>1 \<triangleleft>\<^bsub>?Y\<^esub> ?S\<^sub>3",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_var 0)))),
    ("Lens_Order.lens_override_put_right_out",
     "[| vwb_lens ?A; ?X \<bowtie> ?A |]
      ==> ?S\<^sub>1 \<triangleleft>\<^bsub>?A\<^esub>
          put\<^bsub>?X\<^esub> ?S\<^sub>2 ?v =
          ?S\<^sub>1 \<triangleleft>\<^bsub>?A\<^esub> ?S\<^sub>2",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_var 1)))),
    ("Lens_Order.sublens'_prop2",
     "[| vwb_lens ?X; ?X \<subseteq>\<^sub>L' ?Y |]
      ==> get\<^bsub>?X\<^esub>
           (put\<^bsub>?Y\<^esub> ?s\<^sub>1
             (get\<^bsub>?Y\<^esub> ?s\<^sub>2)) =
          get\<^bsub>?X\<^esub> ?s\<^sub>2",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("Lens_Order.sublens_obs_get",
     "[| mwb_lens ?X; ?Y \<subseteq>\<^sub>L ?X |]
      ==> get\<^bsub>?Y\<^esub> (put\<^bsub>?X\<^esub> ?\<sigma> ?v) =
          get\<^bsub>?Y\<^esub> (put\<^bsub>?X\<^esub> ?\<rho> ?v)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0),
             template_var 1))))),
    ("Lens_Order.lens_plus_cong",
     "[| ?X\<^sub>1 \<bowtie> ?X\<^sub>2;
         ?X\<^sub>1 \<approx>\<^sub>L ?Y\<^sub>1;
         ?X\<^sub>2 \<approx>\<^sub>L ?Y\<^sub>2 |]
      ==> ?X\<^sub>1 +\<^sub>L ?X\<^sub>2 \<approx>\<^sub>L
          ?Y\<^sub>1 +\<^sub>L ?Y\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Order.lens_plus_subcong",
     "[| ?Y\<^sub>1 \<bowtie> ?Y\<^sub>2;
         ?X\<^sub>1 \<subseteq>\<^sub>L ?Y\<^sub>1;
         ?X\<^sub>2 \<subseteq>\<^sub>L ?Y\<^sub>2 |]
      ==> ?X\<^sub>1 +\<^sub>L ?X\<^sub>2 \<subseteq>\<^sub>L
          ?Y\<^sub>1 +\<^sub>L ?Y\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("Lens_Order.pbij_plus_commute",
     "[| ?a \<bowtie> ?b; mwb_lens ?a; mwb_lens ?b;
         pbij_lens (?b +\<^sub>L ?a) |]
      ==> pbij_lens (?a +\<^sub>L ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Order.lens_override_put_right_in",
     "[| vwb_lens ?A; ?X \<subseteq>\<^sub>L ?A |]
      ==> ?S\<^sub>1 \<triangleleft>\<^bsub>?A\<^esub>
          put\<^bsub>?X\<^esub> ?S\<^sub>2 ?v =
          put\<^bsub>?X\<^esub>
           (?S\<^sub>1 \<triangleleft>\<^bsub>?A\<^esub> ?S\<^sub>2) ?v",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Lens_Order.lens_get_put_quasi_commute",
     "[| vwb_lens ?Y; ?X \<subseteq>\<^sub>L ?Y |]
      ==> get\<^bsub>?Y\<^esub> (put\<^bsub>?X\<^esub> ?s ?v) =
          put\<^bsub>?X /\<^sub>L ?Y\<^esub> (get\<^bsub>?Y\<^esub> ?s) ?v",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3)),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1)),
           template_var 0)))),
    ("Lens_Order.plus_pred_sublens",
     "[| mwb_lens ?Z; ?X \<subseteq>\<^sub>L ?Z; ?Y \<subseteq>\<^sub>L ?Z;
         ?X \<bowtie> ?Y |]
      ==> ?X +\<^sub>L ?Y \<subseteq>\<^sub>L ?Z",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Lens_Order.lens_put_of_quotient",
     "[| vwb_lens ?Y; ?X \<subseteq>\<^sub>L ?Y |]
      ==> put\<^bsub>?Y\<^esub> ?s
           (put\<^bsub>?X /\<^sub>L ?Y\<^esub> ?v\<^sub>2 ?v\<^sub>1) =
          put\<^bsub>?X\<^esub> (put\<^bsub>?Y\<^esub> ?s ?v\<^sub>2)
           ?v\<^sub>1",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 4)),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Lens_Order.lens_quotient_plus",
     "[| mwb_lens ?Z; ?X \<subseteq>\<^sub>L ?Z;
         ?Y \<subseteq>\<^sub>L ?Z |]
      ==> (?X +\<^sub>L ?Y) /\<^sub>L ?Z =
          ?X /\<^sub>L ?Z +\<^sub>L ?Y /\<^sub>L ?Z",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Lens_Order.sublens'_prop1",
     "[| vwb_lens ?X; ?X \<subseteq>\<^sub>L' ?Y |]
      ==> put\<^bsub>?X\<^esub>
           (put\<^bsub>?Y\<^esub> ?s\<^sub>1
             (get\<^bsub>?Y\<^esub> ?s\<^sub>2))
           ?s\<^sub>3 =
          put\<^bsub>?Y\<^esub> ?s\<^sub>1
           (get\<^bsub>?Y\<^esub>
             (put\<^bsub>?X\<^esub> ?s\<^sub>2 ?s\<^sub>3))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 1),
               template_var 0)))))),
    ("Lens_Order.lens_quotient_plus_den2",
     "[| weak_lens ?x; weak_lens ?z; ?x \<bowtie> ?z;
         ?y \<subseteq>\<^sub>L ?z |]
      ==> ?y /\<^sub>L (?x +\<^sub>L ?z) =
          ?y /\<^sub>L ?z ;\<^sub>L snd\<^sub>L",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_hole 0)))),
    ("Lens_Order.sublens'_prop3",
     "[| vwb_lens ?X; vwb_lens ?Y; ?X \<subseteq>\<^sub>L' ?Y |]
      ==> put\<^bsub>?Y\<^esub> ?\<sigma>
           (get\<^bsub>?Y\<^esub>
             (put\<^bsub>?X\<^esub>
               (put\<^bsub>?Y\<^esub> ?\<rho>
                 (get\<^bsub>?Y\<^esub> ?\<sigma>))
               ?v)) =
          put\<^bsub>?X\<^esub> ?\<sigma> ?v",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 4)),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 1),
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2))),
               template_var 0))),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("Lens_Order.lens_indep_overrideI",
     "[| vwb_lens ?X; vwb_lens ?Y;
         !!s\<^sub>1 s\<^sub>2 s\<^sub>3.
            s\<^sub>1 \<triangleleft>\<^bsub>?X\<^esub>
            s\<^sub>2 \<triangleleft>\<^bsub>?Y\<^esub>
            s\<^sub>3 =
            s\<^sub>1 \<triangleleft>\<^bsub>?Y\<^esub>
            s\<^sub>3 \<triangleleft>\<^bsub>?X\<^esub>
            s\<^sub>2 |]
      ==> ?X \<bowtie> ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Lens_OrderMoreTemplates"
### 0.337s elapsed time, 0.475s cpu time, 0.060s GC time
val it = (): unit
