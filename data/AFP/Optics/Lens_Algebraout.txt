Loading theory "Draft.Interp" (required by "Draft.Lens_AlgebraMoreTemplates" via "Draft.Lens_Algebra" via "Draft.Lens_Laws")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Lens_AlgebraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Lens_AlgebraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Lens_AlgebraMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
locale interp
  fixes f :: "'a => 'b"
  assumes "interp f"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Interp"
### 0.041s elapsed time, 0.197s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Lens_AlgebraMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.515s cpu time, 0.041s GC time
Loading theory "Draft.Two" (required by "Draft.Lens_AlgebraMoreTemplates" via "Draft.Lens_Algebra" via "Draft.Lens_Laws")
### Additional type variable(s) in locale specification "two": 'a
class two = type +
  assumes "card_two": "infinite UNIV | 2 <= card UNIV"
### theory "Draft.Two"
### 0.072s elapsed time, 0.288s cpu time, 0.000s GC time
Loading theory "Draft.Lens_Laws" (required by "Draft.Lens_AlgebraMoreTemplates" via "Draft.Lens_Algebra")
### theory "HOL-Library.Set_Algebras"
### 0.197s elapsed time, 0.810s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Lens_AlgebraMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.318s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Lens_AlgebraMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale weak_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "weak_lens x"
Found termination order: "size <*mlex*> {}"
locale wb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "wb_lens x"
locale mwb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "mwb_lens x"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale vwb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "vwb_lens x"
consts
  snth :: "'a stream => nat => 'a"
locale ief_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "ief_lens x"
consts
  stake :: "nat => 'a stream => 'a list"
locale pbij_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "pbij_lens x"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale bij_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "bij_lens x"
locale lens_indep
  fixes X :: "'a \<Longrightarrow> 'c"
    and Y :: "'b \<Longrightarrow> 'c"
  assumes "lens_indep X Y"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lens_Laws"
### 0.769s elapsed time, 3.031s cpu time, 0.290s GC time
Loading theory "Draft.Lens_Algebra" (required by "Draft.Lens_AlgebraMoreTemplates")
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.971s elapsed time, 3.681s cpu time, 0.825s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.058s elapsed time, 3.837s cpu time, 0.784s GC time
### theory "Draft.Lens_Algebra"
### 0.428s elapsed time, 1.342s cpu time, 0.573s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.954s elapsed time, 5.681s cpu time, 1.008s GC time
Loading theory "Draft.Templates" (required by "Draft.Lens_AlgebraMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Lens_AlgebraMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.455s elapsed time, 0.462s cpu time, 0.000s GC time
Loading theory "Draft.Lens_AlgebraMoreTemplates"
val templateLemmas =
   [("Lens_Algebra.zero_lens_compat", "0\<^sub>L ##\<^sub>L ?X",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Lens_Algebra.zero_lens_indep'", "?X \<bowtie> 0\<^sub>L",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Lens_Algebra.zero_lens_indep", "0\<^sub>L \<bowtie> ?X",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Lens_Algebra.lens_obs_eq_one",
     "?s\<^sub>1 \<simeq>\<^bsub>1\<^sub>L\<^esub> ?s\<^sub>2",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)
         )),
    ("Lens_Algebra.lens_comp_left_id", "1\<^sub>L ;\<^sub>L ?X = ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Lens_Algebra.lens_comp_right_id", "?X ;\<^sub>L 1\<^sub>L = ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Lens_Algebra.lens_quotient_id_denom", "?X /\<^sub>L 1\<^sub>L = ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Lens_Algebra.get_fst_lens",
     "get\<^bsub>fst\<^sub>L\<^esub> (?x, ?y) = ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Lens_Algebra.get_snd_lens",
     "get\<^bsub>snd\<^sub>L\<^esub> (?x, ?y) = ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Lens_Algebra.lens_inv_bij",
     "bij_lens ?X ==> bij_lens (inv\<^sub>L ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Lens_Algebra.id_lens_compat",
     "vwb_lens ?X ==> 1\<^sub>L ##\<^sub>L ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Lens_Algebra.lens_obs_eq_zero",
     "(?s\<^sub>1 \<simeq>\<^bsub>0\<^sub>L\<^esub> ?s\<^sub>2) =
      (?s\<^sub>1 = ?s\<^sub>2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Lens_Algebra.inv_inv_lens",
     "bij_lens ?X ==> inv\<^sub>L (inv\<^sub>L ?X) = ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Lens_Algebra.lens_comp_anhil",
     "wb_lens ?X ==> 0\<^sub>L ;\<^sub>L ?X = 0\<^sub>L",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("Lens_Algebra.lens_comp_anhil_right",
     "wb_lens ?X ==> ?X ;\<^sub>L 0\<^sub>L = 0\<^sub>L",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_hole 0))),
    ("Lens_Algebra.lens_quotient_id",
     "weak_lens ?X ==> ?X /\<^sub>L ?X = 1\<^sub>L",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 0),
         template_hole 0))),
    ("Lens_Algebra.lens_quotient_unit",
     "weak_lens ?X ==> 0\<^sub>L /\<^sub>L ?X = 0\<^sub>L",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("Lens_Algebra.lens_indep_right_ext",
     "?x \<bowtie> ?z ==> ?x \<bowtie> ?y ;\<^sub>L ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Lens_Algebra.lens_indep_left_ext",
     "?y \<bowtie> ?z ==> ?x ;\<^sub>L ?y \<bowtie> ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Lens_Algebra.lens_comp_assoc",
     "?X ;\<^sub>L (?Y ;\<^sub>L ?Z) = ?X ;\<^sub>L ?Y ;\<^sub>L ?Z",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Lens_Algebra.prod_as_plus",
     "?X \<times>\<^sub>L ?Y =
      ?X ;\<^sub>L fst\<^sub>L +\<^sub>L ?Y ;\<^sub>L snd\<^sub>L",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Lens_Algebra.split_prod_lens_indep",
     "mwb_lens ?X ==>
      fst\<^sub>L ;\<^sub>L ?X \<bowtie> snd\<^sub>L ;\<^sub>L ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Lens_Algebra.fst_lens_plus",
     "wb_lens ?y ==> fst\<^sub>L ;\<^sub>L (?x +\<^sub>L ?y) = ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("Lens_Algebra.lens_comp_quotient",
     "weak_lens ?Y ==> (?X ;\<^sub>L ?Y) /\<^sub>L ?Y = ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 1),
         template_var 0))),
    ("Lens_Algebra.lens_indep_right_comp",
     "?y \<bowtie> ?z ==> ?x ;\<^sub>L ?y \<bowtie> ?x ;\<^sub>L ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Lens_Algebra.prod_bij_lens",
     "[| bij_lens ?X; bij_lens ?Y |] ==> bij_lens (?X \<times>\<^sub>L ?Y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Algebra.prod_mwb_lens",
     "[| mwb_lens ?X; mwb_lens ?Y |] ==> mwb_lens (?X \<times>\<^sub>L ?Y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Algebra.comp_mwb_lens",
     "[| mwb_lens ?x; mwb_lens ?y |] ==> mwb_lens (?x ;\<^sub>L ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Algebra.prod_vwb_lens",
     "[| vwb_lens ?X; vwb_lens ?Y |] ==> vwb_lens (?X \<times>\<^sub>L ?Y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Algebra.comp_vwb_lens",
     "[| vwb_lens ?x; vwb_lens ?y |] ==> vwb_lens (?x ;\<^sub>L ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Algebra.prod_wb_lens",
     "[| wb_lens ?X; wb_lens ?Y |] ==> wb_lens (?X \<times>\<^sub>L ?Y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Algebra.comp_wb_lens",
     "[| wb_lens ?x; wb_lens ?y |] ==> wb_lens (?x ;\<^sub>L ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Algebra.comp_weak_lens",
     "[| weak_lens ?x; weak_lens ?y |] ==> weak_lens (?x ;\<^sub>L ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Algebra.lens_comp_indep_cong",
     "mwb_lens ?Z ==>
      (?X ;\<^sub>L ?Z \<bowtie> ?Y ;\<^sub>L ?Z) = (?X \<bowtie> ?Y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Lens_Algebra.lens_obs_eq_as_override",
     "vwb_lens ?X ==>
      (?s\<^sub>1 \<simeq>\<^bsub>?X\<^esub> ?s\<^sub>2) =
      (?s\<^sub>2 =
       ?s\<^sub>1 \<triangleleft>\<^bsub>?X\<^esub> ?s\<^sub>2)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0)
              )],
         template_equation
          (template_var 0,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Lens_Algebra.plus_pres_lens_indep'",
     "[| ?X \<bowtie> ?Y; ?X \<bowtie> ?Z |]
      ==> ?X \<bowtie> ?Y +\<^sub>L ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Algebra.plus_pres_lens_indep",
     "[| ?X \<bowtie> ?Z; ?Y \<bowtie> ?Z |]
      ==> ?X +\<^sub>L ?Y \<bowtie> ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Lens_Algebra.lens_plus_swap",
     "?X \<bowtie> ?Y ==>
      swap\<^sub>L ;\<^sub>L (?X +\<^sub>L ?Y) = ?Y +\<^sub>L ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Lens_Algebra.lens_comp_indep_cong_left",
     "[| mwb_lens ?Z; ?X ;\<^sub>L ?Z \<bowtie> ?Y ;\<^sub>L ?Z |]
      ==> ?X \<bowtie> ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Lens_Algebra.lens_indep_left_comp",
     "[| mwb_lens ?z; ?x \<bowtie> ?y |]
      ==> ?x ;\<^sub>L ?z \<bowtie> ?y ;\<^sub>L ?z",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Lens_Algebra.snd_lens_plus",
     "[| wb_lens ?x; ?x \<bowtie> ?y |]
      ==> snd\<^sub>L ;\<^sub>L (?x +\<^sub>L ?y) = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Lens_Algebra.lens_indep_quasi_irrefl",
     "[| wb_lens ?x; eff_lens ?x |] ==> ~ ?x \<bowtie> ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 0)
               )
           ))),
    ("Lens_Algebra.plus_lens_distr",
     "mwb_lens ?Z ==>
      (?X +\<^sub>L ?Y) ;\<^sub>L ?Z =
      ?X ;\<^sub>L ?Z +\<^sub>L ?Y ;\<^sub>L ?Z",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Lens_Algebra.lens_indep_prod",
     "[| ?X\<^sub>1 \<bowtie> ?X\<^sub>2; ?Y\<^sub>1 \<bowtie> ?Y\<^sub>2 |]
      ==> ?X\<^sub>1 \<times>\<^sub>L ?Y\<^sub>1 \<bowtie>
          ?X\<^sub>2 \<times>\<^sub>L ?Y\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Lens_Algebra.plus_mwb_lens",
     "[| mwb_lens ?x; mwb_lens ?y; ?x \<bowtie> ?y |]
      ==> mwb_lens (?x +\<^sub>L ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Algebra.plus_vwb_lens",
     "[| vwb_lens ?x; vwb_lens ?y; ?x \<bowtie> ?y |]
      ==> vwb_lens (?x +\<^sub>L ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Algebra.plus_wb_lens",
     "[| wb_lens ?x; wb_lens ?y; ?x \<bowtie> ?y |]
      ==> wb_lens (?x +\<^sub>L ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Algebra.prod_lens_comp_plus",
     "?X\<^sub>2 \<bowtie> ?Y\<^sub>2 ==>
      ?X\<^sub>1 \<times>\<^sub>L ?Y\<^sub>1 ;\<^sub>L
      (?X\<^sub>2 +\<^sub>L ?Y\<^sub>2) =
      ?X\<^sub>1 ;\<^sub>L ?X\<^sub>2 +\<^sub>L
      ?Y\<^sub>1 ;\<^sub>L ?Y\<^sub>2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Lens_Algebra.source_plus_lens",
     "[| mwb_lens ?x; mwb_lens ?y; ?x \<bowtie> ?y |]
      ==> \<S>\<^bsub>?x +\<^sub>L ?y\<^esub> =
          \<S>\<^bsub>?x\<^esub> Int \<S>\<^bsub>?y\<^esub>",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Lens_Algebra.source_lens_comp",
     "[| mwb_lens ?x; mwb_lens ?y |]
      ==> \<S>\<^bsub>?x ;\<^sub>L ?y\<^esub> =
          {s: \<S>\<^bsub>?y\<^esub>.
           get\<^bsub>?y\<^esub> s : \<S>\<^bsub>?x\<^esub>}",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0)),
         template_app (template_hole 6, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Lens_AlgebraMoreTemplates"
### 0.322s elapsed time, 0.436s cpu time, 0.052s GC time
val it = (): unit
