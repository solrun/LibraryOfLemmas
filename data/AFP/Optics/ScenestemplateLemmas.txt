   [("Scenes.scene_bot_least", "\<bottom>\<^sub>S \<subseteq>\<^sub>S ?X",
     template_inequation (less_equals, template_hole 0, template_var 0)),
    ("Scenes.scene_top_greatest", "?X \<subseteq>\<^sub>S \<top>\<^sub>S",
     template_inequation (less_equals, template_var 0, template_hole 0)),
    ("Scenes.subscene_refl", "?X \<subseteq>\<^sub>S ?X",
     template_inequation (less_equals, template_var 0, template_var 0)),
    ("Scenes.lens_member_top", "?x \<in>\<^sub>S \<top>\<^sub>S",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Scenes.scene_compat_refl", "?X ##\<^sub>S ?X",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Scenes.equiv_coregion", "equiv UNIV (coregion ?X)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Scenes.equiv_region", "equiv UNIV (region ?X)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Scenes.scene_compat_self_compl", "?A ##\<^sub>S - ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("Scenes.scene_equiv_bot",
     "?a \<approx>\<^sub>S ?b on \<bottom>\<^sub>S",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Scenes.scene_indep_self_compl", "?A \<bowtie>\<^sub>S - ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("Scenes.scene_inter_idem", "?X \<sqinter>\<^sub>S ?X = ?X",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Scenes.scene_union_unit",
     "?X \<squnion>\<^sub>S \<bottom>\<^sub>S = ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Scenes.scene_union_idem", "?X \<squnion>\<^sub>S ?X = ?X",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Scenes.uminus_scene_twice", "- (- ?X) = ?X",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Scenes.fun_dom_scene_always_compat", "fds ?A ##\<^sub>S fds ?B",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Scenes.scene_override_unit",
     "?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 on \<bottom>\<^sub>S =
      ?S\<^sub>1",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 1)),
    ("Scenes.scene_override_id",
     "?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 on \<top>\<^sub>S =
      ?S\<^sub>2",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 0)),
    ("Scenes.scene_union_commute",
     "?X \<squnion>\<^sub>S ?Y = ?Y \<squnion>\<^sub>S ?X",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Scenes.fun_dom_scene_compl", "fds (- ?A) = - fds ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Scenes.vwb_impl_idem_scene",
     "vwb_lens ?X ==> idem_scene \<lbrakk>?X\<rbrakk>\<^sub>\<sim>",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Scenes.idem_scene_uminus", "idem_scene ?X ==> idem_scene (- ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Scenes.scene_compat_top",
     "idem_scene ?X ==> ?X ##\<^sub>S \<top>\<^sub>S",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Scenes.scene_le_iff_indep_inv",
     "(?A \<bowtie>\<^sub>S - ?B) = ?A \<subseteq>\<^sub>S ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Scenes.scene_comp_idem",
     "idem_scene ?S ==> idem_scene (?S ;\<^sub>S ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Scenes.scene_compat_sym", "?X ##\<^sub>S ?Y ==> ?Y ##\<^sub>S ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Scenes.scene_indep_compat",
     "?X \<bowtie>\<^sub>S ?Y ==> ?X ##\<^sub>S ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Scenes.scene_indep_sym",
     "?X \<bowtie>\<^sub>S ?Y ==> ?Y \<bowtie>\<^sub>S ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Scenes.fun_dom_scene_le",
     "fds ?A \<subseteq>\<^sub>S fds ?B = (?A <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Scenes.lens_insert_idem",
     "insert\<^sub>S ?x (insert\<^sub>S ?x ?A) = insert\<^sub>S ?x ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Scenes.scene_union_annhil",
     "idem_scene ?X ==>
      ?X \<squnion>\<^sub>S \<top>\<^sub>S = \<top>\<^sub>S",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_hole 0))),
    ("Scenes.indep_then_compl_in",
     "?A \<bowtie>\<^sub>S ?B ==> ?A \<subseteq>\<^sub>S - ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("Scenes.scene_override_commute",
     "?S\<^sub>2 \<oplus>\<^sub>S ?S\<^sub>1 on (- ?X) =
      ?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 on ?X",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 2),
         template_var 0))),
    ("Scenes.scene_demorgan2",
     "- (?X \<sqinter>\<^sub>S ?Y) = - ?X \<squnion>\<^sub>S - ?Y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Scenes.scene_demorgan1",
     "- (?X \<squnion>\<^sub>S ?Y) = - ?X \<sqinter>\<^sub>S - ?Y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Scenes.fun_dom_scene_inter",
     "fds (?A Int ?B) = fds ?A \<sqinter>\<^sub>S fds ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Scenes.fun_dom_scene_union",
     "fds (?A Un ?B) = fds ?A \<squnion>\<^sub>S fds ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Scenes.scene_override_idem",
     "idem_scene ?X ==> ?s \<oplus>\<^sub>S ?s on ?X = ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0),
           template_var 1),
         template_var 0))),
    ("Scenes.scene_inter_compl",
     "idem_scene ?X ==> ?X \<sqinter>\<^sub>S - ?X = \<bottom>\<^sub>S",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Scenes.scene_union_compl",
     "idem_scene ?X ==> ?X \<squnion>\<^sub>S - ?X = \<top>\<^sub>S",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Scenes.lens_indep_impl_scene_indep",
     "?X \<bowtie> ?Y ==>
      \<lbrakk>?X\<rbrakk>\<^sub>\<sim> \<bowtie>\<^sub>S
      \<lbrakk>?Y\<rbrakk>\<^sub>\<sim>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Scenes.fun_dom_scene_indep",
     "(fds ?A \<bowtie>\<^sub>S fds ?B) = (?A Int ?B = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Scenes.region_coregion_Id",
     "idem_scene ?X ==> region ?X Int coregion ?X = Id",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Scenes.scene_union_incompat",
     "~ ?X ##\<^sub>S ?Y ==> ?X \<squnion>\<^sub>S ?Y = \<bottom>\<^sub>S",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Scenes.idem_scene_impl_vwb",
     "[| mwb_lens ?X; idem_scene \<lbrakk>?X\<rbrakk>\<^sub>\<sim> |]
      ==> vwb_lens ?X",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Scenes.scene_override_overshadow_right",
     "?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 \<oplus>\<^sub>S ?S\<^sub>3 on ?X on ?X =
      ?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>3 on ?X",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_var 0))),
    ("Scenes.scene_override_overshadow_left",
     "?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 on ?X \<oplus>\<^sub>S ?S\<^sub>3 on ?X =
      ?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>3 on ?X",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_var 1),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 0),
         template_var 1))),
    ("Scenes.scene_comp_lens_indep",
     "?X \<bowtie> ?Y ==>
      ?A ;\<^sub>S ?X \<bowtie>\<^sub>S ?A ;\<^sub>S ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Scenes.scene_comp_indep",
     "?A \<bowtie>\<^sub>S ?B ==>
      ?A ;\<^sub>S ?X \<bowtie>\<^sub>S ?B ;\<^sub>S ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Scenes.idem_scene_union",
     "[| idem_scene ?A; idem_scene ?B |]
      ==> idem_scene (?A \<squnion>\<^sub>S ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Scenes.lens_scene_override",
     "mwb_lens ?X ==>
      ?s\<^sub>1 \<oplus>\<^sub>S ?s\<^sub>2 on \<lbrakk>?X\<rbrakk>\<^sub>\<sim> =
      ?s\<^sub>1 \<triangleleft>\<^bsub>?X\<^esub> ?s\<^sub>2",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_app (template_hole 1, template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Scenes.scene_union_ub",
     "[| idem_scene ?Y; ?X \<bowtie>\<^sub>S ?Y |]
      ==> ?X \<subseteq>\<^sub>S ?X \<squnion>\<^sub>S ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Scenes.scene_equiv_region",
     "idem_scene ?X ==>
      region ?X =
      {(S\<^sub>1, S\<^sub>2).
       S\<^sub>1 \<approx>\<^sub>S S\<^sub>2 on ?X}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))))),
    ("Scenes.lens_member_get_override",
     "?x \<in>\<^sub>S ?a ==>
      get\<^bsub>?x\<^esub> (?b \<oplus>\<^sub>S ?b' on ?a) =
      get\<^bsub>?x\<^esub> ?b'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0)))),
    ("Scenes.scene_union_pres_compat",
     "[| ?A ##\<^sub>S ?B; ?A ##\<^sub>S ?C |]
      ==> ?A ##\<^sub>S ?B \<squnion>\<^sub>S ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Scenes.lens_not_member_get_override",
     "?x \<notin>\<^sub>S ?a ==>
      get\<^bsub>?x\<^esub> (?b \<oplus>\<^sub>S ?b' on ?a) =
      get\<^bsub>?x\<^esub> ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 1)))),
    ("Scenes.scene_le_then_compat",
     "[| idem_scene ?X; idem_scene ?Y; ?X \<subseteq>\<^sub>S ?Y |]
      ==> ?X ##\<^sub>S ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Scenes.lens_compat_scene",
     "[| mwb_lens ?X; mwb_lens ?Y |]
      ==> (?X ##\<^sub>L ?Y) =
          (\<lbrakk>?X\<rbrakk>\<^sub>\<sim> ##\<^sub>S
           \<lbrakk>?Y\<rbrakk>\<^sub>\<sim>)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Scenes.lens_indep_scene",
     "[| vwb_lens ?X; vwb_lens ?Y |]
      ==> (?X \<bowtie> ?Y) =
          (\<lbrakk>?X\<rbrakk>\<^sub>\<sim> \<bowtie>\<^sub>S
           \<lbrakk>?Y\<rbrakk>\<^sub>\<sim>)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Scenes.lens_equiv_scene",
     "[| vwb_lens ?X; vwb_lens ?Y |]
      ==> ?X \<approx>\<^sub>L ?Y =
          (\<lbrakk>?X\<rbrakk>\<^sub>\<sim> =
           \<lbrakk>?Y\<rbrakk>\<^sub>\<sim>)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0)
              )],
         template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Scenes.sublens_iff_subscene",
     "[| vwb_lens ?X; vwb_lens ?Y |]
      ==> ?X \<subseteq>\<^sub>L ?Y =
          \<lbrakk>?X\<rbrakk>\<^sub>\<sim> \<subseteq>\<^sub>S
          \<lbrakk>?Y\<rbrakk>\<^sub>\<sim>",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Scenes.subscene_implies_sublens'",
     "[| vwb_lens ?X; vwb_lens ?Y |]
      ==> \<lbrakk>?X\<rbrakk>\<^sub>\<sim> \<subseteq>\<^sub>S
          \<lbrakk>?Y\<rbrakk>\<^sub>\<sim> =
          ?X \<subseteq>\<^sub>L' ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Scenes.subscene_antisym",
     "[| idem_scene ?Y; ?X \<subseteq>\<^sub>S ?Y;
         ?Y \<subseteq>\<^sub>S ?X |]
      ==> ?X = ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation (template_var 0, template_var 1))),
    ("Scenes.subscene_trans",
     "[| idem_scene ?Y; ?X \<subseteq>\<^sub>S ?Y;
         ?Y \<subseteq>\<^sub>S ?Z |]
      ==> ?X \<subseteq>\<^sub>S ?Z",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Scenes.lens_scene_indep_compl",
     "[| vwb_lens ?x; vwb_lens ?y |]
      ==> (\<lbrakk>?x\<rbrakk>\<^sub>\<sim> \<bowtie>\<^sub>S
           - \<lbrakk>?y\<rbrakk>\<^sub>\<sim>) =
          ?x \<subseteq>\<^sub>L ?y",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Scenes.sublens'_implies_subscene",
     "[| vwb_lens ?X; vwb_lens ?Y; ?X \<subseteq>\<^sub>L' ?Y |]
      ==> \<lbrakk>?X\<rbrakk>\<^sub>\<sim> \<subseteq>\<^sub>S
          \<lbrakk>?Y\<rbrakk>\<^sub>\<sim>",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Scenes.scene_inter_indep",
     "[| idem_scene ?X; idem_scene ?Y; ?X \<bowtie>\<^sub>S ?Y |]
      ==> ?X \<sqinter>\<^sub>S ?Y = \<bottom>\<^sub>S",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Scenes.scene_override_union",
     "?X ##\<^sub>S ?Y ==>
      ?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 on (?X \<squnion>\<^sub>S ?Y) =
      ?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 on ?X \<oplus>\<^sub>S ?S\<^sub>2 on ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0),
                 template_var 3)),
             template_var 0),
           template_var 2)))),
    ("Scenes.lens_member_override",
     "?x \<in>\<^sub>S ?A ==>
      ?s\<^sub>1 \<oplus>\<^sub>S ?s\<^sub>2 on ?A \<triangleleft>\<^bsub>?x\<^esub>
      ?s\<^sub>3 =
      ?s\<^sub>1 \<oplus>\<^sub>S ?s\<^sub>2 \<triangleleft>\<^bsub>?x\<^esub>
                                  ?s\<^sub>3 on ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 3)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1),
               template_var 0)),
           template_var 3)))),
    ("Scenes.scene_override_commute_indep",
     "?X \<bowtie>\<^sub>S ?Y ==>
      ?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 on ?X \<oplus>\<^sub>S ?S\<^sub>3 on ?Y =
      ?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>3 on ?Y \<oplus>\<^sub>S ?S\<^sub>2 on ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 4)),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 3)),
             template_var 1),
           template_var 4)))),
    ("Scenes.get_scene_override_le",
     "[| vwb_lens ?x;
         \<lbrakk>?x\<rbrakk>\<^sub>\<sim> \<subseteq>\<^sub>S ?a |]
      ==> get\<^bsub>?x\<^esub> (?s \<oplus>\<^sub>S ?s' on ?a) =
          get\<^bsub>?x\<^esub> ?s'",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 3),
          template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0)))),
    ("Scenes.get_scene_override_indep",
     "[| vwb_lens ?x;
         \<lbrakk>?x\<rbrakk>\<^sub>\<sim> \<bowtie>\<^sub>S ?a |]
      ==> get\<^bsub>?x\<^esub> (?s \<oplus>\<^sub>S ?s' on ?a) =
          get\<^bsub>?x\<^esub> ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 1)))),
    ("Scenes.state_eq_iff",
     "idem_scene ?S ==>
      (?x = ?y) = ((?x, ?y) : region ?S & (?x, ?y) : coregion ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_app (template_hole 1, template_var 2))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 2)))))),
    ("Scenes.subscene_eliminate",
     "[| idem_scene ?Y; ?X \<subseteq>\<^sub>S ?Y |]
      ==> ?s\<^sub>1 \<oplus>\<^sub>S ?s\<^sub>2 on ?X \<oplus>\<^sub>S ?s\<^sub>3 on ?Y =
          ?s\<^sub>1 \<oplus>\<^sub>S ?s\<^sub>3 on ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 4)),
        template_inequation (less_equals, template_var 3, template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 3)),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 4)))),
    ("Scenes.lens_member_put",
     "[| vwb_lens ?x; idem_scene ?a; ?x \<in>\<^sub>S ?a |]
      ==> put\<^bsub>?x\<^esub> ?s ?v \<oplus>\<^sub>S ?s on ?a = ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_var 1),
           template_var 2),
         template_var 1))),
    ("Scenes.lens_plus_scene",
     "[| vwb_lens ?X; vwb_lens ?Y; ?X \<bowtie> ?Y |]
      ==> \<lbrakk>?X +\<^sub>L ?Y\<rbrakk>\<^sub>\<sim> =
          \<lbrakk>?X\<rbrakk>\<^sub>\<sim> \<squnion>\<^sub>S
          \<lbrakk>?Y\<rbrakk>\<^sub>\<sim>",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Scenes.scene_indep_override",
     "(?X \<bowtie>\<^sub>S ?Y) =
      (ALL s\<^sub>1 s\<^sub>2 s\<^sub>3.
          s\<^sub>1 \<oplus>\<^sub>S s\<^sub>2 on ?X \<oplus>\<^sub>S s\<^sub>3 on ?Y =
          s\<^sub>1 \<oplus>\<^sub>S s\<^sub>3 on ?Y \<oplus>\<^sub>S s\<^sub>2 on ?X)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Scenes.scene_union_assoc",
     "[| ?X ##\<^sub>S ?Y; ?X ##\<^sub>S ?Z; ?Y ##\<^sub>S ?Z |]
      ==> ?X \<squnion>\<^sub>S (?Y \<squnion>\<^sub>S ?Z) =
          ?X \<squnion>\<^sub>S ?Y \<squnion>\<^sub>S ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Scenes.scene_compat_copy",
     "(?X ##\<^sub>S ?Y) =
      (ALL s.
          (%s'. s' \<oplus>\<^sub>S s on ?X) o
          (%s'. s' \<oplus>\<^sub>S s on ?Y) =
          (%s'. s' \<oplus>\<^sub>S s on ?Y) o
          (%s'. s' \<oplus>\<^sub>S s on ?X))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Scenes.scene_indep_copy",
     "(?X \<bowtie>\<^sub>S ?Y) =
      (ALL s\<^sub>1 s\<^sub>2.
          (%s'. s' \<oplus>\<^sub>S s\<^sub>1 on ?X) o
          (%s'. s' \<oplus>\<^sub>S s\<^sub>2 on ?Y) =
          (%s'. s' \<oplus>\<^sub>S s\<^sub>2 on ?Y) o
          (%s'. s' \<oplus>\<^sub>S s\<^sub>1 on ?X))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty)))]
