Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.Lens_Record_Example" via "Draft.Optics" via "Draft.Lenses" via "Draft.Lens_Instances")
Loading theory "Draft.Interp" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.Lens_Record_Example" via "Draft.Optics" via "Draft.Lenses" via "Draft.Lens_Laws")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
locale interp
  fixes f :: "'a => 'b"
  assumes "interp f"
### theory "Draft.Interp"
### 0.038s elapsed time, 0.151s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.475s cpu time, 0.035s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
structure Eisbach_Rule_Insts: sig end
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.227s elapsed time, 0.874s cpu time, 0.108s GC time
Loading theory "Draft.Two" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.Lens_Record_Example" via "Draft.Optics" via "Draft.Lenses" via "Draft.Lens_Laws")
### Additional type variable(s) in locale specification "two": 'a
### theory "HOL-Library.Nat_Bijection"
### 0.318s elapsed time, 1.238s cpu time, 0.108s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.ExtrEqs")
class two = type +
  assumes "card_two": "infinite UNIV | 2 <= card UNIV"
### theory "Draft.Two"
### 0.072s elapsed time, 0.288s cpu time, 0.000s GC time
Loading theory "Draft.Lens_Laws" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.Lens_Record_Example" via "Draft.Optics" via "Draft.Lenses")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.438s elapsed time, 1.704s cpu time, 0.163s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale weak_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "weak_lens x"
consts
  cycle :: "'a list => 'a stream"
locale wb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "wb_lens x"
Found termination order: "size <*mlex*> {}"
locale mwb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "mwb_lens x"
locale vwb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "vwb_lens x"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale ief_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "ief_lens x"
Found termination order: "size <*mlex*> {}"
locale pbij_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "pbij_lens x"
consts
  flat :: "'a list stream => 'a stream"
locale bij_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "bij_lens x"
locale lens_indep
  fixes X :: "'a \<Longrightarrow> 'c"
    and Y :: "'b \<Longrightarrow> 'c"
  assumes "lens_indep X Y"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "Draft.Lens_Laws"
### 0.973s elapsed time, 3.734s cpu time, 0.787s GC time
Loading theory "Draft.Lens_Algebra" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.Lens_Record_Example" via "Draft.Optics" via "Draft.Lenses")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.062s elapsed time, 4.089s cpu time, 0.832s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.996s elapsed time, 3.781s cpu time, 0.777s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lens_Algebra"
### 0.256s elapsed time, 0.695s cpu time, 0.044s GC time
Loading theory "Draft.Lens_Order" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.Lens_Record_Example" via "Draft.Optics" via "Draft.Lenses")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Lens_Order"
### 0.257s elapsed time, 0.554s cpu time, 0.085s GC time
Loading theory "Draft.Lens_Symmetric" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.Lens_Record_Example" via "Draft.Optics" via "Draft.Lenses")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.022s elapsed time, 6.542s cpu time, 1.113s GC time
Loading theory "Draft.Templates" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.ExtrEqs")
locale psym_lens
  fixes S :: "<'a, 'b> \<Longleftrightarrow> 's"  (structure)
  assumes "psym_lens S"
locale sym_lens
  fixes S :: "<'a, 'b> \<Longleftrightarrow> 's"  (structure)
  assumes "sym_lens S"
### theory "Draft.Lens_Symmetric"
### 0.329s elapsed time, 0.733s cpu time, 0.124s GC time
Loading theory "Draft.Lens_Instances" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.Lens_Record_Example" via "Draft.Optics" via "Draft.Lenses")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Lens_Record_ExampleMoreTemplates")
val baselens_tr = fn: term list -> term
signature LENS_LIB =
  sig
    val astateT: typ
    val bij_lensN: string
    val compositionsN: string
    val id_lensN: string
    val indepsN: string
    val isLensT: typ -> bool
    val lensT: typ -> typ -> typ
    val lens_compN: string
    val lens_defsN: string
    val lens_equivN: string
    val lens_indepN: string
    val lens_plusN: string
    val lens_quotientN: string
    val mk_indep: term -> term -> term
    val mk_vwb_lens: term -> term
    val pairings: 'a list -> ('a * 'a) list
    val pairsWith: 'a list -> 'a list -> ('a * 'a) list
    val quotientsN: string
    val sublensN: string
    val sublensesN: string
    val sym_lensN: string
    val vwb_lensN: string
  end
structure Lens_Lib: LENS_LIB
signature LENS_UTILS =
  sig
    val add_alphabet:
       (string * class list) list * binding ->
         string option -> (binding * typ * mixfix) list -> theory -> theory
    val add_alphabet_cmd:
       (string * string option) list * binding ->
         string option ->
           (binding * string * mixfix) list -> theory -> theory
    val rename_alpha_vars: tactic
  end
structure Lens_Utils: LENS_UTILS
signature LENS_STATESPACE =
  sig
    val compile_statespace:
       bstring -> (bstring * typ) list -> xstring list -> theory -> theory
    val mk_statespace_elements:
       bstring ->
         (bstring * typ) list ->
           xstring list -> theory -> Element.context_i list
    val statespace_cmd:
       bstring ->
         xstring list -> (bstring * string) list -> theory -> theory
  end
structure Lens_Statespace:
  sig
    val compile_statespace:
       bstring -> (bstring * typ) list -> xstring list -> theory -> theory
    val mk_statespace_elements:
       (bstring * typ) list ->
         xstring list -> theory -> (typ, term, 'a) Element.ctxt list
    val statespace_cmd:
       bstring ->
         xstring list -> (bstring * string) list -> theory -> theory
  end
val it = (): unit
locale type_definition
  fixes Rep :: "'b => 'a"
    and Abs :: "'a => 'b"
    and A :: "'a set"
  assumes "type_definition Rep Abs A"
val lmap_tr = fn: term list -> term
locale lens_interp
  fixes f :: "'a => 'b"
  assumes "lens_interp f"
### theory "Draft.Lens_Instances"
### 0.558s elapsed time, 1.165s cpu time, 0.111s GC time
Loading theory "Draft.Scenes" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.Lens_Record_Example" via "Draft.Optics")
Loading theory "Draft.Lenses" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.Lens_Record_Example" via "Draft.Optics")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.533s elapsed time, 1.121s cpu time, 0.111s GC time
### theory "Draft.Lenses"
### 0.025s elapsed time, 0.056s cpu time, 0.000s GC time
Loading theory "Draft.Prisms" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.Lens_Record_Example" via "Draft.Optics")
locale overrider
  fixes F :: "'s => 's => 's"  (infixl \<open>\<triangleright>\<close> 65)
  assumes "overrider (\<triangleright>)"
locale idem_overrider
  fixes F :: "'a => 'a => 'a"  (infixl \<open>\<triangleright>\<close> 65)
  assumes "idem_overrider (\<triangleright>)"
instantiation
  scene :: (type) {uminus,inf,sup,bot,top}
  top_scene == top :: 'a scene
  bot_scene == bot :: 'a scene
  sup_scene == sup :: 'a scene => 'a scene => 'a scene
  inf_scene == inf :: 'a scene => 'a scene => 'a scene
  uminus_scene == uminus :: 'a scene => 'a scene
locale wb_prism
  fixes x :: "'v \<Longrightarrow>\<^sub>\<triangle> 's"  (structure)
  assumes "wb_prism x"
instantiation
  scene :: (type) ord
  less_eq_scene == less_eq :: 'a scene => 'a scene => bool
  less_scene == less :: 'a scene => 'a scene => bool
signature PRISM_LIB =
  sig
    val codepsN: string
    val isPrismT: typ -> bool
    val mk_codep: term -> term -> term
    val mk_wb_prism: term -> term
    val prismT: typ -> typ -> typ
    val prism_diffN: string
    val wb_prismN: string
  end
structure Prism_Lib: PRISM_LIB
### theory "Draft.Prisms"
### 0.281s elapsed time, 0.589s cpu time, 0.056s GC time
Loading theory "Draft.Channel_Type" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.Lens_Record_Example" via "Draft.Optics")
Loading theory "Draft.Dataspace" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.Lens_Record_Example" via "Draft.Optics")
structure Dataspace:
  sig
    val CHAN: string
    val STATE: string
    val achanT: typ
    val compile_dataspace:
       bstring ->
         xstring list ->
           (bstring * typ) list ->
             (Attrib.binding * (term * term list) list) list ->
               (bstring * typ) list ->
                 (bstring * typ) list -> theory -> theory
    val dataspace_cmd:
       bstring ->
         xstring list ->
           (bstring * string) list ->
             (Attrib.binding * (string * string list) list) list ->
               (bstring * string) list ->
                 (bstring * string) list -> theory -> theory
    val mk_channel_elements:
       xstring list ->
         (bstring * typ) list -> theory -> (typ, term, 'a) Element.ctxt list
    val mk_constant_elements:
       (bstring * 'a) list -> ('a, 'b, 'c) Element.ctxt list
  end
val it = (): unit
### theory "Draft.Dataspace"
### 0.050s elapsed time, 0.147s cpu time, 0.000s GC time
structure Channel_Type:
  sig
    val codep_proof: thm list -> Proof.context -> string * string -> thm
    val codep_suffix: string
    val compile_chantype:
       string * (string * string) list -> local_theory -> local_theory
    val ctor_suffix: string
    val def: string -> bstring * term -> local_theory -> thm * local_theory
    val defs:
       string ->
         bstring list ->
           (bstring -> term) -> local_theory -> thm list * local_theory
    val is_prefix: string
    val mk_def: typ -> string -> term -> term
    val prove_prism_goal: theory -> tactic
    val un_prefix: string
    val wb_prism_proof: string -> thm list -> Proof.context -> thm
    val wb_prism_suffix: string
  end
val it = (): unit
### theory "Draft.Channel_Type"
### 0.070s elapsed time, 0.190s cpu time, 0.000s GC time
### theory "Draft.Scenes"
### 0.472s elapsed time, 0.958s cpu time, 0.103s GC time
Loading theory "Draft.Optics" (required by "Draft.Lens_Record_ExampleMoreTemplates" via "Draft.Lens_Record_Example")
### theory "Draft.Optics"
### 0.227s elapsed time, 0.229s cpu time, 0.000s GC time
Loading theory "Draft.Lens_Record_Example" (required by "Draft.Lens_Record_ExampleMoreTemplates")
consts
  x :: "nat \<Longrightarrow> 'a mylens_scheme"
consts
  y :: "char list \<Longrightarrow> 'b mylens_scheme"
consts
  base\<^sub>L :: "mylens \<Longrightarrow> 'c mylens_scheme"
consts
  more\<^sub>L :: "'d \<Longrightarrow> 'd mylens_scheme"
consts
  all\<^sub>L :: "<mylens, 'a> \<Longleftrightarrow> 'a mylens_scheme"
bij_lens (base\<^sub>L +\<^sub>L more\<^sub>L)
base\<^sub>L \<approx>\<^sub>L x +\<^sub>L y
base\<^sub>L +\<^sub>L more\<^sub>L \<approx>\<^sub>L 1\<^sub>L
x \<subseteq>\<^sub>L base\<^sub>L
y \<subseteq>\<^sub>L base\<^sub>L
x /\<^sub>L base\<^sub>L = x
y /\<^sub>L base\<^sub>L = y
x ;\<^sub>L base\<^sub>L = x
y ;\<^sub>L base\<^sub>L = y
x \<bowtie> y
y \<bowtie> x
x \<bowtie> more\<^sub>L
more\<^sub>L \<bowtie> x
y \<bowtie> more\<^sub>L
more\<^sub>L \<bowtie> y
base\<^sub>L \<bowtie> more\<^sub>L
more\<^sub>L \<bowtie> base\<^sub>L
base\<^sub>L \<bowtie> ?Z ==> x \<bowtie> ?Z
base\<^sub>L \<bowtie> ?Z ==> y \<bowtie> ?Z
?Z \<bowtie> base\<^sub>L ==> ?Z \<bowtie> x
?Z \<bowtie> base\<^sub>L ==> ?Z \<bowtie> y
consts
  z :: "int \<Longrightarrow> 'a mylens_2_scheme"
consts
  k :: "char list list \<Longrightarrow> 'b mylens_2_scheme"
consts
  base\<^sub>L :: "mylens_2 \<Longrightarrow> 'c mylens_2_scheme"
consts
  more\<^sub>L :: "'d \<Longrightarrow> 'd mylens_2_scheme"
consts
  all\<^sub>L :: "<mylens_2, 'a> \<Longleftrightarrow> 'a mylens_2_scheme"
bij_lens (mylens_2.base\<^sub>L +\<^sub>L mylens_2.more\<^sub>L)
mylens.more\<^sub>L \<approx>\<^sub>L
z +\<^sub>L k +\<^sub>L mylens_2.more\<^sub>L
mylens_2.base\<^sub>L \<approx>\<^sub>L
mylens.base\<^sub>L +\<^sub>L z +\<^sub>L k
mylens_2.base\<^sub>L +\<^sub>L mylens_2.more\<^sub>L \<approx>\<^sub>L
1\<^sub>L
z \<bowtie> k
k \<bowtie> z
z \<bowtie> mylens_2.more\<^sub>L
mylens_2.more\<^sub>L \<bowtie> z
k \<bowtie> mylens_2.more\<^sub>L
mylens_2.more\<^sub>L \<bowtie> k
mylens_2.base\<^sub>L \<bowtie> mylens_2.more\<^sub>L
mylens_2.more\<^sub>L \<bowtie> mylens_2.base\<^sub>L
mylens.more\<^sub>L \<bowtie> ?Z ==> z \<bowtie> ?Z
mylens.more\<^sub>L \<bowtie> ?Z ==> k \<bowtie> ?Z
mylens.more\<^sub>L \<bowtie> ?Z ==> mylens_2.more\<^sub>L \<bowtie> ?Z
mylens_2.base\<^sub>L \<bowtie> ?Z ==> z \<bowtie> ?Z
mylens_2.base\<^sub>L \<bowtie> ?Z ==> k \<bowtie> ?Z
?Z \<bowtie> mylens.more\<^sub>L ==> ?Z \<bowtie> z
?Z \<bowtie> mylens.more\<^sub>L ==> ?Z \<bowtie> k
?Z \<bowtie> mylens.more\<^sub>L ==> ?Z \<bowtie> mylens_2.more\<^sub>L
?Z \<bowtie> mylens_2.base\<^sub>L ==> ?Z \<bowtie> z
?Z \<bowtie> mylens_2.base\<^sub>L ==> ?Z \<bowtie> k
z \<subseteq>\<^sub>L mylens.more\<^sub>L
k \<subseteq>\<^sub>L mylens.more\<^sub>L
mylens_2.more\<^sub>L \<subseteq>\<^sub>L mylens.more\<^sub>L
z \<subseteq>\<^sub>L mylens_2.base\<^sub>L
k \<subseteq>\<^sub>L mylens_2.base\<^sub>L
create\<^bsub>?X\<^esub> ?v = put\<^bsub>?X\<^esub> src\<^bsub>?X\<^esub> ?v
update\<^bsub>?X\<^esub> ?f ?\<sigma> =
put\<^bsub>?X\<^esub> ?\<sigma> (?f (get\<^bsub>?X\<^esub> ?\<sigma>))
(?s\<^sub>1 \<simeq>\<^bsub>?X\<^esub> ?s\<^sub>2) =
(?s\<^sub>1 =
 put\<^bsub>?X\<^esub> ?s\<^sub>2 (get\<^bsub>?X\<^esub> ?s\<^sub>1))
?S\<^sub>1 \<triangleleft>\<^bsub>?X\<^esub> ?S\<^sub>2 =
put\<^bsub>?X\<^esub> ?S\<^sub>1 (get\<^bsub>?X\<^esub> ?S\<^sub>2)
(?X ##\<^sub>L ?Y) =
(ALL s\<^sub>1 s\<^sub>2.
    s\<^sub>1 \<triangleleft>\<^bsub>?X\<^esub>
    s\<^sub>2 \<triangleleft>\<^bsub>?Y\<^esub>
    s\<^sub>2 =
    s\<^sub>1 \<triangleleft>\<^bsub>?Y\<^esub>
    s\<^sub>2 \<triangleleft>\<^bsub>?X\<^esub>
    s\<^sub>2)
?Y ;\<^sub>L ?X =
(| lens_get = get\<^bsub>?Y\<^esub> o get\<^bsub>?X\<^esub>,
   lens_put =
     %\<sigma> v.
        put\<^bsub>?X\<^esub> \<sigma>
         (put\<^bsub>?Y\<^esub> (get\<^bsub>?X\<^esub> \<sigma>) v) |)
?X +\<^sub>L ?Y =
(| lens_get =
     %\<sigma>.
        (get\<^bsub>?X\<^esub> \<sigma>, get\<^bsub>?Y\<^esub> \<sigma>),
   lens_put =
     %\<sigma> (u, v).
        put\<^bsub>?X\<^esub> (put\<^bsub>?Y\<^esub> \<sigma> v) u |)
?X \<times>\<^sub>L ?Y =
(| lens_get = map_prod get\<^bsub>?X\<^esub> get\<^bsub>?Y\<^esub>,
   lens_put =
     %(u, v) (x, y).
        (put\<^bsub>?X\<^esub> u x, put\<^bsub>?Y\<^esub> v y) |)
fst\<^sub>L =
(| lens_get = fst, lens_put = %(\<sigma>, \<rho>) u. (u, \<rho>) |)
snd\<^sub>L =
(| lens_get = snd, lens_put = %(\<sigma>, \<rho>). Pair \<sigma> |)
0\<^sub>L = (| lens_get = %_. (), lens_put = %\<sigma> x. \<sigma> |)
1\<^sub>L = (| lens_get = id, lens_put = %_. id |)
?X /\<^sub>L ?Y =
(| lens_get =
     %\<sigma>. get\<^bsub>?X\<^esub> (create\<^bsub>?Y\<^esub> \<sigma>),
   lens_put =
     %\<sigma> v.
        get\<^bsub>?Y\<^esub>
         (put\<^bsub>?X\<^esub> (create\<^bsub>?Y\<^esub> \<sigma>) v) |)
inv\<^sub>L ?x =
(| lens_get = create\<^bsub>?x\<^esub>,
   lens_put = %\<sigma>. get\<^bsub>?x\<^esub> |)
?X \<subseteq>\<^sub>L ?Y = (EX Z. vwb_lens Z & ?X = Z ;\<^sub>L ?Y)
?X \<approx>\<^sub>L ?Y =
(?X \<subseteq>\<^sub>L ?Y & ?Y \<subseteq>\<^sub>L ?X)
?X \<subseteq>\<^sub>L' ?Y =
(ALL s\<^sub>1 s\<^sub>2 s\<^sub>3.
    s\<^sub>1 \<triangleleft>\<^bsub>?Y\<^esub>
    s\<^sub>2 \<triangleleft>\<^bsub>?X\<^esub>
    s\<^sub>3 =
    s\<^sub>1 \<triangleleft>\<^bsub>?Y\<^esub>
    (s\<^sub>2 \<triangleleft>\<^bsub>?X\<^esub> s\<^sub>3))
?X \<approx>\<^sub>L' ?Y =
(ALL s\<^sub>1 s\<^sub>2.
    s\<^sub>1 \<triangleleft>\<^bsub>?X\<^esub> s\<^sub>2 =
    s\<^sub>1 \<triangleleft>\<^bsub>?Y\<^esub> s\<^sub>2)
slens.make ?view ?coview == (| view = ?view, coview = ?coview |)
slens.fields ?view ?coview == (| view = ?view, coview = ?coview |)
slens.extend ?r ?more ==
(| view = \<V>\<^bsub>?r\<^esub>, coview = \<C>\<^bsub>?r\<^esub>,
   ... = ?more |)
slens.truncate ?r ==
(| view = \<V>\<^bsub>?r\<^esub>, coview = \<C>\<^bsub>?r\<^esub> |)
-\<^sub>L ?a =
(| view = \<C>\<^bsub>?a\<^esub>, coview = \<V>\<^bsub>?a\<^esub> |)
fun_lens ?x = (| lens_get = %f. f ?x, lens_put = %f. fun_upd f ?x |)
fun_ran_lens ?X ?Y =
(| lens_get = %s. get\<^bsub>?X\<^esub> o get\<^bsub>?Y\<^esub> s,
   lens_put =
     %s v. put\<^bsub>?Y\<^esub> s
            (%x. put\<^bsub>?X\<^esub> (get\<^bsub>?Y\<^esub> s x) (v x)) |)
map_lens ?x = (| lens_get = %f. the (f ?x), lens_put = %f u. f(?x |-> u) |)
list_lens ?i =
(| lens_get = %xs. nth' xs ?i, lens_put = %xs. list_augment xs ?i |)
tl\<^sub>L = (| lens_get = tl, lens_put = %xs. (#) (hd xs) |)
lmap_lens ?f ?g ?h ?l =
(| lens_get = ?f get\<^bsub>?l\<^esub>,
   lens_put = ?g o put\<^bsub>?l\<^esub> o ?h |)
?S\<^sub>1 \<approx>\<^sub>S ?S\<^sub>2 on ?X =
(?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 on ?X = ?S\<^sub>1)
?X \<sqinter>\<^sub>S ?Y = - (- ?X \<squnion>\<^sub>S - ?Y)
?X \<subseteq>\<^sub>S ?Y =
(ALL s\<^sub>1 s\<^sub>2 s\<^sub>3.
    s\<^sub>1 \<oplus>\<^sub>S s\<^sub>2 on ?Y \<oplus>\<^sub>S s\<^sub>3 on ?X =
    s\<^sub>1 \<oplus>\<^sub>S s\<^sub>2 \<oplus>\<^sub>S s\<^sub>3 on ?X on ?Y)
(?x < ?y) = (?x \<subseteq>\<^sub>S ?y & ~ ?y \<subseteq>\<^sub>S ?x)
(?x \<in>\<^sub>S ?A) =
((ALL s\<^sub>1 s\<^sub>2 s\<^sub>3.
     s\<^sub>1 \<oplus>\<^sub>S s\<^sub>2 on ?A \<triangleleft>\<^bsub>?x\<^esub>
     s\<^sub>3 =
     s\<^sub>1 \<oplus>\<^sub>S s\<^sub>2 \<triangleleft>\<^bsub>?x\<^esub>
                                s\<^sub>3 on ?A) &
 (ALL b b'.
     get\<^bsub>?x\<^esub> (b \<oplus>\<^sub>S b' on ?A) =
     get\<^bsub>?x\<^esub> b'))
Inl\<^sub>\<triangle> =
(| prism_match = %v. case v of Inl x => Some x | Inr x => Map.empty x,
   prism_build = Inl |)
Inr\<^sub>\<triangle> =
(| prism_match = %v. case v of Inl x => Map.empty x | Inr x => Some x,
   prism_build = Inr |)
ctor_prism ?ctor ?disc ?sel =
(| prism_match = %d. if ?disc d then Some (?sel d) else None,
   prism_build = ?ctor |)
mylens.make ?x\<^sub>v ?y\<^sub>v ==
(| x\<^sub>v = ?x\<^sub>v, y\<^sub>v = ?y\<^sub>v |)
mylens.fields ?x\<^sub>v ?y\<^sub>v ==
(| x\<^sub>v = ?x\<^sub>v, y\<^sub>v = ?y\<^sub>v |)
mylens.extend ?r ?more ==
(| x\<^sub>v = x\<^sub>v ?r, y\<^sub>v = y\<^sub>v ?r, ... = ?more |)
mylens.truncate ?r ==
(| x\<^sub>v = x\<^sub>v ?r, y\<^sub>v = y\<^sub>v ?r |)
x =
(| lens_get = x\<^sub>v,
   lens_put = %\<sigma> u. \<sigma>(| x\<^sub>v := u |) |)
y =
(| lens_get = y\<^sub>v,
   lens_put = %\<sigma> u. \<sigma>(| y\<^sub>v := u |) |)
mylens.base\<^sub>L =
(| lens_get = mylens.truncate,
   lens_put = %s v. mylens.extend v (mylens.more s) |)
mylens.more\<^sub>L =
(| lens_get = mylens.more,
   lens_put = %\<sigma> u. \<sigma>(| mylens.more := u |) |)
mylens_2.make ?x\<^sub>v ?y\<^sub>v ?z\<^sub>v ?k\<^sub>v ==
(| x\<^sub>v = ?x\<^sub>v, y\<^sub>v = ?y\<^sub>v, z\<^sub>v = ?z\<^sub>v,
   k\<^sub>v = ?k\<^sub>v |)
mylens_2.fields ?z\<^sub>v ?k\<^sub>v ==
(| z\<^sub>v = ?z\<^sub>v, k\<^sub>v = ?k\<^sub>v |)
mylens_2.extend ?r ?more ==
(| x\<^sub>v = x\<^sub>v ?r, y\<^sub>v = y\<^sub>v ?r,
   z\<^sub>v = z\<^sub>v ?r, k\<^sub>v = k\<^sub>v ?r, ... = ?more |)
mylens_2.truncate ?r ==
(| x\<^sub>v = x\<^sub>v ?r, y\<^sub>v = y\<^sub>v ?r,
   z\<^sub>v = z\<^sub>v ?r, k\<^sub>v = k\<^sub>v ?r |)
z =
(| lens_get = z\<^sub>v,
   lens_put = %\<sigma> u. \<sigma>(| z\<^sub>v := u |) |)
k =
(| lens_get = k\<^sub>v,
   lens_put = %\<sigma> u. \<sigma>(| k\<^sub>v := u |) |)
mylens_2.base\<^sub>L =
(| lens_get = mylens_2.truncate,
   lens_put = %s v. mylens_2.extend v (mylens_2.more s) |)
mylens_2.more\<^sub>L =
(| lens_get = mylens_2.more,
   lens_put = %\<sigma> u. \<sigma>(| mylens_2.more := u |) |)
consts
  n :: "real \<Longrightarrow> 'a mylens_3_scheme"
consts
  h :: "nat \<Longrightarrow> 'b mylens_3_scheme"
consts
  base\<^sub>L :: "mylens_3 \<Longrightarrow> 'c mylens_3_scheme"
consts
  more\<^sub>L :: "'d \<Longrightarrow> 'd mylens_3_scheme"
consts
  all\<^sub>L :: "<mylens_3, 'a> \<Longleftrightarrow> 'a mylens_3_scheme"
bij_lens (mylens_3.base\<^sub>L +\<^sub>L mylens_3.more\<^sub>L)
n \<subseteq>\<^sub>L mylens_2.more\<^sub>L
h \<subseteq>\<^sub>L mylens_2.more\<^sub>L
mylens_3.more\<^sub>L \<subseteq>\<^sub>L mylens_2.more\<^sub>L
n \<subseteq>\<^sub>L mylens_3.base\<^sub>L
h \<subseteq>\<^sub>L mylens_3.base\<^sub>L
mylens_2.more\<^sub>L \<approx>\<^sub>L
n +\<^sub>L h +\<^sub>L mylens_3.more\<^sub>L
mylens_3.base\<^sub>L \<approx>\<^sub>L
mylens_2.base\<^sub>L +\<^sub>L n +\<^sub>L h
mylens_3.base\<^sub>L +\<^sub>L mylens_3.more\<^sub>L \<approx>\<^sub>L
1\<^sub>L
n \<bowtie> h
h \<bowtie> n
n \<bowtie> mylens_3.more\<^sub>L
mylens_3.more\<^sub>L \<bowtie> n
h \<bowtie> mylens_3.more\<^sub>L
mylens_3.more\<^sub>L \<bowtie> h
mylens_3.base\<^sub>L \<bowtie> mylens_3.more\<^sub>L
mylens_3.more\<^sub>L \<bowtie> mylens_3.base\<^sub>L
mylens_2.more\<^sub>L \<bowtie> ?Z ==> n \<bowtie> ?Z
mylens_2.more\<^sub>L \<bowtie> ?Z ==> h \<bowtie> ?Z
mylens_2.more\<^sub>L \<bowtie> ?Z ==> mylens_3.more\<^sub>L \<bowtie> ?Z
mylens_3.base\<^sub>L \<bowtie> ?Z ==> n \<bowtie> ?Z
mylens_3.base\<^sub>L \<bowtie> ?Z ==> h \<bowtie> ?Z
?Z \<bowtie> mylens_2.more\<^sub>L ==> ?Z \<bowtie> n
?Z \<bowtie> mylens_2.more\<^sub>L ==> ?Z \<bowtie> h
?Z \<bowtie> mylens_2.more\<^sub>L ==> ?Z \<bowtie> mylens_3.more\<^sub>L
?Z \<bowtie> mylens_3.base\<^sub>L ==> ?Z \<bowtie> n
?Z \<bowtie> mylens_3.base\<^sub>L ==> ?Z \<bowtie> h
consts
  mn :: "'a \<Longrightarrow> ('a, 'b) mylens_4_scheme"
consts
  base\<^sub>L :: "'c mylens_4 \<Longrightarrow> ('c, 'd) mylens_4_scheme"
consts
  more\<^sub>L :: "'e \<Longrightarrow> ('f, 'e) mylens_4_scheme"
consts
  all\<^sub>L ::
    "<'a mylens_4, 'b> \<Longleftrightarrow> ('a, 'b) mylens_4_scheme"
### theory "Draft.Lens_Record_Example"
### 1.556s elapsed time, 1.667s cpu time, 0.131s GC time
Loading theory "Draft.Lens_Record_ExampleMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Lens_Record_ExampleMoreTemplates"
### 0.386s elapsed time, 0.548s cpu time, 0.038s GC time
val it = (): unit
