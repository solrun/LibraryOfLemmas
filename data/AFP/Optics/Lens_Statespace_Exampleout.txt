Loading theory "Draft.Interp" (required by "Draft.Lens_Statespace_ExampleMoreTemplates" via "Draft.Lens_Statespace_Example" via "Draft.Lenses" via "Draft.Lens_Laws")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Lens_Statespace_ExampleMoreTemplates" via "Draft.Lens_Statespace_Example" via "Draft.Lenses" via "Draft.Lens_Instances")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Lens_Statespace_ExampleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Lens_Statespace_ExampleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
locale interp
  fixes f :: "'a => 'b"
  assumes "interp f"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Interp"
### 0.037s elapsed time, 0.145s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Lens_Statespace_ExampleMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
### theory "HOL-Library.Function_Algebras"
### 0.119s elapsed time, 0.458s cpu time, 0.034s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Lens_Statespace_ExampleMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
structure Eisbach_Rule_Insts: sig end
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.872s cpu time, 0.109s GC time
Loading theory "Draft.Two" (required by "Draft.Lens_Statespace_ExampleMoreTemplates" via "Draft.Lens_Statespace_Example" via "Draft.Lenses" via "Draft.Lens_Laws")
### Additional type variable(s) in locale specification "two": 'a
### theory "HOL-Library.Nat_Bijection"
### 0.321s elapsed time, 1.249s cpu time, 0.109s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Lens_Statespace_ExampleMoreTemplates" via "Draft.ExtrEqs")
class two = type +
  assumes "card_two": "infinite UNIV | 2 <= card UNIV"
### theory "Draft.Two"
### 0.072s elapsed time, 0.288s cpu time, 0.000s GC time
Loading theory "Draft.Lens_Laws" (required by "Draft.Lens_Statespace_ExampleMoreTemplates" via "Draft.Lens_Statespace_Example" via "Draft.Lenses")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.439s elapsed time, 1.715s cpu time, 0.161s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Lens_Statespace_ExampleMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale weak_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "weak_lens x"
locale wb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "wb_lens x"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale mwb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "mwb_lens x"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
locale vwb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "vwb_lens x"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale ief_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "ief_lens x"
locale pbij_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "pbij_lens x"
Found termination order: "size <*mlex*> {}"
locale bij_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "bij_lens x"
consts
  flat :: "'a list stream => 'a stream"
locale lens_indep
  fixes X :: "'a \<Longrightarrow> 'c"
    and Y :: "'b \<Longrightarrow> 'c"
  assumes "lens_indep X Y"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lens_Laws"
### 0.962s elapsed time, 3.690s cpu time, 0.830s GC time
Loading theory "Draft.Lens_Algebra" (required by "Draft.Lens_Statespace_ExampleMoreTemplates" via "Draft.Lens_Statespace_Example" via "Draft.Lenses")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.086s elapsed time, 4.172s cpu time, 0.876s GC time
### theory "HOL-Library.BigO"
### 1.005s elapsed time, 3.830s cpu time, 0.824s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lens_Algebra"
### 0.258s elapsed time, 0.762s cpu time, 0.047s GC time
Loading theory "Draft.Lens_Order" (required by "Draft.Lens_Statespace_ExampleMoreTemplates" via "Draft.Lens_Statespace_Example" via "Draft.Lenses")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Lens_Order"
### 0.262s elapsed time, 0.565s cpu time, 0.086s GC time
Loading theory "Draft.Lens_Symmetric" (required by "Draft.Lens_Statespace_ExampleMoreTemplates" via "Draft.Lens_Statespace_Example" via "Draft.Lenses")
Found termination order: "size <*mlex*> {}"
locale psym_lens
  fixes S :: "<'a, 'b> \<Longleftrightarrow> 's"  (structure)
  assumes "psym_lens S"
### theory "HOL-Library.Tree"
### 2.031s elapsed time, 6.610s cpu time, 1.160s GC time
Loading theory "Draft.Templates" (required by "Draft.Lens_Statespace_ExampleMoreTemplates" via "Draft.ExtrEqs")
locale sym_lens
  fixes S :: "<'a, 'b> \<Longleftrightarrow> 's"  (structure)
  assumes "sym_lens S"
### theory "Draft.Lens_Symmetric"
### 0.326s elapsed time, 0.720s cpu time, 0.123s GC time
Loading theory "Draft.Lens_Instances" (required by "Draft.Lens_Statespace_ExampleMoreTemplates" via "Draft.Lens_Statespace_Example" via "Draft.Lenses")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.127s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Lens_Statespace_ExampleMoreTemplates")
val baselens_tr = fn: term list -> term
signature LENS_LIB =
  sig
    val astateT: typ
    val bij_lensN: string
    val compositionsN: string
    val id_lensN: string
    val indepsN: string
    val isLensT: typ -> bool
    val lensT: typ -> typ -> typ
    val lens_compN: string
    val lens_defsN: string
    val lens_equivN: string
    val lens_indepN: string
    val lens_plusN: string
    val lens_quotientN: string
    val mk_indep: term -> term -> term
    val mk_vwb_lens: term -> term
    val pairings: 'a list -> ('a * 'a) list
    val pairsWith: 'a list -> 'a list -> ('a * 'a) list
    val quotientsN: string
    val sublensN: string
    val sublensesN: string
    val sym_lensN: string
    val vwb_lensN: string
  end
structure Lens_Lib: LENS_LIB
signature LENS_UTILS =
  sig
    val add_alphabet:
       (string * class list) list * binding ->
         string option -> (binding * typ * mixfix) list -> theory -> theory
    val add_alphabet_cmd:
       (string * string option) list * binding ->
         string option ->
           (binding * string * mixfix) list -> theory -> theory
    val rename_alpha_vars: tactic
  end
structure Lens_Utils: LENS_UTILS
signature LENS_STATESPACE =
  sig
    val compile_statespace:
       bstring -> (bstring * typ) list -> xstring list -> theory -> theory
    val mk_statespace_elements:
       bstring ->
         (bstring * typ) list ->
           xstring list -> theory -> Element.context_i list
    val statespace_cmd:
       bstring ->
         xstring list -> (bstring * string) list -> theory -> theory
  end
structure Lens_Statespace:
  sig
    val compile_statespace:
       bstring -> (bstring * typ) list -> xstring list -> theory -> theory
    val mk_statespace_elements:
       (bstring * typ) list ->
         xstring list -> theory -> (typ, term, 'a) Element.ctxt list
    val statespace_cmd:
       bstring ->
         xstring list -> (bstring * string) list -> theory -> theory
  end
val it = (): unit
locale type_definition
  fixes Rep :: "'b => 'a"
    and Abs :: "'a => 'b"
    and A :: "'a set"
  assumes "type_definition Rep Abs A"
val lmap_tr = fn: term list -> term
locale lens_interp
  fixes f :: "'a => 'b"
  assumes "lens_interp f"
### theory "Draft.Lens_Instances"
### 0.561s elapsed time, 1.174s cpu time, 0.116s GC time
Loading theory "Draft.Lenses" (required by "Draft.Lens_Statespace_ExampleMoreTemplates" via "Draft.Lens_Statespace_Example")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.538s elapsed time, 1.132s cpu time, 0.116s GC time
### theory "Draft.Lenses"
### 0.026s elapsed time, 0.046s cpu time, 0.000s GC time
Loading theory "Draft.Lens_Statespace_Example" (required by "Draft.Lens_Statespace_ExampleMoreTemplates")
locale myss2
  fixes x :: "int \<Longrightarrow> 'st"
    and y :: "int \<Longrightarrow> 'st"
    and a :: "char list \<Longrightarrow> 'st"
    and z :: "char list \<Longrightarrow> 'st"
  assumes "myss2 x y a z"
consts
  x :: "int \<Longrightarrow> 'a myss_c_scheme"
consts
  y :: "int \<Longrightarrow> 'b myss_c_scheme"
consts
  a :: "char list \<Longrightarrow> 'c myss_c_scheme"
consts
  z :: "char list \<Longrightarrow> 'd myss_c_scheme"
consts
  v :: "char list \<Longrightarrow> 'e myss_c_scheme"
consts
  base\<^sub>L :: "myss_c \<Longrightarrow> 'f myss_c_scheme"
consts
  more\<^sub>L :: "'g \<Longrightarrow> 'g myss_c_scheme"
consts
  all\<^sub>L :: "<myss_c, 'a> \<Longleftrightarrow> 'a myss_c_scheme"
### theory "Draft.Lens_Statespace_Example"
### 0.899s elapsed time, 0.951s cpu time, 0.073s GC time
Loading theory "Draft.Lens_Statespace_ExampleMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Lens_Statespace_ExampleMoreTemplates"
### 0.331s elapsed time, 0.503s cpu time, 0.038s GC time
val it = (): unit
