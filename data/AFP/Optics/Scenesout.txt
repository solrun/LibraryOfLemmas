Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.ScenesMoreTemplates" via "Draft.Scenes" via "Draft.Lens_Instances")
Loading theory "Draft.Interp" (required by "Draft.ScenesMoreTemplates" via "Draft.Scenes" via "Draft.Lens_Instances" via "Draft.Lens_Order" via "Draft.Lens_Algebra" via "Draft.Lens_Laws")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ScenesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ScenesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
locale interp
  fixes f :: "'a => 'b"
  assumes "interp f"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Interp"
### 0.044s elapsed time, 0.175s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ScenesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.530s cpu time, 0.034s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ScenesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
structure Eisbach_Rule_Insts: sig end
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.234s elapsed time, 0.905s cpu time, 0.123s GC time
Loading theory "Draft.Two" (required by "Draft.ScenesMoreTemplates" via "Draft.Scenes" via "Draft.Lens_Instances" via "Draft.Lens_Order" via "Draft.Lens_Algebra" via "Draft.Lens_Laws")
### Additional type variable(s) in locale specification "two": 'a
### theory "HOL-Library.Nat_Bijection"
### 0.326s elapsed time, 1.271s cpu time, 0.123s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ScenesMoreTemplates" via "Draft.ExtrEqs")
class two = type +
  assumes "card_two": "infinite UNIV | 2 <= card UNIV"
### theory "Draft.Two"
### 0.074s elapsed time, 0.290s cpu time, 0.000s GC time
Loading theory "Draft.Lens_Laws" (required by "Draft.ScenesMoreTemplates" via "Draft.Scenes" via "Draft.Lens_Instances" via "Draft.Lens_Order" via "Draft.Lens_Algebra")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.443s elapsed time, 1.726s cpu time, 0.191s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ScenesMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale weak_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "weak_lens x"
locale wb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "wb_lens x"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale mwb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "mwb_lens x"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
locale vwb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "vwb_lens x"
locale ief_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "ief_lens x"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale pbij_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "pbij_lens x"
Found termination order: "size <*mlex*> {}"
locale bij_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "bij_lens x"
consts
  flat :: "'a list stream => 'a stream"
locale lens_indep
  fixes X :: "'a \<Longrightarrow> 'c"
    and Y :: "'b \<Longrightarrow> 'c"
  assumes "lens_indep X Y"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lens_Laws"
### 0.778s elapsed time, 3.108s cpu time, 0.279s GC time
Loading theory "Draft.Lens_Algebra" (required by "Draft.ScenesMoreTemplates" via "Draft.Scenes" via "Draft.Lens_Instances" via "Draft.Lens_Order")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.107s elapsed time, 4.271s cpu time, 0.918s GC time
### theory "HOL-Library.BigO"
### 1.024s elapsed time, 3.917s cpu time, 0.849s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lens_Algebra"
### 0.442s elapsed time, 1.367s cpu time, 0.639s GC time
Loading theory "Draft.Lens_Order" (required by "Draft.ScenesMoreTemplates" via "Draft.Scenes" via "Draft.Lens_Instances")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Lens_Order"
### 0.269s elapsed time, 0.588s cpu time, 0.107s GC time
Loading theory "Draft.Lens_Symmetric" (required by "Draft.ScenesMoreTemplates" via "Draft.Scenes" via "Draft.Lens_Instances")
Found termination order: "size <*mlex*> {}"
locale psym_lens
  fixes S :: "<'a, 'b> \<Longleftrightarrow> 's"  (structure)
  assumes "psym_lens S"
locale sym_lens
  fixes S :: "<'a, 'b> \<Longleftrightarrow> 's"  (structure)
  assumes "sym_lens S"
### theory "HOL-Library.Tree"
### 2.051s elapsed time, 6.700s cpu time, 1.261s GC time
Loading theory "Draft.Templates" (required by "Draft.ScenesMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Lens_Symmetric"
### 0.330s elapsed time, 0.726s cpu time, 0.147s GC time
Loading theory "Draft.Lens_Instances" (required by "Draft.ScenesMoreTemplates" via "Draft.Scenes")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.121s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ScenesMoreTemplates")
val baselens_tr = fn: term list -> term
signature LENS_LIB =
  sig
    val astateT: typ
    val bij_lensN: string
    val compositionsN: string
    val id_lensN: string
    val indepsN: string
    val isLensT: typ -> bool
    val lensT: typ -> typ -> typ
    val lens_compN: string
    val lens_defsN: string
    val lens_equivN: string
    val lens_indepN: string
    val lens_plusN: string
    val lens_quotientN: string
    val mk_indep: term -> term -> term
    val mk_vwb_lens: term -> term
    val pairings: 'a list -> ('a * 'a) list
    val pairsWith: 'a list -> 'a list -> ('a * 'a) list
    val quotientsN: string
    val sublensN: string
    val sublensesN: string
    val sym_lensN: string
    val vwb_lensN: string
  end
structure Lens_Lib: LENS_LIB
signature LENS_UTILS =
  sig
    val add_alphabet:
       (string * class list) list * binding ->
         string option -> (binding * typ * mixfix) list -> theory -> theory
    val add_alphabet_cmd:
       (string * string option) list * binding ->
         string option ->
           (binding * string * mixfix) list -> theory -> theory
    val rename_alpha_vars: tactic
  end
structure Lens_Utils: LENS_UTILS
signature LENS_STATESPACE =
  sig
    val compile_statespace:
       bstring -> (bstring * typ) list -> xstring list -> theory -> theory
    val mk_statespace_elements:
       bstring ->
         (bstring * typ) list ->
           xstring list -> theory -> Element.context_i list
    val statespace_cmd:
       bstring ->
         xstring list -> (bstring * string) list -> theory -> theory
  end
structure Lens_Statespace:
  sig
    val compile_statespace:
       bstring -> (bstring * typ) list -> xstring list -> theory -> theory
    val mk_statespace_elements:
       (bstring * typ) list ->
         xstring list -> theory -> (typ, term, 'a) Element.ctxt list
    val statespace_cmd:
       bstring ->
         xstring list -> (bstring * string) list -> theory -> theory
  end
val it = (): unit
locale type_definition
  fixes Rep :: "'b => 'a"
    and Abs :: "'a => 'b"
    and A :: "'a set"
  assumes "type_definition Rep Abs A"
val lmap_tr = fn: term list -> term
locale lens_interp
  fixes f :: "'a => 'b"
  assumes "lens_interp f"
### theory "Draft.Lens_Instances"
### 0.745s elapsed time, 1.818s cpu time, 0.761s GC time
Loading theory "Draft.Scenes" (required by "Draft.ScenesMoreTemplates")
locale overrider
  fixes F :: "'s => 's => 's"  (infixl \<open>\<triangleright>\<close> 65)
  assumes "overrider (\<triangleright>)"
locale idem_overrider
  fixes F :: "'a => 'a => 'a"  (infixl \<open>\<triangleright>\<close> 65)
  assumes "idem_overrider (\<triangleright>)"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.750s elapsed time, 1.818s cpu time, 0.761s GC time
instantiation
  scene :: (type) {uminus,inf,sup,bot,top}
  top_scene == top :: 'a scene
  bot_scene == bot :: 'a scene
  sup_scene == sup :: 'a scene => 'a scene => 'a scene
  inf_scene == inf :: 'a scene => 'a scene => 'a scene
  uminus_scene == uminus :: 'a scene => 'a scene
instantiation
  scene :: (type) ord
  less_eq_scene == less_eq :: 'a scene => 'a scene => bool
  less_scene == less :: 'a scene => 'a scene => bool
### theory "Draft.Scenes"
### 0.457s elapsed time, 0.528s cpu time, 0.033s GC time
Loading theory "Draft.ScenesMoreTemplates"
val templateLemmas =
   [("Scenes.scene_bot_least", "\<bottom>\<^sub>S \<subseteq>\<^sub>S ?X",
     template_inequation (less_equals, template_hole 0, template_var 0)),
    ("Scenes.scene_top_greatest", "?X \<subseteq>\<^sub>S \<top>\<^sub>S",
     template_inequation (less_equals, template_var 0, template_hole 0)),
    ("Scenes.subscene_refl", "?X \<subseteq>\<^sub>S ?X",
     template_inequation (less_equals, template_var 0, template_var 0)),
    ("Scenes.lens_member_top", "?x \<in>\<^sub>S \<top>\<^sub>S",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Scenes.scene_compat_refl", "?X ##\<^sub>S ?X",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Scenes.equiv_coregion", "equiv UNIV (coregion ?X)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Scenes.equiv_region", "equiv UNIV (region ?X)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Scenes.scene_compat_self_compl", "?A ##\<^sub>S - ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("Scenes.scene_equiv_bot",
     "?a \<approx>\<^sub>S ?b on \<bottom>\<^sub>S",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Scenes.scene_indep_self_compl", "?A \<bowtie>\<^sub>S - ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("Scenes.scene_inter_idem", "?X \<sqinter>\<^sub>S ?X = ?X",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Scenes.scene_union_unit",
     "?X \<squnion>\<^sub>S \<bottom>\<^sub>S = ?X",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Scenes.scene_union_idem", "?X \<squnion>\<^sub>S ?X = ?X",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Scenes.uminus_scene_twice", "- (- ?X) = ?X",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Scenes.fun_dom_scene_always_compat", "fds ?A ##\<^sub>S fds ?B",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Scenes.scene_override_unit",
     "?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 on \<bottom>\<^sub>S =
      ?S\<^sub>1",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 1)),
    ("Scenes.scene_override_id",
     "?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 on \<top>\<^sub>S =
      ?S\<^sub>2",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 0)),
    ("Scenes.scene_union_commute",
     "?X \<squnion>\<^sub>S ?Y = ?Y \<squnion>\<^sub>S ?X",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Scenes.fun_dom_scene_compl", "fds (- ?A) = - fds ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Scenes.vwb_impl_idem_scene",
     "vwb_lens ?X ==> idem_scene \<lbrakk>?X\<rbrakk>\<^sub>\<sim>",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Scenes.idem_scene_uminus", "idem_scene ?X ==> idem_scene (- ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Scenes.scene_compat_top",
     "idem_scene ?X ==> ?X ##\<^sub>S \<top>\<^sub>S",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Scenes.scene_le_iff_indep_inv",
     "(?A \<bowtie>\<^sub>S - ?B) = ?A \<subseteq>\<^sub>S ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Scenes.scene_comp_idem",
     "idem_scene ?S ==> idem_scene (?S ;\<^sub>S ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Scenes.scene_compat_sym", "?X ##\<^sub>S ?Y ==> ?Y ##\<^sub>S ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Scenes.scene_indep_compat",
     "?X \<bowtie>\<^sub>S ?Y ==> ?X ##\<^sub>S ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Scenes.scene_indep_sym",
     "?X \<bowtie>\<^sub>S ?Y ==> ?Y \<bowtie>\<^sub>S ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Scenes.fun_dom_scene_le",
     "fds ?A \<subseteq>\<^sub>S fds ?B = (?A <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Scenes.lens_insert_idem",
     "insert\<^sub>S ?x (insert\<^sub>S ?x ?A) = insert\<^sub>S ?x ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Scenes.scene_union_annhil",
     "idem_scene ?X ==>
      ?X \<squnion>\<^sub>S \<top>\<^sub>S = \<top>\<^sub>S",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_hole 0))),
    ("Scenes.indep_then_compl_in",
     "?A \<bowtie>\<^sub>S ?B ==> ?A \<subseteq>\<^sub>S - ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("Scenes.scene_override_commute",
     "?S\<^sub>2 \<oplus>\<^sub>S ?S\<^sub>1 on (- ?X) =
      ?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 on ?X",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 2),
         template_var 0))),
    ("Scenes.scene_demorgan2",
     "- (?X \<sqinter>\<^sub>S ?Y) = - ?X \<squnion>\<^sub>S - ?Y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Scenes.scene_demorgan1",
     "- (?X \<squnion>\<^sub>S ?Y) = - ?X \<sqinter>\<^sub>S - ?Y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Scenes.fun_dom_scene_inter",
     "fds (?A Int ?B) = fds ?A \<sqinter>\<^sub>S fds ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Scenes.fun_dom_scene_union",
     "fds (?A Un ?B) = fds ?A \<squnion>\<^sub>S fds ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Scenes.scene_override_idem",
     "idem_scene ?X ==> ?s \<oplus>\<^sub>S ?s on ?X = ?s",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0),
           template_var 1),
         template_var 0))),
    ("Scenes.scene_inter_compl",
     "idem_scene ?X ==> ?X \<sqinter>\<^sub>S - ?X = \<bottom>\<^sub>S",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Scenes.scene_union_compl",
     "idem_scene ?X ==> ?X \<squnion>\<^sub>S - ?X = \<top>\<^sub>S",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Scenes.lens_indep_impl_scene_indep",
     "?X \<bowtie> ?Y ==>
      \<lbrakk>?X\<rbrakk>\<^sub>\<sim> \<bowtie>\<^sub>S
      \<lbrakk>?Y\<rbrakk>\<^sub>\<sim>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Scenes.fun_dom_scene_indep",
     "(fds ?A \<bowtie>\<^sub>S fds ?B) = (?A Int ?B = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Scenes.region_coregion_Id",
     "idem_scene ?X ==> region ?X Int coregion ?X = Id",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Scenes.scene_union_incompat",
     "~ ?X ##\<^sub>S ?Y ==> ?X \<squnion>\<^sub>S ?Y = \<bottom>\<^sub>S",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Scenes.idem_scene_impl_vwb",
     "[| mwb_lens ?X; idem_scene \<lbrakk>?X\<rbrakk>\<^sub>\<sim> |]
      ==> vwb_lens ?X",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Scenes.scene_override_overshadow_right",
     "?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 \<oplus>\<^sub>S ?S\<^sub>3 on ?X on ?X =
      ?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>3 on ?X",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_var 0))),
    ("Scenes.scene_override_overshadow_left",
     "?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 on ?X \<oplus>\<^sub>S ?S\<^sub>3 on ?X =
      ?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>3 on ?X",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_var 1),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 0),
         template_var 1))),
    ("Scenes.scene_comp_lens_indep",
     "?X \<bowtie> ?Y ==>
      ?A ;\<^sub>S ?X \<bowtie>\<^sub>S ?A ;\<^sub>S ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Scenes.scene_comp_indep",
     "?A \<bowtie>\<^sub>S ?B ==>
      ?A ;\<^sub>S ?X \<bowtie>\<^sub>S ?B ;\<^sub>S ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Scenes.idem_scene_union",
     "[| idem_scene ?A; idem_scene ?B |]
      ==> idem_scene (?A \<squnion>\<^sub>S ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Scenes.lens_scene_override",
     "mwb_lens ?X ==>
      ?s\<^sub>1 \<oplus>\<^sub>S ?s\<^sub>2 on \<lbrakk>?X\<rbrakk>\<^sub>\<sim> =
      ?s\<^sub>1 \<triangleleft>\<^bsub>?X\<^esub> ?s\<^sub>2",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_app (template_hole 1, template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Scenes.scene_union_ub",
     "[| idem_scene ?Y; ?X \<bowtie>\<^sub>S ?Y |]
      ==> ?X \<subseteq>\<^sub>S ?X \<squnion>\<^sub>S ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Scenes.scene_equiv_region",
     "idem_scene ?X ==>
      region ?X =
      {(S\<^sub>1, S\<^sub>2).
       S\<^sub>1 \<approx>\<^sub>S S\<^sub>2 on ?X}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))))),
    ("Scenes.lens_member_get_override",
     "?x \<in>\<^sub>S ?a ==>
      get\<^bsub>?x\<^esub> (?b \<oplus>\<^sub>S ?b' on ?a) =
      get\<^bsub>?x\<^esub> ?b'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0)))),
    ("Scenes.scene_union_pres_compat",
     "[| ?A ##\<^sub>S ?B; ?A ##\<^sub>S ?C |]
      ==> ?A ##\<^sub>S ?B \<squnion>\<^sub>S ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Scenes.lens_not_member_get_override",
     "?x \<notin>\<^sub>S ?a ==>
      get\<^bsub>?x\<^esub> (?b \<oplus>\<^sub>S ?b' on ?a) =
      get\<^bsub>?x\<^esub> ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 1)))),
    ("Scenes.scene_le_then_compat",
     "[| idem_scene ?X; idem_scene ?Y; ?X \<subseteq>\<^sub>S ?Y |]
      ==> ?X ##\<^sub>S ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Scenes.lens_compat_scene",
     "[| mwb_lens ?X; mwb_lens ?Y |]
      ==> (?X ##\<^sub>L ?Y) =
          (\<lbrakk>?X\<rbrakk>\<^sub>\<sim> ##\<^sub>S
           \<lbrakk>?Y\<rbrakk>\<^sub>\<sim>)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Scenes.lens_indep_scene",
     "[| vwb_lens ?X; vwb_lens ?Y |]
      ==> (?X \<bowtie> ?Y) =
          (\<lbrakk>?X\<rbrakk>\<^sub>\<sim> \<bowtie>\<^sub>S
           \<lbrakk>?Y\<rbrakk>\<^sub>\<sim>)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Scenes.lens_equiv_scene",
     "[| vwb_lens ?X; vwb_lens ?Y |]
      ==> ?X \<approx>\<^sub>L ?Y =
          (\<lbrakk>?X\<rbrakk>\<^sub>\<sim> =
           \<lbrakk>?Y\<rbrakk>\<^sub>\<sim>)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0)
              )],
         template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Scenes.sublens_iff_subscene",
     "[| vwb_lens ?X; vwb_lens ?Y |]
      ==> ?X \<subseteq>\<^sub>L ?Y =
          \<lbrakk>?X\<rbrakk>\<^sub>\<sim> \<subseteq>\<^sub>S
          \<lbrakk>?Y\<rbrakk>\<^sub>\<sim>",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Scenes.subscene_implies_sublens'",
     "[| vwb_lens ?X; vwb_lens ?Y |]
      ==> \<lbrakk>?X\<rbrakk>\<^sub>\<sim> \<subseteq>\<^sub>S
          \<lbrakk>?Y\<rbrakk>\<^sub>\<sim> =
          ?X \<subseteq>\<^sub>L' ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Scenes.subscene_antisym",
     "[| idem_scene ?Y; ?X \<subseteq>\<^sub>S ?Y;
         ?Y \<subseteq>\<^sub>S ?X |]
      ==> ?X = ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation (template_var 0, template_var 1))),
    ("Scenes.subscene_trans",
     "[| idem_scene ?Y; ?X \<subseteq>\<^sub>S ?Y;
         ?Y \<subseteq>\<^sub>S ?Z |]
      ==> ?X \<subseteq>\<^sub>S ?Z",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Scenes.lens_scene_indep_compl",
     "[| vwb_lens ?x; vwb_lens ?y |]
      ==> (\<lbrakk>?x\<rbrakk>\<^sub>\<sim> \<bowtie>\<^sub>S
           - \<lbrakk>?y\<rbrakk>\<^sub>\<sim>) =
          ?x \<subseteq>\<^sub>L ?y",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Scenes.sublens'_implies_subscene",
     "[| vwb_lens ?X; vwb_lens ?Y; ?X \<subseteq>\<^sub>L' ?Y |]
      ==> \<lbrakk>?X\<rbrakk>\<^sub>\<sim> \<subseteq>\<^sub>S
          \<lbrakk>?Y\<rbrakk>\<^sub>\<sim>",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Scenes.scene_inter_indep",
     "[| idem_scene ?X; idem_scene ?Y; ?X \<bowtie>\<^sub>S ?Y |]
      ==> ?X \<sqinter>\<^sub>S ?Y = \<bottom>\<^sub>S",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Scenes.scene_override_union",
     "?X ##\<^sub>S ?Y ==>
      ?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 on (?X \<squnion>\<^sub>S ?Y) =
      ?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 on ?X \<oplus>\<^sub>S ?S\<^sub>2 on ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0),
                 template_var 3)),
             template_var 0),
           template_var 2)))),
    ("Scenes.lens_member_override",
     "?x \<in>\<^sub>S ?A ==>
      ?s\<^sub>1 \<oplus>\<^sub>S ?s\<^sub>2 on ?A \<triangleleft>\<^bsub>?x\<^esub>
      ?s\<^sub>3 =
      ?s\<^sub>1 \<oplus>\<^sub>S ?s\<^sub>2 \<triangleleft>\<^bsub>?x\<^esub>
                                  ?s\<^sub>3 on ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 3)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1),
               template_var 0)),
           template_var 3)))),
    ("Scenes.scene_override_commute_indep",
     "?X \<bowtie>\<^sub>S ?Y ==>
      ?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>2 on ?X \<oplus>\<^sub>S ?S\<^sub>3 on ?Y =
      ?S\<^sub>1 \<oplus>\<^sub>S ?S\<^sub>3 on ?Y \<oplus>\<^sub>S ?S\<^sub>2 on ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 4)),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 3)),
             template_var 1),
           template_var 4)))),
    ("Scenes.get_scene_override_le",
     "[| vwb_lens ?x;
         \<lbrakk>?x\<rbrakk>\<^sub>\<sim> \<subseteq>\<^sub>S ?a |]
      ==> get\<^bsub>?x\<^esub> (?s \<oplus>\<^sub>S ?s' on ?a) =
          get\<^bsub>?x\<^esub> ?s'",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 3),
          template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0)))),
    ("Scenes.get_scene_override_indep",
     "[| vwb_lens ?x;
         \<lbrakk>?x\<rbrakk>\<^sub>\<sim> \<bowtie>\<^sub>S ?a |]
      ==> get\<^bsub>?x\<^esub> (?s \<oplus>\<^sub>S ?s' on ?a) =
          get\<^bsub>?x\<^esub> ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 1)))),
    ("Scenes.state_eq_iff",
     "idem_scene ?S ==>
      (?x = ?y) = ((?x, ?y) : region ?S & (?x, ?y) : coregion ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_app (template_hole 1, template_var 2))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 2)))))),
    ("Scenes.subscene_eliminate",
     "[| idem_scene ?Y; ?X \<subseteq>\<^sub>S ?Y |]
      ==> ?s\<^sub>1 \<oplus>\<^sub>S ?s\<^sub>2 on ?X \<oplus>\<^sub>S ?s\<^sub>3 on ?Y =
          ?s\<^sub>1 \<oplus>\<^sub>S ?s\<^sub>3 on ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 4)),
        template_inequation (less_equals, template_var 3, template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 3)),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 4)))),
    ("Scenes.lens_member_put",
     "[| vwb_lens ?x; idem_scene ?a; ?x \<in>\<^sub>S ?a |]
      ==> put\<^bsub>?x\<^esub> ?s ?v \<oplus>\<^sub>S ?s on ?a = ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0)),
             template_var 1),
           template_var 2),
         template_var 1))),
    ("Scenes.lens_plus_scene",
     "[| vwb_lens ?X; vwb_lens ?Y; ?X \<bowtie> ?Y |]
      ==> \<lbrakk>?X +\<^sub>L ?Y\<rbrakk>\<^sub>\<sim> =
          \<lbrakk>?X\<rbrakk>\<^sub>\<sim> \<squnion>\<^sub>S
          \<lbrakk>?Y\<rbrakk>\<^sub>\<sim>",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Scenes.scene_indep_override",
     "(?X \<bowtie>\<^sub>S ?Y) =
      (ALL s\<^sub>1 s\<^sub>2 s\<^sub>3.
          s\<^sub>1 \<oplus>\<^sub>S s\<^sub>2 on ?X \<oplus>\<^sub>S s\<^sub>3 on ?Y =
          s\<^sub>1 \<oplus>\<^sub>S s\<^sub>3 on ?Y \<oplus>\<^sub>S s\<^sub>2 on ?X)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Scenes.scene_union_assoc",
     "[| ?X ##\<^sub>S ?Y; ?X ##\<^sub>S ?Z; ?Y ##\<^sub>S ?Z |]
      ==> ?X \<squnion>\<^sub>S (?Y \<squnion>\<^sub>S ?Z) =
          ?X \<squnion>\<^sub>S ?Y \<squnion>\<^sub>S ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Scenes.scene_compat_copy",
     "(?X ##\<^sub>S ?Y) =
      (ALL s.
          (%s'. s' \<oplus>\<^sub>S s on ?X) o
          (%s'. s' \<oplus>\<^sub>S s on ?Y) =
          (%s'. s' \<oplus>\<^sub>S s on ?Y) o
          (%s'. s' \<oplus>\<^sub>S s on ?X))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Scenes.scene_indep_copy",
     "(?X \<bowtie>\<^sub>S ?Y) =
      (ALL s\<^sub>1 s\<^sub>2.
          (%s'. s' \<oplus>\<^sub>S s\<^sub>1 on ?X) o
          (%s'. s' \<oplus>\<^sub>S s\<^sub>2 on ?Y) =
          (%s'. s' \<oplus>\<^sub>S s\<^sub>2 on ?Y) o
          (%s'. s' \<oplus>\<^sub>S s\<^sub>1 on ?X))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app (template_hole 3, t_empty)))]:
   (string * thm * template) list
### theory "Draft.ScenesMoreTemplates"
### 0.399s elapsed time, 0.572s cpu time, 0.059s GC time
val it = (): unit
