Loading theory "Draft.Interp" (required by "Draft.Lens_InstancesMoreTemplates" via "Draft.Lens_Instances" via "Draft.Lens_Order" via "Draft.Lens_Algebra" via "Draft.Lens_Laws")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Lens_InstancesMoreTemplates" via "Draft.Lens_Instances")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Lens_InstancesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Lens_InstancesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
locale interp
  fixes f :: "'a => 'b"
  assumes "interp f"
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Interp"
### 0.038s elapsed time, 0.148s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Lens_InstancesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
### theory "HOL-Library.Function_Algebras"
### 0.156s elapsed time, 0.606s cpu time, 0.035s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Lens_InstancesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
structure Eisbach_Rule_Insts: sig end
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.837s cpu time, 0.035s GC time
Loading theory "Draft.Two" (required by "Draft.Lens_InstancesMoreTemplates" via "Draft.Lens_Instances" via "Draft.Lens_Order" via "Draft.Lens_Algebra" via "Draft.Lens_Laws")
### Additional type variable(s) in locale specification "two": 'a
### theory "HOL-Library.Nat_Bijection"
### 0.330s elapsed time, 1.287s cpu time, 0.109s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Lens_InstancesMoreTemplates" via "Draft.ExtrEqs")
class two = type +
  assumes "card_two": "infinite UNIV | 2 <= card UNIV"
### theory "Draft.Two"
### 0.091s elapsed time, 0.345s cpu time, 0.073s GC time
Loading theory "Draft.Lens_Laws" (required by "Draft.Lens_InstancesMoreTemplates" via "Draft.Lens_Instances" via "Draft.Lens_Order" via "Draft.Lens_Algebra")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.483s elapsed time, 1.898s cpu time, 0.165s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Lens_InstancesMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale weak_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "weak_lens x"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale wb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "wb_lens x"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale mwb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "mwb_lens x"
consts
  cycle :: "'a list => 'a stream"
locale vwb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "vwb_lens x"
locale ief_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "ief_lens x"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
locale pbij_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "pbij_lens x"
locale bij_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "bij_lens x"
consts
  flat :: "'a list stream => 'a stream"
locale lens_indep
  fixes X :: "'a \<Longrightarrow> 'c"
    and Y :: "'b \<Longrightarrow> 'c"
  assumes "lens_indep X Y"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lens_Laws"
### 0.761s elapsed time, 3.047s cpu time, 0.249s GC time
Loading theory "Draft.Lens_Algebra" (required by "Draft.Lens_InstancesMoreTemplates" via "Draft.Lens_Instances" via "Draft.Lens_Order")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.061s elapsed time, 4.081s cpu time, 0.841s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.994s elapsed time, 3.737s cpu time, 0.785s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lens_Algebra"
### 0.436s elapsed time, 1.378s cpu time, 0.592s GC time
Loading theory "Draft.Lens_Order" (required by "Draft.Lens_InstancesMoreTemplates" via "Draft.Lens_Instances")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Lens_Order"
### 0.269s elapsed time, 0.584s cpu time, 0.090s GC time
Loading theory "Draft.Lens_Symmetric" (required by "Draft.Lens_InstancesMoreTemplates" via "Draft.Lens_Instances")
Found termination order: "size <*mlex*> {}"
locale psym_lens
  fixes S :: "<'a, 'b> \<Longleftrightarrow> 's"  (structure)
  assumes "psym_lens S"
locale sym_lens
  fixes S :: "<'a, 'b> \<Longleftrightarrow> 's"  (structure)
  assumes "sym_lens S"
### theory "Draft.Lens_Symmetric"
### 0.322s elapsed time, 0.695s cpu time, 0.113s GC time
Loading theory "Draft.Lens_Instances" (required by "Draft.Lens_InstancesMoreTemplates")
### theory "HOL-Library.Tree"
### 2.013s elapsed time, 6.514s cpu time, 1.117s GC time
Loading theory "Draft.Templates" (required by "Draft.Lens_InstancesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.126s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Lens_InstancesMoreTemplates")
val baselens_tr = fn: term list -> term
signature LENS_LIB =
  sig
    val astateT: typ
    val bij_lensN: string
    val compositionsN: string
    val id_lensN: string
    val indepsN: string
    val isLensT: typ -> bool
    val lensT: typ -> typ -> typ
    val lens_compN: string
    val lens_defsN: string
    val lens_equivN: string
    val lens_indepN: string
    val lens_plusN: string
    val lens_quotientN: string
    val mk_indep: term -> term -> term
    val mk_vwb_lens: term -> term
    val pairings: 'a list -> ('a * 'a) list
    val pairsWith: 'a list -> 'a list -> ('a * 'a) list
    val quotientsN: string
    val sublensN: string
    val sublensesN: string
    val sym_lensN: string
    val vwb_lensN: string
  end
structure Lens_Lib: LENS_LIB
signature LENS_UTILS =
  sig
    val add_alphabet:
       (string * class list) list * binding ->
         string option -> (binding * typ * mixfix) list -> theory -> theory
    val add_alphabet_cmd:
       (string * string option) list * binding ->
         string option ->
           (binding * string * mixfix) list -> theory -> theory
    val rename_alpha_vars: tactic
  end
structure Lens_Utils: LENS_UTILS
signature LENS_STATESPACE =
  sig
    val compile_statespace:
       bstring -> (bstring * typ) list -> xstring list -> theory -> theory
    val mk_statespace_elements:
       bstring ->
         (bstring * typ) list ->
           xstring list -> theory -> Element.context_i list
    val statespace_cmd:
       bstring ->
         xstring list -> (bstring * string) list -> theory -> theory
  end
structure Lens_Statespace:
  sig
    val compile_statespace:
       bstring -> (bstring * typ) list -> xstring list -> theory -> theory
    val mk_statespace_elements:
       (bstring * typ) list ->
         xstring list -> theory -> (typ, term, 'a) Element.ctxt list
    val statespace_cmd:
       bstring ->
         xstring list -> (bstring * string) list -> theory -> theory
  end
val it = (): unit
locale type_definition
  fixes Rep :: "'b => 'a"
    and Abs :: "'a => 'b"
    and A :: "'a set"
  assumes "type_definition Rep Abs A"
val lmap_tr = fn: term list -> term
locale lens_interp
  fixes f :: "'a => 'b"
  assumes "lens_interp f"
### theory "Draft.Lens_Instances"
### 0.554s elapsed time, 1.173s cpu time, 0.115s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.538s elapsed time, 1.069s cpu time, 0.115s GC time
Loading theory "Draft.Lens_InstancesMoreTemplates"
val templateLemmas =
   [("Lens_Instances.list_mwb_lens", "mwb_lens (list_lens ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Lens_Instances.map_mwb_lens", "mwb_lens (map_lens ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Lens_Instances.fun_vwb_lens", "vwb_lens (fun_lens ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Lens_Instances.nth'_0", "nth' (?x # ?xs) 0 = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_var 1)),
    ("Lens_Instances.nth'_list_augment",
     "nth' (list_augment ?xs ?k ?v) ?k = ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 1),
       template_var 0)),
    ("Lens_Instances.nth_list_augment", "list_augment ?xs ?k ?v ! ?k = ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 1),
       template_var 0)),
    ("Lens_Instances.nth'_Suc", "nth' (?x # ?xs) (Suc ?n) = nth' ?xs ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Lens_Instances.source_map_lens",
     "\<S>\<^bsub>map_lens ?x\<^esub> = {f. ?x : dom f}",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Lens_Instances.source_list_lens",
     "\<S>\<^bsub>list_lens ?i\<^esub> = {xs. ?i < length xs}",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Lens_Instances.fun_lens_indep",
     "(fun_lens ?x \<bowtie> fun_lens ?y) = (?x ~= ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Lens_Instances.list_augment_0",
     "list_augment (?x # ?xs) 0 ?y = ?y # ?xs",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_hole 0),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_var 1))),
    ("Lens_Instances.list_lens_indep",
     "?i ~= ?j ==> list_lens ?i \<bowtie> list_lens ?j",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Lens_Instances.list_augment_same_twice",
     "list_augment (list_augment ?xs ?k ?u) ?k ?v = list_augment ?xs ?k ?v",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 2),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_var 0))),
    ("Lens_Instances.fun_ran_mwb_lens",
     "[| mwb_lens ?X; mwb_lens ?Y |] ==> mwb_lens (fun_ran_lens ?X ?Y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Instances.fun_ran_vwb_lens",
     "[| vwb_lens ?X; vwb_lens ?Y |] ==> vwb_lens (fun_ran_lens ?X ?Y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Instances.fun_ran_wb_lens",
     "[| wb_lens ?X; wb_lens ?Y |] ==> wb_lens (fun_ran_lens ?X ?Y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Lens_Instances.list_augment_Suc",
     "list_augment (?x # ?xs) (Suc ?n) ?y = ?x # list_augment ?xs ?n ?y",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Lens_Instances.list_augment_idem",
     "?i < length ?xs ==> list_augment ?xs ?i (?xs ! ?i) = ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("Lens_Instances.length_list_augment_2",
     "?k < length ?xs ==> length (list_augment ?xs ?k ?v) = length ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)),
         template_app (template_hole 2, template_var 1)))),
    ("Lens_Instances.length_list_augment_1",
     "length ?xs <= ?k ==> length (list_augment ?xs ?k ?v) = Suc ?k",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Lens_Instances.list_augment_last",
     "list_augment (?xs @ [?y]) (length ?xs) ?z = ?xs @ [?z]",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1))),
           template_app (template_hole 0, template_var 2)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)))),
    ("Lens_Instances.nth'_list_augment_diff",
     "?i ~= ?j ==>
      nth' (list_augment ?\<sigma> ?i ?v) ?j = nth' ?\<sigma> ?j",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 2)))),
    ("Lens_Instances.list_augment_twice",
     "list_augment (list_augment ?xs ?i ?u) ?j ?v =
      (list_pad_out ?xs (max ?i ?j))[?i := ?u, ?j := ?v]",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 1))),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Lens_Instances.list_update_append_lemma1",
     "?i < length ?xs ==> ?xs[?i := ?v] @ ?ys = (?xs @ ?ys)[?i := ?v]",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_var 3),
           template_var 1)))),
    ("Lens_Instances.list_augment_code",
     "list_augment ?xs ?k ?v =
      (if ?k < length ?xs then ?xs[?k := ?v]
       else (list_pad_out ?xs ?k)[?k := ?v])",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 2, template_var 2))),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 1),
           template_var 0)))),
    ("Lens_Instances.list_augment_commute",
     "?i ~= ?j ==>
      list_augment (list_augment ?\<sigma> ?j ?v) ?i ?u =
      list_augment (list_augment ?\<sigma> ?i ?u) ?j ?v",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 1)),
             template_var 4),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 4),
                 template_var 0)),
             template_var 3),
           template_var 1)))),
    ("Lens_Instances.list_update_append_lemma2",
     "?i < length ?ys ==>
      ?xs @ ?ys[?i := ?v] = (?xs @ ?ys)[?i + length ?xs := ?v]",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_app (template_hole 4, template_var 1))),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Lens_InstancesMoreTemplates"
### 0.339s elapsed time, 0.467s cpu time, 0.053s GC time
val it = (): unit
