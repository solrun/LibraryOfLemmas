   [("Prisms.prism_diff_irrefl", "~ ?X \<nabla> ?X",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 0)
             )
         )),
    ("Prisms.create_prism_lens",
     "create\<^bsub>prism_lens ?X\<^esub> = build\<^bsub>?X\<^esub>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Prisms.pbij_lens_implies_wb_prism",
     "pbij_lens ?X ==> wb_prism (lens_prism ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Prisms.wb_prism_implies_pbij_lens",
     "wb_prism ?X ==> pbij_lens (prism_lens ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Prisms.get_prism_lens",
     "get\<^bsub>prism_lens ?X\<^esub> = the o match\<^bsub>?X\<^esub>",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Prisms.src_prism_lens",
     "\<S>\<^bsub>prism_lens ?X\<^esub> = range build\<^bsub>?X\<^esub>",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Prisms.prism_diff_sym", "?X \<nabla> ?Y ==> ?Y \<nabla> ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Prisms.prism_lens_inverse",
     "wb_prism ?X ==> lens_prism (prism_lens ?X) = ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Prisms.lens_prism_put_inverse",
     "pbij_lens ?X ==>
      put\<^bsub>prism_lens (lens_prism ?X)\<^esub> =
      put\<^bsub>?X\<^esub>",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app (template_hole 2, template_var 0)))),
    ("Prisms.prism_diff_build",
     "?X \<nabla> ?Y ==>
      build\<^bsub>?X\<^esub> ?u ~= build\<^bsub>?Y\<^esub> ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Prisms.prism_diff_intro",
     "(!!s\<^sub>1 s\<^sub>2.
          build\<^bsub>?X\<^esub> s\<^sub>1 =
          build\<^bsub>?Y\<^esub> s\<^sub>2 ==>
          False) ==>
      ?X \<nabla> ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           )))]
