Loading theory "Draft.Interp" (required by "Draft.Lens_LawsMoreTemplates" via "Draft.Lens_Laws")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Lens_LawsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Lens_LawsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Lens_LawsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
locale interp
  fixes f :: "'a => 'b"
  assumes "interp f"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Interp"
### 0.045s elapsed time, 0.206s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Lens_LawsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.568s cpu time, 0.042s GC time
Loading theory "Draft.Two" (required by "Draft.Lens_LawsMoreTemplates" via "Draft.Lens_Laws")
### Additional type variable(s) in locale specification "two": 'a
class two = type +
  assumes "card_two": "infinite UNIV | 2 <= card UNIV"
### theory "Draft.Two"
### 0.068s elapsed time, 0.270s cpu time, 0.000s GC time
Loading theory "Draft.Lens_Laws" (required by "Draft.Lens_LawsMoreTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.209s elapsed time, 0.852s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Lens_LawsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.342s elapsed time, 1.365s cpu time, 0.124s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Lens_LawsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
locale weak_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "weak_lens x"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale wb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "wb_lens x"
locale mwb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "mwb_lens x"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale vwb_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "vwb_lens x"
consts
  snth :: "'a stream => nat => 'a"
locale ief_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "ief_lens x"
consts
  stake :: "nat => 'a stream => 'a list"
locale pbij_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "pbij_lens x"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale bij_lens
  fixes x :: "'a \<Longrightarrow> 'b"  (structure)
  assumes "bij_lens x"
locale lens_indep
  fixes X :: "'a \<Longrightarrow> 'c"
    and Y :: "'b \<Longrightarrow> 'c"
  assumes "lens_indep X Y"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Lens_Laws"
### 0.772s elapsed time, 3.046s cpu time, 0.291s GC time
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.978s elapsed time, 3.670s cpu time, 0.812s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.050s elapsed time, 3.585s cpu time, 0.769s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.932s elapsed time, 5.398s cpu time, 0.943s GC time
Loading theory "Draft.Templates" (required by "Draft.Lens_LawsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Lens_LawsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.459s elapsed time, 0.497s cpu time, 0.043s GC time
Loading theory "Draft.Lens_LawsMoreTemplates"
val templateLemmas =
   [("Lens_Laws.lens_compat_idem", "?x ##\<^sub>L ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Lens_Laws.bij_lens_pbij", "bij_lens ?x ==> pbij_lens ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Laws.bij_lens_vwb", "bij_lens ?x ==> vwb_lens ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Laws.bij_lens_weak", "bij_lens ?x ==> weak_lens ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Laws.mwb_lens_weak", "mwb_lens ?x ==> weak_lens ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Laws.pbij_lens_mwb", "pbij_lens ?x ==> mwb_lens ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Laws.pbij_lens_weak", "pbij_lens ?x ==> weak_lens ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Laws.vwb_lens_mwb", "vwb_lens ?x ==> mwb_lens ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Laws.vwb_lens_wb", "vwb_lens ?x ==> wb_lens ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Laws.wb_lens_weak", "wb_lens ?x ==> weak_lens ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Laws.bij_lens_iff_pbij_vwb",
     "bij_lens ?X = (pbij_lens ?X & vwb_lens ?X)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Lens_Laws.lens_compat_sym", "?x ##\<^sub>L ?y ==> ?y ##\<^sub>L ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Lens_Laws.lens_indep_compat", "?x \<bowtie> ?y ==> ?x ##\<^sub>L ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Lens_Laws.lens_indep_sym", "?x \<bowtie> ?y ==> ?y \<bowtie> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Lens_Laws.vwb_lens_iff_mwb_UNIV_src",
     "vwb_lens ?X = (mwb_lens ?X & \<S>\<^bsub>?X\<^esub> = UNIV)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0))
           ))),
    ("Lens_Laws.pbij_vwb_is_bij_lens",
     "[| pbij_lens ?X; vwb_lens ?X |] ==> bij_lens ?X",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Laws.mwb_UNIV_src_is_vwb_lens",
     "[| mwb_lens ?X; \<S>\<^bsub>?X\<^esub> = UNIV |] ==> vwb_lens ?X",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_equation
         (template_app (template_hole 2, template_var 0), template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Laws.lens_indep_get",
     "?x \<bowtie> ?y ==>
      get\<^bsub>?x\<^esub> (put\<^bsub>?y\<^esub> ?\<sigma> ?v) =
      get\<^bsub>?x\<^esub> ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 1)))),
    ("Lens_Laws.lens_indep_comm",
     "?x \<bowtie> ?y ==>
      put\<^bsub>?x\<^esub> (put\<^bsub>?y\<^esub> ?\<sigma> ?v) ?u =
      put\<^bsub>?y\<^esub> (put\<^bsub>?x\<^esub> ?\<sigma> ?u) ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Lens_Laws.pbij_alt_intro",
     "[| weak_lens ?X;
         !!s. s : \<S>\<^bsub>?X\<^esub> ==>
              create\<^bsub>?X\<^esub> (get\<^bsub>?X\<^esub> s) = s |]
      ==> pbij_lens ?X",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Lens_Laws.lens_indep_vwb_iff",
     "[| vwb_lens ?x; vwb_lens ?y |]
      ==> (?x \<bowtie> ?y) =
          (ALL u v \<sigma>.
              put\<^bsub>?x\<^esub> (put\<^bsub>?y\<^esub> \<sigma> v) u =
              put\<^bsub>?y\<^esub> (put\<^bsub>?x\<^esub> \<sigma> u) v)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app (template_hole 5, t_empty)))),
    ("Lens_Laws.lens_indepI",
     "[| !!u v \<sigma>.
            put\<^bsub>?x\<^esub> (put\<^bsub>?y\<^esub> \<sigma> v) u =
            put\<^bsub>?y\<^esub> (put\<^bsub>?x\<^esub> \<sigma> u) v;
         !!v \<sigma>.
            get\<^bsub>?x\<^esub> (put\<^bsub>?y\<^esub> \<sigma> v) =
            get\<^bsub>?x\<^esub> \<sigma>;
         !!u \<sigma>.
            get\<^bsub>?y\<^esub> (put\<^bsub>?x\<^esub> \<sigma> u) =
            get\<^bsub>?y\<^esub> \<sigma> |]
      ==> ?x \<bowtie> ?y",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Lens_LawsMoreTemplates"
### 0.324s elapsed time, 0.464s cpu time, 0.059s GC time
val it = (): unit
