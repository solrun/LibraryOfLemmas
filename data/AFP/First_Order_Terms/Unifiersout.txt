Loading theory "Draft.Term" (required by "Draft.UnifiersMoreTemplates" via "Draft.Unifiers")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.UnifiersMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.UnifiersMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.UnifiersMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.566s cpu time, 0.047s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.UnifiersMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.861s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.UnifiersMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.344s elapsed time, 1.374s cpu time, 0.134s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.UnifiersMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
### Partially applied constant "Term.term.Var" on left hand side of equation, in theorem:
### monoid_mult.prod_list Var (\<circ>\<^sub>s) ?xs ==
### foldr (\<circ>\<^sub>s) ?xs Var
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Term"
### 1.208s elapsed time, 4.617s cpu time, 0.922s GC time
Loading theory "Draft.Unifiers" (required by "Draft.UnifiersMoreTemplates")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.988s elapsed time, 3.723s cpu time, 0.875s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Unifiers"
### 0.179s elapsed time, 0.555s cpu time, 0.000s GC time
### theory "HOL-Library.Stream"
### 1.074s elapsed time, 3.886s cpu time, 0.855s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.872s elapsed time, 5.345s cpu time, 0.990s GC time
Loading theory "Draft.Templates" (required by "Draft.UnifiersMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.066s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.UnifiersMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.445s elapsed time, 0.487s cpu time, 0.049s GC time
Loading theory "Draft.UnifiersMoreTemplates"
val templateLemmas =
   [("Unifiers.is_imgu_imp_is_mgu",
     "is_imgu ?\<sigma> ?E ==> is_mgu ?\<sigma> ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Unifiers.subst_set_reflects_unifiable",
     "unifiable (subst_set ?\<sigma> ?E) ==> unifiable ?E",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Unifiers.unifiers_insert_ident",
     "unifiers (insert (?t, ?t) ?E) = unifiers ?E",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Unifiers.unifiers_Un",
     "unifiers (?s Un ?t) = unifiers ?s Int unifiers ?t",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Unifiers.is_mgu_insert_trivial",
     "is_mgu ?\<sigma> (insert (?t, ?t) ?E) = is_mgu ?\<sigma> ?E",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2), template_var 0))),
    ("Unifiers.unifiers_insert_swap",
     "unifiers (insert (?s, ?t) ?E) = unifiers (insert (?t, ?s) ?E)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Unifiers.unifiers_subst_set",
     "(?\<tau> : unifiers (subst_set ?\<sigma> ?E)) =
      (?\<sigma> \<circ>\<^sub>s ?\<tau> : unifiers ?E)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_app (template_hole 2, template_var 0)))),
    ("Unifiers.unifiable_insert_swap",
     "unifiable (insert (?s, ?t) ?E) = unifiable (insert (?t, ?s) ?E)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Unifiers.unifiers_insert_Var_swap",
     "unifiers (insert (?t, Var ?x) ?E) =
      unifiers (insert (Var ?x, ?t) ?E)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1))),
           template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 2)),
           template_var 0)))),
    ("Unifiers.is_mgu_insert_swap",
     "is_mgu ?\<sigma> (insert (?s, ?t) ?E) =
      is_mgu ?\<sigma> (insert (?t, ?s) ?E)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Unifiers.is_mgu_insert_Var_swap",
     "is_mgu ?\<sigma> (insert (?t, Var ?x) ?E) =
      is_mgu ?\<sigma> (insert (Var ?x, ?t) ?E)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1))),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 2)),
           template_var 0)))),
    ("Unifiers.unifiers_insert_VarD",
     "?\<sigma> : unifiers (insert (?t, Var ?x) ?E) ==>
      subst ?x ?t \<circ>\<^sub>s ?\<sigma> = ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_app (template_hole 3, template_var 1))),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 3),
         template_var 3))),
    ("Unifiers.unifiers_insert_VarD",
     "?\<sigma> : unifiers (insert (Var ?x, ?t) ?E) ==>
      subst ?x ?t \<circ>\<^sub>s ?\<sigma> = ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_var 2)),
                      template_var 1)),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 3),
         template_var 3))),
    ("Unifiers.unifiers_insert",
     "unifiers (insert ?p ?t) =
      {\<sigma>. fst ?p \<cdot> \<sigma> = snd ?p \<cdot> \<sigma>} Int
      unifiers ?t",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app (template_hole 7, template_var 0)))),
    ("Unifiers.unifiers_insert_Var_left",
     "?\<sigma> : unifiers (insert (Var ?x, ?t) ?E) ==>
      ?\<sigma> : unifiers (subst_set (subst ?x ?t) ?E)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app (template_hole 2, template_var 2)),
                      template_var 1)),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 3),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_var 0)))
           ))),
    ("Unifiers.in_vars_is_Fun_not_unifiable",
     "[| ?x : vars_term ?t; is_Fun ?t |] ==> ~ unifiable {(Var ?x, ?t)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_var 1)),
                       template_var 0)),
                   template_hole 0))
               )
           ))),
    ("Unifiers.unifiers_occur_left_is_Fun",
     "[| ?x : vars_term ?t; is_Fun ?t |]
      ==> unifiers (insert (Var ?x, ?t) ?E) = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_var 1)),
             template_var 0)),
         template_hole 0))),
    ("Unifiers.unifiers_occur_left_Fun",
     "?x : \<Union> (vars_term ` set ?ts) ==>
      unifiers (insert (Var ?x, Fun ?f ?ts) ?E) = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, t_empty),
                  template_app (template_hole 7, template_var 2))))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 3)),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2))),
             template_var 0)),
         template_hole 0))),
    ("Unifiers.unifiers_occur_left_not_Var",
     "[| ?x : vars_term ?t; ?t ~= Var ?x |]
      ==> unifiers (insert (Var ?x, ?t) ?E) = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 5, template_var 2)),
                 template_var 1)),
             template_var 0)),
         template_hole 0))),
    ("Unifiers.map_eq_set_zipD",
     "[| map ?f ?xs = map ?f ?ys; (?x, ?y) : set (zip ?xs ?ys) |]
      ==> ?f ?x = ?f ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 5, template_var 4),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)))
            )],
       template_equation
        (template_app (template_var 4, template_var 1),
         template_app (template_var 4, template_var 0)))),
    ("Unifiers.is_mgu_insert_decomp",
     "length ?ss = length ?ts ==>
      is_mgu ?\<sigma> (insert (Fun ?f ?ss, Fun ?f ?ts) ?E) =
      is_mgu ?\<sigma> (?E Un set (zip ?ss ?ts))",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 4),
          template_app (template_hole 8, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 2),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 3))),
             template_var 0)),
         template_app
          (template_app (template_hole 6, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3))))))),
    ("Unifiers.unifiers_set_zip",
     "length ?ss = length ?ts ==>
      unifiers (set (zip ?ss ?ts)) =
      {\<sigma>.
       map (%t. t \<cdot> \<sigma>) ?ss =
       map (%t. t \<cdot> \<sigma>) ?ts}",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_app (template_hole 3, t_empty)))),
    ("Unifiers.in_unifiersE",
     "[| ?\<sigma> : unifiers ?E;
         (!!e. e : ?E ==>
               fst e \<cdot> ?\<sigma> = snd e \<cdot> ?\<sigma>) ==>
         ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_implication
         ([template_predicate (template_app (template_hole 5, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Unifiers.is_mgu_subst_set_subst",
     "[| ?x ~: vars_term ?t;
         is_mgu ?\<sigma> (subst_set (subst ?x ?t) ?E) |]
      ==> is_mgu (subst ?x ?t \<circ>\<^sub>s ?\<sigma>)
           (insert (Var ?x, ?t) ?E)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_app (template_hole 7, template_var 2))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 2)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 3)),
                   template_var 2)),
               template_var 0))
           ))),
    ("Unifiers.unifiers_Fun",
     "(?\<sigma> : unifiers {(Fun ?f ?ss, Fun ?g ?ts)}) =
      (length ?ss = length ?ts &
       ?f = ?g & ?\<sigma> : unifiers (set (zip ?ss ?ts)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 7, template_var 3),
                          template_var 2)),
                      template_app
                       (template_app (template_hole 7, template_var 1),
                        template_var 0))),
                  template_hole 6)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 2)),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 11, template_var 4),
                 template_app
                  (template_hole 10,
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 0))))))
           )))]:
   (string * thm * template) list
### theory "Draft.UnifiersMoreTemplates"
### 0.318s elapsed time, 0.449s cpu time, 0.066s GC time
val it = (): unit
