   [("Option_Monad.guard_simps", "(guard ?b = None) = (~ ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Option_Monad.guard_simps", "(guard ?b = Some ?x) = ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_var 1)),
    ("Option_Monad.guard_intros", "?b ==> guard ?b = Some ()",
     template_implication
      ([template_predicate (template_var 0)],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Option_Monad.guard_intros", "~ ?b ==> guard ?b = None",
     template_implication
      ([template_negation (template_predicate (template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Option_Monad.guard_and_to_bind",
     "guard (?a & ?b) = guard ?a >>= (%_. guard ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         t_empty))),
    ("Option_Monad.zip_option_None",
     "(zip_option ?xs ?ys = None) = (length ?xs ~= length ?ys)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Option_Monad.zip_option_simps",
     "zip_option ?xs ?ys = None ==> length ?xs ~= length ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_hole 4)],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Option_Monad.zip_option_intros",
     "length ?xs ~= length ?ys ==> zip_option ?xs ?ys = None",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Option_Monad.zip_option_simps",
     "zip_option ?xs ?ys = Some ?zs ==> ?zs = zip ?xs ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Option_Monad.mapM_None",
     "(mapM ?f ?xs = None) = (EX x:set ?xs. ?f x = None)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_hole 4),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         t_empty))),
    ("Option_Monad.guard_elims",
     "[| guard ?b = None; ~ ?b ==> ?P |] ==> ?P",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1), template_hole 1),
        template_implication
         ([template_negation (template_predicate (template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Option_Monad.guard_elims",
     "[| guard ?b = Some ?x; ?b ==> ?P |] ==> ?P",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 0, template_var 1)),
        template_implication
         ([template_predicate (template_var 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Option_Monad.zip_option_simps",
     "[| zip_option ?xs ?ys = None; length ?xs = length ?ys |] ==> False",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_hole 4),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate (template_hole 0))),
    ("Option_Monad.zip_option_elims",
     "[| zip_option ?xs ?ys = None; length ?xs ~= length ?ys ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4),
        template_implication
         ([template_negation
            (
               template_equation
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Option_Monad.mapM_map",
     "mapM ?f ?xs =
      (if ALL x:set ?xs. ?f x ~= None then Some (map (%x. the (?f x)) ?xs)
       else None)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 0)),
               t_empty)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 0))),
         template_hole 0))),
    ("Option_Monad.zip_option_zip_conv",
     "(zip_option ?xs ?ys = Some ?zs) =
      (length ?ys = length ?xs &
       length ?zs = length ?xs & ?zs = zip ?xs ?ys)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_app (template_hole 7, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 1)),
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 3, template_var 2))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))))
           ))),
    ("Option_Monad.guard_cong",
     "[| ?b = ?c; ?c ==> ?m = ?n |]
      ==> guard ?b >>= (%_. ?m) = guard ?c >>= (%_. ?n)",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_implication
         ([template_predicate (template_var 2)],
          template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           t_empty)))),
    ("Option_Monad.mapM_mono",
     "(!!y. monotone option.le_fun option_ord (?C y)) ==>
      monotone option.le_fun option_ord (%f. mapM (%y. ?C y f) ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_app (template_hole 2, template_hole 1)),
             t_empty)
           ))),
    ("Option_Monad.mapM_Some",
     "mapM ?f ?xs = Some ?ys ==>
      ?ys = map (%x. the (?f x)) ?xs & (ALL x:set ?xs. ?f x ~= None)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 2),
            template_var 1),
          template_app (template_hole 9, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app
                  (template_app (template_hole 6, t_empty),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               t_empty))
           ))),
    ("Option_Monad.mapM_cong",
     "[| ?xs = ?ys; !!x. x : set ?ys ==> ?f x = ?g x |]
      ==> mapM ?f ?xs = mapM ?g ?ys",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Option_Monad.zip_option_intros",
     "[| length ?ys = length ?xs; length ?zs = length ?xs;
         ?zs = zip ?xs ?ys |]
      ==> zip_option ?xs ?ys = Some ?zs",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app (template_hole 5, template_var 0),
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Option_Monad.mapM_Some_idx",
     "[| mapM ?f ?xs = Some ?ys; ?i < length ?xs |]
      ==> EX y. ?f (?xs ! ?i) = Some y & ?ys ! ?i = y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 3),
            template_var 2),
          template_app (template_hole 9, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 7, template_var 2))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Option_Monad.zip_option_elims",
     "[| zip_option ?xs ?ys = Some ?zs;
         [| length ?ys = length ?xs; length ?zs = length ?xs;
            ?zs = zip ?xs ?ys |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 3), template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_implication
         ([template_equation
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 3, template_var 3))],
          template_implication
           ([template_equation
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 3, template_var 3))],
            template_implication
             ([template_equation
                (template_var 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Option_Monad.zip_induct",
     "[| !!x xs y ys. ?P xs ys ==> ?P (x # xs) (y # ys); !!ys. ?P [] ys;
         !!xs. ?P xs [] |]
      ==> ?P ?xs ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           )))]
