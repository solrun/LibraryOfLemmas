   [("Fun_More.finite_card_eq_imp_bij_betw",
     "[| finite ?A; card (?f ` ?A) = card ?A |]
      ==> bij_betw ?f ?A (?f ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)),
          template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1))
           ))),
    ("Fun_More.fun_merge",
     "ALL i<length ?Xs.
         ALL j<length ?Xs. i ~= j --> ?Xs ! i Int ?Xs ! j = {} ==>
      EX \<sigma>.
         ALL i<length ?Xs. ALL x:?Xs ! i. \<sigma> x = ?\<tau> i x",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Fun_More.fun_merge_part",
     "[| ALL i<length ?as.
            ALL j<length ?as. i ~= j --> ?as ! i Int ?as ! j = {};
         ?i < length ?as; ?a : ?as ! ?i |]
      ==> fun_merge ?fs ?as ?a = (?fs ! ?i) ?a",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 10, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1)))),
    ("Fun_More.bij_betw_extend",
     "[| bij_betw ?f ?A ?B; ?A <= ?V; ?B <= ?V; finite ?A |]
      ==> EX g. finite {x. g x ~= x} &
                (ALL x:UNIV - (?A Un ?B). g x = x) &
                (ALL x:?A. g x = ?f x) & bij_betw g ?V ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (template_app (template_hole 9, template_var 2))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Fun_More.fun_merge_eq_nth",
     "[| ?i < length ?as; ?a : ?as ! ?i;
         !!i j a.
            [| i < length ?as; j < length ?as; a : ?as ! i; a : ?as ! j |]
            ==> (?fs ! i) a = (?fs ! j) a |]
      ==> fun_merge ?fs ?as ?a = (?fs ! ?i) ?a",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 3))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 3),
           template_var 1))))]
