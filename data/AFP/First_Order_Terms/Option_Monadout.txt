Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Option_MonadMoreTemplates" via "Draft.Option_Monad" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Option_MonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Option_MonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Option_MonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Adhoc_Overloading"
### 0.125s elapsed time, 0.507s cpu time, 0.044s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Option_MonadMoreTemplates" via "Draft.Option_Monad")
### theory "HOL-Library.Function_Algebras"
### 0.142s elapsed time, 0.578s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Option_MonadMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Monad_Syntax"
### 0.047s elapsed time, 0.190s cpu time, 0.000s GC time
Loading theory "Draft.Option_Monad" (required by "Draft.Option_MonadMoreTemplates")
### theory "HOL-Library.Set_Algebras"
### 0.236s elapsed time, 0.948s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Option_MonadMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.369s elapsed time, 1.464s cpu time, 0.129s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Option_MonadMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Option_Monad"
### 0.291s elapsed time, 1.148s cpu time, 0.085s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.767s elapsed time, 2.541s cpu time, 0.298s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.981s elapsed time, 2.915s cpu time, 0.718s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.847s elapsed time, 4.519s cpu time, 0.880s GC time
Loading theory "Draft.Templates" (required by "Draft.Option_MonadMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Option_MonadMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.451s elapsed time, 0.500s cpu time, 0.060s GC time
Loading theory "Draft.Option_MonadMoreTemplates"
val templateLemmas =
   [("Option_Monad.guard_simps", "(guard ?b = None) = (~ ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Option_Monad.guard_simps", "(guard ?b = Some ?x) = ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_var 1)),
    ("Option_Monad.guard_intros", "?b ==> guard ?b = Some ()",
     template_implication
      ([template_predicate (template_var 0)],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Option_Monad.guard_intros", "~ ?b ==> guard ?b = None",
     template_implication
      ([template_negation (template_predicate (template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Option_Monad.guard_and_to_bind",
     "guard (?a & ?b) = guard ?a >>= (%_. guard ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         t_empty))),
    ("Option_Monad.zip_option_None",
     "(zip_option ?xs ?ys = None) = (length ?xs ~= length ?ys)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Option_Monad.zip_option_simps",
     "zip_option ?xs ?ys = None ==> length ?xs ~= length ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_hole 4)],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Option_Monad.zip_option_intros",
     "length ?xs ~= length ?ys ==> zip_option ?xs ?ys = None",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Option_Monad.zip_option_simps",
     "zip_option ?xs ?ys = Some ?zs ==> ?zs = zip ?xs ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Option_Monad.mapM_None",
     "(mapM ?f ?xs = None) = (EX x:set ?xs. ?f x = None)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_hole 4),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         t_empty))),
    ("Option_Monad.guard_elims",
     "[| guard ?b = None; ~ ?b ==> ?P |] ==> ?P",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1), template_hole 1),
        template_implication
         ([template_negation (template_predicate (template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Option_Monad.guard_elims",
     "[| guard ?b = Some ?x; ?b ==> ?P |] ==> ?P",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 0, template_var 1)),
        template_implication
         ([template_predicate (template_var 2)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Option_Monad.zip_option_simps",
     "[| zip_option ?xs ?ys = None; length ?xs = length ?ys |] ==> False",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_hole 4),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate (template_hole 0))),
    ("Option_Monad.zip_option_elims",
     "[| zip_option ?xs ?ys = None; length ?xs ~= length ?ys ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4),
        template_implication
         ([template_negation
            (
               template_equation
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Option_Monad.mapM_map",
     "mapM ?f ?xs =
      (if ALL x:set ?xs. ?f x ~= None then Some (map (%x. the (?f x)) ?xs)
       else None)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 0)),
               t_empty)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 0))),
         template_hole 0))),
    ("Option_Monad.zip_option_zip_conv",
     "(zip_option ?xs ?ys = Some ?zs) =
      (length ?ys = length ?xs &
       length ?zs = length ?xs & ?zs = zip ?xs ?ys)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_app (template_hole 7, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 1)),
                 template_app (template_hole 3, template_var 2))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 3, template_var 2))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))))
           ))),
    ("Option_Monad.guard_cong",
     "[| ?b = ?c; ?c ==> ?m = ?n |]
      ==> guard ?b >>= (%_. ?m) = guard ?c >>= (%_. ?n)",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_implication
         ([template_predicate (template_var 2)],
          template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           t_empty)))),
    ("Option_Monad.mapM_mono",
     "(!!y. monotone option.le_fun option_ord (?C y)) ==>
      monotone option.le_fun option_ord (%f. mapM (%y. ?C y f) ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_app (template_hole 2, template_hole 1)),
             t_empty)
           ))),
    ("Option_Monad.mapM_Some",
     "mapM ?f ?xs = Some ?ys ==>
      ?ys = map (%x. the (?f x)) ?xs & (ALL x:set ?xs. ?f x ~= None)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 2),
            template_var 1),
          template_app (template_hole 9, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app
                  (template_app (template_hole 6, t_empty),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               t_empty))
           ))),
    ("Option_Monad.mapM_cong",
     "[| ?xs = ?ys; !!x. x : set ?ys ==> ?f x = ?g x |]
      ==> mapM ?f ?xs = mapM ?g ?ys",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Option_Monad.zip_option_intros",
     "[| length ?ys = length ?xs; length ?zs = length ?xs;
         ?zs = zip ?xs ?ys |]
      ==> zip_option ?xs ?ys = Some ?zs",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app (template_hole 5, template_var 0),
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Option_Monad.mapM_Some_idx",
     "[| mapM ?f ?xs = Some ?ys; ?i < length ?xs |]
      ==> EX y. ?f (?xs ! ?i) = Some y & ?ys ! ?i = y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 3),
            template_var 2),
          template_app (template_hole 9, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 7, template_var 2))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Option_Monad.zip_option_elims",
     "[| zip_option ?xs ?ys = Some ?zs;
         [| length ?ys = length ?xs; length ?zs = length ?xs;
            ?zs = zip ?xs ?ys |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 3), template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_implication
         ([template_equation
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 3, template_var 3))],
          template_implication
           ([template_equation
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 3, template_var 3))],
            template_implication
             ([template_equation
                (template_var 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Option_Monad.zip_induct",
     "[| !!x xs y ys. ?P xs ys ==> ?P (x # xs) (y # ys); !!ys. ?P [] ys;
         !!xs. ?P xs [] |]
      ==> ?P ?xs ?ys",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Option_MonadMoreTemplates"
### 0.292s elapsed time, 0.382s cpu time, 0.000s GC time
val it = (): unit
