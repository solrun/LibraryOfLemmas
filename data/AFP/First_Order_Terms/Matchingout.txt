Loading theory "Draft.Term" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Abstract_Matching" via "Draft.Term_Pair_Multiset")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Unification" via "Draft.Option_Monad" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Cancellation" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Abstract_Matching" via "Draft.Term_Pair_Multiset" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MatchingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.102s elapsed time, 0.431s cpu time, 0.000s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Unification" via "Draft.Option_Monad")
### theory "HOL-Library.Function_Algebras"
### 0.111s elapsed time, 0.470s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Abstract_Matching" via "Abstract-Rewriting.Abstract_Rewriting")
### theory "HOL-Library.Monad_Syntax"
### 0.031s elapsed time, 0.124s cpu time, 0.000s GC time
Loading theory "Draft.Option_Monad" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Unification")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.266s elapsed time, 1.048s cpu time, 0.123s GC time
Loading theory "Abstract-Rewriting.Seq" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Abstract_Matching" via "Abstract-Rewriting.Abstract_Rewriting")
### theory "Draft.Option_Monad"
### 0.265s elapsed time, 1.046s cpu time, 0.123s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MatchingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.425s elapsed time, 1.701s cpu time, 0.123s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Abstract_Matching" via "Draft.Term_Pair_Multiset")
locale infinitely_many
  fixes p :: "nat => bool"
  assumes "infinitely_many p"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Abstract-Rewriting.Seq"
### 0.454s elapsed time, 1.677s cpu time, 0.473s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MatchingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.443s elapsed time, 1.634s cpu time, 0.473s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MatchingMoreTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Partially applied constant "Term.term.Var" on left hand side of equation, in theorem:
### monoid_mult.prod_list Var (\<circ>\<^sub>s) ?xs ==
### foldr (\<circ>\<^sub>s) ?xs Var
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "{}"
### theory "HOL-Library.Set_Algebras"
### 0.197s elapsed time, 0.774s cpu time, 0.082s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.MatchingMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size <*mlex*> {}"
### theory "Draft.Term"
### 1.109s elapsed time, 4.279s cpu time, 0.751s GC time
Loading theory "Draft.Unifiers" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Unification" via "Draft.Abstract_Unification")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "Draft.Unifiers"
### 0.175s elapsed time, 0.699s cpu time, 0.066s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Abstract_Matching" via "Abstract-Rewriting.Abstract_Rewriting" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "{}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
### theory "HOL-Library.Stream"
### 1.137s elapsed time, 4.280s cpu time, 1.072s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MatchingMoreTemplates" via "Draft.ExtrEqs")
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### theory "HOL-Library.While_Combinator"
### 0.728s elapsed time, 2.657s cpu time, 0.949s GC time
Loading theory "Regular-Sets.Regular_Set" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Abstract_Matching" via "Abstract-Rewriting.Abstract_Rewriting" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking" via "Regular-Sets.NDerivative" via "Regular-Sets.Regular_Exp")
Found termination order: "size <*mlex*> {}"
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
consts
  lang_pow :: "nat => 'a list set => 'a list set"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
### theory "Regular-Sets.Regular_Set"
### 0.263s elapsed time, 1.041s cpu time, 0.092s GC time
Loading theory "Regular-Sets.Regular_Exp" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Abstract_Matching" via "Abstract-Rewriting.Abstract_Rewriting" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking" via "Regular-Sets.NDerivative")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.153s elapsed time, 4.364s cpu time, 1.276s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.571s elapsed time, 9.378s cpu time, 2.561s GC time
Loading theory "Draft.Templates" (required by "Draft.MatchingMoreTemplates" via "Draft.ExtrEqs")
consts
  lang :: "'a rexp => 'a list set"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.197s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MatchingMoreTemplates")
consts
  nullable :: "'a rexp => bool"
consts
  rexp_empty :: "'a rexp => bool"
instantiation
  rexp :: (order) order
  less_eq_rexp == less_eq :: 'a rexp => 'a rexp => bool
  less_rexp == less :: 'a rexp => 'a rexp => bool
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.672s elapsed time, 2.271s cpu time, 0.330s GC time
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 4.001s elapsed time, 14.127s cpu time, 3.078s GC time
Loading theory "Draft.Term_Pair_Multiset" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Abstract_Matching")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  rexp :: (linorder) linorder
### theory "Regular-Sets.Regular_Exp"
### 2.551s elapsed time, 8.246s cpu time, 1.798s GC time
Loading theory "Regular-Sets.NDerivative" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Abstract_Matching" via "Abstract-Rewriting.Abstract_Rewriting" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking")
Loading theory "Regular-Sets.Relation_Interpretation" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Abstract_Matching" via "Abstract-Rewriting.Abstract_Rewriting" via "Regular-Sets.Regexp_Method")
consts
  rel :: "('a => ('b * 'b) set) => 'a rexp => ('b * 'b) set"
### theory "Draft.Term_Pair_Multiset"
### 0.325s elapsed time, 0.844s cpu time, 0.176s GC time
consts
  word_rel :: "('a => ('b * 'b) set) => 'a list => ('b * 'b) set"
### theory "Regular-Sets.Relation_Interpretation"
### 0.085s elapsed time, 0.268s cpu time, 0.088s GC time
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  norm :: "'a rexp => 'a rexp"
consts
  nderiv :: "'a => 'a rexp => 'a rexp"
### theory "Regular-Sets.NDerivative"
### 1.891s elapsed time, 2.894s cpu time, 0.312s GC time
Loading theory "Regular-Sets.Equivalence_Checking" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Abstract_Matching" via "Abstract-Rewriting.Abstract_Rewriting" via "Regular-Sets.Regexp_Method")
Proofs for coinductive predicate(s) "bisimilar"
  Proving monotonicity ...
consts
  add_atoms :: "'a rexp => 'a list => 'a list"
### theory "Regular-Sets.Equivalence_Checking"
### 0.183s elapsed time, 0.188s cpu time, 0.000s GC time
Loading theory "Regular-Sets.Regexp_Method" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Abstract_Matching" via "Abstract-Rewriting.Abstract_Rewriting")
consts
  rel_of_regexp :: "('a * 'a) set list => nat rexp => ('a * 'a) set"
consts
  rel_eq :: "nat rexp * nat rexp => ('a * 'a) set list => bool"
val regexp_conv = fn: Proof.context -> conv
### theory "Regular-Sets.Regexp_Method"
### 0.463s elapsed time, 0.508s cpu time, 0.062s GC time
Loading theory "Abstract-Rewriting.Abstract_Rewriting" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Abstract_Matching")
Found termination order: "{}"
Proofs for inductive predicate(s) "SN_partp"
  Proving monotonicity ...
### theory "Abstract-Rewriting.Abstract_Rewriting"
### 0.891s elapsed time, 1.064s cpu time, 0.233s GC time
Loading theory "Draft.Abstract_Matching" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching")
Loading theory "Draft.Abstract_Unification" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching" via "Draft.Unification")
Proofs for inductive predicate(s) "MATCH1"
  Proving monotonicity ...
Proofs for inductive predicate(s) "UNIF1"
  Proving monotonicity ...
Proofs for inductive predicate(s) "UNIF"
### theory "Draft.Abstract_Matching"
### 0.887s elapsed time, 2.536s cpu time, 1.714s GC time
  Proving monotonicity ...
### theory "Draft.Abstract_Unification"
### 0.989s elapsed time, 2.641s cpu time, 1.714s GC time
Loading theory "Draft.Unification" (required by "Draft.MatchingMoreTemplates" via "Draft.Matching")
Found termination order: "{}"
### theory "Draft.Unification"
### 0.544s elapsed time, 0.622s cpu time, 0.106s GC time
Loading theory "Draft.Matching" (required by "Draft.MatchingMoreTemplates")
### theory "Draft.Matching"
### 0.317s elapsed time, 0.317s cpu time, 0.000s GC time
Loading theory "Draft.MatchingMoreTemplates"
val templateLemmas =
   [("Abstract_Matching.matchers_map_not_empty",
     "{} ~= matchers_map ?\<sigma>",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Abstract_Matching.matchers_map_not_empty",
     "matchers_map ?\<sigma> ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Abstract_Matching.subst_of_map_in_matchers_map",
     "subst_of_map ?d ?m : matchers_map ?m",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Abstract_Matching.MATCH1_matchrel_conv",
     "MATCH1 ?x ?y = ((?x, ?y) : matchrel)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Abstract_Matching.matchers_Un",
     "matchers (?P Un ?P') = matchers ?P Int matchers ?P'",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Abstract_Matching.MATCH1_matchless",
     "MATCH1 ?x ?y ==> (?y, ?x) : matchless",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_hole 0)
           ))),
    ("Matching.matches_iff",
     "matches ?t ?p = (EX \<sigma>. ?p \<cdot> \<sigma> = ?t)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Matching.match_list_None_conv",
     "(match_list ?d ?P = None) = (matchers (set ?P) = {})",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Abstract_Matching.MATCH1_size_mset",
     "MATCH1 ?x ?y ==> size_mset (fst ?y) < size_mset (fst ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("Matching.match_list_complete",
     "match_list ?d ?P = None ==> matchers (set ?P) = {}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_hole 4)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Abstract_Matching.matchrel_imp_converse_matchless",
     "(?x, ?y) : matchrel ==> (?y, ?x) : matchless",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_hole 0)
           ))),
    ("Matching.match_matches",
     "match ?t ?p = Some ?\<sigma> ==> ?p \<cdot> ?\<sigma> = ?t",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("Matching.match_list_sound",
     "match_list ?d ?P = Some ?\<sigma> ==> ?\<sigma> : matchers (set ?P)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Matching.match_complete",
     "match ?t ?p = None ==> matchers {(?p, ?t)} = {}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 1), template_var 0),
          template_hole 6)],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_hole 1)),
         template_hole 0))),
    ("Matching.match_term_list_None",
     "match_term_list ?P ?\<sigma> = None ==>
      matchers_map ?\<sigma> Int matchers (set ?P) = {}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 1), template_var 0),
          template_hole 6)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_hole 0))),
    ("Matching.match_sound",
     "match ?t ?p = Some ?\<sigma> ==> ?\<sigma> : matchers {(?p, ?t)}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 2)),
                 template_hole 0)))
           ))),
    ("Abstract_Matching.matchers_insert",
     "matchers (insert ?e ?P) =
      {\<sigma>. fst ?e \<cdot> \<sigma> = snd ?e} Int matchers ?P",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app (template_hole 7, template_var 0)))),
    ("Abstract_Matching.singleton_eq_union_iff",
     "({#?x#} = ?M + {#?y#}) = (?M = {#} & ?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 3)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Matching.match_term_list_Some_matchrel",
     "match_term_list ?P ?\<sigma> = Some ?\<tau> ==>
      ((mset ?P, ?\<sigma>), {#}, ?\<tau>) : matchrel^*",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 2), template_var 1),
          template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 2)),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_hole 2),
                   template_var 0))),
             template_app (template_hole 1, template_hole 0))
           ))),
    ("Abstract_Matching.MATCH1_mono",
     "MATCH1 (?P, ?\<sigma>) (?P', ?\<sigma>') ==>
      MATCH1 (?P + ?M, ?\<sigma>) (?P' + ?M, ?\<sigma>')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 0)),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 1))
           ))),
    ("Abstract_Matching.matchrel_sound",
     "((?P, Map.empty), {#}, ?\<sigma>) : matchrel^* ==>
      subst_of_map ?d ?\<sigma> : matchers (set_mset ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 2),
                      t_empty)),
                  template_app
                   (template_app (template_hole 8, template_hole 6),
                    template_var 1))),
              template_app (template_hole 5, template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Matching.match_list_matches",
     "[| match_list ?d ?P = Some ?\<sigma>; (?p, ?t) : set ?P |]
      ==> ?p \<cdot> ?\<sigma> = ?t",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 4), template_var 3),
          template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app (template_hole 2, template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Abstract_Matching.MATCH1_matchers",
     "MATCH1 ?x ?y ==>
      matchers_map (snd ?x) Int matchers (set_mset (fst ?x)) =
      matchers_map (snd ?y) Int matchers (set_mset (fst ?y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1))),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))))))),
    ("Abstract_Matching.MATCH1_singleton_Var",
     "?\<sigma> ?x = None ==>
      MATCH1 ({#(Var ?x, ?t)#}, ?\<sigma>) ({#}, ?\<sigma>(?x |-> ?t))",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1), template_hole 8)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app (template_hole 3, template_var 1)),
                         template_var 0)),
                     template_hole 2)),
                 template_var 2)),
             template_app
              (template_app (template_hole 6, template_hole 2),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Abstract_Matching.matchers_set_zip",
     "length ?ss = length ?ts ==>
      matchers (set (zip ?ss ?ts)) =
      {\<sigma>. map (%t. t \<cdot> \<sigma>) ?ss = ?ts}",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_app (template_hole 3, t_empty)))),
    ("Abstract_Matching.MATCH1_singleton_Var",
     "?\<sigma> ?x = Some ?t ==>
      MATCH1 ({#(Var ?x, ?t)#}, ?\<sigma>) ({#}, ?\<sigma>(?x |-> ?t))",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_var 1),
          template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_var 1)),
                         template_var 0)),
                     template_hole 1)),
                 template_var 2)),
             template_app
              (template_app (template_hole 5, template_hole 1),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_app (template_hole 7, template_var 0))))
           ))),
    ("Abstract_Matching.ne_matchers_imp_empty",
     "matchers_map ?\<sigma> Int matchers (set_mset ?P) ~= {} ==>
      EX \<sigma>'. ((?P, ?\<sigma>), {#}, \<sigma>') : matchrel^*",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 1)),
                template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 0))),
              template_hole 7)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Abstract_Matching.ne_matchers_imp_matchrel",
     "matchers_map ?\<sigma> Int matchers {?e} ~= {} ==>
      EX y. (({#?e#}, ?\<sigma>), y) : matchrel",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 1)),
                template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 0),
                    template_hole 8))),
              template_hole 7)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Abstract_Matching.empty_not_reachable_imp_matchers_empty",
     "(!!\<sigma>'. ((?P, ?\<sigma>), {#}, \<sigma>') ~: matchrel^*) ==>
      matchers_map ?\<sigma> Int matchers (set_mset ?P) = {}",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1))),
         template_hole 0))),
    ("Abstract_Matching.size_mset_mset_less",
     "length ?ss = length ?ts ==>
      size_mset (mset (zip ?ss ?ts))
      < 3 + (size_list size ?ss + size_list size ?ts)",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 1),
          template_app (template_hole 12, template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)))))),
    ("Abstract_Matching.matchers_empty_imp_not_empty_NF",
     "matchers (set_mset ?P) = {} ==>
      EX y. fst y ~= {#} & ((?P, Map.empty), y) : matchrel^!",
     template_implication
      ([template_equation
         (template_app
           (template_hole 14,
            template_app (template_hole 13, template_var 0)),
          template_hole 12)],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Abstract_Matching.matchrel_mono",
     "(?x, ?y) : matchrel ==>
      ((fst ?x + ?M, snd ?x), fst ?y + ?M, snd ?y) : matchrel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app (template_hole 1, template_var 2)),
                         template_var 0)),
                     template_app (template_hole 0, template_var 2))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_var 1)),
                       template_var 0)),
                   template_app (template_hole 0, template_var 1)))),
             template_hole 4)
           ))),
    ("Abstract_Matching.ne_matchers_imp_empty_or_matchrel",
     "matchers_map ?\<sigma> Int matchers (set_mset ?P) ~= {} ==>
      ?P = {#} | (EX y. ((?P, ?\<sigma>), y) : matchrel)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 1)),
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 0))),
              template_hole 8)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 5)),
             template_app (template_hole 4, t_empty))
           ))),
    ("Abstract_Matching.MATCH1_singleton_Fun",
     "length ?ss = length ?ts ==>
      MATCH1 ({#(Fun ?f ?ss, Fun ?f ?ts)#}, ?\<sigma>)
       (mset (zip ?ss ?ts), ?\<sigma>)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 3),
          template_app (template_hole 9, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app (template_hole 4, template_var 1),
                             template_var 3)),
                         template_app
                          (template_app (template_hole 3, template_var 1),
                           template_var 2))),
                     template_hole 2)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2))),
               template_var 0))
           ))),
    ("Matching.match_complete'",
     "?p \<cdot> ?\<sigma> = ?t ==>
      EX \<tau>.
         match ?t ?p = Some \<tau> &
         (ALL x:vars_term ?p. ?\<sigma> x = \<tau> x)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_var 0)],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Abstract_Matching.matchrel_rtrancl_matchers",
     "(?x, ?y) : matchrel^* ==>
      matchers_map (snd ?x) Int matchers (set_mset (fst ?x)) =
      matchers_map (snd ?y) Int matchers (set_mset (fst ?y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 0)),
              template_app (template_hole 8, template_hole 7))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1))),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))))))),
    ("Abstract_Matching.irreducible_reachable_imp_matchers_empty",
     "[| ((?P, ?\<sigma>), ?y) : matchrel^!; fst ?y ~= {#} |]
      ==> matchers_map ?\<sigma> Int matchers (set_mset ?P) = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 2),
                      template_var 1)),
                  template_var 0)),
              template_app (template_hole 11, template_hole 10))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2))),
         template_hole 0))),
    ("Abstract_Matching.matchrel_rtrancl_mono",
     "(?x, ?y) : matchrel^* ==>
      ((fst ?x + ?M, snd ?x), fst ?y + ?M, snd ?y) : matchrel^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app (template_hole 5, template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app (template_hole 1, template_var 2)),
                         template_var 0)),
                     template_app (template_hole 0, template_var 2))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 1, template_var 1)),
                       template_var 0)),
                   template_app (template_hole 0, template_var 1)))),
             template_app (template_hole 5, template_hole 4))
           ))),
    ("Abstract_Matching.matchers_map_upd'",
     "?\<sigma> ?x = None | ?\<sigma> ?x = Some ?t ==>
      matchers_map (?\<sigma>(?x |-> ?t)) =
      matchers_map ?\<sigma> Int {\<tau>. \<tau> ?x = ?t}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_var 2, template_var 1)),
                  template_hole 7)),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_var 2, template_var 1)),
                template_app (template_hole 6, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_app (template_hole 6, template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 2)),
           template_app (template_hole 1, t_empty))))),
    ("Abstract_Matching.matchers_vars_term_eq",
     "[| ?\<sigma> : matchers ?P; ?\<tau> : matchers ?P; (?s, ?t) : ?P |]
      ==> ALL x:vars_term ?s. ?\<sigma> x = ?\<tau> x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app (template_hole 5, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)
           ))),
    ("Abstract_Matching.not_MATCH1_singleton_Var",
     "~ MATCH1 ({#(Var ?x, ?t)#}, ?\<sigma>) ({#}, ?\<sigma>(?x |-> ?t)) ==>
      ?\<sigma> ?x ~= None & ?\<sigma> ?x ~= Some ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app
                           (template_hole 8,
                            template_app
                             (template_app
                               (template_hole 7,
                                template_app
                                 (template_hole 6, template_var 2)),
                              template_var 1)),
                          template_hole 5)),
                      template_var 0)),
                  template_app
                   (template_app (template_hole 9, template_hole 5),
                    template_app
                     (template_app
                       (template_app (template_hole 4, template_var 0),
                        template_var 2),
                      template_app (template_hole 3, template_var 1))))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_var 0, template_var 2)),
                   template_hole 0))),
             template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_var 0, template_var 2)),
                 template_app (template_hole 3, template_var 1))))
           ))),
    ("Abstract_Matching.matchers_map_upd",
     "?\<sigma> ?x = None | ?\<sigma> ?x = Some ?t ==>
      matchers_map (%y. if y = ?x then Some ?t else ?\<sigma> y) =
      matchers_map ?\<sigma> Int {\<tau>. \<tau> ?x = ?t}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_var 2, template_var 1)),
                  template_hole 8)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_var 2, template_var 1)),
                template_app (template_hole 7, template_var 0)))
            )],
       template_equation
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 5, template_var 2)),
           template_app (template_hole 1, t_empty))))),
    ("Matching.match_list_complete'",
     "(!!s t. (s, t) : set ?P ==> s \<cdot> ?\<sigma> = t) ==>
      EX \<tau>.
         match_list ?d ?P = Some \<tau> &
         (ALL x:lvars ?P. ?\<sigma> x = \<tau> x)",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Abstract_Matching.not_matchrelD",
     "\<nexists>y. (({#?e#}, ?\<sigma>), y) : matchrel ==>
      (EX f ss x. ?e = (Fun f ss, Var x)) |
      (EX x t.
          ?e = (Var x, t) & ?\<sigma> x ~= None & ?\<sigma> x ~= Some t) |
      (EX f g ss ts.
          ?e = (Fun f ss, Fun g ts) & (f ~= g | length ss ~= length ts))",
     template_implication
      ([template_negation
         (template_predicate (template_app (template_hole 27, t_empty)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 20, template_app (template_hole 19, t_empty)),
             template_app
              (template_app
                (template_hole 20,
                 template_app (template_hole 12, t_empty)),
               template_app (template_hole 19, t_empty)))
           )))]:
   (string * thm * template) list
### theory "Draft.MatchingMoreTemplates"
### 0.441s elapsed time, 0.680s cpu time, 0.130s GC time
val it = (): unit
