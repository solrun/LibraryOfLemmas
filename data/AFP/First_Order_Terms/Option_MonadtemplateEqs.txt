   [("Option_Monad.guard_simps", "(guard ?b = None) = (~ ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Option_Monad.guard_simps", "(guard ?b = Some ?x) = ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_var 1)),
    ("Option_Monad.guard_and_to_bind",
     "guard (?a & ?b) = guard ?a >>= (%_. guard ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         t_empty))),
    ("Option_Monad.zip_option_None",
     "(zip_option ?xs ?ys = None) = (length ?xs ~= length ?ys)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Option_Monad.mapM_None",
     "(mapM ?f ?xs = None) = (EX x:set ?xs. ?f x = None)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_hole 4),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         t_empty))),
    ("Option_Monad.mapM_map",
     "mapM ?f ?xs =
      (if ALL x:set ?xs. ?f x ~= None then Some (map (%x. the (?f x)) ?xs)
       else None)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 0)),
               t_empty)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 0))),
         template_hole 0))),
    ("Option_Monad.zip_option_zip_conv",
     "(zip_option ?xs ?ys = Some ?zs) =
      (length ?ys = length ?xs &
       length ?zs = length ?xs & ?zs = zip ?xs ?ys)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_app (template_hole 7, template_var 0)),
       template_dunno))]
