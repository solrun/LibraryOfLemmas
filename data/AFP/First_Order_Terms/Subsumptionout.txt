Loading theory "Draft.Term" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption")
Loading theory "Draft.Transitive_Closure_More" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Draft.Seq_More")
Loading theory "Draft.Fun_More" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption")
### theory "Draft.Fun_More"
### 0.066s elapsed time, 0.288s cpu time, 0.024s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SubsumptionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.087s elapsed time, 0.375s cpu time, 0.024s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Abstract-Rewriting.Seq")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Transitive_Closure_More"
### 0.110s elapsed time, 0.469s cpu time, 0.024s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SubsumptionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.106s elapsed time, 0.432s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SubsumptionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.308s elapsed time, 1.205s cpu time, 0.173s GC time
Loading theory "Abstract-Rewriting.Seq" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption")
### theory "HOL-Library.Set_Algebras"
### 0.227s elapsed time, 0.877s cpu time, 0.173s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SubsumptionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.332s elapsed time, 1.296s cpu time, 0.173s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SubsumptionMoreTemplates" via "Draft.ExtrEqs")
locale infinitely_many
  fixes p :: "nat => bool"
  assumes "infinitely_many p"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Abstract-Rewriting.Seq"
### 0.347s elapsed time, 1.370s cpu time, 0.165s GC time
Loading theory "Draft.Seq_More" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Partially applied constant "Term.term.Var" on left hand side of equation, in theorem:
### monoid_mult.prod_list Var (\<circ>\<^sub>s) ?xs ==
### foldr (\<circ>\<^sub>s) ?xs Var
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "Draft.Seq_More"
### 0.130s elapsed time, 0.515s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SubsumptionMoreTemplates" via "Draft.ExtrEqs")
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.Term"
### 1.285s elapsed time, 4.919s cpu time, 0.957s GC time
Loading theory "Draft.Subsumption" (required by "Draft.SubsumptionMoreTemplates")
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.112s elapsed time, 4.225s cpu time, 0.831s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale subsumable
  fixes subsumeseq :: "'a => 'a => bool"
  assumes "subsumable subsumeseq"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "subsumeseq_term"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.813s elapsed time, 2.949s cpu time, 0.267s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "emv"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Subsumption"
### 0.878s elapsed time, 2.695s cpu time, 0.309s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.051s elapsed time, 6.384s cpu time, 1.131s GC time
Loading theory "Draft.Templates" (required by "Draft.SubsumptionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SubsumptionMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.444s elapsed time, 0.486s cpu time, 0.050s GC time
Loading theory "Draft.SubsumptionMoreTemplates"
val templateLemmas =
   [("Subsumption.subsumeseq_term_refl", "?t \<le>\<cdot> ?t",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Subsumption.num_syms_1", "1 <= num_syms ?t",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Subsumption.num_unique_vars_Var_1", "num_unique_vars (Var ?x) = 1",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Subsumption.num_syms_ge_num_unique_vars",
     "num_unique_vars ?t <= num_syms ?t",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Subsumption.num_vars_geq_num_unique_vars",
     "num_unique_vars ?t <= num_vars ?t",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Subsumption.num_syms_geq_num_vars", "num_vars ?t <= num_syms ?t",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Subsumption.num_syms_subst",
     "num_syms ?t <= num_syms (?t \<cdot> ?\<sigma>)",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 1),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Subsumption.sum_list_map_unique_vars",
     "num_unique_vars (Fun ?f ?ts) <= sum_list (map num_unique_vars ?ts)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 3),
           template_var 0)))),
    ("Subsumption.subsumeseq_term_iff",
     "(?t \<le>\<cdot> ?s) = (EX \<sigma>. ?s = ?t \<cdot> \<sigma>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Subsumption.subsumeseq_term_trans",
     "[| ?s \<le>\<cdot> ?t; ?t \<le>\<cdot> ?u |] ==> ?s \<le>\<cdot> ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Subsumption.num_unique_vars_Fun_Cons",
     "num_unique_vars (Fun ?f (?t # ?ts))
      <= num_unique_vars ?t + num_unique_vars (Fun ?f ?ts)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Subsumption.emv_subsumeseq_term_imp_num_unique_vars_le",
     "[| emv ?s ?t; ?t \<le>\<cdot> ?s |]
      ==> num_unique_vars ?s <= num_unique_vars ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Subsumption.bij_Var_subst_compose_Var",
     "bij ?g ==> (Var o ?g) \<circ>\<^sub>s (Var o inv ?g) = Var",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 0),
                template_hole 8),
              template_hole 7)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_hole 8),
               template_var 0))),
         template_hole 1))),
    ("Subsumption.emv_subst_imp_num_unique_vars_le",
     "[| emv ?s ?t; ?s = ?t \<cdot> ?\<sigma> |]
      ==> num_unique_vars ?s <= num_unique_vars ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("Subsumption.subsumeseq_termE",
     "[| ?s \<le>\<cdot> ?t;
         !!\<sigma>. ?t = ?s \<cdot> \<sigma> ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Subsumption.emv_subst_imp_is_Var",
     "[| emv ?s ?t; ?s = ?t \<cdot> ?\<sigma> |]
      ==> ALL x:vars_term ?t. is_Var (?\<sigma> x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)
           ))),
    ("Subsumption.emv_subst_vars_term",
     "[| emv ?s ?t; ?s = ?t \<cdot> ?\<sigma> |]
      ==> vars_term ?s = (the_Var o ?\<sigma>) ` vars_term ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_equation
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Subsumption.subsumeseq_term_size_emv",
     "[| ?t \<le>\<cdot> ?s; num_syms ?s = num_syms ?t;
         num_funs ?s = num_funs ?t |]
      ==> emv ?s ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app (template_hole 2, template_var 0),
          template_app (template_hole 2, template_var 1)),
        template_equation
         (template_app (template_hole 1, template_var 0),
          template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Subsumption.subst_size_emv",
     "[| ?s = ?t \<cdot> ?\<tau>; num_syms ?s = num_syms ?t;
         num_funs ?s = num_funs ?t |]
      ==> emv ?s ?t",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0)),
        template_equation
         (template_app (template_hole 4, template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("Subsumption.num_syms_num_unique_vars_clash",
     "[| ALL i. num_syms (?f i) = num_syms (?f (Suc i));
         ALL i. num_unique_vars (?f i) < num_unique_vars (?f (Suc i)) |]
      ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_hole 0))),
    ("Subsumption.sum_list_map_num_syms_subst",
     "sum_list (map (num_syms o (%t. t \<cdot> ?\<sigma>)) ?ts) =
      sum_list (map num_syms ?ts) ==>
      ALL i<length ?ts.
         num_syms (?ts ! i \<cdot> ?\<sigma>) = num_syms (?ts ! i)",
     template_implication
      ([template_equation
         (template_app
           (template_hole 10,
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  t_empty)),
              template_var 0)),
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_hole 5),
              template_var 0)))],
       template_predicate (template_app (template_hole 4, t_empty))))]:
   (string * thm * template) list
### theory "Draft.SubsumptionMoreTemplates"
### 0.343s elapsed time, 0.522s cpu time, 0.068s GC time
val it = (): unit
