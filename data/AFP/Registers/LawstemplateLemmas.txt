   [("Laws.preregister_tensor_right",
     "preregister (%a. tensor_update a ?b)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Laws.preregister_tensor_left", "preregister (tensor_update ?a)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Laws.swap_swap", "swap (swap ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Laws.assoc_assoc'", "assoc (assoc' ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Laws.assoc'_assoc", "assoc' (assoc ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Laws.iso_register_equivalent_id",
     "equivalent_registers id ?F = iso_register ?F",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Laws.register_attribute_rule_immediate",
     "register ?uu ==> register ?uu",
     template_implication
      ([template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Laws.iso_register_is_register", "iso_register ?F ==> register ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Laws.register_attribute_rule_immediate",
     "iso_register ?uu ==> iso_register ?uu",
     template_implication
      ([template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Laws.register_attribute_rule", "?P & ?Q ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate (template_var 1))),
    ("Laws.register_attribute_rule", "?P & ?Q ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate (template_var 0))),
    ("Laws.compatible_register1", "compatible ?F ?G ==> register ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Laws.compatible_register2", "compatible ?F ?G ==> register ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Laws.equivalent_registers_register_left",
     "equivalent_registers ?F ?G ==> register ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Laws.equivalent_registers_register_right",
     "equivalent_registers ?F ?G ==> register ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Laws.swap_apply", "swap (tensor_update ?a ?b) = tensor_update ?b ?a",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Laws.iso_register_bij", "iso_register ?F ==> bij ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1),
             template_hole 0)
           ))),
    ("Laws.iso_register_inv", "iso_register ?F ==> iso_register (inv ?F)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Laws.register_attribute_rule",
     "iso_register ?F ==> register (inv ?F)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Laws.register_attribute_rule_immediate",
     "compatible ?uu ?uua ==> compatible ?uu ?uua",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Laws.compatible_sym", "compatible ?x ?y ==> compatible ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Laws.equivalent_registers_sym",
     "equivalent_registers ?F ?G ==> equivalent_registers ?G ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Laws.pair_is_register", "compatible ?F ?G ==> register (?F;?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Laws.register_tensor_id_update",
     "register ?F ==> register (%a. tensor_update (?F a) id_update)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Laws.id_update_tensor_register",
     "register ?F ==> register (%a. tensor_update id_update (?F a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Laws.compatible_ac_rules",
     "comp_update ?a (comp_update ?b ?c) =
      comp_update (comp_update ?a ?b) ?c",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Laws.iso_register_inv_comp1", "iso_register ?F ==> inv ?F o ?F = id",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_var 0),
         template_hole 0))),
    ("Laws.iso_register_inv_comp2", "iso_register ?F ==> ?F o inv ?F = id",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0))),
    ("Laws.assoc_apply",
     "assoc (tensor_update (tensor_update ?a ?b) ?c) =
      tensor_update ?a (tensor_update ?b ?c)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Laws.assoc'_apply",
     "assoc' (tensor_update ?a (tensor_update ?b ?c)) =
      tensor_update (tensor_update ?a ?b) ?c",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Laws.register_pair_Fst", "compatible ?F ?G ==> (?F;?G) o Fst = ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0),
         template_var 1))),
    ("Laws.register_pair_Snd", "compatible ?F ?G ==> (?F;?G) o Snd = ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0),
         template_var 0))),
    ("Laws.register_tensor_is_register",
     "[| register ?F; register ?G |]
      ==> register (?F \<otimes>\<^sub>r ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Laws.iso_register_comp",
     "[| iso_register ?F; iso_register ?G |] ==> iso_register (?F o ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Laws.iso_register_tensor_is_iso_register",
     "[| iso_register ?F; iso_register ?G |]
      ==> iso_register (?F \<otimes>\<^sub>r ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Laws.register_Fst_register_Snd",
     "register ?F ==> (?F o Fst;?F o Snd) = ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)),
         template_var 0))),
    ("Laws.equivalent_registers_trans",
     "[| equivalent_registers ?F ?G; equivalent_registers ?G ?H |]
      ==> equivalent_registers ?F ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Laws.separating_mono",
     "[| ?A <= ?B; separating TYPE(?'a) ?A |] ==> separating TYPE(?'a) ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_hole 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Laws.pair_o_swap", "compatible ?A ?B ==> (?A;?B) o swap = (?B;?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Laws.compatible_comp_left",
     "[| compatible ?F ?G; register ?H |] ==> compatible (?F o ?H) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Laws.compatible_comp_right",
     "[| compatible ?F ?G; register ?H |] ==> compatible ?F (?G o ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Laws.register_Snd_register_Fst",
     "register ?F ==> (?F o Snd;?F o Fst) = ?F o swap",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 4)),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Laws.swap_registers",
     "compatible ?R ?S ==>
      comp_update (?R ?a) (?S ?b) = comp_update (?S ?b) (?R ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_var 3, template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 0)),
           template_app (template_var 3, template_var 1))))),
    ("Laws.compatible_tensor_id_update_right",
     "compatible ?F ?G ==>
      compatible (%a. tensor_update (?F a) id_update)
       (%a. tensor_update (?G a) id_update)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_app (template_hole 2, t_empty), t_empty)))),
    ("Laws.compatible_tensor_id_update_left",
     "compatible ?F ?G ==>
      compatible (%a. tensor_update id_update (?F a))
       (%a. tensor_update id_update (?G a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_app (template_hole 2, t_empty), t_empty)))),
    ("Laws.equivalent_registers_comp",
     "[| register ?H; equivalent_registers ?F ?G |]
      ==> equivalent_registers (?H o ?F) (?H o ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Laws.compatible_comp_inner",
     "[| compatible ?F ?G; register ?H |]
      ==> compatible (?H o ?F) (?H o ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Laws.register_pair_apply",
     "compatible ?F ?G ==>
      (?F;?G) (tensor_update ?a ?b) = comp_update (?F ?a) (?G ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 3, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("Laws.register_pair_apply'",
     "compatible ?F ?G ==>
      (?F;?G) (tensor_update ?a ?b) = comp_update (?G ?b) (?F ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 0)),
           template_app (template_var 3, template_var 1))))),
    ("Laws.equivalent_registers_pair_left",
     "[| compatible ?F ?G; equivalent_registers ?F ?H |]
      ==> equivalent_registers (?F;?G) (?H;?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Laws.equivalent_registers_pair_right",
     "[| compatible ?F ?G; equivalent_registers ?G ?H |]
      ==> equivalent_registers (?F;?G) (?F;?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Laws.compatible_register_tensor",
     "[| compatible ?F ?F'; compatible ?G ?G' |]
      ==> compatible (?F \<otimes>\<^sub>r ?G) (?F' \<otimes>\<^sub>r ?G')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Laws.equivalent_registersI",
     "[| register ?F; iso_register ?I; ?F o ?I = ?G |]
      ==> equivalent_registers ?F ?G",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Laws.compatible_tensor_id_update_rl",
     "[| register ?F; register ?G |]
      ==> compatible (%a. tensor_update (?F a) id_update)
           (%a. tensor_update id_update (?G a))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (template_app (template_app (template_hole 3, t_empty), t_empty)))),
    ("Laws.compatible_tensor_id_update_lr",
     "[| register ?F; register ?G |]
      ==> compatible (%a. tensor_update id_update (?F a))
           (%a. tensor_update (?G a) id_update)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (template_app (template_app (template_hole 3, t_empty), t_empty)))),
    ("Laws.swap_registers_right",
     "compatible ?R ?S ==>
      comp_update (comp_update ?c (?R ?a)) (?S ?b) =
      comp_update (comp_update ?c (?S ?b)) (?R ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app (template_var 4, template_var 1))),
           template_app (template_var 3, template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app (template_var 3, template_var 0))),
           template_app (template_var 4, template_var 1))))),
    ("Laws.swap_registers_left",
     "compatible ?R ?S ==>
      comp_update (comp_update (?R ?a) (?S ?b)) ?c =
      comp_update (comp_update (?S ?b) (?R ?a)) ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 4, template_var 2)),
               template_app (template_var 3, template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 3, template_var 1)),
               template_app (template_var 4, template_var 2))),
           template_var 0)))),
    ("Laws.register_tensor_apply",
     "[| register ?F; register ?G |]
      ==> (?F \<otimes>\<^sub>r ?G) (tensor_update ?a ?b) =
          tensor_update (?F ?a) (?G ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 3, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("Laws.compatible3'",
     "[| compatible ?F ?G; compatible ?G ?H; compatible ?F ?H |]
      ==> compatible ?F (?G;?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Laws.compatible3",
     "[| compatible ?F ?G; compatible ?G ?H; compatible ?F ?H |]
      ==> compatible (?F;?G) ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Laws.inv_register_tensor",
     "[| iso_register ?F; iso_register ?G |]
      ==> inv (?F \<otimes>\<^sub>r ?G) = inv ?F \<otimes>\<^sub>r inv ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Laws.register_comp_pair",
     "[| register ?F; compatible ?G ?H |]
      ==> (?F o ?G;?F o ?H) = ?F o (?G;?H)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Laws.iso_registerI",
     "[| register ?F; register ?G; ?F o ?G = id; ?G o ?F = id |]
      ==> iso_register ?F",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_hole 4),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 0), template_var 1),
          template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Laws.equivalent_registers_assoc",
     "[| compatible ?F ?G; compatible ?F ?H; compatible ?G ?H |]
      ==> equivalent_registers (?F;(?G;?H)) ((?F;?G);?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0))
           ))),
    ("Laws.compatibleI",
     "[| register ?F; register ?G;
         !!a b. comp_update (?F a) (?G b) = comp_update (?G b) (?F a) |]
      ==> compatible ?F ?G",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Laws.pair_o_tensor",
     "[| compatible ?A ?B; register ?C; register ?D |]
      ==> (?A;?B) o ?C \<otimes>\<^sub>r ?D = (?A o ?C;?B o ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Laws.pair_o_assoc'",
     "[| compatible ?F ?G; compatible ?G ?H; compatible ?F ?H |]
      ==> ((?F;?G);?H) o assoc' = (?F;(?G;?H))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Laws.pair_o_assoc",
     "[| compatible ?F ?G; compatible ?G ?H; compatible ?F ?H |]
      ==> (?F;(?G;?H)) o assoc = ((?F;?G);?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_hole 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Laws.register_eqI",
     "[| separating TYPE(?'b) ?A; preregister ?F; preregister ?G;
         !!x. x : ?A ==> ?F x = ?G x |]
      ==> ?F = ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Laws.separating_tensor",
     "[| separating TYPE(?'c) ?A; separating TYPE(?'c) ?B |]
      ==> separating TYPE(?'c) {tensor_update a b |a b. a : ?A & b : ?B}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 10),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_hole 10),
             template_app (template_hole 7, t_empty))
           ))),
    ("Laws.register_tensor_distrib",
     "[| register ?F; register ?G; register ?H; register ?L |]
      ==> ?F \<otimes>\<^sub>r ?G o ?H \<otimes>\<^sub>r ?L =
          (?F o ?H) \<otimes>\<^sub>r (?G o ?L)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Laws.tensor_extensionality3",
     "[| register ?F; register ?G;
         !!f g h.
            ?F (tensor_update f (tensor_update g h)) =
            ?G (tensor_update f (tensor_update g h)) |]
      ==> ?F = ?G",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Laws.tensor_extensionality3'",
     "[| register ?F; register ?G;
         !!f g h.
            ?F (tensor_update (tensor_update f g) h) =
            ?G (tensor_update (tensor_update f g) h) |]
      ==> ?F = ?G",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Laws.separating_tensor'",
     "[| separating TYPE(?'c) ?A; separating TYPE(?'c) ?B;
         ?C = {tensor_update a b |a b. a : ?A & b : ?B} |]
      ==> separating TYPE(?'c) ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 11),
              template_var 1)
            ),
        template_equation
         (template_var 0, template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_hole 11),
             template_var 0)
           )))]
