   [("Pure_States.regular_register_comp",
     "[| regular_register ?F; regular_register ?G |]
      ==> regular_register (?F o ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Pure_States.pure_state_bounded_clinear",
     "compatible ?F ?G ==>
      bounded_clinear (%\<psi>. (?F \<psi> \<otimes>\<^sub>p ?G ?\<phi>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Pure_States.pure_state_bounded_clinear_right",
     "compatible ?F ?G ==>
      bounded_clinear (%\<phi>. (?F ?\<psi> \<otimes>\<^sub>p ?G \<phi>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Pure_States.pure_state_clinear",
     "compatible ?F ?G ==>
      clinear (%\<psi>. (?F \<psi> \<otimes>\<^sub>p ?G ?\<phi>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Pure_States.pure_state_target_vector_norm",
     "[| ?\<eta>\<^sub>F ~= 0; register ?F |]
      ==> norm (pure_state_target_vector ?F ?\<eta>\<^sub>F) = 1",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("Pure_States.regular_register_pair",
     "[| compatible ?F ?G; regular_register ?F; regular_register ?G |]
      ==> regular_register (?F;?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Pure_States.pure_state_target_vector_eqI",
     "?F (selfbutter ?\<eta>\<^sub>F) = ?G (selfbutter ?\<eta>\<^sub>G) ==>
      pure_state_target_vector ?F ?\<eta>\<^sub>F =
      pure_state_target_vector ?G ?\<eta>\<^sub>G",
     template_implication
      ([template_equation
         (template_app
           (template_var 3,
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 2)),
          template_app
           (template_var 1,
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Pure_States.regular_iso_register",
     "[| regular_register ?F; iso_register ?F |]
      ==> ?F (selfbutterket default) = selfbutterket default",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_var 0,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)),
             template_app (template_hole 4, template_hole 3))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_app (template_hole 1, template_hole 0))))),
    ("Pure_States.pure_state_target_vector_correct",
     "[| ?\<eta> ~= 0; register ?F |]
      ==> ?F (selfbutter ?\<eta>) *\<^sub>V
          pure_state_target_vector ?F ?\<eta> ~=
          0",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_var 0,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 1))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_hole 0)
           ))),
    ("Pure_States.pure_state_target_vector_in_range",
     "[| ?\<eta>\<^sub>F ~= 0; register ?F |]
      ==> pure_state_target_vector ?F ?\<eta>\<^sub>F
          : range ((*\<^sub>V) (?F (selfbutter ?\<eta>\<^sub>F)))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_var 0,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 1)))),
               template_hole 0))
           ))),
    ("Pure_States.example",
     "compatible ?F ?G ==>
      (?F;?G) CNOT o\<^sub>C\<^sub>L (?G;?F) CNOT o\<^sub>C\<^sub>L
      (?F;?G) CNOT =
      (?F;?G) swap_ell2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0),
                   template_hole 1)),
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1),
                 template_hole 1))),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0),
             template_hole 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_hole 0)))),
    ("Pure_States.cspan_pure_state",
     "[| iso_register ?F; cspan (?g ` ?X) = UNIV |]
      ==> cspan ((%z. pure_state ?F (?g z)) ` ?X) = UNIV",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_equation
         (template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)),
          template_hole 7)],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty), template_var 0)),
         template_hole 0))),
    ("Pure_States.register_pair_butterfly_tensor",
     "compatible ?F ?G ==>
      (?F;?G)
       (butterfly (?a \<otimes>\<^sub>s ?b) (?c \<otimes>\<^sub>s ?d)) =
      ?F (butterfly ?a ?c) o\<^sub>C\<^sub>L ?G (butterfly ?b ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 5),
             template_var 4),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_var 5,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1))),
           template_app
            (template_var 4,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))))),
    ("Pure_States.state_apply1",
     "compatible ?F ?G ==>
      ?F ?U *\<^sub>V (?F ?\<psi> \<otimes>\<^sub>p ?G ?\<phi>) =
      (?F ?U *\<^sub>V ?\<psi> \<otimes>\<^sub>p ?G ?\<phi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_var 4, template_var 2)),
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 3)),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app (template_hole 2, template_hole 1))),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app (template_hole 2, template_hole 1))))),
    ("Pure_States.regular_registerI",
     "[| register ?F; complements ?F ?G;
         (?F;?G) (selfbutterket default \<otimes>\<^sub>o ?a) =
         selfbutterket default |]
      ==> regular_register ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1),
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4)),
                  template_app (template_hole 5, template_hole 4))),
              template_var 0)),
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_hole 1)),
            template_app (template_hole 2, template_hole 1)))],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("Pure_States.pure_state_eqI",
     "[| ?F (selfbutter ?\<eta>\<^sub>F) = ?G (selfbutter ?\<eta>\<^sub>G);
         ?F (butterfly ?\<psi> ?\<eta>\<^sub>F) =
         ?G (butterfly ?\<phi> ?\<eta>\<^sub>G) |]
      ==> pure_state' ?F ?\<psi> ?\<eta>\<^sub>F =
          pure_state' ?G ?\<phi> ?\<eta>\<^sub>G",
     template_implication
      ([template_equation
         (template_app
           (template_var 5,
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 4)),
          template_app
           (template_var 3,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 2))),
        template_equation
         (template_app
           (template_var 5,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 4)),
          template_app
           (template_var 3,
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 1),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2)))),
    ("Pure_States.cspan_pure_state'",
     "[| iso_register ?F; cspan (?g ` ?X) = UNIV;
         ?F (selfbutter ?\<eta>) *\<^sub>V
         pure_state_target_vector ?F ?\<eta> ~=
         0 |]
      ==> cspan ((%z. pure_state' ?F (?g z) ?\<eta>) ` ?X) = UNIV",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 3)),
        template_equation
         (template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1)),
          template_hole 11),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_var 3,
                    template_app
                     (template_app (template_hole 7, template_var 0),
                      template_var 0))),
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 0)),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_hole 0))),
    ("Pure_States.pure_state_nested",
     "[| compatible ?F ?G; regular_register ?H; iso_register ?H |]
      ==> (?F pure_state ?H ?h \<otimes>\<^sub>p ?G ?g) =
          ((?F o ?H) ?h \<otimes>\<^sub>p ?G ?g)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 4),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 16, template_var 2)),
        template_predicate
         (template_app (template_hole 15, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_app (template_hole 10, template_var 2),
                     template_var 1),
                   template_app (template_hole 9, template_hole 8))),
               template_var 0)),
           template_app (template_hole 7, template_hole 6)),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 2)),
                 template_var 3)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app (template_hole 1, template_hole 0)))))]
