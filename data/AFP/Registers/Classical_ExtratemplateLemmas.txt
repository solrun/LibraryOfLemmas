   [("Classical_Extra.setter_empty_var", "setter empty_var ?a ?m = ?m",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_var 0)),
    ("Classical_Extra.empty_var_compatible'",
     "register ?X ==> compatible ?X empty_var",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Classical_Extra.empty_var_compatible",
     "register ?X ==> compatible empty_var ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("Classical_Extra.valid_getter_setter_getter_setter",
     "register ?F ==> valid_getter_setter (getter ?F) (setter ?F)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Classical_Extra.register_register_from_getter_setter",
     "valid_getter_setter ?g ?s ==>
      register (register_from_getter_setter ?g ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Classical_Extra.permutation_register_register",
     "bij ?p ==> register (permutation_register ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Classical_Extra.register_empty",
     "preregister ?F ==> ?F Map.empty = Map.empty",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_var 0, t_empty), t_empty))),
    ("Classical_Extra.register_from_getter_setter_of_getter_setter",
     "register ?F ==>
      register_from_getter_setter (getter ?F) (setter ?F) = ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Classical_Extra.getter_permutation_register",
     "bij ?p ==> getter (permutation_register ?p) = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Classical_Extra.register_total",
     "[| register ?F; total_fun ?a |] ==> total_fun (?F ?a)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0, template_app (template_var 1, template_var 0))
           ))),
    ("Classical_Extra.register_apply",
     "register ?F ==> Some o register_apply ?F ?a = ?F (Some o ?a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_var 1,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Classical_Extra.setter_permutation_register",
     "bij ?p ==> setter (permutation_register ?p) ?a ?m = inv ?p ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_hole 5),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_hole 5),
             template_var 2),
           template_var 1)))),
    ("Classical_Extra.compatible_setter",
     "[| register ?F; register ?G |]
      ==> compatible ?F ?G =
          (ALL a b. setter ?F a o setter ?G b = setter ?G b o setter ?F a)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app (template_hole 5, t_empty)))),
    ("Classical_Extra.register_from_getter_setter_compatibleI",
     "[| valid_getter_setter ?g ?s; valid_getter_setter ?g' ?s';
         !!x y m. ?s x (?s' y m) = ?s' y (?s x m) |]
      ==> compatible (register_from_getter_setter ?g ?s)
           (register_from_getter_setter ?g' ?s')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           )))]
