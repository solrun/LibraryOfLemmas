   [("Axioms_Complement_Quantum.register_inj", "register ?F ==> inj ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Axioms_Complement_Quantum.register_decomposition_converse",
     "unitary ?U ==>
      register (%x. Misc.sandwich ?U (id_cblinfun \<otimes>\<^sub>o x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Axioms_Complement_Quantum.iso_register_decomposition",
     "iso_register ?F ==> EX U. unitary U & ?F = Misc.sandwich U",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Axioms_Complement_Quantum.commutant_exchange",
     "iso_register ?F ==> commutant (?F ` ?X) = ?F ` commutant ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Axioms_Complement_Quantum.CARD_complement_domain",
     "CARD(?'b) = ?n * CARD(?'a) ==>
      CARD((?'a, ?'b) complement_domain) = ?n",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_hole 5),
          template_app
           (template_app (template_hole 4, template_var 0),
            template_app (template_hole 3, template_hole 2)))],
       template_equation
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Axioms_Complement_Quantum.complement_exists",
     "register ?F ==> EX G. compatible ?F G & iso_register (?F;G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Axioms_Complement_Quantum.register_decomposition",
     "register ?\<Phi> ==>
      EX U. unitary U &
            (ALL \<theta>.
                ?\<Phi> \<theta> =
                Misc.sandwich U (\<theta> \<otimes>\<^sub>o id_cblinfun))",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Axioms_Complement_Quantum.complement_range",
     "[| compatible ?F ?G; iso_register (?F;?G) |]
      ==> range ?G = commutant (range ?F)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Axioms_Complement_Quantum.same_range_equivalent",
     "[| register ?F; register ?G; range ?F = range ?G |]
      ==> equivalent_registers ?F ?G",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1),
            template_hole 3),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Axioms_Complement_Quantum.complement_unique",
     "[| compatible ?F ?G; iso_register (?F;?G); compatible ?F ?H;
         iso_register (?F;?H) |]
      ==> equivalent_registers ?G ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           )))]
