   [("Quantum_Extra.register_bounded_clinear",
     "register ?F ==> bounded_clinear ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Quantum_Extra.unitary_sandwich_register",
     "unitary ?a ==> register (Misc.sandwich ?a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Quantum_Extra.register_pair_is_register_converse",
     "register (?F;?G) ==> register ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Quantum_Extra.register_pair_is_register_converse",
     "register (?F;?G) ==> register ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Quantum_Extra.register_adjoint", "register ?F ==> ?F (?a*) = ?F ?a*",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_var 1, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_var 1, template_var 0))))),
    ("Quantum_Extra.register_projector",
     "[| register ?F; is_Proj ?a |] ==> is_Proj (?F ?a)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0, template_app (template_var 1, template_var 0))
           ))),
    ("Quantum_Extra.register_unitary",
     "[| register ?F; unitary ?a |] ==> unitary (?F ?a)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0, template_app (template_var 1, template_var 0))
           ))),
    ("Quantum_Extra.register_scaleC",
     "register ?F ==> ?F (?c *\<^sub>C ?a) = ?c *\<^sub>C ?F ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_var 2, template_var 0))))),
    ("Quantum_Extra.sandwich_grow_left",
     "unitary ?a ==>
      Misc.sandwich ?a \<otimes>\<^sub>r id =
      Misc.sandwich (?a \<otimes>\<^sub>o id_cblinfun)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Quantum_Extra.id_tensor_sandwich",
     "unitary ?a ==>
      id \<otimes>\<^sub>r Misc.sandwich ?a =
      Misc.sandwich (id_cblinfun \<otimes>\<^sub>o ?a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Quantum_Extra.register_sandwich",
     "register ?F ==>
      ?F (Misc.sandwich ?a ?b) = Misc.sandwich (?F ?a) (?F ?b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0))))),
    ("Quantum_Extra.register_mult'",
     "register ?F ==>
      ?F ?a *\<^sub>V ?F ?b *\<^sub>V ?c =
      ?F (?a o\<^sub>C\<^sub>L ?b) *\<^sub>V ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 3, template_var 2)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 3, template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_var 3,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0)))),
    ("Quantum_Extra.sandwich_tensor",
     "[| unitary ?a; unitary ?b |]
      ==> Misc.sandwich (?a \<otimes>\<^sub>o ?b) =
          Misc.sandwich ?a \<otimes>\<^sub>r Misc.sandwich ?b",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Quantum_Extra.compatible_proj_mult",
     "[| compatible ?R ?S; is_Proj ?a; is_Proj ?b |]
      ==> is_Proj (?R ?a o\<^sub>C\<^sub>L ?S ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 3, template_var 1)),
               template_app (template_var 2, template_var 0)))
           ))),
    ("Quantum_Extra.compatible_selfbutter_join",
     "compatible ?R ?S ==>
      ?R (selfbutter ?\<psi>) o\<^sub>C\<^sub>L ?S (selfbutter ?\<phi>) =
      (?R;?S) (selfbutter (?\<psi> \<otimes>\<^sub>s ?\<phi>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_var 3,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 1))),
           template_app
            (template_var 2,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 0))),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Quantum_Extra.compatible_proj_intersect",
     "[| compatible ?R ?S; is_Proj ?a; is_Proj ?b |]
      ==> ?R ?a *\<^sub>S \<top> \<sqinter> (?S ?b *\<^sub>S \<top>) =
          (?R ?a o\<^sub>C\<^sub>L ?S ?b) *\<^sub>S \<top>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_var 3, template_var 1)),
               template_hole 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_var 2, template_var 0)),
             template_hole 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 3, template_var 1)),
               template_app (template_var 2, template_var 0))),
           template_hole 1))))]
