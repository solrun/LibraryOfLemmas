   [("Axioms.preregister_mult_right", "preregister (%a. comp_update a ?z)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Axioms.preregister_mult_left", "preregister (comp_update ?z)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Axioms.id_update_left", "comp_update id_update ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Axioms.id_update_right", "comp_update ?a id_update = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Axioms.register_preregister", "register ?F ==> preregister ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Axioms.register_of_id", "register ?F ==> ?F id_update = id_update",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_var 0, template_hole 1), template_hole 0))),
    ("Axioms.comp_update_assoc",
     "comp_update (comp_update ?a ?b) ?c =
      comp_update ?a (comp_update ?b ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Axioms.comp_preregister",
     "[| preregister ?F; preregister ?G |] ==> preregister (?G o ?F)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Axioms.register_comp",
     "[| register ?F; register ?G |] ==> register (?G o ?F)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Axioms.register_mult",
     "register ?F ==> comp_update (?F ?a) (?F ?b) = ?F (comp_update ?a ?b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Axioms.tensor_update_mult",
     "comp_update (tensor_update ?a ?c) (tensor_update ?b ?d) =
      tensor_update (comp_update ?a ?b) (comp_update ?c ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Axioms.tensor_extensionality",
     "[| preregister ?F; preregister ?G;
         !!a b. ?F (tensor_update a b) = ?G (tensor_update a b) |]
      ==> ?F = ?G",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Axioms.register_pair_is_register",
     "[| register ?F; register ?G;
         !!a b. comp_update (?F a) (?G b) = comp_update (?G b) (?F a) |]
      ==> register (register_pair ?F ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Axioms.register_pair_apply",
     "[| register ?F; register ?G;
         !!a b. comp_update (?F a) (?G b) = comp_update (?G b) (?F a) |]
      ==> register_pair ?F ?G (tensor_update ?a ?b) =
          comp_update (?F ?a) (?G ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_var 3, template_var 1)),
           template_app (template_var 2, template_var 0)))))]
