   [("Axioms_Quantum.preregister_mult_left",
     "clinear ((o\<^sub>C\<^sub>L) ?z)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Axioms_Quantum.preregister_mult_right",
     "clinear (%a. a o\<^sub>C\<^sub>L ?z)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Axioms_Quantum.register_preregister", "register ?F ==> clinear ?F",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Axioms_Quantum.register_of_id",
     "register ?F ==> ?F id_cblinfun = id_cblinfun",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_var 0, template_hole 1), template_hole 0))),
    ("Axioms_Quantum.register_comp",
     "[| register ?F; register ?G |] ==> register (?G o ?F)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Axioms_Quantum.register_mult",
     "register ?F ==>
      ?F ?a o\<^sub>C\<^sub>L ?F ?b = ?F (?a o\<^sub>C\<^sub>L ?b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Axioms_Quantum.cbilinear_F_comp_G",
     "[| clinear ?F; clinear ?G |]
      ==> cbilinear (%a b. ?F a o\<^sub>C\<^sub>L ?G b)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Axioms_Quantum.register_pair_is_register",
     "[| register ?F; register ?G;
         !!a b. ?F a o\<^sub>C\<^sub>L ?G b = ?G b o\<^sub>C\<^sub>L ?F a |]
      ==> register (register_pair ?F ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Axioms_Quantum.register_pair_apply",
     "[| register ?F; register ?G;
         !!a b. ?F a o\<^sub>C\<^sub>L ?G b = ?G b o\<^sub>C\<^sub>L ?F a |]
      ==> register_pair ?F ?G (?a \<otimes>\<^sub>o ?b) =
          ?F ?a o\<^sub>C\<^sub>L ?G ?b",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_var 3, template_var 1)),
           template_app (template_var 2, template_var 0)))))]
