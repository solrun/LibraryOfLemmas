Loading theory "HOL-Library.Dual_Ordered_Lattice" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OpSemMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OpSemMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOL-Library.Countable")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.117s elapsed time, 0.489s cpu time, 0.036s GC time
instantiation
  dual :: (equal) equal
  equal_dual == equal_class.equal :: 'a dual => 'a dual => bool
Loading theory "HOL-Library.Product_Plus" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOL-Library.Product_Order")
instantiation
  dual :: (ord) ord
  less_eq_dual == less_eq :: 'a dual => 'a dual => bool
  less_dual == less :: 'a dual => 'a dual => bool
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  dual :: (sup) inf
  inf_dual == inf :: 'a dual => 'a dual => 'a dual
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
instantiation
  dual :: (inf) sup
  sup_dual == sup :: 'a dual => 'a dual => 'a dual
instantiation
  dual :: (top) bot
  bot_dual == bot :: 'a dual
instantiation
  dual :: (bot) top
  top_dual == top :: 'a dual
### theory "HOL-Library.Product_Plus"
### 0.094s elapsed time, 0.373s cpu time, 0.000s GC time
Loading theory "HOL-Library.Product_Order" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis")
Found termination order: "size_list size <*mlex*> {}"
instantiation
  dual :: (uminus) uminus
  uminus_dual == uminus :: 'a dual => 'a dual
instantiation
  dual :: (boolean_algebra) boolean_algebra
  minus_dual == minus :: 'a dual => 'a dual => 'a dual
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  dual :: (Sup) Inf
  Inf_dual == Inf :: 'a dual set => 'a dual
instantiation
  prod :: (inf, inf) inf
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  dual :: (Inf) Sup
  Sup_dual == Sup :: 'a dual set => 'a dual
instantiation
  prod :: (sup, sup) sup
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
### theory "HOL-Library.Dual_Ordered_Lattice"
### 0.320s elapsed time, 1.285s cpu time, 0.113s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OpSemMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
instantiation
  prod :: (Inf, Inf) Inf
  Inf_prod == Inf :: ('a * 'b) set => 'a * 'b
### theory "HOL-Library.Nat_Bijection"
### 0.346s elapsed time, 1.386s cpu time, 0.113s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OpSemMoreTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  prod :: (Sup, Sup) Sup
  Sup_prod == Sup :: ('a * 'b) set => 'a * 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Product_Order"
### 0.202s elapsed time, 0.789s cpu time, 0.077s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OpSemMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.464s elapsed time, 1.849s cpu time, 0.220s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite")
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.895s cpu time, 0.106s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OpSemMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Additional type variable(s) in locale specification "countable": 'a
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 1.127s elapsed time, 4.313s cpu time, 1.024s GC time
Loading theory "HOLCF.Porder" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun" via "HOLCF.Cpodef" via "HOLCF.Adm" via "HOLCF.Cont" via "HOLCF.Pcpo")
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
class below = type +
  fixes below :: "'a => 'a => bool"
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
class po = below +
  assumes "below_refl": "!!x. x << x"
  assumes "below_trans": "!!x y z. [| x << y; y << z |] ==> x << z"
  assumes "below_antisym": "!!x y. [| x << y; y << x |] ==> x = y"
Found termination order: "size <*mlex*> {}"
class po = below +
  assumes "below_refl": "!!x. x << x"
  assumes "below_trans": "!!x y z. [| x << y; y << z |] ==> x << z"
  assumes "below_antisym": "!!x y. [| x << y; y << x |] ==> x = y"
### theory "HOL-Library.BigO"
### 1.074s elapsed time, 4.105s cpu time, 0.967s GC time
class po = below +
  assumes "below_refl": "!!x. x << x"
  assumes "below_trans": "!!x y z. [| x << y; y << z |] ==> x << z"
  assumes "below_antisym": "!!x y. [| x << y; y << x |] ==> x = y"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOLCF.Porder"
### 0.334s elapsed time, 1.160s cpu time, 0.122s GC time
Loading theory "HOLCF.Pcpo" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun" via "HOLCF.Cpodef" via "HOLCF.Adm" via "HOLCF.Cont")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.382s elapsed time, 5.138s cpu time, 1.039s GC time
Found termination order: "size <*mlex*> {}"
class cpo = po +
  assumes "cpo": "!!S. chain S ==> EX x. range S <<| x"
Found termination order: "size <*mlex*> {}"
class pcpo = cpo +
  assumes "least": "EX x. ALL y. x << y"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class chfin = po +
  assumes "chfin": "!!Y. chain Y ==> EX n. max_in_chain n Y"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class flat = pcpo +
  assumes "ax_flat": "!!x y. x << y ==> x = \<bottom> | x = y"
Found termination order: "size <*mlex*> {}"
class discrete_cpo = below +
  assumes "discrete_cpo": "!!x y. (x << y) = (x = y)"
### theory "HOL-Library.Tree"
### 2.092s elapsed time, 6.731s cpu time, 1.319s GC time
Loading theory "Draft.Templates" (required by "Draft.OpSemMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.124s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OpSemMoreTemplates")
### theory "HOLCF.Pcpo"
### 0.840s elapsed time, 1.818s cpu time, 0.173s GC time
Loading theory "HOLCF.Cont" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun" via "HOLCF.Cpodef" via "HOLCF.Adm")
### theory "HOLCF.Cont"
### 0.142s elapsed time, 0.282s cpu time, 0.000s GC time
Loading theory "HOLCF.Adm" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun" via "HOLCF.Cpodef")
Loading theory "HOLCF.Discrete" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Ssum" via "HOLCF.Tr" via "HOLCF.Lift")
### theory "HOLCF.Adm"
### 0.101s elapsed time, 0.310s cpu time, 0.067s GC time
Loading theory "HOLCF.Cpodef" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun")
Loading theory "HOLCF.Fun_Cpo" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun")
instantiation
  fun :: (type, below) below
  below_fun == below :: ('a => 'b) => ('a => 'b) => bool
### theory "HOLCF.Fun_Cpo"
### 0.061s elapsed time, 0.251s cpu time, 0.000s GC time
Loading theory "HOLCF.Product_Cpo" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun")
instantiation
  unit :: discrete_cpo
  below_unit == below :: unit => unit => bool
instantiation
  prod :: (below, below) below
  below_prod == below :: 'a * 'b => 'a * 'b => bool
### ML warning (line 143 of "~~/src/HOL/HOLCF/Tools/cpodef.ML"):
### Value identifier (name) has not been referenced.
signature CPODEF =
  sig
    val add_cpodef:
       binding * (string * sort) list * mixfix ->
         term ->
           Typedef.bindings option ->
             (Proof.context -> tactic) * (Proof.context -> tactic) ->
               theory -> (Typedef.info * cpo_info) * theory
    val add_pcpodef:
       binding * (string * sort) list * mixfix ->
         term ->
           Typedef.bindings option ->
             (Proof.context -> tactic) * (Proof.context -> tactic) ->
               theory -> (Typedef.info * cpo_info * pcpo_info) * theory
    val add_podef:
       binding * (string * sort) list * mixfix ->
         term ->
           Typedef.bindings option ->
             (Proof.context -> tactic) ->
               theory -> (Typedef.info * thm) * theory
    type cpo_info =
       {adm: thm,
        below_def: thm,
        compact: thm, cont_Abs: thm, cont_Rep: thm, lub: thm}
    val cpodef_proof:
       (binding * (string * sort) list * mixfix) * term *
       Typedef.bindings option
         -> theory -> Proof.state
    val cpodef_proof_cmd:
       (binding * (string * string option) list * mixfix) * string *
       Typedef.bindings option
         -> theory -> Proof.state
    type pcpo_info =
       {Abs_bottom_iff: thm,
        Abs_strict: thm, Rep_bottom_iff: thm, Rep_strict: thm}
    val pcpodef_proof:
       (binding * (string * sort) list * mixfix) * term *
       Typedef.bindings option
         -> theory -> Proof.state
    val pcpodef_proof_cmd:
       (binding * (string * string option) list * mixfix) * string *
       Typedef.bindings option
         -> theory -> Proof.state
  end
structure Cpodef: CPODEF
### theory "HOLCF.Cpodef"
### 0.196s elapsed time, 0.773s cpu time, 0.085s GC time
### theory "HOLCF.Product_Cpo"
### 0.150s elapsed time, 0.575s cpu time, 0.085s GC time
Loading theory "HOLCF.Cfun" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.605s elapsed time, 1.781s cpu time, 0.152s GC time
instantiation
  discr :: (type) discrete_cpo
  below_discr == below :: 'a discr => 'a discr => bool
### theory "HOLCF.Discrete"
### 0.421s elapsed time, 1.455s cpu time, 0.211s GC time
### theory "HOLCF.Cfun"
### 0.393s elapsed time, 0.592s cpu time, 0.059s GC time
Loading theory "HOLCF.Completion" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal")
Loading theory "HOLCF.Cprod" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite")
Loading theory "HOLCF.Deflation" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions")
Loading theory "HOLCF.Fix" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Domain_Aux" via "HOLCF.Fixrec")
consts
  iterate :: "nat => ('a -> 'a) -> 'a -> 'a"
locale deflation
  fixes d :: "'a -> 'a"
  assumes "deflation d"
locale Completion.preorder
  fixes r :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 50)
  assumes "preorder (\<preceq>)"
### theory "HOLCF.Cprod"
### 0.040s elapsed time, 0.156s cpu time, 0.000s GC time
Loading theory "HOLCF.Sfun" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions")
locale finite_deflation
  fixes d :: "'a -> 'a"
  assumes "finite_deflation d"
locale ep_pair
  fixes e :: "'a -> 'b"
    and p :: "'b -> 'a"
  assumes "ep_pair e p"
### theory "HOLCF.Fix"
### 0.111s elapsed time, 0.432s cpu time, 0.065s GC time
Loading theory "HOLCF.Sprod" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions")
locale ideal_completion
  fixes r :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 50)
    and principal :: "'a => 'b"
    and rep :: "'b => 'a set"
  assumes "ideal_completion (\<preceq>) principal rep"
### theory "HOLCF.Sfun"
### 0.092s elapsed time, 0.360s cpu time, 0.065s GC time
Loading theory "HOLCF.Up" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Ssum" via "HOLCF.Tr" via "HOLCF.Lift")
locale pcpo_ep_pair
  fixes e :: "'a -> 'b"
    and p :: "'b -> 'a"
  assumes "pcpo_ep_pair e p"
### theory "HOLCF.Deflation"
### 0.146s elapsed time, 0.581s cpu time, 0.065s GC time
### theory "HOLCF.Completion"
### 0.169s elapsed time, 0.650s cpu time, 0.065s GC time
### theory "HOLCF.Sprod"
### 0.172s elapsed time, 0.478s cpu time, 0.072s GC time
consts
  Ifup :: "('a -> 'b) => 'a\<^sub>\<bottom> => 'b"
instantiation
  u :: (cpo) below
  below_u == below :: 'a\<^sub>\<bottom> => 'a\<^sub>\<bottom> => bool
### theory "HOLCF.Up"
### 0.378s elapsed time, 0.626s cpu time, 0.072s GC time
Loading theory "HOLCF.Lift" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Ssum" via "HOLCF.Tr")
Proofs for inductive predicate(s) "rec_set_lift"
### theory "HOLCF.Lift"
### 0.260s elapsed time, 0.311s cpu time, 0.067s GC time
Loading theory "HOLCF.One" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Domain_Aux" via "HOLCF.Fixrec")
Loading theory "HOLCF.Tr" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Ssum")
### theory "HOLCF.One"
### 0.039s elapsed time, 0.078s cpu time, 0.000s GC time
val split_If_tac = fn: Proof.context -> int -> tactic
### theory "HOLCF.Tr"
### 0.086s elapsed time, 0.125s cpu time, 0.000s GC time
Loading theory "HOLCF.Ssum" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions")
### theory "HOLCF.Ssum"
### 0.140s elapsed time, 0.181s cpu time, 0.057s GC time
Loading theory "HOLCF.Fixrec" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Domain_Aux")
Loading theory "HOLCF.Map_Functions" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite")
### theory "HOLCF.Map_Functions"
### 0.492s elapsed time, 1.000s cpu time, 0.043s GC time
Loading theory "HOLCF.Bifinite" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal")
### ML warning (file "~~/src/HOL/HOLCF/Tools/holcf_library.ML"):
### Pattern is not exhaustive.
structure HOLCF_Library:
  sig
    val -->> : typ list * typ -> typ
    val ->> : typ * typ -> typ
    val ` : term * term -> term
    val below_const: typ -> term
    val big_lambda: term -> term -> term
    val big_lambdas: term list -> term -> term
    val cabs_const: typ * typ -> term
    val capply_const: typ * typ -> term
    val dest_cfunT: typ -> typ * typ
    val dest_matchT: typ -> typ
    val dest_sprodT: typ -> typ * typ
    val dest_ssumT: typ -> typ * typ
    val dest_upT: typ -> typ
    val from_sinl: typ * typ -> term
    val from_sinr: typ * typ -> term
    val from_up: typ -> term
    val fup_const: typ * typ -> term
    val iterate_const: typ -> term
    val lambda_tuple: term list -> term -> term
    val lambdas: term list -> term -> term
    val list_ccomb: term * term list -> term
    val mk_ID: typ -> term
    val mk_adm: term -> term
    val mk_all: term * term -> term
    val mk_below: term * term -> term
    val mk_bottom: typ -> term
    val mk_cabs: term -> term
    val mk_capply: term * term -> term
    val mk_cfcomp: term * term -> term
    val mk_cfunT: typ * typ -> typ
    val mk_chain: term -> term
    val mk_compact: term -> term
    val mk_conj: term * term -> term
    val mk_cont: term -> term
    val mk_defined: term -> term
    val mk_disj: term * term -> term
    val mk_eq: term * term -> term
    val mk_equals: term * term -> term
    val mk_ex: term * term -> term
    val mk_fail: typ -> term
    val mk_fix: term -> term
    val mk_fst: term -> term
    val mk_fup: term -> term
    val mk_imp: term * term -> term
    val mk_iterate: term * term -> term
    val mk_lub: term -> term
    val mk_matchT: typ -> typ
    val mk_not: term -> term
    val mk_one_case: term -> term
    val mk_prodT: typ * typ -> typ
    val mk_sinjects: term list -> term list
    val mk_snd: term -> term
    val mk_spair: term * term -> term
    val mk_sprodT: typ * typ -> typ
    val mk_sscase: term * term -> term
    val mk_ssplit: term -> term
    val mk_ssumT: typ * typ -> typ
    val mk_strict: term -> term
    val mk_strictify: term -> term
    val mk_stuple: term list -> term
    val mk_succeed: term -> term
    val mk_trp: term -> term
    val mk_tuple: term list -> term
    val mk_tupleT: typ list -> typ
    val mk_undef: term -> term
    val mk_up: term -> term
    val mk_upT: typ -> typ
    val oneT: typ
    val one_case_const: typ -> term
    val sfst_const: typ * typ -> term
    val sinl_const: typ * typ -> term
    val sinr_const: typ * typ -> term
    val spair_const: typ * typ -> term
    val sscase_const: typ * typ * typ -> term
    val ssnd_const: typ * typ -> term
    val ssplit_const: typ * typ * typ -> term
    val succeed_const: typ -> term
    val trT: typ
    val up_const: typ -> term
  end
signature FIXREC =
  sig
    val add_fixrec:
       (binding * typ option * mixfix) list ->
         (bool * (Attrib.binding * term)) list ->
           local_theory -> local_theory
    val add_fixrec_cmd:
       (binding * string option * mixfix) list ->
         (bool * (Attrib.binding * string)) list ->
           local_theory -> local_theory
    val add_matchers: (string * string) list -> theory -> theory
    val fixrec_simp_tac: Proof.context -> int -> tactic
  end
structure Fixrec: FIXREC
### theory "HOLCF.Fixrec"
### 0.709s elapsed time, 1.466s cpu time, 0.115s GC time
Loading theory "HOLCF.Domain_Aux" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain")
locale approx_chain
  fixes approx :: "nat => 'a -> 'a"
  assumes "approx_chain approx"
locale iso
  fixes abs :: "'a -> 'b"
    and rep :: "'b -> 'a"
  assumes "Domain_Aux.iso abs rep"
class bifinite = pcpo +
  assumes "bifinite": "EX a. approx_chain a"
class profinite = cpo +
  assumes "profinite": "EX a. approx_chain a"
### theory "HOLCF.Bifinite"
### 0.953s elapsed time, 2.329s cpu time, 1.006s GC time
Loading theory "HOLCF.Universal" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic")
signature DOMAIN_TAKE_PROOFS =
  sig
    val add_deflation_thm: thm -> theory -> theory
    val add_lub_take_theorems:
       (binding * iso_info) list ->
         take_info -> thm list -> theory -> take_induct_info * theory
    val add_rec_type: string * bool list -> theory -> theory
    val define_take_functions:
       (binding * iso_info) list -> theory -> take_info * theory
    val get_deflation_thms: theory -> thm list
    val get_map_ID_thms: theory -> thm list
    val get_rec_tab: theory -> bool list Symtab.table
    type iso_info =
       {absT: typ,
        abs_const: term,
        abs_inverse: thm, repT: typ, rep_const: term, rep_inverse: thm}
    val map_ID_add: attribute
    val map_of_typ: theory -> (typ * term) list -> typ -> term
    type take_induct_info =
       {chain_take_thms: thm list,
        deflation_take_thms: thm list,
        finite_consts: term list,
        finite_defs: thm list,
        is_finite: bool,
        lub_take_thms: thm list,
        reach_thms: thm list,
        take_0_thms: thm list,
        take_Suc_thms: thm list,
        take_consts: term list,
        take_defs: thm list,
        take_induct_thms: thm list,
        take_lemma_thms: thm list, take_strict_thms: thm list}
    type take_info =
       {chain_take_thms: thm list,
        deflation_take_thms: thm list,
        finite_consts: term list,
        finite_defs: thm list,
        take_0_thms: thm list,
        take_Suc_thms: thm list,
        take_consts: term list,
        take_defs: thm list, take_strict_thms: thm list}
  end
structure Domain_Take_Proofs: DOMAIN_TAKE_PROOFS
signature CONT_CONSTS =
  sig
    val add_consts: (binding * typ * mixfix) list -> theory -> theory
    val add_consts_cmd: (binding * string * mixfix) list -> theory -> theory
  end
structure Cont_Consts: CONT_CONSTS
signature CONT_PROC =
  sig
    val all_cont_thms: term -> thm list
    val cont_proc: simproc
    val cont_tac: Proof.context -> int -> tactic
    val cont_thms: term -> thm list
    val is_lcf_term: term -> bool
    val setup: theory -> theory
  end
structure ContProc: CONT_PROC
Proofs for inductive predicate(s) "ubasis_le"
signature DOMAIN_CONSTRUCTORS =
  sig
    val add_domain_constructors:
       binding ->
         (binding * (bool * binding option * typ) list * mixfix) list ->
           Domain_Take_Proofs.iso_info -> theory -> constr_info * theory
    type constr_info =
       {cases: thm list,
        compacts: thm list,
        con_betas: thm list,
        con_rews: thm list,
        con_specs: (term * (bool * typ) list) list,
        dis_rews: thm list,
        dist_eqs: thm list,
        dist_les: thm list,
        exhaust: thm,
        injects: thm list,
        inverts: thm list,
        iso_info: Domain_Take_Proofs.iso_info,
        match_rews: thm list, nchotomy: thm, sel_rews: thm list}
  end
structure Domain_Constructors: DOMAIN_CONSTRUCTORS
  Proving monotonicity ...
signature DOMAIN_INDUCTION =
  sig
    val comp_theorems:
       binding list ->
         Domain_Take_Proofs.take_induct_info ->
           Domain_Constructors.constr_info list ->
             theory -> thm list * theory
    val quiet_mode: bool ref
    val trace_domain: bool ref
  end
structure Domain_Induction: DOMAIN_INDUCTION
### theory "HOLCF.Domain_Aux"
### 1.108s elapsed time, 2.655s cpu time, 1.044s GC time
instantiation
  udom :: below
  below_udom == below :: udom => udom => bool
instantiation
  compact_basis :: (pcpo) below
  below_compact_basis == below ::
    'a compact_basis => 'a compact_basis => bool
locale bifinite_approx_chain
  fixes approx :: "nat => 'a -> 'a"
  assumes "bifinite_approx_chain approx"
consts
  cb_take :: "nat => 'a compact_basis => 'a compact_basis"
locale bifinite_approx_chain
  fixes approx :: "nat => 'a -> 'a"
  assumes "bifinite_approx_chain approx"
### theory "HOLCF.Universal"
### 0.714s elapsed time, 1.093s cpu time, 0.068s GC time
Loading theory "HOLCF.Algebraic" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable")
Loading theory "HOLCF.Compact_Basis" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Powerdomains" via "HOLCF.ConvexPD" via "HOLCF.UpperPD")
instantiation
  fin_defl :: (bifinite) below
  below_fin_defl == below :: 'a fin_defl => 'a fin_defl => bool
### theory "HOLCF.Compact_Basis"
### 0.096s elapsed time, 0.226s cpu time, 0.062s GC time
Loading theory "HOLCF.LowerPD" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Powerdomains" via "HOLCF.ConvexPD")
Loading theory "HOLCF.UpperPD" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Powerdomains" via "HOLCF.ConvexPD")
instantiation
  defl :: (bifinite) below
  below_defl == below :: 'a defl => 'a defl => bool
instantiation
  upper_pd :: (bifinite) below
  below_upper_pd == below :: ('a)\<sharp> => ('a)\<sharp> => bool
instantiation
  lower_pd :: (bifinite) below
  below_lower_pd == below :: ('a)\<flat> => ('a)\<flat> => bool
### theory "HOLCF.Algebraic"
### 0.173s elapsed time, 0.457s cpu time, 0.062s GC time
Loading theory "HOLCF.Representable" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Domain")
class predomain_syn = cpo +
  fixes liftemb :: "'a\<^sub>\<bottom> -> udom\<^sub>\<bottom>"
    and liftprj :: "udom\<^sub>\<bottom> -> 'a\<^sub>\<bottom>"
    and liftdefl :: "'a itself => (udom\<^sub>\<bottom>) defl"
class predomain = predomain_syn +
  assumes "predomain_ep": "ep_pair liftemb liftprj"
  assumes "cast_liftdefl": "cast$(liftdefl TYPE('a)) = liftemb oo liftprj"
### theory "HOLCF.UpperPD"
### 0.623s elapsed time, 2.016s cpu time, 1.208s GC time
### theory "HOLCF.LowerPD"
### 0.625s elapsed time, 2.023s cpu time, 1.208s GC time
Loading theory "HOLCF.ConvexPD" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF" via "HOLCF.Powerdomains")
class domain = pcpo + predomain_syn +
  fixes emb :: "'a -> udom"
    and prj :: "udom -> 'a"
    and defl :: "'a itself => udom defl"
  assumes "ep_pair_emb_prj": "ep_pair emb prj"
  assumes "cast_DEFL": "cast$(defl TYPE('a)) = emb oo prj"
  assumes "liftemb_eq": "liftemb = u_map$emb"
  assumes "liftprj_eq": "liftprj = u_map$prj"
  assumes "liftdefl_eq": "LIFTDEFL('a) = liftdefl_of$(defl TYPE('a))"
instantiation
  convex_pd :: (bifinite) below
  below_convex_pd == below :: ('a)\<natural> => ('a)\<natural> => bool
### theory "HOLCF.ConvexPD"
### 0.468s elapsed time, 0.973s cpu time, 0.068s GC time
instantiation
  udom :: domain
  emb_udom == emb :: udom -> udom
  prj_udom == prj :: udom -> udom
  defl_udom == defl :: udom itself => udom defl
  liftemb_udom == liftemb :: udom\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_udom == liftprj :: udom\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftdefl_udom == liftdefl :: udom itself => (udom\<^sub>\<bottom>) defl
instantiation
  u :: (predomain) domain
  emb_u == emb :: 'a\<^sub>\<bottom> -> udom
  prj_u == prj :: udom -> 'a\<^sub>\<bottom>
  defl_u == defl :: ('a\<^sub>\<bottom>) itself => udom defl
  liftemb_u == liftemb ::
    ('a\<^sub>\<bottom>)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_u == liftprj ::
    udom\<^sub>\<bottom> -> ('a\<^sub>\<bottom>)\<^sub>\<bottom>
  liftdefl_u == liftdefl ::
    ('a\<^sub>\<bottom>) itself => (udom\<^sub>\<bottom>) defl
instantiation
  sfun :: (domain, domain) domain
  emb_sfun == emb :: ('a ->! 'b) -> udom
  prj_sfun == prj :: udom -> 'a ->! 'b
  defl_sfun == defl :: ('a ->! 'b) itself => udom defl
  liftemb_sfun == liftemb ::
    ('a ->! 'b)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_sfun == liftprj ::
    udom\<^sub>\<bottom> -> ('a ->! 'b)\<^sub>\<bottom>
  liftdefl_sfun == liftdefl ::
    ('a ->! 'b) itself => (udom\<^sub>\<bottom>) defl
instantiation
  cfun :: (predomain, domain) domain
  emb_cfun == emb :: ('a -> 'b) -> udom
  prj_cfun == prj :: udom -> 'a -> 'b
  defl_cfun == defl :: ('a -> 'b) itself => udom defl
  liftemb_cfun == liftemb ::
    ('a -> 'b)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_cfun == liftprj ::
    udom\<^sub>\<bottom> -> ('a -> 'b)\<^sub>\<bottom>
  liftdefl_cfun == liftdefl ::
    ('a -> 'b) itself => (udom\<^sub>\<bottom>) defl
instantiation
  sprod :: (domain, domain) domain
  emb_sprod == emb :: 'a ** 'b -> udom
  prj_sprod == prj :: udom -> 'a ** 'b
  defl_sprod == defl :: ('a ** 'b) itself => udom defl
  liftemb_sprod == liftemb ::
    ('a ** 'b)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_sprod == liftprj ::
    udom\<^sub>\<bottom> -> ('a ** 'b)\<^sub>\<bottom>
  liftdefl_sprod == liftdefl ::
    ('a ** 'b) itself => (udom\<^sub>\<bottom>) defl
instantiation
  prod :: (predomain, predomain) predomain
  liftemb_prod == liftemb ::
    ('a * 'b)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_prod == liftprj ::
    udom\<^sub>\<bottom> -> ('a * 'b)\<^sub>\<bottom>
  liftdefl_prod == liftdefl ::
    ('a * 'b) itself => (udom\<^sub>\<bottom>) defl
instantiation
  prod :: (domain, domain) domain
  emb_prod == emb :: 'a * 'b -> udom
  prj_prod == prj :: udom -> 'a * 'b
  defl_prod == defl :: ('a * 'b) itself => udom defl
instantiation
  unit :: domain
  emb_unit == emb :: unit -> udom
  prj_unit == prj :: udom -> unit
  defl_unit == defl :: unit itself => udom defl
  liftemb_unit == liftemb :: unit\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_unit == liftprj :: udom\<^sub>\<bottom> -> unit\<^sub>\<bottom>
  liftdefl_unit == liftdefl :: unit itself => (udom\<^sub>\<bottom>) defl
instantiation
  discr :: (countable) predomain
  liftemb_discr == liftemb ::
    'a discr\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_discr == liftprj ::
    udom\<^sub>\<bottom> -> 'a discr\<^sub>\<bottom>
  liftdefl_discr == liftdefl ::
    'a discr itself => (udom\<^sub>\<bottom>) defl
instantiation
  ssum :: (domain, domain) domain
  emb_ssum == emb :: 'a ++ 'b -> udom
  prj_ssum == prj :: udom -> 'a ++ 'b
  defl_ssum == defl :: ('a ++ 'b) itself => udom defl
  liftemb_ssum == liftemb ::
    ('a ++ 'b)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_ssum == liftprj ::
    udom\<^sub>\<bottom> -> ('a ++ 'b)\<^sub>\<bottom>
  liftdefl_ssum == liftdefl ::
    ('a ++ 'b) itself => (udom\<^sub>\<bottom>) defl
instantiation
  lift :: (countable) domain
  emb_lift == emb :: 'a lift -> udom
  prj_lift == prj :: udom -> 'a lift
  defl_lift == defl :: 'a lift itself => udom defl
  liftemb_lift == liftemb :: 'a lift\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_lift == liftprj :: udom\<^sub>\<bottom> -> 'a lift\<^sub>\<bottom>
  liftdefl_lift == liftdefl :: 'a lift itself => (udom\<^sub>\<bottom>) defl
### theory "HOLCF.Representable"
### 1.713s elapsed time, 3.508s cpu time, 1.333s GC time
Loading theory "HOLCF.Domain" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF")
signature DOMAINDEF =
  sig
    val add_domaindef:
       binding * (string * sort) list * mixfix ->
         term ->
           Typedef.bindings option ->
             theory ->
               (Typedef.info * Cpodef.cpo_info * Cpodef.pcpo_info *
                rep_info)
               *
               theory
    val domaindef_cmd:
       (binding * (string * string option) list * mixfix) * string *
       Typedef.bindings option
         -> theory -> theory
    type rep_info =
       {DEFL: thm,
        defl_def: thm,
        emb_def: thm,
        liftdefl_def: thm, liftemb_def: thm, liftprj_def: thm, prj_def: thm}
  end
structure Domaindef: DOMAINDEF
### ML warning (line 52 of "~~/src/HOL/HOLCF/Tools/Domain/domain_isomorphism.ML"):
### Value identifier (udomT) has not been referenced.
signature DOMAIN_ISOMORPHISM =
  sig
    val define_map_functions:
       (binding * Domain_Take_Proofs.iso_info) list ->
         theory ->
           {deflation_map_thms: thm list,
            map_apply_thms: thm list,
            map_consts: term list,
            map_cont_thm: thm, map_unfold_thms: thm list}
           *
           theory
    val domain_isomorphism:
       (string list * binding * mixfix * typ * (binding * binding) option)
       list
         ->
         theory ->
           (Domain_Take_Proofs.iso_info list *
            Domain_Take_Proofs.take_induct_info)
           *
           theory
    val domain_isomorphism_cmd:
       (string list * binding * mixfix * string * (binding * binding) option
       )
       list
         -> theory -> theory
  end
structure Domain_Isomorphism: DOMAIN_ISOMORPHISM
signature DOMAIN_AXIOMS =
  sig
    val add_axioms:
       (binding * mixfix * (typ * typ)) list ->
         theory ->
           (Domain_Take_Proofs.iso_info list *
            Domain_Take_Proofs.take_induct_info)
           *
           theory
    val axiomatize_isomorphism:
       binding * (typ * typ) ->
         theory -> Domain_Take_Proofs.iso_info * theory
    val axiomatize_lub_take: binding * term -> theory -> thm * theory
  end
structure Domain_Axioms: DOMAIN_AXIOMS
signature DOMAIN =
  sig
    val add_domain:
       ((string * sort) list * binding * mixfix *
        (binding * (bool * binding option * typ) list * mixfix) list
       )
       list
         -> theory -> theory
    val add_domain_cmd:
       ((string * string option) list * binding * mixfix *
        (binding * (bool * binding option * string) list * mixfix) list
       )
       list
         -> theory -> theory
    val add_new_domain:
       ((string * sort) list * binding * mixfix *
        (binding * (bool * binding option * typ) list * mixfix) list
       )
       list
         -> theory -> theory
    val add_new_domain_cmd:
       ((string * string option) list * binding * mixfix *
        (binding * (bool * binding option * string) list * mixfix) list
       )
       list
         -> theory -> theory
  end
structure Domain: DOMAIN
### theory "HOLCF.Domain"
### 0.674s elapsed time, 0.732s cpu time, 0.078s GC time
Loading theory "HOLCF.Powerdomains" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis" via "HOLCF")
instantiation
  upper_pd :: (domain) domain
  emb_upper_pd == emb :: ('a)\<sharp> -> udom
  prj_upper_pd == prj :: udom -> ('a)\<sharp>
  defl_upper_pd == defl :: ('a)\<sharp> itself => udom defl
  liftemb_upper_pd == liftemb ::
    ('a)\<sharp>\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_upper_pd == liftprj ::
    udom\<^sub>\<bottom> -> ('a)\<sharp>\<^sub>\<bottom>
  liftdefl_upper_pd == liftdefl ::
    ('a)\<sharp> itself => (udom\<^sub>\<bottom>) defl
instantiation
  lower_pd :: (domain) domain
  emb_lower_pd == emb :: ('a)\<flat> -> udom
  prj_lower_pd == prj :: udom -> ('a)\<flat>
  defl_lower_pd == defl :: ('a)\<flat> itself => udom defl
  liftemb_lower_pd == liftemb ::
    ('a)\<flat>\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_lower_pd == liftprj ::
    udom\<^sub>\<bottom> -> ('a)\<flat>\<^sub>\<bottom>
  liftdefl_lower_pd == liftdefl ::
    ('a)\<flat> itself => (udom\<^sub>\<bottom>) defl
instantiation
  convex_pd :: (domain) domain
  emb_convex_pd == emb :: ('a)\<natural> -> udom
  prj_convex_pd == prj :: udom -> ('a)\<natural>
  defl_convex_pd == defl :: ('a)\<natural> itself => udom defl
  liftemb_convex_pd == liftemb ::
    ('a)\<natural>\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_convex_pd == liftprj ::
    udom\<^sub>\<bottom> -> ('a)\<natural>\<^sub>\<bottom>
  liftdefl_convex_pd == liftdefl ::
    ('a)\<natural> itself => (udom\<^sub>\<bottom>) defl
### theory "HOLCF.Powerdomains"
### 0.436s elapsed time, 0.437s cpu time, 0.000s GC time
Loading theory "HOLCF" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis")
### theory "HOLCF"
### 0.022s elapsed time, 0.022s cpu time, 0.000s GC time
Loading theory "HOLCF-Library.Nat_Discrete" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.Basis")
instantiation
  nat :: discrete_cpo
  below_nat == below :: nat => nat => bool
instantiation
  nat :: predomain
  liftemb_nat == liftemb :: nat\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_nat == liftprj :: udom\<^sub>\<bottom> -> nat\<^sub>\<bottom>
  liftdefl_nat == liftdefl :: nat itself => (udom\<^sub>\<bottom>) defl
### theory "HOLCF-Library.Nat_Discrete"
### 0.065s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.Basis" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem")
### theory "Draft.Basis"
### 0.380s elapsed time, 0.422s cpu time, 0.058s GC time
Loading theory "Draft.Logical_Relations" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem" via "Draft.PCF")
instantiation
  admS :: (pcpo) order
  less_eq_admS == less_eq :: 'a admS => 'a admS => bool
  less_admS == less :: 'a admS => 'a admS => bool
instantiation
  admS :: (pcpo) lattice
  inf_admS == inf :: 'a admS => 'a admS => 'a admS
  sup_admS == sup :: 'a admS => 'a admS => 'a admS
instantiation
  admS :: (pcpo) bounded_lattice
  bot_admS == bot :: 'a admS
  top_admS == top :: 'a admS
instantiation
  admS :: (pcpo) complete_lattice
  Inf_admS == Inf :: 'a admS set => 'a admS
  Sup_admS == Sup :: 'a admS set => 'a admS
locale DomSol
  fixes F :: "'a dual * 'a => 'a"
  assumes "DomSol F"
locale DomSolV
  fixes F :: "('i => 'd) admS dual * ('i => 'd) admS => ('i => 'd) admS"
    and \<delta> :: "('d -> 'd) -> 'd -> 'd"
  assumes "DomSolV F \<delta>"
locale DomSolV
  fixes F :: "('i => 'd) admS dual * ('i => 'd) admS => ('i => 'd) admS"
    and \<delta> :: "('d -> 'd) -> 'd -> 'd"
  assumes "DomSolV F \<delta>"
instantiation
  synlr :: (pcpo, type) order
  less_eq_synlr == less_eq :: ('a, 'b) synlr => ('a, 'b) synlr => bool
  less_synlr == less :: ('a, 'b) synlr => ('a, 'b) synlr => bool
instantiation
  synlr :: (pcpo, type) lattice
  inf_synlr == inf :: ('a, 'b) synlr => ('a, 'b) synlr => ('a, 'b) synlr
  sup_synlr == sup :: ('a, 'b) synlr => ('a, 'b) synlr => ('a, 'b) synlr
instantiation
  synlr :: (pcpo, type) bounded_lattice
  bot_synlr == bot :: ('a, 'b) synlr
  top_synlr == top :: ('a, 'b) synlr
instantiation
  synlr :: (pcpo, type) complete_lattice
  Inf_synlr == Inf :: ('a, 'b) synlr set => ('a, 'b) synlr
  Sup_synlr == Sup :: ('a, 'b) synlr set => ('a, 'b) synlr
locale DomSolSyn
  fixes F :: "('d, 'a) synlr dual * ('d, 'a) synlr => ('d, 'a) synlr"
    and \<delta> :: "('d -> 'd) -> 'd -> 'd"
  assumes "DomSolSyn F \<delta>"
locale DomSolSyn
  fixes F :: "('d, 'a) synlr dual * ('d, 'a) synlr => ('d, 'a) synlr"
    and \<delta> :: "('d -> 'd) -> 'd -> 'd"
  assumes "DomSolSyn F \<delta>"
locale DomSolP
  fixes
    F :: "(('am * 'bm) admS * ('av * 'bv) admS) dual *
          ('am * 'bm) admS * ('av * 'bv) admS
          => ('am * 'bm) admS * ('av * 'bv) admS"
    and ad :: "('am -> 'am) * ('av -> 'av) -> ('am -> 'am) * ('av -> 'av)"
    and bd :: "('bm -> 'bm) * ('bv -> 'bv) -> ('bm -> 'bm) * ('bv -> 'bv)"
  assumes "DomSolP F ad bd"
locale DomSolP
  fixes
    F :: "(('am * 'bm) admS * ('av * 'bv) admS) dual *
          ('am * 'bm) admS * ('av * 'bv) admS
          => ('am * 'bm) admS * ('av * 'bv) admS"
    and ad :: "('am -> 'am) * ('av -> 'av) -> ('am -> 'am) * ('av -> 'av)"
    and bd :: "('bm -> 'bm) * ('bv -> 'bv) -> ('bm -> 'bm) * ('bv -> 'bv)"
  assumes "DomSolP F ad bd"
### theory "Draft.Logical_Relations"
### 0.506s elapsed time, 0.566s cpu time, 0.082s GC time
Loading theory "Draft.PCF" (required by "Draft.OpSemMoreTemplates" via "Draft.OpSem")
Proving isomorphism properties of domain ValD ...
Indirect recursion detected, skipping proofs of (co)induction rules
consts
  evalD :: "expr => (nat -> ValD) -> ValD"
### theory "Draft.PCF"
### 1.950s elapsed time, 2.112s cpu time, 0.221s GC time
Loading theory "Draft.OpSem" (required by "Draft.OpSemMoreTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  evalDdb :: "db => (nat -> ValD) -> ValD"
consts
  index :: "nat list => nat => nat => nat"
consts
  transdb :: "expr => nat list => db"
Found termination order: "size <*mlex*> {}"
consts
  transdb_inv :: "db => (nat => nat) => nat => nat => expr"
Proofs for inductive predicate(s) "val"
  Proving monotonicity ...
Proofs for inductive predicate(s) "evalOP"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "have_the_same_form"
  Proving monotonicity ...
### theory "Draft.OpSem"
### 2.422s elapsed time, 2.842s cpu time, 0.309s GC time
Loading theory "Draft.OpSemMoreTemplates"
val templateLemmas =
   [("OpSem.closed_inv", "OpSem.closed (DBNum ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("OpSem.synlr_cal_lr_rep", "ca_lf_rep ?r : synlr",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("OpSem.Prog_simps", "mkProg (unProg ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("OpSem.closed_inv", "OpSem.closed (DBIsZero ?e) = OpSem.closed ?e",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("OpSem.closed_inv", "OpSem.closed (DBPred ?e) = OpSem.closed ?e",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("OpSem.closed_inv", "OpSem.closed (DBSucc ?e) = OpSem.closed ?e",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("OpSem.subst_Consts", "DBDiverge<?s/?k> = DBDiverge",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_hole 0)),
    ("OpSem.subst_Consts", "DBff<?s/?k> = DBff",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_hole 0)),
    ("OpSem.subst_Consts", "DBtt<?s/?k> = DBtt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_hole 0)),
    ("OpSem.bot_ca_lf_rep", "(\<bottom>, ?P) : ca_lf_rep ?r",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("OpSem.subst_eq", "DBVar ?k<?u/?k> = ?u",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_var 1),
       template_var 0)),
    ("OpSem.ca_lrI", "OpSem.closed ?P ==> \<bottom> \<triangleleft> ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("OpSem.eval_val", "val ?t ==> ?t \<Down> ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 0)
           ))),
    ("OpSem.closed_ca_lr", "?d \<triangleleft> ?P ==> OpSem.closed ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("OpSem.eval_to", "?t \<Down> ?t' ==> val ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("OpSem.subst_Consts", "DBNum ?v<?s/?k> = DBNum ?v",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0),
       template_app (template_hole 0, template_var 2))),
    ("OpSem.subst_lift", "lift ?t ?k<?s/?k> = ?t",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_var 1),
       template_var 2)),
    ("OpSem.ctxt_sub_closed", "OpSem.closed ?e ==> OpSem.closed (?C<?e>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("OpSem.env_ext_same_db", "env_ext_db$?x$?\<rho>$0 = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1)),
             template_var 0)),
         template_hole 0),
       template_var 1)),
    ("OpSem.adm_ca_lr",
     "OpSem.closed ?P ==> adm (%x. x \<triangleleft> ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("OpSem.Prog_simps", "OpSem.closed ?y ==> unProg (mkProg ?y) = ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("OpSem.closed_inv",
     "OpSem.closed (DBApp ?f ?x) = (OpSem.closed ?f & OpSem.closed ?x)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("OpSem.ca_closed",
     "OpSem.closed ?e ==> evalDdb ?e$env_empty_db \<triangleleft> ?e",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)),
             template_var 0)
           ))),
    ("OpSem.index_Suc",
     "index ?\<Gamma> ?v (Suc ?i) = Suc (index ?\<Gamma> ?v ?i)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("OpSem.evalOP_closed",
     "[| ?P \<Down> ?V; OpSem.closed ?P |] ==> OpSem.closed ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("OpSem.env_ext_neq_db", "env_ext_db$?x$?\<rho>$(Suc ?v) = ?\<rho>$?v",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 4, template_var 1), template_var 0))),
    ("OpSem.closed_transdb_inv",
     "OpSem.closed ?e ==> free (transdb_inv ?e ?\<Gamma> 0 0) = []",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0),
               template_hole 1),
             template_hole 1)),
         template_hole 0))),
    ("OpSem.eval_val_not_bot",
     "?P \<Down> ?V ==> evalDdb ?V$?\<rho> ~= \<bottom>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0),
             template_hole 0)
           ))),
    ("OpSem.ca_lrI",
     "[| ?P \<Down> DBff; OpSem.closed ?P |] ==> ValFF \<triangleleft> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("OpSem.ca_lrI",
     "[| ?P \<Down> DBtt; OpSem.closed ?P |] ==> ValTT \<triangleleft> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("OpSem.closed_invs",
     "OpSem.closed (DBAbsN ?e) = (ALL i. freedb ?e i --> i = 0)",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("OpSem.closed_invs",
     "OpSem.closed (DBAbsV ?e) = (ALL i. freedb ?e i --> i = 0)",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("OpSem.closed_invs",
     "OpSem.closed (DBFix ?e) = (ALL i. freedb ?e i --> i = 0)",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("OpSem.transdb_inv",
     "OpSem.closed ?e ==>
      transdb (transdb_inv ?e ?\<Gamma> ?c ?k) ?\<Gamma>' = ?e",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0),
         template_var 4))),
    ("OpSem.evalDdb_env_closed",
     "OpSem.closed ?e ==> evalDdb ?e$?\<rho> = evalDdb ?e$?\<rho>'",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("OpSem.subst_lt", "?j < ?i ==> DBVar ?j<?u/?i> = DBVar ?j",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0),
           template_var 1),
         template_app (template_hole 0, template_var 2)))),
    ("OpSem.evalOP_deterministic",
     "[| ?P \<Down> ?V; ?P \<Down> ?V' |] ==> ?V = ?V'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("OpSem.closed_inv",
     "OpSem.closed (DBCond ?c ?t ?e) =
      (OpSem.closed ?c & OpSem.closed ?t & OpSem.closed ?e)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("OpSem.evalOP_sound",
     "?P \<Down> ?V ==> evalDdb ?P$?\<rho> = evalDdb ?V$?\<rho>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("OpSem.lift_subst_dummy",
     "~ freedb ?s ?i ==> lift (?s<?dummy/?i>) ?i = ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1)),
           template_var 1),
         template_var 2))),
    ("OpSem.evalOP_inv", "[| DBff \<Down> ?v; ?v = DBff ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OpSem.evalOP_inv", "[| DBtt \<Down> ?v; ?v = DBtt ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OpSem.subst_AbsN", "DBAbsN ?t<?s/?k> = DBAbsN (?t<lift ?s 0/?k + 1>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("OpSem.subst_AbsV", "DBAbsV ?t<?s/?k> = DBAbsV (?t<lift ?s 0/?k + 1>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("OpSem.subst_gt", "?i < ?j ==> DBVar ?j<?u/?i> = DBVar (?j - 1)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 0),
           template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("OpSem.subst_not_free", "~ freedb ?s ?i ==> ?s<?t/?i> = ?s<?u/?i>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2)))),
    ("OpSem.ca_lrI",
     "[| ?P \<Down> DBNum ?n; OpSem.closed ?P |]
      ==> ValN$?n \<triangleleft> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)),
             template_var 1)
           ))),
    ("OpSem.subst_App",
     "DBApp ?t ?u<?s/?k> = DBApp (?t<?s/?k>) (?u<?s/?k>)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("OpSem.closed_closing_subst",
     "ALL v. freedb ?e v --> OpSem.closed (?\<Gamma> v) ==>
      OpSem.closed (closing_subst ?e ?\<Gamma> 0)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_hole 0))
           ))),
    ("OpSem.closed_lift",
     "ALL v. freedb ?e v --> v < ?k ==> lift ?e ?k = ?e",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("OpSem.evalOP_inv",
     "[| DBNum ?n \<Down> ?v; ?v = DBNum ?n ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 1, template_var 2))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OpSem.evalD_evalDdb",
     "free ?e = [] ==>
      \<lbrakk>?e\<rbrakk>?\<rho> = evalDdb (transdb ?e [])$?\<rho>",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1), template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_hole 5))),
           template_var 0)))),
    ("OpSem.closing_subst_closed",
     "ALL v. freedb ?e v --> v < ?k ==> closing_subst ?e ?\<Gamma> ?k = ?e",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1),
         template_var 2))),
    ("OpSem.closed_subst",
     "ALL v. freedb ?e v --> v < ?k ==> ?e<?s/?k> = ?e",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0),
           template_var 1),
         template_var 2))),
    ("OpSem.ca",
     "[| evalDdb ?e$env_empty_db ~= \<bottom>; OpSem.closed ?e |]
      ==> EX V. ?e \<Down> V",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 0)),
                template_hole 4),
              template_hole 3)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("OpSem.evalDdb_subst_env_ext_db",
     "evalDdb (?e<?s/0>)$?\<rho> =
      evalDdb ?e$(env_ext_db$(evalDdb ?s$?\<rho>)$?\<rho>)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_hole 3))),
         template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_var 0))),
           template_var 0)))),
    ("OpSem.lift_lift",
     "?i < ?k + 1 ==> lift (lift ?t ?i) (Suc ?k) = lift (lift ?t ?k) ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2)))),
    ("OpSem.evalOP_inv",
     "[| DBFix ?P \<Down> ?v; ?P<DBFix ?P/0> \<Down> ?v ==> ?Pa |] ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_app (template_hole 2, template_var 2)),
                     template_hole 0)),
                 template_var 1)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("OpSem.subst_Var",
     "DBVar ?i<?s/?k> =
      (if ?k < ?i then DBVar (?i - 1)
       else if ?i = ?k then ?s else DBVar ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 2)),
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1))),
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 1),
               template_app (template_hole 5, template_var 2)))
           ))),
    ("OpSem.evalOP_inv",
     "[| DBAbsN ?e \<Down> ?v;
         [| ?v = DBAbsN ?e; val (DBAbsN ?e) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 2, template_var 2))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_hole 0,
                   template_app (template_hole 2, template_var 2))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("OpSem.evalOP_inv",
     "[| DBAbsV ?e \<Down> ?v;
         [| ?v = DBAbsV ?e; val (DBAbsV ?e) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation
            (template_var 1,
             template_app (template_hole 2, template_var 2))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_hole 0,
                   template_app (template_hole 2, template_var 2))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("OpSem.computational_adequacy",
     "[| OpSem.closed ?e1.0; OpSem.closed ?e2.0;
         evalDdb ?e1.0$env_empty_db = evalDdb ?e2.0$env_empty_db |]
      ==> ?e1.0 \<approx> ?e2.0",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1)),
            template_hole 1),
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0)),
            template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("OpSem.computational_adequacy_refines",
     "[| OpSem.closed ?e1.0; OpSem.closed ?e2.0;
         evalDdb ?e1.0$env_empty_db = evalDdb ?e2.0$env_empty_db |]
      ==> ?e1.0 \<unlhd> ?e2.0",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1)),
            template_hole 1),
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0)),
            template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("OpSem.have_the_same_form_sound",
     "[| evalDdb ?v1.0$?\<rho> = evalDdb ?v2.0$?\<rho>; val ?v1.0;
         val ?v2.0 |]
      ==> ?v1.0 \<sim> ?v2.0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 2)),
            template_var 1),
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0)),
            template_var 1)),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("OpSem.free_lift",
     "freedb (lift ?t ?k) ?i =
      (?i < ?k & freedb ?t ?i | ?k < ?i & freedb ?t (?i - 1))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("OpSem.evalDdb_lift",
     "evalDdb (lift ?s ?k)$?\<rho> =
      evalDdb ?s$(LAM i. if i < ?k then ?\<rho>$i else ?\<rho>$(Suc i))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 2)),
         template_app (template_hole 4, t_empty)))),
    ("OpSem.lift_subst_lt",
     "?i < ?j + 1 ==> lift (?t<?s/?j>) ?i = lift ?t ?i<lift ?s ?i/?j + 1>",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2)),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 3)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_hole 3))))),
    ("OpSem.lift_subst",
     "?j < ?i + 1 ==>
      lift (?t<?s/?j>) ?i = lift ?t (?i + 1)<lift ?s ?i/?j>",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_hole 3))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_var 3)))),
    ("OpSem.evalDdb_env_cong",
     "ALL v. freedb ?e v --> ?\<rho>$v = ?\<rho>'$v ==>
      evalDdb ?e$?\<rho> = evalDdb ?e$?\<rho>'",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("OpSem.free_subst",
     "freedb (?s<?t/?k>) ?i =
      (freedb ?s ?k & freedb ?t ?i |
       freedb ?s (if ?i < ?k then ?i else ?i + 1))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 7, template_var 3),
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1)),
               template_var 0),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("OpSem.evalOP_inv",
     "[| DBPred ?E \<Down> ?v;
         !!n. [| ?v = DBNum n; ?E \<Down> DBNum (Suc n) |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("OpSem.evalOP_inv",
     "[| DBSucc ?E \<Down> ?v;
         !!n. [| ?v = DBNum (Suc n); ?E \<Down> DBNum n |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("OpSem.ValD_strict",
     "[| ?f$?a$?b = ValTT; ?f$?x$?y = ValFF |]
      ==> ?f$\<bottom>$\<bottom> = \<bottom>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3)),
            template_var 2),
          template_hole 4),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 1)),
            template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 4),
               template_hole 2)),
           template_hole 1),
         template_hole 0))),
    ("OpSem.ValD_ValTT",
     "[| ?f$\<bottom>$ValTT = ValTT; ?f$ValTT$\<bottom> = ValTT |]
      ==> ?f$ValTT$ValTT = ValTT",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1)),
            template_hole 0),
          template_hole 0),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 0)),
            template_hole 1),
          template_hole 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 0)),
           template_hole 0),
         template_hole 0))),
    ("OpSem.ca_open",
     "ALL v.
         freedb ?e v -->
         ?\<rho>$v \<triangleleft> ?\<Gamma> v &
         OpSem.closed (?\<Gamma> v) ==>
      evalDdb ?e$?\<rho> \<triangleleft> closing_subst ?e ?\<Gamma> 0",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0),
               template_hole 0))
           ))),
    ("OpSem.refinesI",
     "(!!C V1.
          C<?e1.0> \<Down> V1 ==>
          EX V2. C<?e2.0> \<Down> V2 & V1 \<sim> V2) ==>
      ?e1.0 \<unlhd> ?e2.0",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("OpSem.subst_subst",
     "?i < ?j + 1 ==>
      ?t<lift ?v ?i/Suc ?j><?u<?v/?j>/?i> = ?t<?u/?i><?v/?j>",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app
           (template_app (template_hole 5, template_var 3),
            template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 4)),
                 template_app (template_hole 0, template_var 3))),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1),
               template_var 3)),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0),
                 template_var 4)),
             template_var 1),
           template_var 3)))),
    ("OpSem.freedb_closing_subst",
     "ALL v. freedb ?e v & ?k <= v --> OpSem.closed (?\<Gamma> (v - ?k)) ==>
      freedb (closing_subst ?e ?\<Gamma> ?k) ?i = (freedb ?e ?i & ?i < ?k)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("OpSem.ctxt_sub_cong",
     "[| OpSem.closed ?e1.0; OpSem.closed ?e2.0;
         evalDdb ?e1.0$env_empty_db = evalDdb ?e2.0$env_empty_db |]
      ==> evalDdb (?C<?e1.0>)$env_empty_db =
          evalDdb (?C<?e2.0>)$env_empty_db",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 2)),
            template_hole 1),
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1)),
            template_hole 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))),
           template_hole 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))),
           template_hole 1)))),
    ("OpSem.evalDdb_subst",
     "evalDdb (?e<?s/?x>)$?\<rho> =
      evalDdb ?e$
      (LAM i.
          if ?x < i then ?\<rho>$(i - 1)
          else if i = ?x then evalDdb ?s$?\<rho> else ?\<rho>$i)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 3)),
         template_app (template_hole 6, t_empty)))),
    ("OpSem.ca_lr_DBAbsNI",
     "[| ?P \<Down> DBAbsN ?M; OpSem.closed ?P;
         !!x X. x \<triangleleft> X ==> ?f$x \<triangleleft> ?M<X/0> |]
      ==> ValF$?f \<triangleleft> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)),
             template_var 2)
           ))),
    ("OpSem.evalD_evalDdb_open",
     "[| set (free ?e) <= set ?\<Gamma>;
         ALL v:set ?\<Gamma>. ?\<rho>'$(index ?\<Gamma> v 0) = ?\<rho>$v |]
      ==> \<lbrakk>?e\<rbrakk>?\<rho> =
          evalDdb (transdb ?e ?\<Gamma>)$?\<rho>'",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_var 3)),
          template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 10, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 3)),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2))),
           template_var 1)))),
    ("OpSem.evalOP_inv",
     "[| DBCond ?C ?T ?E \<Down> ?v;
         [| ?C \<Down> DBtt; ?T \<Down> ?v |] ==> ?P;
         [| ?C \<Down> DBff; ?E \<Down> ?v |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_hole 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 1)
                 )],
            template_predicate (template_var 0))),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_hole 0)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("OpSem.subst_closing_subst",
     "[| ALL v.
            freedb ?e v & ?k < v --> OpSem.closed (?\<Gamma> (v - Suc ?k));
         OpSem.closed ?X |]
      ==> closing_subst ?e ?\<Gamma> (Suc ?k)<?X/?k> =
          closing_subst ?e (case_nat ?X ?\<Gamma>) ?k",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1),
                 template_app (template_hole 4, template_var 2))),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2)))),
    ("OpSem.closing_subst_evalDdb_cong",
     "[| ALL v. OpSem.closed (?\<Gamma> v) & OpSem.closed (?\<Gamma>' v);
         ALL v.
            evalDdb (?\<Gamma> v)$env_empty_db =
            evalDdb (?\<Gamma>' v)$env_empty_db |]
      ==> evalDdb (closing_subst ?e ?\<Gamma> ?k)$?\<rho> =
          evalDdb (closing_subst ?e ?\<Gamma>' ?k)$?\<rho>",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 4),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 1))),
           template_var 0)))),
    ("OpSem.evalOP_inv",
     "[| DBIsZero ?E \<Down> ?v; [| ?v = DBtt; ?E \<Down> DBNum 0 |] ==> ?P;
         !!n. [| ?v = DBff; ?E \<Down> DBNum n; 0 < n |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 1, template_hole 5)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_app (template_hole 4, template_hole 3))
                 )],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("OpSem.closed_transdb_inv_aux",
     "[| ALL v. freedb ?e v --> v < ?k;
         ALL v. freedb ?e v --> ?\<Gamma> v = ?k - v - 1 |]
      ==> (?i : set (free (transdb_inv ?e ?\<Gamma> 0 ?k))) =
          (?i < ?k & freedb ?e (?k - ?i - 1))",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 1),
                   template_hole 1),
                 template_var 2)))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 10, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 11, template_var 3),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_var 0)),
               template_hole 7)))))),
    ("OpSem.ca_lr_DBAbsVI",
     "[| ?P \<Down> DBAbsV ?M; OpSem.closed ?P; ?f$\<bottom> = \<bottom>;
         !!x X V.
            [| x \<triangleleft> X; X \<Down> V |]
            ==> ?f$x \<triangleleft> ?M<V/0> |]
      ==> ValF$?f \<triangleleft> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app (template_hole 11, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 0),
            template_hole 7),
          template_hole 7),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)),
             template_var 2)
           ))),
    ("OpSem.min_inv_ca_lr",
     "[| ?e$\<bottom> = \<bottom>; eRSS ?e ?R' ?S' |]
      ==> eRSS (ValD_copy_rec$?e) (dual (ca_lr (dual ?S', undual ?R')))
           (ca_lr (?R', ?S'))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 13, template_var 2),
            template_hole 12),
          template_hole 12),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 1))),
              template_app (template_hole 8, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app
                  (template_hole 9,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_hole 5, template_var 0)),
                           template_app
                            (template_hole 9, template_var 1)))))))),
             template_app (template_hole 8, t_empty))
           ))),
    ("OpSem.evalOP_inv",
     "[| DBApp ?P ?Q \<Down> ?v;
         !!M. [| ?P \<Down> DBAbsN M; M<?Q/0> \<Down> ?v |] ==> ?Pa;
         !!M q.
            [| ?P \<Down> DBAbsV M; ?Q \<Down> q; M<q/0> \<Down> ?v |]
            ==> ?Pa |]
      ==> ?Pa",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("OpSem.transdb_inv_open",
     "[| ALL v. freedb ?e v --> v < ?c + ?k;
         ALL v.
            freedb ?e v -->
            ?\<Gamma> v = (if ?k <= v then v - ?k else ?c + ?k - v - 1);
         ALL v.
            freedb ?e v -->
            (if ?k <= v then index ?\<Gamma>' (v - ?k) 0 = v
             else index ?\<Gamma>' (?c + ?k - v - 1) 0 = v) |]
      ==> transdb (transdb_inv ?e ?\<Gamma> ?c ?k) ?\<Gamma>' = ?e",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1),
                 template_var 3),
               template_var 2)),
           template_var 0),
         template_var 4))),
    ("OpSem.ca_lrE",
     "[| ?d \<triangleleft> ?P;
         [| ?d = \<bottom>; OpSem.closed ?P |] ==> ?Q;
         [| ?d = ValTT; OpSem.closed ?P; ?P \<Down> DBtt |] ==> ?Q;
         [| ?d = ValFF; OpSem.closed ?P; ?P \<Down> DBff |] ==> ?Q;
         !!n. [| ?d = ValN$n; OpSem.closed ?P; ?P \<Down> DBNum n |] ==> ?Q;
         !!f M.
            [| ?d = ValF$f; OpSem.closed ?P; ?P \<Down> DBAbsN M;
               !!x X. x \<triangleleft> X ==> f$x \<triangleleft> M<X/0> |]
            ==> ?Q;
         !!f M.
            [| ?d = ValF$f; f$\<bottom> = \<bottom>; OpSem.closed ?P;
               ?P \<Down> DBAbsV M;
               !!x X V.
                  [| x \<triangleleft> X; X \<Down> V |]
                  ==> f$x \<triangleleft> M<V/0> |]
            ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 20)],
          template_implication
           ([template_predicate
              (template_app (template_hole 19, template_var 1))],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation (template_var 2, template_hole 18)],
          template_implication
           ([template_predicate
              (template_app (template_hole 19, template_var 1))],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app (template_hole 17, template_var 1),
                     template_hole 16)
                   )],
              template_predicate (template_var 0)))),
        template_implication
         ([template_equation (template_var 2, template_hole 15)],
          template_implication
           ([template_predicate
              (template_app (template_hole 19, template_var 1))],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app (template_hole 17, template_var 1),
                     template_hole 14)
                   )],
              template_predicate (template_var 0)))),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.OpSemMoreTemplates"
### 0.552s elapsed time, 0.779s cpu time, 0.073s GC time
val it = (): unit
