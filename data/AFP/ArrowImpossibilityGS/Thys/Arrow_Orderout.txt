Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Arrow_OrderMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Arrow_OrderMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Arrow_OrderMoreTemplates" via "Draft.Arrow_Order")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Arrow_OrderMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.594s cpu time, 0.037s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Arrow_OrderMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.188s elapsed time, 0.767s cpu time, 0.037s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Arrow_OrderMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.324s elapsed time, 1.293s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Arrow_OrderMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.FuncSet"
### 0.484s elapsed time, 1.922s cpu time, 0.203s GC time
Loading theory "Draft.Arrow_Order" (required by "Draft.Arrow_OrderMoreTemplates")
### Ambiguous input (line 125 of "$AFP/ArrowImpossibilityGS/Thys/Arrow_Order.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" IIA) ("_position" F))
###   ("_Ball" ("_position" P) ("_position" Prof)
###     ("_Ball" ("_position" P') ("_position" Prof)
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" i)
###             ("\<^const>HOL.iff"
###               ("\<^const>Arrow_Order.lessLin" ("_position" a)
###                 ("_applC" ("_position" P) ("_position" i)) ("_position" b))
###               ("\<^const>Arrow_Order.lessLin" ("_position" a)
###                 ("_applC" ("_position" P') ("_position" i))
###                 ("_position" b))))
###           ("\<^const>Arrow_Order.lessLin" ("_position" a)
###             ("_applC" ("_position" F) ("_position" P))
###             ("\<^const>HOL.iff" ("_position" b)
###               ("\<^const>Arrow_Order.lessLin" ("_position" a)
###                 ("_applC" ("_position" F) ("_position" P'))
###                 ("_position" b)))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" IIA) ("_position" F))
###   ("_Ball" ("_position" P) ("_position" Prof)
###     ("_Ball" ("_position" P') ("_position" Prof)
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" i)
###             ("\<^const>Arrow_Order.lessLin" ("_position" a)
###               ("_applC" ("_position" P) ("_position" i))
###               ("\<^const>HOL.iff" ("_position" b)
###                 ("\<^const>Arrow_Order.lessLin" ("_position" a)
###                   ("_applC" ("_position" P') ("_position" i))
###                   ("_position" b)))))
###           ("\<^const>Arrow_Order.lessLin" ("_position" a)
###             ("_applC" ("_position" F) ("_position" P))
###             ("\<^const>HOL.iff" ("_position" b)
###               ("\<^const>Arrow_Order.lessLin" ("_position" a)
###                 ("_applC" ("_position" F) ("_position" P'))
###                 ("_position" b)))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" IIA) ("_position" F))
###   ("_Ball" ("_position" P) ("_position" Prof)
###     ("_Ball" ("_position" P') ("_position" Prof)
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" i)
###             ("\<^const>HOL.iff"
###               ("\<^const>Arrow_Order.lessLin" ("_position" a)
###                 ("_applC" ("_position" P) ("_position" i)) ("_position" b))
###               ("\<^const>Arrow_Order.lessLin" ("_position" a)
###                 ("_applC" ("_position" P') ("_position" i))
###                 ("_position" b))))
###           ("\<^const>HOL.iff"
###             ("\<^const>Arrow_Order.lessLin" ("_position" a)
###               ("_applC" ("_position" F) ("_position" P)) ("_position" b))
###             ("\<^const>Arrow_Order.lessLin" ("_position" a)
###               ("_applC" ("_position" F) ("_position" P'))
###               ("_position" b))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" IIA) ("_position" F))
###   ("_Ball" ("_position" P) ("_position" Prof)
###     ("_Ball" ("_position" P') ("_position" Prof)
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" i)
###             ("\<^const>Arrow_Order.lessLin" ("_position" a)
###               ("_applC" ("_position" P) ("_position" i))
###               ("\<^const>HOL.iff" ("_position" b)
###                 ("\<^const>Arrow_Order.lessLin" ("_position" a)
###                   ("_applC" ("_position" P') ("_position" i))
###                   ("_position" b)))))
###           ("\<^const>HOL.iff"
###             ("\<^const>Arrow_Order.lessLin" ("_position" a)
###               ("_applC" ("_position" F) ("_position" P)) ("_position" b))
###             ("\<^const>Arrow_Order.lessLin" ("_position" a)
###               ("_applC" ("_position" F) ("_position" P'))
###               ("_position" b))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Arrow_Order"
### 0.152s elapsed time, 0.608s cpu time, 0.000s GC time
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.BigO"
### 0.805s elapsed time, 2.859s cpu time, 0.311s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.057s elapsed time, 3.310s cpu time, 0.786s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.924s elapsed time, 4.773s cpu time, 0.925s GC time
Loading theory "Draft.Templates" (required by "Draft.Arrow_OrderMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.105s cpu time, 0.040s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Arrow_OrderMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.453s elapsed time, 0.459s cpu time, 0.000s GC time
Loading theory "Draft.Arrow_OrderMoreTemplates"
val templateLemmas =
   [("Arrow_Order.alt2", "EX b. b ~= ?a",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Arrow_Order.converse_in_Lin", "(?L^-1 : Lin) = (?L : Lin)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Arrow_Order.const_Lin_Prof", "?L : Lin ==> (%p. ?L) : Prof",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0)
           ))),
    ("Arrow_Order.mkbot_Lin", "?L : Lin ==> mkbot ?L ?x : Lin",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Arrow_Order.mktop_Lin", "?L : Lin ==> mktop ?L ?x : Lin",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Arrow_Order.complete_Lin",
     "?a ~= ?b ==> EX L:Lin. ?a <\<^bsub>L\<^esub> ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2), t_empty)
           ))),
    ("Arrow_Order.third_alt", "?a ~= ?b ==> EX c. distinct [?a, ?b, c]",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Arrow_Order.above_Lin",
     "[| ?x ~= ?y; ?L : Lin |] ==> Arrow_Order.above ?L ?x ?y : Lin",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Arrow_Order.below_Lin",
     "[| ?x ~= ?y; ?L : Lin |] ==> below ?L ?x ?y : Lin",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Arrow_Order.Lin_irrefl",
     "[| ?L : Lin; ?a <\<^bsub>?L\<^esub> ?b; ?b <\<^bsub>?L\<^esub> ?a |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 1)),
              template_var 2)
            )],
       template_predicate (template_hole 0))),
    ("Arrow_Order.Arrow",
     "[| ?F : SWF; unanimity ?F; IIA ?F |] ==> EX i. dictator ?F i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_hole 5), t_empty))
            ),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Arrow_Order.notin_Lin_iff",
     "[| ?L : Lin; ?x ~= ?y |]
      ==> ((?x, ?y) ~: ?L) = (?y <\<^bsub>?L\<^esub> ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_hole 5)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2)))),
    ("Arrow_Order.in_mkbot",
     "(?x <\<^bsub>mkbot ?L ?z\<^esub> ?y) =
      (?y ~= ?z &
       (if ?x = ?z then ?x ~= ?y else ?x <\<^bsub>?L\<^esub> ?y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 2)),
                 template_var 1)))
           ))),
    ("Arrow_Order.in_mktop",
     "(?x <\<^bsub>mktop ?L ?z\<^esub> ?y) =
      (?x ~= ?z &
       (if ?y = ?z then ?x ~= ?y else ?x <\<^bsub>?L\<^esub> ?y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0))),
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 2)),
                 template_var 1)))
           ))),
    ("Arrow_Order.dictatorI",
     "[| ?F : SWF;
         ALL P:Prof.
            ALL a b.
               a ~= b -->
               a <\<^bsub>P ?i\<^esub> b --> a <\<^bsub>?F P\<^esub> b |]
      ==> dictator ?F ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 10, template_hole 9), t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 9), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Arrow_Order.in_above",
     "[| ?a ~= ?b; ?L : Lin |]
      ==> (?x <\<^bsub>Arrow_Order.above ?L ?a ?b\<^esub> ?y) =
          (?x ~= ?y &
           (if ?x = ?b then ?a <\<^bsub>?L\<^esub> ?y
            else if ?y = ?b then ?x = ?a | ?x <\<^bsub>?L\<^esub> ?a
                 else ?x <\<^bsub>?L\<^esub> ?y))",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0)),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 4),
                  template_var 3))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 1),
                     template_var 0))),
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 9, template_var 1),
                       template_var 3)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 4),
                         template_var 0)),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 9, template_var 0),
                         template_var 3)),
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app
                          (template_app (template_hole 9, template_var 1),
                           template_var 4)),
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app (template_hole 4, template_var 1),
                             template_var 4)),
                         template_var 2))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 1),
                         template_var 0)),
                     template_var 2))))
             )))),
    ("Arrow_Order.in_below",
     "[| ?a ~= ?b; ?L : Lin |]
      ==> (?x <\<^bsub>below ?L ?a ?b\<^esub> ?y) =
          (?x ~= ?y &
           (if ?y = ?a then ?x <\<^bsub>?L\<^esub> ?b
            else if ?x = ?a then ?y = ?b | ?b <\<^bsub>?L\<^esub> ?y
                 else ?x <\<^bsub>?L\<^esub> ?y))",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0)),
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 4),
                  template_var 3))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 1),
                     template_var 0))),
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 9, template_var 0),
                       template_var 4)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 1),
                         template_var 3)),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 9, template_var 1),
                         template_var 4)),
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app
                          (template_app (template_hole 9, template_var 0),
                           template_var 3)),
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app (template_hole 4, template_var 3),
                             template_var 0)),
                         template_var 2))),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 1),
                         template_var 0)),
                     template_var 2))))
             ))))]:
   (string * thm * template) list
### theory "Draft.Arrow_OrderMoreTemplates"
### 0.325s elapsed time, 0.478s cpu time, 0.054s GC time
val it = (): unit
