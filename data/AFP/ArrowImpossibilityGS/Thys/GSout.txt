Loading theory "HOL-Library.FuncSet" (required by "Draft.GSMoreTemplates" via "Draft.GS" via "Draft.Arrow_Order")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.GSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.GSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.GSMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.558s cpu time, 0.048s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.GSMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.836s cpu time, 0.048s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.GSMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.358s elapsed time, 1.427s cpu time, 0.153s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.GSMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.FuncSet"
### 0.437s elapsed time, 1.742s cpu time, 0.153s GC time
Loading theory "Draft.Arrow_Order" (required by "Draft.GSMoreTemplates" via "Draft.GS")
### Ambiguous input (line 125 of "$AFP/ArrowImpossibilityGS/Thys/Arrow_Order.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" IIA) ("_position" F))
###   ("_Ball" ("_position" P) ("_position" Prof)
###     ("_Ball" ("_position" P') ("_position" Prof)
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" i)
###             ("\<^const>HOL.iff"
###               ("\<^const>Arrow_Order.lessLin" ("_position" a)
###                 ("_applC" ("_position" P) ("_position" i)) ("_position" b))
###               ("\<^const>Arrow_Order.lessLin" ("_position" a)
###                 ("_applC" ("_position" P') ("_position" i))
###                 ("_position" b))))
###           ("\<^const>Arrow_Order.lessLin" ("_position" a)
###             ("_applC" ("_position" F) ("_position" P))
###             ("\<^const>HOL.iff" ("_position" b)
###               ("\<^const>Arrow_Order.lessLin" ("_position" a)
###                 ("_applC" ("_position" F) ("_position" P'))
###                 ("_position" b)))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" IIA) ("_position" F))
###   ("_Ball" ("_position" P) ("_position" Prof)
###     ("_Ball" ("_position" P') ("_position" Prof)
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" i)
###             ("\<^const>Arrow_Order.lessLin" ("_position" a)
###               ("_applC" ("_position" P) ("_position" i))
###               ("\<^const>HOL.iff" ("_position" b)
###                 ("\<^const>Arrow_Order.lessLin" ("_position" a)
###                   ("_applC" ("_position" P') ("_position" i))
###                   ("_position" b)))))
###           ("\<^const>Arrow_Order.lessLin" ("_position" a)
###             ("_applC" ("_position" F) ("_position" P))
###             ("\<^const>HOL.iff" ("_position" b)
###               ("\<^const>Arrow_Order.lessLin" ("_position" a)
###                 ("_applC" ("_position" F) ("_position" P'))
###                 ("_position" b)))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" IIA) ("_position" F))
###   ("_Ball" ("_position" P) ("_position" Prof)
###     ("_Ball" ("_position" P') ("_position" Prof)
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" i)
###             ("\<^const>HOL.iff"
###               ("\<^const>Arrow_Order.lessLin" ("_position" a)
###                 ("_applC" ("_position" P) ("_position" i)) ("_position" b))
###               ("\<^const>Arrow_Order.lessLin" ("_position" a)
###                 ("_applC" ("_position" P') ("_position" i))
###                 ("_position" b))))
###           ("\<^const>HOL.iff"
###             ("\<^const>Arrow_Order.lessLin" ("_position" a)
###               ("_applC" ("_position" F) ("_position" P)) ("_position" b))
###             ("\<^const>Arrow_Order.lessLin" ("_position" a)
###               ("_applC" ("_position" F) ("_position" P'))
###               ("_position" b))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" IIA) ("_position" F))
###   ("_Ball" ("_position" P) ("_position" Prof)
###     ("_Ball" ("_position" P') ("_position" Prof)
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.All_binder" ("_position" i)
###             ("\<^const>Arrow_Order.lessLin" ("_position" a)
###               ("_applC" ("_position" P) ("_position" i))
###               ("\<^const>HOL.iff" ("_position" b)
###                 ("\<^const>Arrow_Order.lessLin" ("_position" a)
###                   ("_applC" ("_position" P') ("_position" i))
###                   ("_position" b)))))
###           ("\<^const>HOL.iff"
###             ("\<^const>Arrow_Order.lessLin" ("_position" a)
###               ("_applC" ("_position" F) ("_position" P)) ("_position" b))
###             ("\<^const>Arrow_Order.lessLin" ("_position" a)
###               ("_applC" ("_position" F) ("_position" P'))
###               ("_position" b))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Arrow_Order"
### 0.181s elapsed time, 0.707s cpu time, 0.105s GC time
Loading theory "Draft.GS" (required by "Draft.GSMoreTemplates")
locale GS
  fixes f :: "(indi => (alt * alt) set) => alt"
  assumes "GS f"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.GS"
### 0.121s elapsed time, 0.472s cpu time, 0.083s GC time
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.008s elapsed time, 3.544s cpu time, 0.866s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.055s elapsed time, 3.379s cpu time, 0.801s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.942s elapsed time, 5.016s cpu time, 1.010s GC time
Loading theory "Draft.Templates" (required by "Draft.GSMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.069s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.GSMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.455s elapsed time, 0.462s cpu time, 0.000s GC time
Loading theory "Draft.GSMoreTemplates"
val templateLemmas =
   [("GS.Top_in_Lin", "?L : Lin ==> Top ?S ?L : Lin",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("GS.Top_in_Prof", "?P : Prof ==> Top ?S o ?P : Prof",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 1)),
             template_hole 2)
           ))),
    ("GS.Gibbard_Satterthwaite",
     "[| ~ manipulable ?f; ALL a. EX P:Prof. a = ?f P |]
      ==> EX i. dict ?f i",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 0))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("GS.not_manipulable",
     "(~ manipulable ?f) =
      (ALL P:Prof.
          ALL i.
             ALL L:Lin.
                ?f P ~= ?f (P(i := L)) -->
                ?f (P(i := L)) <\<^bsub>P i\<^esub> ?f P &
                ?f P <\<^bsub>L\<^esub> ?f (P(i := L)))",
     template_equation
      (template_app
        (template_hole 12, template_app (template_hole 11, template_var 0)),
       template_app
        (template_app (template_hole 10, template_hole 9), t_empty)))]:
   (string * thm * template) list
### theory "Draft.GSMoreTemplates"
### 0.318s elapsed time, 0.441s cpu time, 0.053s GC time
val it = (): unit
