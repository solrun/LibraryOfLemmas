   [("Diophantine_Relations.zero_dioph", "is_dioph_rel ([0=] ?Q)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Diophantine_Relations.eq_dioph", "is_dioph_rel (?Q [=] ?R)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Diophantine_Relations.ge_dioph", "is_dioph_rel (?Q [\<ge>] ?R)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Diophantine_Relations.gt_dioph", "is_dioph_rel (?Q [>] ?R)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Diophantine_Relations.le_dioph", "is_dioph_rel (?Q [\<le>] ?R)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Diophantine_Relations.lt_dioph", "is_dioph_rel (?Q [<] ?R)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Diophantine_Relations.unary_eval",
     "eval (UNARY ?R ?P) ?a = ?R (peval ?P ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Diophantine_Relations.ALLC_LIST_dioph",
     "list_all (is_dioph_rel o ?DF) ?L ==>
      is_dioph_rel [\<forall> in ?L] ?DF",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Diophantine_Relations.and_dioph",
     "[| is_dioph_rel ?A; is_dioph_rel ?B |]
      ==> is_dioph_rel (?A [\<and>] ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Diophantine_Relations.or_dioph",
     "[| is_dioph_rel ?A; is_dioph_rel ?B |]
      ==> is_dioph_rel (?A [\<or>] ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Diophantine_Relations.ALLC_LIST_eval_list_all",
     "eval [\<forall> in ?L] ?DF ?a = list_all (%l. eval (?DF l) ?a) ?L",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 2))),
    ("Diophantine_Relations.split_concat",
     "splits (map ?f (Diophantine_Relations.concat ?pls))
       (map length ?pls) =
      map (map ?f) ?pls",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 4, template_var 1)),
         template_var 0))),
    ("Diophantine_Relations.defs",
     "UNARY ?R ?P = NARY (%l. ?R (l ! 0)) [?P]",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Diophantine_Relations.LARY_eval",
     "eval (LARY ?R ?PLL) ?a = ?R (map (map (%P. peval P ?a)) ?PLL)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_var 2,
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 1)))),
    ("Diophantine_Relations.binary_eval",
     "eval (BINARY ?R ?P\<^sub>1 ?P\<^sub>2) ?a =
      ?R (peval ?P\<^sub>1 ?a) (peval ?P\<^sub>2 ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_var 3,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Diophantine_Relations.ALLC_dioph",
     "ALL i<?n. is_dioph_rel (?DF i) ==> is_dioph_rel [\<forall><?n] ?DF",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Diophantine_Relations.ALLC_eval",
     "eval [\<forall><?n] ?DF ?a = (ALL k<?n. eval (?DF k) ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Diophantine_Relations.ternary_eval",
     "eval (TERNARY ?R ?P\<^sub>1 ?P\<^sub>2 ?P\<^sub>3) ?a =
      ?R (peval ?P\<^sub>1 ?a) (peval ?P\<^sub>2 ?a) (peval ?P\<^sub>3 ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_var 4,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Diophantine_Relations.ALLC_LIST_eval",
     "eval [\<forall> in ?L] ?DF ?a =
      (ALL k<length ?L. eval (?DF (?L ! k)) ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Diophantine_Relations.defs",
     "BINARY ?R ?P\<^sub>1 ?P\<^sub>2 =
      NARY (%l. ?R (l ! 0) (l ! 1)) [?P\<^sub>1, ?P\<^sub>2]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Diophantine_Relations.defs",
     "TERNARY ?R ?P\<^sub>1 ?P\<^sub>2 ?P\<^sub>3 =
      NARY (%l. ?R (l ! 0) (l ! 1) (l ! 2))
       [?P\<^sub>1, ?P\<^sub>2, ?P\<^sub>3]",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("Diophantine_Relations.exists_disjoint_vars",
     "is_dioph_rel ?A ==>
      EX P1 P2.
         disjoint_var (P1 \<^bold>+ P2) (?Q1.0 \<^bold>+ ?Q2.0) &
         (ALL a. eval ?A a = (EX v. ppeval P1 a v = ppeval P2 a v))",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Diophantine_Relations.defs",
     "QUATERNARY ?R ?P\<^sub>1 ?P\<^sub>2 ?P\<^sub>3 ?P\<^sub>4 =
      NARY (%l. ?R (l ! 0) (l ! 1) (l ! 2) (l ! 3))
       [?P\<^sub>1, ?P\<^sub>2, ?P\<^sub>3, ?P\<^sub>4]",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 9, t_empty),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))))))]
