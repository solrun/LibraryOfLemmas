Loading theory "Draft.Parametric_Polynomials" (required by "Draft.Diophantine_RelationsMoreTemplates" via "Draft.Diophantine_Relations" via "Draft.Assignments")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Diophantine_RelationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Diophantine_RelationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Diophantine_RelationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.622s cpu time, 0.050s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Diophantine_RelationsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.257s elapsed time, 1.044s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Diophantine_RelationsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.405s elapsed time, 1.620s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Diophantine_RelationsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.941s elapsed time, 3.510s cpu time, 0.860s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.035s elapsed time, 3.694s cpu time, 0.840s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.985s elapsed time, 6.147s cpu time, 1.057s GC time
Loading theory "Draft.Templates" (required by "Draft.Diophantine_RelationsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.117s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Diophantine_RelationsMoreTemplates")
Found termination order: "size <*mlex*> {}"
### theory "Draft.Parametric_Polynomials"
### 2.268s elapsed time, 7.061s cpu time, 1.107s GC time
Loading theory "Draft.Assignments" (required by "Draft.Diophantine_RelationsMoreTemplates" via "Draft.Diophantine_Relations")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.539s elapsed time, 1.149s cpu time, 0.098s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Assignments"
### 0.563s elapsed time, 1.105s cpu time, 0.098s GC time
Loading theory "Draft.Diophantine_Relations" (required by "Draft.Diophantine_RelationsMoreTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 53 of "$AFP/DPRM_Theorem/Diophantine/Diophantine_Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>ALLC_LIST" ("\<^const>List.list.Nil") ("_position" DF))
###     ("_position" TRUE)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>ALLC_LIST" ("\<^const>List.list.Nil")
###     ("\<^const>HOL.eq" ("_position" DF) ("_position" TRUE))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/DPRM_Theorem/Diophantine/Diophantine_Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>ALLC_LIST"
###       ("\<^const>List.list.Cons" ("_position" l) ("_position" ls))
###       ("_position" DF))
###     ("\<^const>Diophantine_Relations.relation.AND"
###       ("_applC" ("_position" DF) ("_position" l))
###       ("\<^fixed>ALLC_LIST" ("_position" ls) ("_position" DF)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>ALLC_LIST"
###     ("\<^const>List.list.Cons" ("_position" l) ("_position" ls))
###     ("\<^const>HOL.eq" ("_position" DF)
###       ("\<^const>Diophantine_Relations.relation.AND"
###         ("_applC" ("_position" DF) ("_position" l))
###         ("\<^fixed>ALLC_LIST" ("_position" ls) ("_position" DF))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "size_list length <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Diophantine_Relations"
### 0.943s elapsed time, 1.051s cpu time, 0.136s GC time
Loading theory "Draft.Diophantine_RelationsMoreTemplates"
val templateLemmas =
   [("Diophantine_Relations.zero_dioph", "is_dioph_rel ([0=] ?Q)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Diophantine_Relations.eq_dioph", "is_dioph_rel (?Q [=] ?R)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Diophantine_Relations.ge_dioph", "is_dioph_rel (?Q [\<ge>] ?R)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Diophantine_Relations.gt_dioph", "is_dioph_rel (?Q [>] ?R)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Diophantine_Relations.le_dioph", "is_dioph_rel (?Q [\<le>] ?R)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Diophantine_Relations.lt_dioph", "is_dioph_rel (?Q [<] ?R)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Diophantine_Relations.unary_eval",
     "eval (UNARY ?R ?P) ?a = ?R (peval ?P ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Diophantine_Relations.ALLC_LIST_dioph",
     "list_all (is_dioph_rel o ?DF) ?L ==>
      is_dioph_rel [\<forall> in ?L] ?DF",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Diophantine_Relations.and_dioph",
     "[| is_dioph_rel ?A; is_dioph_rel ?B |]
      ==> is_dioph_rel (?A [\<and>] ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Diophantine_Relations.or_dioph",
     "[| is_dioph_rel ?A; is_dioph_rel ?B |]
      ==> is_dioph_rel (?A [\<or>] ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Diophantine_Relations.ALLC_LIST_eval_list_all",
     "eval [\<forall> in ?L] ?DF ?a = list_all (%l. eval (?DF l) ?a) ?L",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 2))),
    ("Diophantine_Relations.split_concat",
     "splits (map ?f (Diophantine_Relations.concat ?pls))
       (map length ?pls) =
      map (map ?f) ?pls",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 4, template_var 1)),
         template_var 0))),
    ("Diophantine_Relations.defs",
     "UNARY ?R ?P = NARY (%l. ?R (l ! 0)) [?P]",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Diophantine_Relations.LARY_eval",
     "eval (LARY ?R ?PLL) ?a = ?R (map (map (%P. peval P ?a)) ?PLL)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_var 2,
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 1)))),
    ("Diophantine_Relations.binary_eval",
     "eval (BINARY ?R ?P\<^sub>1 ?P\<^sub>2) ?a =
      ?R (peval ?P\<^sub>1 ?a) (peval ?P\<^sub>2 ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_var 3,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Diophantine_Relations.ALLC_dioph",
     "ALL i<?n. is_dioph_rel (?DF i) ==> is_dioph_rel [\<forall><?n] ?DF",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Diophantine_Relations.ALLC_eval",
     "eval [\<forall><?n] ?DF ?a = (ALL k<?n. eval (?DF k) ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Diophantine_Relations.ternary_eval",
     "eval (TERNARY ?R ?P\<^sub>1 ?P\<^sub>2 ?P\<^sub>3) ?a =
      ?R (peval ?P\<^sub>1 ?a) (peval ?P\<^sub>2 ?a) (peval ?P\<^sub>3 ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_var 4,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Diophantine_Relations.ALLC_LIST_eval",
     "eval [\<forall> in ?L] ?DF ?a =
      (ALL k<length ?L. eval (?DF (?L ! k)) ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Diophantine_Relations.defs",
     "BINARY ?R ?P\<^sub>1 ?P\<^sub>2 =
      NARY (%l. ?R (l ! 0) (l ! 1)) [?P\<^sub>1, ?P\<^sub>2]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Diophantine_Relations.defs",
     "TERNARY ?R ?P\<^sub>1 ?P\<^sub>2 ?P\<^sub>3 =
      NARY (%l. ?R (l ! 0) (l ! 1) (l ! 2))
       [?P\<^sub>1, ?P\<^sub>2, ?P\<^sub>3]",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("Diophantine_Relations.exists_disjoint_vars",
     "is_dioph_rel ?A ==>
      EX P1 P2.
         disjoint_var (P1 \<^bold>+ P2) (?Q1.0 \<^bold>+ ?Q2.0) &
         (ALL a. eval ?A a = (EX v. ppeval P1 a v = ppeval P2 a v))",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Diophantine_Relations.defs",
     "QUATERNARY ?R ?P\<^sub>1 ?P\<^sub>2 ?P\<^sub>3 ?P\<^sub>4 =
      NARY (%l. ?R (l ! 0) (l ! 1) (l ! 2) (l ! 3))
       [?P\<^sub>1, ?P\<^sub>2, ?P\<^sub>3, ?P\<^sub>4]",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 9, t_empty),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))))))]:
   (string * thm * template) list
### theory "Draft.Diophantine_RelationsMoreTemplates"
### 0.341s elapsed time, 0.483s cpu time, 0.049s GC time
val it = (): unit
