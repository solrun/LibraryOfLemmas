Loading theory "Draft.Parametric_Polynomials" (required by "Draft.AssignmentsMoreTemplates" via "Draft.Assignments")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AssignmentsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AssignmentsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AssignmentsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.509s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AssignmentsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.233s elapsed time, 0.949s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AssignmentsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.338s elapsed time, 1.348s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AssignmentsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.028s elapsed time, 3.864s cpu time, 0.843s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.146s elapsed time, 4.148s cpu time, 0.842s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.011s elapsed time, 6.388s cpu time, 1.084s GC time
Loading theory "Draft.Templates" (required by "Draft.AssignmentsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.111s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AssignmentsMoreTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Parametric_Polynomials"
### 2.296s elapsed time, 7.242s cpu time, 1.128s GC time
Loading theory "Draft.Assignments" (required by "Draft.AssignmentsMoreTemplates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.551s elapsed time, 1.193s cpu time, 0.110s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Assignments"
### 0.573s elapsed time, 1.112s cpu time, 0.110s GC time
Loading theory "Draft.AssignmentsMoreTemplates"
val templateLemmas =
   [("Assignments.push_list_empty", "push_list ?a [] = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Assignments.push_param0", "push_param ?P 0 = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Assignments.push0", "push ?a ?n 0 = ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 0)),
    ("Assignments.disjoint_var_sym",
     "disjoint_var ?P ?Q = disjoint_var ?Q ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Assignments.push_list_singleton", "push_list ?a [?n] = push ?a ?n",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Assignments.push_list1",
     "push (push_list ?a ?ns) ?n = push_list ?a (?n # ?ns)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Assignments.push_push1",
     "peval (push_param ?P 1) (push ?a ?k) = peval ?P ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_hole 1)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2), template_var 1))),
    ("Assignments.max_set", "finite ?A ==> ALL x:?A. x <= Max ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), t_empty)
           ))),
    ("Assignments.push_push_simp",
     "peval (push_param ?P (length ?ns)) (push_list ?a ?ns) = peval ?P ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 3, template_var 2), template_var 0))),
    ("Assignments.push_var_bound",
     "?x : var_set (push_var ?P (Suc ?n)) ==> ?n < ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 1, template_var 0))))
            )],
       template_inequation (less_than, template_var 0, template_var 2))),
    ("Assignments.push_list2",
     "push_list (push ?a ?n) ?ns = push_list ?a (?ns @ [?n])",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Assignments.push_var_pull_assignment",
     "ppeval (push_var ?P ?n) ?a ?v = ppeval ?P ?a (pull_assignment ?v ?n)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Assignments.disjoint_var_diff",
     "disjoint_var (?P1.0 \<^bold>- ?P2.0) ?Q =
      (disjoint_var ?P1.0 ?Q & disjoint_var ?P2.0 ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Assignments.disjoint_var_prod",
     "disjoint_var (?P1.0 \<^bold>* ?P2.0) ?Q =
      (disjoint_var ?P1.0 ?Q & disjoint_var ?P2.0 ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Assignments.disjoint_var_sum",
     "disjoint_var (?P1.0 \<^bold>+ ?P2.0) ?Q =
      (disjoint_var ?P1.0 ?Q & disjoint_var ?P2.0 ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Assignments.push_push_aux",
     "peval (push_param ?P (Suc ?m)) (push ?a ?n) =
      peval (push_param ?P ?m) ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app (template_hole 1, template_var 2))),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_var 1))),
    ("Assignments.push_list_eval",
     "?i < length ?ns ==> push_list ?a ?ns ?i = ?ns ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("Assignments.push_list2_aux",
     "push_list (push ?a ?n) ?ns ?i = push_list ?a (?ns @ [?n]) ?i",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))),
         template_var 0))),
    ("Assignments.push_push",
     "length ?ns = ?n ==>
      peval (push_param ?P ?n) (push_list ?a ?ns) = peval ?P ?a",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 3), template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Assignments.eval_zip_assignments1",
     "disjoint_var ?P ?Q ==>
      ppeval ?P ?a ?v = ppeval ?P ?a (zip_assignments ?P ?Q ?v ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 1),
             template_var 0))))),
    ("Assignments.eval_zip_assignments2",
     "disjoint_var ?P ?Q ==>
      ppeval ?Q ?a ?w = ppeval ?Q ?a (zip_assignments ?P ?Q ?v ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 0),
             template_var 1))))),
    ("Assignments.push_push_map",
     "length ?ns = ?n ==>
      list_eval (map (%x. push_param x ?n) ?ls) (push_list ?a ?ns) =
      list_eval ?ls ?a",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3), template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Assignments.aux_var_set",
     "ALL i:var_set ?P. ?x i = ?y i ==> ppeval ?P ?a ?x = ppeval ?P ?a ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 1)))),
    ("Assignments.push_push_map1",
     "?i < length ?ls ==>
      peval (map (%x. push_param x 1) ?ls ! ?i) (push ?a ?n) =
      list_eval ?ls ?a ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, t_empty),
                   template_var 2)),
               template_var 3)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 3)))),
    ("Assignments.push_push_map_i",
     "[| length ?ns = ?n; ?i < length ?ls |]
      ==> peval (map (%x. push_param x ?n) ?ls ! ?i) (push_list ?a ?ns) =
          list_eval ?ls ?a ?i",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 4), template_var 3),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_var 1)),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 4)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Assignments.help_eval_zip_assignments1",
     "ppeval ?P1.0 ?a
       (%i. if i : var_set ?P1.0 Un var_set ?P2.0 then ?v i else ?w i) =
      ppeval ?P1.0 ?a (%i. if i : var_set ?P1.0 then ?v i else ?w i)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 4), template_var 3),
         t_empty),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 4), template_var 3),
         t_empty))),
    ("Assignments.help_eval_zip_assignments2",
     "ppeval ?P2.0 ?a
       (%i. if i : var_set ?P1.0 Un var_set ?P2.0 then ?v i else ?w i) =
      ppeval ?P2.0 ?a (%i. if i : var_set ?P2.0 then ?v i else ?w i)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 4), template_var 3),
         t_empty),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 4), template_var 3),
         t_empty))),
    ("Assignments.zip_assignments_correct",
     "[| ppeval ?P1.0 ?a ?v = ppeval ?P2.0 ?a ?v;
         ppeval ?Q1.0 ?a ?w = ppeval ?Q2.0 ?a ?w;
         disjoint_var (?P1.0 \<^bold>+ ?P2.0) (?Q1.0 \<^bold>+ ?Q2.0) |]
      ==> ppeval ?P1.0 ?a
           (zip_assignments (?P1.0 \<^bold>+ ?P2.0) (?Q1.0 \<^bold>+ ?Q2.0)
             ?v ?w) =
          ppeval ?P2.0 ?a
           (zip_assignments (?P1.0 \<^bold>+ ?P2.0) (?Q1.0 \<^bold>+ ?Q2.0)
             ?v ?w)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 5),
            template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 2),
              template_var 5),
            template_var 1),
          template_app
           (template_app
             (template_app (template_hole 3, template_var 0),
              template_var 5),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 6),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 6),
             template_var 5),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_var 4),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 5),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_var 4),
             template_var 1))))),
    ("Assignments.zip_assignments_correct",
     "[| ppeval ?P1.0 ?a ?v = ppeval ?P2.0 ?a ?v;
         ppeval ?Q1.0 ?a ?w = ppeval ?Q2.0 ?a ?w;
         disjoint_var (?P1.0 \<^bold>+ ?P2.0) (?Q1.0 \<^bold>+ ?Q2.0) |]
      ==> ppeval ?Q1.0 ?a
           (zip_assignments (?P1.0 \<^bold>+ ?P2.0) (?Q1.0 \<^bold>+ ?Q2.0)
             ?v ?w) =
          ppeval ?Q2.0 ?a
           (zip_assignments (?P1.0 \<^bold>+ ?P2.0) (?Q1.0 \<^bold>+ ?Q2.0)
             ?v ?w)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 5),
            template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 2),
              template_var 5),
            template_var 1),
          template_app
           (template_app
             (template_app (template_hole 3, template_var 0),
              template_var 5),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 6),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 5),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_var 4),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 0),
             template_var 5),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_var 4),
             template_var 1))))),
    ("Assignments.disjoint_var_unifies",
     "[| EX v1. ppeval ?P1.0 ?a v1 = ppeval ?P2.0 ?a v1;
         EX v2. ppeval ?Q1.0 ?a v2 = ppeval ?Q2.0 ?a v2;
         disjoint_var (?P1.0 \<^bold>+ ?P2.0) (?Q1.0 \<^bold>+ ?Q2.0) |]
      ==> EX v. ppeval ?P1.0 ?a v = ppeval ?P2.0 ?a v &
                ppeval ?Q1.0 ?a v = ppeval ?Q2.0 ?a v",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty))))]:
   (string * thm * template) list
### theory "Draft.AssignmentsMoreTemplates"
### 0.343s elapsed time, 0.480s cpu time, 0.039s GC time
val it = (): unit
