Loading theory "Draft.RegisterMachineSpecification" (required by "Draft.RegisterMachinePropertiesMoreTemplates" via "Draft.RegisterMachineProperties")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RegisterMachinePropertiesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RegisterMachinePropertiesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RegisterMachinePropertiesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.514s cpu time, 0.047s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RegisterMachinePropertiesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.261s elapsed time, 1.055s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RegisterMachinePropertiesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.370s elapsed time, 1.483s cpu time, 0.141s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RegisterMachinePropertiesMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "{}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "Draft.RegisterMachineSpecification"
### 1.177s elapsed time, 4.499s cpu time, 0.843s GC time
Loading theory "Draft.RegisterMachineProperties" (required by "Draft.RegisterMachinePropertiesMoreTemplates")
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.987s elapsed time, 3.725s cpu time, 0.737s GC time
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.077s elapsed time, 3.949s cpu time, 0.822s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.RegisterMachineProperties"
### 0.545s elapsed time, 1.529s cpu time, 0.190s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.951s elapsed time, 5.912s cpu time, 1.033s GC time
Loading theory "Draft.Templates" (required by "Draft.RegisterMachinePropertiesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.051s elapsed time, 0.073s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RegisterMachinePropertiesMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.451s elapsed time, 0.509s cpu time, 0.071s GC time
Loading theory "Draft.RegisterMachinePropertiesMoreTemplates"
val templateLemmas =
   [("RegisterMachineProperties.S_bounded", "S ?c ?p ?k ?t <= 1",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_hole 0)),
    ("RegisterMachineProperties.Z_bounded", "Z ?c ?p ?l ?t <= 1",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_hole 0)),
    ("RegisterMachineProperties.steps_tape_length_invar",
     "length (snd (steps ?c ?p ?t)) = length (snd ?c)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 2)))),
    ("RegisterMachineProperties.step_is_valid_invar",
     "is_valid ?c ?p ==> is_valid (step ?c ?p) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0)
           ))),
    ("RegisterMachineProperties.steps_is_valid_invar",
     "is_valid ?c ?p ==> is_valid (steps ?c ?p ?t) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_var 1)
           ))),
    ("RegisterMachineProperties.step_commutative",
     "steps (step ?c ?p) ?p ?t = step (steps ?c ?p ?t) ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 1))),
    ("RegisterMachineProperties.p_contains",
     "is_valid_initial ?ic ?p ?a ==> fst (steps ?ic ?p ?t) < length ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 2)))),
    ("RegisterMachineProperties.fetch_equiv",
     "?i = ?p ! ?s ==> fetch ?s ?p ?v = fetch_old ?p ?s ?i ?v",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 3),
           template_var 0)))),
    ("RegisterMachineProperties.terminates_halt_state",
     "[| terminates ?ic ?p ?q; is_valid_initial ?ic ?p ?a |]
      ==> ishalt (?p ! fst (steps ?ic ?p ?q))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 1))))
           ))),
    ("RegisterMachineProperties.terminate_c_exists",
     "[| is_valid ?ic ?p; terminates ?ic ?p ?q |]
      ==> EX c>1. cells_bounded ?ic ?p c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("RegisterMachineProperties.S_unique",
     "ALL k<=length ?p. k ~= fst (steps ?c ?p ?t) --> S ?c ?p k ?t = 0",
     template_predicate (template_app (template_hole 9, t_empty))),
    ("RegisterMachineProperties.SK_simp",
     "SK ?c ?p ?b (Suc ?t) ?k =
      S2 (steps ?c ?p (Suc ?t)) ?k * ?b ^ Suc ?t + SK ?c ?p ?b ?t ?k",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_var 3),
             template_var 2),
           template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_app (template_hole 5, template_var 1))),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app (template_hole 5, template_var 1)))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("RegisterMachineProperties.ZL_simp",
     "ZL ?c ?p ?b (Suc ?t) ?l =
      Z2 (steps ?c ?p (Suc ?t)) ?l * ?b ^ Suc ?t + ZL ?c ?p ?b ?t ?l",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_var 3),
             template_var 2),
           template_app (template_hole 5, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_app (template_hole 5, template_var 1))),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app (template_hole 5, template_var 1)))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("RegisterMachineProperties.RL_simp",
     "RL ?c ?p ?b (Suc ?t) ?l =
      snd (steps ?c ?p (Suc ?t)) ! ?l * ?b ^ Suc ?t + RL ?c ?p ?b ?t ?l",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 4),
               template_var 3),
             template_var 2),
           template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 4),
                         template_var 3),
                       template_app (template_hole 6, template_var 1)))),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app (template_hole 6, template_var 1)))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("RegisterMachineProperties.SK_simp_aux",
     "SK ?c ?p ?b (Suc (Suc ?t)) ?k =
      S2 (steps ?c ?p (Suc (Suc ?t))) ?k * ?b ^ Suc (Suc ?t) +
      SK ?c ?p ?b (Suc ?t) ?k",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_var 3),
             template_var 2),
           template_app
            (template_hole 5,
             template_app (template_hole 5, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_app
                      (template_hole 5,
                       template_app (template_hole 5, template_var 1)))),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_hole 5,
                 template_app (template_hole 5, template_var 1))))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3),
               template_var 2),
             template_app (template_hole 5, template_var 1)),
           template_var 0)))),
    ("RegisterMachineProperties.R_termination",
     "[| is_valid ?ic ?p; terminates ?ic ?p ?q; ?l < length (snd ?ic) |]
      ==> ALL t>=?q. R ?ic ?p ?l t = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 3)))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("RegisterMachineProperties.step_fetch_correct",
     "is_valid ?c ?p ==>
      fst (steps (step ?c ?p) ?p ?t) =
      fetch (fst (steps ?c ?p ?t)) ?p
       (read (snd (steps ?c ?p ?t)) ?p (fst (steps ?c ?p ?t)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_var 2),
                     template_var 1),
                   template_var 0))),
             template_var 1),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_var 2),
                       template_var 1),
                     template_var 0))),
               template_var 1),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1),
                 template_var 0))))))),
    ("RegisterMachineProperties.ZL_simp_aux",
     "Z2 ?c ?l + ?b * ZL (step ?c ?p) ?p ?b ?t ?l =
      ZL ?c ?p ?b ?t ?l +
      ?b * (?b ^ ?t * Z2 (step (steps ?c ?p ?t) ?p) ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 4),
                       template_var 1)),
                   template_var 1),
                 template_var 2),
               template_var 0),
             template_var 3))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 1),
                 template_var 2),
               template_var 0),
             template_var 3)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 1),
                       template_var 0)),
                   template_var 1)),
               template_var 3)))))),
    ("RegisterMachineProperties.RL_simp_aux",
     "snd ?c ! ?l + ?b * RL (step ?c ?p) ?p ?b ?t ?l =
      RL ?c ?p ?b ?t ?l +
      ?b * (?b ^ ?t * snd (step (steps ?c ?p ?t) ?p) ! ?l)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 4)),
             template_var 3)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 4),
                       template_var 1)),
                   template_var 1),
                 template_var 2),
               template_var 0),
             template_var 3))),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 1),
                 template_var 2),
               template_var 0),
             template_var 3)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 4),
                           template_var 1),
                         template_var 0)),
                     template_var 1))),
               template_var 3))))))]:
   (string * thm * template) list
### theory "Draft.RegisterMachinePropertiesMoreTemplates"
### 0.268s elapsed time, 0.347s cpu time, 0.000s GC time
val it = (): unit
