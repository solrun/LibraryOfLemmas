Loading theory "Draft.RegisterMachineSpecification" (required by "Draft.RegisterMachineSimulationMoreTemplates" via "Draft.RegisterMachineSimulation" via "Draft.RegisterMachineProperties")
Loading theory "Digit_Expansions.Bits_Digits" (required by "Draft.RegisterMachineSimulationMoreTemplates" via "Draft.RegisterMachineSimulation" via "Digit_Expansions.Binary_Operations")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RegisterMachineSimulationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RegisterMachineSimulationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.545s cpu time, 0.044s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RegisterMachineSimulationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Digit_Expansions.Bits_Digits"
### 0.174s elapsed time, 0.704s cpu time, 0.044s GC time
Loading theory "Digit_Expansions.Carries" (required by "Draft.RegisterMachineSimulationMoreTemplates" via "Draft.RegisterMachineSimulation" via "Digit_Expansions.Binary_Operations")
Found termination order: "size_list size <*mlex*> {}"
### theory "Digit_Expansions.Carries"
### 0.121s elapsed time, 0.468s cpu time, 0.112s GC time
Loading theory "Digit_Expansions.Binary_Operations" (required by "Draft.RegisterMachineSimulationMoreTemplates" via "Draft.RegisterMachineSimulation")
### theory "HOL-Library.Nat_Bijection"
### 0.346s elapsed time, 1.378s cpu time, 0.156s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RegisterMachineSimulationMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.239s elapsed time, 0.930s cpu time, 0.112s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RegisterMachineSimulationMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Digit_Expansions.Binary_Operations"
### 0.364s elapsed time, 1.429s cpu time, 0.176s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RegisterMachineSimulationMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "{}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "{}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.RegisterMachineSpecification"
### 1.330s elapsed time, 5.088s cpu time, 1.005s GC time
Loading theory "Draft.RegisterMachineProperties" (required by "Draft.RegisterMachineSimulationMoreTemplates" via "Draft.RegisterMachineSimulation")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.160s elapsed time, 4.398s cpu time, 0.928s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.047s elapsed time, 3.785s cpu time, 0.838s GC time
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.RegisterMachineProperties"
### 0.576s elapsed time, 1.807s cpu time, 0.233s GC time
Loading theory "Draft.RegisterMachineSimulation" (required by "Draft.RegisterMachineSimulationMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.086s elapsed time, 6.544s cpu time, 1.179s GC time
Loading theory "Draft.Templates" (required by "Draft.RegisterMachineSimulationMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.RegisterMachineSimulation"
### 0.558s elapsed time, 1.164s cpu time, 0.097s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.080s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RegisterMachineSimulationMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.481s elapsed time, 0.524s cpu time, 0.052s GC time
Loading theory "Draft.RegisterMachineSimulationMoreTemplates"
val templateLemmas =
   [("RegisterMachineSimulation.RLe_equivalent",
     "RL ?c ?p ?b ?q ?l = RLe ?c ?p ?b ?q ?l",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("RegisterMachineSimulation.SKe_equivalent",
     "SK ?c ?p ?b ?q ?k = SKe ?c ?p ?b ?q ?k",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("RegisterMachineSimulation.ZLe_equivalent",
     "ZL ?c ?p ?b ?q ?l = ZLe ?c ?p ?b ?q ?l",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("RegisterMachineSimulation.sum_radd_distrib",
     "?a * \<Sum>R+ ?p ?l ?f = \<Sum>R+ ?p ?l (%k. ?a * ?f k)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         t_empty))),
    ("RegisterMachineSimulation.sum_rsub_distrib",
     "?a * \<Sum>R- ?p ?l ?f  = \<Sum>R- ?p ?l (%k. ?a * ?f k) ",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         t_empty))),
    ("RegisterMachineSimulation.sum_sadd_distrib",
     "?a * \<Sum>S+ ?p ?d ?f  = \<Sum>S+ ?p ?d (%k. ?a * ?f k) ",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         t_empty))),
    ("RegisterMachineSimulation.sum_ssub_nzero_distrib",
     "?a * \<Sum>S- ?p ?d ?f  = \<Sum>S- ?p ?d (%k. ?a * ?f k) ",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         t_empty))),
    ("RegisterMachineSimulation.sum_ssub_zero_distrib",
     "?a * \<Sum>S0 ?p ?d ?f  = \<Sum>S0 ?p ?d (%k. ?a * ?f k) ",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         t_empty))),
    ("RegisterMachineSimulation.SKe_bounded",
     "2 < ?b ==> SKe ?c ?p ?b ?q ?k < ?b ^ Suc ?q",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 4)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 4),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_app (template_hole 0, template_var 1))))),
    ("RegisterMachineSimulation.ZLe_bounded",
     "2 < ?b ==> ZLe ?c ?p ?b ?q ?l < ?b ^ Suc ?q",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_hole 3)),
          template_var 4)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 4),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_app (template_hole 0, template_var 1))))),
    ("RegisterMachineSimulation.sum_bt",
     "2 < ?b ==> sum ((^) ?b) {0..?q} < ?b ^ Suc ?q",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_hole 5)),
          template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("RegisterMachineSimulation.sum_int",
     "?c <= ?a + ?b ==> int (?a + ?b - ?c) = int ?a + int ?b - int ?c",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 3, template_var 1)),
               template_app (template_hole 3, template_var 0))),
           template_app (template_hole 3, template_var 2))))),
    ("RegisterMachineSimulation.sum_radd_commutative",
     "(SUM t = 0..?q. \<Sum>R+ ?p ?l (%k. ?f k t)) =
      \<Sum>R+ ?p ?l (%k. sum (?f k) {0..?q})",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         t_empty))),
    ("RegisterMachineSimulation.sum_rsub_commutative",
     "(SUM t = 0..?q. \<Sum>R- ?p ?l (%k. ?f k t) ) =
      \<Sum>R- ?p ?l (%k. sum (?f k) {0..?q}) ",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         t_empty))),
    ("RegisterMachineSimulation.sum_sadd_commutative",
     "(SUM t = 0..?q. \<Sum>S+ ?p ?l (%k. ?f k t) ) =
      \<Sum>S+ ?p ?l (%k. sum (?f k) {0..?q}) ",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         t_empty))),
    ("RegisterMachineSimulation.sum_ssub_nzero_commutative",
     "(SUM t = 0..?q. \<Sum>S- ?p ?l (%k. ?f k t) ) =
      \<Sum>S- ?p ?l (%k. sum (?f k) {0..?q}) ",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         t_empty))),
    ("RegisterMachineSimulation.sum_ssub_zero_commutative",
     "(SUM t = 0..?q. \<Sum>S0 ?p ?l (%k. ?f k t) ) =
      \<Sum>S0 ?p ?l (%k. sum (?f k) {0..?q}) ",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         t_empty))),
    ("RegisterMachineSimulation.sum_sadd_cong",
     "ALL k.
         k <= length ?p - 1 & isadd (?p ! k) & ?l = goes_to (?p ! k) -->
         ?f k = ?g k ==>
      \<Sum>S+ ?p ?l ?f  = \<Sum>S+ ?p ?l ?g ",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)))),
    ("RegisterMachineSimulation.sum_radd_cong",
     "ALL k.
         k <= length ?p - 1 & isadd (?p ! k) & ?l = modifies (?p ! k) -->
         ?f k = ?g k ==>
      \<Sum>R+ ?p ?l ?f = \<Sum>R+ ?p ?l ?g",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)))),
    ("RegisterMachineSimulation.sum_ssub_nzero_cong",
     "ALL k.
         k <= length ?p - 1 & issub (?p ! k) & ?l = goes_to (?p ! k) -->
         ?f k = ?g k ==>
      \<Sum>S- ?p ?l ?f  = \<Sum>S- ?p ?l ?g ",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)))),
    ("RegisterMachineSimulation.sum_ssub_zero_cong",
     "ALL k.
         k <= length ?p - 1 & issub (?p ! k) & ?l = goes_to_alt (?p ! k) -->
         ?f k = ?g k ==>
      \<Sum>S0 ?p ?l ?f  = \<Sum>S0 ?p ?l ?g ",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)))),
    ("RegisterMachineSimulation.sum_rsub_cong",
     "ALL k.
         k <= length ?p - 1 & issub (?p ! k) & ?l = modifies (?p ! k) -->
         ?f k = ?g k ==>
      \<Sum>R- ?p ?l ?f  = \<Sum>R- ?p ?l ?g ",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)))),
    ("RegisterMachineSimulation.sum_distrib",
     "(!!h. ?SX ?p ?x h =
            (SUM k = 0..length ?p - 1. if ?g ?x k then h k else 0)) ==>
      ?SX ?p ?x ?h1.0 + ?SX ?p ?x ?h2.0 =
      ?SX ?p ?x (%k. ?h1.0 k + ?h2.0 k)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_var 5, template_var 4),
                 template_var 3),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_var 5, template_var 4),
               template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_var 5, template_var 4), template_var 3),
           t_empty)))),
    ("RegisterMachineSimulation.sum_commutative",
     "(!!h. ?SX ?p ?x h =
            (SUM k = 0..length ?p - 1. if ?g ?x k then h k else 0)) ==>
      (SUM t = 0..?q. ?SX ?p ?x (%k. ?f k t)) =
      ?SX ?p ?x (%k. sum (?f k) {0..?q})",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app (template_hole 3, template_hole 4),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_var 5, template_var 4), template_var 3),
           t_empty)))),
    ("RegisterMachineSimulation.mult_to_bitAND",
     "[| cells_bounded ?ic ?p ?c; 1 < ?c; ?b = B ?c |]
      ==> (SUM t = 0..?q. ?b ^ t * (Z ?ic ?p ?l t * S ?ic ?p ?k t)) =
          ZLe ?ic ?p ?b ?q ?l && SKe ?ic ?p ?b ?q ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_inequation (less_than, template_hole 12, template_var 4),
        template_equation
         (template_var 3, template_app (template_hole 10, template_var 4))],
       template_equation
        (template_app
          (template_app (template_hole 9, t_empty),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 3),
                 template_var 0),
               template_var 2)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 5),
                 template_var 3),
               template_var 0),
             template_var 1))))),
    ("RegisterMachineSimulation.mult_to_bitAND_state",
     "[| cells_bounded ?ic ?p ?c; 1 < ?c; ?b = B ?c |]
      ==> (SUM t = 0..?q. ?b ^ t * ((1 - Z ?ic ?p ?l t) * S ?ic ?p ?k t)) =
          sum ((^) ?b) {0..?q} - ZLe ?ic ?p ?b ?q ?l &&
          SKe ?ic ?p ?b ?q ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_inequation (less_than, template_hole 13, template_var 4),
        template_equation
         (template_var 3, template_app (template_hole 11, template_var 4))],
       template_equation
        (template_app
          (template_app (template_hole 10, t_empty),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 10, t_empty),
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_var 0))),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 6),
                       template_var 5),
                     template_var 3),
                   template_var 0),
                 template_var 2))),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 6),
                   template_var 5),
                 template_var 3),
               template_var 0),
             template_var 1)))))]:
   (string * thm * template) list
### theory "Draft.RegisterMachineSimulationMoreTemplates"
### 0.340s elapsed time, 0.451s cpu time, 0.059s GC time
val it = (): unit
