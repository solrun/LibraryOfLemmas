Loading theory "Digit_Expansions.Bits_Digits" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.RegisterMachineSimulation" via "Digit_Expansions.Binary_Operations")
Loading theory "Draft.RegisterMachineSpecification" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.RegisterMachineSimulation" via "Draft.RegisterMachineProperties")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "Draft.Parametric_Polynomials" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Draft.Binomial_Coefficient" via "Draft.Digit_Function" via "Draft.Exponential_Relation" via "Draft.Alpha_Sequence" via "Draft.Modulo_Divisibility" via "Draft.Existential_Quantifier" via "Draft.Diophantine_Relations" via "Draft.Assignments")
### theory "Digit_Expansions.Bits_Digits"
### 0.170s elapsed time, 0.682s cpu time, 0.084s GC time
Loading theory "Digit_Expansions.Carries" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.RegisterMachineSimulation" via "Digit_Expansions.Binary_Operations")
### theory "Digit_Expansions.Carries"
### 0.068s elapsed time, 0.272s cpu time, 0.000s GC time
Loading theory "Digit_Expansions.Binary_Operations" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.RegisterMachineSimulation")
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Digit_Expansions.Binary_Operations"
### 0.338s elapsed time, 1.327s cpu time, 0.216s GC time
Loading theory "HOL-Computational_Algebra.Group_Closure" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra")
class ab_group_add = cancel_comm_monoid_add + group_add +
  assumes "ab_left_minus": "!!a. - a + a = (0::'a)"
  assumes "ab_diff_conv_add_uminus": "!!a b. a - b = a + - b"
Proofs for inductive predicate(s) "group_closurep"
  Proving monotonicity ...
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
Found termination order: "{}"
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Computational_Algebra.Fraction_Field"
### 0.919s elapsed time, 3.534s cpu time, 0.686s GC time
Loading theory "HOL-Library.Cancellation" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.RegisterMachineSpecification"
### 1.154s elapsed time, 4.459s cpu time, 0.723s GC time
Loading theory "Draft.RegisterMachineProperties" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.RegisterMachineSimulation")
### theory "HOL-Computational_Algebra.Group_Closure"
### 0.635s elapsed time, 2.402s cpu time, 0.464s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.483s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.483s elapsed time, 1.903s cpu time, 0.163s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "{}"
### theory "HOL-Library.Infinite_Set"
### 0.336s elapsed time, 1.318s cpu time, 0.170s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
Found termination order: "{}"
### theory "Draft.RegisterMachineProperties"
### 0.645s elapsed time, 2.533s cpu time, 0.293s GC time
Loading theory "Draft.RegisterMachineSimulation" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking")
### theory "HOL-Library.More_List"
### 0.292s elapsed time, 1.154s cpu time, 0.154s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "{}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.371s elapsed time, 1.455s cpu time, 0.175s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
### theory "Draft.Parametric_Polynomials"
### 2.468s elapsed time, 9.629s cpu time, 1.263s GC time
Loading theory "Draft.Assignments" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Draft.Binomial_Coefficient" via "Draft.Digit_Function" via "Draft.Exponential_Relation" via "Draft.Alpha_Sequence" via "Draft.Modulo_Divisibility" via "Draft.Existential_Quantifier" via "Draft.Diophantine_Relations")
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "{}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
### theory "Draft.RegisterMachineSimulation"
### 0.833s elapsed time, 3.256s cpu time, 0.389s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.523s elapsed time, 1.858s cpu time, 1.032s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  mset :: "'a list => 'a multiset"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "Draft.Assignments"
### 1.162s elapsed time, 4.360s cpu time, 1.404s GC time
Loading theory "Draft.Diophantine_Relations" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Draft.Binomial_Coefficient" via "Draft.Digit_Function" via "Draft.Exponential_Relation" via "Draft.Alpha_Sequence" via "Draft.Modulo_Divisibility" via "Draft.Existential_Quantifier")
### theory "HOL-Library.Stream"
### 1.269s elapsed time, 4.789s cpu time, 1.404s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.204s elapsed time, 4.515s cpu time, 1.478s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Draft.Binomial_Coefficient" via "Draft.Digit_Function" via "Draft.Exponential_Relation" via "Draft.Alpha_Sequence" via "Draft.Exponentiation")
Found termination order: "size <*mlex*> {}"
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Ambiguous input (line 53 of "$AFP/DPRM_Theorem/Diophantine/Diophantine_Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>ALLC_LIST" ("\<^const>List.list.Nil") ("_position" DF))
###     ("_position" TRUE)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>ALLC_LIST" ("\<^const>List.list.Nil")
###     ("\<^const>HOL.eq" ("_position" DF) ("_position" TRUE))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/DPRM_Theorem/Diophantine/Diophantine_Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>ALLC_LIST"
###       ("\<^const>List.list.Cons" ("_position" l) ("_position" ls))
###       ("_position" DF))
###     ("\<^const>Diophantine_Relations.relation.AND"
###       ("_applC" ("_position" DF) ("_position" l))
###       ("\<^fixed>ALLC_LIST" ("_position" ls) ("_position" DF)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>ALLC_LIST"
###     ("\<^const>List.list.Cons" ("_position" l) ("_position" ls))
###     ("\<^const>HOL.eq" ("_position" DF)
###       ("\<^const>Diophantine_Relations.relation.AND"
###         ("_applC" ("_position" DF) ("_position" l))
###         ("\<^fixed>ALLC_LIST" ("_position" ls) ("_position" DF))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Discrete"
### 0.177s elapsed time, 0.695s cpu time, 0.064s GC time
Loading theory "Draft.Exponentiation" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Draft.Binomial_Coefficient" via "Draft.Digit_Function" via "Draft.Exponential_Relation" via "Draft.Alpha_Sequence")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
locale Exp_Matrices
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list length <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.Diophantine_Relations"
### 1.947s elapsed time, 7.460s cpu time, 1.776s GC time
Loading theory "Draft.Existential_Quantifier" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Draft.Binomial_Coefficient" via "Draft.Digit_Function" via "Draft.Exponential_Relation" via "Draft.Alpha_Sequence" via "Draft.Modulo_Divisibility")
### theory "Draft.Existential_Quantifier"
### 0.032s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.Modulo_Divisibility" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Draft.Binomial_Coefficient" via "Draft.Digit_Function" via "Draft.Exponential_Relation" via "Draft.Alpha_Sequence")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.448s elapsed time, 9.431s cpu time, 2.006s GC time
Loading theory "Draft.Equation_Setup" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations")
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
### theory "Draft.Modulo_Divisibility"
### 0.048s elapsed time, 0.190s cpu time, 0.000s GC time
Loading theory "Draft.Templates" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.ExtrEqs")
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.099s elapsed time, 0.385s cpu time, 0.103s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Mask_EquationsMoreTemplates")
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
locale register_machine
  fixes p :: "instruction list"
    and n :: "nat"
  assumes "register_machine p n"
locale rm_eq_fixes
  fixes p :: "instruction list"
    and n :: "nat"
    and a :: "nat"
    and b :: "nat"
    and c :: "nat"
    and d :: "nat"
    and e :: "nat"
    and f :: "nat"
    and q :: "nat"
    and r :: "nat => nat"
    and z :: "nat => nat"
    and s :: "nat => nat"
  assumes "rm_eq_fixes p n"
### theory "Draft.Equation_Setup"
### 0.223s elapsed time, 0.882s cpu time, 0.103s GC time
### theory "HOL-Library.Multiset"
### 4.457s elapsed time, 17.105s cpu time, 3.697s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.671s elapsed time, 2.256s cpu time, 0.196s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
### theory "Draft.Exponentiation"
### 1.878s elapsed time, 6.066s cpu time, 0.650s GC time
Loading theory "Draft.Alpha_Sequence" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Draft.Binomial_Coefficient" via "Draft.Digit_Function" via "Draft.Exponential_Relation")
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
### theory "Draft.Alpha_Sequence"
### 0.383s elapsed time, 0.807s cpu time, 0.104s GC time
Loading theory "Draft.Exponential_Relation" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Draft.Binomial_Coefficient" via "Draft.Digit_Function")
### Ambiguous input (line 74 of "$AFP/DPRM_Theorem/Diophantine/Exponential_Relation.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_list"
###     ("\<^const>HOL.eq" ("_position" Q)
###       ("\<^const>Power.power_class.power" ("_position" R) ("_position" S))))
###   ("_applC" ("_position" TERNARY)
###     ("_cargs"
###       ("_lambda"
###         ("_pttrns" ("_position" a)
###           ("_pttrns" ("_position" b) ("_position" c)))
###         ("\<^const>HOL.eq" ("_position" a)
###           ("\<^const>Power.power_class.power" ("_position" b)
###             ("_position" c))))
###       ("_cargs" ("_position" Q)
###         ("_cargs" ("_position" R) ("_position" S))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>exp" ("_position" Q) ("_position" R) ("_position" S))
###   ("_applC" ("_position" TERNARY)
###     ("_cargs"
###       ("_lambda"
###         ("_pttrns" ("_position" a)
###           ("_pttrns" ("_position" b) ("_position" c)))
###         ("\<^const>HOL.eq" ("_position" a)
###           ("\<^const>Power.power_class.power" ("_position" b)
###             ("_position" c))))
###       ("_cargs" ("_position" Q)
###         ("_cargs" ("_position" R) ("_position" S))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/DPRM_Theorem/Diophantine/Exponential_Relation.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" D)
###   ("_list"
###     ("\<^const>HOL.eq" ("_position" P)
###       ("\<^const>Power.power_class.power" ("_position" Q)
###         ("_position" R)))))
### ("\<^const>Pure.eq" ("_position" D)
###   ("\<^const>Exponential_Relation.exp" ("_position" P) ("_position" Q)
###     ("_position" R)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Exponential_Relation"
### 0.063s elapsed time, 0.123s cpu time, 0.000s GC time
Loading theory "Draft.Digit_Function" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Draft.Binomial_Coefficient")
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
### theory "Draft.Digit_Function"
### 0.255s elapsed time, 0.532s cpu time, 0.048s GC time
Loading theory "Draft.Binomial_Coefficient" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal")
### Ambiguous input (line 20 of "$AFP/DPRM_Theorem/Diophantine/Binomial_Coefficient.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_list"
###     ("\<^const>HOL.eq" ("_position" A)
###       ("\<^const>Binomial.binomial" ("_position" B) ("_position" C))))
###   ("_applC" ("_position" TERNARY)
###     ("_cargs"
###       ("_lambda"
###         ("_pttrns" ("_position" a)
###           ("_pttrns" ("_position" b) ("_position" c)))
###         ("\<^const>HOL.eq" ("_position" a)
###           ("\<^const>Binomial.binomial" ("_position" b) ("_position" c))))
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" B) ("_position" C))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>binomial_coefficient" ("_position" A) ("_position" B)
###     ("_position" C))
###   ("_applC" ("_position" TERNARY)
###     ("_cargs"
###       ("_lambda"
###         ("_pttrns" ("_position" a)
###           ("_pttrns" ("_position" b) ("_position" c)))
###         ("\<^const>HOL.eq" ("_position" a)
###           ("\<^const>Binomial.binomial" ("_position" b) ("_position" c))))
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" B) ("_position" C))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 24 of "$AFP/DPRM_Theorem/Diophantine/Binomial_Coefficient.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" DR)
###   ("_list"
###     ("\<^const>HOL.eq" ("_position" C)
###       ("\<^const>Binomial.binomial" ("_position" A) ("_position" B)))))
### ("\<^const>Pure.eq" ("_position" DR)
###   ("\<^const>Binomial_Coefficient.binomial_coefficient" ("_position" C)
###     ("_position" A) ("_position" B)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Binomial_Coefficient"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 4.657s elapsed time, 7.181s cpu time, 0.495s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 4.502s elapsed time, 9.406s cpu time, 0.773s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra")
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.204s elapsed time, 0.408s cpu time, 0.000s GC time
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 6.655s elapsed time, 11.962s cpu time, 0.931s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Nth_Powers")
Loading theory "HOL-Computational_Algebra.Formal_Power_Series" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### theory "HOL-Computational_Algebra.Primes"
### 0.213s elapsed time, 0.669s cpu time, 0.095s GC time
Loading theory "HOL-Computational_Algebra.Nth_Powers" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Squarefree" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.399s elapsed time, 1.409s cpu time, 0.215s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fps :: (zero) zero
  zero_fps == zero_class.zero :: 'a fps
instantiation
  fps :: ({one,zero}) one
  one_fps == one_class.one :: 'a fps
### theory "HOL-Computational_Algebra.Squarefree"
### 0.210s elapsed time, 0.823s cpu time, 0.120s GC time
instantiation
  fps :: (plus) plus
  plus_fps == plus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (minus) minus
  minus_fps == minus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (uminus) uminus
  uminus_fps == uminus :: 'a fps => 'a fps
### theory "HOL-Computational_Algebra.Nth_Powers"
### 0.239s elapsed time, 0.913s cpu time, 0.120s GC time
instantiation
  fps :: ({comm_monoid_add,times}) times
  times_fps == times :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (zero) unit_factor
  unit_factor_fps == unit_factor :: 'a fps => 'a fps
### Cannot skip proof of schematic goal statement
instantiation
  fps :: ({minus,zero}) dist
  dist_fps == dist :: 'a fps => 'a fps => real
instantiation
  fps :: (group_add) metric_space
  uniformity_fps == uniformity :: ('a fps * 'a fps) filter
  open_fps == open :: 'a fps set => bool
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  fps :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fps == inverse :: 'a fps => 'a fps
  divide_fps == divide :: 'a fps => 'a fps => 'a fps
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 0.868s elapsed time, 1.957s cpu time, 0.205s GC time
instantiation
  fps :: ({inverse,uminus,comm_semiring_1}) modulo
  modulo_fps == modulo :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (field) normalization_semidom_multiplicative
  normalize_fps == normalize :: 'a fps => 'a fps
instantiation
  fps :: (field) euclidean_ring_cancel
  euclidean_size_fps == euclidean_size :: 'a fps => nat
instantiation
  fps :: (field) euclidean_ring_gcd
  Gcd_fps == Gcd :: 'a fps set => 'a fps
  Lcm_fps == Lcm :: 'a fps set => 'a fps
  gcd_fps == gcd :: 'a fps => 'a fps => 'a fps
  lcm_fps == lcm :: 'a fps => 'a fps => 'a fps
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
bundle fps_notation
### theory "HOL-Computational_Algebra.Formal_Power_Series"
### 3.353s elapsed time, 7.558s cpu time, 3.480s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_FPS" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series")
signature POLY_FPS =
  sig
    val eq_conv: conv
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
structure Poly_Fps:
  sig
    val const_binop_conv: string -> conv -> cterm -> thm
    val eq_conv: cterm -> thm
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
consts
  prefix_length_aux :: "('a => bool) => nat => 'a list => nat"
### theory "HOL-Computational_Algebra.Polynomial_FPS"
### 0.466s elapsed time, 0.513s cpu time, 0.040s GC time
Loading theory "HOL-Computational_Algebra.Formal_Laurent_Series" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fls :: (zero) zero
  zero_fls == zero_class.zero :: 'a fls
instantiation
  fls :: ({one,zero}) one
  one_fls == one_class.one :: 'a fls
instantiation
  fls :: (monoid_add) plus
  plus_fls == plus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) minus
  minus_fls == minus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) uminus
  uminus_fls == uminus :: 'a fls => 'a fls
instantiation
  fls :: ({comm_monoid_add,times}) times
  times_fls == times :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fls == inverse :: 'a fls => 'a fls
  divide_fls == divide :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) metric_space
  dist_fls == dist :: 'a fls => 'a fls => real
  uniformity_fls == uniformity :: ('a fls * 'a fls) filter
  open_fls == open :: 'a fls set => bool
bundle fls_notation
### theory "HOL-Computational_Algebra.Formal_Laurent_Series"
### 1.419s elapsed time, 1.576s cpu time, 0.215s GC time
Loading theory "HOL-Computational_Algebra.Computational_Algebra" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal" via "Lucas_Theorem.Lucas_Theorem")
### theory "HOL-Computational_Algebra.Computational_Algebra"
### 0.898s elapsed time, 0.966s cpu time, 0.081s GC time
Loading theory "Lucas_Theorem.Lucas_Theorem" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking" via "Draft.Binary_Orthogonal")
### theory "Lucas_Theorem.Lucas_Theorem"
### 0.094s elapsed time, 0.098s cpu time, 0.000s GC time
Loading theory "Draft.Binary_Orthogonal" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And" via "Draft.Binary_Masking")
### theory "Draft.Binary_Orthogonal"
### 0.568s elapsed time, 0.632s cpu time, 0.087s GC time
Loading theory "Draft.Binary_Masking" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking" via "Draft.Binary_And")
### theory "Draft.Binary_Masking"
### 0.050s elapsed time, 0.050s cpu time, 0.000s GC time
Loading theory "Draft.Binary_And" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations" via "Draft.MachineMasking")
### Ambiguous input (line 124 of "$AFP/DPRM_Theorem/Diophantine/Binary_And.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_list"
###     ("\<^const>HOL.eq" ("_position" A)
###       ("\<^const>Binary_Operations.bitAND_nat" ("_position" B)
###         ("_position" C))))
###   ("_applC" ("_position" TERNARY)
###     ("_cargs"
###       ("_lambda"
###         ("_pttrns" ("_position" a)
###           ("_pttrns" ("_position" b) ("_position" c)))
###         ("\<^const>HOL.eq" ("_position" a)
###           ("\<^const>Binary_Operations.bitAND_nat" ("_position" b)
###             ("_position" c))))
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" B) ("_position" C))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>binary_and" ("_position" A) ("_position" B) ("_position" C))
###   ("_applC" ("_position" TERNARY)
###     ("_cargs"
###       ("_lambda"
###         ("_pttrns" ("_position" a)
###           ("_pttrns" ("_position" b) ("_position" c)))
###         ("\<^const>HOL.eq" ("_position" a)
###           ("\<^const>Binary_Operations.bitAND_nat" ("_position" b)
###             ("_position" c))))
###       ("_cargs" ("_position" A)
###         ("_cargs" ("_position" B) ("_position" C))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 128 of "$AFP/DPRM_Theorem/Diophantine/Binary_And.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" DR)
###   ("_list"
###     ("\<^const>HOL.eq" ("_position" A)
###       ("\<^const>Binary_Operations.bitAND_nat" ("_position" B)
###         ("_position" C)))))
### ("\<^const>Pure.eq" ("_position" DR)
###   ("\<^const>Binary_And.binary_and" ("_position" A) ("_position" B)
###     ("_position" C)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Binary_And"
### 0.072s elapsed time, 0.072s cpu time, 0.000s GC time
Loading theory "Draft.MachineMasking" (required by "Draft.Mask_EquationsMoreTemplates" via "Draft.Mask_Equations")
### theory "Draft.MachineMasking"
### 0.693s elapsed time, 0.787s cpu time, 0.126s GC time
Loading theory "Draft.Mask_Equations" (required by "Draft.Mask_EquationsMoreTemplates")
locale rm_eq_fixes
  fixes p :: "instruction list"
    and n :: "nat"
    and a :: "nat"
    and b :: "nat"
    and c :: "nat"
    and d :: "nat"
    and e :: "nat"
    and f :: "nat"
    and q :: "nat"
    and r :: "nat => nat"
    and z :: "nat => nat"
    and s :: "nat => nat"
  assumes "rm_eq_fixes p n"
locale register_machine
  fixes p :: "instruction list"
    and n :: "nat"
  assumes "register_machine p n"
### theory "Draft.Mask_Equations"
### 0.264s elapsed time, 0.264s cpu time, 0.000s GC time
Loading theory "Draft.Mask_EquationsMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Mask_EquationsMoreTemplates"
### 0.664s elapsed time, 0.903s cpu time, 0.102s GC time
val it = (): unit
