Loading theory "Draft.Multiset_Ordering_More" (required by "Draft.Multiset_Ordering_in_NPTemplates" via "Draft.Multiset_Ordering_in_NP")
Loading theory "Draft.Templates" (required by "Draft.Multiset_Ordering_in_NPTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Propositional_Formula" (required by "Draft.Multiset_Ordering_in_NPTemplates" via "Draft.Multiset_Ordering_in_NP")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.228s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Multiset_Ordering_in_NPTemplates")
### theory "Draft.Multiset_Ordering_More"
### 0.148s elapsed time, 0.459s cpu time, 0.036s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.546s elapsed time, 1.196s cpu time, 0.116s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Propositional_Formula"
### 0.927s elapsed time, 1.806s cpu time, 0.173s GC time
Loading theory "Draft.Multiset_Ordering_in_NP" (required by "Draft.Multiset_Ordering_in_NPTemplates")
locale encoder
  fixes eval :: "('a => bool) => 'f => bool"
    and enc_False :: "'f"
    and enc_True :: "'f"
    and enc_pos :: "'a => 'f"
    and enc_neg :: "'a => 'f"
    and enc_different :: "'a => 'a => 'f"
    and enc_equiv_and_not :: "'a => 'a => 'a => 'f"
    and enc_equiv_ite :: "'a => 'a => 'a => 'a => 'f"
    and enc_ite :: "'a => 'a => 'a => 'f"
    and enc_impl :: "'a => 'f => 'f"
    and enc_var_impl :: "'a => 'a => 'f"
    and enc_not_and :: "'a => 'a => 'f"
    and enc_not_all :: "'a list => 'f"
    and enc_conj :: "'f list => 'f"
  assumes
    "encoder eval enc_False enc_True enc_pos enc_neg enc_different
      enc_equiv_and_not enc_equiv_ite enc_ite enc_impl enc_var_impl
      enc_not_and enc_not_all enc_conj"
### Missing patterns in function definition:
### encode_sum_0_1_main [] = undefined
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
locale ms_encoder
  fixes enc_False :: "'f"
    and enc_True :: "'f"
    and enc_pos :: "PropVar => 'f"
    and enc_neg :: "PropVar => 'f"
    and enc_different :: "PropVar => PropVar => 'f"
    and enc_equiv_and_not :: "PropVar => PropVar => PropVar => 'f"
    and enc_equiv_ite :: "PropVar => PropVar => PropVar => PropVar => 'f"
    and enc_ite :: "PropVar => PropVar => PropVar => 'f"
    and enc_impl :: "PropVar => 'f => 'f"
    and enc_var_impl :: "PropVar => PropVar => 'f"
    and enc_not_and :: "PropVar => PropVar => 'f"
    and enc_not_all :: "PropVar list => 'f"
    and enc_conj :: "'f list => 'f"
    and eval :: "(PropVar => bool) => 'f => bool"
  assumes
    "ms_encoder enc_False enc_True enc_pos enc_neg enc_different
      enc_equiv_and_not enc_equiv_ite enc_ite enc_impl enc_var_impl
      enc_not_and enc_not_all enc_conj eval"
locale encoder
  fixes eval :: "('a => bool) => 'f => bool"
    and enc_False :: "'f"
    and enc_True :: "'f"
    and enc_pos :: "'a => 'f"
    and enc_neg :: "'a => 'f"
    and enc_different :: "'a => 'a => 'f"
    and enc_equiv_and_not :: "'a => 'a => 'a => 'f"
    and enc_equiv_ite :: "'a => 'a => 'a => 'a => 'f"
    and enc_ite :: "'a => 'a => 'a => 'f"
    and enc_impl :: "'a => 'f => 'f"
    and enc_var_impl :: "'a => 'a => 'f"
    and enc_not_and :: "'a => 'a => 'f"
    and enc_not_all :: "'a list => 'f"
    and enc_conj :: "'f list => 'f"
  assumes
    "encoder eval enc_False enc_True enc_pos enc_neg enc_different
      enc_equiv_and_not enc_equiv_ite enc_ite enc_impl enc_var_impl
      enc_not_and enc_not_all enc_conj"
locale ms_encoder
  fixes enc_False :: "'f"
    and enc_True :: "'f"
    and enc_pos :: "PropVar => 'f"
    and enc_neg :: "PropVar => 'f"
    and enc_different :: "PropVar => PropVar => 'f"
    and enc_equiv_and_not :: "PropVar => PropVar => PropVar => 'f"
    and enc_equiv_ite :: "PropVar => PropVar => PropVar => PropVar => 'f"
    and enc_ite :: "PropVar => PropVar => PropVar => 'f"
    and enc_impl :: "PropVar => 'f => 'f"
    and enc_var_impl :: "PropVar => PropVar => 'f"
    and enc_not_and :: "PropVar => PropVar => 'f"
    and enc_not_all :: "PropVar list => 'f"
    and enc_conj :: "'f list => 'f"
    and eval :: "(PropVar => bool) => 'f => bool"
  assumes
    "ms_encoder enc_False enc_True enc_pos enc_neg enc_different
      enc_equiv_and_not enc_equiv_ite enc_ite enc_impl enc_var_impl
      enc_not_and enc_not_all enc_conj eval"
pf_encode_mul_ext ?f ?xs ?ys =
(?\<phi>\<^sub>S, ?\<phi>\<^sub>N\<^sub>S) ==>
mul_ext ?f ?xs ?ys =
(EX v. eval v ?\<phi>\<^sub>S, EX v. eval v ?\<phi>\<^sub>N\<^sub>S)
cnf_encode_mul_ext ?f ?xs ?ys =
(?\<phi>\<^sub>S, ?\<phi>\<^sub>N\<^sub>S) ==>
mul_ext ?f ?xs ?ys =
(EX v. eval_cnf v ?\<phi>\<^sub>S, EX v. eval_cnf v ?\<phi>\<^sub>N\<^sub>S)
### theory "Draft.Multiset_Ordering_in_NP"
### 2.493s elapsed time, 2.904s cpu time, 0.586s GC time
Loading theory "Draft.Multiset_Ordering_in_NPTemplates"
"Conj
  [Neg (Conj [Prop (Epsilon 0), Prop (Epsilon 1), Prop (Epsilon 2)]),
   Impl (Prop (Gamma 0 0)) (Prop (Epsilon 0)), Neg (Prop (Gamma 0 1)),
   Neg (Prop (Gamma 0 2)), Neg (Prop (Gamma 0 3)), Neg (Prop (Gamma 0 4)),
   Impl (Prop (Gamma 1 1)) (Prop (Epsilon 1)), Neg (Prop (Gamma 1 2)),
   Neg (Prop (Gamma 1 3)), Neg (Prop (Gamma 1 4)),
   Impl (Prop (Gamma 2 2)) (Prop (Epsilon 2)), Neg (Prop (Gamma 2 3)),
   Neg (Prop (Gamma 2 4)),
   Disj
    [Conj [Prop (Gamma 0 0), Prop (AuxZeroJI 1 0)],
     Conj [Neg (Prop (Gamma 0 0)), Prop (AuxOneJI 1 0)]],
   Equiv (Prop (AuxZeroJI 1 0))
    (Conj [Prop (AuxZeroJI 2 0), Neg (Prop (Gamma 1 0))]),
   Equiv (Prop (AuxOneJI 1 0))
    (Disj
      [Conj [Prop (Gamma 1 0), Prop (AuxZeroJI 2 0)],
       Conj [Neg (Prop (Gamma 1 0)), Prop (Gamma 2 0)]]),
   Equiv (Prop (AuxZeroJI 2 0)) (Neg (Prop (Gamma 2 0))),
   Disj
    [Conj [Prop (Gamma 0 1), Prop (AuxZeroJI 1 1)],
     Conj [Neg (Prop (Gamma 0 1)), Prop (AuxOneJI 1 1)]],
   Equiv (Prop (AuxZeroJI 1 1))
    (Conj [Prop (AuxZeroJI 2 1), Neg (Prop (Gamma 1 1))]),
   Equiv (Prop (AuxOneJI 1 1))
    (Disj
      [Conj [Prop (Gamma 1 1), Prop (AuxZeroJI 2 1)],
       Conj [Neg (Prop (Gamma 1 1)), Prop (Gamma 2 1)]]),
   Equiv (Prop (AuxZeroJI 2 1)) (Neg (Prop (Gamma 2 1))),
   Disj
    [Conj [Prop (Gamma 0 2), Prop (AuxZeroJI 1 2)],
     Conj [Neg (Prop (Gamma 0 2)), Prop (AuxOneJI 1 2)]],
   Equiv (Prop (AuxZeroJI 1 2))
    (Conj [Prop (AuxZeroJI 2 2), Neg (Prop (Gamma 1 2))]),
   Equiv (Prop (AuxOneJI 1 2))
    (Disj
      [Conj [Prop (Gamma 1 2), Prop (AuxZeroJI 2 2)],
       Conj [Neg (Prop (Gamma 1 2)), Prop (Gamma 2 2)]]),
   Equiv (Prop (AuxZeroJI 2 2)) (Neg (Prop (Gamma 2 2))),
   Disj
    [Conj [Prop (Gamma 0 3), Prop (AuxZeroJI 1 3)],
     Conj [Neg (Prop (Gamma 0 3)), Prop (AuxOneJI 1 3)]],
   Equiv (Prop (AuxZeroJI 1 3))
    (Conj [Prop (AuxZeroJI 2 3), Neg (Prop (Gamma 1 3))]),
   Equiv (Prop (AuxOneJI 1 3))
    (Disj
      [Conj [Prop (Gamma 1 3), Prop (AuxZeroJI 2 3)],
       Conj [Neg (Prop (Gamma 1 3)), Prop (Gamma 2 3)]]),
   Equiv (Prop (AuxZeroJI 2 3)) (Neg (Prop (Gamma 2 3))),
   Disj
    [Conj [Prop (Gamma 0 4), Prop (AuxZeroJI 1 4)],
     Conj [Neg (Prop (Gamma 0 4)), Prop (AuxOneJI 1 4)]],
   Equiv (Prop (AuxZeroJI 1 4))
    (Conj [Prop (AuxZeroJI 2 4), Neg (Prop (Gamma 1 4))]),
   Equiv (Prop (AuxOneJI 1 4))
    (Disj
      [Conj [Prop (Gamma 1 4), Prop (AuxZeroJI 2 4)],
       Conj [Neg (Prop (Gamma 1 4)), Prop (Gamma 2 4)]]),
   Equiv (Prop (AuxZeroJI 2 4)) (Neg (Prop (Gamma 2 4))),
   Impl (Prop (Epsilon 0))
    (Disj
      [Conj [Prop (Gamma 0 0), Prop (AuxZeroIJ 0 1)],
       Conj [Neg (Prop (Gamma 0 0)), Prop (AuxOneIJ 0 1)]]),
   Equiv (Prop (AuxZeroIJ 0 1))
    (Conj [Prop (AuxZeroIJ 0 2), Neg (Prop (Gamma 0 1))]),
   Equiv (Prop (AuxOneIJ 0 1))
    (Disj
      [Conj [Prop (Gamma 0 1), Prop (AuxZeroIJ 0 2)],
       Conj [Neg (Prop (Gamma 0 1)), Prop (AuxOneIJ 0 2)]]),
   Equiv (Prop (AuxZeroIJ 0 2))
    (Conj [Prop (AuxZeroIJ 0 3), Neg (Prop (Gamma 0 2))]),
   Equiv (Prop (AuxOneIJ 0 2))
    (Disj
      [Conj [Prop (Gamma 0 2), Prop (AuxZeroIJ 0 3)],
       Conj [Neg (Prop (Gamma 0 2)), Prop (AuxOneIJ 0 3)]]),
   Equiv (Prop (AuxZeroIJ 0 3))
    (Conj [Prop (AuxZeroIJ 0 4), Neg (Prop (Gamma 0 3))]),
   Equiv (Prop (AuxOneIJ 0 3))
    (Disj
      [Conj [Prop (Gamma 0 3), Prop (AuxZeroIJ 0 4)],
       Conj [Neg (Prop (Gamma 0 3)), Prop (Gamma 0 4)]]),
   Equiv (Prop (AuxZeroIJ 0 4)) (Neg (Prop (Gamma 0 4))),
   Impl (Prop (Epsilon 1))
    (Disj
      [Conj [Prop (Gamma 1 0), Prop (AuxZeroIJ 1 1)],
       Conj [Neg (Prop (Gamma 1 0)), Prop (AuxOneIJ 1 1)]]),
   Equiv (Prop (AuxZeroIJ 1 1))
    (Conj [Prop (AuxZeroIJ 1 2), Neg (Prop (Gamma 1 1))]),
   Equiv (Prop (AuxOneIJ 1 1))
    (Disj
      [Conj [Prop (Gamma 1 1), Prop (AuxZeroIJ 1 2)],
       Conj [Neg (Prop (Gamma 1 1)), Prop (AuxOneIJ 1 2)]]),
   Equiv (Prop (AuxZeroIJ 1 2))
    (Conj [Prop (AuxZeroIJ 1 3), Neg (Prop (Gamma 1 2))]),
   Equiv (Prop (AuxOneIJ 1 2))
    (Disj
      [Conj [Prop (Gamma 1 2), Prop (AuxZeroIJ 1 3)],
       Conj [Neg (Prop (Gamma 1 2)), Prop (AuxOneIJ 1 3)]]),
   Equiv (Prop (AuxZeroIJ 1 3))
    (Conj [Prop (AuxZeroIJ 1 4), Neg (Prop (Gamma 1 3))]),
   Equiv (Prop (AuxOneIJ 1 3))
    (Disj
      [Conj [Prop (Gamma 1 3), Prop (AuxZeroIJ 1 4)],
       Conj [Neg (Prop (Gamma 1 3)), Prop (Gamma 1 4)]]),
   Equiv (Prop (AuxZeroIJ 1 4)) (Neg (Prop (Gamma 1 4))),
   Impl (Prop (Epsilon 2))
    (Disj
      [Conj [Prop (Gamma 2 0), Prop (AuxZeroIJ 2 1)],
       Conj [Neg (Prop (Gamma 2 0)), Prop (AuxOneIJ 2 1)]]),
   Equiv (Prop (AuxZeroIJ 2 1))
    (Conj [Prop (AuxZeroIJ 2 2), Neg (Prop (Gamma 2 1))]),
   Equiv (Prop (AuxOneIJ 2 1))
    (Disj
      [Conj [Prop (Gamma 2 1), Prop (AuxZeroIJ 2 2)],
       Conj [Neg (Prop (Gamma 2 1)), Prop (AuxOneIJ 2 2)]]),
   Equiv (Prop (AuxZeroIJ 2 2))
    (Conj [Prop (AuxZeroIJ 2 3), Neg (Prop (Gamma 2 2))]),
   Equiv (Prop (AuxOneIJ 2 2))
    (Disj
      [Conj [Prop (Gamma 2 2), Prop (AuxZeroIJ 2 3)],
       Conj [Neg (Prop (Gamma 2 2)), Prop (AuxOneIJ 2 3)]]),
   Equiv (Prop (AuxZeroIJ 2 3))
    (Conj [Prop (AuxZeroIJ 2 4), Neg (Prop (Gamma 2 3))]),
   Equiv (Prop (AuxOneIJ 2 3))
    (Disj
      [Conj [Prop (Gamma 2 3), Prop (AuxZeroIJ 2 4)],
       Conj [Neg (Prop (Gamma 2 3)), Prop (Gamma 2 4)]]),
   Equiv (Prop (AuxZeroIJ 2 4)) (Neg (Prop (Gamma 2 4)))]"
  :: "PropVar formula"
"[[(Epsilon 0, False), (Epsilon 1, False), (Epsilon 2, False)],
  [(Gamma 0 0, False), (Epsilon 0, True)], [(Gamma 0 1, False)],
  [(Gamma 0 2, False)], [(Gamma 0 3, False)], [(Gamma 0 4, False)],
  [(Gamma 1 1, False), (Epsilon 1, True)], [(Gamma 1 2, False)],
  [(Gamma 1 3, False)], [(Gamma 1 4, False)],
  [(Gamma 2 2, False), (Epsilon 2, True)], [(Gamma 2 3, False)],
  [(Gamma 2 4, False)], [(Gamma 0 0, True), (AuxOneJI 1 0, True)],
  [(Gamma 0 0, False), (AuxZeroJI 1 0, True)],
  [(AuxZeroJI 1 0, False), (AuxZeroJI 2 0, True)],
  [(AuxZeroJI 1 0, False), (Gamma 1 0, False)],
  [(AuxZeroJI 1 0, True), (AuxZeroJI 2 0, False), (Gamma 1 0, True)],
  [(AuxOneJI 1 0, True), (Gamma 1 0, True), (Gamma 2 0, False)],
  [(AuxOneJI 1 0, True), (Gamma 1 0, False), (AuxZeroJI 2 0, False)],
  [(AuxOneJI 1 0, False), (Gamma 1 0, False), (AuxZeroJI 2 0, True)],
  [(AuxOneJI 1 0, False), (Gamma 1 0, True), (Gamma 2 0, True)],
  [(AuxZeroJI 2 0, True), (Gamma 2 0, True)],
  [(AuxZeroJI 2 0, False), (Gamma 2 0, False)],
  [(Gamma 0 1, True), (AuxOneJI 1 1, True)],
  [(Gamma 0 1, False), (AuxZeroJI 1 1, True)],
  [(AuxZeroJI 1 1, False), (AuxZeroJI 2 1, True)],
  [(AuxZeroJI 1 1, False), (Gamma 1 1, False)],
  [(AuxZeroJI 1 1, True), (AuxZeroJI 2 1, False), (Gamma 1 1, True)],
  [(AuxOneJI 1 1, True), (Gamma 1 1, True), (Gamma 2 1, False)],
  [(AuxOneJI 1 1, True), (Gamma 1 1, False), (AuxZeroJI 2 1, False)],
  [(AuxOneJI 1 1, False), (Gamma 1 1, False), (AuxZeroJI 2 1, True)],
  [(AuxOneJI 1 1, False), (Gamma 1 1, True), (Gamma 2 1, True)],
  [(AuxZeroJI 2 1, True), (Gamma 2 1, True)],
  [(AuxZeroJI 2 1, False), (Gamma 2 1, False)],
  [(Gamma 0 2, True), (AuxOneJI 1 2, True)],
  [(Gamma 0 2, False), (AuxZeroJI 1 2, True)],
  [(AuxZeroJI 1 2, False), (AuxZeroJI 2 2, True)],
  [(AuxZeroJI 1 2, False), (Gamma 1 2, False)],
  [(AuxZeroJI 1 2, True), (AuxZeroJI 2 2, False), (Gamma 1 2, True)],
  [(AuxOneJI 1 2, True), (Gamma 1 2, True), (Gamma 2 2, False)],
  [(AuxOneJI 1 2, True), (Gamma 1 2, False), (AuxZeroJI 2 2, False)],
  [(AuxOneJI 1 2, False), (Gamma 1 2, False), (AuxZeroJI 2 2, True)],
  [(AuxOneJI 1 2, False), (Gamma 1 2, True), (Gamma 2 2, True)],
  [(AuxZeroJI 2 2, True), (Gamma 2 2, True)],
  [(AuxZeroJI 2 2, False), (Gamma 2 2, False)],
  [(Gamma 0 3, True), (AuxOneJI 1 3, True)],
  [(Gamma 0 3, False), (AuxZeroJI 1 3, True)],
  [(AuxZeroJI 1 3, False), (AuxZeroJI 2 3, True)],
  [(AuxZeroJI 1 3, False), (Gamma 1 3, False)],
  [(AuxZeroJI 1 3, True), (AuxZeroJI 2 3, False), (Gamma 1 3, True)],
  [(AuxOneJI 1 3, True), (Gamma 1 3, True), (Gamma 2 3, False)],
  [(AuxOneJI 1 3, True), (Gamma 1 3, False), (AuxZeroJI 2 3, False)],
  [(AuxOneJI 1 3, False), (Gamma 1 3, False), (AuxZeroJI 2 3, True)],
  [(AuxOneJI 1 3, False), (Gamma 1 3, True), (Gamma 2 3, True)],
  [(AuxZeroJI 2 3, True), (Gamma 2 3, True)],
  [(AuxZeroJI 2 3, False), (Gamma 2 3, False)],
  [(Gamma 0 4, True), (AuxOneJI 1 4, True)],
  [(Gamma 0 4, False), (AuxZeroJI 1 4, True)],
  [(AuxZeroJI 1 4, False), (AuxZeroJI 2 4, True)],
  [(AuxZeroJI 1 4, False), (Gamma 1 4, False)],
  [(AuxZeroJI 1 4, True), (AuxZeroJI 2 4, False), (Gamma 1 4, True)],
  [(AuxOneJI 1 4, True), (Gamma 1 4, True), (Gamma 2 4, False)],
  [(AuxOneJI 1 4, True), (Gamma 1 4, False), (AuxZeroJI 2 4, False)],
  [(AuxOneJI 1 4, False), (Gamma 1 4, False), (AuxZeroJI 2 4, True)],
  [(AuxOneJI 1 4, False), (Gamma 1 4, True), (Gamma 2 4, True)],
  [(AuxZeroJI 2 4, True), (Gamma 2 4, True)],
  [(AuxZeroJI 2 4, False), (Gamma 2 4, False)],
  [(Epsilon 0, False), (Gamma 0 0, True), (AuxOneIJ 0 1, True)],
  [(Epsilon 0, False), (Gamma 0 0, False), (AuxZeroIJ 0 1, True)],
  [(AuxZeroIJ 0 1, False), (AuxZeroIJ 0 2, True)],
  [(AuxZeroIJ 0 1, False), (Gamma 0 1, False)],
  [(AuxZeroIJ 0 1, True), (AuxZeroIJ 0 2, False), (Gamma 0 1, True)],
  [(AuxOneIJ 0 1, True), (Gamma 0 1, True), (AuxOneIJ 0 2, False)],
  [(AuxOneIJ 0 1, True), (Gamma 0 1, False), (AuxZeroIJ 0 2, False)],
  [(AuxOneIJ 0 1, False), (Gamma 0 1, False), (AuxZeroIJ 0 2, True)],
  [(AuxOneIJ 0 1, False), (Gamma 0 1, True), (AuxOneIJ 0 2, True)],
  [(AuxZeroIJ 0 2, False), (AuxZeroIJ 0 3, True)],
  [(AuxZeroIJ 0 2, False), (Gamma 0 2, False)],
  [(AuxZeroIJ 0 2, True), (AuxZeroIJ 0 3, False), (Gamma 0 2, True)],
  [(AuxOneIJ 0 2, True), (Gamma 0 2, True), (AuxOneIJ 0 3, False)],
  [(AuxOneIJ 0 2, True), (Gamma 0 2, False), (AuxZeroIJ 0 3, False)],
  [(AuxOneIJ 0 2, False), (Gamma 0 2, False), (AuxZeroIJ 0 3, True)],
  [(AuxOneIJ 0 2, False), (Gamma 0 2, True), (AuxOneIJ 0 3, True)],
  [(AuxZeroIJ 0 3, False), (AuxZeroIJ 0 4, True)],
  [(AuxZeroIJ 0 3, False), (Gamma 0 3, False)],
  [(AuxZeroIJ 0 3, True), (AuxZeroIJ 0 4, False), (Gamma 0 3, True)],
  [(AuxOneIJ 0 3, True), (Gamma 0 3, True), (Gamma 0 4, False)],
  [(AuxOneIJ 0 3, True), (Gamma 0 3, False), (AuxZeroIJ 0 4, False)],
  [(AuxOneIJ 0 3, False), (Gamma 0 3, False), (AuxZeroIJ 0 4, True)],
  [(AuxOneIJ 0 3, False), (Gamma 0 3, True), (Gamma 0 4, True)],
  [(AuxZeroIJ 0 4, True), (Gamma 0 4, True)],
  [(AuxZeroIJ 0 4, False), (Gamma 0 4, False)],
  [(Epsilon 1, False), (Gamma 1 0, True), (AuxOneIJ 1 1, True)],
  [(Epsilon 1, False), (Gamma 1 0, False), (AuxZeroIJ 1 1, True)],
  [(AuxZeroIJ 1 1, False), (AuxZeroIJ 1 2, True)],
  [(AuxZeroIJ 1 1, False), (Gamma 1 1, False)],
  [(AuxZeroIJ 1 1, True), (AuxZeroIJ 1 2, False), (Gamma 1 1, True)],
  [(AuxOneIJ 1 1, True), (Gamma 1 1, True), (AuxOneIJ 1 2, False)],
  [(AuxOneIJ 1 1, True), (Gamma 1 1, False), (AuxZeroIJ 1 2, False)],
  [(AuxOneIJ 1 1, False), (Gamma 1 1, False), (AuxZeroIJ 1 2, True)],
  [(AuxOneIJ 1 1, False), (Gamma 1 1, True), (AuxOneIJ 1 2, True)],
  [(AuxZeroIJ 1 2, False), (AuxZeroIJ 1 3, True)],
  [(AuxZeroIJ 1 2, False), (Gamma 1 2, False)],
  [(AuxZeroIJ 1 2, True), (AuxZeroIJ 1 3, False), (Gamma 1 2, True)],
  [(AuxOneIJ 1 2, True), (Gamma 1 2, True), (AuxOneIJ 1 3, False)],
  [(AuxOneIJ 1 2, True), (Gamma 1 2, False), (AuxZeroIJ 1 3, False)],
  [(AuxOneIJ 1 2, False), (Gamma 1 2, False), (AuxZeroIJ 1 3, True)],
  [(AuxOneIJ 1 2, False), (Gamma 1 2, True), (AuxOneIJ 1 3, True)],
  [(AuxZeroIJ 1 3, False), (AuxZeroIJ 1 4, True)],
  [(AuxZeroIJ 1 3, False), (Gamma 1 3, False)],
  [(AuxZeroIJ 1 3, True), (AuxZeroIJ 1 4, False), (Gamma 1 3, True)],
  [(AuxOneIJ 1 3, True), (Gamma 1 3, True), (Gamma 1 4, False)],
  [(AuxOneIJ 1 3, True), (Gamma 1 3, False), (AuxZeroIJ 1 4, False)],
  [(AuxOneIJ 1 3, False), (Gamma 1 3, False), (AuxZeroIJ 1 4, True)],
  [(AuxOneIJ 1 3, False), (Gamma 1 3, True), (Gamma 1 4, True)],
  [(AuxZeroIJ 1 4, True), (Gamma 1 4, True)],
  [(AuxZeroIJ 1 4, False), (Gamma 1 4, False)],
  [(Epsilon 2, False), (Gamma 2 0, True), (AuxOneIJ 2 1, True)],
  [(Epsilon 2, False), (Gamma 2 0, False), (AuxZeroIJ 2 1, True)],
  [(AuxZeroIJ 2 1, False), (AuxZeroIJ 2 2, True)],
  [(AuxZeroIJ 2 1, False), (Gamma 2 1, False)],
  [(AuxZeroIJ 2 1, True), (AuxZeroIJ 2 2, False), (Gamma 2 1, True)],
  [(AuxOneIJ 2 1, True), (Gamma 2 1, True), (AuxOneIJ 2 2, False)],
  [(AuxOneIJ 2 1, True), (Gamma 2 1, False), (AuxZeroIJ 2 2, False)],
  [(AuxOneIJ 2 1, False), (Gamma 2 1, False), (AuxZeroIJ 2 2, True)],
  [(AuxOneIJ 2 1, False), (Gamma 2 1, True), (AuxOneIJ 2 2, True)],
  [(AuxZeroIJ 2 2, False), (AuxZeroIJ 2 3, True)],
  [(AuxZeroIJ 2 2, False), (Gamma 2 2, False)],
  [(AuxZeroIJ 2 2, True), (AuxZeroIJ 2 3, False), (Gamma 2 2, True)],
  [(AuxOneIJ 2 2, True), (Gamma 2 2, True), (AuxOneIJ 2 3, False)],
  [(AuxOneIJ 2 2, True), (Gamma 2 2, False), (AuxZeroIJ 2 3, False)],
  [(AuxOneIJ 2 2, False), (Gamma 2 2, False), (AuxZeroIJ 2 3, True)],
  [(AuxOneIJ 2 2, False), (Gamma 2 2, True), (AuxOneIJ 2 3, True)],
  [(AuxZeroIJ 2 3, False), (AuxZeroIJ 2 4, True)],
  [(AuxZeroIJ 2 3, False), (Gamma 2 3, False)],
  [(AuxZeroIJ 2 3, True), (AuxZeroIJ 2 4, False), (Gamma 2 3, True)],
  [(AuxOneIJ 2 3, True), (Gamma 2 3, True), (Gamma 2 4, False)],
  [(AuxOneIJ 2 3, True), (Gamma 2 3, False), (AuxZeroIJ 2 4, False)],
  [(AuxOneIJ 2 3, False), (Gamma 2 3, False), (AuxZeroIJ 2 4, True)],
  [(AuxOneIJ 2 3, False), (Gamma 2 3, True), (Gamma 2 4, True)],
  [(AuxZeroIJ 2 4, True), (Gamma 2 4, True)],
  [(AuxZeroIJ 2 4, False), (Gamma 2 4, False)]]"
  :: "(PropVar * bool) list list"
val templateLemmas =
   [("Multiset_Ordering_in_NP.sum_list_concat",
     "sum_list (concat ?xs) = sum_list (map sum_list ?xs)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_hole 2),
           template_var 0)))),
    ("Multiset_Ordering_in_NP.size_cnf_concat",
     "size_cnf (concat ?xs) = sum_list (map size_cnf ?xs)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 3),
           template_var 0)))),
    ("Multiset_Ordering_in_NP.size_cnf_encodeGammaCond",
     "size_cnf (cnf_encodeGammaCond ?gam ?eps ?ns ?s) <= 3",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("Multiset_Ordering_in_NP.size_pf_encodeGammaCond",
     "size_pf (pf_encodeGammaCond ?gam ?eps ?ns ?s) <= 4",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 1, template_hole 0))))),
    ("Multiset_Ordering_in_NP.sum_list_triv_cong",
     "[| length ?xs = ?n; !!x. x : set ?xs ==> ?f x = ?c |]
      ==> sum_list (map ?f ?xs) = ?n * ?c",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3), template_var 2),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Multiset_Ordering_in_NP.sum_list_mono_const",
     "[| !!x. x : set ?xs ==> ?f x <= ?c; ?n = length ?xs |]
      ==> sum_list (map ?f ?xs) <= ?n * ?c",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_equation
         (template_var 0, template_app (template_hole 3, template_var 3))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 3)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Multiset_Ordering_in_NP.size_pf_encode_exactly_one",
     "pf_encode_exactly_one ?vars = (?one, ?conds) ==>
      size_pf ?one + sum_list (map size_pf ?conds) =
      1 + (16 * length ?vars - 21)",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 2),
          template_app
           (template_app (template_hole 13, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app (template_hole 10, template_var 1)),
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 10),
               template_var 0))),
         template_app
          (template_app (template_hole 11, template_hole 7),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3, template_hole 2)))))),
                 template_app (template_hole 1, template_var 2))),
             template_app
              (template_hole 4,
               template_app
                (template_hole 0,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 0,
                     template_app
                      (template_hole 3, template_hole 2)))))))))),
    ("Multiset_Ordering_in_NP.size_pf_encode_sum_0_1_main",
     "[| pf_encode_sum_0_1_main ?vars = (?conds, ?one, ?zero);
         ?vars ~= [] |]
      ==> sum_list (map size_pf ?conds) = 16 * length ?vars - 12",
     template_implication
      ([template_equation
         (template_app (template_hole 16, template_var 3),
          template_app
           (template_app (template_hole 15, template_var 2),
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 0))),
        template_negation
         (template_equation (template_var 3, template_hole 11))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_var 2)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3, template_hole 2)))))),
               template_app (template_hole 1, template_var 3))),
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 3,
                 template_app (template_hole 0, template_hole 2)))))))),
    ("Multiset_Ordering_in_NP.size_cnf_encode_sum_0_1_main",
     "[| cnf_encode_sum_0_1_main ?vars = (?conds, ?one, ?zero);
         ?vars ~= [] |]
      ==> sum_list (map size_cnf ?conds) = 26 * length ?vars - 20",
     template_implication
      ([template_equation
         (template_app (template_hole 16, template_var 3),
          template_app
           (template_app (template_hole 15, template_var 2),
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 0))),
        template_negation
         (template_equation (template_var 3, template_hole 11))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_var 2)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2, template_hole 1)))))),
               template_app (template_hole 0, template_var 3))),
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 3, template_hole 1))))))))),
    ("Multiset_Ordering_in_NP.size_cnf_encode_mul_ext",
     "[| cnf_encode_mul_ext ?f ?xs ?ys =
         (?\<phi>\<^sub>S, ?\<phi>\<^sub>N\<^sub>S);
         ?n = max (length ?xs) (length ?ys); ?n ~= 0 |]
      ==> size_cnf ?\<phi>\<^sub>N\<^sub>S <= 55 * ?n\<^sup>2",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 14, template_var 5),
              template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 13, template_var 2),
            template_var 1)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 4)),
            template_app (template_hole 10, template_var 3))),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_inequation
        (less_equals, template_app (template_hole 6, template_var 1),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 3, template_hole 1))))))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_hole 4,
               template_app (template_hole 2, template_hole 1))))))),
    ("Multiset_Ordering_in_NP.size_cnf_encode_mul_ext",
     "[| cnf_encode_mul_ext ?f ?xs ?ys =
         (?\<phi>\<^sub>S, ?\<phi>\<^sub>N\<^sub>S);
         ?n = max (length ?xs) (length ?ys); ?n ~= 0 |]
      ==> size_cnf ?\<phi>\<^sub>S <= 55 * ?n\<^sup>2",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 14, template_var 5),
              template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 13, template_var 2),
            template_var 1)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 4)),
            template_app (template_hole 10, template_var 3))),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_inequation
        (less_equals, template_app (template_hole 6, template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 3, template_hole 1))))))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_hole 4,
               template_app (template_hole 2, template_hole 1))))))),
    ("Multiset_Ordering_in_NP.size_pf_encode_mul_ext",
     "[| pf_encode_mul_ext ?f ?xs ?ys =
         (?\<phi>\<^sub>S, ?\<phi>\<^sub>N\<^sub>S);
         ?n = max (length ?xs) (length ?ys); ?n ~= 0 |]
      ==> size_pf ?\<phi>\<^sub>N\<^sub>S <= 36 * ?n\<^sup>2",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 14, template_var 5),
              template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 13, template_var 2),
            template_var 1)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 4)),
            template_app (template_hole 10, template_var 3))),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_inequation
        (less_equals, template_app (template_hole 6, template_var 1),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3, template_hole 1))))))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 1))))))),
    ("Multiset_Ordering_in_NP.size_pf_encode_mul_ext",
     "[| pf_encode_mul_ext ?f ?xs ?ys =
         (?\<phi>\<^sub>S, ?\<phi>\<^sub>N\<^sub>S);
         ?n = max (length ?xs) (length ?ys); ?n ~= 0 |]
      ==> size_pf ?\<phi>\<^sub>S <= 36 * ?n\<^sup>2",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 14, template_var 5),
              template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 13, template_var 2),
            template_var 1)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 4)),
            template_app (template_hole 10, template_var 3))),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_inequation
        (less_equals, template_app (template_hole 6, template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3, template_hole 1))))))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 1))))))),
    ("Multiset_Ordering_in_NP.size_cnf_encode_exactly_one",
     "cnf_encode_exactly_one ?vars = (?one, ?conds) ==>
      size_cnf ?one + sum_list (map size_cnf ?conds)
      <= 2 + (26 * length ?vars - 42) &
      length ?one <= 2",
     template_implication
      ([template_equation
         (template_app (template_hole 15, template_var 2),
          template_app
           (template_app (template_hole 14, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app (template_hole 10, template_var 1)),
                     template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 8, template_hole 10),
                         template_var 0)))),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5))),
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_hole 7,
                             template_app
                              (template_hole 6,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 6,
                                   template_app
                                    (template_hole 2, template_hole 5)))))),
                         template_app (template_hole 1, template_var 2))),
                     template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 6,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 6, template_hole 5)))))))))),
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 0, template_var 1)),
               template_app
                (template_hole 7,
                 template_app (template_hole 6, template_hole 5))))
           ))),
    ("Multiset_Ordering_in_NP.size_pf_formula14",
     "sum_list (map size_pf (pf_formula14 ?n ?m)) =
      ?m + 3 * ?n + ?m * (?n * 16 - 21) + ?n * (?m * 16 - 21)",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_hole 8),
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2))),
                   template_var 1))),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 0,
                         template_app
                          (template_hole 0,
                           template_app
                            (template_hole 0,
                             template_app
                              (template_hole 0, template_hole 2))))))),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 0,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 0, template_hole 2))))))))),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 0,
                     template_app
                      (template_hole 0,
                       template_app
                        (template_hole 0,
                         template_app
                          (template_hole 0, template_hole 2))))))),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 0, template_hole 2)))))))))),
    ("Multiset_Ordering_in_NP.size_cnf_formula14",
     "sum_list (map size_cnf (cnf_formula14 ?n ?m))
      <= 2 * ?m + 4 * ?n + ?m * (26 * ?n - 42) + ?n * (26 * ?m - 42)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_hole 8),
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_hole 2))),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app (template_hole 3, template_hole 2)))),
                   template_var 1))),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 0,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 0, template_hole 2)))))),
                     template_var 1)),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 0,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 0,
                           template_app
                            (template_hole 3, template_hole 2)))))))))),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 0,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 0, template_hole 2)))))),
                 template_var 0)),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 0,
                       template_app
                        (template_hole 3, template_hole 2))))))))))),
    ("Multiset_Ordering_in_NP.size_pf_formula15",
     "sum_list (map size_pf (pf_formula15 ?cs ?cns ?n ?m))
      <= ?m + 3 * ?n + ?m * (?n * 16 - 21) + ?n * (?m * 16 - 21) +
         4 * ?m * ?n",
     template_inequation
      (less_equals,
       template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_hole 8),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3, template_hole 2))),
                       template_var 1))),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 5, template_var 1),
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 0,
                             template_app
                              (template_hole 0,
                               template_app
                                (template_hole 0,
                                 template_app
                                  (template_hole 0, template_hole 2))))))),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 0,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 0, template_hole 2))))))))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 0,
                         template_app
                          (template_hole 0,
                           template_app
                            (template_hole 0,
                             template_app
                              (template_hole 0, template_hole 2))))))),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 0,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 0, template_hole 2))))))))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 0, template_hole 2)))),
               template_var 0)),
           template_var 1)))),
    ("Multiset_Ordering_in_NP.size_pf_formula16",
     "sum_list (map size_pf (pf_formula16 ?cs ?cns ?n ?m))
      <= 2 + ?m + 4 * ?n + ?m * (?n * 16 - 21) + ?n * (?m * 16 - 21) +
         4 * ?m * ?n",
     template_inequation
      (less_equals,
       template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_hole 8),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_hole 4, template_hole 3))),
                         template_var 0)),
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 4, template_hole 3)))),
                       template_var 1))),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 4,
                               template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 4, template_hole 3))))))),
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 0,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 0,
                             template_app
                              (template_hole 4, template_hole 3))))))))),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 4, template_hole 3))))))),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 0,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 0,
                         template_app
                          (template_hole 4, template_hole 3))))))))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 4, template_hole 3)))),
               template_var 0)),
           template_var 1)))),
    ("Multiset_Ordering_in_NP.size_cnf_formula15",
     "sum_list (map size_cnf (cnf_formula15 ?cs ?cns ?n ?m))
      <= 2 * ?m + 4 * ?n + ?m * (26 * ?n - 42) + ?n * (26 * ?m - 42) +
         3 * ?n * ?m",
     template_inequation
      (less_equals,
       template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_hole 8),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_hole 2))),
                         template_var 0)),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 3, template_hole 2)))),
                       template_var 1))),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 0,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 0, template_hole 2)))))),
                         template_var 1)),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 0,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 0,
                               template_app
                                (template_hole 3, template_hole 2)))))))))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 0,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 0, template_hole 2)))))),
                     template_var 0)),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 0,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 0,
                           template_app
                            (template_hole 3, template_hole 2)))))))))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 0, template_hole 2))),
               template_var 1)),
           template_var 0)))),
    ("Multiset_Ordering_in_NP.size_cnf_formula16",
     "sum_list (map size_cnf (cnf_formula16 ?cs ?cns ?n ?m))
      <= 1 + 2 * ?m + 5 * ?n + ?m * (26 * ?n - 42) + ?n * (26 * ?m - 42) +
         3 * ?n * ?m",
     template_inequation
      (less_equals,
       template_app
        (template_hole 11,
         template_app
          (template_app (template_hole 10, template_hole 9),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 7, template_hole 6),
                         template_app
                          (template_app
                            (template_hole 5,
                             template_app
                              (template_hole 4,
                               template_app
                                (template_hole 3, template_hole 2))),
                           template_var 0))),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 3, template_hole 2)))),
                       template_var 1))),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 1, template_hole 2)))))),
                         template_var 1)),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 3, template_hole 2)))))))))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 1, template_hole 2)))))),
                     template_var 0)),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 3, template_hole 2)))))))))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 1, template_hole 2))),
               template_var 1)),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Multiset_Ordering_in_NPTemplates"
### 0.630s elapsed time, 2.412s cpu time, 0.157s GC time
"(14400, 13663, 13600)"
  :: "nat * nat * nat"
"(22000, 20461, 20400)"
  :: "nat * nat * nat"
val it = (): unit
