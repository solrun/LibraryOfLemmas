Loading theory "Draft.Propositional_Formula" (required by "Draft.RPO_NP_HardTemplates" via "Draft.RPO_NP_Hard" via "Draft.Multiset_Ordering_NP_Hard")
Loading theory "Draft.Multiset_Ordering_More" (required by "Draft.RPO_NP_HardTemplates" via "Draft.RPO_NP_Hard" via "Draft.Multiset_Ordering_NP_Hard")
Loading theory "Draft.Templates" (required by "Draft.RPO_NP_HardTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.080s elapsed time, 0.266s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RPO_NP_HardTemplates")
### theory "Draft.Multiset_Ordering_More"
### 0.132s elapsed time, 0.412s cpu time, 0.038s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.530s elapsed time, 1.147s cpu time, 0.132s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Propositional_Formula"
### 0.881s elapsed time, 1.753s cpu time, 0.193s GC time
Loading theory "Draft.Multiset_Ordering_NP_Hard" (required by "Draft.RPO_NP_HardTemplates" via "Draft.RPO_NP_Hard")
Found termination order: "{}"
### theory "Draft.Multiset_Ordering_NP_Hard"
### 0.591s elapsed time, 0.648s cpu time, 0.063s GC time
Loading theory "Draft.RPO_NP_Hard" (required by "Draft.RPO_NP_HardTemplates")
"(''SAT: '', False, ''Encoding: '',
  [Inl (''x'', Positive), Inl (''x'', Negative), Inl (''y'', Positive),
   Inl (''y'', Negative), Inl (''z'', Positive), Inl (''z'', Negative)],
  '' >mul '',
  [Inl (''x'', Unsigned), Inl (''y'', Unsigned), Inl (''z'', Unsigned),
   Inr 0, Inr 1, Inr 2, Inr 3],
  ''strict element order: '',
  [(Inl (''x'', Positive), Inr 0), (Inl (''y'', Negative), Inr 0),
   (Inl (''x'', Negative), Inr 1), (Inl (''y'', Positive), Inr 2),
   (Inl (''z'', Positive), Inr 2), (Inl (''x'', Positive), Inr 3),
   (Inl (''y'', Positive), Inr 3), (Inl (''z'', Negative), Inr 3)],
  ''non-strict: '',
  [(Inl (''x'', Positive), Inl (''x'', Unsigned)),
   (Inl (''x'', Negative), Inl (''x'', Unsigned)),
   (Inl (''y'', Positive), Inl (''y'', Unsigned)),
   (Inl (''y'', Negative), Inl (''y'', Unsigned)),
   (Inl (''z'', Positive), Inl (''z'', Unsigned)),
   (Inl (''z'', Negative), Inl (''z'', Unsigned)),
   (Inl (''x'', Positive), Inr 0), (Inl (''y'', Negative), Inr 0),
   (Inl (''x'', Negative), Inr 1), (Inl (''y'', Positive), Inr 2),
   (Inl (''z'', Positive), Inr 2), (Inl (''x'', Positive), Inr 3),
   (Inl (''y'', Positive), Inr 3), (Inl (''z'', Negative), Inr 3)])"
  :: "char list *
      bool *
      char list *
      (char list * Annotation + nat) list *
      char list *
      (char list * Annotation + nat) list *
      char list *
      ((char list * Annotation + nat) *
       (char list * Annotation + nat)) list *
      char list *
      ((char list * Annotation + nat) *
       (char list * Annotation + nat)) list"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.RPO_NP_Hard"
### 2.266s elapsed time, 3.341s cpu time, 0.697s GC time
Loading theory "Draft.RPO_NP_HardTemplates"
"(''SAT: '', False, ''Encoding: '',
  Fun G
   [Fun F
     [Var (Inl ''x''), Fun P [], Var (Inr 0), Fun A [], Fun A [],
      Var (Inr 3)],
    Fun F
     [Var (Inl ''x''), Fun N [], Fun A [], Var (Inr 1), Fun A [], Fun A []],
    Fun F
     [Var (Inl ''y''), Fun P [], Fun A [], Fun A [], Var (Inr 2),
      Var (Inr 3)],
    Fun F
     [Var (Inl ''y''), Fun N [], Var (Inr 0), Fun A [], Fun A [], Fun A []],
    Fun F
     [Var (Inl ''z''), Fun P [], Fun A [], Fun A [], Var (Inr 2), Fun A []],
    Fun F
     [Var (Inl ''z''), Fun N [], Fun A [], Fun A [], Fun A [],
      Var (Inr 3)]],
  '' >RPO '',
  Fun H
   [Fun F
     [Var (Inl ''x''), Fun U [], Fun A [], Fun A [], Fun A [], Fun A []],
    Fun F
     [Var (Inl ''y''), Fun U [], Fun A [], Fun A [], Fun A [], Fun A []],
    Fun F
     [Var (Inl ''z''), Fun U [], Fun A [], Fun A [], Fun A [], Fun A []],
    Var (Inr 0), Var (Inr 1), Var (Inr 2), Var (Inr 3)])"
  :: "char list *
      bool *
      char list *
      (FSyms, char list + nat) Term.term *
      char list * (FSyms, char list + nat) Term.term"
val templateLemmas =
   [("RPO_NP_Hard.term_to_ms_elem_ms_elem_to_term",
     "term_to_ms_elem (ms_elem_to_term ?cnf ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("RPO_NP_Hard.rpo_constraint_of_cnf",
     "2 <= length (vars_of_cnf ?cnf) ==>
      (EX \<beta>. eval_cnf \<beta> ?cnf) =
      (rpo_constraint_of_cnf ?cnf : trivial_rpo.RPO_S)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 18,
            template_app (template_hole 17, template_hole 16)),
          template_app
           (template_hole 15,
            template_app (template_hole 14, template_var 0)))],
       template_equation
        (template_app (template_hole 12, t_empty),
         template_app
          (template_app
            (template_hole 10,
             template_app (template_hole 9, template_var 0)),
           template_app
            (template_hole 8, template_app (template_hole 7, t_empty)))))),
    ("RPO_NP_Hard.size_of_rpo_constraint_of_cnf",
     "[| rpo_constraint_of_cnf ?cnf = (?s, ?t); size_cnf ?cnf = ?n |]
      ==> term_size ?s + term_size ?t <= 4 * ?n\<^sup>2 + 12 * ?n + 2",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 3),
          template_app
           (template_app (template_hole 11, template_var 2),
            template_var 1)),
        template_equation
         (template_app (template_hole 9, template_var 3), template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 2)),
           template_app (template_hole 6, template_var 1)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app (template_hole 3, template_hole 2)))),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_hole 2))))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 0, template_hole 2))))),
                 template_var 0))),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)))))),
    ("RPO_NP_Hard.term_lists_of_cnf",
     "[| term_lists_of_cnf ?cnf = (?as, ?bs); ?cnf ~= [];
         2 <= length (vars_of_cnf ?cnf) |]
      ==> (EX \<beta>. eval_cnf \<beta> ?cnf) =
          ((Fun FSyms.G ?as, Fun FSyms.H ?bs) : trivial_rpo.RPO_S)",
     template_implication
      ([template_equation
         (template_app (template_hole 27, template_var 2),
          template_app
           (template_app (template_hole 26, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 2, template_hole 23)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 21,
            template_app (template_hole 20, template_hole 19)),
          template_app
           (template_hole 18,
            template_app (template_hole 17, template_var 2)))],
       template_equation
        (template_app (template_hole 15, t_empty),
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_hole 10),
                   template_var 1)),
               template_app
                (template_app (template_hole 11, template_hole 9),
                 template_var 0))),
           template_app
            (template_hole 8, template_app (template_hole 7, t_empty)))))),
    ("RPO_NP_Hard.term_lists_of_cnf",
     "[| term_lists_of_cnf ?cnf = (?as, ?bs); ?cnf ~= [] |]
      ==> (EX \<beta>. eval_cnf \<beta> ?cnf) =
          ((mset ?as, mset ?bs)
           : s_mul_ext trivial_rpo.RPO_NS trivial_rpo.RPO_S)",
     template_implication
      ([template_equation
         (template_app (template_hole 21, template_var 2),
          template_app
           (template_app (template_hole 20, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 2, template_hole 17))],
       template_equation
        (template_app (template_hole 15, t_empty),
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 1)),
               template_app (template_hole 11, template_var 0))),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 9, template_app (template_hole 8, t_empty))),
             template_app
              (template_hole 9,
               template_app (template_hole 8, t_empty)))))))]:
   (string * thm * template) list
### theory "Draft.RPO_NP_HardTemplates"
### 0.573s elapsed time, 1.222s cpu time, 0.121s GC time
val it = (): unit
