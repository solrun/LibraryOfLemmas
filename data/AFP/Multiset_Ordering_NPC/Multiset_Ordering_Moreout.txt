Loading theory "Draft.Multiset_Ordering_More" (required by "Draft.Multiset_Ordering_MoreTemplates")
Loading theory "Draft.Templates" (required by "Draft.Multiset_Ordering_MoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.159s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Multiset_Ordering_MoreTemplates")
### theory "Draft.Multiset_Ordering_More"
### 0.128s elapsed time, 0.298s cpu time, 0.038s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.465s elapsed time, 0.545s cpu time, 0.038s GC time
Loading theory "Draft.Multiset_Ordering_MoreTemplates"
val templateLemmas =
   [("Multiset_Ordering_More.ns_mul_ext_NS_union_S",
     "ns_mul_ext (?NS Un ?S) ?S = ns_mul_ext ?NS ?S",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Multiset_Ordering_More.ns_mul_ext_some_S_in_NS",
     "?S' <= ?S ==> ns_mul_ext (?NS Un ?S') ?S = ns_mul_ext ?NS ?S",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Multiset_Ordering_More.mset_map_filter",
     "mset (map ?v (filter ?c ?t)) +
      mset (map ?v (filter (%e. ~ ?c e) ?t)) =
      mset (map ?v ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, t_empty),
                 template_var 0)))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, t_empty), template_var 0)))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Multiset_Ordering_More.ns_mul_ext_point",
     "[| (?as, ?bs) : ns_mul_ext ?NS ?S; ?b :# ?bs |]
      ==> \<exists>a:#?as. (a, ?b) : ?NS Un ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 4, template_var 4)),
             t_empty)
           ))),
    ("Multiset_Ordering_More.s_mul_ext_point",
     "[| (?as, ?bs) : s_mul_ext ?NS ?S; ?b :# ?bs |]
      ==> \<exists>a:#?as. (a, ?b) : ?NS Un ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 4, template_var 4)),
             t_empty)
           ))),
    ("Multiset_Ordering_More.fst_mul_ext_imp_fst",
     "[| fst (mul_ext ?f ?xs ?ys); length ?xs <= length ?ys |]
      ==> EX x y. x : set ?xs & y : set ?ys & fst (?f x y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Multiset_Ordering_More.mset_map_split",
     "mset (map ?f ?xs) = mset ?ys1.0 + mset ?ys2.0 ==>
      EX zs1 zs2.
         mset ?xs = mset zs1 + mset zs2 &
         ?ys1.0 = map ?f zs1 & ?ys2.0 = map ?f zs2",
     template_implication
      ([template_equation
         (template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)),
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 8, template_var 1)),
            template_app (template_hole 8, template_var 0)))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Multiset_Ordering_More.deciding_mult",
     "[| trans ?S; irrefl ?S |]
      ==> ((?N, ?M) : mult ?S) =
          (?M ~= ?N &
           (\<forall>b:#?N - ?M. \<exists>a:#?M - ?N. (b, a) : ?S))",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_predicate
         (template_app (template_hole 13, template_var 2))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_var 1),
                    template_var 0)),
                template_app (template_hole 9, template_var 2))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0))),
                 t_empty))
             )))),
    ("Multiset_Ordering_More.ns_mul_ext_elim",
     "(?xs, ?ys) : ns_mul_ext ?NS ?S ==>
      EX xs1 xs2 ys1 ys2.
         ?xs = mset xs1 + mset xs2 &
         ?ys = mset ys1 + mset ys2 &
         length xs1 = length ys1 &
         (ALL i<length ys1. (xs1 ! i, ys1 ! i) : ?NS) &
         (ALL y:set ys2. EX x:set xs2. (x, y) : ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 16, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 15, t_empty)))),
    ("Multiset_Ordering_More.ns_mul_ext_intro",
     "[| ?xs = mset ?xs1.0 + mset ?xs2.0; ?ys = mset ?ys1.0 + mset ?ys2.0;
         length ?xs1.0 = length ?ys1.0;
         !!i. i < length ?ys1.0 ==> (?xs1.0 ! i, ?ys1.0 ! i) : ?NS;
         !!y. y : set ?ys2.0 ==> EX x:set ?xs2.0. (x, y) : ?S |]
      ==> (?xs, ?ys) : ns_mul_ext ?NS ?S",
     template_implication
      ([template_equation
         (template_var 7,
          template_app
           (template_app
             (template_hole 15,
              template_app (template_hole 14, template_var 6)),
            template_app (template_hole 14, template_var 5))),
        template_equation
         (template_var 4,
          template_app
           (template_app
             (template_hole 15,
              template_app (template_hole 14, template_var 3)),
            template_app (template_hole 14, template_var 2))),
        template_equation
         (template_app (template_hole 12, template_var 6),
          template_app (template_hole 12, template_var 3)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 7),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Multiset_Ordering_More.s_mul_ext_elim",
     "(?xs, ?ys) : s_mul_ext ?NS ?S ==>
      EX xs1 xs2 ys1 ys2.
         ?xs = mset xs1 + mset xs2 &
         ?ys = mset ys1 + mset ys2 &
         length xs1 = length ys1 &
         xs2 ~= [] &
         (ALL i<length ys1. (xs1 ! i, ys1 ! i) : ?NS) &
         (ALL y:set ys2. EX x:set xs2. (x, y) : ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app
                 (template_app (template_hole 20, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 19, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 18, t_empty)))),
    ("Multiset_Ordering_More.s_mul_ext_intro",
     "[| ?xs = mset ?xs1.0 + mset ?xs2.0; ?ys = mset ?ys1.0 + mset ?ys2.0;
         length ?xs1.0 = length ?ys1.0;
         !!i. i < length ?ys1.0 ==> (?xs1.0 ! i, ?ys1.0 ! i) : ?NS;
         ?xs2.0 ~= [];
         !!y. y : set ?ys2.0 ==> EX a:set ?xs2.0. (a, y) : ?S |]
      ==> (?xs, ?ys) : s_mul_ext ?NS ?S",
     template_implication
      ([template_equation
         (template_var 7,
          template_app
           (template_app
             (template_hole 18,
              template_app (template_hole 17, template_var 6)),
            template_app (template_hole 17, template_var 5))),
        template_equation
         (template_var 4,
          template_app
           (template_app
             (template_hole 18,
              template_app (template_hole 17, template_var 3)),
            template_app (template_hole 17, template_var 2))),
        template_equation
         (template_app (template_hole 15, template_var 6),
          template_app (template_hole 15, template_var 3)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_negation
         (template_equation (template_var 5, template_hole 7)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 7),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Multiset_Ordering_More.s_mul_ext_map",
     "[| !!a b.
            [| a : set ?as; b : set ?bs; (a, b) : ?S |]
            ==> (?f a, ?f b) : ?S';
         !!a b.
            [| a : set ?as; b : set ?bs; (a, b) : ?NS |]
            ==> (?f a, ?f b) : ?NS';
         (?as, ?bs) : {(as, bs). (mset as, mset bs) : s_mul_ext ?NS ?S} |]
      ==> (map ?f ?as, map ?f ?bs)
          : {(as, bs). (mset as, mset bs) : s_mul_ext ?NS' ?S'}",
     template_implication
      ([template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate (template_app (template_hole 24, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 6),
                  template_var 5)),
              template_app
               (template_hole 14, template_app (template_hole 13, t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 6)),
                 template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 5))),
             template_app
              (template_hole 5, template_app (template_hole 4, t_empty)))
           )))]:
   (string * thm * template) list
### theory "Draft.Multiset_Ordering_MoreTemplates"
### 0.434s elapsed time, 0.572s cpu time, 0.063s GC time
val it = (): unit
