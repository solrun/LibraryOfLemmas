Loading theory "Draft.Propositional_Formula" (required by "Draft.Multiset_Ordering_NP_HardTemplates" via "Draft.Multiset_Ordering_NP_Hard")
Loading theory "Draft.Multiset_Ordering_More" (required by "Draft.Multiset_Ordering_NP_HardTemplates" via "Draft.Multiset_Ordering_NP_Hard")
Loading theory "Draft.Templates" (required by "Draft.Multiset_Ordering_NP_HardTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.088s elapsed time, 0.289s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Multiset_Ordering_NP_HardTemplates")
### theory "Draft.Multiset_Ordering_More"
### 0.137s elapsed time, 0.421s cpu time, 0.048s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.538s elapsed time, 1.150s cpu time, 0.136s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Propositional_Formula"
### 0.903s elapsed time, 1.789s cpu time, 0.203s GC time
Loading theory "Draft.Multiset_Ordering_NP_Hard" (required by "Draft.Multiset_Ordering_NP_HardTemplates")
Found termination order: "{}"
### theory "Draft.Multiset_Ordering_NP_Hard"
### 0.600s elapsed time, 0.661s cpu time, 0.067s GC time
Loading theory "Draft.Multiset_Ordering_NP_HardTemplates"
"(''SAT: '', False, ''Encoding: '',
  [Inl (''x'', Positive), Inl (''x'', Negative), Inl (''y'', Positive),
   Inl (''y'', Negative), Inl (''z'', Positive), Inl (''z'', Negative)],
  '' >mul '',
  [Inl (''x'', Unsigned), Inl (''y'', Unsigned), Inl (''z'', Unsigned),
   Inr 0, Inr 1, Inr 2, Inr 3],
  ''strict element order: '',
  [(Inl (''x'', Positive), Inr 0), (Inl (''y'', Negative), Inr 0),
   (Inl (''x'', Negative), Inr 1), (Inl (''y'', Positive), Inr 2),
   (Inl (''z'', Positive), Inr 2), (Inl (''x'', Positive), Inr 3),
   (Inl (''y'', Positive), Inr 3), (Inl (''z'', Negative), Inr 3)],
  ''non-strict: '',
  [(Inl (''x'', Positive), Inl (''x'', Unsigned)),
   (Inl (''x'', Negative), Inl (''x'', Unsigned)),
   (Inl (''y'', Positive), Inl (''y'', Unsigned)),
   (Inl (''y'', Negative), Inl (''y'', Unsigned)),
   (Inl (''z'', Positive), Inl (''z'', Unsigned)),
   (Inl (''z'', Negative), Inl (''z'', Unsigned)),
   (Inl (''x'', Positive), Inr 0), (Inl (''y'', Negative), Inr 0),
   (Inl (''x'', Negative), Inr 1), (Inl (''y'', Positive), Inr 2),
   (Inl (''z'', Positive), Inr 2), (Inl (''x'', Positive), Inr 3),
   (Inl (''y'', Positive), Inr 3), (Inl (''z'', Negative), Inr 3)])"
  :: "char list *
      bool *
      char list *
      (char list * Annotation + nat) list *
      char list *
      (char list * Annotation + nat) list *
      char list *
      ((char list * Annotation + nat) *
       (char list * Annotation + nat)) list *
      char list *
      ((char list * Annotation + nat) *
       (char list * Annotation + nat)) list"
val templateLemmas =
   [("Multiset_Ordering_NP_Hard.size_of_multiset_problem_of_cnf",
     "[| multiset_problem_of_cnf ?cnf = (?xs, ?ys, ?S, ?NS);
         size_cnf ?cnf = ?s |]
      ==> length ?S <= ?s",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 5),
          template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1)))),
        template_equation
         (template_app (template_hole 2, template_var 5), template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_var 0))),
    ("Multiset_Ordering_NP_Hard.size_of_multiset_problem_of_cnf",
     "[| multiset_problem_of_cnf ?cnf = (?xs, ?ys, ?S, ?NS);
         size_cnf ?cnf = ?s |]
      ==> length ?xs <= 2 * ?s",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 5),
          template_app
           (template_app (template_hole 10, template_var 4),
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1)))),
        template_equation
         (template_app (template_hole 6, template_var 5), template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 4, template_var 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Multiset_Ordering_NP_Hard.size_of_multiset_problem_of_cnf",
     "[| multiset_problem_of_cnf ?cnf = (?xs, ?ys, ?S, ?NS);
         size_cnf ?cnf = ?s |]
      ==> length ?ys <= 2 * ?s",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 5),
          template_app
           (template_app (template_hole 10, template_var 4),
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1)))),
        template_equation
         (template_app (template_hole 6, template_var 5), template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Multiset_Ordering_NP_Hard.size_of_multiset_problem_of_cnf",
     "[| multiset_problem_of_cnf ?cnf = (?xs, ?ys, ?S, ?NS);
         size_cnf ?cnf = ?s |]
      ==> length ?NS <= 3 * ?s",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 5),
          template_app
           (template_app (template_hole 10, template_var 4),
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1)))),
        template_equation
         (template_app (template_hole 6, template_var 5), template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Multiset_Ordering_NP_Hard.multiset_problem_of_cnf",
     "multiset_problem_of_cnf ?cnf = (?left, ?right, ?S, ?NSS) ==>
      (EX \<beta>. eval_cnf \<beta> ?cnf) =
      ((mset ?left, mset ?right) : ns_mul_ext (set ?NSS) (set ?S))",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 4),
          template_app
           (template_app (template_hole 10, template_var 3),
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))))],
       template_equation
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 3)),
               template_app (template_hole 2, template_var 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 0, template_var 1)))))),
    ("Multiset_Ordering_NP_Hard.multiset_problem_of_cnf",
     "[| multiset_problem_of_cnf ?cnf = (?left, ?right, ?S, ?NSS);
         ?cnf ~= [] |]
      ==> (EX \<beta>. eval_cnf \<beta> ?cnf) =
          ((mset ?left, mset ?right) : s_mul_ext (set ?NSS) (set ?S))",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 4),
          template_app
           (template_app (template_hole 13, template_var 3),
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app
               (template_app (template_hole 11, template_var 1),
                template_var 0)))),
        template_negation
         (template_equation (template_var 4, template_hole 8))],
       template_equation
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 3)),
               template_app (template_hole 2, template_var 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 0, template_var 1)))))),
    ("Multiset_Ordering_NP_Hard.multiset_problem_of_cnf_mul_ext",
     "[| multiset_problem_of_cnf ?cnf = (?xs, ?ys, ?S, ?NS); ?cnf ~= [] |]
      ==> (EX \<beta>. eval_cnf \<beta> ?cnf) =
          (mul_ext (%a b. ((a, b) : set ?S, (a, b) : set ?NS)) ?xs ?ys =
           (True, True))",
     template_implication
      ([template_equation
         (template_app (template_hole 16, template_var 4),
          template_app
           (template_app (template_hole 15, template_var 3),
            template_app
             (template_app (template_hole 14, template_var 2),
              template_app
               (template_app (template_hole 13, template_var 1),
                template_var 0)))),
        template_negation
         (template_equation (template_var 4, template_hole 10))],
       template_implication
        ([template_predicate (template_app (template_hole 8, t_empty))],
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 4, template_hole 0),
             template_hole 0)))))]:
   (string * thm * template) list
### theory "Draft.Multiset_Ordering_NP_HardTemplates"
### 0.573s elapsed time, 1.348s cpu time, 0.487s GC time
val it = (): unit
