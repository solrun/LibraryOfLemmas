Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Syntax_ArithMoreTemplates" via "Draft.Syntax_Arith" via "Draft.Syntax" via "Draft.Prelim")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Syntax_ArithMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Syntax_ArithMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Syntax_ArithMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.465s cpu time, 0.035s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Syntax_ArithMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
structure Eisbach_Rule_Insts: sig end
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.815s cpu time, 0.035s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Syntax_ArithMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.322s elapsed time, 1.255s cpu time, 0.112s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Syntax_ArithMoreTemplates" via "Draft.ExtrEqs")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.443s elapsed time, 1.726s cpu time, 0.171s GC time
Loading theory "Draft.Prelim" (required by "Draft.Syntax_ArithMoreTemplates" via "Draft.Syntax_Arith" via "Draft.Syntax")
Found termination order: "size <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
exception TAC of term
val simped = fn: attribute
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.026s elapsed time, 3.949s cpu time, 0.779s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.092s elapsed time, 4.058s cpu time, 0.761s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.994s elapsed time, 6.333s cpu time, 0.982s GC time
Loading theory "Draft.Templates" (required by "Draft.Syntax_ArithMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.051s elapsed time, 0.099s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Syntax_ArithMoreTemplates")
### theory "Draft.Prelim"
### 2.227s elapsed time, 6.222s cpu time, 0.920s GC time
Loading theory "Draft.Syntax" (required by "Draft.Syntax_ArithMoreTemplates" via "Draft.Syntax_Arith")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.506s elapsed time, 1.048s cpu time, 0.075s GC time
locale Generic_Syntax
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
  assumes "Generic_Syntax var trm fmla Var FvarsT substT Fvars subst"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
locale Syntax_with_Numerals
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
  assumes
    "Syntax_with_Numerals var trm fmla Var FvarsT substT Fvars subst num"
locale Syntax_with_Connectives
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
  assumes
    "Syntax_with_Connectives var trm fmla Var FvarsT substT Fvars subst eql
      cnj imp all exi"
locale Syntax_with_Numerals_and_Connectives
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
  assumes
    "Syntax_with_Numerals_and_Connectives var trm fmla Var FvarsT substT
      Fvars subst num eql cnj imp all exi"
locale Syntax_with_Connectives_False
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
  assumes
    "Syntax_with_Connectives_False var trm fmla Var FvarsT substT Fvars
      subst eql cnj imp all exi fls"
Found termination order: "length <*mlex*> {}"
locale Syntax_with_Connectives_False_Disj
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
  assumes
    "Syntax_with_Connectives_False_Disj var trm fmla Var FvarsT substT Fvars
      subst eql cnj imp all exi fls dsj"
Found termination order: "length <*mlex*> {}"
locale Syntax_with_Numerals_and_Connectives_False_Disj
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
  assumes
    "Syntax_with_Numerals_and_Connectives_False_Disj var trm fmla Var FvarsT
      substT Fvars subst eql cnj imp all exi fls dsj num"
locale Syntax_PseudoOrder
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and Lq :: "'fmla"
  assumes
    "Syntax_PseudoOrder var trm fmla Var FvarsT substT Fvars subst eql cnj
      imp all exi fls dsj num Lq"
locale Syntax_with_Connectives_Rename
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
  assumes
    "Syntax_with_Connectives_Rename var trm fmla Var FvarsT substT Fvars
      subst eql cnj imp all exi"
### theory "Draft.Syntax"
### 2.035s elapsed time, 2.656s cpu time, 0.870s GC time
Loading theory "Draft.Syntax_Arith" (required by "Draft.Syntax_ArithMoreTemplates")
locale Syntax_Arith_aux
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and zer :: "'trm"
    and suc :: "'trm => 'trm"
    and pls :: "'trm => 'trm => 'trm"
    and tms :: "'trm => 'trm => 'trm"
  assumes
    "Syntax_Arith_aux var trm fmla Var FvarsT substT Fvars subst eql cnj imp
      all exi fls dsj num zer suc pls tms"
Found termination order: "size <*mlex*> {}"
locale Syntax_Arith
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and zer :: "'trm"
    and suc :: "'trm => 'trm"
    and pls :: "'trm => 'trm => 'trm"
    and tms :: "'trm => 'trm => 'trm"
  assumes
    "Syntax_Arith var trm fmla Var FvarsT substT Fvars subst eql cnj imp all
      exi fls dsj num zer suc pls tms"
Proofs for inductive predicate(s) "atrmp"
  Proving monotonicity ...
[| ?x : var; snd ` set ?txs <= var; fst ` set ?txs <= trm; ?t : trm;
   FvarsT ?t Int snd ` set ?txs = {} |]
==> psubstT ?t ?txs = ?t
[| x : var; snd ` set txs <= var; fst ` set txs <= trm;
   x ~: snd ` set txs |]
==> psubstT (Var x) txs = Var x
### theory "Draft.Syntax_Arith"
### 0.944s elapsed time, 1.034s cpu time, 0.120s GC time
Loading theory "Draft.Syntax_ArithMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Syntax_ArithMoreTemplates"
### 0.294s elapsed time, 0.474s cpu time, 0.057s GC time
val it = (): unit
