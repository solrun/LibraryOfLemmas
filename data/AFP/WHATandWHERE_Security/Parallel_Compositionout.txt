Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Parallel_CompositionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Parallel_CompositionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Parallel_CompositionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Parallel_CompositionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.142s elapsed time, 0.584s cpu time, 0.044s GC time
Loading theory "Strong_Security.Types" (required by "Draft.Parallel_CompositionMoreTemplates" via "Draft.Parallel_Composition" via "Draft.Up_To_Technique" via "Draft.WHATWHERE_Security")
### Ignoring sort constraints in type variables(s): "'d"
### in type abbreviation "DomainAssignment"
### theory "Strong_Security.Types"
### 0.030s elapsed time, 0.118s cpu time, 0.000s GC time
Loading theory "Draft.MWLs" (required by "Draft.Parallel_CompositionMoreTemplates" via "Draft.Parallel_Composition")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.219s elapsed time, 0.887s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Parallel_CompositionMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.336s elapsed time, 1.342s cpu time, 0.133s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Parallel_CompositionMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.977s elapsed time, 3.673s cpu time, 0.884s GC time
Loading theory "Draft.WHATWHERE_Security" (required by "Draft.Parallel_CompositionMoreTemplates" via "Draft.Parallel_Composition" via "Draft.Up_To_Technique")
Found termination order: "size <*mlex*> {}"
locale WHATWHERE
  fixes
    SR ::
      "(('com * ('id => 'val)) *
        'com list * 'com option * ('id => 'val)) set"
    and E :: "'exp => ('id => 'val) => 'val"
    and pp :: "'com => nat"
    and DA :: "'id => 'd"
    and lH :: "('d * 'exp * nat) set"
consts
  flat :: "'a list stream => 'a stream"
### Ambiguous input (line 62 of "$AFP/WHATandWHERE_Security/WHATWHERE_Security.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" dH_equal)
###     ("_cargs" ("_position" d)
###       ("_cargs" ("_position" H)
###         ("_cargs" ("_position" m) ("_position" m')))))
###   ("\<^const>local.d_equal'" ("_position" m) ("_position" d)
###     ("\<^const>HOL.conj" ("_position" m')
###       ("_Ball" ("_pattern" ("_position" d') ("_position" e)) ("_position" H)
###         ("\<^const>HOL.implies"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" d')
###             ("_position" d))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" E)
###               ("_cargs" ("_position" e) ("_position" m)))
###             ("_applC" ("_position" E)
###               ("_cargs" ("_position" e) ("_position" m')))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" dH_equal)
###     ("_cargs" ("_position" d)
###       ("_cargs" ("_position" H)
###         ("_cargs" ("_position" m) ("_position" m')))))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.d_equal'" ("_position" m) ("_position" d)
###       ("_position" m'))
###     ("_Ball" ("_pattern" ("_position" d') ("_position" e)) ("_position" H)
###       ("\<^const>HOL.implies"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" d')
###           ("_position" d))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" E)
###             ("_cargs" ("_position" e) ("_position" m)))
###           ("_applC" ("_position" E)
###             ("_cargs" ("_position" e) ("_position" m'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Ambiguous input (line 74 of "$AFP/WHATandWHERE_Security/WHATWHERE_Security.thy") produces 12 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" NDC) ("_cargs" ("_position" d) ("_position" c)))
###   ("\<^const>local.d_equal'"
###     ("\<^const>HOL.implies"
###       ("\<^const>local.d_equal'"
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" m) ("_position" m')) ("_position" m))
###         ("_position" d) ("_position" m'))
###       ("\<^const>local.NextMem" ("_position" c) ("_position" m)))
###     ("_position" d)
###     ("\<^const>local.NextMem" ("_position" c) ("_position" m'))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" NDC) ("_cargs" ("_position" d) ("_position" c)))
###   ("\<^const>local.d_equal'"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>HOL.implies"
###         ("\<^const>local.d_equal'" ("_position" m) ("_position" d)
###           ("_position" m'))
###         ("\<^const>local.NextMem" ("_position" c) ("_position" m))))
###     ("_position" d)
###     ("\<^const>local.NextMem" ("_position" c) ("_position" m'))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" NDC) ("_cargs" ("_position" d) ("_position" c)))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" m) ("_position" m'))
###     ("\<^const>local.d_equal'"
###       ("\<^const>HOL.implies"
###         ("\<^const>local.d_equal'" ("_position" m) ("_position" d)
###           ("_position" m'))
###         ("\<^const>local.NextMem" ("_position" c) ("_position" m)))
###       ("_position" d)
###       ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" NDC) ("_cargs" ("_position" d) ("_position" c)))
###   ("\<^const>HOL.implies"
###     ("\<^const>local.d_equal'"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" m) ("_position" m'))
###         ("_position" m))
###       ("_position" d) ("_position" m'))
###     ("\<^const>local.d_equal'"
###       ("\<^const>local.NextMem" ("_position" c) ("_position" m))
###       ("_position" d)
###       ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" NDC) ("_cargs" ("_position" d) ("_position" c)))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" m) ("_position" m'))
###     ("\<^const>HOL.implies"
###       ("\<^const>local.d_equal'" ("_position" m) ("_position" d)
###         ("_position" m'))
###       ("\<^const>local.d_equal'"
###         ("\<^const>local.NextMem" ("_position" c) ("_position" m))
###         ("_position" d)
###         ("\<^const>local.NextMem" ("_position" c) ("_position" m'))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" NDC) ("_cargs" ("_position" d) ("_position" c)))
###   ("\<^const>local.d_equal'"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" m) ("_position" m'))
###       ("_position" m))
###     ("_position" d)
###     ("\<^const>HOL.implies" ("_position" m')
###       ("\<^const>local.d_equal'"
###         ("\<^const>local.NextMem" ("_position" c) ("_position" m))
###         ("_position" d)
###         ("\<^const>local.NextMem" ("_position" c) ("_position" m'))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" NDC) ("_cargs" ("_position" d) ("_position" c)))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" m) ("_position" m'))
###     ("\<^const>local.d_equal'" ("_position" m) ("_position" d)
###       ("\<^const>HOL.implies" ("_position" m')
###         ("\<^const>local.d_equal'"
###           ("\<^const>local.NextMem" ("_position" c) ("_position" m))
###           ("_position" d)
###           ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" NDC) ("_cargs" ("_position" d) ("_position" c)))
###   ("\<^const>local.d_equal'"
###     ("\<^const>local.d_equal'"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" m) ("_position" m'))
###         ("_position" m))
###       ("_position" d)
###       ("\<^const>HOL.implies" ("_position" m')
###         ("\<^const>local.NextMem" ("_position" c) ("_position" m))))
###     ("_position" d)
###     ("\<^const>local.NextMem" ("_position" c) ("_position" m'))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" NDC) ("_cargs" ("_position" d) ("_position" c)))
###   ("\<^const>local.d_equal'"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>local.d_equal'" ("_position" m) ("_position" d)
###         ("\<^const>HOL.implies" ("_position" m')
###           ("\<^const>local.NextMem" ("_position" c) ("_position" m)))))
###     ("_position" d)
###     ("\<^const>local.NextMem" ("_position" c) ("_position" m'))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" NDC) ("_cargs" ("_position" d) ("_position" c)))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" m) ("_position" m'))
###     ("\<^const>local.d_equal'"
###       ("\<^const>local.d_equal'" ("_position" m) ("_position" d)
###         ("\<^const>HOL.implies" ("_position" m')
###           ("\<^const>local.NextMem" ("_position" c) ("_position" m))))
###       ("_position" d)
###       ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.070s elapsed time, 4.055s cpu time, 0.870s GC time
### Ambiguous input (line 79 of "$AFP/WHATandWHERE_Security/WHATWHERE_Security.thy") produces 96 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" IDC)
###     ("_cargs" ("_position" d) ("_cargs" ("_position" c) ("_position" H))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.conj"
###       ("\<^const>local.d_equal'"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" m) ("_position" m'))
###           ("_position" m))
###         ("_position" d) ("_position" m'))
###       ("\<^const>HOL.Not"
###         ("\<^const>local.d_equal'"
###           ("\<^const>local.NextMem" ("_position" c) ("_position" m))
###           ("_position" d)
###           ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
###     ("\<^const>local.d_equal'"
###       ("\<^const>HOL.implies"
###         ("\<^const>local.dH_equal'"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" m) ("_position" m')) ("_position" m))
###           ("_position" d) ("_position" H) ("_position" m'))
###         ("\<^const>local.NextMem" ("_position" c) ("_position" m)))
###       ("_position" d)
###       ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" IDC)
###     ("_cargs" ("_position" d) ("_cargs" ("_position" c) ("_position" H))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.d_equal'" ("_position" m) ("_position" d)
###           ("_position" m'))
###         ("\<^const>HOL.Not"
###           ("\<^const>local.d_equal'"
###             ("\<^const>local.NextMem" ("_position" c) ("_position" m))
###             ("_position" d)
###             ("\<^const>local.NextMem" ("_position" c) ("_position" m'))))))
###     ("\<^const>local.d_equal'"
###       ("\<^const>HOL.implies"
###         ("\<^const>local.dH_equal'"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" m) ("_position" m')) ("_position" m))
###           ("_position" d) ("_position" H) ("_position" m'))
###         ("\<^const>local.NextMem" ("_position" c) ("_position" m)))
###       ("_position" d)
###       ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" IDC)
###     ("_cargs" ("_position" d) ("_cargs" ("_position" c) ("_position" H))))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.d_equal'"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" m) ("_position" m'))
###         ("_position" m))
###       ("_position" d)
###       ("\<^const>HOL.conj" ("_position" m')
###         ("\<^const>HOL.Not"
###           ("\<^const>local.d_equal'"
###             ("\<^const>local.NextMem" ("_position" c) ("_position" m))
###             ("_position" d)
###             ("\<^const>local.NextMem" ("_position" c) ("_position" m'))))))
###     ("\<^const>local.d_equal'"
###       ("\<^const>HOL.implies"
###         ("\<^const>local.dH_equal'"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" m) ("_position" m')) ("_position" m))
###           ("_position" d) ("_position" H) ("_position" m'))
###         ("\<^const>local.NextMem" ("_position" c) ("_position" m)))
###       ("_position" d)
###       ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" IDC)
###     ("_cargs" ("_position" d) ("_cargs" ("_position" c) ("_position" H))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>local.d_equal'" ("_position" m) ("_position" d)
###         ("\<^const>HOL.conj" ("_position" m')
###           ("\<^const>HOL.Not"
###             ("\<^const>local.d_equal'"
###               ("\<^const>local.NextMem" ("_position" c) ("_position" m))
###               ("_position" d)
###               ("\<^const>local.NextMem" ("_position" c)
###                 ("_position" m')))))))
###     ("\<^const>local.d_equal'"
###       ("\<^const>HOL.implies"
###         ("\<^const>local.dH_equal'"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" m) ("_position" m')) ("_position" m))
###           ("_position" d) ("_position" H) ("_position" m'))
###         ("\<^const>local.NextMem" ("_position" c) ("_position" m)))
###       ("_position" d)
###       ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" IDC)
###     ("_cargs" ("_position" d) ("_cargs" ("_position" c) ("_position" H))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.conj"
###       ("\<^const>local.d_equal'"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" m) ("_position" m'))
###           ("_position" m))
###         ("_position" d) ("_position" m'))
###       ("\<^const>local.d_equal'"
###         ("\<^const>HOL.Not"
###           ("\<^const>local.NextMem" ("_position" c) ("_position" m)))
###         ("_position" d)
###         ("\<^const>local.NextMem" ("_position" c) ("_position" m'))))
###     ("\<^const>local.d_equal'"
###       ("\<^const>HOL.implies"
###         ("\<^const>local.dH_equal'"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" m) ("_position" m')) ("_position" m))
###           ("_position" d) ("_position" H) ("_position" m'))
###         ("\<^const>local.NextMem" ("_position" c) ("_position" m)))
###       ("_position" d)
###       ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" IDC)
###     ("_cargs" ("_position" d) ("_cargs" ("_position" c) ("_position" H))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.d_equal'" ("_position" m) ("_position" d)
###           ("_position" m'))
###         ("\<^const>local.d_equal'"
###           ("\<^const>HOL.Not"
###             ("\<^const>local.NextMem" ("_position" c) ("_position" m)))
###           ("_position" d)
###           ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
###     ("\<^const>local.d_equal'"
###       ("\<^const>HOL.implies"
###         ("\<^const>local.dH_equal'"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" m) ("_position" m')) ("_position" m))
###           ("_position" d) ("_position" H) ("_position" m'))
###         ("\<^const>local.NextMem" ("_position" c) ("_position" m)))
###       ("_position" d)
###       ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" IDC)
###     ("_cargs" ("_position" d) ("_cargs" ("_position" c) ("_position" H))))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.d_equal'"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" m) ("_position" m'))
###         ("_position" m))
###       ("_position" d)
###       ("\<^const>HOL.conj" ("_position" m')
###         ("\<^const>local.d_equal'"
###           ("\<^const>HOL.Not"
###             ("\<^const>local.NextMem" ("_position" c) ("_position" m)))
###           ("_position" d)
###           ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
###     ("\<^const>local.d_equal'"
###       ("\<^const>HOL.implies"
###         ("\<^const>local.dH_equal'"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" m) ("_position" m')) ("_position" m))
###           ("_position" d) ("_position" H) ("_position" m'))
###         ("\<^const>local.NextMem" ("_position" c) ("_position" m)))
###       ("_position" d)
###       ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" IDC)
###     ("_cargs" ("_position" d) ("_cargs" ("_position" c) ("_position" H))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>local.d_equal'" ("_position" m) ("_position" d)
###         ("\<^const>HOL.conj" ("_position" m')
###           ("\<^const>local.d_equal'"
###             ("\<^const>HOL.Not"
###               ("\<^const>local.NextMem" ("_position" c) ("_position" m)))
###             ("_position" d)
###             ("\<^const>local.NextMem" ("_position" c) ("_position" m'))))))
###     ("\<^const>local.d_equal'"
###       ("\<^const>HOL.implies"
###         ("\<^const>local.dH_equal'"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" m) ("_position" m')) ("_position" m))
###           ("_position" d) ("_position" H) ("_position" m'))
###         ("\<^const>local.NextMem" ("_position" c) ("_position" m)))
###       ("_position" d)
###       ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" IDC)
###     ("_cargs" ("_position" d) ("_cargs" ("_position" c) ("_position" H))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.conj"
###       ("\<^const>local.d_equal'"
###         ("\<^const>HOL.Ex_binder" ("_idts" ("_position" m) ("_position" m'))
###           ("_position" m))
###         ("_position" d) ("_position" m'))
###       ("\<^const>HOL.Not"
###         ("\<^const>local.d_equal'"
###           ("\<^const>local.NextMem" ("_position" c) ("_position" m))
###           ("_position" d)
###           ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
###     ("\<^const>local.d_equal'"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" m) ("_position" m'))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.dH_equal'" ("_position" m) ("_position" d)
###             ("_position" H) ("_position" m'))
###           ("\<^const>local.NextMem" ("_position" c) ("_position" m))))
###       ("_position" d)
###       ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" IDC)
###     ("_cargs" ("_position" d) ("_cargs" ("_position" c) ("_position" H))))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" m) ("_position" m'))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.d_equal'" ("_position" m) ("_position" d)
###           ("_position" m'))
###         ("\<^const>HOL.Not"
###           ("\<^const>local.d_equal'"
###             ("\<^const>local.NextMem" ("_position" c) ("_position" m))
###             ("_position" d)
###             ("\<^const>local.NextMem" ("_position" c) ("_position" m'))))))
###     ("\<^const>local.d_equal'"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" m) ("_position" m'))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.dH_equal'" ("_position" m) ("_position" d)
###             ("_position" H) ("_position" m'))
###           ("\<^const>local.NextMem" ("_position" c) ("_position" m))))
###       ("_position" d)
###       ("\<^const>local.NextMem" ("_position" c) ("_position" m')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 93 of "$AFP/WHATandWHERE_Security/WHATWHERE_Security.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" dhequality_alternative)
###     ("_cargs" ("_position" d)
###       ("_cargs" ("_position" PP)
###         ("_cargs" ("_position" \<iota>)
###           ("_cargs" ("_position" m) ("_position" m'))))))
###   ("\<^const>HOL.disj"
###     ("\<^const>local.dH_equal'" ("_position" m) ("_position" d)
###       ("_applC" ("_position" htchLocSet) ("_position" PP)) ("_position" m'))
###     ("\<^const>HOL.Not"
###       ("\<^const>Set.subset_eq"
###         ("_applC" ("_position" htchLoc) ("_position" \<iota>))
###         ("_applC" ("_position" htchLocSet) ("_position" PP))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" dhequality_alternative)
###     ("_cargs" ("_position" d)
###       ("_cargs" ("_position" PP)
###         ("_cargs" ("_position" \<iota>)
###           ("_cargs" ("_position" m) ("_position" m'))))))
###   ("\<^const>local.dH_equal'" ("_position" m) ("_position" d)
###     ("_applC" ("_position" htchLocSet) ("_position" PP))
###     ("\<^const>HOL.disj" ("_position" m')
###       ("\<^const>HOL.Not"
###         ("\<^const>Set.subset_eq"
###           ("_applC" ("_position" htchLoc) ("_position" \<iota>))
###           ("_applC" ("_position" htchLocSet) ("_position" PP)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 99 of "$AFP/WHATandWHERE_Security/WHATWHERE_Security.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Strong_dlHPP_Bisimulation)
###     ("_cargs" ("_position" d) ("_cargs" ("_position" PP) ("_position" R))))
###   ("\<^const>HOL.conj" ("_applC" ("_position" sym) ("_position" R))
###     ("\<^const>HOL.conj" ("_applC" ("_position" trans) ("_position" R))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_pattern" ("_position" V) ("_position" V'))
###           ("_position" R)
###           ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" V))
###             ("_applC" ("_position" length) ("_position" V'))))
###         ("\<^const>HOL.conj"
###           ("_Ball" ("_pattern" ("_position" V) ("_position" V'))
###             ("_position" R)
###             ("_All_less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" V))
###               ("\<^const>HOL.disj"
###                 ("_applC" ("_position" NDC)
###                   ("_cargs" ("_position" d)
###                     ("\<^const>List.nth" ("_position" V) ("_position" i))))
###                 ("_applC" ("_position" IDC)
###                   ("_cargs" ("_position" d)
###                     ("_cargs"
###                       ("\<^const>List.nth" ("_position" V) ("_position" i))
###                       ("_applC" ("_position" htchLoc)
###                         ("_applC" ("_position" pp)
###                           ("\<^const>List.nth" ("_position" V)
###                             ("_position" i))))))))))
###           ("_Ball" ("_pattern" ("_position" V) ("_position" V'))
###             ("_position" R)
###             ("_All_less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" V))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" m1)
###                   ("_idts" ("_position" m1')
###                     ("_idts" ("_position" m2)
###                       ("_idts" ("_position" \<alpha>) ("_position" p)))))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>local.dH_equal'"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>local.SRabbr"
###                         ("\<^const>List.nth" ("_position" V)
###                           ("_position" i))
###                         ("_position" m1) ("_position" \<alpha>)
###                         ("_position" p) ("_position" m2))
###                       ("_position" m1))
###                     ("_position" d)
###                     ("_applC" ("_position" htchLocSet) ("_position" PP))
###                     ("_position" m1'))
###                   ("\<^const>HOL.Ex_binder"
###                     ("_idts" ("_position" p')
###                       ("_idts" ("_position" \<alpha>') ("_position" m2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>local.SRabbr"
###                         ("\<^const>List.nth" ("_position" V')
###                           ("_position" i))
###                         ("_position" m1') ("_position" \<alpha>')
###                         ("_position" p') ("_position" m2'))
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" stepResultsinR)
###                           ("_cargs" ("_position" p)
###                             ("_cargs" ("_position" p') ("_position" R))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" \<alpha>)
###                               ("_tuple_arg" ("_position" \<alpha>')))
###                             ("_position" R))
###                           ("_applC" ("_position" dhequality_alternative)
###                             ("_cargs" ("_position" d)
###                               ("_cargs" ("_position" PP)
###                                 ("_cargs"
###                                   ("_applC" ("_position" pp)
###                                     ("\<^const>List.nth" ("_position" V)
### ("_position" i)))
###                                   ("_cargs" ("_position" m2)
###                                     ("_position" m2')))))))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" Strong_dlHPP_Bisimulation)
###     ("_cargs" ("_position" d) ("_cargs" ("_position" PP) ("_position" R))))
###   ("\<^const>HOL.conj" ("_applC" ("_position" sym) ("_position" R))
###     ("\<^const>HOL.conj" ("_applC" ("_position" trans) ("_position" R))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_pattern" ("_position" V) ("_position" V'))
###           ("_position" R)
###           ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" V))
###             ("_applC" ("_position" length) ("_position" V'))))
###         ("\<^const>HOL.conj"
###           ("_Ball" ("_pattern" ("_position" V) ("_position" V'))
###             ("_position" R)
###             ("_All_less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" V))
###               ("\<^const>HOL.disj"
###                 ("_applC" ("_position" NDC)
###                   ("_cargs" ("_position" d)
###                     ("\<^const>List.nth" ("_position" V) ("_position" i))))
###                 ("_applC" ("_position" IDC)
###                   ("_cargs" ("_position" d)
###                     ("_cargs"
###                       ("\<^const>List.nth" ("_position" V) ("_position" i))
###                       ("_applC" ("_position" htchLoc)
###                         ("_applC" ("_position" pp)
###                           ("\<^const>List.nth" ("_position" V)
###                             ("_position" i))))))))))
###           ("_Ball" ("_pattern" ("_position" V) ("_position" V'))
###             ("_position" R)
###             ("_All_less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" V))
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" m1)
###                   ("_idts" ("_position" m1')
###                     ("_idts" ("_position" m2)
###                       ("_idts" ("_position" \<alpha>) ("_position" p)))))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("\<^const>local.SRabbr"
###                       ("\<^const>List.nth" ("_position" V) ("_position" i))
###                       ("_position" m1) ("_position" \<alpha>)
###                       ("_position" p) ("_position" m2))
###                     ("\<^const>local.dH_equal'" ("_position" m1)
###                       ("_position" d)
###                       ("_applC" ("_position" htchLocSet) ("_position" PP))
###                       ("_position" m1')))
###                   ("\<^const>HOL.Ex_binder"
###                     ("_idts" ("_position" p')
###                       ("_idts" ("_position" \<alpha>') ("_position" m2')))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>local.SRabbr"
###                         ("\<^const>List.nth" ("_position" V')
###                           ("_position" i))
###                         ("_position" m1') ("_position" \<alpha>')
###                         ("_position" p') ("_position" m2'))
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" stepResultsinR)
###                           ("_cargs" ("_position" p)
###                             ("_cargs" ("_position" p') ("_position" R))))
###                         ("\<^const>HOL.conj"
###                           ("\<^const>Set.member"
###                             ("_tuple" ("_position" \<alpha>)
###                               ("_tuple_arg" ("_position" \<alpha>')))
###                             ("_position" R))
###                           ("_applC" ("_position" dhequality_alternative)
###                             ("_cargs" ("_position" d)
###                               ("_cargs" ("_position" PP)
###                                 ("_cargs"
###                                   ("_applC" ("_position" pp)
###                                     ("\<^const>List.nth" ("_position" V)
### ("_position" i)))
###                                   ("_cargs" ("_position" m2)
###                                     ("_position" m2')))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  pp :: "('exp, 'id) MWLsCom => nat"
### theory "Draft.WHATWHERE_Security"
### 0.348s elapsed time, 1.271s cpu time, 0.114s GC time
Loading theory "Draft.Up_To_Technique" (required by "Draft.Parallel_CompositionMoreTemplates" via "Draft.Parallel_Composition")
locale WHATWHERE
  fixes
    SR ::
      "(('com * ('id => 'val)) *
        'com list * 'com option * ('id => 'val)) set"
    and E :: "'exp => ('id => 'val) => 'val"
    and pp :: "'com => nat"
    and DA :: "'id => 'd"
    and lH :: "('d * 'exp * nat) set"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 28 of "$AFP/WHATandWHERE_Security/Up_To_Technique.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" disj_dlHPP_Bisimulation_Up_To_R')
###     ("_cargs" ("_position" d)
###       ("_cargs" ("_position" PP)
###         ("_cargs" ("_position" R') ("_position" R)))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" SdlHPPB)
###       ("_cargs" ("_position" d)
###         ("_cargs" ("_position" PP) ("_position" R'))))
###     ("\<^const>HOL.conj" ("_applC" ("_position" sym) ("_position" R))
###       ("\<^const>HOL.conj" ("_applC" ("_position" trans) ("_position" R))
###         ("\<^const>HOL.conj"
###           ("_Ball" ("_pattern" ("_position" V) ("_position" V'))
###             ("_position" R)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" length) ("_position" V))
###               ("_applC" ("_position" length) ("_position" V'))))
###           ("\<^const>HOL.conj"
###             ("_Ball" ("_pattern" ("_position" V) ("_position" V'))
###               ("_position" R)
###               ("_All_less" ("_position" i)
###                 ("_applC" ("_position" length) ("_position" V))
###                 ("\<^const>HOL.disj"
###                   ("_applC" ("_position" NDC)
###                     ("_cargs" ("_position" d)
###                       ("\<^const>List.nth" ("_position" V)
###                         ("_position" i))))
###                   ("_applC" ("_position" IDC)
###                     ("_cargs" ("_position" d)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" V)
###                           ("_position" i))
###                         ("_applC" ("_position" htchLoc)
###                           ("_applC" ("_position" pp)
###                             ("\<^const>List.nth" ("_position" V)
###                               ("_position" i))))))))))
###             ("_Ball" ("_pattern" ("_position" V) ("_position" V'))
###               ("_position" R)
###               ("_All_less" ("_position" i)
###                 ("_applC" ("_position" length) ("_position" V))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" m1)
###                     ("_idts" ("_position" m1')
###                       ("_idts" ("_position" m2)
###                         ("_idts" ("_position" \<alpha>) ("_position" p)))))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>local.dH_equal'"
###                       ("\<^const>HOL.conj"
###                         ("\<^const>local.SRabbr"
###                           ("\<^const>List.nth" ("_position" V)
###                             ("_position" i))
###                           ("_position" m1) ("_position" \<alpha>)
###                           ("_position" p) ("_position" m2))
###                         ("_position" m1))
###                       ("_position" d)
###                       ("_applC" ("_position" htchLocSet) ("_position" PP))
###                       ("_position" m1'))
###                     ("\<^const>HOL.Ex_binder"
###                       ("_idts" ("_position" p')
###                         ("_idts" ("_position" \<alpha>') ("_position" m2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>local.SRabbr"
###                           ("\<^const>List.nth" ("_position" V')
###                             ("_position" i))
###                           ("_position" m1') ("_position" \<alpha>')
###                           ("_position" p') ("_position" m2'))
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" stepResultsinR)
###                             ("_cargs" ("_position" p)
###                               ("_cargs" ("_position" p')
###                                 ("\<^const>Set.union" ("_position" R)
###                                   ("_position" R')))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" \<alpha>)
###                                 ("_tuple_arg" ("_position" \<alpha>')))
###                               ("\<^const>Set.union" ("_position" R)
###                                 ("_position" R')))
###                             ("_applC" ("_position" dhequality_alternative)
###                               ("_cargs" ("_position" d)
###                                 ("_cargs" ("_position" PP)
###                                   ("_cargs"
###                                     ("_applC" ("_position" pp)
### ("\<^const>List.nth" ("_position" V) ("_position" i)))
###                                     ("_cargs" ("_position" m2)
### ("_position" m2'))))))))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" disj_dlHPP_Bisimulation_Up_To_R')
###     ("_cargs" ("_position" d)
###       ("_cargs" ("_position" PP)
###         ("_cargs" ("_position" R') ("_position" R)))))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" SdlHPPB)
###       ("_cargs" ("_position" d)
###         ("_cargs" ("_position" PP) ("_position" R'))))
###     ("\<^const>HOL.conj" ("_applC" ("_position" sym) ("_position" R))
###       ("\<^const>HOL.conj" ("_applC" ("_position" trans) ("_position" R))
###         ("\<^const>HOL.conj"
###           ("_Ball" ("_pattern" ("_position" V) ("_position" V'))
###             ("_position" R)
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" length) ("_position" V))
###               ("_applC" ("_position" length) ("_position" V'))))
###           ("\<^const>HOL.conj"
###             ("_Ball" ("_pattern" ("_position" V) ("_position" V'))
###               ("_position" R)
###               ("_All_less" ("_position" i)
###                 ("_applC" ("_position" length) ("_position" V))
###                 ("\<^const>HOL.disj"
###                   ("_applC" ("_position" NDC)
###                     ("_cargs" ("_position" d)
###                       ("\<^const>List.nth" ("_position" V)
###                         ("_position" i))))
###                   ("_applC" ("_position" IDC)
###                     ("_cargs" ("_position" d)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" V)
###                           ("_position" i))
###                         ("_applC" ("_position" htchLoc)
###                           ("_applC" ("_position" pp)
###                             ("\<^const>List.nth" ("_position" V)
###                               ("_position" i))))))))))
###             ("_Ball" ("_pattern" ("_position" V) ("_position" V'))
###               ("_position" R)
###               ("_All_less" ("_position" i)
###                 ("_applC" ("_position" length) ("_position" V))
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" m1)
###                     ("_idts" ("_position" m1')
###                       ("_idts" ("_position" m2)
###                         ("_idts" ("_position" \<alpha>) ("_position" p)))))
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj"
###                       ("\<^const>local.SRabbr"
###                         ("\<^const>List.nth" ("_position" V)
###                           ("_position" i))
###                         ("_position" m1) ("_position" \<alpha>)
###                         ("_position" p) ("_position" m2))
###                       ("\<^const>local.dH_equal'" ("_position" m1)
###                         ("_position" d)
###                         ("_applC" ("_position" htchLocSet) ("_position" PP))
###                         ("_position" m1')))
###                     ("\<^const>HOL.Ex_binder"
###                       ("_idts" ("_position" p')
###                         ("_idts" ("_position" \<alpha>') ("_position" m2')))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>local.SRabbr"
###                           ("\<^const>List.nth" ("_position" V')
###                             ("_position" i))
###                           ("_position" m1') ("_position" \<alpha>')
###                           ("_position" p') ("_position" m2'))
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" stepResultsinR)
###                             ("_cargs" ("_position" p)
###                               ("_cargs" ("_position" p')
###                                 ("\<^const>Set.union" ("_position" R)
###                                   ("_position" R')))))
###                           ("\<^const>HOL.conj"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" \<alpha>)
###                                 ("_tuple_arg" ("_position" \<alpha>')))
###                               ("\<^const>Set.union" ("_position" R)
###                                 ("_position" R')))
###                             ("_applC" ("_position" dhequality_alternative)
###                               ("_cargs" ("_position" d)
###                                 ("_cargs" ("_position" PP)
###                                   ("_cargs"
###                                     ("_applC" ("_position" pp)
### ("\<^const>List.nth" ("_position" V) ("_position" i)))
###                                     ("_cargs" ("_position" m2)
### ("_position" m2'))))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Up_To_Technique"
### 0.110s elapsed time, 0.336s cpu time, 0.000s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.059s elapsed time, 7.049s cpu time, 1.152s GC time
Loading theory "Draft.Templates" (required by "Draft.Parallel_CompositionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.121s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Parallel_CompositionMoreTemplates")
consts
  PPc :: "('exp, 'id) MWLsCom => nat list"
  PPV :: "('exp, 'id) MWLsCom list => nat list"
### Ambiguous input (line 79 of "$AFP/WHATandWHERE_Security/MWLs.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" V) ("\<^const>List.list.Nil")))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" V')
###           ("\<^const>List.list.Nil")))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>Set.inter"
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" PPV) ("_position" V)))
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" PPV) ("_position" V'))))
###             ("\<^const>Set.empty"))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" V) ("_position" V'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" V) ("\<^const>List.list.Nil")))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>HOL.not_equal" ("_position" V')
###             ("\<^const>MWLs.MWLsCom.Seq" ("\<^const>List.list.Nil")
###               ("\<^const>Set.inter"
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" PPV) ("_position" V)))
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" PPV) ("_position" V'))))))
###           ("\<^const>Set.empty")))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" V) ("_position" V'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale MWLs_semantics
  fixes E :: "'exp => ('id => 'val) => 'val"
    and BMap :: "'val => bool"
Proofs for inductive predicate(s) "MWLsSteps_detp"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.539s elapsed time, 1.126s cpu time, 0.098s GC time
Proofs for inductive predicate(s) "MWLsSteps_ndetp"
  Proving monotonicity ...
### theory "Draft.MWLs"
### 2.672s elapsed time, 7.811s cpu time, 1.232s GC time
Loading theory "Draft.Parallel_Composition" (required by "Draft.Parallel_CompositionMoreTemplates")
locale WHATWHERE_Secure_Programs
  fixes E :: "'exp => ('id => 'val) => 'val"
    and BMap :: "'val => bool"
    and DA :: "'id => 'd"
    and lH :: "('d * 'exp * nat) set"
### Ambiguous input (line 112 of "$AFP/WHATandWHERE_Security/Parallel_Composition.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_All_less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" V))
###         ("_applC" ("_position" WHATWHERE_Secure)
###           ("_list" ("\<^const>List.nth" ("_position" V) ("_position" i))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" unique_PPV) ("_position" V)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" WHATWHERE_Secure) ("_position" V))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("_All_less" ("_position" i)
###         ("_applC" ("_position" length) ("_position" V))
###         ("\<^const>MWLs.MWLsCom.Seq"
###           ("_applC" ("_position" WHATWHERE_Secure)
###             ("_list" ("\<^const>List.nth" ("_position" V) ("_position" i))))
###           ("_applC" ("_position" unique_PPV) ("_position" V))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" WHATWHERE_Secure) ("_position" V))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Parallel_Composition"
### 0.175s elapsed time, 0.178s cpu time, 0.000s GC time
Loading theory "Draft.Parallel_CompositionMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Parallel_CompositionMoreTemplates"
### 0.297s elapsed time, 0.388s cpu time, 0.030s GC time
val it = (): unit
