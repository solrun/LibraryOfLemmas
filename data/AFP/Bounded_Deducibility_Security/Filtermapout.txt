Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FiltermapTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FiltermapTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Trivia" (required by "Draft.FiltermapTemplates" via "Draft.Filtermap")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FiltermapTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.586s cpu time, 0.052s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FiltermapTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.873s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FiltermapTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.346s elapsed time, 1.373s cpu time, 0.133s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FiltermapTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Trivia"
### 0.493s elapsed time, 1.951s cpu time, 0.204s GC time
Loading theory "Draft.Filtermap" (required by "Draft.FiltermapTemplates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.Filtermap"
### 0.200s elapsed time, 0.791s cpu time, 0.065s GC time
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.964s elapsed time, 3.361s cpu time, 0.866s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.040s elapsed time, 3.299s cpu time, 0.830s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.871s elapsed time, 4.803s cpu time, 0.977s GC time
Loading theory "Draft.Templates" (required by "Draft.FiltermapTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.109s cpu time, 0.045s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FiltermapTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.435s elapsed time, 0.440s cpu time, 0.000s GC time
Loading theory "Draft.FiltermapTemplates"
val templateLemmas =
   [("Filtermap.length_filtermap",
     "length (Filtermap.filtermap ?pred ?func ?tr) <= length ?tr",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Filtermap.filtermap_map_filter",
     "Filtermap.filtermap ?pred ?func ?xs = map ?func (filter ?pred ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Filtermap.filtermap_Nil_list_ex",
     "(Filtermap.filtermap ?pred ?func ?tr = []) = (~ list_ex ?pred ?tr)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Filtermap.never_Nil_filter",
     "never ?pred ?xs = ([] = filter ?pred ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, t_empty), template_var 0)
            )],
       template_equation
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Filtermap.filtermap_list_all",
     "(Filtermap.filtermap ?pred ?func ?tr = map ?func ?tr) =
      list_all ?pred ?tr",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("Filtermap.filtermap_Nil_never",
     "(Filtermap.filtermap ?pred ?func ?tr = []) = never ?pred ?tr",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("Filtermap.filter_Nil_never",
     "[] = filter ?pred ?xs ==> never ?pred ?xs",
     template_implication
      ([template_equation
         (template_hole 3,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)
           ))),
    ("Filtermap.filtermap_append",
     "Filtermap.filtermap ?pred ?func (?tr @ ?tr1.0) =
      Filtermap.filtermap ?pred ?func ?tr @
      Filtermap.filtermap ?pred ?func ?tr1.0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Filtermap.not_holds_filtermap_RCons",
     "~ ?pred ?trn ==>
      Filtermap.filtermap ?pred ?func (?tr ## ?trn) =
      Filtermap.filtermap ?pred ?func ?tr",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Filtermap.set_filtermap",
     "set (Filtermap.filtermap ?pred ?func ?xs)
      <= {?func x |x. x \<in>\<in> ?xs & ?pred x}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Filtermap.holds_filtermap_RCons",
     "?pred ?trn ==>
      Filtermap.filtermap ?pred ?func (?tr ## ?trn) =
      Filtermap.filtermap ?pred ?func ?tr ## ?func ?trn",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_hole 3))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 2)),
             template_hole 0))))),
    ("Filtermap.filtermap_Cons_cong",
     "Filtermap.filtermap ?pred ?func ?xs =
      Filtermap.filtermap ?pred ?func ?ys ==>
      Filtermap.filtermap ?pred ?func (?x # ?xs) =
      Filtermap.filtermap ?pred ?func (?x # ?ys)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Filtermap.filtermap_eq_append",
     "Filtermap.filtermap ?pred ?func ?tr = ?al1.0 @ ?al2.0 ==>
      EX tr1 tr2.
         ?tr = tr1 @ tr2 &
         Filtermap.filtermap ?pred ?func tr1 = ?al1.0 &
         Filtermap.filtermap ?pred ?func tr2 = ?al2.0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Filtermap.filtermap_Cons2_eq",
     "Filtermap.filtermap ?pred ?func [?x, ?x'] =
      Filtermap.filtermap ?pred ?func [?y, ?y'] ==>
      Filtermap.filtermap ?pred ?func (?x # ?x' # ?zs) =
      Filtermap.filtermap ?pred ?func (?y # ?y' # ?zs)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 6),
              template_var 5),
            template_app
             (template_app (template_hole 1, template_var 4),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_hole 0))),
          template_app
           (template_app
             (template_app (template_hole 2, template_var 6),
              template_var 5),
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_hole 0))))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 6),
             template_var 5),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0))),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 6),
             template_var 5),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))))),
    ("Filtermap.filtermap_eq_Cons",
     "Filtermap.filtermap ?pred ?func ?tr = ?a # ?al1.0 ==>
      EX trn tr2 tr1.
         ?tr = tr2 @ [trn] @ tr1 &
         never ?pred tr2 &
         ?pred trn &
         ?func trn = ?a & Filtermap.filtermap ?pred ?func tr1 = ?al1.0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 11, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 10, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Filtermap.snoc_eq_filterD",
     "[| ?xs ## ?x = filter ?Q ?ys;
         !!us vs.
            [| ?ys = us @ ?x # vs; never ?Q vs; ?Q ?x; ?xs = filter ?Q us |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 4),
            template_app
             (template_app (template_hole 5, template_var 3),
              template_hole 4)),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Filtermap.filtermap_eq_RCons",
     "Filtermap.filtermap ?pred ?func ?tr = ?al1.0 ## ?a ==>
      EX trn tr1 tr2.
         ?tr = tr1 @ [trn] @ tr2 &
         never ?pred tr2 &
         ?pred trn &
         ?func trn = ?a & Filtermap.filtermap ?pred ?func tr1 = ?al1.0",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 13, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 12, template_var 1),
            template_app
             (template_app (template_hole 11, template_var 0),
              template_hole 10)))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Filtermap.filtermap_eq_Cons_RCons",
     "Filtermap.filtermap ?pred ?func ?tr = ?a # ?al1.0 ## ?b ==>
      EX tra trna tr1 trnb trb.
         ?tr = tra @ [trna] @ tr1 @ [trnb] @ trb &
         never ?pred tra &
         ?pred trna &
         ?func trna = ?a &
         Filtermap.filtermap ?pred ?func tr1 = ?al1.0 &
         ?pred trnb & ?func trnb = ?b & never ?pred trb",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 13, template_var 5),
              template_var 4),
            template_var 3),
          template_app
           (template_app (template_hole 12, template_var 2),
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 12, template_var 0),
                template_hole 10))))],
       template_predicate (template_app (template_hole 9, t_empty))))]:
   (string * thm * template) list
### theory "Draft.FiltermapTemplates"
### 0.343s elapsed time, 0.496s cpu time, 0.067s GC time
val it = (): unit
