Loading theory "Draft.Nonempty_Bounded_Set" (required by "Draft.Nonempty_Bounded_SetTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Nonempty_Bounded_SetTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Nonempty_Bounded_SetTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.243s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.381s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Nonempty_Bounded_SetTemplates" via "Draft.ExtrEqs")
### theory "Draft.Nonempty_Bounded_Set"
### 0.225s elapsed time, 0.562s cpu time, 0.040s GC time
### theory "HOL-Library.BigO"
### 0.590s elapsed time, 0.733s cpu time, 0.071s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Nonempty_Bounded_SetTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.430s elapsed time, 0.431s cpu time, 0.000s GC time
Loading theory "Draft.Nonempty_Bounded_SetTemplates"
val templateLemmas =
   [("Nonempty_Bounded_Set.set_nebset_nebsingleton",
     "set_nebset (nebsingleton ?x) = {?x}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Nonempty_Bounded_Set.set_bset_empty",
     "(set_bset ?X = {}) = (?X = bempty)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Nonempty_Bounded_Set.rel_nebset_False",
     "rel_nebset (%x y. False) ?x ?y = False",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_hole 0)),
    ("Nonempty_Bounded_Set.map_nebset_nebsingleton",
     "map_nebset ?f (nebsingleton ?x) = nebsingleton (?f ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_var 1, template_var 0)))),
    ("Nonempty_Bounded_Set.nebsingleton_inj",
     "(nebsingleton ?x = nebsingleton ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Nonempty_Bounded_Set.nebinsert_absorb",
     "nebinsert ?a (nebinsert ?a ?x) = nebinsert ?a ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Nonempty_Bounded_Set.rel_nebsingleton",
     "rel_nebset ?R (nebsingleton ?x1.0) (nebsingleton ?x2.0) =
      ?R ?x1.0 ?x2.0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("Nonempty_Bounded_Set.rel_bset_bset_of_nebset",
     "rel_bset ?R (bset_of_nebset ?X) (bset_of_nebset ?Y) =
      rel_nebset ?R ?X ?Y",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Nonempty_Bounded_Set.map_nebset_nebinsert",
     "map_nebset ?f (nebinsert ?x ?X) =
      nebinsert (?f ?x) (map_nebset ?f ?X)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Nonempty_Bounded_Set.rel_nebset_nebsingleton",
     "rel_nebset ?R ?X (nebsingleton ?x2.0) =
      (ALL x1:set_nebset ?X. ?R x1 ?x2.0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         t_empty))),
    ("Nonempty_Bounded_Set.rel_nebset_nebsingleton",
     "rel_nebset ?R (nebsingleton ?x1.0) ?X =
      (ALL x2:set_nebset ?X. ?R ?x1.0 x2)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Nonempty_Bounded_Set.rel_nebset_conj",
     "rel_nebset (%x y. ?P & ?Q x y) ?x ?y = (?P & rel_nebset ?Q ?x ?y)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Nonempty_Bounded_Set.rel_nebset_conj",
     "rel_nebset (%x y. ?Q x y & ?P) ?x ?y = (?P & rel_nebset ?Q ?x ?y)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Nonempty_Bounded_Set.set_nebset_to_set_nebset",
     "[| ?A ~= {}; |?A| <o natLeq +c |UNIV| |]
      ==> set_nebset (the_inv set_nebset ?A) = ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 11)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 0)),
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_app (template_hole 5, template_hole 4)))),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 2),
             template_var 0)),
         template_var 0))),
    ("Nonempty_Bounded_Set.rel_nebset_aux_infinite",
     "((ALL t:set_nebset ?a. EX u:set_nebset ?b. ?R t u) &
       (ALL u:set_nebset ?b. EX t:set_nebset ?a. ?R t u)) =
      ((BNF_Def.Grp {a. set_nebset a <= {(a, b). ?R a b}}
         (map_nebset fst))^--1 OO
       BNF_Def.Grp {a. set_nebset a <= {(a, b). ?R a b}} (map_nebset snd))
       ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 19,
           template_app
            (template_app
              (template_hole 18,
               template_app (template_hole 17, template_var 2)),
             t_empty)),
         template_app
          (template_app
            (template_hole 14,
             template_app (template_hole 15, template_var 1)),
           t_empty)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 12,
               template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_hole 9, t_empty)),
                   template_app (template_hole 4, template_hole 3)))),
             template_app
              (template_app
                (template_hole 2, template_app (template_hole 9, t_empty)),
               template_app (template_hole 1, template_hole 0))),
           template_var 2),
         template_var 1)))]:
   (string * thm * template) list
### theory "Draft.Nonempty_Bounded_SetTemplates"
### 0.331s elapsed time, 0.476s cpu time, 0.064s GC time
val it = (): unit
