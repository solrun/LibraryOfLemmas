Loading theory "Draft.Nonempty_Bounded_Set" (required by "Draft.VardiTemplates" via "Draft.Vardi" via "Draft.Probabilistic_Hierarchy")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.VardiTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.VardiTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.088s elapsed time, 0.290s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.398s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.VardiTemplates" via "Draft.ExtrEqs")
### theory "Draft.Nonempty_Bounded_Set"
### 0.226s elapsed time, 0.573s cpu time, 0.041s GC time
Loading theory "Draft.Probabilistic_Hierarchy" (required by "Draft.VardiTemplates" via "Draft.Vardi")
### theory "HOL-Library.BigO"
### 0.598s elapsed time, 1.235s cpu time, 0.059s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.VardiTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.508s elapsed time, 1.065s cpu time, 0.139s GC time
consts
  unfold_mc :: "('a => 'a pmf) => 'a => mc"
consts
  unfold_dlts :: "('a => 'b => 'a option) => 'a => 'b dlts"
consts
  unfold_lts :: "('a => ('b * 'a) set['k]) => 'a => ('b, 'k) lts"
consts
  unfold_react :: "('a => 'b => 'a pmf option) => 'a => 'b react"
consts
  unfold_lmc :: "('a => 'b * 'a pmf) => 'a => 'b lmc"
consts
  unfold_lmdp :: "('a => 'b * 'a pmf set!['k]) => 'a => ('b, 'k) lmdp"
consts
  unfold_gen :: "('a => ('b * 'a) pmf option) => 'a => 'b gen"
consts
  unfold_str :: "('a => 'a pmf + ('b * 'a) option) => 'a => 'b str"
consts
  unfold_alt :: "('a => 'a pmf + ('b * 'a) set['k]) => 'a => ('b, 'k) alt"
consts
  unfold_sseg :: "('a => ('b * 'a pmf) set['k]) => 'a => ('b, 'k) sseg"
consts
  unfold_seg :: "('a => ('b * 'a) pmf set['k]) => 'a => ('b, 'k) seg"
consts
  unfold_bun :: "('a => (('b * 'a) set['k]) pmf) => 'a => ('b, 'k) bun"
consts
  unfold_pz ::
    "('a => (('b * 'a) set['k1]) pmf set['k2]) => 'a => ('b, 'k1, 'k2) pz"
consts
  unfold_mg ::
    "('a => (('b * 'a + 'a) set['k1]) pmf set['k2])
     => 'a => ('b, 'k1, 'k2) mg"
See graph
### theory "Draft.Probabilistic_Hierarchy"
### 7.988s elapsed time, 10.282s cpu time, 1.925s GC time
Loading theory "Draft.Vardi" (required by "Draft.VardiTemplates")
Proofs for inductive predicate(s) "var_eq"
  Proving monotonicity ...
### No map function defined for Vardi.var0. This will cause problems later on.
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Vardi.var0" found.
Proofs for inductive predicate(s) "rel_var"
  Proving monotonicity ...
### theory "Draft.Vardi"
### 0.923s elapsed time, 0.984s cpu time, 0.059s GC time
Loading theory "Draft.VardiTemplates"
val templateLemmas =
   [("Vardi.var_eq_symp", "?x \<sim> ?y ==> ?y \<sim> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Vardi.var_eq_transp",
     "[| ?x \<sim> ?y; ?y \<sim> ?z |] ==> ?x \<sim> ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Vardi.map_var0_eq_BPS_iff",
     "(map_var0 ?f ?g ?z = BPS ?X) =
      (EX Y. ?z = BPS Y & map_bset (map_prod ?f ?g) Y = ?X)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app (template_hole 8, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 7, template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Vardi.map_var0_eq_PMF_iff",
     "(map_var0 ?f ?g ?z = PMF ?p) =
      (EX q. ?z = PMF q & map_pmf (map_prod ?f ?g) q = ?p)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_app (template_hole 8, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 7, template_var 0)),
       template_app (template_hole 6, t_empty)))]:
   (string * thm * template) list
### theory "Draft.VardiTemplates"
### 1.739s elapsed time, 2.770s cpu time, 1.119s GC time
val it = (): unit
