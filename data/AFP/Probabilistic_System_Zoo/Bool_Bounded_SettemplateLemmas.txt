   [("Bool_Bounded_Set.bempty_neq_bsingleton", "bempty ~= bsingleton ?x",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Bool_Bounded_Set.bempty_neq_bsingleton", "bsingleton ?x ~= bempty",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Bool_Bounded_Set.map_bset_bempty", "map_bset ?f bempty = bempty",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Bool_Bounded_Set.bempty_neq_bdoubleton", "bempty ~= bdoubleton ?x ?y",
     template_negation
      (
         template_equation
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Bool_Bounded_Set.bempty_neq_bdoubleton", "bdoubleton ?x ?y ~= bempty",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Bool_Bounded_Set.bdoubleton_same", "bdoubleton ?x ?x = bsingleton ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Bool_Bounded_Set.map_bset_bsingleton",
     "map_bset ?f (bsingleton ?x) = bsingleton (?f ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_var 1, template_var 0)))),
    ("Bool_Bounded_Set.map_bset_eq_bempty",
     "(bempty = map_bset ?f ?x) = (?x = bempty)",
     template_bimplication
      (template_equation
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Bool_Bounded_Set.bsinleton_inj",
     "(bsingleton ?x = bsingleton ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Bool_Bounded_Set.map_bset_eq_bempty",
     "(map_bset ?f ?x = bempty) = (?x = bempty)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Bool_Bounded_Set.map_bset_bdoubleton",
     "map_bset ?f (bdoubleton ?x ?y) = bdoubleton (?f ?x) (?f ?y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app (template_var 2, template_var 0)))),
    ("Bool_Bounded_Set.bsinleton_eq_bdoubleton",
     "(bsingleton ?x = bdoubleton ?y ?z) = (?x = ?y & ?y = ?z)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Bool_Bounded_Set.bsinleton_eq_bdoubleton",
     "(bdoubleton ?y ?z = bsingleton ?x) = (?x = ?y & ?y = ?z)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Bool_Bounded_Set.bdoubleton_eq_iff",
     "(bdoubleton ?x ?y = bdoubleton ?z ?w) =
      (?x = ?z & ?y = ?w | ?x = ?w & ?y = ?z)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)))
           ))),
    ("Bool_Bounded_Set.bset_cases",
     "[| ?X = bempty ==> ?P; !!x. ?X = bsingleton x ==> ?P;
         !!x y. [| x ~= y; ?X = bdoubleton x y |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 5)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0)))]
