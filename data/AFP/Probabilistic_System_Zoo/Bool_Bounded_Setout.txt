Loading theory "Draft.Bool_Bounded_Set" (required by "Draft.Bool_Bounded_SetTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Bool_Bounded_SetTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Bool_Bounded_SetTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.247s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.104s elapsed time, 0.314s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Bool_Bounded_SetTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "rel_bset"
  Proving monotonicity ...
### theory "Draft.Bool_Bounded_Set"
### 0.213s elapsed time, 0.541s cpu time, 0.042s GC time
### theory "HOL-Library.BigO"
### 0.635s elapsed time, 0.797s cpu time, 0.107s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Bool_Bounded_SetTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.460s elapsed time, 0.460s cpu time, 0.000s GC time
Loading theory "Draft.Bool_Bounded_SetTemplates"
val templateLemmas =
   [("Bool_Bounded_Set.bempty_neq_bsingleton", "bempty ~= bsingleton ?x",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Bool_Bounded_Set.bempty_neq_bsingleton", "bsingleton ?x ~= bempty",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Bool_Bounded_Set.map_bset_bempty", "map_bset ?f bempty = bempty",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Bool_Bounded_Set.bempty_neq_bdoubleton", "bempty ~= bdoubleton ?x ?y",
     template_negation
      (
         template_equation
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Bool_Bounded_Set.bempty_neq_bdoubleton", "bdoubleton ?x ?y ~= bempty",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Bool_Bounded_Set.bdoubleton_same", "bdoubleton ?x ?x = bsingleton ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Bool_Bounded_Set.map_bset_bsingleton",
     "map_bset ?f (bsingleton ?x) = bsingleton (?f ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_var 1, template_var 0)))),
    ("Bool_Bounded_Set.map_bset_eq_bempty",
     "(bempty = map_bset ?f ?x) = (?x = bempty)",
     template_bimplication
      (template_equation
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Bool_Bounded_Set.bsinleton_inj",
     "(bsingleton ?x = bsingleton ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Bool_Bounded_Set.map_bset_eq_bempty",
     "(map_bset ?f ?x = bempty) = (?x = bempty)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Bool_Bounded_Set.map_bset_bdoubleton",
     "map_bset ?f (bdoubleton ?x ?y) = bdoubleton (?f ?x) (?f ?y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app (template_var 2, template_var 0)))),
    ("Bool_Bounded_Set.bsinleton_eq_bdoubleton",
     "(bsingleton ?x = bdoubleton ?y ?z) = (?x = ?y & ?y = ?z)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Bool_Bounded_Set.bsinleton_eq_bdoubleton",
     "(bdoubleton ?y ?z = bsingleton ?x) = (?x = ?y & ?y = ?z)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Bool_Bounded_Set.bdoubleton_eq_iff",
     "(bdoubleton ?x ?y = bdoubleton ?z ?w) =
      (?x = ?z & ?y = ?w | ?x = ?w & ?y = ?z)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)))
           ))),
    ("Bool_Bounded_Set.bset_cases",
     "[| ?X = bempty ==> ?P; !!x. ?X = bsingleton x ==> ?P;
         !!x y. [| x ~= y; ?X = bdoubleton x y |] ==> ?P |]
      ==> ?P",
     template_implication
      ([template_implication
         ([template_equation (template_var 1, template_hole 5)],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Bool_Bounded_SetTemplates"
### 0.339s elapsed time, 0.498s cpu time, 0.062s GC time
val it = (): unit
