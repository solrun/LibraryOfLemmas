Loading theory "Draft.More_Modules" (required by "Draft.More_ModulesTemplates")
Loading theory "Draft.Templates" (required by "Draft.More_ModulesTemplates" via "Draft.ExtrEqs")
locale module
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "module (*s)"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.087s elapsed time, 0.203s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.More_ModulesTemplates")
### theory "Draft.More_Modules"
### 0.216s elapsed time, 0.463s cpu time, 0.044s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.505s elapsed time, 0.658s cpu time, 0.044s GC time
Loading theory "Draft.More_ModulesTemplates"
val templateLemmas =
   [("More_Modules.ideal_eq_UNIV_iff_contains_one",
     "(ideal ?B = UNIV) = ((1::?'a) : ideal ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)))),
    ("More_Modules.ideal_field_disj",
     "ideal ?B = {0::?'a} | ideal ?B = UNIV",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1))),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 0)),
             template_hole 0))
         )),
    ("More_Modules.ideal_eq_zero_iff",
     "(ideal ?F = {0::?'a}) = (?F <= {0::?'a})",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1)),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1)))),
    ("More_Modules.ideal_field_cases",
     "[| ideal ?B = {0::?'a} ==> ?thesis; ideal ?B = UNIV ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 1),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1))],
          template_predicate (template_var 0)),
        template_implication
         ([template_equation
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 1),
             template_hole 0)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("More_Modules.image_ideal_subset",
     "[| !!x y. ?h (x + y) = ?h x + ?h y; !!x y. ?h (x * y) = ?h x * ?h y |]
      ==> ?h ` ideal ?F <= ideal (?h ` ?F)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_hole 5),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_hole 4),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("More_Modules.image_ideal_eq_surj",
     "[| !!x y. ?h (x + y) = ?h x + ?h y; !!x y. ?h (x * y) = ?h x * ?h y;
         surj ?h |]
      ==> ?h ` ideal ?B = ideal (?h ` ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1),
            template_hole 3),
          template_hole 2)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 1, template_hole 7),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_hole 6),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("More_Modules.image_ideal_eq_Int",
     "[| !!x y. ?h (x + y) = ?h x + ?h y; !!x y. ?h (x * y) = ?h x * ?h y;
         !!x. ?h (?h x) = ?h x |]
      ==> ?h ` ideal ?B = ideal (?h ` ?B) Int range ?h",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_hole 5),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_hole 5),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 0))))),
    ("More_Modules.in_idealE_homomorphism_finite",
     "[| !!x y. ?h (x + y) = ?h x + ?h y; !!x y. ?h (x * y) = ?h x * ?h y;
         !!x. ?h (?h x) = ?h x; finite ?B; ?B <= range ?h; ?p : range ?h;
         ?p : ideal ?B;
         !!q. [| !!b. q b : range ?h; ?p = (SUM b:?B. q b * b) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 5, template_var 3),
            template_hole 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_hole 8),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("More_Modules.in_idealE_homomorphism",
     "[| !!x y. ?h (x + y) = ?h x + ?h y; !!x y. ?h (x * y) = ?h x * ?h y;
         !!x. ?h (?h x) = ?h x; ?B <= range ?h; ?p : range ?h;
         ?p : ideal ?B;
         !!A q.
            [| finite A; A <= ?B; !!b. q b : range ?h;
               ?p = (SUM b:A. q b * b) |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_hole 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 7, template_var 3),
                template_hole 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_hole 9),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("More_Modules.ideal_induct_homomorphism",
     "[| !!x y. ?h (x + y) = ?h x + ?h y; !!x y. ?h (x * y) = ?h x * ?h y;
         !!x. ?h (?h x) = ?h x; ?B <= range ?h; ?p : range ?h;
         ?p : ideal ?B; ?P (0::?'a);
         !!c b a.
            [| c : range ?h; b : ?B; ?P a; a : range ?h |]
            ==> ?P (c * b + a) |]
      ==> ?P ?p",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_hole 6),
                template_var 2))
            ),
        template_predicate (template_app (template_var 0, template_hole 0)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (template_app (template_var 0, template_var 1))))]:
   (string * thm * template) list
### theory "Draft.More_ModulesTemplates"
### 0.326s elapsed time, 0.488s cpu time, 0.076s GC time
val it = (): unit
