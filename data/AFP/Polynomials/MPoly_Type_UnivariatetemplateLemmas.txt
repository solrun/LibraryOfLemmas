   [("MPoly_Type_Univariate.poly_to_mpoly0", "poly_to_mpoly ?v 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("MPoly_Type_Univariate.poly_to_mpoly_inverse",
     "mpoly_to_poly ?v (poly_to_mpoly ?v ?p) = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("MPoly_Type_Univariate.coeff_mpoly_to_poly",
     "poly.coeff (mpoly_to_poly ?v ?p) ?k =
      MPoly_Type.coeff ?p (Poly_Mapping.single ?v ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("MPoly_Type_Univariate.coeff_poly_to_mpoly",
     "MPoly_Type.coeff (poly_to_mpoly ?v ?p) (Poly_Mapping.single ?v ?k) =
      poly.coeff ?p ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("MPoly_Type_Univariate.mpoly_to_poly_add",
     "mpoly_to_poly ?v (?p1.0 + ?p2.0) =
      mpoly_to_poly ?v ?p1.0 + mpoly_to_poly ?v ?p2.0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("MPoly_Type_Univariate.mpoly_to_poly_inverse",
     "vars ?p <= {?v} ==> poly_to_mpoly ?v (mpoly_to_poly ?v ?p) = ?p",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_app
           (template_app (template_hole 4, template_var 0),
            template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("MPoly_Type_Univariate.poly_to_mpoly_finite",
     "finite
       {m. (poly.coeff ?p (lookup m ?v) when keys m <= {?v}) ~= (0::?'a)}",
     template_predicate
      (
         template_app
          (template_hole 11, template_app (template_hole 10, t_empty))
         )),
    ("MPoly_Type_Univariate.poly_eq_insertion",
     "vars ?p <= {?v} ==>
      poly (mpoly_to_poly ?v ?p) ?x = insertion (%v. ?x) ?p",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 0, t_empty), template_var 2)))),
    ("MPoly_Type_Univariate.univariate_mpoly_roots_finite",
     "[| vars ?p <= {?v}; ?p ~= 0 |]
      ==> finite {x. insertion (%v. x) ?p = (0::?'a)}",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_var 1),
          template_app
           (template_app (template_hole 9, template_var 0),
            template_hole 8)),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_predicate
        (
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))
           )))]
