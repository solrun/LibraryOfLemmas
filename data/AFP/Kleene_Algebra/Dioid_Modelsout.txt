Loading theory "Draft.Signatures" (required by "Draft.Dioid_ModelsTemplates" via "Draft.Dioid_Models" via "Draft.Dioid")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Dioid_ModelsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Dioid_ModelsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Dioid_ModelsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
class star_op = type +
  fixes star :: "'a => 'a"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
class omega_op = type +
  fixes omega :: "'a => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.542s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Dioid_ModelsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.205s elapsed time, 0.830s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Dioid_ModelsTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
class plus_ord = plus + ord +
  assumes "less_eq_def": "!!x y. (x <= y) = (x + y = y)"
    and "less_def": "!!x y. (x < y) = (x <= y & x ~= y)"
### theory "Draft.Signatures"
### 0.219s elapsed time, 0.892s cpu time, 0.040s GC time
Loading theory "Draft.Dioid" (required by "Draft.Dioid_ModelsTemplates" via "Draft.Dioid_Models")
### theory "HOL-Library.Nat_Bijection"
### 0.337s elapsed time, 1.343s cpu time, 0.119s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Dioid_ModelsTemplates" via "Draft.ExtrEqs")
class join_semilattice = plus_ord +
  assumes "add_assoc'": "!!x y z. x + y + z = x + (y + z)"
    and "add_comm": "!!x y. x + y = y + x"
    and "add_idem": "!!x. x + x = x"
### Partially applied constant "Groups.plus_class.plus" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (+) (set (?x # ?xs)) == fold (+) ?xs ?x
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class join_semilattice_zero = join_semilattice + zero +
  assumes "add_zero_l": "!!x. (0::'a) + x = x"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.961s elapsed time, 3.610s cpu time, 0.770s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.053s elapsed time, 3.784s cpu time, 0.725s GC time
Found termination order: "size <*mlex*> {}"
class ab_near_semiring = ab_semigroup_add + semigroup_mult +
  assumes
    "distrib_right'":
      "!!x y z. (x + y) \<cdot> z = x \<cdot> z + y \<cdot> z"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class ab_pre_semiring = ab_near_semiring +
  assumes
    "subdistl_eq":
      "!!z x y. z \<cdot> x + z \<cdot> (x + y) = z \<cdot> (x + y)"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class near_dioid = ab_near_semiring + plus_ord +
  assumes "add_idem'": "!!x. x + x = x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.979s elapsed time, 6.084s cpu time, 0.905s GC time
Loading theory "Draft.Templates" (required by "Draft.Dioid_ModelsTemplates" via "Draft.ExtrEqs")
class pre_dioid = near_dioid +
  assumes "subdistl": "!!z x y. z \<cdot> x <= z \<cdot> (x + y)"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Dioid_ModelsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.512s elapsed time, 1.038s cpu time, 0.042s GC time
class ab_near_semiring_one = ab_near_semiring + one +
  assumes "mult_onel": "!!x. (1::'a) \<cdot> x = x"
    and "mult_oner": "!!x. x \<cdot> (1::'a) = x"
class ab_near_semiring_one_zerol = ab_near_semiring_one + zero +
  assumes "add_zerol": "!!x. (0::'a) + x = x"
    and "annil": "!!x. (0::'a) \<cdot> x = (0::'a)"
class ab_near_semiring_one_zero = ab_near_semiring_one_zerol +
  assumes "annir": "!!x. x \<cdot> (0::'a) = (0::'a)"
class selective_near_semiring = ab_near_semiring + plus_ord +
  assumes "select": "!!x y. x + y = x | x + y = y"
### theory "Draft.Dioid"
### 7.504s elapsed time, 12.130s cpu time, 1.250s GC time
Loading theory "Draft.Dioid_Models" (required by "Draft.Dioid_ModelsTemplates")
instantiation
  set :: (monoid_mult) monoid_mult
  one_set == one_class.one :: 'a set
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (monoid_mult) dioid_one_zero
  zero_set == zero_class.zero :: 'a set
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  list :: (type) monoid_mult
  one_list == one_class.one :: 'a list
  times_list == times :: 'a list => 'a list => 'a list
### Partially applied constant "Relation.relcomp" on left hand side of equation, in theorem:
### monoid_mult.prod_list Id (O) ?xs == foldr (O) ?xs Id
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list (Un) {} ?xs == foldr (Un) ?xs {}
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum (Un) {} ?g (set ?xs) ==
### rel_dioid.sum_list (map ?g (remdups ?xs))
Found termination order: "{}"
### Partially applied constant "Dioid_Models.t_prod" on left hand side of equation, in theorem:
### monoid_mult.prod_list t_one (\<cdot>) ?xs == foldr (\<cdot>) ?xs t_one
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list (Un) t_zero ?xs == foldr (Un) ?xs t_zero
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum (Un) t_zero ?g (set ?xs) ==
### trace_dioid.sum_list (map ?g (remdups ?xs))
Found termination order: "{}"
### Partially applied constant "Dioid_Models.p_prod" on left hand side of equation, in theorem:
### monoid_mult.prod_list p_one (\<cdot>) ?xs == foldr (\<cdot>) ?xs p_one
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list (Un) {} ?xs == foldr (Un) ?xs {}
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum (Un) {} ?g (set ?xs) ==
### path_dioid.sum_list (map ?g (remdups ?xs))
consts
  pp_first :: "'a ppath => 'a"
consts
  pp_last :: "'a ppath => 'a"
consts
  pp_fusion :: "'a ppath => 'a ppath => 'a ppath"
### Partially applied constant "Dioid_Models.pp_prod" on left hand side of equation, in theorem:
### monoid_mult.prod_list pp_one (\<cdot>) ?xs == foldr (\<cdot>) ?xs pp_one
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list (Un) {} ?xs == foldr (Un) ?xs {}
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum (Un) {} ?g (set ?xs) ==
### ppath_dioid.sum_list (map ?g (remdups ?xs))
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### monoid_mult.prod_list top inf ?xs == foldr inf ?xs top
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list sup bot ?xs == foldr sup ?xs bot
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum sup bot ?g (set ?xs) ==
### bounded_distributive_lattice_class.sum_list (map ?g (remdups ?xs))
instantiation
  bool :: bounded_distributive_lattice
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### monoid_mult.prod_list True inf ?xs == foldr inf ?xs True
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list sup False ?xs == foldr sup ?xs False
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum sup False ?g (set ?xs) ==
### boolean_dioid.sum_list (map ?g (remdups ?xs))
Found termination order: "{}"
Found termination order: "{}"
instantiation
  mreal :: selective_semiring
  zero_mreal == zero_class.zero :: mreal
  one_mreal == one_class.one :: mreal
  less_eq_mreal == less_eq :: mreal => mreal => bool
  less_mreal == less :: mreal => mreal => bool
  times_mreal == times :: mreal => mreal => mreal
  plus_mreal == plus :: mreal => mreal => mreal
Found termination order: "{}"
Found termination order: "{}"
instantiation
  preal :: selective_semiring
  zero_preal == zero_class.zero :: preal
  one_preal == one_class.one :: preal
  less_eq_preal == less_eq :: preal => preal => bool
  less_preal == less :: preal => preal => bool
  times_preal == times :: preal => preal => preal
  plus_preal == plus :: preal => preal => preal
Found termination order: "{}"
Found termination order: "{}"
instantiation
  pnat :: selective_semiring
  zero_pnat == zero_class.zero :: pnat
  one_pnat == one_class.one :: pnat
  less_eq_pnat == less_eq :: pnat => pnat => bool
  less_pnat == less :: pnat => pnat => bool
  times_pnat == times :: pnat => pnat => pnat
  plus_pnat == plus :: pnat => pnat => pnat
### theory "Draft.Dioid_Models"
### 3.887s elapsed time, 4.681s cpu time, 1.047s GC time
Loading theory "Draft.Dioid_ModelsTemplates"
### theory "Draft.Dioid_ModelsTemplates"
### 0.092s elapsed time, 0.198s cpu time, 0.046s GC time
*** Conflict of type arities:
***   set :: (monoid_mult) semigroup_add and
***   set :: (semigroup_add) semigroup_add
*** At command "theory" (line 1 of "~/ResearchIdeas/templateAnalysis/Isabelle/GeneratedThys/DebugAFP/Kleene_Algebra/Dioid_ModelsTemplates.thy")
Exception- TOPLEVEL_ERROR raised
