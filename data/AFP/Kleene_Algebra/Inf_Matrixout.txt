Loading theory "Draft.Signatures" (required by "Draft.Inf_MatrixTemplates" via "Draft.Inf_Matrix" via "Draft.Finite_Suprema" via "Draft.Dioid")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Inf_MatrixTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Inf_MatrixTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Inf_MatrixTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
class star_op = type +
  fixes star :: "'a => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class omega_op = type +
  fixes omega :: "'a => 'a"
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.605s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Inf_MatrixTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.185s elapsed time, 0.749s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Inf_MatrixTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
class plus_ord = plus + ord +
  assumes "less_eq_def": "!!x y. (x <= y) = (x + y = y)"
    and "less_def": "!!x y. (x < y) = (x <= y & x ~= y)"
### theory "Draft.Signatures"
### 0.264s elapsed time, 1.076s cpu time, 0.039s GC time
Loading theory "Draft.Dioid" (required by "Draft.Inf_MatrixTemplates" via "Draft.Inf_Matrix" via "Draft.Finite_Suprema")
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.308s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Inf_MatrixTemplates" via "Draft.ExtrEqs")
class join_semilattice = plus_ord +
  assumes "add_assoc'": "!!x y z. x + y + z = x + (y + z)"
    and "add_comm": "!!x y. x + y = y + x"
    and "add_idem": "!!x. x + x = x"
### Partially applied constant "Groups.plus_class.plus" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (+) (set (?x # ?xs)) == fold (+) ?xs ?x
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class join_semilattice_zero = join_semilattice + zero +
  assumes "add_zero_l": "!!x. (0::'a) + x = x"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.810s elapsed time, 3.163s cpu time, 0.313s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.076s elapsed time, 3.853s cpu time, 0.850s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class ab_near_semiring = ab_semigroup_add + semigroup_mult +
  assumes
    "distrib_right'":
      "!!x y z. (x + y) \<cdot> z = x \<cdot> z + y \<cdot> z"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class ab_pre_semiring = ab_near_semiring +
  assumes
    "subdistl_eq":
      "!!z x y. z \<cdot> x + z \<cdot> (x + y) = z \<cdot> (x + y)"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class near_dioid = ab_near_semiring + plus_ord +
  assumes "add_idem'": "!!x. x + x = x"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.017s elapsed time, 6.136s cpu time, 1.047s GC time
Loading theory "Draft.Templates" (required by "Draft.Inf_MatrixTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.155s cpu time, 0.047s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Inf_MatrixTemplates")
class pre_dioid = near_dioid +
  assumes "subdistl": "!!z x y. z \<cdot> x <= z \<cdot> (x + y)"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.517s elapsed time, 1.057s cpu time, 0.055s GC time
class ab_near_semiring_one = ab_near_semiring + one +
  assumes "mult_onel": "!!x. (1::'a) \<cdot> x = x"
    and "mult_oner": "!!x. x \<cdot> (1::'a) = x"
class ab_near_semiring_one_zerol = ab_near_semiring_one + zero +
  assumes "add_zerol": "!!x. (0::'a) + x = x"
    and "annil": "!!x. (0::'a) \<cdot> x = (0::'a)"
class ab_near_semiring_one_zero = ab_near_semiring_one_zerol +
  assumes "annir": "!!x. x \<cdot> (0::'a) = (0::'a)"
class selective_near_semiring = ab_near_semiring + plus_ord +
  assumes "select": "!!x y. x + y = x | x + y = y"
### theory "Draft.Dioid"
### 7.856s elapsed time, 12.461s cpu time, 1.457s GC time
Loading theory "Draft.Finite_Suprema" (required by "Draft.Inf_MatrixTemplates" via "Draft.Inf_Matrix")
### theory "Draft.Finite_Suprema"
### 0.136s elapsed time, 0.189s cpu time, 0.034s GC time
Loading theory "Draft.Inf_Matrix" (required by "Draft.Inf_MatrixTemplates")
### Partially applied constant "Inf_Matrix.mat_one" on left hand side of equation, in theorem:
### monoid_mult.prod_list \<epsilon> (\<otimes>) ?xs ==
### foldr (\<otimes>) ?xs \<epsilon>
### Partially applied constant "Inf_Matrix.mat_add" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<oplus>) (set (?x # ?xs)) ==
### fold (\<oplus>) ?xs ?x
### Partially applied constant "Inf_Matrix.mat_add" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<oplus>) \<delta> ?xs == foldr (\<oplus>) ?xs \<delta>
### Partially applied constant "Inf_Matrix.mat_add" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<oplus>) \<delta> ?g (set ?xs) ==
### matrix_dioid.sum_list (map ?g (remdups ?xs))
### theory "Draft.Inf_Matrix"
### 0.525s elapsed time, 0.584s cpu time, 0.083s GC time
Loading theory "Draft.Inf_MatrixTemplates"
val templateLemmas =
   [("Inf_Matrix.mat_zeror", "\<delta> \<oplus> ?f = ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Inf_Matrix.mat_zerol", "?f \<oplus> \<delta> = ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Inf_Matrix.mat_add_idem", "?f \<oplus> ?f = ?f",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Inf_Matrix.mat_annil", "\<delta> \<otimes> ?f = \<delta>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Inf_Matrix.mat_annir", "?f \<otimes> \<delta> = \<delta>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Inf_Matrix.mat_oner", "?f \<otimes> \<epsilon> = ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Inf_Matrix.mat_onel", "\<epsilon> \<otimes> ?f = ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Inf_Matrix.mat_add_comm", "?f \<oplus> ?g = ?g \<oplus> ?f",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Inf_Matrix.mat_add_assoc",
     "?f \<oplus> ?g \<oplus> ?h = ?f \<oplus> (?g \<oplus> ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Inf_Matrix.mat_mult_assoc",
     "?f \<otimes> (?g \<otimes> ?h) = ?f \<otimes> ?g \<otimes> ?h",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Inf_Matrix.mat_distl",
     "?f \<otimes> ?g \<oplus> ?h =
      (?f \<otimes> ?g) \<oplus> (?f \<otimes> ?h)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Inf_Matrix.mat_distr",
     "?f \<oplus> ?g \<otimes> ?h =
      (?f \<otimes> ?h) \<oplus> (?g \<otimes> ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Inf_Matrix.logic_aux2",
     "(EX k. (k = ?j --> ?x = ?f ?i ?j) & (k ~= ?j --> ?x = (0::?'b))) =
      ((EX k. k = ?j & ?x = ?f ?i ?j) | (EX k. k ~= ?j & ?x = (0::?'b)))",
     template_equation
      (template_app (template_hole 7, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 7, t_empty)),
         template_app (template_hole 7, t_empty)))),
    ("Inf_Matrix.logic_aux1",
     "(EX k. (?i = k --> ?x = ?f ?i ?j) & (?i ~= k --> ?x = (0::?'b))) =
      ((EX k. ?i = k & ?x = ?f ?i ?j) | (EX k. ?i ~= k & ?x = (0::?'b)))",
     template_equation
      (template_app (template_hole 7, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 7, t_empty)),
         template_app (template_hole 7, t_empty)))),
    ("Inf_Matrix.mat_rearrange",
     "[| finite UNIV; finite UNIV |]
      ==> \<Sum> {\<Sum> {?F ?i k1 k2 ?j |k2. k2 : UNIV} |k1. k1 : UNIV} =
          \<Sum> {\<Sum> {?F ?i k1 k2 ?j |k1. k1 : UNIV} |k2. k2 : UNIV}",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_hole 10)),
        template_predicate
         (template_app (template_hole 9, template_hole 8))],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty),
           template_app (template_hole 5, t_empty)),
         template_app
          (template_app (template_hole 6, t_empty),
           template_app (template_hole 5, t_empty)))))]:
   (string * thm * template) list
### theory "Draft.Inf_MatrixTemplates"
### 0.632s elapsed time, 1.450s cpu time, 0.777s GC time
val it = (): unit
