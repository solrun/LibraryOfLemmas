Loading theory "Draft.Signatures" (required by "Draft.MatrixTemplates" via "Draft.Matrix" via "Draft.Dioid")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MatrixTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MatrixTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MatrixTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
class star_op = type +
  fixes star :: "'a => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class omega_op = type +
  fixes omega :: "'a => 'a"
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.583s cpu time, 0.046s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.MatrixTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
class plus_ord = plus + ord +
  assumes "less_eq_def": "!!x y. (x <= y) = (x + y = y)"
    and "less_def": "!!x y. (x < y) = (x <= y & x ~= y)"
### theory "Draft.Signatures"
### 0.221s elapsed time, 0.895s cpu time, 0.046s GC time
Loading theory "Draft.Dioid" (required by "Draft.MatrixTemplates" via "Draft.Matrix")
### theory "HOL-Library.Set_Algebras"
### 0.250s elapsed time, 1.014s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MatrixTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.341s elapsed time, 1.349s cpu time, 0.133s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MatrixTemplates" via "Draft.ExtrEqs")
class join_semilattice = plus_ord +
  assumes "add_assoc'": "!!x y z. x + y + z = x + (y + z)"
    and "add_comm": "!!x y. x + y = y + x"
    and "add_idem": "!!x. x + x = x"
### Partially applied constant "Groups.plus_class.plus" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (+) (set (?x # ?xs)) == fold (+) ?xs ?x
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
class join_semilattice_zero = join_semilattice + zero +
  assumes "add_zero_l": "!!x. (0::'a) + x = x"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.720s elapsed time, 2.812s cpu time, 0.285s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.922s elapsed time, 3.358s cpu time, 0.654s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class ab_near_semiring = ab_semigroup_add + semigroup_mult +
  assumes
    "distrib_right'":
      "!!x y z. (x + y) \<cdot> z = x \<cdot> z + y \<cdot> z"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class ab_pre_semiring = ab_near_semiring +
  assumes
    "subdistl_eq":
      "!!z x y. z \<cdot> x + z \<cdot> (x + y) = z \<cdot> (x + y)"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class near_dioid = ab_near_semiring + plus_ord +
  assumes "add_idem'": "!!x. x + x = x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.978s elapsed time, 5.927s cpu time, 0.939s GC time
Loading theory "Draft.Templates" (required by "Draft.MatrixTemplates" via "Draft.ExtrEqs")
class pre_dioid = near_dioid +
  assumes "subdistl": "!!z x y. z \<cdot> x <= z \<cdot> (x + y)"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MatrixTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.553s elapsed time, 1.120s cpu time, 0.046s GC time
class ab_near_semiring_one = ab_near_semiring + one +
  assumes "mult_onel": "!!x. (1::'a) \<cdot> x = x"
    and "mult_oner": "!!x. x \<cdot> (1::'a) = x"
class ab_near_semiring_one_zerol = ab_near_semiring_one + zero +
  assumes "add_zerol": "!!x. (0::'a) + x = x"
    and "annil": "!!x. (0::'a) \<cdot> x = (0::'a)"
class ab_near_semiring_one_zero = ab_near_semiring_one_zerol +
  assumes "annir": "!!x. x \<cdot> (0::'a) = (0::'a)"
class selective_near_semiring = ab_near_semiring + plus_ord +
  assumes "select": "!!x y. x + y = x | x + y = y"
### theory "Draft.Dioid"
### 7.860s elapsed time, 12.397s cpu time, 1.272s GC time
Loading theory "Draft.Matrix" (required by "Draft.MatrixTemplates")
Found termination order: "{}"
Found termination order: "{}"
instantiation
  matrix :: (zero, type, type) zero
  zero_matrix == zero_class.zero :: ('a, 'b, 'c) matrix
instantiation
  sqmatrix :: (zero, type) zero
  zero_sqmatrix == zero_class.zero :: ('a, 'b) sqmatrix
instantiation
  matrix :: ({one,zero}, len, len) one
  one_matrix == one_class.one :: ('a, 'b, 'c) matrix
instantiation
  sqmatrix :: ({one,zero}, type) one
  one_sqmatrix == one_class.one :: ('a, 'b) sqmatrix
Found termination order: "{}"
instantiation
  matrix :: (plus, type, type) plus
  plus_matrix == plus ::
    ('a, 'b, 'c) matrix => ('a, 'b, 'c) matrix => ('a, 'b, 'c) matrix
instantiation
  sqmatrix :: (plus, type) plus
  plus_sqmatrix == plus ::
    ('a, 'b) sqmatrix => ('a, 'b) sqmatrix => ('a, 'b) sqmatrix
instantiation
  matrix :: (plus, type, type) plus_ord
  less_eq_matrix == less_eq ::
    ('a, 'b, 'c) matrix => ('a, 'b, 'c) matrix => bool
  less_matrix == less :: ('a, 'b, 'c) matrix => ('a, 'b, 'c) matrix => bool
instantiation
  sqmatrix :: (plus, type) plus_ord
  less_eq_sqmatrix == less_eq ::
    ('a, 'b) sqmatrix => ('a, 'b) sqmatrix => bool
  less_sqmatrix == less :: ('a, 'b) sqmatrix => ('a, 'b) sqmatrix => bool
Found termination order: "{}"
instantiation
  sqmatrix :: ({comm_monoid_add,times}, type) times
  times_sqmatrix == times ::
    ('a, 'b) sqmatrix => ('a, 'b) sqmatrix => ('a, 'b) sqmatrix
instantiation
  sqmatrix :: (dioid_one_zero, len) dioid_one_zero
### theory "Draft.Matrix"
### 1.886s elapsed time, 2.577s cpu time, 0.932s GC time
Loading theory "Draft.MatrixTemplates"
val templateLemmas =
   [("Matrix.matrix_add_0_right", "?A + 0 = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Matrix.matrix_add_0_left", "0 + ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Matrix.matrix_mult_1_left", "1 *\<^sub>M ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Matrix.matrix_mult_1_right", "?A *\<^sub>M 1 = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Matrix.matrix_mult_0_left", "0 *\<^sub>M ?A = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Matrix.matrix_mult_0_right", "?A *\<^sub>M 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Matrix.sqmatrix_add_0_right", "?A + 0 = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Matrix.sqmatrix_add_0_left", "0 + ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Matrix.sqmatrix_mult_1_right", "?A \<cdot> 1 = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Matrix.sqmatrix_mult_1_left", "1 \<cdot> ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Matrix.sqmatrix_mult_0_right", "?A \<cdot> 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Matrix.sqmatrix_mult_0_left", "0 \<cdot> ?A = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Matrix.matrix_add_commute", "?A + ?B = ?B + ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Matrix.sqmatrix_add_commute", "?A + ?B = ?B + ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Matrix.matrix_mult_assoc",
     "?A *\<^sub>M ?B *\<^sub>M ?C = ?A *\<^sub>M (?B *\<^sub>M ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Matrix.matrix_add_assoc", "?A + ?B + ?C = ?A + (?B + ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Matrix.matrix_add_left_commute", "?A + (?B + ?C) = ?B + (?A + ?C)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Matrix.sqmatrix_mult_assoc",
     "?A \<cdot> ?B \<cdot> ?C = ?A \<cdot> (?B \<cdot> ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Matrix.sqmatrix_add_assoc", "?A + ?B + ?C = ?A + (?B + ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Matrix.sqmatrix_add_left_commute", "?A + (?B + ?C) = ?B + (?A + ?C)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Matrix.matrix_mult_distrib_left",
     "?A *\<^sub>M (?B + ?C) = ?A *\<^sub>M ?B + ?A *\<^sub>M ?C",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Matrix.matrix_mult_distrib_right",
     "(?A + ?B) *\<^sub>M ?C = ?A *\<^sub>M ?C + ?B *\<^sub>M ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Matrix.sqmatrix_mult_distrib_left",
     "?A \<cdot> (?B + ?C) = ?A \<cdot> ?B + ?A \<cdot> ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Matrix.sqmatrix_mult_distrib_right",
     "(?A + ?B) \<cdot> ?C = ?A \<cdot> ?C + ?B \<cdot> ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Matrix.sum_delta_r_1",
     "[| finite ?S; ?j : ?S |]
      ==> (SUM k:?S. ?f k \<cdot> (if k = ?j then 1::?'b else (0::?'b))) =
          ?f ?j",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty), template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Matrix.sum_delta_r_0",
     "[| finite ?S; ?j ~: ?S |]
      ==> (SUM k:?S. ?f k \<cdot> (if k = ?j then 1::?'b else (0::?'b))) =
          (0::?'b)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty), template_var 2),
         template_hole 0))),
    ("Matrix.sum_delta_l_0",
     "[| finite ?S; ?i ~: ?S |]
      ==> (SUM k:?S.
              (if ?i = k then 1::?'b else (0::?'b)) \<cdot> ?f k ?j) =
          (0::?'b)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 3)
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty), template_var 3),
         template_hole 0))),
    ("Matrix.sum_delta_l_1",
     "[| finite ?S; ?i : ?S |]
      ==> (SUM k:?S.
              (if ?i = k then 1::?'b else (0::?'b)) \<cdot> ?f k ?j) =
          ?f ?i ?j",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty), template_var 3),
         template_app
          (template_app (template_var 1, template_var 2),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.MatrixTemplates"
### 0.569s elapsed time, 0.760s cpu time, 0.072s GC time
val it = (): unit
