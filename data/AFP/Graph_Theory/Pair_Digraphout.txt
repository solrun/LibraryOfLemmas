Loading theory "Draft.Rtrancl_On" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Digraph")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Bidirected_Digraph" via "HOL-Combinatorics.Permutations" via "HOL-Library.Multiset")
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Bidirected_Digraph" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Bidirected_Digraph" via "HOL-Combinatorics.Permutations" via "HOL-Library.Disjoint_Sets")
Proofs for inductive predicate(s) "rtrancl_onp"
  Proving monotonicity ...
### theory "HOL-Combinatorics.Transposition"
### 0.158s elapsed time, 0.648s cpu time, 0.026s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Rtrancl_On"
### 0.206s elapsed time, 0.835s cpu time, 0.026s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
### theory "HOL-Library.Function_Algebras"
### 0.102s elapsed time, 0.411s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.FuncSet"
### 0.451s elapsed time, 1.789s cpu time, 0.162s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Bidirected_Digraph" via "HOL-Combinatorics.Permutations")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.467s elapsed time, 1.863s cpu time, 0.162s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Bidirected_Digraph" via "HOL-Combinatorics.Permutations")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.283s elapsed time, 1.111s cpu time, 0.136s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
### theory "HOL-Library.Nat_Bijection"
### 0.304s elapsed time, 1.195s cpu time, 0.136s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Disjoint_Sets"
### 0.309s elapsed time, 1.213s cpu time, 0.234s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.638s elapsed time, 2.351s cpu time, 0.810s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.403s elapsed time, 1.422s cpu time, 0.621s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.126s elapsed time, 4.271s cpu time, 0.981s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.ExtrEqs")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
Found termination order: "size <*mlex*> {}"
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Countable"
### 1.237s elapsed time, 4.874s cpu time, 0.578s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.BigO"
### 0.877s elapsed time, 3.449s cpu time, 0.380s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real")
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.505s elapsed time, 1.974s cpu time, 0.259s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Liminf_Limsup"
### 0.552s elapsed time, 2.162s cpu time, 0.302s GC time
### theory "HOL-Library.Tree"
### 2.096s elapsed time, 8.178s cpu time, 0.997s GC time
Loading theory "Draft.Templates" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.082s elapsed time, 0.259s cpu time, 0.069s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Pair_DigraphMoreTemplates")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.630s elapsed time, 1.907s cpu time, 0.202s GC time
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Multiset"
### 3.763s elapsed time, 13.371s cpu time, 2.167s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Bidirected_Digraph")
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.260s elapsed time, 6.475s cpu time, 1.693s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 1.120s elapsed time, 2.852s cpu time, 1.209s GC time
### theory "HOL-Library.Order_Continuity"
### 0.446s elapsed time, 0.760s cpu time, 0.059s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.469s elapsed time, 0.497s cpu time, 0.039s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Digraph" via "Draft.Stuff")
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
### theory "HOL-Library.Extended_Real"
### 2.261s elapsed time, 3.278s cpu time, 1.414s GC time
Loading theory "Draft.Stuff" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph" via "Draft.Digraph")
### theory "Draft.Stuff"
### 0.066s elapsed time, 0.269s cpu time, 0.000s GC time
Loading theory "Draft.Digraph" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph")
"- \<infinity>"
  :: "ereal"
"True"
  :: "bool"
"True"
  :: "bool"
"\<infinity>"
  :: "ereal"
"ereal (13 / 4)"
  :: "ereal"
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale fin_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "fin_digraph G"
locale loopfree_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "loopfree_digraph G"
locale nomulti_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "nomulti_digraph G"
locale sym_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "sym_digraph G"
locale digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "digraph G"
locale pseudo_graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "pseudo_graph G"
locale graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "graph G"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale fin_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "fin_digraph G"
### theory "Draft.Digraph"
### 0.942s elapsed time, 1.625s cpu time, 0.184s GC time
Loading theory "Draft.Arc_Walk" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph")
Loading theory "Draft.Bidirected_Digraph" (required by "Draft.Pair_DigraphMoreTemplates" via "Draft.Pair_Digraph")
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
consts
  awalk_verts :: "'a => 'b list => 'a list"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale bidirected_digraph
  fixes G :: "('a, 'b) pre_digraph"
    and arev :: "'b => 'b"
  assumes "bidirected_digraph G arev"
locale bidirected_digraph
  fixes G :: "('a, 'b) pre_digraph"
    and arev :: "'b => 'b"
  assumes "bidirected_digraph G arev"
### theory "Draft.Bidirected_Digraph"
### 0.349s elapsed time, 0.775s cpu time, 0.161s GC time
Found termination order: "{}"
### theory "Draft.Arc_Walk"
### 0.885s elapsed time, 1.365s cpu time, 0.238s GC time
Loading theory "Draft.Pair_Digraph" (required by "Draft.Pair_DigraphMoreTemplates")
consts
  pawalk_verts :: "'a => ('a * 'a) list => 'a list"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
locale pair_pre_digraph
  fixes G :: "'a pair_pre_digraph"
locale pair_wf_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_wf_digraph G"
locale pair_fin_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_fin_digraph G"
locale pair_sym_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_sym_digraph G"
locale pair_loopfree_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_loopfree_digraph G"
locale pair_bidirected_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_bidirected_digraph G"
locale pair_pseudo_graph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_pseudo_graph G"
locale pair_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_digraph G"
locale pair_graph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_graph G"
locale pair_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_digraph G"
consts
  rev_path :: "('a * 'a) list => ('a * 'a) list"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
locale pair_sym_digraph
  fixes G :: "'a pair_pre_digraph"
  assumes "pair_sym_digraph G"
### theory "Draft.Pair_Digraph"
### 2.788s elapsed time, 3.115s cpu time, 0.432s GC time
Loading theory "Draft.Pair_DigraphMoreTemplates"
val templateLemmas =
   [("Pair_Digraph.cas_with_proj_eq",
     "pre_digraph.cas (with_proj ?G) = pcas",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pair_Digraph.awalk_verts_with_proj_eq",
     "pre_digraph.awalk_verts (with_proj ?G) = pawalk_verts",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pair_Digraph.with_proj_simps", "head (with_proj ?G) = snd",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pair_Digraph.with_proj_simps", "tail (with_proj ?G) = fst",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pair_Digraph.rev_path_rev_path", "rev_path (rev_path ?p) = ?p",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Pair_Digraph.with_proj_simps", "verts (with_proj ?G) = pverts ?G",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Pair_Digraph.with_proj_simps", "arcs_ends (with_proj ?G) = parcs ?G",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Pair_Digraph.with_proj_simps", "arcs (with_proj ?G) = parcs ?G",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Pair_Digraph.wf_digraph_wp_iff",
     "wf_digraph (with_proj ?G) = pair_wf_digraph ?G",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Pair_Digraph.pair_graphI_graph",
     "graph (with_proj ?G) ==> pair_graph ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Pair_Digraph.pair_loopfreeI_loopfree",
     "loopfree_digraph (with_proj ?G) ==> pair_loopfree_digraph ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Pair_Digraph.rev_path_empty", "(rev_path ?p = []) = (?p = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Pair_Digraph.rev_path_eq", "(rev_path ?p = rev_path ?q) = (?p = ?q)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Pair_Digraph.co_path_nonempty", "(co_path ?e ?w ?p = []) = (?p = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Pair_Digraph.rev_path_append",
     "rev_path (?p @ ?q) = rev_path ?q @ rev_path ?p",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("Pair_Digraph.pair_bidirected_digraphI_bidirected_digraph",
     "bidirected_digraph (with_proj ?G) (swap_in (parcs ?G)) ==>
      pair_bidirected_digraph ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Pair_Digraph.bidirected_digraph_rev_conv_pair",
     "bidirected_digraph (with_proj ?G) ?rev_G ==>
      ?rev_G = swap_in (parcs ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("Pair_Digraph.verts_subdivide",
     "pverts (subdivide ?G ?e ?w) = pverts ?G Un {?w}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Pair_Digraph.sd_path_id",
     "[| (?x, ?y) ~: set ?p; (?y, ?x) ~: set ?p |]
      ==> sd_path (?x, ?y) ?w ?p = ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 2)),
                  template_app (template_hole 2, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 3)),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)),
             template_var 0),
           template_var 1),
         template_var 1))),
    ("Pair_Digraph.arcs_subdivideD",
     "[| ?x : parcs (subdivide ?G ?e ?w); fst ?x ~= ?w; snd ?x ~= ?w |]
      ==> ?x : parcs ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1),
                  template_var 0)))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 1, template_var 3),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 3),
             template_app (template_hole 5, template_var 2))
           ))),
    ("Pair_Digraph.co_path_simps",
     "[| ?e1.0 = (fst ?e, ?w); ?e2.0 = (?w, snd ?e) |]
      ==> co_path ?e ?w (?e1.0 # ?e2.0 # ?es) = ?e # co_path ?e ?w ?es",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 3)),
            template_var 2)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_app (template_hole 3, template_var 3)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Pair_Digraph.co_path_simps",
     "[| ?e1.0 ~= (fst ?e, ?w); ?e1.0 ~= (snd ?e, ?w) |]
      ==> co_path ?e ?w (?e1.0 # ?es) = ?e1.0 # co_path ?e ?w ?es",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 3,
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2)),
                template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_var 3,
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 3, template_var 2)),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0))))),
    ("Pair_Digraph.co_sd_id",
     "[| (?u, ?w) ~: set ?p; (?v, ?w) ~: set ?p |]
      ==> co_path (?u, ?v) ?w (sd_path (?u, ?v) ?w ?p) = ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)),
                  template_app (template_hole 3, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 0),
                      template_var 2)),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 0)),
             template_var 2),
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 0)),
               template_var 2),
             template_var 1)),
         template_var 1))),
    ("Pair_Digraph.co_path_simps",
     "[| ?e1.0 = (snd ?e, ?w); ?e2.0 = (?w, fst ?e) |]
      ==> co_path ?e ?w (?e1.0 # ?e2.0 # ?es) =
          (snd ?e, fst ?e) # co_path ?e ?w ?es",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 3)),
            template_var 2)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_app (template_hole 3, template_var 3)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 3)),
               template_app (template_hole 3, template_var 3))),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Pair_Digraph.arcs_subdivide",
     "parcs (subdivide ?G (?u, ?v) ?w) =
      parcs ?G - {(?u, ?v), (?v, ?u)} Un
      {(?u, ?w), (?w, ?u), (?w, ?v), (?v, ?w)}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 6, template_var 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2)),
                 template_hole 0)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)),
                 template_hole 0))))))),
    ("Pair_Digraph.co_path_simps",
     "[| ?e1.0 ~= (fst ?e, ?w) | ?e2.0 ~= (?w, snd ?e);
         ?e1.0 ~= (snd ?e, ?w) | ?e2.0 ~= (?w, fst ?e) |]
      ==> co_path ?e ?w (?e1.0 # ?e2.0 # ?es) =
          ?e1.0 # co_path ?e ?w (?e2.0 # ?es)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 4, template_var 3)),
                      template_var 2)))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_app (template_hole 3, template_var 3)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app (template_hole 3, template_var 3)),
                      template_var 2)))),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_app (template_hole 4, template_var 3)))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Pair_Digraph.sd_path_induct",
     "[| ?P ?e [];
         !!e' es.
            [| e' ~= ?e; e' ~= (snd ?e, fst ?e); ?P ?e es |]
            ==> ?P ?e (e' # es);
         !!es. ?P ?e es ==> ?P ?e (?e # es);
         !!es. [| fst ?e ~= snd ?e; ?P ?e es |]
               ==> ?P ?e ((snd ?e, fst ?e) # es) |]
      ==> ?P ?e ?es",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1),
              template_hole 9)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Pair_Digraph.co_path_induct",
     "[| ?P ?e ?w []; !!e'. ?P ?e ?w [e'];
         !!e1 e2 es.
            [| e1 = (fst ?e, ?w) & e2 = (?w, snd ?e); ?P ?e ?w es |]
            ==> ?P ?e ?w (e1 # e2 # es);
         !!e1 e2 es.
            [| ~ (e1 = (fst ?e, ?w) & e2 = (?w, snd ?e)) &
               e1 = (snd ?e, ?w) & e2 = (?w, fst ?e);
               ?P ?e ?w es |]
            ==> ?P ?e ?w (e1 # e2 # es);
         !!e1 e2 es.
            [| ~ (e1 = (fst ?e, ?w) & e2 = (?w, snd ?e));
               ~ (e1 = (snd ?e, ?w) & e2 = (?w, fst ?e));
               ?P ?e ?w (e2 # es) |]
            ==> ?P ?e ?w (e1 # e2 # es) |]
      ==> ?P ?e ?w ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_var 3, template_var 2),
                template_var 1),
              template_hole 9)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 3, template_var 2),
               template_var 1),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Pair_DigraphMoreTemplates"
### 0.461s elapsed time, 0.665s cpu time, 0.078s GC time
val it = (): unit
