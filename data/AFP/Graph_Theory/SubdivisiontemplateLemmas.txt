   [("Subdivision.arc_to_ends_with_proj", "arc_to_ends (with_proj ?G) = id",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Subdivision.bidirected_digraphI_pair_sd",
     "??.Subdivision.pair_sd ?G ?H ==> pair_bidirected_digraph ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Subdivision.subdivision_base",
     "bidirected_digraph ?G ?rev_G ==>
      subdivision (?G, ?rev_G) (?G, ?rev_G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Subdivision.subdivision_bidir",
     "subdivision (?G, ?rev_G) (?H, ?rev_H) ==>
      bidirected_digraph ?H ?rev_H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Subdivision.subdivision_compatible",
     "subdivision (?G, ?rev_G) (?H, ?rev_H) ==> compatible ?G ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 1)
           ))),
    ("Subdivision.subdivision_pair_conv",
     "??.Subdivision.pair_sd ?G ?H = subdivision_pair ?G ?H",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Subdivision.subdivision_pair_base",
     "pair_bidirected_digraph ?G ==> subdivision_pair ?G ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Subdivision.bidirected_digraphI_subdivision",
     "subdivision_pair ?G ?H ==> pair_bidirected_digraph ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 1)),
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)))),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 0)),
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 0))))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Subdivision.subdivision_with_projI",
     "??.Subdivision.pair_sd ?G ?H ==> subdivision_pair ?G ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Subdivision.subdivision_with_projD",
     "subdivision_pair ?G ?H ==> ??.Subdivision.pair_sd ?G ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 1)),
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)))),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 0)),
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Subdivision.subdivision_verts_subset",
     "[| subdivision (?G, ?rev_G) (?H, ?rev_H); ?x : verts ?G |]
      ==> ?x : verts ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Subdivision.subdivision_choose_rev",
     "[| subdivision (?G, ?rev_G) (?H, ?rev_H);
         bidirected_digraph ?H ?rev_H' |]
      ==> EX rev_G'. subdivision (?G, rev_G') (?H, ?rev_H')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Subdivision.subdivision_trans",
     "[| subdivision (?G, ?rev_G) (?H, ?rev_H);
         subdivision (?H, ?rev_H) (?I, ?rev_I) |]
      ==> subdivision (?G, ?rev_G) (?I, ?rev_I)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Subdivision.subdivision_step_rev",
     "[| subdivision_step ?G ?rev_G ?H ?rev_H (?u, ?v, ?w) (?uv, ?uw, ?vw);
         subdivision (?H, ?rev_H) (?I, ?rev_I) |]
      ==> subdivision (?G, ?rev_G) (?I, ?rev_I)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 6, template_var 11),
                      template_var 10),
                    template_var 9),
                  template_var 8),
                template_app
                 (template_app (template_hole 5, template_var 7),
                  template_app
                   (template_app (template_hole 4, template_var 6),
                    template_var 5))),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 9),
                  template_var 8)),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 11),
                 template_var 10)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Subdivision.subdivision_pair_divide",
     "[| ?e : parcs ?H; ?w ~: pverts ?H; subdivision_pair ?G ?H |]
      ==> subdivision_pair ?G (subdivide ?H ?e ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app (template_hole 8, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app (template_hole 5, template_var 2))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 0)),
                  template_app
                   (template_hole 1,
                    template_app (template_hole 8, template_var 0)))),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 2)),
                template_app
                 (template_hole 1,
                  template_app (template_hole 8, template_var 2))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 8, template_var 0)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 3),
                     template_var 1))),
               template_app
                (template_hole 1,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 3),
                     template_var 1)))))
           ))),
    ("Subdivision.subdivision_pair_simps",
     "subdivision_pair ?G ?a =
      (?a = ?G & pair_bidirected_digraph ?G |
       (EX e w H.
           ?a = subdivide H e w &
           e : parcs H & w ~: pverts H & subdivision_pair ?G H))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_var 1)),
                  template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_var 1)))),
              template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_var 0)),
                template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 0),
                     template_var 1)),
                 template_app (template_hole 8, template_var 1))),
             template_app (template_hole 7, t_empty))
           ))),
    ("Subdivision.subdivision_pair_induct",
     "[| subdivision_pair ?G ?x; pair_bidirected_digraph ?G ==> ?P ?G;
         !!e w H.
            [| e : parcs H; w ~: pverts H; subdivision_pair ?G H; ?P H |]
            ==> ?P (subdivide H e w) |]
      ==> ?P ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 2)),
                  template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 2)))),
              template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 1)),
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 1))))
            ),
        template_implication
         ([template_predicate
            (template_app (template_hole 8, template_var 2))],
          template_predicate
           (template_app (template_var 0, template_var 2))),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Subdivision.subdivision_pair_cases",
     "[| subdivision_pair ?G ?a;
         [| ?a = ?G; pair_bidirected_digraph ?G |] ==> ?P;
         !!e w H.
            [| ?a = subdivide H e w; e : parcs H; w ~: pverts H;
               subdivision_pair ?G H |]
            ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app (template_hole 12, template_var 2)),
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 2)))),
              template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 1)),
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 1))))
            ),
        template_implication
         ([template_equation (template_var 1, template_var 2)],
          template_implication
           ([template_predicate
              (template_app (template_hole 8, template_var 2))],
            template_predicate (template_var 0))),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Subdivision.subdivision_induct",
     "[| subdivision (?G, ?rev_G) (?H, ?rev_H);
         bidirected_digraph ?G ?rev_G ==> ?P ?G ?rev_G;
         !!I rev_I H rev_H u v w uv uw vw.
            [| subdivision (?G, ?rev_G) (I, rev_I); ?P I rev_I;
               subdivision_step I rev_I H rev_H (u, v, w) (uv, uw, vw) |]
            ==> ?P H rev_H |]
      ==> ?P ?H ?rev_H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 9, template_var 4),
                 template_var 3)
               )],
          template_predicate
           (
              template_app
               (template_app (template_var 0, template_var 4),
                template_var 3)
              )),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           )))]
