Loading theory "HOL-Library.FuncSet" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary")
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary" via "HOL-Combinatorics.Orbits" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Library.Cancellation" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary" via "HOL-Combinatorics.Orbits" via "HOL-Combinatorics.Permutations" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Combinatorics.Transposition"
### 0.140s elapsed time, 0.581s cpu time, 0.040s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.141s elapsed time, 0.584s cpu time, 0.040s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Set_Algebras"
### 0.228s elapsed time, 0.898s cpu time, 0.082s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.FuncSet"
### 0.381s elapsed time, 1.537s cpu time, 0.123s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary" via "HOL-Combinatorics.Orbits" via "HOL-Combinatorics.Permutations")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Nat_Bijection"
### 0.323s elapsed time, 1.268s cpu time, 0.169s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.509s elapsed time, 2.037s cpu time, 0.210s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary" via "HOL-Combinatorics.Orbits" via "HOL-Combinatorics.Permutations")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Disjoint_Sets"
### 0.304s elapsed time, 1.187s cpu time, 0.203s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.107s elapsed time, 4.224s cpu time, 0.883s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
### theory "HOL-Library.BigO"
### 1.057s elapsed time, 3.863s cpu time, 0.834s GC time
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Tree"
### 2.080s elapsed time, 6.618s cpu time, 1.203s GC time
Loading theory "Draft.Templates" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.ExtrEqs")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AuxiliaryMoreTemplates")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.537s elapsed time, 1.124s cpu time, 0.125s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.118s elapsed time, 7.867s cpu time, 1.338s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary" via "HOL-Combinatorics.Orbits")
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 0.629s elapsed time, 0.785s cpu time, 0.136s GC time
Loading theory "HOL-Combinatorics.Orbits" (required by "Draft.AuxiliaryMoreTemplates" via "Draft.Auxiliary")
Proofs for inductive predicate(s) "orbitp"
  Proving monotonicity ...
### theory "HOL-Combinatorics.Orbits"
### 0.473s elapsed time, 1.119s cpu time, 0.911s GC time
Loading theory "Draft.Auxiliary" (required by "Draft.AuxiliaryMoreTemplates")
Proofs for inductive predicate(s) "segmentp"
  Proving monotonicity ...
### theory "Draft.Auxiliary"
### 0.157s elapsed time, 0.182s cpu time, 0.036s GC time
Loading theory "Draft.AuxiliaryMoreTemplates"
val templateLemmas =
   [("Auxiliary.not_in_segment2", "?y ~: segment ?f ?x ?y",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2))
             )
         )),
    ("Auxiliary.segment1_empty", "segment ?f ?x (?f ?x) = {}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_var 1, template_var 0)),
       template_hole 0)),
    ("Auxiliary.iterate_length", "length (iterate ?m ?n ?f ?x) = ?n - ?m",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 3))),
    ("Auxiliary.iterate_empty", "(iterate ?n ?m ?f ?x = []) = (?m <= ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 3))),
    ("Auxiliary.segmentp_segment_eq",
     "segmentp ?f ?a ?b = (%x. x : segment ?f ?a ?b)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       t_empty)),
    ("Auxiliary.permutes_conv_has_dom",
     "(?f permutes ?S) = (bij ?f & has_dom ?f ?S)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Auxiliary.not_in_segment2D", "?x : segment ?f ?a ?b ==> ?x ~= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_negation
        (template_equation (template_var 3, template_var 0)))),
    ("Auxiliary.segmentD_orbit",
     "?x : segment ?f ?y ?z ==> ?x : orbit ?f ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Auxiliary.iterate_applied",
     "iterate ?n ?m ?f (?f ?x) = iterate (Suc ?n) (Suc ?m) ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_var 1, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Auxiliary.not_in_segment1",
     "?y : orbit ?f ?x ==> ?x ~: segment ?f ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 2))
               )
           ))),
    ("Auxiliary.has_domD", "[| has_dom ?f ?S; ?x ~: ?S |] ==> ?f ?x = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 1)
                )
            )],
       template_equation
        (template_app (template_var 2, template_var 0), template_var 0))),
    ("Auxiliary.set_iterate",
     "set (iterate ?m ?n ?f ?x) = (%k. (?f ^^ k) ?x) ` {?m..<?n}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 2)))),
    ("Auxiliary.segment_x_x_eq",
     "permutation ?f ==> segment ?f ?x ?x = orbit ?f ?x - {?x}",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Auxiliary.has_domI", "(!!x. x ~: ?S ==> ?f x = x) ==> has_dom ?f ?S",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Auxiliary.segment_step_2D",
     "?x : segment ?f ?a (?f ?b) ==> ?x : segment ?f ?a ?b | ?x = ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_app (template_var 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Auxiliary.in_orbit_invI",
     "[| ?b : orbit ?f ?a; inj ?f |] ==> ?a : orbit (inv ?f) ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_hole 1),
                   template_var 1)),
               template_var 2))
           ))),
    ("Auxiliary.iterate_nth",
     "?k < ?n - ?m ==> iterate ?m ?n ?f ?x ! ?k = (?f ^^ (?m + ?k)) ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app
           (template_app (template_hole 5, template_var 3),
            template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 4)),
             template_var 1),
           template_var 0)))),
    ("Auxiliary.segment_subset",
     "[| ?y : segment ?f ?x ?z; ?w : segment ?f ?x ?y |]
      ==> ?w : segment ?f ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1))
           ))),
    ("Auxiliary.segment_disj",
     "[| ?a ~= ?b; bij ?f |]
      ==> segment ?f ?a ?b Int segment ?f ?b ?a = {}",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_var 2)),
         template_hole 0))),
    ("Auxiliary.segment_altdef",
     "?b : orbit ?f ?a ==>
      segment ?f ?a ?b = (%n. (?f ^^ n) ?a) ` {1..<funpow_dist1 ?f ?a ?b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app (template_var 1, template_var 0)),
                 template_var 2))))))),
    ("Auxiliary.segment_split",
     "?y : segment ?f ?x ?z ==>
      segment ?f ?x ?z = segment ?f ?x ?y Un {?y} Un segment ?f ?y ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 4, template_var 2),
                     template_var 1),
                   template_var 3)),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_hole 0))),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 3),
             template_var 0))))),
    ("Auxiliary.segment_step_2",
     "[| ?x : segment ?f ?a ?b; ?b ~= ?a; inj ?f |]
      ==> ?x : segment ?f ?a (?f ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_negation
         (template_equation (template_var 0, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_app (template_var 2, template_var 0)))
           ))),
    ("Auxiliary.funpow_invs",
     "[| ?m <= ?n; !!x. ?f (?g x) = x |]
      ==> (?f ^^ ?m) ((?g ^^ ?n) ?x) = (?g ^^ (?n - ?m)) ?x",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 4)),
             template_var 1),
           template_var 0)))),
    ("Auxiliary.inv_end_in_segment",
     "[| ?b : orbit ?f ?a; ?f ?a ~= ?b; bij ?f |]
      ==> inv ?f ?b : segment ?f ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0), template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 2),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 2),
                   template_var 1),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Auxiliary.in_segmentD_inv",
     "[| ?x : segment ?f ?a ?b; ?x ~= ?f ?a; inj ?f |]
      ==> inv ?f ?x : segment ?f ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_var 3, template_app (template_var 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app (template_hole 0, template_hole 1),
                   template_var 2),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Auxiliary.cyclic_split_segment",
     "[| cyclic_on ?f ?S; ?a : ?S; ?b : ?S; ?a ~= ?b |]
      ==> ?S = {?a, ?b} Un segment ?f ?a ?b Un segment ?f ?b ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 1))),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0),
             template_var 1))))),
    ("Auxiliary.segment_overlapping",
     "[| ?x : orbit ?f ?a; ?x : orbit ?f ?b; bij ?f |]
      ==> segment ?f ?a ?x <= segment ?f ?b ?x |
          segment ?f ?b ?x <= segment ?f ?a ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_hole 3),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0),
                   template_var 3)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 3)))
           ))),
    ("Auxiliary.in_segmentE",
     "[| ?y : segment ?f ?x ?z; ?z : orbit ?f ?x;
         [| (?f ^^ funpow_dist1 ?f ?x ?y) ?x = ?y;
            funpow_dist1 ?f ?x ?y < funpow_dist1 ?f ?x ?z |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2))
            ),
        template_implication
         ([template_equation
            (template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 3),
                         template_app (template_var 3, template_var 2)),
                       template_var 4))),
                 template_var 3),
               template_var 2),
             template_var 4)],
          template_implication
           ([template_inequation
              (less_than,
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_app (template_var 3, template_var 2)),
                   template_var 4)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_app (template_var 3, template_var 2)),
                   template_var 1)))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.AuxiliaryMoreTemplates"
### 0.400s elapsed time, 0.617s cpu time, 0.071s GC time
val it = (): unit
