Loading theory "Draft.Rtrancl_On" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.Arc_Walk" via "Draft.Digraph")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
Proofs for inductive predicate(s) "rtrancl_onp"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
  Proving monotonicity ...
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.591s cpu time, 0.036s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
### theory "Draft.Rtrancl_On"
### 0.164s elapsed time, 0.671s cpu time, 0.036s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  enumerate :: "'a set => nat => 'a"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.304s elapsed time, 1.206s cpu time, 0.114s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.369s elapsed time, 1.470s cpu time, 0.114s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.818s cpu time, 0.078s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.440s elapsed time, 1.731s cpu time, 0.168s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.020s elapsed time, 3.874s cpu time, 0.877s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
### theory "HOL-Library.Stream"
### 1.122s elapsed time, 4.267s cpu time, 0.926s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Liminf_Limsup"
### 0.532s elapsed time, 1.713s cpu time, 0.178s GC time
### theory "HOL-Library.Countable"
### 1.378s elapsed time, 4.854s cpu time, 0.965s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.384s elapsed time, 0.823s cpu time, 0.123s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
### theory "HOL-Library.Tree"
### 2.069s elapsed time, 6.840s cpu time, 1.178s GC time
Loading theory "Draft.Templates" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.129s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Arc_WalkMoreTemplates")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.535s elapsed time, 1.124s cpu time, 0.118s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.509s elapsed time, 2.229s cpu time, 0.166s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.391s elapsed time, 0.438s cpu time, 0.041s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.472s elapsed time, 0.518s cpu time, 0.063s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff")
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
### theory "HOL-Library.Extended_Real"
### 2.165s elapsed time, 2.931s cpu time, 1.077s GC time
Loading theory "Draft.Stuff" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.Arc_Walk" via "Draft.Digraph")
### theory "Draft.Stuff"
### 0.105s elapsed time, 0.420s cpu time, 0.060s GC time
Loading theory "Draft.Digraph" (required by "Draft.Arc_WalkMoreTemplates" via "Draft.Arc_Walk")
"- \<infinity>"
  :: "ereal"
"True"
  :: "bool"
"True"
  :: "bool"
"\<infinity>"
  :: "ereal"
"ereal (13 / 4)"
  :: "ereal"
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale fin_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "fin_digraph G"
locale loopfree_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "loopfree_digraph G"
locale nomulti_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "nomulti_digraph G"
locale sym_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "sym_digraph G"
locale digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "digraph G"
locale pseudo_graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "pseudo_graph G"
locale graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "graph G"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale fin_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "fin_digraph G"
### theory "Draft.Digraph"
### 1.225s elapsed time, 2.469s cpu time, 1.084s GC time
Loading theory "Draft.Arc_Walk" (required by "Draft.Arc_WalkMoreTemplates")
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
consts
  awalk_verts :: "'a => 'b list => 'a list"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
Found termination order: "{}"
### theory "Draft.Arc_Walk"
### 0.841s elapsed time, 0.933s cpu time, 0.125s GC time
Loading theory "Draft.Arc_WalkMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Arc_WalkMoreTemplates"
### 0.396s elapsed time, 0.559s cpu time, 0.087s GC time
val it = (): unit
