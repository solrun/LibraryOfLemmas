Loading theory "Draft.Rtrancl_On" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.Vertex_Walk" via "Draft.Arc_Walk" via "Draft.Digraph")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.Vertex_Walk" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
Proofs for inductive predicate(s) "rtrancl_onp"
  Proving monotonicity ...
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.602s cpu time, 0.035s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.Vertex_Walk" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
### theory "Draft.Rtrancl_On"
### 0.153s elapsed time, 0.633s cpu time, 0.035s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.Nat_Bijection"
### 0.326s elapsed time, 1.312s cpu time, 0.105s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Infinite_Set"
### 0.368s elapsed time, 1.464s cpu time, 0.105s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.232s elapsed time, 0.913s cpu time, 0.070s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.415s elapsed time, 1.629s cpu time, 0.164s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.Vertex_Walk" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
### Additional type variable(s) in locale specification "countable": 'a
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
### theory "HOL-Library.Stream"
### 1.057s elapsed time, 4.033s cpu time, 0.848s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.Vertex_Walk" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real")
### theory "HOL-Library.BigO"
### 1.013s elapsed time, 3.858s cpu time, 0.848s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.307s elapsed time, 4.637s cpu time, 0.946s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.Vertex_Walk" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
### theory "HOL-Library.Liminf_Limsup"
### 0.506s elapsed time, 1.583s cpu time, 0.191s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Countable_Set"
### 0.376s elapsed time, 0.816s cpu time, 0.073s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.Vertex_Walk" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.043s elapsed time, 6.570s cpu time, 1.170s GC time
Loading theory "Draft.Templates" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.171s cpu time, 0.045s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Vertex_WalkMoreTemplates")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.516s elapsed time, 1.059s cpu time, 0.052s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.533s elapsed time, 2.403s cpu time, 0.204s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.Vertex_Walk" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.401s elapsed time, 0.460s cpu time, 0.043s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.Vertex_Walk" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff" via "HOL-Library.Extended_Real")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.469s elapsed time, 0.516s cpu time, 0.063s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.Vertex_Walk" via "Draft.Arc_Walk" via "Draft.Digraph" via "Draft.Stuff")
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
### theory "HOL-Library.Extended_Real"
### 2.176s elapsed time, 2.955s cpu time, 1.093s GC time
Loading theory "Draft.Stuff" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.Vertex_Walk" via "Draft.Arc_Walk" via "Draft.Digraph")
### theory "Draft.Stuff"
### 0.070s elapsed time, 0.274s cpu time, 0.000s GC time
Loading theory "Draft.Digraph" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.Vertex_Walk" via "Draft.Arc_Walk")
"- \<infinity>"
  :: "ereal"
"True"
  :: "bool"
"\<infinity>"
  :: "ereal"
"True"
  :: "bool"
"ereal (13 / 4)"
  :: "ereal"
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale fin_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "fin_digraph G"
locale loopfree_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "loopfree_digraph G"
locale nomulti_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "nomulti_digraph G"
locale sym_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "sym_digraph G"
locale digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "digraph G"
locale pseudo_graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "pseudo_graph G"
locale graph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "graph G"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
locale fin_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "fin_digraph G"
### theory "Draft.Digraph"
### 1.207s elapsed time, 2.485s cpu time, 1.098s GC time
Loading theory "Draft.Arc_Walk" (required by "Draft.Vertex_WalkMoreTemplates" via "Draft.Vertex_Walk")
locale pre_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
consts
  awalk_verts :: "'a => 'b list => 'a list"
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
locale wf_digraph
  fixes G :: "('a, 'b) pre_digraph"  (structure)
  assumes "wf_digraph G"
Found termination order: "{}"
### theory "Draft.Arc_Walk"
### 0.800s elapsed time, 0.871s cpu time, 0.096s GC time
Loading theory "Draft.Vertex_Walk" (required by "Draft.Vertex_WalkMoreTemplates")
Found termination order: "length <*mlex*> {}"
### theory "Draft.Vertex_Walk"
### 0.397s elapsed time, 0.450s cpu time, 0.071s GC time
Loading theory "Draft.Vertex_WalkMoreTemplates"
val templateLemmas =
   [("Vertex_Walk.joinable_Nil_l_iff", "joinable [] ?p = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Vertex_Walk.joinable_Nil_r_iff", "joinable ?q [] = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Vertex_Walk.vwalk_join_Nil", "?p \<oplus> [] = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Vertex_Walk.vwalk_to_vpath_last",
     "last (vwalk_to_vpath ?xs) = last ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Vertex_Walk.vwalk_to_vpath_hd", "hd (vwalk_to_vpath ?xs) = hd ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Vertex_Walk.vwalk_length_simp", "vwalk_length ?p = length ?p - 1",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Vertex_Walk.vwalk_arcs_butlast",
     "vwalk_arcs (butlast ?xs) = butlast (vwalk_arcs ?xs)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Vertex_Walk.vwalk_arcs_tl",
     "vwalk_arcs (tl ?xs) = tl (vwalk_arcs ?xs)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Vertex_Walk.set_vwalk_arcs_append1",
     "set (vwalk_arcs ?p) <= set (vwalk_arcs (?p @ ?q))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 1)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Vertex_Walk.set_vwalk_arcs_cons",
     "set (vwalk_arcs ?p) <= set (vwalk_arcs (?u # ?p))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 1)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Vertex_Walk.set_vwalk_arcs_append2",
     "set (vwalk_arcs ?q) <= set (vwalk_arcs (?p @ ?q))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 1)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Vertex_Walk.joinable_non_Nil", "joinable ?p ?q ==> ?p ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("Vertex_Walk.joinable_non_Nil", "joinable ?p ?q ==> ?q ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Vertex_Walk.vwalk_to_vpath_vpath",
     "vwalk ?p ?G ==> vpath (vwalk_to_vpath ?p) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Vertex_Walk.vwalk_singleton", "vwalk [?u] ?G = (?u : verts ?G)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 2)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Vertex_Walk.vwalk_to_vpath_nonempty",
     "?p ~= [] ==> vwalk_to_vpath ?p ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("Vertex_Walk.vwalk_arcs_tl_empty",
     "vwalk_arcs ?xs = [] ==> vwalk_arcs (tl ?xs) = []",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 0), template_hole 1)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 0)),
         template_hole 1))),
    ("Vertex_Walk.vpath_self", "?u : verts ?G ==> vpath [?u] ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_var 0)
           ))),
    ("Vertex_Walk.vwalk_to_vpath_subset",
     "?x : set (vwalk_to_vpath ?xs) ==> ?x : set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Vertex_Walk.vwalk_arcs_set_nil",
     "?x : set (vwalk_arcs ?p) ==> ?p ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Vertex_Walk.vwalk_join_last",
     "joinable ?p ?q ==> last (?p \<oplus> ?q) = last ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Vertex_Walk.vwalk_join_hd",
     "joinable ?p ?q ==> hd (?p \<oplus> ?q) = hd ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("Vertex_Walk.vwalk_join_non_Nil", "?p ~= [] ==> ?p \<oplus> ?q ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 1)
           ))),
    ("Vertex_Walk.vpathI", "[| vwalk ?p ?G; distinct ?p |] ==> vpath ?p ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Vertex_Walk.vwalk_join_hd'",
     "?p ~= [] ==> hd (?p \<oplus> ?q) = hd ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("Vertex_Walk.vwalk_rev_ex",
     "[| symmetric ?G; vwalk ?p ?G |] ==> vwalk (rev ?p) ?G",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Vertex_Walk.joinable_vwalk_join_l_iff",
     "joinable ?p ?q ==> joinable (?p \<oplus> ?q) ?r = joinable ?q ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Vertex_Walk.vwalk_join_vwalk_length",
     "joinable ?p ?q ==>
      vwalk_length (?p \<oplus> ?q) = vwalk_length ?p + vwalk_length ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Vertex_Walk.vwalk_join_arcs",
     "joinable ?p ?q ==>
      vwalk_arcs (?p \<oplus> ?q) = vwalk_arcs ?p @ vwalk_arcs ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Vertex_Walk.joinable_Cons_l_iff",
     "?p ~= [] ==> joinable (?v # ?p) ?q = joinable ?p ?q",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Vertex_Walk.arcs_in_vwalk_arcs",
     "?u : set (vwalk_arcs ?p) ==> ?u : set ?p \<times> set ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               t_empty))
           ))),
    ("Vertex_Walk.vwalkI_vwalk_join_r",
     "[| joinable ?p ?q; vwalk (?p \<oplus> ?q) ?G |] ==> vwalk ?q ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("Vertex_Walk.vwalk_verts_in_verts",
     "[| vwalk ?p ?G; ?u : set ?p |] ==> ?u : verts ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Vertex_Walk.set_vwalk_arcs_rev",
     "set (vwalk_arcs (rev ?p)) = {(v, u). (u, v) : set (vwalk_arcs ?p)}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_var 0))),
       template_app
        (template_hole 3, template_app (template_hole 2, t_empty)))),
    ("Vertex_Walk.vwalk_to_vpath_cons",
     "?x ~: set ?xs ==>
      vwalk_to_vpath (?x # ?xs) = ?x # vwalk_to_vpath ?xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("Vertex_Walk.vwalkI_append_l",
     "[| ?p ~= []; vwalk (?p @ ?q) ?G |] ==> vwalk ?p ?G",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Vertex_Walk.vwalkI_vwalk_join_l",
     "[| ?p ~= []; vwalk (?p \<oplus> ?q) ?G |] ==> vwalk ?p ?G",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Vertex_Walk.vwalkI_append_r",
     "[| ?q ~= []; vwalk (?p @ ?q) ?G |] ==> vwalk ?q ?G",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Vertex_Walk.vwalk_join_Cons",
     "?p ~= [] ==> (?u # ?p) \<oplus> ?q = ?u # ?p \<oplus> ?q",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Vertex_Walk.joinable_Snoc_r_iff",
     "?q ~= [] ==> joinable ?p (?q @ [?v]) = joinable ?p ?q",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 4))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 2)))),
    ("Vertex_Walk.vwalk_arcs_butlast_empty",
     "[| ?xs ~= []; vwalk_arcs ?xs = [] |]
      ==> vwalk_arcs (butlast ?xs) = []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_equation
         (template_app (template_hole 2, template_var 0), template_hole 1)],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 0)),
         template_hole 1))),
    ("Vertex_Walk.joinable_vwalk_join_r_iff",
     "joinable ?p (?q \<oplus> ?r) =
      (joinable ?p ?q | ?q = [] & joinable ?p (tl ?r))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Vertex_Walk.vwalk_arcs_Cons",
     "?p ~= [] ==> vwalk_arcs (?u # ?p) = (?u, hd ?p) # vwalk_arcs ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1))),
           template_app (template_hole 4, template_var 1))))),
    ("Vertex_Walk.vpathE",
     "[| vpath ?p ?G; [| vwalk ?p ?G; distinct ?p |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (template_app (template_hole 0, template_var 2))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Vertex_Walk.joinable_cyclic_omit",
     "[| joinable ?p ?q; joinable ?q ?r; joinable ?q ?q |]
      ==> joinable ?p ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Vertex_Walk.vwalk_join_arcs1",
     "[| set (vwalk_arcs ?p) <= ?E; ?p = ?q \<oplus> ?r |]
      ==> set (vwalk_arcs ?q) <= ?E",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 3)),
          template_var 2),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 2))),
    ("Vertex_Walk.in_set_vwalk_arcs_append1",
     "?x : set (vwalk_arcs ?p) | ?x : set (vwalk_arcs ?q) ==>
      ?x : set (vwalk_arcs (?p @ ?q))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)))),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))))
           ))),
    ("Vertex_Walk.vwalk_joinI_vwalk",
     "[| vwalk ?p ?G; vwalk ?q ?G; joinable ?p ?q |]
      ==> vwalk (?p \<oplus> ?q) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Vertex_Walk.vwalk_join_assoc",
     "[| joinable ?p ?q; joinable ?q ?r |]
      ==> (?p \<oplus> ?q) \<oplus> ?r = ?p \<oplus> ?q \<oplus> ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Vertex_Walk.set_vwalk_arcs_snoc",
     "?p ~= [] ==>
      set (vwalk_arcs (?p @ [?a])) =
      insert (last ?p, ?a) (set (vwalk_arcs ?p))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 8)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0)),
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)))))),
    ("Vertex_Walk.vwalk_joinI_vwalk'",
     "[| vwalk ?p ?G; vwalk ?q ?G; last ?p = hd ?q |]
      ==> vwalk (?p \<oplus> ?q) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Vertex_Walk.joinableI",
     "[| last ?p = hd ?q; ?p ~= []; ?q ~= [] |] ==> joinable ?p ?q",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 1)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Vertex_Walk.vwalk_join_assoc'",
     "[| ?p ~= []; ?q ~= [] |]
      ==> (?p \<oplus> ?q) \<oplus> ?r = ?p \<oplus> ?q \<oplus> ?r",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 1)),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Vertex_Walk.vwalkI",
     "[| set ?p <= verts ?G; set (vwalk_arcs ?p) <= arcs_ends ?G;
         ?p ~= [] |]
      ==> vwalk ?p ?G",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 0)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 1)),
          template_app (template_hole 4, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Vertex_Walk.vwalk_join_arcs2",
     "[| set (vwalk_arcs ?p) <= ?E; joinable ?q ?r; ?p = ?q \<oplus> ?r |]
      ==> set (vwalk_arcs ?r) <= ?E",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 3)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_var 2))),
    ("Vertex_Walk.in_set_vwalk_arcsE",
     "[| (?u, ?v) : set (vwalk_arcs ?p);
         [| ?u : set ?p; ?v : set ?p |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_app (template_hole 0, template_var 1))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, template_var 1))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Vertex_Walk.vwalk_consI",
     "[| vwalk ?p ?G; ?a : verts ?G;
         ?a \<rightarrow>\<^bsub>?G\<^esub> hd ?p |]
      ==> vwalk (?a # ?p) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app (template_hole 2, template_var 2))),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Vertex_Walk.vwalk_arcs_append",
     "[| ?p ~= []; ?q ~= [] |]
      ==> vwalk_arcs (?p @ ?q) =
          vwalk_arcs ?p @ (last ?p, hd ?q) # vwalk_arcs ?q",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 6, template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_app (template_hole 0, template_var 0))),
             template_app (template_hole 6, template_var 0)))))),
    ("Vertex_Walk.vwalkE",
     "[| vwalk ?p ?G;
         [| set ?p <= verts ?G;
            set (vwalk_arcs ?p) <= arcs_ends ?G & ?p ~= [] |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_inequation
            (less_equals, template_app (template_hole 9, template_var 2),
             template_app (template_hole 8, template_var 1))],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5,
                           template_app (template_hole 4, template_var 2))),
                       template_app (template_hole 3, template_var 1))),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_hole 0)))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Vertex_Walk.vwalk_consE",
     "[| vwalk (?a # ?p) ?G; ?p ~= [];
         [| ?a \<rightarrow>\<^bsub>?G\<^esub> hd ?p; vwalk ?p ?G |]
         ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_app (template_hole 1, template_var 2))),
                 template_app (template_hole 0, template_var 1))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Vertex_Walk.vwalk_imp_ex_vpath",
     "[| vwalk ?p ?G; hd ?p = ?u; last ?p = ?v |]
      ==> EX q. vpath q ?G & hd q = ?u & last q = ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 4, template_var 3), template_var 1),
        template_equation
         (template_app (template_hole 3, template_var 3), template_var 0)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Vertex_Walk.vwalk_join_split",
     "?u : set ?p ==>
      EX q r.
         ?p = q \<oplus> r & last q = ?u & hd r = ?u & q ~= [] & r ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app (template_hole 9, template_var 0))
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Vertex_Walk.in_set_vwalk_arcs_append2",
     "[| ?p ~= []; ?q ~= [];
         ?x : set (vwalk_arcs ?p) |
         ?x = (last ?p, hd ?q) | ?x : set (vwalk_arcs ?q) |]
      ==> ?x : set (vwalk_arcs (?p @ ?q))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9)),
        template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 2)))),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app (template_hole 2, template_var 2)),
                      template_app (template_hole 1, template_var 1)))),
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 1)))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))))
           ))),
    ("Vertex_Walk.vwalk_induct",
     "[| vwalk ?p ?G; !!u. u : verts ?G ==> ?P [u];
         !!u v es.
            [| u \<rightarrow>\<^bsub>?G\<^esub> v; ?P (v # es) |]
            ==> ?P (u # v # es) |]
      ==> ?P ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("Vertex_Walk.vwalk_to_vpath_induct3",
     "[| ?P [];
         !!x xs.
            [| x : set xs; ?P (dropWhile (%y. y ~= x) xs) |]
            ==> ?P (x # xs);
         !!x xs. [| x ~: set xs; ?P xs |] ==> ?P (x # xs) |]
      ==> ?P ?xs",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 8)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Vertex_Walk.concat_vpath_is_vpath",
     "[| vwalk ?p ?G; hd ?p = ?u; last ?p = ?v; vwalk ?q ?G; hd ?q = ?v;
         last ?q = ?w |]
      ==> vpath (concat_vpath ?p ?q) ?G &
          hd (concat_vpath ?p ?q) = ?u & last (concat_vpath ?p ?q) = ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app (template_hole 4, template_var 5), template_var 3),
        template_equation
         (template_app (template_hole 3, template_var 5), template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 4)
            ),
        template_equation
         (template_app (template_hole 4, template_var 1), template_var 2),
        template_equation
         (template_app (template_hole 3, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 1)),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 1))),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 1))),
                 template_var 0)))
           ))),
    ("Vertex_Walk.concat_vpath_exists",
     "[| vwalk ?p ?G; hd ?p = ?u; last ?p = ?v; vwalk ?q ?G; hd ?q = ?v;
         last ?q = ?w;
         !!r. [| vpath r ?G; hd r = ?u; last r = ?w |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 6),
              template_var 5)
            ),
        template_equation
         (template_app (template_hole 3, template_var 6), template_var 4),
        template_equation
         (template_app (template_hole 2, template_var 6), template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 5)
            ),
        template_equation
         (template_app (template_hole 3, template_var 2), template_var 3),
        template_equation
         (template_app (template_hole 2, template_var 2), template_var 1),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Vertex_WalkMoreTemplates"
### 0.396s elapsed time, 0.553s cpu time, 0.063s GC time
val it = (): unit
