   [("Pair_Digraph.cas_with_proj_eq",
     "pre_digraph.cas (with_proj ?G) = pcas",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pair_Digraph.awalk_verts_with_proj_eq",
     "pre_digraph.awalk_verts (with_proj ?G) = pawalk_verts",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pair_Digraph.with_proj_simps", "head (with_proj ?G) = snd",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pair_Digraph.with_proj_simps", "tail (with_proj ?G) = fst",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pair_Digraph.rev_path_rev_path", "rev_path (rev_path ?p) = ?p",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Pair_Digraph.with_proj_simps", "verts (with_proj ?G) = pverts ?G",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Pair_Digraph.with_proj_simps", "arcs_ends (with_proj ?G) = parcs ?G",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Pair_Digraph.with_proj_simps", "arcs (with_proj ?G) = parcs ?G",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Pair_Digraph.wf_digraph_wp_iff",
     "wf_digraph (with_proj ?G) = pair_wf_digraph ?G",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Pair_Digraph.rev_path_empty", "(rev_path ?p = []) = (?p = [])",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Pair_Digraph.rev_path_eq", "(rev_path ?p = rev_path ?q) = (?p = ?q)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Pair_Digraph.co_path_nonempty", "(co_path ?e ?w ?p = []) = (?p = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Pair_Digraph.rev_path_append",
     "rev_path (?p @ ?q) = rev_path ?q @ rev_path ?p",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("Pair_Digraph.verts_subdivide",
     "pverts (subdivide ?G ?e ?w) = pverts ?G Un {?w}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Pair_Digraph.arcs_subdivide",
     "parcs (subdivide ?G (?u, ?v) ?w) =
      parcs ?G - {(?u, ?v), (?v, ?u)} Un
      {(?u, ?w), (?w, ?u), (?w, ?v), (?v, ?w)}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 6, template_var 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2)),
                 template_hole 0)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)),
                 template_hole 0)))))))]
