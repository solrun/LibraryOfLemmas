   [("Digraph_Component.pverts_mk_symmetric",
     "pverts (mk_symmetric ?G) = verts ?G",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Digraph_Component.induce_subgraph_verts",
     "verts (?G \<restriction> ?vs) = ?vs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Digraph_Component.induce_subgraph_head",
     "head (?G \<restriction> ?vs) = head ?G",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Digraph_Component.induce_subgraph_tail",
     "tail (?G \<restriction> ?vs) = tail ?G",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Digraph_Component.induce_subgraph_ends",
     "arc_to_ends (?G \<restriction> ?S) = arc_to_ends ?G",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Digraph_Component.head_union",
     "head (Digraph_Component.union ?G ?H) = head ?G",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Digraph_Component.tail_union",
     "tail (Digraph_Component.union ?G ?H) = tail ?G",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Digraph_Component.verts_union",
     "verts (Digraph_Component.union ?G ?H) = verts ?G Un verts ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Digraph_Component.arcs_union",
     "arcs (Digraph_Component.union ?G ?H) = arcs ?G Un arcs ?H",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Digraph_Component.induce_subgraph_arcs",
     "arcs (?G \<restriction> ?vs) =
      {e: arcs ?G. tail ?G e : ?vs & head ?G e : ?vs}",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Digraph_Component.parcs_mk_symmetric",
     "parcs (mk_symmetric ?G) =
      (UN e:arcs ?G. {(tail ?G e, head ?G e), (head ?G e, tail ?G e)})",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, template_var 0)),
       template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Digraph_Component.connected_conv",
     "Digraph_Component.connected ?G =
      (verts ?G ~= {} &
       (ALL u:verts ?G.
           ALL v:verts ?G.
              (u, v) : rtrancl_on (verts ?G) ((arcs_ends ?G)\<^sup>s)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_dunno))]
