Loading theory "Draft.SOS_Misc_Add" (required by "Draft.SM_DatastructuresTemplates" via "Draft.SM_Datastructures")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SM_DatastructuresTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SM_DatastructuresTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.SM_DatastructuresTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
consts
  assert_option :: "bool => unit option"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  find_min_idx :: "('a => bool) => 'a list => nat option"
### theory "Draft.SOS_Misc_Add"
### 0.123s elapsed time, 0.479s cpu time, 0.059s GC time
Loading theory "Draft.SM_Datastructures" (required by "Draft.SM_DatastructuresTemplates")
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.569s cpu time, 0.059s GC time
### theory "HOL-Library.Set_Algebras"
### 0.302s elapsed time, 1.054s cpu time, 0.177s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SM_DatastructuresTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.716s elapsed time, 2.126s cpu time, 0.221s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.026s elapsed time, 5.370s cpu time, 0.987s GC time
Loading theory "Draft.Templates" (required by "Draft.SM_DatastructuresTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.145s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SM_DatastructuresTemplates")
### Cannot skip proof of schematic goal statement
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.541s elapsed time, 1.127s cpu time, 0.114s GC time
Phase "id_op"
0.000s elapsed time, 0.000s cpu time, 0.000s GC time
Phase "id_op"
0.000s elapsed time, 0.000s cpu time, 0.000s GC time
Phase "id_op"
0.001s elapsed time, 0.001s cpu time, 0.000s GC time
Success (Phase "id_op")
Phase "rel_inf"
0.005s elapsed time, 0.005s cpu time, 0.000s GC time
Success (Phase "rel_inf")
Phase "fix_rel"
0.003s elapsed time, 0.003s cpu time, 0.000s GC time
Success (Phase "fix_rel")
Phase "trans"
0.003s elapsed time, 0.003s cpu time, 0.000s GC time
Success (Phase "trans")
consts
  find_min_idx_f :: "('a => 'b option) => 'a list => (nat * 'b) option"
consts
  collect_indexr' ::
    "nat
     => (nat * 'b) set
        => (nat => 'a => 'b set) => 'a list => (nat * 'b) set"
consts
  collecti_index' ::
    "nat
     => (nat * 'b) set
        => (nat => 'a => bool * 'b set) => 'a list => (nat * 'b) set"
consts
  collecti_index'_list ::
    "nat
     => (nat * 'b) list
        => (nat => 'a => bool * 'b list) => 'a list => (nat * 'b) list"
### theory "Draft.SM_Datastructures"
### 3.714s elapsed time, 7.847s cpu time, 1.693s GC time
Loading theory "Draft.SM_DatastructuresTemplates"
val templateLemmas =
   [("SM_Datastructures.set_by_fold", "set ?l = fold insert ?l {}",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("SM_Datastructures.image_Pair_eq_prod_sng",
     "Pair ?x ` ?s = {?x} \<times> ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         t_empty))),
    ("SM_Datastructures.in_dom_map_code",
     "(?x : dom ?m) = (case ?m ?x of None => False | Some a => True)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_app (template_var 0, template_var 1)))),
    ("SM_Datastructures.find_min_idx_f_None_conv",
     "(find_min_idx_f ?f ?l = None) = (ALL a:set ?l. ?f a = None)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_hole 4),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         t_empty))),
    ("SM_Datastructures.find_min_idx_f_SomeD",
     "find_min_idx_f ?f ?l = Some (?i, ?r) ==>
      ?f (?l ! ?i) = Some ?r & ?i < length ?l",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 3), template_var 2),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_var 3,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1))),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("SM_Datastructures.collect_indexr_collect",
     "collect_indexr ?f ?l =
      {(i, x) |i x. i < length ?l & x : ?f i (?l ! i)}",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 12, template_hole 11),
             template_hole 10),
           template_var 1),
         template_var 0),
       template_app (template_hole 9, t_empty))),
    ("SM_Datastructures.find_min_idx_f_SomeD_complete",
     "find_min_idx_f ?f ?l = Some (?i, ?r) ==>
      ?f (?l ! ?i) = Some ?r &
      ?i < length ?l & (ALL j<?i. ?f (?l ! j) = None)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 3),
            template_var 2),
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_var 3,
                     template_app
                      (template_app (template_hole 6, template_var 2),
                       template_var 1))),
                 template_app (template_hole 5, template_var 0))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app (template_hole 3, template_var 2))),
               template_app (template_hole 2, t_empty)))
           ))),
    ("SM_Datastructures.collect_indexr'_collect",
     "collect_indexr' ?i0.0 ?a ?f ?l =
      ?a Un
      {(?i0.0 + i, x) |i x. i < length ?l & x : ?f (?i0.0 + i) (?l ! i)}",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 12, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 11, template_var 2),
         template_app (template_hole 10, t_empty)))),
    ("SM_Datastructures.collecti_index'_list_\<alpha>",
     "(!!i x b l. ?ci i x = (b, l) ==> ?c i x = (b, set l)) ==>
      set (collecti_index'_list ?i0.0 ?ai ?ci ?l) =
      collecti_index' ?i0.0 (set ?ai) ?c ?l",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_app (template_hole 2, template_var 1)),
             template_var 3),
           template_var 0)))),
    ("SM_Datastructures.collecti_index'_list_invar",
     "[| !!i x b l. ?c i x = (b, l) ==> distinct l;
         fst ` set ?a <= {0..<?i0.0}; distinct ?a |]
      ==> distinct (collecti_index'_list ?i0.0 ?a ?c ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app (template_hole 4, template_var 2)),
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 3),
               template_var 0))
           ))),
    ("SM_Datastructures.find_min_idx_f_LEAST_eq",
     "find_min_idx_f ?f ?l =
      (if EX i<length ?l. ?f (?l ! i) ~= None
       then let i = LEAST i. i < length ?l & ?f (?l ! i) ~= None
            in Some (i, the (?f (?l ! i)))
       else None)",
     template_equation
      (template_app
        (template_app (template_hole 15, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 14, template_app (template_hole 13, t_empty)),
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             t_empty)),
         template_hole 0))),
    ("SM_Datastructures.collecti_index_collect",
     "collecti_index ?f ?l =
      (if EX i<length ?l. fst (?f i (?l ! i))
       then let i = LEAST i. i < length ?l & fst (?f i (?l ! i))
            in {i} \<times> snd (?f i (?l ! i))
       else {(i, x) |i x. i < length ?l & x : snd (?f i (?l ! i))})",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 20, template_hole 19),
             template_hole 18),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 17, template_app (template_hole 16, t_empty)),
           template_app
            (template_app
              (template_hole 10, template_app (template_hole 9, t_empty)),
             t_empty)),
         template_app (template_hole 4, t_empty)))),
    ("SM_Datastructures.gen_set",
     "[| GEN_OP ?em {} (\<langle>?R\<rangle>?Rs);
         GEN_OP ?ins insert
          (?R \<rightarrow>
           \<langle>?R\<rangle>?Rs \<rightarrow> \<langle>?R\<rangle>?Rs) |]
      ==> (%li. fold ?ins li ?em, set)
          : \<langle>?R\<rangle>list_rel \<rightarrow>
            \<langle>?R\<rangle>?Rs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 29,
              template_app
               (template_hole 28,
                template_app
                 (template_app
                   (template_hole 27,
                    template_app
                     (template_app (template_hole 26, template_var 3),
                      template_app
                       (template_app
                         (template_hole 25,
                          template_app
                           (template_hole 24, template_hole 23)),
                        template_app
                         (template_hole 22,
                          template_app
                           (template_app (template_hole 21, template_var 2),
                            template_var 1))))),
                  template_app
                   (template_app (template_hole 21, template_var 2),
                    template_var 1))))
            ),
        template_predicate
         (
            template_app
             (template_hole 29,
              template_app
               (template_hole 28,
                template_app
                 (template_app
                   (template_hole 20,
                    template_app
                     (template_app (template_hole 19, template_var 0),
                      template_app
                       (template_app
                         (template_hole 18,
                          template_app
                           (template_hole 17, template_hole 16)),
                        template_app
                         (template_hole 15,
                          template_app
                           (template_app
                             (template_hole 14,
                              template_app
                               (template_app
                                 (template_hole 13, template_hole 12),
                                template_var 1)),
                            template_app
                             (template_app
                               (template_hole 11,
                                template_app
                                 (template_app
                                   (template_hole 10, template_hole 9),
                                  template_app
                                   (template_app
                                     (template_hole 21, template_var 2),
                                    template_var 1))),
                              template_app
                               (template_app
                                 (template_hole 21, template_var 2),
                                template_var 1))))))),
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app (template_hole 13, template_hole 12),
                        template_var 1)),
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_app (template_hole 10, template_hole 9),
                          template_app
                           (template_app (template_hole 21, template_var 2),
                            template_var 1))),
                      template_app
                       (template_app (template_hole 21, template_var 2),
                        template_var 1))))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, t_empty), template_hole 5)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 1))),
               template_app
                (template_app (template_hole 21, template_var 2),
                 template_var 1)))
           ))),
    ("SM_Datastructures.collecti_index'_collect",
     "collecti_index' ?i0.0 ?a0.0 ?f ?l =
      (if EX i<length ?l. fst (?f (?i0.0 + i) (?l ! i))
       then let i = LEAST i. i < length ?l & fst (?f (?i0.0 + i) (?l ! i))
            in {?i0.0 + i} \<times> snd (?f (?i0.0 + i) (?l ! i))
       else ?a0.0 Un
            {(?i0.0 + i, x) |i x.
             i < length ?l & x : snd (?f (?i0.0 + i) (?l ! i))})",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 20, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 19, template_app (template_hole 18, t_empty)),
           template_app
            (template_app
              (template_hole 11, template_app (template_hole 10, t_empty)),
             t_empty)),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 4, t_empty)))))]:
   (string * thm * template) list
### theory "Draft.SM_DatastructuresTemplates"
### 2.329s elapsed time, 2.716s cpu time, 0.213s GC time
val it = (): unit
