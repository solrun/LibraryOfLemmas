Loading theory "Draft.SM_Syntax" (required by "Draft.Type_SystemTemplates" via "Draft.Type_System" via "Draft.Decide_Locality" via "Draft.SM_Semantics" via "Draft.SM_State")
Loading theory "Draft.SOS_Misc_Add" (required by "Draft.Type_SystemTemplates" via "Draft.Type_System" via "Draft.Gen_Scheduler_Refine" via "Draft.Gen_Scheduler")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Type_SystemTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Type_SystemTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  assert_option :: "bool => unit option"
consts
  find_min_idx :: "('a => bool) => 'a list => nat option"
### theory "Draft.SOS_Misc_Add"
### 0.141s elapsed time, 0.557s cpu time, 0.052s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Type_SystemTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Function_Algebras"
### 0.143s elapsed time, 0.564s cpu time, 0.052s GC time
Loading theory "Draft.LTS" (required by "Draft.Type_SystemTemplates" via "Draft.Type_System" via "Draft.Gen_Scheduler_Refine" via "Draft.Gen_Scheduler")
locale LTS
  fixes step :: "'s => 'l => 's => bool"
consts
  path :: "'s => 'l list => 's => bool"
locale asystem
  fixes init :: "'c => bool"
    and astep :: "'c => 'a => 'c => bool"
### theory "HOL-Library.Set_Algebras"
### 0.282s elapsed time, 1.115s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Type_SystemTemplates" via "Draft.ExtrEqs")
### theory "Draft.LTS"
### 0.144s elapsed time, 0.577s cpu time, 0.000s GC time
Loading theory "Draft.Gen_Scheduler" (required by "Draft.Type_SystemTemplates" via "Draft.Type_System" via "Draft.Gen_Scheduler_Refine")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.882s elapsed time, 3.273s cpu time, 0.636s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Gen_Scheduler
  fixes cstep :: "'c => 'a + 'b => 'c => bool"
    and en :: "'ls * 'gs => 'a => bool option"
    and ex :: "'ls * 'gs => 'a => ('ls * 'gs) option"
Found termination order: "size <*mlex*> {}"
locale Gen_Scheduler_linit
  fixes cstep :: "'c => 'a + 'b => 'c => bool"
    and en :: "'ls * 'gs => 'a => bool option"
    and ex :: "'ls * 'gs => 'a => ('ls * 'gs) option"
    and ginit :: "('c, 'ls, 'gs) global_config set"
    and glabel :: "('c, 'ls, 'gs) global_config => 'l"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.223s elapsed time, 7.413s cpu time, 1.602s GC time
Loading theory "Draft.Templates" (required by "Draft.Type_SystemTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.081s elapsed time, 0.223s cpu time, 0.041s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Type_SystemTemplates")
### theory "Draft.Gen_Scheduler"
### 2.164s elapsed time, 7.082s cpu time, 1.550s GC time
Loading theory "Draft.Gen_Scheduler_Refine" (required by "Draft.Type_SystemTemplates" via "Draft.Type_System")
locale Gen_Scheduler'
  fixes cstep :: "'c => 'a => 'c => bool"
    and en :: "'ls * 'gs => 'a => bool"
    and ex :: "'ls * 'gs => 'a => 'ls * 'gs"
locale Gen_Scheduler'_linit
  fixes cstep :: "'c => 'a => 'c => bool"
    and en :: "'ls * 'gs => 'a => bool"
    and ex :: "'ls * 'gs => 'a => 'ls * 'gs"
    and init :: "('c, 'ls, 'gs) global_config set"
    and label :: "('c, 'ls, 'gs) global_config => 'l"
locale sched_typing
  fixes cstep1 :: "'c => 'a + 'b => 'c => bool"
    and en1 :: "'ls * 'gs => 'a => bool option"
    and ex1 :: "'ls * 'gs => 'a => ('ls * 'gs) option"
    and cstep2 :: "'c => 'a => 'c => bool"
    and en2 :: "'ls * 'gs => 'a => bool"
    and ex2 :: "'ls * 'gs => 'a => 'ls * 'gs"
    and wf_local :: "'c => 'ls => 'gs => bool"
  assumes "sched_typing cstep1 en1 ex1 cstep2 en2 ex2 wf_local"
consts
  wf_global :: "('c, 'ls, 'gs) global_config option => bool"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.617s elapsed time, 1.817s cpu time, 0.115s GC time
locale sched_typing_init
  fixes cstep1 :: "'c => 'a + 'b => 'c => bool"
    and en1 :: "'ls * 'gs => 'a => bool option"
    and ex1 :: "'ls * 'gs => 'a => ('ls * 'gs) option"
    and cstep2 :: "'c => 'a => 'c => bool"
    and en2 :: "'ls * 'gs => 'a => bool"
    and ex2 :: "'ls * 'gs => 'a => 'ls * 'gs"
    and ginit :: "('c, 'ls, 'gs) global_config set"
    and glabel :: "('c, 'ls, 'gs) global_config => 'l"
    and wf_local :: "'c => 'ls => 'gs => bool"
  assumes "sched_typing_init cstep1 en1 ex1 cstep2 en2 ex2 ginit wf_local"
### theory "Draft.Gen_Scheduler_Refine"
### 0.678s elapsed time, 1.918s cpu time, 0.183s GC time
### theory "Draft.SM_Syntax"
### 3.309s elapsed time, 10.401s cpu time, 1.879s GC time
Loading theory "Draft.SM_Cfg" (required by "Draft.Type_SystemTemplates" via "Draft.Type_System" via "Draft.Decide_Locality" via "Draft.SM_Semantics")
Loading theory "Draft.SM_State" (required by "Draft.Type_SystemTemplates" via "Draft.Type_System" via "Draft.Decide_Locality" via "Draft.SM_Semantics")
consts
  val_of_bool :: "bool => 32 word"
### theory "Draft.SM_State"
### 1.380s elapsed time, 3.257s cpu time, 0.997s GC time
Proofs for inductive predicate(s) "cfg"
  Proving monotonicity ...
consts
  reachable_term_order_aux :: "cmd => nat"
### theory "Draft.SM_Cfg"
### 3.396s elapsed time, 5.389s cpu time, 1.178s GC time
Loading theory "Draft.SM_Semantics" (required by "Draft.Type_SystemTemplates" via "Draft.Type_System" via "Draft.Decide_Locality")
consts
  eval_bin_op :: "bin_op => 32 Word.word => 32 Word.word => 32 Word.word"
consts
  eval_un_op :: "un_op => 32 Word.word => 32 Word.word"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  la_en :: "local_state * global_state => action => bool option"
Found termination order: "{}"
### theory "Draft.SM_Semantics"
### 2.630s elapsed time, 2.829s cpu time, 0.226s GC time
Loading theory "Draft.Decide_Locality" (required by "Draft.Type_SystemTemplates" via "Draft.Type_System")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Decide_Locality"
### 0.754s elapsed time, 0.895s cpu time, 0.113s GC time
Loading theory "Draft.Type_System" (required by "Draft.Type_SystemTemplates")
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
locale well_typed_prog
  fixes prog :: "program"
  assumes "well_typed_prog prog"
### theory "Draft.Type_System"
### 1.673s elapsed time, 1.830s cpu time, 0.155s GC time
Loading theory "Draft.Type_SystemTemplates"
val templateLemmas =
   [("Type_System.ty_cmd_no_internal",
     "[| ty_cmd (?\<Gamma>, False) ?c; cfg ?c ?a ?c' |] ==> isl ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_hole 2)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Type_System.ty_ex_pres",
     "[| ty_fs ?\<Gamma> ?fs; la_ex ?fs ?a = Some ?fs' |]
      ==> ty_fs ?\<Gamma> ?fs'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3), template_var 0)
           ))),
    ("Type_System.ty_cmd_imp_ty_la",
     "[| ty_cmd (?\<Gamma>, False) ?c; cfg' ?c ?a ?c' |]
      ==> ty_la ?\<Gamma> ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_hole 2)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 1)
           ))),
    ("Type_System.cfg_eq",
     "ty_cmd (?\<Gamma>, False) ?c ==>
      cfg' ?c ?a ?c' = cfg ?c (Inl ?a) ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_hole 4)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Type_System.ty_cmd_imp_ty_la_aux",
     "[| ty_cmd (?\<Gamma>, ?loop) ?c; cfg ?c (Inl ?a) ?c' |]
      ==> ty_la ?\<Gamma> ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 4), template_var 1)
           ))),
    ("Type_System.ty_expr_noerr",
     "ty_fs ?\<Gamma> ?fs ==>
      (eval_exp ?e ?fs ~= None) = (ty_expr ?\<Gamma> ?e ~= None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            )],
       template_bimplication
        (template_negation
          (
             template_equation
              (template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1),
               template_hole 3)
             ),
         template_negation
          (
             template_equation
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0),
               template_hole 0)
             )))),
    ("Type_System.ty_expr_noerr'",
     "ty_fs ?\<Gamma> ?fs ==>
      (ty_expr ?\<Gamma> ?e = Some ()) = (EX v. eval_exp ?e ?fs = Some v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 0)),
           template_app (template_hole 5, template_hole 4)),
         template_app (template_hole 3, t_empty)))),
    ("Type_System.ty_cmd_pres",
     "[| ty_cmd ((?\<Gamma>l, ?\<Gamma>g), False) ?c; cfg ?c ?a ?c' |]
      ==> ty_cmd ((?\<Gamma>l, ?\<Gamma>g), False) ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 3)),
                  template_hole 1)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 3)),
                 template_hole 1)),
             template_var 0)
           ))),
    ("Type_System.cfg'_eq",
     "ty_cmd (?\<Gamma>, False) ?c ==>
      cfg ?c ?a ?c' = (EX aa. ?a = Inl aa & cfg' ?c aa ?c')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_hole 7)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0),
         template_app (template_hole 4, t_empty)))),
    ("Type_System.ty_cmd_pres_aux",
     "[| ty_cmd ((?\<Gamma>l, ?\<Gamma>g), ?loop) ?c; cfg ?c ?a ?c' |]
      ==> ty_cmd ((?\<Gamma>l, ?\<Gamma>g), ?loop) ?c' |
          ?a = Inr AIBreak | ?a = Inr AIContinue",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 5),
                      template_var 4)),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 5),
                         template_var 4)),
                     template_var 3)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app (template_hole 2, template_hole 1))),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 2, template_hole 0))))
           )))]:
   (string * thm * template) list
### theory "Draft.Type_SystemTemplates"
### 2.994s elapsed time, 4.438s cpu time, 1.572s GC time
val it = (): unit
