Loading theory "Draft.SOS_Misc_Add" (required by "Draft.Gen_Cfg_BisimTemplates" via "Draft.Gen_Cfg_Bisim" via "Draft.Gen_Scheduler_Refine" via "Draft.Gen_Scheduler")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Gen_Cfg_BisimTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Gen_Cfg_BisimTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Gen_Cfg_BisimTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  assert_option :: "bool => unit option"
consts
  find_min_idx :: "('a => bool) => 'a list => nat option"
### theory "Draft.SOS_Misc_Add"
### 0.125s elapsed time, 0.494s cpu time, 0.052s GC time
Loading theory "Draft.LTS" (required by "Draft.Gen_Cfg_BisimTemplates" via "Draft.Gen_Cfg_Bisim" via "Draft.Gen_Scheduler_Refine" via "Draft.Gen_Scheduler")
### theory "HOL-Library.Function_Algebras"
### 0.150s elapsed time, 0.603s cpu time, 0.052s GC time
locale LTS
  fixes step :: "'s => 'l => 's => bool"
consts
  path :: "'s => 'l list => 's => bool"
locale asystem
  fixes init :: "'c => bool"
    and astep :: "'c => 'a => 'c => bool"
### theory "HOL-Library.Set_Algebras"
### 0.241s elapsed time, 0.885s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Gen_Cfg_BisimTemplates" via "Draft.ExtrEqs")
### theory "Draft.LTS"
### 0.141s elapsed time, 0.469s cpu time, 0.000s GC time
Loading theory "Draft.Gen_Scheduler" (required by "Draft.Gen_Cfg_BisimTemplates" via "Draft.Gen_Cfg_Bisim" via "Draft.Gen_Scheduler_Refine")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.734s elapsed time, 2.179s cpu time, 0.227s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Gen_Scheduler
  fixes cstep :: "'c => 'a + 'b => 'c => bool"
    and en :: "'ls * 'gs => 'a => bool option"
    and ex :: "'ls * 'gs => 'a => ('ls * 'gs) option"
Found termination order: "size <*mlex*> {}"
locale Gen_Scheduler_linit
  fixes cstep :: "'c => 'a + 'b => 'c => bool"
    and en :: "'ls * 'gs => 'a => bool option"
    and ex :: "'ls * 'gs => 'a => ('ls * 'gs) option"
    and ginit :: "('c, 'ls, 'gs) global_config set"
    and glabel :: "('c, 'ls, 'gs) global_config => 'l"
### theory "HOL-Library.Tree"
### 1.916s elapsed time, 5.118s cpu time, 0.850s GC time
Loading theory "Draft.Templates" (required by "Draft.Gen_Cfg_BisimTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.122s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Gen_Cfg_BisimTemplates")
Found termination order: "{}"
### theory "Draft.Gen_Scheduler"
### 1.840s elapsed time, 4.580s cpu time, 0.861s GC time
Loading theory "Draft.Gen_Scheduler_Refine" (required by "Draft.Gen_Cfg_BisimTemplates" via "Draft.Gen_Cfg_Bisim")
locale Gen_Scheduler'
  fixes cstep :: "'c => 'a => 'c => bool"
    and en :: "'ls * 'gs => 'a => bool"
    and ex :: "'ls * 'gs => 'a => 'ls * 'gs"
locale Gen_Scheduler'_linit
  fixes cstep :: "'c => 'a => 'c => bool"
    and en :: "'ls * 'gs => 'a => bool"
    and ex :: "'ls * 'gs => 'a => 'ls * 'gs"
    and init :: "('c, 'ls, 'gs) global_config set"
    and label :: "('c, 'ls, 'gs) global_config => 'l"
locale sched_typing
  fixes cstep1 :: "'c => 'a + 'b => 'c => bool"
    and en1 :: "'ls * 'gs => 'a => bool option"
    and ex1 :: "'ls * 'gs => 'a => ('ls * 'gs) option"
    and cstep2 :: "'c => 'a => 'c => bool"
    and en2 :: "'ls * 'gs => 'a => bool"
    and ex2 :: "'ls * 'gs => 'a => 'ls * 'gs"
    and wf_local :: "'c => 'ls => 'gs => bool"
  assumes "sched_typing cstep1 en1 ex1 cstep2 en2 ex2 wf_local"
consts
  wf_global :: "('c, 'ls, 'gs) global_config option => bool"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.529s elapsed time, 1.093s cpu time, 0.116s GC time
locale sched_typing_init
  fixes cstep1 :: "'c => 'a + 'b => 'c => bool"
    and en1 :: "'ls * 'gs => 'a => bool option"
    and ex1 :: "'ls * 'gs => 'a => ('ls * 'gs) option"
    and cstep2 :: "'c => 'a => 'c => bool"
    and en2 :: "'ls * 'gs => 'a => bool"
    and ex2 :: "'ls * 'gs => 'a => 'ls * 'gs"
    and ginit :: "('c, 'ls, 'gs) global_config set"
    and glabel :: "('c, 'ls, 'gs) global_config => 'l"
    and wf_local :: "'c => 'ls => 'gs => bool"
  assumes "sched_typing_init cstep1 en1 ex1 cstep2 en2 ex2 ginit wf_local"
### theory "Draft.Gen_Scheduler_Refine"
### 0.496s elapsed time, 0.917s cpu time, 0.053s GC time
Loading theory "Draft.Gen_Cfg_Bisim" (required by "Draft.Gen_Cfg_BisimTemplates")
locale Gen_Cfg_Bisim_Pre
  fixes rel_c :: "'c => 'd => bool"
    and cstep1 :: "'c => 'a => 'c => bool"
    and cstep2 :: "'d => 'a => 'd => bool"
    and en :: "'ls * 'gs => 'a => bool"
    and ex :: "'ls * 'gs => 'a => 'ls * 'gs"
  assumes "Gen_Cfg_Bisim_Pre rel_c cstep1 cstep2"
locale Gen_Cfg_LBisim
  fixes rel_c :: "'c => 'd => bool"
    and cstep1 :: "'c => 'a => 'c => bool"
    and init1 :: "('c, 'ls, 'gs) global_config set"
    and label1 :: "('c, 'ls, 'gs) global_config => 'l"
    and cstep2 :: "'d => 'a => 'd => bool"
    and init2 :: "('d, 'ls, 'gs) global_config set"
    and label2 :: "('d, 'ls, 'gs) global_config => 'l"
    and en :: "'ls * 'gs => 'a => bool"
    and ex :: "'ls * 'gs => 'a => 'ls * 'gs"
  assumes "Gen_Cfg_LBisim rel_c cstep1 init1 label1 cstep2 init2 label2"
### theory "Draft.Gen_Cfg_Bisim"
### 0.302s elapsed time, 0.324s cpu time, 0.040s GC time
Loading theory "Draft.Gen_Cfg_BisimTemplates"
val templateLemmas =
   [("Gen_Cfg_Bisim.brp_right_unique", "right_unique (brp ?\<alpha> ?I)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Gen_Cfg_Bisim.the_brp_brp", "Domainp (brp ?\<alpha> ?I) = ?I",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Gen_Cfg_Bisim.rel_of_pred_brp",
     "rel_of_pred (brp ?\<alpha> ?invar) = br ?\<alpha> ?invar",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Gen_Cfg_Bisim.rel_option_add_simps",
     "rel_option ?R None ?c = (?c = None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Gen_Cfg_Bisim.rel_option_add_simps",
     "rel_option ?R ?d None = (?d = None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Gen_Cfg_Bisim.the_brp",
     "right_unique ?R ==> brp (the_brp_\<alpha> ?R) (Domainp ?R) = ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Gen_Cfg_Bisim.the_brp_brp",
     "?I ?x ==> the_brp_\<alpha> (brp ?\<alpha> ?I) ?x = ?\<alpha> ?x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1),
         template_app (template_var 0, template_var 1)))),
    ("Gen_Cfg_Bisim.rel_option_Some_conv",
     "rel_option ?R ?c (Some ?w) = (EX v. ?R v ?w & ?c = Some v)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Gen_Cfg_Bisim.rel_option_Some_conv",
     "rel_option ?R (Some ?v) ?d = (EX w. ?R ?v w & ?d = Some w)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Gen_Cfg_Bisim.rel_mset_brp",
     "rel_mset (brp ?\<alpha> ?I) =
      brp ((`#) ?\<alpha>) (%m. ALL x. x :# m --> ?I x)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         t_empty))),
    ("Gen_Cfg_Bisim.brp_comp",
     "brp ?\<alpha>1.0 ?I1.0 OO brp ?\<alpha>2.0 ?I2.0 =
      brp (?\<alpha>2.0 o ?\<alpha>1.0)
       (%x. ?I1.0 x & ?I2.0 (?\<alpha>1.0 x))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 3)),
         t_empty))),
    ("Gen_Cfg_Bisim.obtain_brp",
     "[| right_unique ?R; !!\<alpha> I. ?R = brp \<alpha> I ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Gen_Cfg_Bisim.rel_mset_plus_conv",
     "rel_mset ?R ?m ({#?b#} + ?n') =
      (EX a m'. ?m = {#a#} + m' & ?R a ?b & rel_mset ?R m' ?n')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 10, template_var 3), template_var 2),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 1),
               template_hole 7)),
           template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Gen_Cfg_Bisim.rel_mset_plus_conv",
     "rel_mset ?R ({#?a#} + ?m') ?n =
      (EX b n'. ?n = {#b#} + n' & ?R ?a b & rel_mset ?R ?m' n')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 10, template_var 3),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_hole 7)),
             template_var 1)),
         template_var 0),
       template_app (template_hole 6, t_empty)))]:
   (string * thm * template) list
### theory "Draft.Gen_Cfg_BisimTemplates"
### 2.294s elapsed time, 3.110s cpu time, 0.821s GC time
val it = (): unit
