Loading theory "Draft.SOS_Misc_Add" (required by "Draft.Gen_Scheduler_RefineTemplates" via "Draft.Gen_Scheduler_Refine" via "Draft.Gen_Scheduler")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Gen_Scheduler_RefineTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Gen_Scheduler_RefineTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Gen_Scheduler_RefineTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  assert_option :: "bool => unit option"
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
consts
  find_min_idx :: "('a => bool) => 'a list => nat option"
### theory "Draft.SOS_Misc_Add"
### 0.133s elapsed time, 0.530s cpu time, 0.061s GC time
Loading theory "Draft.LTS" (required by "Draft.Gen_Scheduler_RefineTemplates" via "Draft.Gen_Scheduler_Refine" via "Draft.Gen_Scheduler")
locale LTS
  fixes step :: "'s => 'l => 's => bool"
### theory "HOL-Library.Function_Algebras"
### 0.172s elapsed time, 0.693s cpu time, 0.061s GC time
consts
  path :: "'s => 'l list => 's => bool"
### theory "HOL-Library.Set_Algebras"
### 0.219s elapsed time, 0.845s cpu time, 0.061s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Gen_Scheduler_RefineTemplates" via "Draft.ExtrEqs")
locale asystem
  fixes init :: "'c => bool"
    and astep :: "'c => 'a => 'c => bool"
### theory "Draft.LTS"
### 0.144s elapsed time, 0.496s cpu time, 0.000s GC time
Loading theory "Draft.Gen_Scheduler" (required by "Draft.Gen_Scheduler_RefineTemplates" via "Draft.Gen_Scheduler_Refine")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.686s elapsed time, 2.052s cpu time, 0.279s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale Gen_Scheduler
  fixes cstep :: "'c => 'a + 'b => 'c => bool"
    and en :: "'ls * 'gs => 'a => bool option"
    and ex :: "'ls * 'gs => 'a => ('ls * 'gs) option"
### theory "HOL-Library.Tree"
### 1.906s elapsed time, 5.108s cpu time, 0.995s GC time
Loading theory "Draft.Templates" (required by "Draft.Gen_Scheduler_RefineTemplates" via "Draft.ExtrEqs")
locale Gen_Scheduler_linit
  fixes cstep :: "'c => 'a + 'b => 'c => bool"
    and en :: "'ls * 'gs => 'a => bool option"
    and ex :: "'ls * 'gs => 'a => ('ls * 'gs) option"
    and ginit :: "('c, 'ls, 'gs) global_config set"
    and glabel :: "('c, 'ls, 'gs) global_config => 'l"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.133s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Gen_Scheduler_RefineTemplates")
Found termination order: "{}"
### theory "Draft.Gen_Scheduler"
### 1.911s elapsed time, 4.697s cpu time, 0.999s GC time
Loading theory "Draft.Gen_Scheduler_Refine" (required by "Draft.Gen_Scheduler_RefineTemplates")
locale Gen_Scheduler'
  fixes cstep :: "'c => 'a => 'c => bool"
    and en :: "'ls * 'gs => 'a => bool"
    and ex :: "'ls * 'gs => 'a => 'ls * 'gs"
locale Gen_Scheduler'_linit
  fixes cstep :: "'c => 'a => 'c => bool"
    and en :: "'ls * 'gs => 'a => bool"
    and ex :: "'ls * 'gs => 'a => 'ls * 'gs"
    and init :: "('c, 'ls, 'gs) global_config set"
    and label :: "('c, 'ls, 'gs) global_config => 'l"
locale sched_typing
  fixes cstep1 :: "'c => 'a + 'b => 'c => bool"
    and en1 :: "'ls * 'gs => 'a => bool option"
    and ex1 :: "'ls * 'gs => 'a => ('ls * 'gs) option"
    and cstep2 :: "'c => 'a => 'c => bool"
    and en2 :: "'ls * 'gs => 'a => bool"
    and ex2 :: "'ls * 'gs => 'a => 'ls * 'gs"
    and wf_local :: "'c => 'ls => 'gs => bool"
  assumes "sched_typing cstep1 en1 ex1 cstep2 en2 ex2 wf_local"
consts
  wf_global :: "('c, 'ls, 'gs) global_config option => bool"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.571s elapsed time, 1.175s cpu time, 0.126s GC time
locale sched_typing_init
  fixes cstep1 :: "'c => 'a + 'b => 'c => bool"
    and en1 :: "'ls * 'gs => 'a => bool option"
    and ex1 :: "'ls * 'gs => 'a => ('ls * 'gs) option"
    and cstep2 :: "'c => 'a => 'c => bool"
    and en2 :: "'ls * 'gs => 'a => bool"
    and ex2 :: "'ls * 'gs => 'a => 'ls * 'gs"
    and ginit :: "('c, 'ls, 'gs) global_config set"
    and glabel :: "('c, 'ls, 'gs) global_config => 'l"
    and wf_local :: "'c => 'ls => 'gs => bool"
  assumes "sched_typing_init cstep1 en1 ex1 cstep2 en2 ex2 ginit wf_local"
### theory "Draft.Gen_Scheduler_Refine"
### 0.533s elapsed time, 0.912s cpu time, 0.060s GC time
Loading theory "Draft.Gen_Scheduler_RefineTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Gen_Scheduler_RefineTemplates"
### 2.454s elapsed time, 3.320s cpu time, 0.922s GC time
val it = (): unit
