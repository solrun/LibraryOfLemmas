Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BoolProgsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.BoolProgsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BoolProgsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.BoolProgs" (required by "Draft.BoolProgsTemplates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.551s cpu time, 0.058s GC time
### theory "HOL-Library.Set_Algebras"
### 0.234s elapsed time, 0.854s cpu time, 0.058s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BoolProgsTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.769s elapsed time, 2.282s cpu time, 0.328s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.995s elapsed time, 5.321s cpu time, 0.968s GC time
Loading theory "Draft.Templates" (required by "Draft.BoolProgsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.125s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BoolProgsTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.524s elapsed time, 1.085s cpu time, 0.129s GC time
locale BoolProg_Syntax
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "reachable_configsp"
  Proving monotonicity ...
Found termination order: "{}"
consts
  bexp_vars :: "bexp => nat set"
consts
  instr_vars :: "instr => nat set"
find_consts
  "'a array \<Rightarrow> 'a list"
found 1 constant(s):
Diff_Array.list_of_array :: "'a array => 'a list"
"[ChoiceI [(V 0, 0), (V 1, 2)], AssI [1, 0] [TT, FF], GotoI 1,
  AssI [0] [TT]]"
  :: "instr list"
Found termination order: "{}"
### theory "Draft.BoolProgs"
### 4.489s elapsed time, 10.033s cpu time, 2.053s GC time
Loading theory "Draft.BoolProgsTemplates"
val templateLemmas =
   [("BoolProgs.finite_bexp_vars", "finite (bexp_vars ?be)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("BoolProgs.finite_bprog_vars", "finite (bprog_vars ?bp)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("BoolProgs.finite_instr_vars", "finite (instr_vars ?ins)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("BoolProgs.finite_max_next_pcs", "finite (max_next_pcs ?bp)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("BoolProgs.reachable_configs_finite",
     "finite (reachable_configs ?bp ?c)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("BoolProgs.finite_state_bound", "finite (state_bound ?bp ?s0.0)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("BoolProgs.finite_config_bound", "finite (config_bound ?bp ?s0.0)",
     template_predicate
      (
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app (template_hole 1, template_var 1))),
             t_empty))
         )),
    ("BoolProgs.reachable_configsp_reachable_configs_eq",
     "reachable_configsp ?bp ?c\<^sub>s =
      (%x. x : reachable_configs ?bp ?c\<^sub>s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       t_empty)),
    ("BoolProgs.array_idx_in_set",
     "[| ?pc < array_length ?ins; array_get ?ins ?pc = ?x |]
      ==> ?x : set (list_of_array ?ins)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 2),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("BoolProgs.rcs_aux",
     "[| ?pc < pc_bound ?bp; ?pc' : set (exec' ?bp ?s ?pc) |]
      ==> ?pc' < pc_bound ?bp",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_hole 1,
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 0),
                  template_var 3)))
            )],
       template_inequation
        (less_than, template_var 1,
         template_app (template_hole 3, template_var 2)))),
    ("BoolProgs.aux2",
     "[| ?pc < array_length ?ins; ?ofs : offsets_is (list_of_array ?ins) |]
      ==> nat (1 + int ?pc + ?ofs) < pc_bound ?ins",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)))
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app (template_hole 1, template_var 2))),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("BoolProgs.max_next_pcs_not_empty",
     "[| ?pc < length ?bp; ?x : set (exec (?bp ! ?pc) (?pc, ?s)) |]
      ==> max_next_pcs ?bp ~= {}",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 3)),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 0))))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 2),
             template_hole 0)
           ))),
    ("BoolProgs.Max_lem2",
     "[| ?pc < length ?bp; (?pc', ?s') : set (exec (?bp ! ?pc) (?pc, ?s)) |]
      ==> ?pc' <= Max (max_next_pcs ?bp)",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 4)),
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 0))))
            )],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 3))))),
    ("BoolProgs.reachable_configs_out_of_bound",
     "[| (?pc', ?s') : reachable_configs ?bp (?pc, ?s);
         ~ ?pc < pc_bound ?bp |]
      ==> (?pc', ?s') = (?pc, ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)))
            ),
        template_negation
         (
            template_inequation
             (less_than, template_var 1,
              template_app (template_hole 1, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 4), template_var 3),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_var 0)))),
    ("BoolProgs.reachable_configs_in_bound",
     "?c : config_bound ?bp ?s0.0 ==>
      reachable_configs ?bp ?c <= config_bound ?bp ?s0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_app (template_hole 3, template_var 1))),
                t_empty))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app (template_hole 3, template_var 1))),
           t_empty)))),
    ("BoolProgs.Max_lem1",
     "[| ?pc < length ?bp; (?pc', ?s') : set (exec (?bp ! ?pc) (?pc, ?s)) |]
      ==> ?pc' <= Max (insert ?x (max_next_pcs ?bp))",
     template_implication
      ([template_inequation
         (less_than, template_var 5,
          template_app (template_hole 9, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 4),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 7, template_var 5),
                    template_var 1))))
            )],
       template_inequation
        (less_equals, template_var 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 4)))))),
    ("BoolProgs.exec_bound",
     "[| ?pc < array_length ?bp; ?s : state_bound ?bp ?s0.0 |]
      ==> set (exec (array_get ?bp ?pc) (?pc, ?s))
          <= config_bound ?bp ?s0.0",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 3)),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 2))),
           t_empty)))),
    ("BoolProgs.in_bound_step",
     "[| ?c : config_bound ?bp ?s0.0; ?c' : set (nexts ?bp ?c) |]
      ==> ?c' : config_bound ?bp ?s0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_app (template_hole 3, template_var 2))),
                t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app (template_hole 3, template_var 2))),
               t_empty))
           ))),
    ("BoolProgs.reachable_configs_induct",
     "[| (?xa, ?xb) : reachable_configs ?bp (?c\<^sub>s', ?c\<^sub>s'');
         ?P ?c\<^sub>s' ?c\<^sub>s'';
         !!a b aa ba.
            [| (a, b) : reachable_configs ?bp (?c\<^sub>s', ?c\<^sub>s'');
               ?P a b; (aa, ba) : set (nexts ?bp (a, b)) |]
            ==> ?P aa ba |]
      ==> ?P ?xa ?xb",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_var 2), template_var 1)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 5), template_var 4)
           )))]:
   (string * thm * template) list
### theory "Draft.BoolProgsTemplates"
### 1.909s elapsed time, 2.307s cpu time, 0.296s GC time
val it = (): unit
