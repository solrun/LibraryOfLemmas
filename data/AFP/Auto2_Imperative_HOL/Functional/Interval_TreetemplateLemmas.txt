   [("Interval_Tree.inorder_preserve_set",
     "tree_set ?t = set (in_traverse ?t)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Interval_Tree.inorder_sorted",
     "tree_sorted ?t = strict_sorted (in_traverse ?t)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Interval_Tree.max3_insert",
     "max3 ?it 0 0 = high (idx_interval.int ?it)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Interval_Tree.tree_delete_all_inv",
     "is_interval_tree ?t ==> is_interval_tree (delete ?x ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Interval_Tree.tree_delete_max_inv",
     "tree_max_inv ?t ==> tree_max_inv (delete ?x ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Interval_Tree.tree_insert_max_inv",
     "tree_max_inv ?t ==> tree_max_inv (Interval_Tree.insert ?x ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Interval_Tree.delete_elt_in_traverse",
     "in_traverse (delete_elt_tree (interval_tree.Node ?lt ?x ?m ?rt)) =
      in_traverse ?lt @ in_traverse ?rt",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 3)),
         template_app (template_hole 3, template_var 0)))),
    ("Interval_Tree.tree_delete_in_traverse",
     "tree_sorted ?t ==>
      in_traverse (delete ?x ?t) = remove_elt_list ?x (in_traverse ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("Interval_Tree.tree_insert_in_traverse",
     "tree_sorted ?t ==>
      in_traverse (Interval_Tree.insert ?x ?t) =
      ordered_insert ?x (in_traverse ?t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("Interval_Tree.is_interval_tree_lr",
     "is_interval_tree (interval_tree.Node ?l ?x ?m ?r) ==>
      is_interval_tree ?l & is_interval_tree ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 3)),
             template_app (template_hole 2, template_var 0))
           ))),
    ("Interval_Tree.tree_sorted_lr",
     "tree_sorted (interval_tree.Node ?l ?it ?m ?r) ==>
      tree_sorted ?l & tree_sorted ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 3)),
             template_app (template_hole 2, template_var 0))
           ))),
    ("Interval_Tree.tree_insert_all_inv",
     "[| is_interval_tree ?t; is_interval (idx_interval.int ?it) |]
      ==> is_interval_tree (Interval_Tree.insert ?it ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Interval_Tree.delete_elt_all_inv",
     "[| is_interval_tree ?t; ?t ~= Tip |]
      ==> is_interval_tree (delete_elt_tree ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Interval_Tree.delete_elt_interval_inv",
     "[| tree_interval_inv ?t; ?t ~= Tip |]
      ==> tree_interval_inv (delete_elt_tree ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Interval_Tree.delete_elt_max_inv",
     "[| tree_max_inv ?t; ?t ~= Tip |]
      ==> tree_max_inv (delete_elt_tree ?t)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Interval_Tree.delete_min_all_inv",
     "[| is_interval_tree ?t; ?t ~= Tip |]
      ==> is_interval_tree (snd (del_min ?t))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Interval_Tree.delete_min_interval_inv",
     "[| tree_interval_inv ?t; ?t ~= Tip |]
      ==> tree_interval_inv (snd (del_min ?t))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Interval_Tree.delete_min_max_inv",
     "[| tree_max_inv ?t; ?t ~= Tip |] ==> tree_max_inv (snd (del_min ?t))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Interval_Tree.tree_delete_on_set",
     "tree_sorted ?t ==> tree_set (delete ?x ?t) = tree_set ?t - {?x}",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Interval_Tree.tree_insert_on_set",
     "tree_sorted ?t ==>
      tree_set (Interval_Tree.insert ?it ?t) = {?it} Un tree_set ?t",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)),
           template_app (template_hole 4, template_var 1))))),
    ("Interval_Tree.search_correct",
     "[| is_interval_tree ?t; is_interval ?x |]
      ==> search ?t ?x = has_overlap (tree_set ?t) ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Interval_Tree.tree_max_is_max",
     "[| tree_max_inv ?t; ?it : tree_set ?t |]
      ==> high (idx_interval.int ?it) <= tmax ?t",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Interval_Tree.delete_min_del_hd",
     "?t ~= Tip ==>
      fst (del_min ?t) # in_traverse (snd (del_min ?t)) = in_traverse ?t",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 0)))),
         template_app (template_hole 1, template_var 0)))),
    ("Interval_Tree.tree_sortedD1",
     "[| tree_sorted (interval_tree.Node ?l ?it ?m ?r); ?x : tree_set ?l |]
      ==> ?x < ?it",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 4))
            )],
       template_inequation (less_than, template_var 0, template_var 3))),
    ("Interval_Tree.tree_sortedD2",
     "[| tree_sorted (interval_tree.Node ?l ?it ?m ?r); ?x : tree_set ?r |]
      ==> ?it < ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_inequation (less_than, template_var 3, template_var 0))),
    ("Interval_Tree.delete_elt_on_set",
     "?t ~= Tip ==>
      tree_set (delete_elt_tree (interval_tree.Node ?lt ?x ?m ?rt)) =
      tree_set ?lt Un tree_set ?rt",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 3)),
           template_app (template_hole 3, template_var 0))))),
    ("Interval_Tree.delete_min_on_set",
     "?t ~= Tip ==>
      {fst (del_min ?t)} Un tree_set (snd (del_min ?t)) = tree_set ?t",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0))),
               template_hole 2)),
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 0)))),
         template_app (template_hole 1, template_var 0)))),
    ("Interval_Tree.tmax_exists",
     "[| tree_max_inv ?t; ?t ~= Tip |]
      ==> EX p:tree_set ?t. high (idx_interval.int p) = tmax ?t",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             t_empty)
           )))]
