   [("Dijkstra_Impl.dstate_init_to_fun",
     "<emp> dstate_init ?G <dstate (dijkstra_start_state ?G)>\<^sub>t",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_app (template_hole 4, template_var 0)),
           t_empty)
         )),
    ("Dijkstra_Impl.dstate_pq_init_to_fun",
     "?k <= Dijkstra.size ?G ==>
      <emp> dstate_pq_init ?G
             ?k <idx_pqueue_map (map_constr ((<) 0) (weight ?G 0) ?k)
                  (Dijkstra.size ?G)>\<^sub>t",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_var 1)),
             t_empty)
           ))),
    ("Dijkstra_Impl.dijkstra_step_impl_to_fun",
     "[| state.heap ?S ~= empty_map; Dijkstra.inv ?G ?S |]
      ==> <dstate ?S
            (Dijkstra_State ?a
              ?pq)> dijkstra_step_impl ?G
                     (Dijkstra_State ?a
                       ?pq) <%r. \<exists>\<^sub>AS'.
                                    dstate S' r *
                                    \<up>
                                     (is_dijkstra_step ?G ?S S')>\<^sub>t",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 11, template_var 3),
              template_hole 10)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 3),
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0))),
             t_empty)
           ))),
    ("Dijkstra_Impl.dijkstra_extract_min_rule",
     "?M ~= empty_map ==>
      <dstate (State ?e ?M)
        (Dijkstra_State ?a
          ?pq)> dijkstra_extract_min
                 (Dijkstra_State ?a
                   ?pq) <%r. case r of
                             (m, r) =>
                               dstate (State ?e (delete_map m ?M)) r *
                               \<up> (m < length ?e) *
                               \<up> (is_heap_min m ?M)>\<^sub>t",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 13))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_var 2),
                       template_var 3)),
                   template_app
                    (template_app (template_hole 9, template_var 1),
                     template_var 0))),
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 9, template_var 1),
                   template_var 0))),
             t_empty)
           ))),
    ("Dijkstra_Impl.dijkstra_step_impl_correct",
     "[| state.heap ?S ~= empty_map; Dijkstra.inv ?G ?S |]
      ==> <dstate ?S
            ?p> dijkstra_step_impl ?G
                 ?p <%r. \<exists>\<^sub>AS'.
                            dstate S' r * \<up> (Dijkstra.inv ?G S') *
                            \<up>
                             (card (unknown_set S') =
                              card (unknown_set ?S) - 1)>\<^sub>t",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 14, template_var 2),
              template_hole 13)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_var 0)),
             t_empty)
           ))),
    ("Dijkstra_Impl.dijkstra_loop_correct",
     "<dstate ?S ?p * \<up> (Dijkstra.inv ?G ?S) *
       \<up>
        (?n <= card
                (unknown_set
                  ?S))> dijkstra_loop ?G ?n
                         ?p <%r. \<exists>\<^sub>AS'.
                                    dstate S' r *
                                    \<up> (Dijkstra.inv ?G S') *
                                    \<up>
                                     (card (unknown_set S') =
card (unknown_set ?S) - ?n)>\<^sub>t",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 10, template_var 3),
                         template_var 2)),
                     template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 8, template_var 1),
                         template_var 3)))),
                 template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 3)))))),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0),
               template_var 2)),
           t_empty)
         )),
    ("Dijkstra_Impl.dstate_update_heap_ind",
     "[| ?k <= length ?e; ?m < length ?e |]
      ==> <?a \<mapsto>\<^sub>a ?e *
           idx_pqueue_map ?M (length ?e)
            ?pq> dstate_update_heap ?G ?m ?k ?a
                  ?pq <%r. dstate
                            (State ?e (map_update_all_impl ((!) ?e) ?M ?k))
                            (Dijkstra_State ?a r)>\<^sub>t",
     template_implication
      ([template_inequation
         (less_equals, template_var 6,
          template_app (template_hole 12, template_var 5)),
        template_inequation
         (less_than, template_var 4,
          template_app (template_hole 12, template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_var 3),
                       template_var 5)),
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 2),
                       template_app (template_hole 12, template_var 5)),
                     template_var 1))),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 6, template_var 0),
                       template_var 4),
                     template_var 6),
                   template_var 3),
                 template_var 1)),
             t_empty)
           ))),
    ("Dijkstra_Impl.dstate_update_heap_to_fun",
     "[| ?m < length ?e; ALL i:keys_of ?M. i < length ?e |]
      ==> <dstate (State ?e ?M)
            (Dijkstra_State ?a
              ?pq)> dstate_update_heap ?G ?m (length ?e) ?a
                     ?pq <%r. dstate (State ?e (map_update_all ((!) ?e) ?M))
                               (Dijkstra_State ?a r)>\<^sub>t",
     template_implication
      ([template_inequation
         (less_than, template_var 5,
          template_app (template_hole 11, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 3)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_var 4),
                       template_var 3)),
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 1))),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 5),
                     template_app (template_hole 11, template_var 4)),
                   template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("Dijkstra_Impl.dijkstra_correct",
     "0 < Dijkstra.size ?G ==>
      <emp> dijkstra
             ?G <%r. \<exists>\<^sub>AS.
                        dstate S r * \<up> (Dijkstra.inv ?G S) *
                        \<up> (unknown_set S = {}) *
                        \<up>
                         (ALL i:verts ?G.
                             has_dist ?G 0 i &
                             est S ! i = Dijkstra.dist ?G 0 i)>\<^sub>t",
     template_implication
      ([template_inequation
         (less_than, template_hole 21,
          template_app (template_hole 20, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 19, template_hole 18),
               template_app (template_hole 17, template_var 0)),
             t_empty)
           ))),
    ("Dijkstra_Impl.dstate_update_est_to_fun",
     "<dstate (State ?e ?M) (Dijkstra_State ?a ?pq) *
       \<up>
        (?m < length
               ?e)> dstate_update_est ?G ?m (length ?e) ?pq
                     ?a <%r. dstate
                              (State
                                (list_update_set (%i. i : keys_of ?M)
                                  (%i.
min (?e ! ?m + weight ?G ?m i) (?e ! i))
                                  ?e)
                                ?M)
                              (Dijkstra_State r ?pq)>\<^sub>t",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_hole 14,
                       template_app
                        (template_app (template_hole 13, template_var 5),
                         template_var 4)),
                     template_app
                      (template_app (template_hole 12, template_var 3),
                       template_var 2))),
                 template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_var 1),
                     template_app (template_hole 9, template_var 5))))),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 8, template_var 0),
                     template_var 1),
                   template_app (template_hole 9, template_var 5)),
                 template_var 2),
               template_var 3)),
           t_empty)
         )),
    ("Dijkstra_Impl.dstate_update_est_ind",
     "[| ?k <= length ?e; ?m < length ?e |]
      ==> <?a \<mapsto>\<^sub>a ?e *
           idx_pqueue_map ?M (length ?e)
            ?pq> dstate_update_est ?G ?m ?k ?pq
                  ?a <%r. dstate
                           (State
                             (list_update_set_impl (%i. i : keys_of ?M)
                               (%i. min (?e ! ?m + weight ?G ?m i) (?e ! i))
                               ?e ?k)
                             ?M)
                           (Dijkstra_State r ?pq)>\<^sub>t",
     template_implication
      ([template_inequation
         (less_equals, template_var 6,
          template_app (template_hole 17, template_var 5)),
        template_inequation
         (less_than, template_var 4,
          template_app (template_hole 17, template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app (template_hole 13, template_var 3),
                       template_var 5)),
                   template_app
                    (template_app
                      (template_app (template_hole 12, template_var 2),
                       template_app (template_hole 17, template_var 5)),
                     template_var 1))),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 11, template_var 0),
                       template_var 4),
                     template_var 6),
                   template_var 1),
                 template_var 3)),
             t_empty)
           )))]
