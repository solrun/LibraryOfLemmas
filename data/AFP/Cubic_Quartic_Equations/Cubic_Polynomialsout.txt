Loading theory "Draft.Templates" (required by "Draft.Cubic_PolynomialsTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Cardanos_Formula" (required by "Draft.Cubic_PolynomialsTemplates" via "Draft.Cubic_Polynomials")
Loading theory "Draft.Complex_Roots" (required by "Draft.Cubic_PolynomialsTemplates" via "Draft.Cubic_Polynomials")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.267s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Cubic_PolynomialsTemplates")
### theory "Draft.Cardanos_Formula"
### 0.564s elapsed time, 1.695s cpu time, 0.175s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.648s elapsed time, 1.765s cpu time, 0.279s GC time
### theory "Draft.Complex_Roots"
### 3.420s elapsed time, 4.798s cpu time, 0.398s GC time
Loading theory "Draft.Cubic_Polynomials" (required by "Draft.Cubic_PolynomialsTemplates")
### theory "Draft.Cubic_Polynomials"
### 2.611s elapsed time, 3.080s cpu time, 0.699s GC time
Loading theory "Draft.Cubic_PolynomialsTemplates"
val templateLemmas =
   [("Cubic_Polynomials.rroots3",
     "degree ?p = 3 ==> set (rroots3 ?p) = {x. poly ?p x = 0}",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 0),
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_hole 7)))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("Cubic_Polynomials.croots3",
     "degree ?p = 3 ==> set (croots3 ?p) = {x. poly ?p x = 0}",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 0),
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_hole 7)))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, t_empty)))),
    ("Cubic_Polynomials.solve_depressed_cubic_real",
     "(?y : set (solve_depressed_cubic_real ?e ?f)) =
      (?y ^ 3 + ?e * ?y + ?f = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2))),
           template_var 0),
         template_hole 0))),
    ("Cubic_Polynomials.solve_depressed_cubic_complex",
     "(?y : set (solve_depressed_cubic_complex ?e ?f)) =
      (?y ^ 3 + ?e * ?y + ?f = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2))),
           template_var 0),
         template_hole 0))),
    ("Cubic_Polynomials.solve_depressed_cubic_Cardano_real",
     "solve_depressed_cubic_Cardano_real ?e ?f = Some ?y ==>
      {y. y ^ 3 + ?e * y + ?f = 0} = {?y}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 13, template_var 2),
            template_var 1),
          template_app (template_hole 12, template_var 0))],
       template_equation
        (template_app (template_hole 10, t_empty),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Cubic_Polynomials.degree3_coeffs",
     "degree ?p = 3 ==> EX a b c d. ?p = [:d, c, b, a:] & a ~= (0::?'a)",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 0),
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_hole 8)))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Cubic_Polynomials.roots3_generic",
     "[| degree ?p = 3;
         !!e f y.
            (y : set (?depressed_solver e f)) =
            (y ^ 3 + e * y + f = (0::?'a)) |]
      ==> set (roots3_generic ?depressed_solver ?p) =
          {x. poly ?p x = (0::?'a)}",
     template_implication
      ([template_equation
         (template_app (template_hole 16, template_var 1),
          template_app
           (template_hole 15,
            template_app (template_hole 14, template_hole 13))),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app (template_hole 1, t_empty)))),
    ("Cubic_Polynomials.solve_depressed_cubic_complex_code",
     "solve_depressed_cubic_complex ?e ?f =
      Let (if ?e = 0 then all_croots 3 (- ?f)
           else let f2 = ?f / 2; u = - f2 + csqrt (f2\<^sup>2 + ?e ^ 3 / 27)
                in Let (all_croots 3 u) (map (%z. z - ?e / (3 * z))))
       remdups",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app
                  (template_app
                    (template_hole 18,
                     template_app
                      (template_app (template_hole 17, template_var 1),
                       template_hole 16)),
                   template_app
                    (template_app
                      (template_hole 15,
                       template_app
                        (template_hole 14,
                         template_app
                          (template_hole 13, template_hole 12))),
                     template_app (template_hole 11, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_var 0),
                       template_app
                        (template_hole 8,
                         template_app
                          (template_hole 7, template_hole 12)))),
                   t_empty))),
             t_empty)
           ))),
    ("Cubic_Polynomials.solve_depressed_cubic_real_code",
     "solve_depressed_cubic_real ?e ?f =
      (if ?e = 0 then [root 3 (- ?f)]
       else let v = ?e ^ 3 / 27; f2 = ?f / 2; f2v = f2\<^sup>2 + v
            in if 0 < f2v
               then let u = - f2 + sqrt f2v; rt = root 3 u
                    in [rt - ?e / (3 * rt)]
               else let ce3 = cor ?e / 3; u = - cor f2 + csqrt (cor f2v)
                    in map Re
                        (remdups
                          (map (%rt. rt - ce3 / rt) (all_croots 3 u))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 33, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 32,
                 template_app
                  (template_app (template_hole 31, template_var 1),
                   template_hole 30)),
               template_app
                (template_app
                  (template_hole 29,
                   template_app
                    (template_app
                      (template_hole 28,
                       template_app
                        (template_hole 27,
                         template_app
                          (template_hole 26, template_hole 25))),
                     template_app (template_hole 24, template_var 0))),
                 template_hole 23)),
             template_app
              (template_app
                (template_hole 22,
                 template_app
                  (template_app
                    (template_hole 21,
                     template_app
                      (template_app (template_hole 20, template_var 1),
                       template_app
                        (template_hole 27,
                         template_app
                          (template_hole 26, template_hole 25)))),
                   template_app
                    (template_hole 19,
                     template_app
                      (template_hole 26,
                       template_app
                        (template_hole 26,
                         template_app
                          (template_hole 18,
                           template_app
                            (template_hole 26, template_hole 25))))))),
               t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.Cubic_PolynomialsTemplates"
### 3.039s elapsed time, 4.004s cpu time, 1.127s GC time
val it = (): unit
