Loading theory "Bounded_Deducibility_Security.Abstract_BD_Security" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.API_Network" via "BD_Security_Compositional.Composing_Security_Network" via "BD_Security_Compositional.Trivial_Security")
Loading theory "Fresh_Identifiers.Fresh" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.API_Network" via "Draft.System_Specification" via "Draft.Prelim" via "Fresh_Identifiers.Fresh_String")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
class fresh = type +
  fixes fresh :: "'a set => 'a => 'a"
  assumes "fresh_notIn": "!!xs x. finite xs ==> fresh xs x ~: xs"
    and "fresh_eq": "!!xs x. x ~: xs ==> fresh xs x = x"
### Additional type variable(s) in locale specification "infinite": 'a
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class infinite = type +
  assumes "infinite_UNIV": "infinite UNIV"
locale Abstract_BD_Security
  fixes validSystemTrace :: "'traces => bool"
    and V :: "'traces => 'values"
    and O :: "'traces => 'observations"
    and B :: "'values => 'values => bool"
    and TT :: "'traces => bool"
### theory "Bounded_Deducibility_Security.Abstract_BD_Security"
### 0.129s elapsed time, 0.541s cpu time, 0.029s GC time
Loading theory "BD_Security_Compositional.Trivial_Security" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.API_Network" via "BD_Security_Compositional.Composing_Security_Network")
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.535s cpu time, 0.029s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
locale Abstract_BD_Security
  fixes validSystemTrace :: "'traces => bool"
    and V :: "'traces => 'values"
    and O :: "'traces => 'observations"
    and B :: "'values => 'values => bool"
    and TT :: "'traces => bool"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "BD_Security_Compositional.Trivial_Security"
### 0.061s elapsed time, 0.240s cpu time, 0.000s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.API_Network" via "BD_Security_Compositional.Composing_Security_Network" via "BD_Security_Compositional.Transporting_Security" via "Bounded_Deducibility_Security.BD_Security_TS" via "Bounded_Deducibility_Security.Filtermap" via "Bounded_Deducibility_Security.Trivia")
### theory "Fresh_Identifiers.Fresh"
### 0.230s elapsed time, 0.942s cpu time, 0.029s GC time
Loading theory "Fresh_Identifiers.Fresh_String" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.API_Network" via "Draft.System_Specification" via "Draft.Prelim")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Set_Algebras"
### 0.223s elapsed time, 0.873s cpu time, 0.094s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.353s elapsed time, 1.411s cpu time, 0.123s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.ExtrEqs")
instantiation
  String.literal :: fresh
  fresh_literal == fresh ::
    String.literal set => String.literal => String.literal
### theory "Fresh_Identifiers.Fresh_String"
### 0.241s elapsed time, 0.931s cpu time, 0.176s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.ExtrEqs")
consts
  prefixes :: "'a list => 'a list list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
consts
  suffixes :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.969s elapsed time, 3.680s cpu time, 0.836s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.917s elapsed time, 3.478s cpu time, 0.754s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.501s elapsed time, 5.767s cpu time, 1.064s GC time
Loading theory "Bounded_Deducibility_Security.Trivia" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.API_Network" via "BD_Security_Compositional.Composing_Security_Network" via "BD_Security_Compositional.Transporting_Security" via "Bounded_Deducibility_Security.BD_Security_TS" via "Bounded_Deducibility_Security.Filtermap")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Bounded_Deducibility_Security.Trivia"
### 0.493s elapsed time, 1.940s cpu time, 0.165s GC time
Loading theory "Bounded_Deducibility_Security.Filtermap" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.API_Network" via "BD_Security_Compositional.Composing_Security_Network" via "BD_Security_Compositional.Transporting_Security" via "Bounded_Deducibility_Security.BD_Security_TS")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.063s elapsed time, 7.993s cpu time, 1.223s GC time
Loading theory "Bounded_Deducibility_Security.Transition_System" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.API_Network" via "BD_Security_Compositional.Composing_Security_Network" via "BD_Security_Compositional.Transporting_Security" via "Bounded_Deducibility_Security.BD_Security_TS")
### theory "Bounded_Deducibility_Security.Filtermap"
### 0.233s elapsed time, 0.916s cpu time, 0.088s GC time
Loading theory "Draft.Prelim" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.API_Network" via "Draft.System_Specification")
"[''Abc'', ''Abd'', ''Ya'', ''Yb'', ''Yzb'', ''Ya'']"
  :: "char list list"
Loading theory "Draft.Templates" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.ExtrEqs")
locale Transition_System
  fixes istate :: "'state"
    and validTrans :: "'trans => bool"
    and srcOf :: "'trans => 'state"
    and tgtOf :: "'trans => 'state"
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.085s elapsed time, 0.339s cpu time, 0.060s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Friend_Request_NetworkMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
"[STR ''Abc'', STR ''Abd'', STR ''Ya'', STR ''Yb'', STR ''Yzb'',
  STR ''Ya'']"
  :: "String.literal list"
Found termination order: "{}"
Proofs for inductive predicate(s) "valid"
  Proving monotonicity ...
Proofs for inductive predicate(s) "valid2"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reach"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reachFrom"
  Proving monotonicity ...
### theory "Bounded_Deducibility_Security.Transition_System"
### 0.496s elapsed time, 1.834s cpu time, 0.228s GC time
Loading theory "Bounded_Deducibility_Security.BD_Security_TS" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.API_Network" via "BD_Security_Compositional.Composing_Security_Network" via "BD_Security_Compositional.Transporting_Security")
Loading theory "Bounded_Deducibility_Security.IO_Automaton" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.API_Network" via "Draft.System_Specification")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.716s elapsed time, 2.694s cpu time, 0.349s GC time
locale BD_Security_TS
  fixes istate :: "'state"
    and validTrans :: "'trans => bool"
    and srcOf :: "'trans => 'state"
    and tgtOf :: "'trans => 'state"
    and \<phi> :: "'trans => bool"
    and f :: "'trans => 'value"
    and \<gamma> :: "'trans => bool"
    and g :: "'trans => 'obs"
    and T :: "'trans => bool"
    and B :: "'value list => 'value list => bool"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "reachNT"
  Proving monotonicity ...
### theory "Bounded_Deducibility_Security.BD_Security_TS"
### 0.579s elapsed time, 2.061s cpu time, 0.241s GC time
Loading theory "BD_Security_Compositional.Composing_Security" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.API_Network" via "BD_Security_Compositional.Composing_Security_Network")
Loading theory "BD_Security_Compositional.Transporting_Security" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.API_Network" via "BD_Security_Compositional.Composing_Security_Network")
locale Abstract_BD_Security_Trans
  fixes validSystemTrace :: "'traces => bool"
    and V :: "'traces => 'values"
    and O :: "'traces => 'observations"
    and B :: "'values => 'values => bool"
    and TT :: "'traces => bool"
    and validSystemTrace' :: "'traces' => bool"
    and V' :: "'traces' => 'values'"
    and O' :: "'traces' => 'observations'"
    and B' :: "'values' => 'values' => bool"
    and TT' :: "'traces' => bool"
    and translateTrace :: "'traces => 'traces'"
    and translateObs :: "'observations => 'observations'"
    and translateVal :: "'values => 'values'"
  assumes
    "Abstract_BD_Security_Trans validSystemTrace V O B TT validSystemTrace'
      V' O' B' TT' translateTrace translateObs translateVal"
locale BD_Security_TS
  fixes istate :: "'state"
    and validTrans :: "'trans => bool"
    and srcOf :: "'trans => 'state"
    and tgtOf :: "'trans => 'state"
    and \<phi> :: "'trans => bool"
    and f :: "'trans => 'value"
    and \<gamma> :: "'trans => bool"
    and g :: "'trans => 'obs"
    and T :: "'trans => bool"
    and B :: "'value list => 'value list => bool"
locale IO_Automaton
  fixes istate :: "'state"
    and step :: "'state => 'act => 'out * 'state"
locale Abstract_BD_Security_Comp
  fixes validSystemTraces1 :: "'traces1 => bool"
    and V1 :: "'traces1 => 'values1"
    and O1 :: "'traces1 => 'observations1"
    and TT1 :: "'traces1 => bool"
    and B1 :: "'values1 => 'values1 => bool"
    and validSystemTraces2 :: "'traces2 => bool"
    and V2 :: "'traces2 => 'values2"
    and O2 :: "'traces2 => 'observations2"
    and TT2 :: "'traces2 => bool"
    and B2 :: "'values2 => 'values2 => bool"
    and validSystemTraces :: "'traces => bool"
    and V :: "'traces => 'values"
    and O :: "'traces => 'observations"
    and TT :: "'traces => bool"
    and B :: "'values => 'values => bool"
    and comp :: "'traces1 => 'traces2 => 'traces => bool"
    and compO :: "'observations1 => 'observations2 => 'observations => bool"
    and compV :: "'values1 => 'values2 => 'values => bool"
  assumes
    "Abstract_BD_Security_Comp validSystemTraces1 V1 O1 TT1 B1
      validSystemTraces2 V2 O2 TT2 B2 validSystemTraces V O TT B comp compO
      compV"
Found termination order: "{}"
locale BD_Security_TS_Trans
  fixes istate :: "'state"
    and validTrans :: "'trans => bool"
    and srcOf :: "'trans => 'state"
    and tgtOf :: "'trans => 'state"
    and \<phi> :: "'trans => bool"
    and f :: "'trans => 'val"
    and \<gamma> :: "'trans => bool"
    and g :: "'trans => 'obs"
    and T :: "'trans => bool"
    and B :: "'val list => 'val list => bool"
    and istate' :: "'state'"
    and validTrans' :: "'trans' => bool"
    and srcOf' :: "'trans' => 'state'"
    and tgtOf' :: "'trans' => 'state'"
    and \<phi>' :: "'trans' => bool"
    and f' :: "'trans' => 'val'"
    and \<gamma>' :: "'trans' => bool"
    and g' :: "'trans' => 'obs'"
    and T' :: "'trans' => bool"
    and B' :: "'val' list => 'val' list => bool"
    and translateState :: "'state => 'state'"
    and translateTrans :: "'trans => 'trans'"
    and translateObs :: "'obs => 'obs' option"
    and translateVal :: "'val => 'val' option"
  assumes
    "BD_Security_TS_Trans istate validTrans srcOf tgtOf \<phi> f \<gamma> g
      T B istate' validTrans' srcOf' tgtOf' \<phi>' f' \<gamma>' g' T' B'
      translateState translateTrans translateObs translateVal"
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale BD_Security_TS_Weaken_Observations
  fixes istate :: "'a"
    and validTrans :: "'trans => bool"
    and srcOf :: "'trans => 'a"
    and tgtOf :: "'trans => 'a"
    and \<phi> :: "'trans => bool"
    and f :: "'trans => 'b"
    and \<gamma> :: "'trans => bool"
    and T :: "'trans => bool"
    and B :: "'b list => 'b list => bool"
    and g :: "'trans => 'obs"
    and translateObs :: "'obs => 'obs' option"
### theory "BD_Security_Compositional.Transporting_Security"
### 0.642s elapsed time, 2.514s cpu time, 0.336s GC time
### theory "Bounded_Deducibility_Security.IO_Automaton"
### 1.280s elapsed time, 4.756s cpu time, 0.577s GC time
Loading theory "Bounded_Deducibility_Security.BD_Security_IO" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.Friend_Request" via "Bounded_Deducibility_Security.Compositional_Reasoning" via "Bounded_Deducibility_Security.BD_Security_Unwinding")
locale BD_Security_IO
  fixes istate :: "'state"
    and step :: "'state => 'act => 'out * 'state"
    and \<phi> :: "('state, 'act, 'out) trans => bool"
    and f :: "('state, 'act, 'out) trans => 'value"
    and \<gamma> :: "('state, 'act, 'out) trans => bool"
    and g :: "('state, 'act, 'out) trans => 'obs"
    and T :: "('state, 'act, 'out) trans => bool"
    and B :: "'value list => 'value list => bool"
Found termination order: "{}"
Found termination order: "{}"
### theory "Bounded_Deducibility_Security.BD_Security_IO"
### 0.833s elapsed time, 2.659s cpu time, 1.341s GC time
Loading theory "Bounded_Deducibility_Security.BD_Security_Unwinding" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.Friend_Request" via "Bounded_Deducibility_Security.Compositional_Reasoning")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale BD_Security_IO
  fixes istate :: "'state"
    and step :: "'state => 'act => 'out * 'state"
    and \<phi> :: "('state, 'act, 'out) trans => bool"
    and f :: "('state, 'act, 'out) trans => 'value"
    and \<gamma> :: "('state, 'act, 'out) trans => bool"
    and g :: "('state, 'act, 'out) trans => 'obs"
    and T :: "('state, 'act, 'out) trans => bool"
    and B :: "'value list => 'value list => bool"
### theory "Bounded_Deducibility_Security.BD_Security_Unwinding"
### 0.413s elapsed time, 1.253s cpu time, 0.114s GC time
Loading theory "Bounded_Deducibility_Security.Compositional_Reasoning" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.Friend_Request")
locale BD_Security_IO
  fixes istate :: "'state"
    and step :: "'state => 'act => 'out * 'state"
    and \<phi> :: "('state, 'act, 'out) trans => bool"
    and f :: "('state, 'act, 'out) trans => 'value"
    and \<gamma> :: "('state, 'act, 'out) trans => bool"
    and g :: "('state, 'act, 'out) trans => 'obs"
    and T :: "('state, 'act, 'out) trans => bool"
    and B :: "'value list => 'value list => bool"
Found termination order: "length <*mlex*> {}"
### theory "Bounded_Deducibility_Security.Compositional_Reasoning"
### 0.435s elapsed time, 1.323s cpu time, 0.142s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Prelim"
### 4.127s elapsed time, 13.232s cpu time, 2.596s GC time
Loading theory "Draft.System_Specification" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.API_Network")
locale BD_Security_TS_Comp
  fixes istate1 :: "'state1"
    and validTrans1 :: "'trans1 => bool"
    and srcOf1 :: "'trans1 => 'state1"
    and tgtOf1 :: "'trans1 => 'state1"
    and \<phi>1 :: "'trans1 => bool"
    and f1 :: "'trans1 => 'value1"
    and \<gamma>1 :: "'trans1 => bool"
    and g1 :: "'trans1 => 'obs1"
    and T1 :: "'trans1 => bool"
    and B1 :: "'value1 list => 'value1 list => bool"
    and istate2 :: "'state2"
    and validTrans2 :: "'trans2 => bool"
    and srcOf2 :: "'trans2 => 'state2"
    and tgtOf2 :: "'trans2 => 'state2"
    and \<phi>2 :: "'trans2 => bool"
    and f2 :: "'trans2 => 'value2"
    and \<gamma>2 :: "'trans2 => bool"
    and g2 :: "'trans2 => 'obs2"
    and T2 :: "'trans2 => bool"
    and B2 :: "'value2 list => 'value2 list => bool"
    and isCom1 :: "'trans1 => bool"
    and isCom2 :: "'trans2 => bool"
    and sync :: "'trans1 => 'trans2 => bool"
    and isComV1 :: "'value1 => bool"
    and isComV2 :: "'value2 => bool"
    and syncV :: "'value1 => 'value2 => bool"
    and isComO1 :: "'obs1 => bool"
    and isComO2 :: "'obs2 => bool"
    and syncO :: "'obs1 => 'obs2 => bool"
  assumes
    "BD_Security_TS_Comp istate1 validTrans1 srcOf1 tgtOf1 \<phi>1 f1
      \<gamma>1 g1 T1 B1 istate2 validTrans2 srcOf2 tgtOf2 \<phi>2 f2
      \<gamma>2 g2 T2 B2 isCom1 isCom2 sync isComV1 isComV2 syncV isComO1
      isComO2 syncO"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "compV"
  Proving monotonicity ...
Proofs for inductive predicate(s) "compO"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ccomp"
  Proving monotonicity ...
locale BD_Security_TS_Comp
  fixes istate1 :: "'state1"
    and validTrans1 :: "'trans1 => bool"
    and srcOf1 :: "'trans1 => 'state1"
    and tgtOf1 :: "'trans1 => 'state1"
    and \<phi>1 :: "'trans1 => bool"
    and f1 :: "'trans1 => 'value1"
    and \<gamma>1 :: "'trans1 => bool"
    and g1 :: "'trans1 => 'obs1"
    and T1 :: "'trans1 => bool"
    and B1 :: "'value1 list => 'value1 list => bool"
    and istate2 :: "'state2"
    and validTrans2 :: "'trans2 => bool"
    and srcOf2 :: "'trans2 => 'state2"
    and tgtOf2 :: "'trans2 => 'state2"
    and \<phi>2 :: "'trans2 => bool"
    and f2 :: "'trans2 => 'value2"
    and \<gamma>2 :: "'trans2 => bool"
    and g2 :: "'trans2 => 'obs2"
    and T2 :: "'trans2 => bool"
    and B2 :: "'value2 list => 'value2 list => bool"
    and isCom1 :: "'trans1 => bool"
    and isCom2 :: "'trans2 => bool"
    and sync :: "'trans1 => 'trans2 => bool"
    and isComV1 :: "'value1 => bool"
    and isComV2 :: "'value2 => bool"
    and syncV :: "'value1 => 'value2 => bool"
    and isComO1 :: "'obs1 => bool"
    and isComO2 :: "'obs2 => bool"
    and syncO :: "'obs1 => 'obs2 => bool"
  assumes
    "BD_Security_TS_Comp istate1 validTrans1 srcOf1 tgtOf1 \<phi>1 f1
      \<gamma>1 g1 T1 B1 istate2 validTrans2 srcOf2 tgtOf2 \<phi>2 f2
      \<gamma>2 g2 T2 B2 isCom1 isCom2 sync isComV1 isComV2 syncV isComO1
      isComO2 syncO"
Found termination order: "{}"
locale BD_Security_TS_Comp
  fixes istate1 :: "'state1"
    and validTrans1 :: "'trans1 => bool"
    and srcOf1 :: "'trans1 => 'state1"
    and tgtOf1 :: "'trans1 => 'state1"
    and \<phi>1 :: "'trans1 => bool"
    and f1 :: "'trans1 => 'value1"
    and \<gamma>1 :: "'trans1 => bool"
    and g1 :: "'trans1 => 'obs1"
    and T1 :: "'trans1 => bool"
    and B1 :: "'value1 list => 'value1 list => bool"
    and istate2 :: "'state2"
    and validTrans2 :: "'trans2 => bool"
    and srcOf2 :: "'trans2 => 'state2"
    and tgtOf2 :: "'trans2 => 'state2"
    and \<phi>2 :: "'trans2 => bool"
    and f2 :: "'trans2 => 'value2"
    and \<gamma>2 :: "'trans2 => bool"
    and g2 :: "'trans2 => 'obs2"
    and T2 :: "'trans2 => bool"
    and B2 :: "'value2 list => 'value2 list => bool"
    and isCom1 :: "'trans1 => bool"
    and isCom2 :: "'trans2 => bool"
    and sync :: "'trans1 => 'trans2 => bool"
    and isComV1 :: "'value1 => bool"
    and isComV2 :: "'value2 => bool"
    and syncV :: "'value1 => 'value2 => bool"
    and isComO1 :: "'obs1 => bool"
    and isComO2 :: "'obs2 => bool"
    and syncO :: "'obs1 => 'obs2 => bool"
  assumes
    "BD_Security_TS_Comp istate1 validTrans1 srcOf1 tgtOf1 \<phi>1 f1
      \<gamma>1 g1 T1 B1 istate2 validTrans2 srcOf2 tgtOf2 \<phi>2 f2
      \<gamma>2 g2 T2 B2 isCom1 isCom2 sync isComV1 isComV2 syncV isComO1
      isComO2 syncO"
### theory "BD_Security_Compositional.Composing_Security"
### 5.988s elapsed time, 16.142s cpu time, 4.216s GC time
Loading theory "BD_Security_Compositional.Composing_Security_Network" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.API_Network")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale TS_Network
  fixes istate :: "'nodeid => 'state"
    and validTrans :: "'nodeid => 'trans => bool"
    and srcOf :: "'nodeid => 'trans => 'state"
    and tgtOf :: "'nodeid => 'trans => 'state"
    and nodes :: "'nodeid set"
    and comOf :: "'nodeid => 'trans => com"
    and tgtNodeOf :: "'nodeid => 'trans => 'nodeid"
    and sync :: "'nodeid => 'trans => 'nodeid => 'trans => bool"
  assumes "TS_Network istate validTrans srcOf tgtOf nodes comOf tgtNodeOf"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "comp"
  Proving monotonicity ...
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
locale Empty_TS_Network
  fixes istate :: "'a => 'b"
    and validTrans :: "'a => 'c => bool"
    and srcOf :: "'a => 'c => 'b"
    and tgtOf :: "'a => 'c => 'b"
    and comOf :: "'a => 'c => com"
    and tgtNodeOf :: "'a => 'c => 'a"
    and sync :: "'a => 'c => 'a => 'c => bool"
  assumes "Empty_TS_Network istate validTrans srcOf tgtOf comOf tgtNodeOf"
Found termination order: "{}"
locale BD_Security_TS_Network
  fixes istate :: "'nodeid => 'state"
    and validTrans :: "'nodeid => 'trans => bool"
    and srcOf :: "'nodeid => 'trans => 'state"
    and tgtOf :: "'nodeid => 'trans => 'state"
    and nodes :: "'nodeid set"
    and comOf :: "'nodeid => 'trans => com"
    and tgtNodeOf :: "'nodeid => 'trans => 'nodeid"
    and sync :: "'nodeid => 'trans => 'nodeid => 'trans => bool"
    and \<phi> :: "'nodeid => 'trans => bool"
    and f :: "'nodeid => 'trans => 'val"
    and \<gamma> :: "'nodeid => 'trans => bool"
    and g :: "'nodeid => 'trans => 'obs"
    and T :: "'nodeid => 'trans => bool"
    and B :: "'nodeid => 'val list => 'val list => bool"
    and comOfV :: "'nodeid => 'val => com"
    and tgtNodeOfV :: "'nodeid => 'val => 'nodeid"
    and syncV :: "'nodeid => 'val => 'nodeid => 'val => bool"
    and comOfO :: "'nodeid => 'obs => com"
    and tgtNodeOfO :: "'nodeid => 'obs => 'nodeid"
    and syncO :: "'nodeid => 'obs => 'nodeid => 'obs => bool"
    and source :: "'nodeid"
  assumes
    "BD_Security_TS_Network istate validTrans srcOf tgtOf nodes comOf
      tgtNodeOf sync \<phi> f \<gamma> g comOfV tgtNodeOfV syncV comOfO
      tgtNodeOfO syncO source"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
locale BD_Security_Empty_TS_Network
  fixes istate :: "'a => 'b"
    and validTrans :: "'a => 'c => bool"
    and srcOf :: "'a => 'c => 'b"
    and tgtOf :: "'a => 'c => 'b"
    and comOf :: "'a => 'c => com"
    and tgtNodeOf :: "'a => 'c => 'a"
    and sync :: "'a => 'c => 'a => 'c => bool"
    and \<phi> :: "'a => 'c => bool"
    and f :: "'a => 'c => 'd"
    and \<gamma> :: "'a => 'c => bool"
    and g :: "'a => 'c => 'e"
    and T :: "'a => 'c => bool"
    and B :: "'a => 'd list => 'd list => bool"
    and comOfV :: "'a => 'd => com"
    and tgtNodeOfV :: "'a => 'd => 'a"
    and syncV :: "'a => 'd => 'a => 'd => bool"
    and comOfO :: "'a => 'e => com"
    and tgtNodeOfO :: "'a => 'e => 'a"
    and syncO :: "'a => 'e => 'a => 'e => bool"
    and source :: "'a"
  assumes
    "BD_Security_Empty_TS_Network istate validTrans srcOf tgtOf comOf
      tgtNodeOf sync \<phi> f \<gamma> g comOfV tgtNodeOfV syncV comOfO
      tgtNodeOfO syncO source"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
locale BD_Security_Singleton_Source_Network
  fixes istate :: "'a => 'b"
    and validTrans :: "'a => 'c => bool"
    and srcOf :: "'a => 'c => 'b"
    and tgtOf :: "'a => 'c => 'b"
    and comOf :: "'a => 'c => com"
    and tgtNodeOf :: "'a => 'c => 'a"
    and sync :: "'a => 'c => 'a => 'c => bool"
    and \<phi> :: "'a => 'c => bool"
    and f :: "'a => 'c => 'd"
    and \<gamma> :: "'a => 'c => bool"
    and g :: "'a => 'c => 'e"
    and T :: "'a => 'c => bool"
    and B :: "'a => 'd list => 'd list => bool"
    and comOfV :: "'a => 'd => com"
    and tgtNodeOfV :: "'a => 'd => 'a"
    and syncV :: "'a => 'd => 'a => 'd => bool"
    and comOfO :: "'a => 'e => com"
    and tgtNodeOfO :: "'a => 'e => 'a"
    and syncO :: "'a => 'e => 'a => 'e => bool"
    and source :: "'a"
  assumes
    "BD_Security_Singleton_Source_Network istate validTrans srcOf tgtOf
      comOf tgtNodeOf sync \<phi> f \<gamma> g comOfV tgtNodeOfV syncV
      comOfO tgtNodeOfO syncO source"
Found termination order: "{}"
Found termination order: "{}"
locale BD_Security_TS_Network_Change_Nodes
  fixes istate :: "'a => 'b"
    and validTrans :: "'a => 'c => bool"
    and srcOf :: "'a => 'c => 'b"
    and tgtOf :: "'a => 'c => 'b"
    and nodes :: "'a set"
    and comOf :: "'a => 'c => com"
    and tgtNodeOf :: "'a => 'c => 'a"
    and sync :: "'a => 'c => 'a => 'c => bool"
    and \<phi> :: "'a => 'c => bool"
    and f :: "'a => 'c => 'd"
    and \<gamma> :: "'a => 'c => bool"
    and g :: "'a => 'c => 'e"
    and T :: "'a => 'c => bool"
    and B :: "'a => 'd list => 'd list => bool"
    and comOfV :: "'a => 'd => com"
    and tgtNodeOfV :: "'a => 'd => 'a"
    and syncV :: "'a => 'd => 'a => 'd => bool"
    and comOfO :: "'a => 'e => com"
    and tgtNodeOfO :: "'a => 'e => 'a"
    and syncO :: "'a => 'e => 'a => 'e => bool"
    and source :: "'a"
    and nodes' :: "'a set"
  assumes
    "BD_Security_TS_Network_Change_Nodes istate validTrans srcOf tgtOf nodes
      comOf tgtNodeOf sync \<phi> f \<gamma> g comOfV tgtNodeOfV syncV
      comOfO tgtNodeOfO syncO source nodes'"
locale BD_Security_TS_Network_New_Node_NoSource
  fixes validTrans :: "'nodeid => 'trans => bool"
    and srcOf :: "'nodeid => 'trans => 'state"
    and tgtOf :: "'nodeid => 'trans => 'state"
    and comOf :: "'nodeid => 'trans => com"
    and tgtNodeOf :: "'nodeid => 'trans => 'nodeid"
    and sync :: "'nodeid => 'trans => 'nodeid => 'trans => bool"
    and \<phi> :: "'nodeid => 'trans => bool"
    and \<gamma> :: "'nodeid => 'trans => bool"
    and T :: "'nodeid => 'trans => bool"
    and B :: "'nodeid => 'val list => 'val list => bool"
    and comOfV :: "'nodeid => 'val => com"
    and tgtNodeOfV :: "'nodeid => 'val => 'nodeid"
    and syncV :: "'nodeid => 'val => 'nodeid => 'val => bool"
    and comOfO :: "'nodeid => 'obs => com"
    and tgtNodeOfO :: "'nodeid => 'obs => 'nodeid"
    and syncO :: "'nodeid => 'obs => 'nodeid => 'obs => bool"
    and source :: "'nodeid"
    and istate :: "'nodeid => 'state"
    and nodes :: "'nodeid set"
    and f :: "'nodeid => 'trans => 'val"
    and g :: "'nodeid => 'trans => 'obs"
    and NID :: "'nodeid"
  assumes
    "BD_Security_TS_Network_New_Node_NoSource validTrans srcOf tgtOf comOf
      tgtNodeOf sync \<phi> \<gamma> comOfV tgtNodeOfV syncV comOfO
      tgtNodeOfO syncO source istate nodes f g NID"
See theory exports
### theory "Draft.System_Specification"
### 13.588s elapsed time, 31.179s cpu time, 7.661s GC time
Loading theory "Draft.Automation_Setup" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.Friend_Request" via "Draft.Friend_Request_Value_Setup" via "Draft.Friend_Request_Intro" via "Draft.Friend_Openness" via "Draft.Friend_State_Indistinguishability" via "Draft.Friend_Observation_Setup" via "Draft.Friend_Intro" via "Draft.Safety_Properties")
### theory "Draft.Automation_Setup"
### 0.041s elapsed time, 0.081s cpu time, 0.000s GC time
Loading theory "Draft.Safety_Properties" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.Friend_Request" via "Draft.Friend_Request_Value_Setup" via "Draft.Friend_Request_Intro" via "Draft.Friend_Openness" via "Draft.Friend_State_Indistinguishability" via "Draft.Friend_Observation_Setup" via "Draft.Friend_Intro")
### theory "Draft.Safety_Properties"
### 0.139s elapsed time, 0.306s cpu time, 0.063s GC time
Loading theory "Draft.Friend_Intro" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.Friend_Request" via "Draft.Friend_Request_Value_Setup" via "Draft.Friend_Request_Intro" via "Draft.Friend_Openness" via "Draft.Friend_State_Indistinguishability" via "Draft.Friend_Observation_Setup")
### theory "Draft.Friend_Intro"
### 0.022s elapsed time, 0.042s cpu time, 0.000s GC time
Loading theory "Draft.Friend_Observation_Setup" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.Friend_Request" via "Draft.Friend_Request_Value_Setup" via "Draft.Friend_Request_Intro" via "Draft.Friend_Openness" via "Draft.Friend_State_Indistinguishability")
locale FriendObservationSetup
  fixes UIDs :: "userID set"
Found termination order: "{}"
Found termination order: "{}"
locale FriendNetworkObservationSetup
  fixes UIDs :: "apiID => userID set"
### theory "Draft.Friend_Observation_Setup"
### 0.110s elapsed time, 0.222s cpu time, 0.000s GC time
Loading theory "Draft.Friend_State_Indistinguishability" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.Friend_Request" via "Draft.Friend_Request_Value_Setup" via "Draft.Friend_Request_Intro" via "Draft.Friend_Openness")
locale Friend
  fixes UIDs :: "userID set"
    and UID1 :: "userID"
    and UID2 :: "userID"
  assumes "Friend UIDs UID1 UID2"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Friend_State_Indistinguishability"
### 0.327s elapsed time, 0.692s cpu time, 0.088s GC time
Loading theory "Draft.Friend_Openness" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.Friend_Request" via "Draft.Friend_Request_Value_Setup" via "Draft.Friend_Request_Intro")
locale Friend
  fixes UIDs :: "userID set"
    and UID1 :: "userID"
    and UID2 :: "userID"
  assumes "Friend UIDs UID1 UID2"
Found termination order: "{}"
### theory "Draft.Friend_Openness"
### 0.101s elapsed time, 0.204s cpu time, 0.000s GC time
Loading theory "Draft.Friend_Request_Intro" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.Friend_Request" via "Draft.Friend_Request_Value_Setup")
### theory "Draft.Friend_Request_Intro"
### 0.022s elapsed time, 0.046s cpu time, 0.000s GC time
Loading theory "Draft.Friend_Request_Value_Setup" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network" via "Draft.Friend_Request")
Found termination order: "{}"
locale Friend
  fixes UIDs :: "userID set"
    and UID1 :: "userID"
    and UID2 :: "userID"
  assumes "Friend UIDs UID1 UID2"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Friend_Request_Value_Setup"
### 1.482s elapsed time, 3.413s cpu time, 0.305s GC time
Loading theory "Draft.Friend_Request" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network")
Found termination order: "{}"
Found termination order: "{}"
locale Friend
  fixes UIDs :: "userID set"
    and UID1 :: "userID"
    and UID2 :: "userID"
  assumes "Friend UIDs UID1 UID2"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "BO", "BC"
  Proving monotonicity ...
Found termination order: "{}"
[| eqButUID s' s1'; ~ open s'; BO vl'' vl1'';
   validValSeq vl1 (friends12 s1') (UID1 \<in>\<in> pendingFReqs s1' UID2)
    (UID2 \<in>\<in> pendingFReqs s1' UID1);
   (fv # fs' ## fv' = []) = ([fv'] = []);
   fv # fs' ## fv' ~= [] --> last (fv # fs' ## fv') = last [fv'];
   fv # fs' ## fv' = [] --> friendIDs s' = friendIDs s1';
   filter (Not o isFRVal) vl' =
   map FVal (fv # fs' ## fv') @ OVal True # vl'';
   filter (Not o isFRVal) vl1 = map FVal [fv'] @ OVal True # vl1'' |]
==> \<Delta>3 s' vl' s1' vl1
[| eqButUID s' s1'; ~ open s'; BO vl'' vl1'';
   validValSeq vl1 (friends12 s1') (UID1 \<in>\<in> pendingFReqs s1' UID2)
    (UID2 \<in>\<in> pendingFReqs s1' UID1);
   ([fv] = []) = ([fv] = []); [fv] ~= [] --> last [fv] = last [fv];
   [fv] = [] --> friendIDs s' = friendIDs s1';
   filter (Not o isFRVal) vl' = map FVal [fv] @ OVal True # vl'';
   filter (Not o isFRVal) vl1 = map FVal [fv] @ OVal True # vl1'' |]
==> \<Delta>3 s' vl' s1' vl1
### theory "Draft.Friend_Request"
### 0.853s elapsed time, 1.839s cpu time, 0.183s GC time
locale BD_Security_TS_Cut_Network
  fixes istate :: "'a => 'b"
    and validTrans :: "'a => 'c => bool"
    and srcOf :: "'a => 'c => 'b"
    and tgtOf :: "'a => 'c => 'b"
    and nodes :: "'a set"
    and comOf :: "'a => 'c => com"
    and tgtNodeOf :: "'a => 'c => 'a"
    and sync :: "'a => 'c => 'a => 'c => bool"
    and \<phi> :: "'a => 'c => bool"
    and f :: "'a => 'c => 'd"
    and \<gamma> :: "'a => 'c => bool"
    and g :: "'a => 'c => 'e"
    and T :: "'a => 'c => bool"
    and B :: "'a => 'd list => 'd list => bool"
    and comOfV :: "'a => 'd => com"
    and tgtNodeOfV :: "'a => 'd => 'a"
    and syncV :: "'a => 'd => 'a => 'd => bool"
    and comOfO :: "'a => 'e => com"
    and tgtNodeOfO :: "'a => 'e => 'a"
    and syncO :: "'a => 'e => 'a => 'e => bool"
    and source :: "'a"
    and nodesLeft :: "'a set"
    and nodesRight :: "'a set"
  assumes
    "BD_Security_TS_Cut_Network istate validTrans srcOf tgtOf nodes comOf
      tgtNodeOf sync \<phi> f \<gamma> g comOfV tgtNodeOfV syncV comOfO
      tgtNodeOfO syncO source nodesLeft nodesRight"
locale BD_Security_TS_Network
  fixes istate :: "'nodeid => 'state"
    and validTrans :: "'nodeid => 'trans => bool"
    and srcOf :: "'nodeid => 'trans => 'state"
    and tgtOf :: "'nodeid => 'trans => 'state"
    and nodes :: "'nodeid set"
    and comOf :: "'nodeid => 'trans => com"
    and tgtNodeOf :: "'nodeid => 'trans => 'nodeid"
    and sync :: "'nodeid => 'trans => 'nodeid => 'trans => bool"
    and \<phi> :: "'nodeid => 'trans => bool"
    and f :: "'nodeid => 'trans => 'val"
    and \<gamma> :: "'nodeid => 'trans => bool"
    and g :: "'nodeid => 'trans => 'obs"
    and T :: "'nodeid => 'trans => bool"
    and B :: "'nodeid => 'val list => 'val list => bool"
    and comOfV :: "'nodeid => 'val => com"
    and tgtNodeOfV :: "'nodeid => 'val => 'nodeid"
    and syncV :: "'nodeid => 'val => 'nodeid => 'val => bool"
    and comOfO :: "'nodeid => 'obs => com"
    and tgtNodeOfO :: "'nodeid => 'obs => 'nodeid"
    and syncO :: "'nodeid => 'obs => 'nodeid => 'obs => bool"
    and source :: "'nodeid"
  assumes
    "BD_Security_TS_Network istate validTrans srcOf tgtOf nodes comOf
      tgtNodeOf sync \<phi> f \<gamma> g comOfV tgtNodeOfV syncV comOfO
      tgtNodeOfO syncO source"
locale BD_Security_TS_Network_MergeSec
  fixes \<gamma> :: "'nodeid => 'trans => bool"
    and g :: "'nodeid => 'trans => 'a"
    and T :: "'nodeid => 'trans => bool"
    and B :: "'nodeid => 'sec list => 'sec list => bool"
    and comOfV :: "'nodeid => 'sec => com"
    and tgtNodeOfV :: "'nodeid => 'sec => 'nodeid"
    and syncV :: "'nodeid => 'sec => 'nodeid => 'sec => bool"
    and comOfO :: "'nodeid => 'a => com"
    and tgtNodeOfO :: "'nodeid => 'a => 'nodeid"
    and syncO :: "'nodeid => 'a => 'nodeid => 'a => bool"
    and source :: "'nodeid"
    and istate :: "'nodeid => 'state"
    and validTrans :: "'nodeid => 'trans => bool"
    and srcOf :: "'nodeid => 'trans => 'state"
    and tgtOf :: "'nodeid => 'trans => 'state"
    and nodes :: "'nodeid set"
    and comOf :: "'nodeid => 'trans => com"
    and tgtNodeOf :: "'nodeid => 'trans => 'nodeid"
    and sync :: "'nodeid => 'trans => 'nodeid => 'trans => bool"
    and \<phi> :: "'nodeid => 'trans => bool"
    and f :: "'nodeid => 'trans => 'sec"
    and mergeSec :: "'nodeid => 'sec => 'nodeid => 'sec => 'msec"
  assumes
    "BD_Security_TS_Network_MergeSec \<gamma> g comOfV tgtNodeOfV syncV
      comOfO tgtNodeOfO syncO source istate validTrans srcOf tgtOf nodes
      comOf tgtNodeOf sync \<phi> f"
Proofs for inductive predicate(s) "compSec"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
locale BD_Security_TS_Network
  fixes istate :: "'nodeid => 'state"
    and validTrans :: "'nodeid => 'trans => bool"
    and srcOf :: "'nodeid => 'trans => 'state"
    and tgtOf :: "'nodeid => 'trans => 'state"
    and nodes :: "'nodeid set"
    and comOf :: "'nodeid => 'trans => com"
    and tgtNodeOf :: "'nodeid => 'trans => 'nodeid"
    and sync :: "'nodeid => 'trans => 'nodeid => 'trans => bool"
    and \<phi> :: "'nodeid => 'trans => bool"
    and f :: "'nodeid => 'trans => 'val"
    and \<gamma> :: "'nodeid => 'trans => bool"
    and g :: "'nodeid => 'trans => 'obs"
    and T :: "'nodeid => 'trans => bool"
    and B :: "'nodeid => 'val list => 'val list => bool"
    and comOfV :: "'nodeid => 'val => com"
    and tgtNodeOfV :: "'nodeid => 'val => 'nodeid"
    and syncV :: "'nodeid => 'val => 'nodeid => 'val => bool"
    and comOfO :: "'nodeid => 'obs => com"
    and tgtNodeOfO :: "'nodeid => 'obs => 'nodeid"
    and syncO :: "'nodeid => 'obs => 'nodeid => 'obs => bool"
    and source :: "'nodeid"
  assumes
    "BD_Security_TS_Network istate validTrans srcOf tgtOf nodes comOf
      tgtNodeOf sync \<phi> f \<gamma> g comOfV tgtNodeOfV syncV comOfO
      tgtNodeOfO syncO source"
Proofs for inductive predicate(s) "srcSyncV"
  Proving monotonicity ...
Proofs for inductive predicate(s) "binSyncV"
  Proving monotonicity ...
locale BD_Security_TS_Network_Preserve_Source_Security
  fixes istate :: "'a => 'b"
    and validTrans :: "'a => 'c => bool"
    and srcOf :: "'a => 'c => 'b"
    and tgtOf :: "'a => 'c => 'b"
    and nodes :: "'a set"
    and comOf :: "'a => 'c => com"
    and tgtNodeOf :: "'a => 'c => 'a"
    and sync :: "'a => 'c => 'a => 'c => bool"
    and \<phi> :: "'a => 'c => bool"
    and f :: "'a => 'c => 'd"
    and \<gamma> :: "'a => 'c => bool"
    and g :: "'a => 'c => 'e"
    and T :: "'a => 'c => bool"
    and B :: "'a => 'd list => 'd list => bool"
    and comOfV :: "'a => 'd => com"
    and tgtNodeOfV :: "'a => 'd => 'a"
    and syncV :: "'a => 'd => 'a => 'd => bool"
    and comOfO :: "'a => 'e => com"
    and tgtNodeOfO :: "'a => 'e => 'a"
    and syncO :: "'a => 'e => 'a => 'e => bool"
    and source :: "'a"
  assumes
    "BD_Security_TS_Network_Preserve_Source_Security istate validTrans srcOf
      tgtOf nodes comOf tgtNodeOf sync \<phi> f \<gamma> g T B comOfV
      tgtNodeOfV syncV comOfO tgtNodeOfO syncO source"
Found termination order: "{}"
Found termination order: "{}"
locale BD_Security_TS_Network_getTgtV
  fixes istate :: "'a => 'b"
    and validTrans :: "'a => 'c => bool"
    and srcOf :: "'a => 'c => 'b"
    and tgtOf :: "'a => 'c => 'b"
    and nodes :: "'a set"
    and comOf :: "'a => 'c => com"
    and tgtNodeOf :: "'a => 'c => 'a"
    and sync :: "'a => 'c => 'a => 'c => bool"
    and \<phi> :: "'a => 'c => bool"
    and f :: "'a => 'c => 'd"
    and \<gamma> :: "'a => 'c => bool"
    and g :: "'a => 'c => 'e"
    and T :: "'a => 'c => bool"
    and B :: "'a => 'd list => 'd list => bool"
    and comOfV :: "'a => 'd => com"
    and tgtNodeOfV :: "'a => 'd => 'a"
    and syncV :: "'a => 'd => 'a => 'd => bool"
    and comOfO :: "'a => 'e => com"
    and tgtNodeOfO :: "'a => 'e => 'a"
    and syncO :: "'a => 'e => 'a => 'e => bool"
    and source :: "'a"
    and getTgtV :: "'d => 'd"
  assumes
    "BD_Security_TS_Network_getTgtV istate validTrans srcOf tgtOf nodes
      comOf tgtNodeOf sync \<phi> f \<gamma> g comOfV tgtNodeOfV syncV
      comOfO tgtNodeOfO syncO source getTgtV"
locale BD_Security_TS_Network_Preserve_Source_Security_getTgtV
  fixes istate :: "'a => 'b"
    and validTrans :: "'a => 'c => bool"
    and srcOf :: "'a => 'c => 'b"
    and tgtOf :: "'a => 'c => 'b"
    and nodes :: "'a set"
    and comOf :: "'a => 'c => com"
    and tgtNodeOf :: "'a => 'c => 'a"
    and sync :: "'a => 'c => 'a => 'c => bool"
    and \<phi> :: "'a => 'c => bool"
    and f :: "'a => 'c => 'd"
    and \<gamma> :: "'a => 'c => bool"
    and g :: "'a => 'c => 'e"
    and T :: "'a => 'c => bool"
    and B :: "'a => 'd list => 'd list => bool"
    and comOfV :: "'a => 'd => com"
    and tgtNodeOfV :: "'a => 'd => 'a"
    and syncV :: "'a => 'd => 'a => 'd => bool"
    and comOfO :: "'a => 'e => com"
    and tgtNodeOfO :: "'a => 'e => 'a"
    and syncO :: "'a => 'e => 'a => 'e => bool"
    and source :: "'a"
    and getTgtV :: "'d => 'd"
  assumes
    "BD_Security_TS_Network_Preserve_Source_Security_getTgtV istate
      validTrans srcOf tgtOf nodes comOf tgtNodeOf sync \<phi> f \<gamma> g
      T B comOfV tgtNodeOfV syncV comOfO tgtNodeOfO syncO source getTgtV"
locale BD_Security_TS_Network'
  fixes istate :: "'nodeid => 'state"
    and validTrans :: "'nodeid => 'trans => bool"
    and srcOf :: "'nodeid => 'trans => 'state"
    and tgtOf :: "'nodeid => 'trans => 'state"
    and nodes :: "'nodeid set"
    and comOf :: "'nodeid => 'trans => com"
    and tgtNodeOf :: "'nodeid => 'trans => 'nodeid"
    and sync :: "'nodeid => 'trans => 'nodeid => 'trans => bool"
    and \<phi> :: "'nodeid => 'trans => bool"
    and f :: "'nodeid => 'trans => 'val"
    and \<gamma> :: "'nodeid => 'trans => bool"
    and g :: "'nodeid => 'trans => 'obs"
    and T :: "'nodeid => 'trans => bool"
    and B :: "'nodeid => 'val list => 'val list => bool"
    and source :: "'nodeid"
  assumes
    "BD_Security_TS_Network' istate validTrans srcOf tgtOf nodes comOf
      tgtNodeOf sync \<phi> f \<gamma> g source"
Found termination order: "size_list size <*mlex*> {}"
### theory "BD_Security_Compositional.Composing_Security_Network"
### 20.449s elapsed time, 38.489s cpu time, 6.960s GC time
Loading theory "Draft.API_Network" (required by "Draft.Friend_Request_NetworkMoreTemplates" via "Draft.Friend_Request_Network")
locale Network
  fixes AIDs :: "apiID set"
  assumes "Network AIDs"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.API_Network"
### 2.441s elapsed time, 3.731s cpu time, 0.298s GC time
Loading theory "Draft.Friend_Request_Network" (required by "Draft.Friend_Request_NetworkMoreTemplates")
locale FriendRequestNetwork
  fixes AIDs :: "apiID set"
    and UIDs :: "apiID => userID set"
    and AID :: "apiID"
    and UID1 :: "userID"
    and UID2 :: "userID"
  assumes "FriendRequestNetwork AIDs UIDs AID UID1 UID2"
### theory "Draft.Friend_Request_Network"
### 1.831s elapsed time, 1.949s cpu time, 0.141s GC time
Loading theory "Draft.Friend_Request_NetworkMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Friend_Request_NetworkMoreTemplates"
### 0.762s elapsed time, 1.015s cpu time, 0.092s GC time
val it = (): unit
