Loading theory "Datatype_Order_Generator.Derive_Aux" (required by "Draft.Old_Show_InstancesTemplates" via "Draft.Old_Show_Instances" via "Draft.Old_Show_Generator")
Loading theory "Draft.Old_Show" (required by "Draft.Old_Show_InstancesTemplates" via "Draft.Old_Show_Instances" via "Draft.Old_Show_Generator")
Loading theory "Draft.Templates" (required by "Draft.Old_Show_InstancesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.223s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Old_Show_InstancesTemplates")
class show = type +
  fixes shows_prec :: "nat => 'a => char list => char list"
    and shows_list :: "'a list => char list => char list"
  assumes
    "assoc": "!!d x r s. shows_prec d x r @ s = shows_prec d x (r @ s)"
      "!!xs r s. shows_list xs r @ s = shows_list xs (r @ s)"
### Rewrite rule not in simpset:
### [| distinct (map fst ?xys3); (?x3, ?y3) : set ?xys3 |]
### ==> map_of ?xys3 ?x3 = Some ?y3 == True
### Rewrite rule not in simpset:
### ?m2.3 ?k3 = Some ?k'3 ==>
### (?m1.3 \<circ>\<^sub>m ?m2.3) ?k3 = ?m1.3 ?k'3 == True
### Rewrite rule not in simpset:
### ?n3 ?k3 = Some ?xx3 ==> (?m3 ++ ?n3) ?k3 = Some ?xx3 == True
### ML warning (line 140 of "$AFP/Datatype_Order_Generator/derive_aux.ML"):
### Value identifier (sort) has not been referenced.
signature DERIVE_AUX =
  sig
    val HOLogic_list_all: term list * term -> term
    val HOLogic_list_conj: term list -> term
    val HOLogic_list_implies: term list * term -> term
    val define_overloaded:
       string * term -> local_theory -> thm * local_theory
    val define_overloaded_generic:
       Attrib.binding * term -> local_theory -> thm * local_theory
    val dt_number_recs: Old_Datatype_Aux.dtyp list -> int * (int * int) list
    val inductive_thm:
       theory ->
         (term list * term list) list ->
           thm ->
             sort ->
               (Proof.context ->
                  int ->
                    thm list ->
                      thm list -> term list -> term list -> tactic)
                 -> thm
    val mk_Some: term -> term
    val mk_binary_thm:
       (theory ->
          Old_Datatype_Aux.info ->
            sort -> 'a -> (term list * term list) list)
         ->
         (theory ->
            Old_Datatype_Aux.info ->
              sort -> (int -> term) * ('b * int * int) list)
           ->
           string ->
             theory ->
               Old_Datatype_Aux.info ->
                 'a ->
                   sort ->
                     (Proof.context ->
                        thm list ->
                          thm list ->
                            thm ->
                              (Proof.context -> thm list -> tactic) ->
                                int ->
                                  term list ->
                                    term list ->
                                      string * Old_Datatype_Aux.dtyp list ->
  (Old_Datatype_Aux.dtyp -> term -> ...) -> tactic)
                       -> thm
    val mk_case_tac:
       Proof.context ->
         term option list list ->
           thm ->
             (Proof.context * int * thm list * (string * cterm) list ->
                tactic)
               -> tactic
    val mk_def: typ -> string -> term -> term
    val mk_solve_with_tac: Proof.context -> thm list -> tactic -> tactic
    val mk_xs: theory -> Old_Datatype_Aux.info -> sort -> int -> int -> term
    val my_print_tac: Proof.context -> string -> tactic
    val my_simp_set: simpset
    val prop_trm_to_major_imp: (term list * 'a) list -> term * 'a
    val rulify_only_asm: Proof.context -> thm -> thm
    val split_last: 'a list -> 'a list * 'a
    val typ_and_vs_of_typname:
       theory -> string -> sort -> typ * (string * sort) list
    val typ_subst_for_sort:
       theory -> Old_Datatype_Aux.info -> sort -> typ -> typ
  end
structure Derive_Aux: DERIVE_AUX
### theory "Datatype_Order_Generator.Derive_Aux"
### 0.154s elapsed time, 0.476s cpu time, 0.026s GC time
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
val it = (): unit
instantiation
  char :: show
  shows_prec_char == shows_prec :: nat => char => char list => char list
  shows_list_char == shows_list :: char list => char list => char list
instantiation
  list :: (show) show
  shows_prec_list == shows_prec :: nat => 'a list => char list => char list
  shows_list_list == shows_list :: 'a list list => char list => char list
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
### theory "Draft.Old_Show"
### 0.454s elapsed time, 1.097s cpu time, 0.085s GC time
Loading theory "Draft.Old_Show_Generator" (required by "Draft.Old_Show_InstancesTemplates" via "Draft.Old_Show_Instances")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.535s elapsed time, 1.168s cpu time, 0.085s GC time
signature SHOW_GENERATOR =
  sig
    val derive: string -> string -> theory -> theory
    val mk_shows_idx:
       theory ->
         Old_Datatype_Aux.info -> (int -> term) * (term * int * int) list
    val mk_shows_list: typ -> term
  end
structure Show_Generator: SHOW_GENERATOR
### theory "Draft.Old_Show_Generator"
### 0.171s elapsed time, 0.317s cpu time, 0.000s GC time
Loading theory "Draft.Old_Show_Instances" (required by "Draft.Old_Show_InstancesTemplates")
creating show-functions for data type bool
registered bool in class show
creating show-functions for data type option
registered option in class show
creating show-functions for data type sum
registered sum in class show
instantiation
  unit :: show
  shows_prec_unit == shows_prec :: nat => unit => char list => char list
  shows_list_unit == shows_list :: unit list => char list => char list
instantiation
  prod :: (show, show) show
  shows_prec_prod == shows_prec :: nat => 'a * 'b => char list => char list
  shows_list_prod == shows_list :: ('a * 'b) list => char list => char list
instantiation
  nat :: show
  shows_prec_nat == shows_prec :: nat => nat => char list => char list
  shows_list_nat == shows_list :: nat list => char list => char list
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
instantiation
  int :: show
  shows_prec_int == shows_prec :: nat => int => char list => char list
  shows_list_int == shows_list :: int list => char list => char list
instantiation
  rat :: show
  shows_prec_rat == shows_prec :: nat => rat => char list => char list
  shows_list_rat == shows_list :: rat list => char list => char list
### theory "Draft.Old_Show_Instances"
### 0.549s elapsed time, 0.579s cpu time, 0.043s GC time
Loading theory "Draft.Old_Show_InstancesTemplates"
val templateLemmas =
   [("Old_Show_Instances.assoc_int",
     "shows_prec ?d ?i ?r @ ?s = shows_prec ?d ?i (?r @ ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Old_Show_Instances.assoc_nat",
     "shows_prec ?d ?n ?r @ ?s = shows_prec ?d ?n (?r @ ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Old_Show_Instances.assoc_rat",
     "shows_prec ?d ?x ?r @ ?s = shows_prec ?d ?x (?r @ ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Old_Show_Instances.assoc_prod",
     "shows_prec ?d ?p ?r @ ?s = shows_prec ?d ?p (?r @ ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Old_Show_Instances.assoc_unit",
     "shows_prec ?d ?x ?r @ ?s = shows_prec ?d ?x (?r @ ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Old_Show_InstancesTemplates"
### 0.294s elapsed time, 0.401s cpu time, 0.024s GC time
val it = (): unit
