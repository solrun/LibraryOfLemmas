Loading theory "Draft.Fisher_Yates" (required by "Draft.Fisher_YatesTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Fisher_YatesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Fisher_YatesTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.093s elapsed time, 0.317s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.143s elapsed time, 0.424s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Fisher_YatesTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Fisher_Yates"
### 0.324s elapsed time, 0.798s cpu time, 0.041s GC time
### theory "HOL-Library.BigO"
### 0.662s elapsed time, 2.234s cpu time, 0.131s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Fisher_YatesTemplates")
"pmf_of_alist
  [(''dcba'', 1 / 24), (''cdba'', 1 / 24), (''dbca'', 1 / 24),
   (''bdca'', 1 / 24), (''cbda'', 1 / 24), (''bcda'', 1 / 24),
   (''dcab'', 1 / 24), (''cdab'', 1 / 24), (''dacb'', 1 / 24),
   (''adcb'', 1 / 24), (''cadb'', 1 / 24), (''acdb'', 1 / 24),
   (''dbac'', 1 / 24), (''bdac'', 1 / 24), (''dabc'', 1 / 24),
   (''adbc'', 1 / 24), (''badc'', 1 / 24), (''abdc'', 1 / 24),
   (''cbad'', 1 / 24), (''bcad'', 1 / 24), (''cabd'', 1 / 24),
   (''acbd'', 1 / 24), (''bacd'', 1 / 24), (''abcd'', 1 / 24)]"
  :: "char list pmf"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.696s elapsed time, 2.496s cpu time, 0.477s GC time
Loading theory "Draft.Fisher_YatesTemplates"
"pmf_of_alist
  [(''bcda'', 1 / 24), (''cbda'', 1 / 24), (''cdba'', 1 / 24),
   (''dcba'', 1 / 24), (''bdca'', 1 / 24), (''dbca'', 1 / 24),
   (''dcab'', 1 / 24), (''cdab'', 1 / 24), (''cadb'', 1 / 24),
   (''acdb'', 1 / 24), (''dacb'', 1 / 24), (''adcb'', 1 / 24),
   (''bdac'', 1 / 24), (''dbac'', 1 / 24), (''dabc'', 1 / 24),
   (''adbc'', 1 / 24), (''badc'', 1 / 24), (''abdc'', 1 / 24),
   (''bcad'', 1 / 24), (''cbad'', 1 / 24), (''cabd'', 1 / 24),
   (''acbd'', 1 / 24), (''bacd'', 1 / 24), (''abcd'', 1 / 24)]"
  :: "char list pmf"
"pmf_of_alist
  [(''abcd'', 1 / 24), (''abdc'', 1 / 24), (''acbd'', 1 / 24),
   (''acdb'', 1 / 24), (''adcb'', 1 / 24), (''adbc'', 1 / 24),
   (''bacd'', 1 / 24), (''badc'', 1 / 24), (''bcad'', 1 / 24),
   (''bcda'', 1 / 24), (''bdca'', 1 / 24), (''bdac'', 1 / 24),
   (''cbad'', 1 / 24), (''cbda'', 1 / 24), (''cabd'', 1 / 24),
   (''cadb'', 1 / 24), (''cdab'', 1 / 24), (''cdba'', 1 / 24),
   (''dbca'', 1 / 24), (''dbac'', 1 / 24), (''dcba'', 1 / 24),
   (''dcab'', 1 / 24), (''dacb'', 1 / 24), (''dabc'', 1 / 24)]"
  :: "char list pmf"
val templateLemmas =
   [("Fisher_Yates.fisher_yates_correct", "fisher_yates ?xs = shuffle ?xs",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Fisher_Yates.fisher_yates_alt_aux_correct",
     "fisher_yates_alt ?xs = shuffle ?xs",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Fisher_Yates.length_swap", "length (swap ?xs ?i ?j) = length ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("Fisher_Yates.shuffle_singleton", "shuffle [?x] = return_pmf [?x]",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)))),
    ("Fisher_Yates.swap_eq_Nil_iff", "(swap ?xs ?i ?j = []) = (?xs = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0),
       template_equation (template_var 2, template_hole 0))),
    ("Fisher_Yates.fisher_yates_aux_correct",
     "fisher_yates_aux ?i ?xs =
      map_pmf ((@) (take ?i ?xs)) (shuffle (drop ?i ?xs))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Fisher_Yates.hd_swap_0",
     "?i < length ?xs ==> hd (swap ?xs 0 ?i) = ?xs ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Fisher_Yates.mset_swap",
     "[| ?i < length ?xs; ?j < length ?xs |]
      ==> mset (swap ?xs ?i ?j) = mset ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("Fisher_Yates.fisher_yates_alt_aux_altdef",
     "?i < length ?xs ==>
      fisher_yates_alt_aux ?i ?xs =
      map_pmf rev (fisher_yates_aux (length ?xs - ?i - 1) (rev ?xs))",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 7, template_var 0)),
                     template_var 1)),
                 template_hole 0)),
             template_app (template_hole 3, template_var 0)))))),
    ("Fisher_Yates.swap_swap",
     "[| ?i < length ?xs; ?j < length ?xs |]
      ==> swap (swap ?xs ?i ?j) ?j ?i = ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0)),
             template_var 0),
           template_var 2),
         template_var 1))),
    ("Fisher_Yates.map_swap",
     "[| ?i < length ?xs; ?j < length ?xs |]
      ==> map ?f (swap ?xs ?i ?j) = swap (map ?f ?xs) ?i ?j",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 4, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             template_var 3),
           template_var 1)))),
    ("Fisher_Yates.pmf_of_set_permutations_of_multiset_nonempty",
     "?A ~= {#} ==>
      pmf_of_set (permutations_of_multiset ?A) =
      pmf_of_multiset ?A >>=
      (%x. pmf_of_set (permutations_of_multiset (?A - {#x#})) >>=
           (%xs. return_pmf (x # xs)))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_equation
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           t_empty)))),
    ("Fisher_Yates.integral_pmf_of_multiset",
     "?A ~= {#} ==>
      measure_pmf.expectation (pmf_of_multiset ?A) ?f =
      (SUM x:set_mset ?A. real (count ?A x) * ?f x) / real (size ?A)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 11))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 1))),
           t_empty),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 1, template_var 1))),
           template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 1)))))),
    ("Fisher_Yates.pmf_bind_pmf_of_multiset",
     "?A ~= {#} ==>
      pmf (pmf_of_multiset ?A >>= ?f) ?y =
      (SUM x:set_mset ?A. real (count ?A x) * pmf (?f x) ?y) /
      real (size ?A)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 11))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 1, template_var 2))),
           template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 2)))))),
    ("Fisher_Yates.shuffle_fisher_yates_step",
     "?xs ~= [] ==>
      shuffle ?xs =
      pmf_of_set {..<length ?xs} >>=
      (%i. let ys = swap ?xs 0 i
           in shuffle (tl ys) >>= (%zs. return_pmf (hd ys # zs)))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 14))],
       template_equation
        (template_app (template_hole 12, template_var 0),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 0)))),
           t_empty)))),
    ("Fisher_Yates.pmf_map_inj_inv",
     "[| inj_on ?f (set_pmf ?p); !!x. ?f' (?f x) = x |]
      ==> pmf (map_pmf ?f ?p) ?x =
          (if ?x : range ?f then pmf ?p (?f' ?x) else 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_hole 2))),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_var 1, template_var 0))),
           template_hole 0)))),
    ("Fisher_Yates.nth_swap",
     "[| ?i < length ?xs; ?j < length ?xs |]
      ==> swap ?xs ?i ?j ! ?k =
          (if ?k = ?i then ?xs ! ?j
           else if ?k = ?j then ?xs ! ?i else ?xs ! ?k)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 2))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_app (template_hole 2, template_var 2),
                      template_var 3),
                    template_var 1)),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 0)))
             ))))]:
   (string * thm * template) list
### theory "Draft.Fisher_YatesTemplates"
### 1.148s elapsed time, 1.472s cpu time, 0.167s GC time
val it = (): unit
