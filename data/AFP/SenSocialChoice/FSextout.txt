Loading theory "Draft.FSext" (required by "Draft.FSextMoreTemplates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FSextMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FSextMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FSextMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.551s cpu time, 0.046s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FSextMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.FSext"
### 0.170s elapsed time, 0.696s cpu time, 0.046s GC time
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.242s elapsed time, 0.917s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FSextMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.326s elapsed time, 1.179s cpu time, 0.134s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FSextMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.714s elapsed time, 2.188s cpu time, 0.273s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.752s elapsed time, 2.169s cpu time, 0.186s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.789s elapsed time, 4.016s cpu time, 0.792s GC time
Loading theory "Draft.Templates" (required by "Draft.FSextMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.062s elapsed time, 0.110s cpu time, 0.041s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FSextMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.458s elapsed time, 0.465s cpu time, 0.000s GC time
Loading theory "Draft.FSextMoreTemplates"
val templateLemmas =
   [("FSext.has_0", "has 0 ?S",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("FSext.hasI", "hasw ?xs ?S ==> has (length ?xs) ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("FSext.has_suc_subset", "has (Suc ?n) ?S ==> {} < ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_inequation (less_than, template_hole 0, template_var 0))),
    ("FSext.has_notempty_1", "?S ~= {} ==> has 1 ?S",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("FSext.card_has", "card ?S = ?n ==> has ?n ?S",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("FSext.has_suc_notempty", "has (Suc ?n) ?S ==> {} ~= ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_negation
        (template_equation (template_hole 0, template_var 0)))),
    ("FSext.bij_betw_onto", "bij_betw ?f ?A ?B ==> ?f ` ?A = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("FSext.finite_list", "finite ?A ==> EX l. set l = ?A & distinct l",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("FSext.card_has_rev", "[| finite ?S; has ?n ?S |] ==> ?n <= card ?S",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("FSext.has_le_has", "[| has ?n ?S; ?n' <= ?n |] ==> has ?n' ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("FSext.has_ge_has_not",
     "[| ~ has ?n ?S; ?n <= ?n' |] ==> ~ has ?n' ?S",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)
                )
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)
               )
           ))),
    ("FSext.has_eq", "[| has ?n ?S; ~ has (Suc ?n) ?S |] ==> card ?S = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 2, template_var 1)),
                  template_var 0)
                )
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("FSext.has_extend_witness",
     "[| has ?n ?S; set ?xs <= ?S; length ?xs < ?n |] ==> set ?xs < ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 0),
          template_var 1),
        template_inequation
         (less_than, template_app (template_hole 1, template_var 0),
          template_var 2)],
       template_inequation
        (less_than, template_app (template_hole 3, template_var 0),
         template_var 1))),
    ("FSext.has_witness_two",
     "[| has ?n ?S; 2 <= ?n |] ==> EX x y. hasw [x, y] ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 1)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("FSext.has_extend_witness'",
     "[| has ?n ?S; hasw ?xs ?S; length ?xs < ?n |]
      ==> EX x. hasw (x # ?xs) ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            ),
        template_inequation
         (less_than, template_app (template_hole 2, template_var 0),
          template_var 2)],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("FSext.card_compose_bij",
     "bij_betw ?f ?A ?A ==> card {a: ?A. ?P (?f a)} = card {a: ?A. ?P a}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("FSext.finite_set_singleton_contra",
     "[| finite ?S; ?S ~= {}; 1 < card ?S ==> False |] ==> EX j. ?S = {j}",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_implication
         ([template_inequation
            (less_than, template_hole 4,
             template_app (template_hole 3, template_var 0))],
          template_predicate (template_hole 2))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("FSext.has_witness_three",
     "[| has ?n ?S; 3 <= ?n |] ==> EX x y z. hasw [x, y, z] ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 1)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("FSext.card_eq_bij",
     "[| card ?A = card ?B; finite ?A; finite ?B;
         !!f. bij_betw f ?A ?B ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("FSext.inj_on_UnI",
     "[| inj_on ?f ?A; inj_on ?f ?B;
         ?f ` (?A - ?B) Int ?f ` (?B - ?A) = {} |]
      ==> inj_on ?f (?A Un ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0))),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1))),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FSext.finite_subset_induct'",
     "[| finite ?F; ?F <= ?A; ?P {};
         !!a F.
            [| finite F; a : ?A; F <= ?A; a ~: F; ?P F |]
            ==> ?P (insert a F) |]
      ==> ?P ?F",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_var 0, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("FSext.bij_complete",
     "[| finite ?C; ?A <= ?C; ?B <= ?C; bij_betw ?f ?A ?B;
         !!f'. [| bij_betw f' ?C ?C; !!x. x : ?A ==> f' x = ?f x;
                  !!x. x : ?C - ?A ==> f' x : ?C - ?B |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 4)),
        template_inequation (less_equals, template_var 3, template_var 4),
        template_inequation (less_equals, template_var 2, template_var 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("FSext.bij_combine",
     "[| ?A <= ?B; ?C <= ?D; bij_betw ?f ?A ?C;
         bij_betw ?g (?B - ?A) (?D - ?C);
         !!h. [| bij_betw h ?B ?D; !!x. x : ?A ==> h x = ?f x;
                 !!x. x : ?B - ?A ==> h x = ?g x |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation (less_equals, template_var 6, template_var 5),
        template_inequation (less_equals, template_var 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 6),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 6)),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 4))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("FSext.card_greater",
     "[| finite ?A; card {x: ?A. ?Q x} < card {x: ?A. ?P x};
         !!C. [| card ({x: ?A. ?P x} - C) = card {x: ?A. ?Q x}; C ~= {};
                 C <= {x: ?A. ?P x} |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_inequation
         (less_than,
          template_app
           (template_hole 10, template_app (template_hole 9, t_empty)),
          template_app
           (template_hole 10, template_app (template_hole 9, t_empty))),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.FSextMoreTemplates"
### 0.288s elapsed time, 0.408s cpu time, 0.054s GC time
val it = (): unit
