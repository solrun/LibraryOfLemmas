   [("FSext.has_0", "has 0 ?S",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("FSext.hasI", "hasw ?xs ?S ==> has (length ?xs) ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("FSext.has_suc_subset", "has (Suc ?n) ?S ==> {} < ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_inequation (less_than, template_hole 0, template_var 0))),
    ("FSext.has_notempty_1", "?S ~= {} ==> has 1 ?S",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("FSext.card_has", "card ?S = ?n ==> has ?n ?S",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("FSext.has_suc_notempty", "has (Suc ?n) ?S ==> {} ~= ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_negation
        (template_equation (template_hole 0, template_var 0)))),
    ("FSext.bij_betw_onto", "bij_betw ?f ?A ?B ==> ?f ` ?A = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("FSext.finite_list", "finite ?A ==> EX l. set l = ?A & distinct l",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("FSext.card_has_rev", "[| finite ?S; has ?n ?S |] ==> ?n <= card ?S",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("FSext.has_le_has", "[| has ?n ?S; ?n' <= ?n |] ==> has ?n' ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("FSext.has_ge_has_not",
     "[| ~ has ?n ?S; ?n <= ?n' |] ==> ~ has ?n' ?S",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)
                )
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)
               )
           ))),
    ("FSext.has_eq", "[| has ?n ?S; ~ has (Suc ?n) ?S |] ==> card ?S = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 2, template_var 1)),
                  template_var 0)
                )
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("FSext.has_extend_witness",
     "[| has ?n ?S; set ?xs <= ?S; length ?xs < ?n |] ==> set ?xs < ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 0),
          template_var 1),
        template_inequation
         (less_than, template_app (template_hole 1, template_var 0),
          template_var 2)],
       template_inequation
        (less_than, template_app (template_hole 3, template_var 0),
         template_var 1))),
    ("FSext.has_witness_two",
     "[| has ?n ?S; 2 <= ?n |] ==> EX x y. hasw [x, y] ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 1)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("FSext.has_extend_witness'",
     "[| has ?n ?S; hasw ?xs ?S; length ?xs < ?n |]
      ==> EX x. hasw (x # ?xs) ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            ),
        template_inequation
         (less_than, template_app (template_hole 2, template_var 0),
          template_var 2)],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("FSext.card_compose_bij",
     "bij_betw ?f ?A ?A ==> card {a: ?A. ?P (?f a)} = card {a: ?A. ?P a}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("FSext.finite_set_singleton_contra",
     "[| finite ?S; ?S ~= {}; 1 < card ?S ==> False |] ==> EX j. ?S = {j}",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_implication
         ([template_inequation
            (less_than, template_hole 4,
             template_app (template_hole 3, template_var 0))],
          template_predicate (template_hole 2))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("FSext.has_witness_three",
     "[| has ?n ?S; 3 <= ?n |] ==> EX x y z. hasw [x, y, z] ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_hole 4)),
          template_var 1)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("FSext.card_eq_bij",
     "[| card ?A = card ?B; finite ?A; finite ?B;
         !!f. bij_betw f ?A ?B ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("FSext.inj_on_UnI",
     "[| inj_on ?f ?A; inj_on ?f ?B;
         ?f ` (?A - ?B) Int ?f ` (?B - ?A) = {} |]
      ==> inj_on ?f (?A Un ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0))),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1))),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FSext.finite_subset_induct'",
     "[| finite ?F; ?F <= ?A; ?P {};
         !!a F.
            [| finite F; a : ?A; F <= ?A; a ~: F; ?P F |]
            ==> ?P (insert a F) |]
      ==> ?P ?F",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_var 0, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("FSext.bij_complete",
     "[| finite ?C; ?A <= ?C; ?B <= ?C; bij_betw ?f ?A ?B;
         !!f'. [| bij_betw f' ?C ?C; !!x. x : ?A ==> f' x = ?f x;
                  !!x. x : ?C - ?A ==> f' x : ?C - ?B |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 4)),
        template_inequation (less_equals, template_var 3, template_var 4),
        template_inequation (less_equals, template_var 2, template_var 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("FSext.bij_combine",
     "[| ?A <= ?B; ?C <= ?D; bij_betw ?f ?A ?C;
         bij_betw ?g (?B - ?A) (?D - ?C);
         !!h. [| bij_betw h ?B ?D; !!x. x : ?A ==> h x = ?f x;
                 !!x. x : ?B - ?A ==> h x = ?g x |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation (less_equals, template_var 6, template_var 5),
        template_inequation (less_equals, template_var 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 6),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 1),
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 6)),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 4))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("FSext.card_greater",
     "[| finite ?A; card {x: ?A. ?Q x} < card {x: ?A. ?P x};
         !!C. [| card ({x: ?A. ?P x} - C) = card {x: ?A. ?Q x}; C ~= {};
                 C <= {x: ?A. ?P x} |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_inequation
         (less_than,
          template_app
           (template_hole 10, template_app (template_hole 9, t_empty)),
          template_app
           (template_hole 10, template_app (template_hole 9, t_empty))),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0)))]
