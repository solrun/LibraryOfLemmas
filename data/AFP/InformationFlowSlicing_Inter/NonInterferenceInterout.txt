Loading theory "HOL-Library.Function_Algebras" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.515s cpu time, 0.043s GC time
Loading theory "HRB-Slicing.AuxLemmas" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter" via "HRB-Slicing.FundamentalProperty" via "HRB-Slicing.WeakSimulation" via "HRB-Slicing.Slice" via "HRB-Slicing.SCDObservable" via "HRB-Slicing.Observable" via "HRB-Slicing.ReturnAndCallNodes" via "HRB-Slicing.CFG" via "HRB-Slicing.BasicDefs")
### theory "HRB-Slicing.AuxLemmas"
### 0.031s elapsed time, 0.119s cpu time, 0.000s GC time
Loading theory "HRB-Slicing.BasicDefs" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter" via "HRB-Slicing.FundamentalProperty" via "HRB-Slicing.WeakSimulation" via "HRB-Slicing.Slice" via "HRB-Slicing.SCDObservable" via "HRB-Slicing.Observable" via "HRB-Slicing.ReturnAndCallNodes" via "HRB-Slicing.CFG")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.214s elapsed time, 0.863s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### Ambiguous input (line 69 of "$AFP/HRB-Slicing/StaticInter/BasicDefs.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>BasicDefs.fun_upds"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>BasicDefs.fun_upds" ("_position" f) ("_position" xs)
###             ("_position" ys))
###           ("_position" V))
###         ("_position" f'))
###       ("_position" xs) ("_position" ys))
###     ("_position" V)))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>BasicDefs.fun_upds" ("_position" f) ("_position" xs)
###       ("_position" ys))
###     ("_cargs"
###       ("\<^const>BasicDefs.fun_upds"
###         ("\<^const>HOL.eq" ("_position" V) ("_position" f'))
###         ("_position" xs) ("_position" ys))
###       ("_position" V))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>BasicDefs.fun_upds" ("_position" f) ("_position" xs)
###         ("_position" ys))
###       ("_position" V))
###     ("_applC"
###       ("\<^const>BasicDefs.fun_upds" ("_position" f') ("_position" xs)
###         ("_position" ys))
###       ("_position" V))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Nat_Bijection"
### 0.344s elapsed time, 1.372s cpu time, 0.133s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.037s elapsed time, 3.928s cpu time, 0.910s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 141 of "$AFP/HRB-Slicing/StaticInter/BasicDefs.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" et)
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" et)
###                 ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                   ("_position" p) ("_position" f))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" et)
###                 ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                   ("_position" p) ("_position" f))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" et)
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                 ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###                 ("_position" p) ("_position" f)))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                 ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###                 ("_position" p) ("_position" f)))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HRB-Slicing.BasicDefs"
### 1.317s elapsed time, 4.850s cpu time, 0.972s GC time
Loading theory "HRB-Slicing.CFG" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter" via "HRB-Slicing.FundamentalProperty" via "HRB-Slicing.WeakSimulation" via "HRB-Slicing.Slice" via "HRB-Slicing.SCDObservable" via "HRB-Slicing.Observable" via "HRB-Slicing.ReturnAndCallNodes")
### theory "HOL-Library.Stream"
### 1.128s elapsed time, 4.102s cpu time, 0.882s GC time
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 22 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("\<^fixed>Entry"))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("\<^fixed>Entry"))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" Main) ("_position" f))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" Main) ("_position" f)))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 27 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" Main) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" Main) ("_position" f')))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" ins) ("_position" outs))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_arg" ("_position" outs))))
###         ("_applC" ("_position" set) ("_position" procs))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" ins) ("_position" outs))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_arg" ("_position" outs))))
###         ("_applC" ("_position" set) ("_position" procs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_proc)
###         ("_applC" ("_position" targetnode) ("_position" a)))
###       ("_position" p))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_proc)
###         ("_applC" ("_position" targetnode) ("_position" a)))
###       ("_position" p))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_proc)
###         ("_applC" ("_position" sourcenode) ("_position" a)))
###       ("_position" p))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_proc)
###         ("_applC" ("_position" sourcenode) ("_position" a)))
###       ("_position" p))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx)
###             ("_idts" ("_position" rx) ("_position" fsx)))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Qx)
###               ("_position" rx) ("_position" p) ("_position" fsx))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx)
###             ("_idts" ("_position" rx) ("_position" fsx)))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Qx)
###               ("_position" rx) ("_position" p) ("_position" fsx))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Qx)
###               ("_idts" ("_position" rx) ("_position" fsx)))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx)))
###           ("_position" rx) ("_position" p) ("_position" fsx))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Qx)
###               ("_idts" ("_position" rx) ("_position" fsx)))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx)))
###           ("_position" rx) ("_position" p) ("_position" fsx))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx)
###             ("_idts" ("_position" rx) ("_position" fsx)))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx))
###             ("_position" rx) ("_position" p) ("_position" fsx)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx)
###             ("_idts" ("_position" rx) ("_position" fsx)))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx))
###             ("_position" rx) ("_position" p) ("_position" fsx)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx) ("_position" fx))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Qx)
###               ("_position" p) ("_position" fx))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx) ("_position" fx))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Qx)
###               ("_position" p) ("_position" fx))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Qx) ("_position" fx))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx)))
###           ("_position" p) ("_position" fx))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Qx) ("_position" fx))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx)))
###           ("_position" p) ("_position" fx))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx) ("_position" fx))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx))
###             ("_position" p) ("_position" fx)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx) ("_position" fx))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx))
###             ("_position" p) ("_position" fx)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" get_return_edges) ("_position" a))
###       ("\<^const>Set.empty"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" get_return_edges) ("_position" a))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" a')
###           ("_applC" ("_position" get_return_edges) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("_position" Q)))
###       ("_position" r) ("_position" p) ("_position" fs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" a')
###           ("_applC" ("_position" get_return_edges) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" r)
###           ("_idts" ("_position" p) ("_position" fs))))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("_position" Q))
###         ("_position" r) ("_position" p) ("_position" fs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" a')
###           ("_applC" ("_position" get_return_edges) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" r)
###           ("_idts" ("_position" p) ("_position" fs))))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###         ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###           ("_position" r) ("_position" p) ("_position" fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q')))
###       ("_position" p) ("_position" f'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q')))
###       ("_position" p) ("_position" f'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q'))
###         ("_position" p) ("_position" f')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q'))
###         ("_position" p) ("_position" f')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###           ("_position" p) ("_position" f'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###           ("_position" p) ("_position" f'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 51 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r) ("_position" fs)))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r) ("_position" fs)))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r) ("_position" fs)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r) ("_position" fs)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r) ("_position" fs)))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r) ("_position" fs)))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 62 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a)))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a)))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 65 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a)))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a)))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q\<^sub>1)
###               ("_position" r\<^sub>1) ("_position" p)
###               ("_position" fs\<^sub>1))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("\<^const>BasicDefs.edge_kind.CallEdge"
###                 ("_position" Q\<^sub>2) ("_position" r\<^sub>2)
###                 ("_position" p) ("_position" fs\<^sub>2))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" targetnode) ("_position" a))
###       ("_applC" ("_position" targetnode) ("_position" a')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q\<^sub>1))
###             ("_position" r\<^sub>1) ("_position" p)
###             ("_position" fs\<^sub>1)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("\<^const>BasicDefs.edge_kind.CallEdge"
###                 ("_position" Q\<^sub>2) ("_position" r\<^sub>2)
###                 ("_position" p) ("_position" fs\<^sub>2))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" targetnode) ("_position" a))
###       ("_applC" ("_position" targetnode) ("_position" a')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q\<^sub>1)
###               ("_position" r\<^sub>1) ("_position" p)
###               ("_position" fs\<^sub>1))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q\<^sub>2))
###               ("_position" r\<^sub>2) ("_position" p)
###               ("_position" fs\<^sub>2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" targetnode) ("_position" a))
###       ("_applC" ("_position" targetnode) ("_position" a')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q\<^sub>1))
###             ("_position" r\<^sub>1) ("_position" p)
###             ("_position" fs\<^sub>1)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q\<^sub>2))
###               ("_position" r\<^sub>2) ("_position" p)
###               ("_position" fs\<^sub>2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" targetnode) ("_position" a))
###       ("_applC" ("_position" targetnode) ("_position" a')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
  assumes
    "CFG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main"
### Ambiguous input (line 89 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" ins)
###         ("\<^const>HOL.Ex_binder" ("_position" outs)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))
###       ("_position" ins))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" ins)
###         ("\<^const>HOL.Ex_binder" ("_position" outs)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))
###       ("_position" ins))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 112 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" outs)
###         ("\<^const>HOL.Ex_binder" ("_position" ins)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))
###       ("_position" outs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" outs)
###         ("\<^const>HOL.Ex_binder" ("_position" ins)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))
###       ("_position" outs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.108s elapsed time, 6.833s cpu time, 1.125s GC time
Loading theory "Draft.Templates" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.183s cpu time, 0.058s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.NonInterferenceInterMoreTemplates")
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
### Ambiguous input (line 206 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 209 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" valid_edge) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 414 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>intra_path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" intra_kind)
###               ("_applC" ("_position" kind) ("_position" a)))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>intra_path" ("_position" n) ("_position" as) ("_position" n'))
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path"
###     ("\<^fixed>intra_path" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###     ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>intra_path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>intra_path" ("_position" n) ("_position" as) ("_position" n'))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n'))
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^fixed>intra_path" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))))
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path"
###       ("\<^fixed>intra_path" ("_position" n) ("_position" as)
###         ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###       ("_position" as) ("_position" n'))
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 470 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" valid_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" valid_path_aux)
###                   ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" a)
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" c')))
###                     ("_applC" ("_position" valid_path_aux)
###                       ("_cargs" ("_position" cs') ("_position" as)))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" valid_path_aux)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" valid_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" valid_path_aux)
###                   ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member" ("_position" a)
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" c')))
###                 ("_applC" ("_position" valid_path_aux)
###                   ("_cargs" ("_position" cs') ("_position" as)))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" valid_path_aux)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" valid_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil")
###                   ("_applC" ("_position" valid_path_aux)
###                     ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" a)
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" c')))
###                     ("_applC" ("_position" valid_path_aux)
###                       ("_cargs" ("_position" cs') ("_position" as))))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" valid_path_aux)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.549s elapsed time, 1.166s cpu time, 0.117s GC time
### Ambiguous input (line 483 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 485 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs) ("\<^const>List.list.Nil")))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_aux)
###               ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs) ("\<^const>List.list.Nil")))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_aux)
###               ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 487 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" c') ("_position" cs'))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" a)
###                 ("_applC" ("_position" get_return_edges) ("_position" c'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" c') ("_position" cs'))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" a)
###                 ("_applC" ("_position" get_return_edges) ("_position" c'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 544 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" upd_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" upd_cs)
###                   ("_cargs" ("_position" cs) ("_position" as))))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("_applC" ("_position" upd_cs)
###                     ("_cargs" ("_position" cs') ("_position" as))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" upd_cs)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" upd_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" upd_cs)
###                   ("_cargs" ("_position" cs) ("_position" as))))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("_applC" ("_position" upd_cs)
###                 ("_cargs" ("_position" cs') ("_position" as))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" upd_cs)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" upd_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil")
###                   ("_applC" ("_position" upd_cs)
###                     ("_cargs" ("_position" cs) ("_position" as))))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("_applC" ("_position" upd_cs)
###                     ("_cargs" ("_position" cs') ("_position" as)))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" upd_cs)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### Ambiguous input (line 647 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 690 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 898 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 950 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>valid_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("_applC" ("_position" valid_path) ("_position" as)))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>valid_path'" ("_position" n) ("_position" as) ("_position" n'))
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_applC" ("_position" valid_path) ("_position" as)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path"
###     ("\<^fixed>valid_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###     ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_applC" ("_position" valid_path) ("_position" as)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>valid_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("_applC" ("_position" valid_path) ("_position" as))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>valid_path'" ("_position" n) ("_position" as) ("_position" n'))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n'))
###     ("_applC" ("_position" valid_path) ("_position" as))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^fixed>valid_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))))
###     ("_applC" ("_position" valid_path) ("_position" as))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path"
###       ("\<^fixed>valid_path'" ("_position" n) ("_position" as)
###         ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###       ("_position" as) ("_position" n'))
###     ("_applC" ("_position" valid_path) ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1030 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" valid_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" valid_path_rev_aux)
###                   ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" c')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a)))
###                     ("_applC" ("_position" valid_path_rev_aux)
###                       ("_cargs" ("_position" cs') ("_position" as)))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" valid_path_rev_aux)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" valid_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" valid_path_rev_aux)
###                   ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member" ("_position" c')
###                   ("_applC" ("_position" get_return_edges) ("_position" a)))
###                 ("_applC" ("_position" valid_path_rev_aux)
###                   ("_cargs" ("_position" cs') ("_position" as)))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" valid_path_rev_aux)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" valid_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil")
###                   ("_applC" ("_position" valid_path_rev_aux)
###                     ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" c')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a)))
###                     ("_applC" ("_position" valid_path_rev_aux)
###                       ("_cargs" ("_position" cs') ("_position" as))))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" valid_path_rev_aux)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1047 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1049 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs) ("\<^const>List.list.Nil")))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_rev_aux)
###               ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs) ("\<^const>List.list.Nil")))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_rev_aux)
###               ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1051 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" c') ("_position" cs')))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_rev_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" c')
###                 ("_applC" ("_position" get_return_edges) ("_position" a))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" c') ("_position" cs')))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_rev_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" c')
###                 ("_applC" ("_position" get_return_edges) ("_position" a))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1103 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_rev_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" upd_rev_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" upd_rev_cs)
###                   ("_cargs" ("_position" cs) ("_position" as))))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("_applC" ("_position" upd_rev_cs)
###                     ("_cargs" ("_position" cs') ("_position" as))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" upd_rev_cs)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_rev_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" upd_rev_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" upd_rev_cs)
###                   ("_cargs" ("_position" cs) ("_position" as))))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("_applC" ("_position" upd_rev_cs)
###                 ("_cargs" ("_position" cs') ("_position" as))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" upd_rev_cs)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_rev_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" upd_rev_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil")
###                   ("_applC" ("_position" upd_rev_cs)
###                     ("_cargs" ("_position" cs) ("_position" as))))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("_applC" ("_position" upd_rev_cs)
###                     ("_cargs" ("_position" cs') ("_position" as)))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" upd_rev_cs)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1311 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1397 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1441 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1485 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1531 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" valid_call_list)
###     ("_cargs" ("_position" cs) ("_position" n)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" cs') ("_idts" ("_position" c) ("_position" cs'')))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" cs)
###         ("\<^const>List.append" ("_position" cs')
###           ("\<^const>List.list.Cons" ("_position" c) ("_position" cs''))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" c))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" c))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs)))
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" get_proc)
###                 ("_case_syntax" ("_position" cs')
###                   ("_case2"
###                     ("_case1" ("\<^const>List.list.Nil") ("_position" n))
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_applC" ("_position" last)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" cs'))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" valid_call_list)
###     ("_cargs" ("_position" cs) ("_position" n)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" cs') ("_idts" ("_position" c) ("_position" cs'')))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" cs)
###         ("\<^const>List.append" ("_position" cs')
###           ("\<^const>List.list.Cons" ("_position" c) ("_position" cs''))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" c))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.conj"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" c))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" get_proc)
###                 ("_case_syntax" ("_position" cs')
###                   ("_case2"
###                     ("_case1" ("\<^const>List.list.Nil") ("_position" n))
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_applC" ("_position" last)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" cs'))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1536 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" valid_return_list)
###     ("_cargs" ("_position" cs) ("_position" n)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" cs') ("_idts" ("_position" c) ("_position" cs'')))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" cs)
###         ("\<^const>List.append" ("_position" cs')
###           ("\<^const>List.list.Cons" ("_position" c) ("_position" cs''))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" c))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" c))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" get_proc)
###                 ("_case_syntax" ("_position" cs')
###                   ("_case2"
###                     ("_case1" ("\<^const>List.list.Nil") ("_position" n))
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_applC" ("_position" last)
###                         ("_applC" ("_position" targetnodes)
###                           ("_position" cs'))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" valid_return_list)
###     ("_cargs" ("_position" cs) ("_position" n)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" cs') ("_idts" ("_position" c) ("_position" cs'')))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" cs)
###         ("\<^const>List.append" ("_position" cs')
###           ("\<^const>List.list.Cons" ("_position" c) ("_position" cs''))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" c))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>HOL.conj"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" c))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" get_proc)
###                 ("_case_syntax" ("_position" cs')
###                   ("_case2"
###                     ("_case1" ("\<^const>List.list.Nil") ("_position" n))
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_applC" ("_position" last)
###                         ("_applC" ("_position" targetnodes)
###                           ("_position" cs'))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1914 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_path_rev_aux)
###           ("_cargs" ("\<^const>List.list.Nil") ("_position" as)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" valid_path_rev_aux)
###       ("_cargs" ("\<^const>List.list.Nil") ("_position" as)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1926 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil") ("_position" False))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" a)
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" c')))
###                     ("_applC" ("_position" same_level_path_aux)
###                       ("_cargs" ("_position" cs') ("_position" as)))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" same_level_path_aux)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil") ("_position" False))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member" ("_position" a)
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" c')))
###                 ("_applC" ("_position" same_level_path_aux)
###                   ("_cargs" ("_position" cs') ("_position" as)))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" same_level_path_aux)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil") ("_position" False))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" a)
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" c')))
###                     ("_applC" ("_position" same_level_path_aux)
###                       ("_cargs" ("_position" cs') ("_position" as))))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" same_level_path_aux)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### Ambiguous input (line 1940 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1942 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" c') ("_position" cs'))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" same_level_path_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" a)
###                 ("_applC" ("_position" get_return_edges) ("_position" c'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" c') ("_position" cs'))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" same_level_path_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" a)
###                 ("_applC" ("_position" get_return_edges) ("_position" c'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1956 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2248 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 9 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2527 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" same_level_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" same_level_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2715 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 9 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2746 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("_applC" ("_position" same_level_path) ("_position" as)))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###     ("_position" n'))
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_applC" ("_position" same_level_path) ("_position" as)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path"
###     ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###     ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_applC" ("_position" same_level_path) ("_position" as)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("_applC" ("_position" same_level_path) ("_position" as))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###     ("_position" n'))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n'))
###     ("_applC" ("_position" same_level_path) ("_position" as))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))))
###     ("_applC" ("_position" same_level_path) ("_position" as))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path"
###       ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###         ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###       ("_position" as) ("_position" n'))
###     ("_applC" ("_position" same_level_path) ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2748 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###           ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.valid_path'"
###     ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" as) ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2752 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###           ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.same_level_path'"
###     ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" as) ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2772 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" get_proc) ("_position" n))
###           ("_applC" ("_position" get_proc) ("_position" n')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" get_proc) ("_position" n))
###       ("_applC" ("_position" get_proc) ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" get_proc) ("_position" n)))))
###     ("_applC" ("_position" get_proc) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2894 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2933 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" same_level_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil") ("_position" False))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" c')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a)))
###                     ("_applC" ("_position" same_level_path_rev_aux)
###                       ("_cargs" ("_position" cs') ("_position" as)))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" same_level_path_rev_aux)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" same_level_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil") ("_position" False))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member" ("_position" c')
###                   ("_applC" ("_position" get_return_edges) ("_position" a)))
###                 ("_applC" ("_position" same_level_path_rev_aux)
###                   ("_cargs" ("_position" cs') ("_position" as)))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" same_level_path_rev_aux)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" same_level_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil") ("_position" False))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" c')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a)))
###                     ("_applC" ("_position" same_level_path_rev_aux)
###                       ("_cargs" ("_position" cs') ("_position" as))))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" same_level_path_rev_aux)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2949 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" same_level_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" same_level_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2951 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" c') ("_position" cs')))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" same_level_path_rev_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" c')
###                 ("_applC" ("_position" get_return_edges) ("_position" a))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" c') ("_position" cs')))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" same_level_path_rev_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" c')
###                 ("_applC" ("_position" get_return_edges) ("_position" a))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3155 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3173 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_rev_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_return_list)
###             ("_cargs" ("_position" cs) ("_position" n'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_rev_aux)
###                         ("_cargs" ("_position" cs) ("_position" ys))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_rev_cs)
###                         ("_cargs" ("_position" cs) ("_position" ys)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" Q) ("_position" f)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))))
###       ("_applC" ("_position" get_proc) ("_position" n)) ("_position" f))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_rev_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_return_list)
###             ("_cargs" ("_position" cs) ("_position" n'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_rev_aux)
###                         ("_cargs" ("_position" cs) ("_position" ys))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_rev_cs)
###                         ("_cargs" ("_position" cs) ("_position" ys)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" Q) ("_position" f)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q)))
###         ("_applC" ("_position" get_proc) ("_position" n))
###         ("_position" f)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_rev_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_return_list)
###             ("_cargs" ("_position" cs) ("_position" n'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_rev_aux)
###                         ("_cargs" ("_position" cs) ("_position" ys))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_rev_cs)
###                         ("_cargs" ("_position" cs) ("_position" ys)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" Q) ("_position" f)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_applC" ("_position" get_proc) ("_position" n))
###           ("_position" f))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_rev_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_return_list)
###             ("_cargs" ("_position" cs) ("_position" n'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_rev_aux)
###                         ("_cargs" ("_position" cs) ("_position" ys))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_rev_cs)
###                         ("_cargs" ("_position" cs) ("_position" ys)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" Q) ("_position" f)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_applC" ("_position" get_proc) ("_position" n))
###             ("_position" f)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3307 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as')
###               ("_list" ("_position" a'))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a')
###             ("_idts" ("_position" as')
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" as)
###               ("\<^const>List.append" ("_position" as')
###                 ("_list" ("_position" a'))))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q))))
###         ("_position" r) ("_position" p) ("_position" fs))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))))
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" as)
###               ("\<^const>List.append" ("_position" as')
###                 ("_list" ("_position" a'))))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q)))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))))
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.conj" ("_list" ("_position" a'))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a'))
###                   ("_position" Q)))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as')
###               ("_list" ("_position" a'))))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))))
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.conj"
###               ("\<^const>List.append" ("_position" as')
###                 ("_list" ("_position" a')))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3373 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs)))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("_position" Q)))
###         ("_position" r) ("_position" p) ("_position" fs)))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HRB-Slicing.CFG"
### 2.481s elapsed time, 3.965s cpu time, 0.408s GC time
Loading theory "HRB-Slicing.CFGExit" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter" via "HRB-Slicing.FundamentalProperty" via "HRB-Slicing.WeakSimulation" via "HRB-Slicing.Slice" via "HRB-Slicing.SCDObservable" via "HRB-Slicing.HRBSlice" via "HRB-Slicing.SDG" via "HRB-Slicing.CFGExit_wf")
Loading theory "HRB-Slicing.CFG_wf" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter" via "HRB-Slicing.FundamentalProperty" via "HRB-Slicing.WeakSimulation" via "HRB-Slicing.Slice" via "HRB-Slicing.SCDObservable" via "HRB-Slicing.HRBSlice" via "HRB-Slicing.SDG" via "HRB-Slicing.CFGExit_wf")
Loading theory "HRB-Slicing.Distance" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter" via "HRB-Slicing.FundamentalProperty" via "HRB-Slicing.WeakSimulation" via "HRB-Slicing.Slice")
Loading theory "HRB-Slicing.ReturnAndCallNodes" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter" via "HRB-Slicing.FundamentalProperty" via "HRB-Slicing.WeakSimulation" via "HRB-Slicing.Slice" via "HRB-Slicing.SCDObservable" via "HRB-Slicing.Observable")
### Ambiguous input (line 17 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a))
###             ("\<^fixed>Exit"))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a))
###             ("\<^fixed>Exit"))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 19 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_applC" ("_position" ParamUses)
###           ("_applC" ("_position" sourcenode) ("_position" a))))
###       ("_applC" ("_position" length) ("_position" ins)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_applC" ("_position" ParamUses)
###           ("_applC" ("_position" sourcenode) ("_position" a))))
###       ("_applC" ("_position" length) ("_position" ins)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_applC" ("_position" ParamDefs)
###           ("_applC" ("_position" targetnode) ("_position" a))))
###       ("_applC" ("_position" length) ("_position" outs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_applC" ("_position" ParamDefs)
###           ("_applC" ("_position" targetnode) ("_position" a))))
###       ("_applC" ("_position" length) ("_position" outs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 28 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" set) ("_position" ins))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("_position" Def)
###         ("_applC" ("_position" targetnode) ("_position" a))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" set) ("_position" ins))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("_position" Def)
###         ("_applC" ("_position" targetnode) ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 31 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Def)
###         ("_applC" ("_position" sourcenode) ("_position" a)))
###       ("\<^const>Set.empty"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Def)
###         ("_applC" ("_position" sourcenode) ("_position" a)))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" set) ("_position" outs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("_position" Use)
###         ("_applC" ("_position" sourcenode) ("_position" a))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" set) ("_position" outs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("_position" Use)
###         ("_applC" ("_position" sourcenode) ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 50 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" fs))
###       ("_applC" ("_position" length) ("_position" ins)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" fs))
###       ("_applC" ("_position" length) ("_position" ins)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q')
###                 ("_position" r') ("_position" p') ("_position" fs'))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sourcenode) ("_position" a))
###                 ("_applC" ("_position" sourcenode) ("_position" a'))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" pred)
###                   ("_cargs" ("_applC" ("_position" kind) ("_position" a))
###                     ("_position" s))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" pred)
###                     ("_cargs" ("_applC" ("_position" kind) ("_position" a'))
###                       ("_position" s)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" a'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q')
###                 ("_position" r') ("_position" p') ("_position" fs'))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sourcenode) ("_position" a))
###                 ("_applC" ("_position" sourcenode) ("_position" a'))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" pred)
###                   ("_cargs" ("_applC" ("_position" kind) ("_position" a))
###                     ("_position" s))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" pred)
###                     ("_cargs" ("_applC" ("_position" kind) ("_position" a'))
###                       ("_position" s)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" a'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q'))
###               ("_position" r') ("_position" p') ("_position" fs')))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sourcenode) ("_position" a))
###                 ("_applC" ("_position" sourcenode) ("_position" a'))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" pred)
###                   ("_cargs" ("_applC" ("_position" kind) ("_position" a))
###                     ("_position" s))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" pred)
###                     ("_cargs" ("_applC" ("_position" kind) ("_position" a'))
###                       ("_position" s)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" a'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q'))
###               ("_position" r') ("_position" p') ("_position" fs')))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sourcenode) ("_position" a))
###                 ("_applC" ("_position" sourcenode) ("_position" a'))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" pred)
###                   ("_cargs" ("_applC" ("_position" kind) ("_position" a))
###                     ("_position" s))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" pred)
###                     ("_cargs" ("_applC" ("_position" kind) ("_position" a'))
###                       ("_position" s)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" a'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length) ("_position" ins))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_arg" ("_position" outs))))
###               ("_applC" ("_position" set) ("_position" procs))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" pred)
###                 ("_cargs" ("_applC" ("_position" kind) ("_position" a))
###                   ("_position" s))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" pred)
###                   ("_cargs" ("_applC" ("_position" kind) ("_position" a))
###                     ("_position" s'))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_Ball" ("_position" V)
###                     ("\<^const>List.nth"
###                       ("_applC" ("_position" ParamUses)
###                         ("_applC" ("_position" sourcenode) ("_position" a)))
###                       ("_position" i))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" state_val)
###                         ("_cargs" ("_position" s) ("_position" V)))
###                       ("_applC" ("_position" state_val)
###                         ("_cargs" ("_position" s')
###                           ("_position" V)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.nth"
###         ("_applC" ("_position" params)
###           ("_cargs" ("_position" fs)
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" hd) ("_position" s)))))
###         ("_position" i))
###       ("\<^const>List.nth"
###         ("_applC" ("_position" params)
###           ("_cargs" ("_position" fs)
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" hd) ("_position" s')))))
###         ("_position" i)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length) ("_position" ins))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_arg" ("_position" outs))))
###               ("_applC" ("_position" set) ("_position" procs))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" pred)
###                 ("_cargs" ("_applC" ("_position" kind) ("_position" a))
###                   ("_position" s))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" pred)
###                   ("_cargs" ("_applC" ("_position" kind) ("_position" a))
###                     ("_position" s'))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_Ball" ("_position" V)
###                     ("\<^const>List.nth"
###                       ("_applC" ("_position" ParamUses)
###                         ("_applC" ("_position" sourcenode) ("_position" a)))
###                       ("_position" i))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" state_val)
###                         ("_cargs" ("_position" s) ("_position" V)))
###                       ("_applC" ("_position" state_val)
###                         ("_cargs" ("_position" s')
###                           ("_position" V)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.nth"
###         ("_applC" ("_position" params)
###           ("_cargs" ("_position" fs)
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" hd) ("_position" s)))))
###         ("_position" i))
###       ("\<^const>List.nth"
###         ("_applC" ("_position" params)
###           ("_cargs" ("_position" fs)
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" hd) ("_position" s')))))
###         ("_position" i)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 62 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" f')
###         ("_cargs" ("_position" vmap) ("_position" vmap')))
###       ("\<^const>BasicDefs.fun_upds" ("_position" vmap')
###         ("_applC" ("_position" ParamDefs)
###           ("_applC" ("_position" targetnode) ("_position" a)))
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" vmap) ("_position" outs)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" f')
###         ("_cargs" ("_position" vmap) ("_position" vmap')))
###       ("\<^const>BasicDefs.fun_upds" ("_position" vmap')
###         ("_applC" ("_position" ParamDefs)
###           ("_applC" ("_position" targetnode) ("_position" a)))
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" vmap) ("_position" outs)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" f')
###       ("_cargs" ("_position" vmap)
###         ("\<^const>BasicDefs.fun_upds"
###           ("\<^const>HOL.eq" ("_position" vmap') ("_position" vmap'))
###           ("_applC" ("_position" ParamDefs)
###             ("_applC" ("_position" targetnode) ("_position" a)))
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" vmap) ("_position" outs))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" f')
###       ("_cargs" ("_position" vmap)
###         ("\<^const>BasicDefs.fun_upds"
###           ("\<^const>HOL.eq" ("_position" vmap') ("_position" vmap'))
###           ("_applC" ("_position" ParamDefs)
###             ("_applC" ("_position" targetnode) ("_position" a)))
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" vmap) ("_position" outs))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" f')
###       ("\<^const>BasicDefs.fun_upds"
###         ("\<^const>HOL.eq" ("_applC" ("_position" vmap) ("_position" vmap'))
###           ("_position" vmap'))
###         ("_applC" ("_position" ParamDefs)
###           ("_applC" ("_position" targetnode) ("_position" a)))
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" vmap) ("_position" outs)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" f')
###       ("\<^const>BasicDefs.fun_upds"
###         ("\<^const>HOL.eq" ("_applC" ("_position" vmap) ("_position" vmap'))
###           ("_position" vmap'))
###         ("_applC" ("_position" ParamDefs)
###           ("_applC" ("_position" targetnode) ("_position" a)))
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" vmap) ("_position" outs)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.fun_upds"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" f')
###           ("_cargs" ("_position" vmap) ("_position" vmap')))
###         ("_position" vmap'))
###       ("_applC" ("_position" ParamDefs)
###         ("_applC" ("_position" targetnode) ("_position" a)))
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" vmap) ("_position" outs))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.fun_upds"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" f')
###           ("_cargs" ("_position" vmap) ("_position" vmap')))
###         ("_position" vmap'))
###       ("_applC" ("_position" ParamDefs)
###         ("_applC" ("_position" targetnode) ("_position" a)))
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" vmap) ("_position" outs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
  assumes
    "CFG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main"
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
  assumes
    "CFG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main"
### Ambiguous input (line 9 of "$AFP/HRB-Slicing/StaticInter/Distance.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" as))
###           ("_position" x)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" as')
###             ("\<^const>HOL.implies"
###               ("\<^const>local.intra_path" ("_position" n) ("_position" as')
###                 ("_position" n'))
###               ("\<^const>Orderings.ord_class.less_eq" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" as')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distance)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" n') ("_position" x))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" as))
###           ("_position" x)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" as')
###             ("\<^const>local.intra_path" ("_position" n) ("_position" as')
###               ("\<^const>HOL.implies" ("_position" n')
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" x)
###                   ("_applC" ("_position" length) ("_position" as'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distance)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" n') ("_position" x))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" as))
###           ("_position" x)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" as')
###             ("\<^const>Orderings.ord_class.less_eq"
###               ("\<^const>local.intra_path" ("_position" n) ("_position" as')
###                 ("\<^const>HOL.implies" ("_position" n') ("_position" x)))
###               ("_applC" ("_position" length) ("_position" as'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distance)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" n') ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "distance"
  Proving monotonicity ...
### theory "HRB-Slicing.ReturnAndCallNodes"
### 0.278s elapsed time, 1.097s cpu time, 0.054s GC time
Loading theory "HRB-Slicing.Observable" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter" via "HRB-Slicing.FundamentalProperty" via "HRB-Slicing.WeakSimulation" via "HRB-Slicing.Slice" via "HRB-Slicing.SCDObservable")
### theory "HRB-Slicing.Distance"
### 0.288s elapsed time, 1.131s cpu time, 0.054s GC time
Loading theory "HRB-Slicing.SemanticsCFG" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter" via "HRB-Slicing.FundamentalProperty")
### Ambiguous input (line 17 of "$AFP/HRB-Slicing/StaticInter/SemanticsCFG.thy") produces 33 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>identifies"
###           ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###             ("\<^const>HOL.conj" ("_position" n') ("_position" n')))
###           ("\<^const>HOL.conj" ("_position" c')
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" preds)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_list"
###                     ("_tuple" ("_position" cf)
###                       ("_tuple_arg" ("_position" undefined))))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" transfers)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_list"
###                       ("_tuple" ("_position" cf)
###                         ("_tuple_arg" ("_position" undefined))))))
###                 ("_position" cfs')))))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" fst) ("_position" cfs')))
###           ("_position" s'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("\<^const>HOL.conj"
###             ("\<^fixed>identifies" ("_position" n')
###               ("\<^const>HOL.conj" ("_position" c')
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" preds)
###                     ("_cargs"
###                       ("_applC" ("_position" kinds) ("_position" as))
###                       ("_list"
###                         ("_tuple" ("_position" cf)
###                           ("_tuple_arg" ("_position" undefined))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" transfers)
###                       ("_cargs"
###                         ("_applC" ("_position" kinds) ("_position" as))
###                         ("_list"
###                           ("_tuple" ("_position" cf)
###                             ("_tuple_arg" ("_position" undefined))))))
###                     ("_position" cfs')))))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" fst) ("_position" cfs')))
###               ("_position" s'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^fixed>identifies" ("_position" n')
###             ("\<^const>HOL.conj" ("_position" c')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" preds)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_list"
###                       ("_tuple" ("_position" cf)
###                         ("_tuple_arg" ("_position" undefined))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" transfers)
###                     ("_cargs"
###                       ("_applC" ("_position" kinds) ("_position" as))
###                       ("_list"
###                         ("_tuple" ("_position" cf)
###                           ("_tuple_arg" ("_position" undefined))))))
###                   ("_position" cfs')))))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" fst) ("_position" cfs')))
###             ("_position" s')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^fixed>identifies" ("_position" n')
###               ("\<^const>HOL.conj" ("_position" c')
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" preds)
###                     ("_cargs"
###                       ("_applC" ("_position" kinds) ("_position" as))
###                       ("_list"
###                         ("_tuple" ("_position" cf)
###                           ("_tuple_arg" ("_position" undefined))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" transfers)
###                       ("_cargs"
###                         ("_applC" ("_position" kinds) ("_position" as))
###                         ("_list"
###                           ("_tuple" ("_position" cf)
###                             ("_tuple_arg" ("_position" undefined))))))
###                     ("_position" cfs')))))))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" fst) ("_position" cfs')))
###           ("_position" s'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^const>HOL.conj"
###               ("\<^fixed>identifies" ("_position" n') ("_position" c'))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" preds)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_list"
###                       ("_tuple" ("_position" cf)
###                         ("_tuple_arg" ("_position" undefined))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" transfers)
###                     ("_cargs"
###                       ("_applC" ("_position" kinds) ("_position" as))
###                       ("_list"
###                         ("_tuple" ("_position" cf)
###                           ("_tuple_arg" ("_position" undefined))))))
###                   ("_position" cfs'))))))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" fst) ("_position" cfs')))
###           ("_position" s'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^fixed>identifies"
###         ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n') ("_position" n')))
###         ("\<^const>HOL.conj" ("_position" c')
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" preds)
###               ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                 ("_list"
###                   ("_tuple" ("_position" cf)
###                     ("_tuple_arg" ("_position" undefined))))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" transfers)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_list"
###                       ("_tuple" ("_position" cf)
###                         ("_tuple_arg" ("_position" undefined))))))
###                 ("_position" cfs'))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" fst) ("_position" cfs')))
###                 ("_position" s')))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("\<^fixed>identifies" ("_position" n')
###             ("\<^const>HOL.conj" ("_position" c')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" preds)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_list"
###                       ("_tuple" ("_position" cf)
###                         ("_tuple_arg" ("_position" undefined))))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" transfers)
###                       ("_cargs"
###                         ("_applC" ("_position" kinds) ("_position" as))
###                         ("_list"
###                           ("_tuple" ("_position" cf)
###                             ("_tuple_arg" ("_position" undefined))))))
###                     ("_position" cfs'))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" fst) ("_position" cfs')))
###                     ("_position" s')))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("\<^fixed>identifies" ("_position" n')
###           ("\<^const>HOL.conj" ("_position" c')
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" preds)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_list"
###                     ("_tuple" ("_position" cf)
###                       ("_tuple_arg" ("_position" undefined))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" transfers)
###                     ("_cargs"
###                       ("_applC" ("_position" kinds) ("_position" as))
###                       ("_list"
###                         ("_tuple" ("_position" cf)
###                           ("_tuple_arg" ("_position" undefined))))))
###                   ("_position" cfs'))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" map)
###                     ("_cargs" ("_position" fst) ("_position" cfs')))
###                   ("_position" s'))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>identifies"
###           ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###             ("\<^const>HOL.conj" ("_position" n') ("_position" n')))
###           ("_position" c'))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" preds)
###             ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###               ("_list"
###                 ("_tuple" ("_position" cf)
###                   ("_tuple_arg" ("_position" undefined))))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" transfers)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_list"
###                     ("_tuple" ("_position" cf)
###                       ("_tuple_arg" ("_position" undefined))))))
###               ("_position" cfs'))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" fst) ("_position" cfs')))
###               ("_position" s'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("\<^const>HOL.conj"
###             ("\<^fixed>identifies" ("_position" n') ("_position" c'))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" preds)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_list"
###                     ("_tuple" ("_position" cf)
###                       ("_tuple_arg" ("_position" undefined))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" transfers)
###                     ("_cargs"
###                       ("_applC" ("_position" kinds) ("_position" as))
###                       ("_list"
###                         ("_tuple" ("_position" cf)
###                           ("_tuple_arg" ("_position" undefined))))))
###                   ("_position" cfs'))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" map)
###                     ("_cargs" ("_position" fst) ("_position" cfs')))
###                   ("_position" s'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale CFGExit
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "CFGExit sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_)"
### Ambiguous input (line 54 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 6 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q) ("_idts" ("_position" p) ("_position" f))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" sourcenode) ("_position" a)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q) ("_idts" ("_position" p) ("_position" f))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" sourcenode) ("_position" a)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))
###             ("_position" p) ("_position" f)))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" sourcenode) ("_position" a)))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge) ("_position" a))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q)))))
###       ("_position" p) ("_position" f))))
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q) ("_idts" ("_position" p) ("_position" f))))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" sourcenode) ("_position" a)))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge) ("_position" a))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))))
###         ("_position" p) ("_position" f)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q) ("_idts" ("_position" p) ("_position" f))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" sourcenode) ("_position" a)))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge) ("_position" a))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q)))
###           ("_position" p) ("_position" f))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q) ("_idts" ("_position" p) ("_position" f))))
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" valid_edge) ("_position" a))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))))
###           ("_position" p) ("_position" f))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 59 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" method_exit) ("_position" n)))
###     ("_asms"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit")))
###         ("\<^const>HOL.Trueprop" ("_position" P)))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" f) ("_position" p))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" sourcenode) ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" valid_edge) ("_position" a)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" kind) ("_position" a))
###                         ("_position" Q))
###                       ("_position" p) ("_position" f))))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" method_exit) ("_position" n)))
###     ("_asms"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit")))
###         ("\<^const>HOL.Trueprop" ("_position" P)))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" f) ("_position" p))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" sourcenode) ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" valid_edge) ("_position" a)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" kind) ("_position" a))
###                       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                         ("_position" Q) ("_position" p)
###                         ("_position" f)))))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 142 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.path" ("\<^fixed>Exit") ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n') ("\<^fixed>Exit"))
###             ("_position" as)))))
###     ("\<^const>List.list.Nil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("\<^fixed>Exit") ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n') ("\<^fixed>Exit"))
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("\<^fixed>Exit") ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" n') ("\<^fixed>Exit"))
###       ("\<^const>HOL.eq" ("_position" as) ("\<^const>List.list.Nil")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path" ("\<^fixed>Exit") ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n') ("\<^fixed>Exit")))))
###     ("\<^const>HOL.eq" ("_position" as) ("\<^const>List.list.Nil"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>local.path" ("\<^fixed>Exit") ("_position" as)
###         ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###           ("\<^const>HOL.Trueprop" ("_position" n'))))
###       ("\<^fixed>Exit"))
###     ("\<^const>HOL.eq" ("_position" as) ("\<^const>List.list.Nil"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 161 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_aux)
###                         ("_cargs" ("_position" cs) ("_position" xs))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_cs)
###                         ("_cargs" ("_position" cs) ("_position" xs)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r) ("_position" fs))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))))
###       ("_position" r) ("_applC" ("_position" get_proc) ("_position" n'))
###       ("_position" fs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_aux)
###                         ("_cargs" ("_position" cs) ("_position" xs))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_cs)
###                         ("_cargs" ("_position" cs) ("_position" xs)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r) ("_position" fs))))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q)))
###         ("_position" r) ("_applC" ("_position" get_proc) ("_position" n'))
###         ("_position" fs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_aux)
###                         ("_cargs" ("_position" cs) ("_position" xs))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_cs)
###                         ("_cargs" ("_position" cs) ("_position" xs)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r) ("_position" fs))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_applC" ("_position" get_proc) ("_position" n'))
###           ("_position" fs))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_aux)
###                         ("_cargs" ("_position" cs) ("_position" xs))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_cs)
###                         ("_cargs" ("_position" cs) ("_position" xs)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r) ("_position" fs))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r)
###             ("_applC" ("_position" get_proc) ("_position" n'))
###             ("_position" fs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 293 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f)))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a')
###             ("_idts" ("_position" as')
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" as)
###               ("\<^const>List.list.Cons" ("_position" a')
###                 ("_position" as')))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q))))
###         ("_position" p) ("_position" f))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" as)
###               ("\<^const>List.list.Cons" ("_position" a')
###                 ("_position" as')))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q)))
###           ("_position" p) ("_position" f)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))))
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a')
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.conj" ("_position" as')
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a'))
###                   ("_position" Q)))
###               ("_position" p) ("_position" f)))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q))
###             ("_position" p) ("_position" f))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))))
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.conj"
###               ("\<^const>List.list.Cons" ("_position" a') ("_position" as'))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 353 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Q) ("_idts" ("_position" f) ("_position" p)))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" f) ("_position" p)))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("_position" Q)))
###         ("_position" p) ("_position" f)))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Q) ("_idts" ("_position" f) ("_position" p)))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("_position" Q))
###           ("_position" p) ("_position" f))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HRB-Slicing.CFGExit"
### 0.557s elapsed time, 2.189s cpu time, 0.149s GC time
Loading theory "HRB-Slicing.Postdomination" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter" via "HRB-Slicing.FundamentalProperty" via "HRB-Slicing.WeakSimulation" via "HRB-Slicing.Slice" via "HRB-Slicing.SCDObservable" via "HRB-Slicing.HRBSlice" via "HRB-Slicing.SDG")
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
  assumes
    "CFG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main"
Proofs for inductive predicate(s) "obs_intrap"
  Proving monotonicity ...
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main Def Use ParamDefs ParamUses"
### Ambiguous input (line 73 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###       ("_position" Q'))
###     ("_position" r') ("_position" p') ("_position" fs')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q')
###       ("_position" r') ("_position" p') ("_position" fs'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 90 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 121 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 137 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HRB-Slicing.CFG_wf"
### 0.709s elapsed time, 2.786s cpu time, 0.203s GC time
Loading theory "HRB-Slicing.CFGExit_wf" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter" via "HRB-Slicing.FundamentalProperty" via "HRB-Slicing.WeakSimulation" via "HRB-Slicing.Slice" via "HRB-Slicing.SCDObservable" via "HRB-Slicing.HRBSlice" via "HRB-Slicing.SDG")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
locale CFG_semantics_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and
    sem ::
      "'com
       => ('var => 'val option) list
          => 'com => ('var => 'val option) list => bool"
      (\<open>((1\<langle>_,/_\<rangle>) \<Rightarrow>/ (1\<langle>_,/_\<rangle>))\<close>
        [0, 0, 0, 0] 81)
    and
    identifies :: "'node => 'com => bool"
      (\<open>_ \<triangleq> _\<close> [51, 0] 80)
  assumes
    "CFG_semantics_wf sourcenode targetnode kind valid_edge (_Entry_)
      get_proc get_return_edges procs Main sem identifies"
### theory "HRB-Slicing.SemanticsCFG"
### 0.535s elapsed time, 2.115s cpu time, 0.149s GC time
### theory "HRB-Slicing.Observable"
### 0.594s elapsed time, 2.306s cpu time, 0.194s GC time
locale Postdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "Postdomination sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_)"
### Ambiguous input (line 70 of "$AFP/HRB-Slicing/StaticInter/Postdomination.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_node) ("_position" n))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n'))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" as) ("_position" pex))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.intra_path" ("_position" n)
###                   ("_position" as) ("_position" pex))
###                 ("_applC" ("_position" method_exit) ("_position" pex)))
###               ("\<^const>Set.member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj" ("_applC" ("_position" valid_node) ("_position" n))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_node) ("_position" n'))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" as) ("_position" pex))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###               ("_position" pex))
###             ("_applC" ("_position" method_exit) ("_position" pex)))
###           ("\<^const>Set.member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_node) ("_position" n))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n'))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" as) ("_position" pex))
###             ("\<^const>HOL.implies"
###               ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.conj" ("_position" pex)
###                   ("_applC" ("_position" method_exit) ("_position" pex))))
###               ("\<^const>Set.member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj" ("_applC" ("_position" valid_node) ("_position" n))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_node) ("_position" n'))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" as) ("_position" pex))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.conj" ("_position" pex)
###               ("_applC" ("_position" method_exit) ("_position" pex))))
###           ("\<^const>Set.member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/HRB-Slicing/StaticInter/Postdomination.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" as)
###     ("\<^const>Set.member"
###       ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###         ("\<^const>HOL.implies" ("\<^fixed>Exit") ("_position" n')))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" sourcenodes) ("_position" as))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" as)
###     ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###       ("\<^const>HOL.implies" ("\<^fixed>Exit")
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes) ("_position" as))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" as)
###     ("\<^const>HOL.implies"
###       ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###         ("\<^fixed>Exit"))
###       ("\<^const>Set.member" ("_position" n')
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" sourcenodes) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 362 of "$AFP/HRB-Slicing/StaticInter/Postdomination.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Not"
###     ("_applC"
###       ("\<^const>local.postdominate" ("_position" n)
###         ("_position" targetnode))
###       ("_position" ax))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Not"
###     ("\<^const>local.postdominate" ("_position" n)
###       ("_applC" ("_position" targetnode) ("_position" ax)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HRB-Slicing.Postdomination"
### 0.564s elapsed time, 1.710s cpu time, 0.120s GC time
locale CFGExit_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
  assumes
    "CFGExit_wf sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_) Def Use ParamDefs ParamUses"
### theory "HRB-Slicing.CFGExit_wf"
### 0.528s elapsed time, 1.254s cpu time, 0.066s GC time
Loading theory "HRB-Slicing.SDG" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter" via "HRB-Slicing.FundamentalProperty" via "HRB-Slicing.WeakSimulation" via "HRB-Slicing.Slice" via "HRB-Slicing.SCDObservable" via "HRB-Slicing.HRBSlice")
Found termination order: "{}"
locale SDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
  assumes
    "SDG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_) Def Use ParamDefs ParamUses"
### Ambiguous input (line 41 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_SDG_node)
###       ("_applC" ("_position" Formal_in)
###         ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x)))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" ins) ("_position" outs)))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_args" ("_position" ins)
###                     ("_tuple_arg" ("_position" outs))))
###                 ("_applC" ("_position" set) ("_position" procs)))
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" ins))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_SDG_node)
###       ("_applC" ("_position" Formal_in)
###         ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x)))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" ins) ("_position" outs)))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_args" ("_position" ins)
###                     ("_tuple_arg" ("_position" outs))))
###                 ("_applC" ("_position" set) ("_position" procs)))
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" ins))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_SDG_node)
###       ("_applC" ("_position" Formal_out)
###         ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x)))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" ins) ("_position" outs))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))
###             ("_position" p) ("_position" f))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sourcenode) ("_position" a))
###               ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_args" ("_position" ins)
###                     ("_tuple_arg" ("_position" outs))))
###                 ("_applC" ("_position" set) ("_position" procs)))
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" outs))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_SDG_node)
###       ("_applC" ("_position" Formal_out)
###         ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x)))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" ins) ("_position" outs))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sourcenode) ("_position" a))
###               ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_args" ("_position" ins)
###                     ("_tuple_arg" ("_position" outs))))
###                 ("_applC" ("_position" set) ("_position" procs)))
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" outs))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_SDG_node)
###       ("_applC" ("_position" Actual_in)
###         ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x)))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" ins) ("_position" outs)))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sourcenode) ("_position" a))
###               ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_args" ("_position" ins)
###                     ("_tuple_arg" ("_position" outs))))
###                 ("_applC" ("_position" set) ("_position" procs)))
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" ins))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_SDG_node)
###       ("_applC" ("_position" Actual_in)
###         ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x)))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" ins) ("_position" outs)))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sourcenode) ("_position" a))
###               ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_args" ("_position" ins)
###                     ("_tuple_arg" ("_position" outs))))
###                 ("_applC" ("_position" set) ("_position" procs)))
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" ins))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 50 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_SDG_node)
###       ("_applC" ("_position" Actual_out)
###         ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x)))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" ins) ("_position" outs))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))
###             ("_position" p) ("_position" f))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_args" ("_position" ins)
###                     ("_tuple_arg" ("_position" outs))))
###                 ("_applC" ("_position" set) ("_position" procs)))
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" outs))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_SDG_node)
###       ("_applC" ("_position" Actual_out)
###         ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x)))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" ins) ("_position" outs))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_args" ("_position" ins)
###                     ("_tuple_arg" ("_position" outs))))
###                 ("_applC" ("_position" set) ("_position" procs)))
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" outs))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 177 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>SDG_Use"
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_node) ("_position" m)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" Use) ("_position" m))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" CFG_node) ("_position" m)))))))
###       ("\<^const>HOL.Trueprop" ("_position" V)))
###     ("_position" n)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_node) ("_position" m)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" V)
###           ("_applC" ("_position" Use) ("_position" m))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node) ("_position" m)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SDG_Use" ("_position" V) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>SDG_Use"
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_SDG_node) ("_position" n)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Actual_in)
###                 ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" V)
###                 ("\<^const>List.nth"
###                   ("_applC" ("_position" ParamUses) ("_position" m))
###                   ("_position" x)))))))
###       ("\<^const>HOL.Trueprop" ("_position" V)))
###     ("_position" n)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_SDG_node) ("_position" n)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" Actual_in)
###             ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" V)
###             ("\<^const>List.nth"
###               ("_applC" ("_position" ParamUses) ("_position" m))
###               ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SDG_Use" ("_position" V) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>SDG_Use"
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_SDG_node) ("_position" n)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Formal_out)
###                 ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" get_proc) ("_position" m))
###                 ("_position" p)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" p)
###                     ("_tuple_args" ("_position" ins)
###                       ("_tuple_arg" ("_position" outs))))
###                   ("_applC" ("_position" set) ("_position" procs))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" V)
###                     ("\<^const>List.nth" ("_position" outs)
###                       ("_position" x)))))))))
###       ("\<^const>HOL.Trueprop" ("_position" V)))
###     ("_position" n)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_SDG_node) ("_position" n)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" Formal_out)
###             ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" get_proc) ("_position" m))
###             ("_position" p)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_arg" ("_position" outs))))
###               ("_applC" ("_position" set) ("_position" procs))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" V)
###                 ("\<^const>List.nth" ("_position" outs)
###                   ("_position" x)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SDG_Use" ("_position" V) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SDG_Use"
  Proving monotonicity ...
### Ambiguous input (line 186 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>notin_SDG_Use" ("_position" V) ("_position" n))
###   ("\<^const>HOL.Not"
###     ("\<^const>local.SDG_Use" ("_position" V) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>notin_SDG_Use" ("_position" V)
###     ("\<^const>local.SDG_Use"
###       ("\<^const>Pure.eq" ("_position" n)
###         ("\<^const>HOL.Not" ("_position" V)))
###       ("_position" n))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>notin_SDG_Use" ("_position" V) ("_position" n))
###   ("\<^const>local.SDG_Use" ("\<^const>HOL.Not" ("_position" V))
###     ("_position" n)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.SDG_Use"
###     ("\<^const>Pure.eq"
###       ("\<^fixed>notin_SDG_Use" ("_position" V) ("_position" n))
###       ("\<^const>HOL.Not" ("_position" V)))
###     ("_position" n)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 233 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>SDG_Def"
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_node) ("_position" m)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" Def) ("_position" m))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" CFG_node) ("_position" m)))))))
###       ("\<^const>HOL.Trueprop" ("_position" V)))
###     ("_position" n)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_node) ("_position" m)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" V)
###           ("_applC" ("_position" Def) ("_position" m))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node) ("_position" m)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SDG_Def" ("_position" V) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 235 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>SDG_Def"
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_SDG_node) ("_position" n)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Formal_in)
###                 ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" get_proc) ("_position" m))
###                 ("_position" p)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" p)
###                     ("_tuple_args" ("_position" ins)
###                       ("_tuple_arg" ("_position" outs))))
###                   ("_applC" ("_position" set) ("_position" procs))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" V)
###                     ("\<^const>List.nth" ("_position" ins)
###                       ("_position" x)))))))))
###       ("\<^const>HOL.Trueprop" ("_position" V)))
###     ("_position" n)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_SDG_node) ("_position" n)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" Formal_in)
###             ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" get_proc) ("_position" m))
###             ("_position" p)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_arg" ("_position" outs))))
###               ("_applC" ("_position" set) ("_position" procs))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" V)
###                 ("\<^const>List.nth" ("_position" ins)
###                   ("_position" x)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SDG_Def" ("_position" V) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 238 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>SDG_Def"
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_SDG_node) ("_position" n)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Actual_out)
###                 ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" V)
###                 ("\<^const>List.nth"
###                   ("_applC" ("_position" ParamDefs) ("_position" m))
###                   ("_position" x)))))))
###       ("\<^const>HOL.Trueprop" ("_position" V)))
###     ("_position" n)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_SDG_node) ("_position" n)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" Actual_out)
###             ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" V)
###             ("\<^const>List.nth"
###               ("_applC" ("_position" ParamDefs) ("_position" m))
###               ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SDG_Def" ("_position" V) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SDG_Def"
  Proving monotonicity ...
### Ambiguous input (line 241 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>notin_SDG_Def" ("_position" V) ("_position" n))
###   ("\<^const>HOL.Not"
###     ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>notin_SDG_Def" ("_position" V)
###     ("\<^const>local.SDG_Def"
###       ("\<^const>Pure.eq" ("_position" n)
###         ("\<^const>HOL.Not" ("_position" V)))
###       ("_position" n))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>notin_SDG_Def" ("_position" V) ("_position" n))
###   ("\<^const>local.SDG_Def" ("\<^const>HOL.Not" ("_position" V))
###     ("_position" n)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.SDG_Def"
###     ("\<^const>Pure.eq"
###       ("\<^fixed>notin_SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.Not" ("_position" V)))
###     ("_position" n)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 286 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 8 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.SDG_Use" ("_position" V) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.intra_path"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_position" as)
###             ("_applC" ("_position" parent_node) ("_position" n')))
###           ("\<^const>HOL.All_binder" ("_position" n'')
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###               ("\<^const>Set.member"
###                 ("_applC" ("_position" parent_node) ("_position" n''))
###                 ("\<^const>local.notin_SDG_Def"
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("_applC" ("_position" tl) ("_position" as))))
###                     ("_position" V))
###                   ("_position" n''))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.SDG_Use" ("_position" V) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.intra_path"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_position" as)
###             ("_applC" ("_position" parent_node) ("_position" n')))
###           ("\<^const>HOL.All_binder" ("_position" n'')
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###               ("\<^const>local.notin_SDG_Def"
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.member"
###                     ("_applC" ("_position" parent_node) ("_position" n''))
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("_applC" ("_position" tl) ("_position" as)))))
###                   ("_position" V))
###                 ("_position" n'')))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.SDG_Use" ("_position" V) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.intra_path"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_position" as)
###             ("_applC" ("_position" parent_node) ("_position" n')))
###           ("\<^const>local.notin_SDG_Def"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                   ("\<^const>Set.member"
###                     ("_applC" ("_position" parent_node) ("_position" n''))
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("_applC" ("_position" tl) ("_position" as))))))
###                 ("_position" V)))
###             ("_position" n'')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.SDG_Use" ("_position" V) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.intra_path"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_position" as)
###             ("_applC" ("_position" parent_node) ("_position" n')))
###           ("\<^const>HOL.All_binder" ("_position" n'')
###             ("\<^const>local.notin_SDG_Def"
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                   ("\<^const>Set.member"
###                     ("_applC" ("_position" parent_node) ("_position" n''))
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("_applC" ("_position" tl) ("_position" as))))))
###                 ("_position" V))
###               ("_position" n''))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.SDG_Use" ("_position" V) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.intra_path"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_position" as)
###             ("_applC" ("_position" parent_node) ("_position" n')))
###           ("\<^const>HOL.All_binder" ("_position" n'')
###             ("_applC" ("_position" valid_SDG_node)
###               ("\<^const>local.notin_SDG_Def"
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj" ("_position" n'')
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" parent_node) ("_position" n''))
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_applC" ("_position" tl) ("_position" as))))))
###                   ("_position" V))
###                 ("_position" n'')))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.SDG_Use" ("_position" V) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.intra_path"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_position" as)
###             ("_applC" ("_position" parent_node) ("_position" n')))
###           ("\<^const>HOL.All_binder" ("_position" n'')
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###               ("_applC" ("_position" parent_node)
###                 ("\<^const>local.notin_SDG_Def"
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member" ("_position" n'')
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_applC" ("_position" tl) ("_position" as)))))
###                     ("_position" V))
###                   ("_position" n''))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.SDG_Use" ("_position" V) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.intra_path"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_position" as)
###             ("_applC" ("_position" parent_node) ("_position" n')))
###           ("\<^const>HOL.All_binder" ("_position" n'')
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###               ("\<^const>Set.member"
###                 ("_applC" ("_position" parent_node) ("_position" n''))
###                 ("_applC" ("_position" set)
###                   ("\<^const>local.notin_SDG_Def"
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" sourcenodes)
###                         ("_applC" ("_position" tl) ("_position" as)))
###                       ("_position" V))
###                     ("_position" n'')))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.SDG_Use" ("_position" V) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.intra_path"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_position" as)
###             ("_applC" ("_position" parent_node) ("_position" n')))
###           ("\<^const>HOL.All_binder" ("_position" n'')
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" parent_node) ("_position" n''))
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("_applC" ("_position" tl) ("_position" as))))))
###               ("\<^const>local.notin_SDG_Def" ("_position" V)
###                 ("_position" n'')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 296 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 837 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" a') ("_position" as)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member"
###               ("\<^const>local.intra_path" ("_position" n)
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###                 ("\<^const>HOL.conj" ("_position" n') ("_position" n')))
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("\<^const>List.list.Cons" ("_position" a)
###                     ("_position" as)))))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" intra_kind)
###                 ("_applC" ("_position" kind) ("_position" a)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC"
###                     ("\<^const>local.postdominate" ("_position" n')
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" valid_edge)
###                             ("_position" a'))
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" intra_kind)
###                               ("_applC" ("_position" kind)
###                                 ("_position" a')))
###                             ("_position" sourcenode)))))
###                     ("_position" a'))
###                   ("_position" n))
###                 ("\<^const>HOL.Not" ("_position" n'))))))))
###     ("_applC" ("_position" targetnode) ("_position" a'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate"
###     ("\<^const>local.intra_path"
###       ("\<^fixed>control_dependence" ("_position" n)
###         ("\<^const>Pure.eq" ("_position" n')
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" a)
###               ("_idts" ("_position" a') ("_position" as)))
###             ("_position" n))))
###       ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###       ("\<^const>HOL.conj" ("_position" n')
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes)
###                 ("\<^const>List.list.Cons" ("_position" a)
###                   ("_position" as)))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" intra_kind)
###               ("_applC" ("_position" kind) ("_position" a)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC"
###                   ("\<^const>local.postdominate" ("_position" n')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" targetnode) ("_position" a))
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" valid_edge) ("_position" a'))
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" intra_kind)
###                             ("_applC" ("_position" kind) ("_position" a')))
###                           ("_position" sourcenode)))))
###                   ("_position" a'))
###                 ("_position" n))
###               ("\<^const>HOL.Not" ("_position" n')))))))
###     ("_applC" ("_position" targetnode) ("_position" a'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>control_dependence" ("_position" n)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" a') ("_position" as)))
###         ("\<^const>local.postdominate"
###           ("\<^const>local.intra_path" ("_position" n)
###             ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###             ("\<^const>HOL.conj" ("_position" n')
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.not_member" ("_position" n')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("\<^const>List.list.Cons" ("_position" a)
###                         ("_position" as)))))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" intra_kind)
###                     ("_applC" ("_position" kind) ("_position" a)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC"
###                         ("\<^const>local.postdominate" ("_position" n')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" targetnode)
###                               ("_position" a))
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" valid_edge)
###                                 ("_position" a'))
###                               ("\<^const>HOL.conj"
###                                 ("_applC" ("_position" intra_kind)
###                                   ("_applC" ("_position" kind)
###                                     ("_position" a')))
###                                 ("_position" sourcenode)))))
###                         ("_position" a'))
###                       ("_position" n))
###                     ("\<^const>HOL.Not" ("_position" n')))))))
###           ("_applC" ("_position" targetnode) ("_position" a')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>control_dependence" ("_position" n) ("_position" n'))
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" a') ("_position" as)))
###     ("\<^const>local.postdominate"
###       ("\<^const>local.intra_path" ("_position" n)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###         ("\<^const>HOL.conj" ("_position" n')
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" n')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("\<^const>List.list.Cons" ("_position" a)
###                     ("_position" as)))))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" intra_kind)
###                 ("_applC" ("_position" kind) ("_position" a)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC"
###                     ("\<^const>local.postdominate" ("_position" n')
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" valid_edge)
###                             ("_position" a'))
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" intra_kind)
###                               ("_applC" ("_position" kind)
###                                 ("_position" a')))
###                             ("_position" sourcenode)))))
###                     ("_position" a'))
###                   ("_position" n))
###                 ("\<^const>HOL.Not" ("_position" n')))))))
###       ("_applC" ("_position" targetnode) ("_position" a')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" a') ("_position" as)))
###           ("\<^const>local.intra_path" ("_position" n)
###             ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###             ("\<^const>HOL.conj" ("_position" n')
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.not_member" ("_position" n')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("\<^const>List.list.Cons" ("_position" a)
###                         ("_position" as)))))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" intra_kind)
###                     ("_applC" ("_position" kind) ("_position" a)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC"
###                         ("\<^const>local.postdominate" ("_position" n')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" targetnode)
###                               ("_position" a))
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" valid_edge)
###                                 ("_position" a'))
###                               ("\<^const>HOL.conj"
###                                 ("_applC" ("_position" intra_kind)
###                                   ("_applC" ("_position" kind)
###                                     ("_position" a')))
###                                 ("_position" sourcenode)))))
###                         ("_position" a'))
###                       ("_position" n))
###                     ("\<^const>HOL.Not" ("_position" n'))))))))))
###     ("_applC" ("_position" targetnode) ("_position" a'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" a') ("_position" as)))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.intra_path" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###               ("_position" n'))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("\<^const>List.list.Cons" ("_position" a)
###                       ("_position" as)))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" intra_kind)
###                   ("_applC" ("_position" kind) ("_position" a)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC"
###                       ("\<^const>local.postdominate" ("_position" n')
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" valid_edge)
###                               ("_position" a'))
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" intra_kind)
###                                 ("_applC" ("_position" kind)
###                                   ("_position" a')))
###                               ("_position" sourcenode)))))
###                       ("_position" a'))
###                     ("_position" n))
###                   ("\<^const>HOL.Not" ("_position" n')))))))))
###     ("_applC" ("_position" targetnode) ("_position" a'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" a') ("_position" as)))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.intra_path" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###               ("\<^const>HOL.conj" ("_position" n')
###                 ("\<^const>Set.not_member" ("_position" n')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("\<^const>List.list.Cons" ("_position" a)
###                         ("_position" as)))))))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" intra_kind)
###                 ("_applC" ("_position" kind) ("_position" a)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC"
###                     ("\<^const>local.postdominate" ("_position" n')
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" valid_edge)
###                             ("_position" a'))
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" intra_kind)
###                               ("_applC" ("_position" kind)
###                                 ("_position" a')))
###                             ("_position" sourcenode)))))
###                     ("_position" a'))
###                   ("_position" n))
###                 ("\<^const>HOL.Not" ("_position" n'))))))))
###     ("_applC" ("_position" targetnode) ("_position" a'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" a') ("_position" as)))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.intra_path" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###               ("\<^const>HOL.conj" ("_position" n')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" n')
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("\<^const>List.list.Cons" ("_position" a)
###                           ("_position" as)))))
###                   ("_applC" ("_position" intra_kind)
###                     ("_applC" ("_position" kind) ("_position" a))))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC"
###                   ("\<^const>local.postdominate" ("_position" n')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" targetnode) ("_position" a))
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" valid_edge) ("_position" a'))
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" intra_kind)
###                             ("_applC" ("_position" kind) ("_position" a')))
###                           ("_position" sourcenode)))))
###                   ("_position" a'))
###                 ("_position" n))
###               ("\<^const>HOL.Not" ("_position" n')))))))
###     ("_applC" ("_position" targetnode) ("_position" a'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" a') ("_position" as)))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.intra_path" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###               ("\<^const>HOL.conj" ("_position" n')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" n')
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("\<^const>List.list.Cons" ("_position" a)
###                           ("_position" as)))))
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" intra_kind)
###                       ("_applC" ("_position" kind) ("_position" a)))
###                     ("\<^const>HOL.eq"
###                       ("_applC"
###                         ("\<^const>local.postdominate" ("_position" n')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" targetnode)
###                               ("_position" a))
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" valid_edge)
###                                 ("_position" a'))
###                               ("\<^const>HOL.conj"
###                                 ("_applC" ("_position" intra_kind)
###                                   ("_applC" ("_position" kind)
###                                     ("_position" a')))
###                                 ("_position" sourcenode)))))
###                         ("_position" a'))
###                       ("_position" n))))))
###             ("\<^const>HOL.Not" ("_position" n'))))))
###     ("_applC" ("_position" targetnode) ("_position" a'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" a') ("_position" as)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>local.intra_path" ("_position" n)
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###                 ("\<^const>HOL.conj" ("_position" n')
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" n')
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("\<^const>List.list.Cons" ("_position" a)
###                             ("_position" as)))))
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" intra_kind)
###                         ("_applC" ("_position" kind) ("_position" a)))
###                       ("_applC"
###                         ("\<^const>local.postdominate" ("_position" n')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" targetnode)
###                               ("_position" a))
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" valid_edge)
###                                 ("_position" a'))
###                               ("\<^const>HOL.conj"
###                                 ("_applC" ("_position" intra_kind)
###                                   ("_applC" ("_position" kind)
###                                     ("_position" a')))
###                                 ("_position" sourcenode)))))
###                         ("_position" a'))))))
###               ("_position" n))
###             ("\<^const>HOL.Not" ("_position" n'))))))
###     ("_applC" ("_position" targetnode) ("_position" a'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 335 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" ax) ("_position" ax'))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" ax)
###           ("_applC" ("_position" set) ("_position" as')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" ax))
###             ("_applC" ("_position" sourcenode) ("_position" ax')))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge) ("_position" ax'))
###             ("_applC" ("_position" intra_kind)
###               ("_applC" ("_position" kind) ("_position" ax'))))))
###       ("_applC"
###         ("\<^const>local.postdominate" ("_position" n)
###           ("_position" targetnode))
###         ("_position" ax')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" ax) ("_position" ax'))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" ax)
###           ("_applC" ("_position" set) ("_position" as')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" ax))
###             ("_applC" ("_position" sourcenode) ("_position" ax')))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge) ("_position" ax'))
###             ("_applC" ("_position" intra_kind)
###               ("_applC" ("_position" kind) ("_position" ax'))))))
###       ("\<^const>local.postdominate" ("_position" n)
###         ("_applC" ("_position" targetnode) ("_position" ax'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 517 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" sourcenode) ("_position" a)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n')
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" targetnode) ("_position" a)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>call_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" sourcenode) ("_position" a)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n')
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" targetnode) ("_position" a)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>call_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 520 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" sourcenode) ("_position" a)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n')
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" targetnode) ("_position" a)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>return_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" sourcenode) ("_position" a)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n')
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" targetnode) ("_position" a)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>return_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 510 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" targetnode) ("_position" a)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" a')
###               ("_applC" ("_position" get_return_edges) ("_position" a))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n')
###                 ("_applC" ("_position" CFG_node)
###                   ("_applC" ("_position" sourcenode)
###                     ("_position" a'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>cdep_edge" ("_position" n) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" targetnode) ("_position" a)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" a')
###               ("_applC" ("_position" get_return_edges) ("_position" a))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n')
###                 ("_applC" ("_position" CFG_node)
###                   ("_applC" ("_position" sourcenode)
###                     ("_position" a'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>cdep_edge" ("_position" n) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 523 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" V)
###               ("\<^const>List.nth" ("_position" ins) ("_position" x))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" ins))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Actual_in)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a))
###                       ("_tuple_arg" ("_position" x))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n')
###                     ("_applC" ("_position" Formal_in)
###                       ("_tuple"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("_tuple_arg" ("_position" x)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>param_in_edge" ("_position" n) ("_position" p)
###       ("_position" V) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" V)
###               ("\<^const>List.nth" ("_position" ins) ("_position" x))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" ins))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Actual_in)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a))
###                       ("_tuple_arg" ("_position" x))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n')
###                     ("_applC" ("_position" Formal_in)
###                       ("_tuple"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("_tuple_arg" ("_position" x)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>param_in_edge" ("_position" n) ("_position" p)
###       ("_position" V) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 527 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" V)
###               ("\<^const>List.nth" ("_position" outs) ("_position" x))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" outs))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Formal_out)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a))
###                       ("_tuple_arg" ("_position" x))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n')
###                     ("_applC" ("_position" Actual_out)
###                       ("_tuple"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("_tuple_arg" ("_position" x)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>param_out_edge" ("_position" n) ("_position" p)
###       ("_position" V) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" V)
###               ("\<^const>List.nth" ("_position" outs) ("_position" x))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" outs))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Formal_out)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a))
###                       ("_tuple_arg" ("_position" x))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n')
###                     ("_applC" ("_position" Actual_out)
###                       ("_tuple"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("_tuple_arg" ("_position" x)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>param_out_edge" ("_position" n) ("_position" p)
###       ("_position" V) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SDG_edge"
  Proving monotonicity ...
### Ambiguous input (line 534 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.cdep_edge" ("_position" n) ("_position" n')))
###     ("_asms"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.control_dependence"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_applC" ("_position" parent_node) ("_position" n'))))
###         ("\<^const>HOL.Trueprop" ("_position" P)))
###       ("_asms"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p)
###                   ("_idts" ("_position" fs) ("_position" a'))))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" valid_edge) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>BasicDefs.edge_kind.CallEdge"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" kind) ("_position" a))
###                       ("_position" Q))
###                     ("_position" r) ("_position" p) ("_position" fs)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member" ("_position" a')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" parent_node) ("_position" n))
###                         ("_applC" ("_position" targetnode)
###                           ("_position" a))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" parent_node)
###                             ("_position" n'))
###                           ("_applC" ("_position" sourcenode)
###                             ("_position" a')))))))))
###             ("\<^const>HOL.Trueprop" ("_position" P))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" m)
###             ("_bigimpl"
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" CFG_node) ("_position" m))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" m)
###                       ("_applC" ("_position" parent_node)
###                         ("_position" n'))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" n)
###                         ("_position" n'))))))
###               ("\<^const>HOL.Trueprop" ("_position" P))))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.cdep_edge" ("_position" n) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.control_dependence"
###           ("_applC" ("_position" parent_node) ("_position" n))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" parent_node) ("_position" n')))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))
###       ("_asms"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p)
###                   ("_idts" ("_position" fs) ("_position" a'))))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" valid_edge) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>BasicDefs.edge_kind.CallEdge"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" kind) ("_position" a))
###                       ("_position" Q))
###                     ("_position" r) ("_position" p) ("_position" fs)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member" ("_position" a')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" parent_node) ("_position" n))
###                         ("_applC" ("_position" targetnode)
###                           ("_position" a))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" parent_node)
###                             ("_position" n'))
###                           ("_applC" ("_position" sourcenode)
###                             ("_position" a')))))))))
###             ("\<^const>HOL.Trueprop" ("_position" P))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" m)
###             ("_bigimpl"
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" CFG_node) ("_position" m))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" m)
###                       ("_applC" ("_position" parent_node)
###                         ("_position" n'))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" n)
###                         ("_position" n'))))))
###               ("\<^const>HOL.Trueprop" ("_position" P))))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.cdep_edge" ("_position" n) ("_position" n')))
###     ("_asms"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.control_dependence"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_applC" ("_position" parent_node) ("_position" n'))))
###         ("\<^const>HOL.Trueprop" ("_position" P)))
###       ("_asms"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p)
###                   ("_idts" ("_position" fs) ("_position" a'))))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" valid_edge) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" kind) ("_position" a))
###                     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                       ("_position" r) ("_position" p) ("_position" fs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member" ("_position" a')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" parent_node) ("_position" n))
###                         ("_applC" ("_position" targetnode)
###                           ("_position" a))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" parent_node)
###                             ("_position" n'))
###                           ("_applC" ("_position" sourcenode)
###                             ("_position" a')))))))))
###             ("\<^const>HOL.Trueprop" ("_position" P))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" m)
###             ("_bigimpl"
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" CFG_node) ("_position" m))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" m)
###                       ("_applC" ("_position" parent_node)
###                         ("_position" n'))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" n)
###                         ("_position" n'))))))
###               ("\<^const>HOL.Trueprop" ("_position" P))))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.cdep_edge" ("_position" n) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.control_dependence"
###           ("_applC" ("_position" parent_node) ("_position" n))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" parent_node) ("_position" n')))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))
###       ("_asms"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p)
###                   ("_idts" ("_position" fs) ("_position" a'))))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" valid_edge) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" kind) ("_position" a))
###                     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                       ("_position" r) ("_position" p) ("_position" fs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member" ("_position" a')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" parent_node) ("_position" n))
###                         ("_applC" ("_position" targetnode)
###                           ("_position" a))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" parent_node)
###                             ("_position" n'))
###                           ("_applC" ("_position" sourcenode)
###                             ("_position" a')))))))))
###             ("\<^const>HOL.Trueprop" ("_position" P))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" m)
###             ("_bigimpl"
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" CFG_node) ("_position" m))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" m)
###                       ("_applC" ("_position" parent_node)
###                         ("_position" n'))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" n)
###                         ("_position" n'))))))
###               ("\<^const>HOL.Trueprop" ("_position" P))))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 613 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" SDG_edge)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" Vopt)
###           ("_cargs"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" True))))
###             ("_position" n'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("_applC" ("_position" parent_node) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_applC" ("_position" parent_node) ("_position" n')))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r) ("_position" fs)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                   ("_position" r) ("_position" p) ("_position" fs))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" SDG_edge)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" Vopt)
###           ("_cargs"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" True))))
###             ("_position" n'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("_applC" ("_position" parent_node) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_applC" ("_position" parent_node) ("_position" n')))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" Q)
###                   ("_idts" ("_position" r) ("_position" fs)))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a))
###                   ("_position" Q)))
###               ("_position" r) ("_position" p) ("_position" fs))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" SDG_edge)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" Vopt)
###           ("_cargs"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" True))))
###             ("_position" n'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("_applC" ("_position" parent_node) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_applC" ("_position" parent_node) ("_position" n')))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r) ("_position" fs)))
###               ("\<^const>BasicDefs.edge_kind.CallEdge"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a))
###                   ("_position" Q))
###                 ("_position" r) ("_position" p) ("_position" fs)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 647 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" SDG_edge)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" Vopt)
###           ("_cargs"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" False))))
###             ("_position" n'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("_applC" ("_position" parent_node) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_applC" ("_position" parent_node) ("_position" n')))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q) ("_position" f))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                   ("_position" p) ("_position" f))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" SDG_edge)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" Vopt)
###           ("_cargs"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" False))))
###             ("_position" n'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("_applC" ("_position" parent_node) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_applC" ("_position" parent_node) ("_position" n')))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" Q) ("_position" f))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a))
###                   ("_position" Q)))
###               ("_position" p) ("_position" f))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" SDG_edge)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" Vopt)
###           ("_cargs"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" False))))
###             ("_position" n'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("_applC" ("_position" parent_node) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_applC" ("_position" parent_node) ("_position" n')))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q) ("_position" f))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a))
###                   ("_position" Q))
###                 ("_position" p) ("_position" f)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "intra_SDG_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "cdep_SDG_path"
  Proving monotonicity ...
### Ambiguous input (line 1000 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "call_cdep_SDG_path"
  Proving monotonicity ...
### Ambiguous input (line 1684 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" matched)
###         ("_cargs" ("_position" n\<^sub>0)
###           ("_cargs" ("_position" ns) ("_position" n\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.call_edge" ("_position" n\<^sub>1) ("_position" p)
###           ("_position" n\<^sub>2)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" matched)
###             ("_cargs" ("_position" n\<^sub>2)
###               ("_cargs" ("_position" ns') ("_position" n\<^sub>3)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>local.return_edge" ("_position" n\<^sub>3)
###               ("_position" p)
###               ("\<^const>HOL.disj" ("_position" n\<^sub>4)
###                 ("\<^const>local.param_out_edge" ("_position" n\<^sub>3)
###                   ("_position" p) ("_position" V)
###                   ("_position" n\<^sub>4)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" a')
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" sourcenode) ("_position" a))
###                     ("_applC" ("_position" parent_node)
###                       ("_position" n\<^sub>1))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" targetnode) ("_position" a))
###                       ("_applC" ("_position" parent_node)
###                         ("_position" n\<^sub>2))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" sourcenode) ("_position" a'))
###                         ("_applC" ("_position" parent_node)
###                           ("_position" n\<^sub>3))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a'))
###                           ("_applC" ("_position" parent_node)
###                             ("_position" n\<^sub>4))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" matched)
###       ("_cargs" ("_position" n\<^sub>0)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" ns)
###             ("\<^const>List.list.Cons" ("_position" n\<^sub>1)
###               ("\<^const>List.append" ("_position" ns')
###                 ("_list" ("_position" n\<^sub>3)))))
###           ("_position" n\<^sub>4))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" matched)
###         ("_cargs" ("_position" n\<^sub>0)
###           ("_cargs" ("_position" ns) ("_position" n\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.call_edge" ("_position" n\<^sub>1) ("_position" p)
###           ("_position" n\<^sub>2)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" matched)
###             ("_cargs" ("_position" n\<^sub>2)
###               ("_cargs" ("_position" ns') ("_position" n\<^sub>3)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.disj"
###               ("\<^const>local.return_edge" ("_position" n\<^sub>3)
###                 ("_position" p) ("_position" n\<^sub>4))
###               ("\<^const>local.param_out_edge" ("_position" n\<^sub>3)
###                 ("_position" p) ("_position" V) ("_position" n\<^sub>4))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" a')
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" sourcenode) ("_position" a))
###                     ("_applC" ("_position" parent_node)
###                       ("_position" n\<^sub>1))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" targetnode) ("_position" a))
###                       ("_applC" ("_position" parent_node)
###                         ("_position" n\<^sub>2))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" sourcenode) ("_position" a'))
###                         ("_applC" ("_position" parent_node)
###                           ("_position" n\<^sub>3))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a'))
###                           ("_applC" ("_position" parent_node)
###                             ("_position" n\<^sub>4))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" matched)
###       ("_cargs" ("_position" n\<^sub>0)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" ns)
###             ("\<^const>List.list.Cons" ("_position" n\<^sub>1)
###               ("\<^const>List.append" ("_position" ns')
###                 ("_list" ("_position" n\<^sub>3)))))
###           ("_position" n\<^sub>4))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" matched)
###         ("_cargs" ("_position" n\<^sub>0)
###           ("_cargs" ("_position" ns) ("_position" n\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.call_edge" ("_position" n\<^sub>1) ("_position" p)
###           ("_position" n\<^sub>2)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" matched)
###             ("_cargs" ("_position" n\<^sub>2)
###               ("_cargs" ("_position" ns') ("_position" n\<^sub>3)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>local.param_out_edge"
###               ("\<^const>local.return_edge" ("_position" n\<^sub>3)
###                 ("_position" p)
###                 ("\<^const>HOL.disj" ("_position" n\<^sub>4)
###                   ("_position" n\<^sub>3)))
###               ("_position" p) ("_position" V) ("_position" n\<^sub>4)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" a')
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" sourcenode) ("_position" a))
###                     ("_applC" ("_position" parent_node)
###                       ("_position" n\<^sub>1))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" targetnode) ("_position" a))
###                       ("_applC" ("_position" parent_node)
###                         ("_position" n\<^sub>2))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" sourcenode) ("_position" a'))
###                         ("_applC" ("_position" parent_node)
###                           ("_position" n\<^sub>3))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a'))
###                           ("_applC" ("_position" parent_node)
###                             ("_position" n\<^sub>4))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" matched)
###       ("_cargs" ("_position" n\<^sub>0)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" ns)
###             ("\<^const>List.list.Cons" ("_position" n\<^sub>1)
###               ("\<^const>List.append" ("_position" ns')
###                 ("_list" ("_position" n\<^sub>3)))))
###           ("_position" n\<^sub>4))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "matched"
  Proving monotonicity ...
### Ambiguous input (line 1718 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1899 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" realizable)
###         ("_cargs" ("_position" n\<^sub>0)
###           ("_cargs" ("_position" ns) ("_position" n\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.param_in_edge"
###           ("\<^const>local.call_edge" ("_position" n\<^sub>1)
###             ("_position" p)
###             ("\<^const>HOL.disj" ("_position" n\<^sub>2)
###               ("_position" n\<^sub>1)))
###           ("_position" p) ("_position" V) ("_position" n\<^sub>2)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" matched)
###             ("_cargs" ("_position" n\<^sub>2)
###               ("_cargs" ("_position" ns') ("_position" n\<^sub>3))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" realizable)
###       ("_cargs" ("_position" n\<^sub>0)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" ns)
###             ("\<^const>List.list.Cons" ("_position" n\<^sub>1)
###               ("_position" ns')))
###           ("_position" n\<^sub>3))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" realizable)
###         ("_cargs" ("_position" n\<^sub>0)
###           ("_cargs" ("_position" ns) ("_position" n\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.call_edge" ("_position" n\<^sub>1) ("_position" p)
###           ("\<^const>HOL.disj" ("_position" n\<^sub>2)
###             ("\<^const>local.param_in_edge" ("_position" n\<^sub>1)
###               ("_position" p) ("_position" V) ("_position" n\<^sub>2)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" matched)
###             ("_cargs" ("_position" n\<^sub>2)
###               ("_cargs" ("_position" ns') ("_position" n\<^sub>3))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" realizable)
###       ("_cargs" ("_position" n\<^sub>0)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" ns)
###             ("\<^const>List.list.Cons" ("_position" n\<^sub>1)
###               ("_position" ns')))
###           ("_position" n\<^sub>3))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" realizable)
###         ("_cargs" ("_position" n\<^sub>0)
###           ("_cargs" ("_position" ns) ("_position" n\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.disj"
###           ("\<^const>local.call_edge" ("_position" n\<^sub>1)
###             ("_position" p) ("_position" n\<^sub>2))
###           ("\<^const>local.param_in_edge" ("_position" n\<^sub>1)
###             ("_position" p) ("_position" V) ("_position" n\<^sub>2))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" matched)
###             ("_cargs" ("_position" n\<^sub>2)
###               ("_cargs" ("_position" ns') ("_position" n\<^sub>3))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" realizable)
###       ("_cargs" ("_position" n\<^sub>0)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" ns)
###             ("\<^const>List.list.Cons" ("_position" n\<^sub>1)
###               ("_position" ns')))
###           ("_position" n\<^sub>3))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "realizable"
  Proving monotonicity ...
### Ambiguous input (line 2027 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" sourcenode) ("_position" a)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n')
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" targetnode) ("_position" a)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_call_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" sourcenode) ("_position" a)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n')
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" targetnode) ("_position" a)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_call_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2030 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" sourcenode) ("_position" a)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n')
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" targetnode) ("_position" a)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_return_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" sourcenode) ("_position" a)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n')
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" targetnode) ("_position" a)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_return_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2020 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" targetnode) ("_position" a)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" a')
###               ("_applC" ("_position" get_return_edges) ("_position" a))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n')
###                 ("_applC" ("_position" CFG_node)
###                   ("_applC" ("_position" sourcenode)
###                     ("_position" a'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_cdep_edge" ("_position" n) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" targetnode) ("_position" a)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" a')
###               ("_applC" ("_position" get_return_edges) ("_position" a))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n')
###                 ("_applC" ("_position" CFG_node)
###                   ("_applC" ("_position" sourcenode)
###                     ("_position" a'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_cdep_edge" ("_position" n) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2033 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" V)
###               ("\<^const>List.nth" ("_position" ins) ("_position" x))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" ins))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Actual_in)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a))
###                       ("_tuple_arg" ("_position" x))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n')
###                     ("_applC" ("_position" Formal_in)
###                       ("_tuple"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("_tuple_arg" ("_position" x)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_param_in_edge" ("_position" n) ("_position" p)
###       ("_position" V) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" V)
###               ("\<^const>List.nth" ("_position" ins) ("_position" x))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" ins))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Actual_in)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a))
###                       ("_tuple_arg" ("_position" x))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n')
###                     ("_applC" ("_position" Formal_in)
###                       ("_tuple"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("_tuple_arg" ("_position" x)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_param_in_edge" ("_position" n) ("_position" p)
###       ("_position" V) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2037 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" V)
###               ("\<^const>List.nth" ("_position" outs) ("_position" x))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" outs))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Formal_out)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a))
###                       ("_tuple_arg" ("_position" x))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n')
###                     ("_applC" ("_position" Actual_out)
###                       ("_tuple"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("_tuple_arg" ("_position" x)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_param_out_edge" ("_position" n) ("_position" p)
###       ("_position" V) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" V)
###               ("\<^const>List.nth" ("_position" outs) ("_position" x))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" outs))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Formal_out)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a))
###                       ("_tuple_arg" ("_position" x))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n')
###                     ("_applC" ("_position" Actual_out)
###                       ("_tuple"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("_tuple_arg" ("_position" x)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_param_out_edge" ("_position" n) ("_position" p)
###       ("_position" V) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2042 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" sourcenode) ("_position" a)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n')
###                 ("_applC" ("_position" CFG_node)
###                   ("_applC" ("_position" targetnode)
###                     ("_position" a'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_summary_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" sourcenode) ("_position" a)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n')
###                 ("_applC" ("_position" CFG_node)
###                   ("_applC" ("_position" targetnode)
###                     ("_position" a'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_summary_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2046 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" matched)
###               ("_cargs"
###                 ("_applC" ("_position" Formal_in)
###                   ("_tuple"
###                     ("_applC" ("_position" targetnode) ("_position" a))
###                     ("_tuple_arg" ("_position" x))))
###                 ("_cargs" ("_position" ns)
###                   ("_applC" ("_position" Formal_out)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a'))
###                       ("_tuple_arg" ("_position" x'))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Actual_in)
###                   ("_tuple"
###                     ("_applC" ("_position" sourcenode) ("_position" a))
###                     ("_tuple_arg" ("_position" x))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n')
###                   ("_applC" ("_position" Actual_out)
###                     ("_tuple"
###                       ("_applC" ("_position" targetnode) ("_position" a'))
###                       ("_tuple_arg" ("_position" x'))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" ins)
###                         ("_tuple_arg" ("_position" outs))))
###                     ("_applC" ("_position" set) ("_position" procs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Orderings.ord_class.less" ("_position" x)
###                       ("_applC" ("_position" length) ("_position" ins))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Orderings.ord_class.less" ("_position" x')
###                         ("_applC" ("_position" length)
###                           ("_position" outs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_summary_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" matched)
###               ("_cargs"
###                 ("_applC" ("_position" Formal_in)
###                   ("_tuple"
###                     ("_applC" ("_position" targetnode) ("_position" a))
###                     ("_tuple_arg" ("_position" x))))
###                 ("_cargs" ("_position" ns)
###                   ("_applC" ("_position" Formal_out)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a'))
###                       ("_tuple_arg" ("_position" x'))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Actual_in)
###                   ("_tuple"
###                     ("_applC" ("_position" sourcenode) ("_position" a))
###                     ("_tuple_arg" ("_position" x))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n')
###                   ("_applC" ("_position" Actual_out)
###                     ("_tuple"
###                       ("_applC" ("_position" targetnode) ("_position" a'))
###                       ("_tuple_arg" ("_position" x'))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" ins)
###                         ("_tuple_arg" ("_position" outs))))
###                     ("_applC" ("_position" set) ("_position" procs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Orderings.ord_class.less" ("_position" x)
###                       ("_applC" ("_position" length) ("_position" ins))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Orderings.ord_class.less" ("_position" x')
###                         ("_applC" ("_position" length)
###                           ("_position" outs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_summary_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "sum_SDG_edge"
  Proving monotonicity ...
### Ambiguous input (line 2055 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.sum_summary_edge" ("_position" n) ("_position" p)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" fs) ("_position" a')))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BasicDefs.edge_kind.CallEdge"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" kind) ("_position" a))
###                     ("_position" Q))
###                   ("_position" r) ("_position" p) ("_position" fs)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" a')
###                     ("_applC" ("_position" get_return_edges)
###                       ("_position" a))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" n)
###                       ("_applC" ("_position" CFG_node)
###                         ("_applC" ("_position" sourcenode)
###                           ("_position" a)))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" n')
###                         ("_applC" ("_position" CFG_node)
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a'))))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" fs)
###                     ("_idts" ("_position" a')
###                       ("_idts" ("_position" ns)
###                         ("_idts" ("_position" x)
###                           ("_idts" ("_position" x')
###                             ("_idts" ("_position" ins)
###                               ("_position" outs)))))))))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" valid_edge) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>BasicDefs.edge_kind.CallEdge"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" kind) ("_position" a))
###                       ("_position" Q))
###                     ("_position" r) ("_position" p) ("_position" fs)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member" ("_position" a')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" matched)
###                         ("_cargs"
###                           ("_applC" ("_position" Formal_in)
###                             ("_tuple"
###                               ("_applC" ("_position" targetnode)
###                                 ("_position" a))
###                               ("_tuple_arg" ("_position" x))))
###                           ("_cargs" ("_position" ns)
###                             ("_applC" ("_position" Formal_out)
###                               ("_tuple"
###                                 ("_applC" ("_position" sourcenode)
###                                   ("_position" a'))
###                                 ("_tuple_arg" ("_position" x'))))))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" n)
###                           ("_applC" ("_position" Actual_in)
###                             ("_tuple"
###                               ("_applC" ("_position" sourcenode)
###                                 ("_position" a))
###                               ("_tuple_arg" ("_position" x))))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" n')
###                             ("_applC" ("_position" Actual_out)
###                               ("_tuple"
###                                 ("_applC" ("_position" targetnode)
###                                   ("_position" a'))
###                                 ("_tuple_arg" ("_position" x'))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" p)
###                                 ("_tuple_args" ("_position" ins)
###                                   ("_tuple_arg" ("_position" outs))))
###                               ("_applC" ("_position" set)
###                                 ("_position" procs))))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Orderings.ord_class.less"
###                                 ("_position" x)
###                                 ("_applC" ("_position" length)
###                                   ("_position" ins))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Orderings.ord_class.less"
###                                   ("_position" x')
###                                   ("_applC" ("_position" length)
###                                     ("_position" outs)))))))))))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.sum_summary_edge" ("_position" n) ("_position" p)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" fs) ("_position" a')))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a))
###                   ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                     ("_position" r) ("_position" p) ("_position" fs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" a')
###                     ("_applC" ("_position" get_return_edges)
###                       ("_position" a))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" n)
###                       ("_applC" ("_position" CFG_node)
###                         ("_applC" ("_position" sourcenode)
###                           ("_position" a)))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" n')
###                         ("_applC" ("_position" CFG_node)
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a'))))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" fs)
###                     ("_idts" ("_position" a')
###                       ("_idts" ("_position" ns)
###                         ("_idts" ("_position" x)
###                           ("_idts" ("_position" x')
###                             ("_idts" ("_position" ins)
###                               ("_position" outs)))))))))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" valid_edge) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>BasicDefs.edge_kind.CallEdge"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" kind) ("_position" a))
###                       ("_position" Q))
###                     ("_position" r) ("_position" p) ("_position" fs)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member" ("_position" a')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" matched)
###                         ("_cargs"
###                           ("_applC" ("_position" Formal_in)
###                             ("_tuple"
###                               ("_applC" ("_position" targetnode)
###                                 ("_position" a))
###                               ("_tuple_arg" ("_position" x))))
###                           ("_cargs" ("_position" ns)
###                             ("_applC" ("_position" Formal_out)
###                               ("_tuple"
###                                 ("_applC" ("_position" sourcenode)
###                                   ("_position" a'))
###                                 ("_tuple_arg" ("_position" x'))))))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" n)
###                           ("_applC" ("_position" Actual_in)
###                             ("_tuple"
###                               ("_applC" ("_position" sourcenode)
###                                 ("_position" a))
###                               ("_tuple_arg" ("_position" x))))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" n')
###                             ("_applC" ("_position" Actual_out)
###                               ("_tuple"
###                                 ("_applC" ("_position" targetnode)
###                                   ("_position" a'))
###                                 ("_tuple_arg" ("_position" x'))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" p)
###                                 ("_tuple_args" ("_position" ins)
###                                   ("_tuple_arg" ("_position" outs))))
###                               ("_applC" ("_position" set)
###                                 ("_position" procs))))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Orderings.ord_class.less"
###                                 ("_position" x)
###                                 ("_applC" ("_position" length)
###                                   ("_position" ins))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Orderings.ord_class.less"
###                                   ("_position" x')
###                                   ("_applC" ("_position" length)
###                                     ("_position" outs)))))))))))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.sum_summary_edge" ("_position" n) ("_position" p)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" fs) ("_position" a')))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BasicDefs.edge_kind.CallEdge"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" kind) ("_position" a))
###                     ("_position" Q))
###                   ("_position" r) ("_position" p) ("_position" fs)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" a')
###                     ("_applC" ("_position" get_return_edges)
###                       ("_position" a))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" n)
###                       ("_applC" ("_position" CFG_node)
###                         ("_applC" ("_position" sourcenode)
###                           ("_position" a)))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" n')
###                         ("_applC" ("_position" CFG_node)
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a'))))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" fs)
###                     ("_idts" ("_position" a')
###                       ("_idts" ("_position" ns)
###                         ("_idts" ("_position" x)
###                           ("_idts" ("_position" x')
###                             ("_idts" ("_position" ins)
###                               ("_position" outs)))))))))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" valid_edge) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" kind) ("_position" a))
###                     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                       ("_position" r) ("_position" p) ("_position" fs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member" ("_position" a')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" matched)
###                         ("_cargs"
###                           ("_applC" ("_position" Formal_in)
###                             ("_tuple"
###                               ("_applC" ("_position" targetnode)
###                                 ("_position" a))
###                               ("_tuple_arg" ("_position" x))))
###                           ("_cargs" ("_position" ns)
###                             ("_applC" ("_position" Formal_out)
###                               ("_tuple"
###                                 ("_applC" ("_position" sourcenode)
###                                   ("_position" a'))
###                                 ("_tuple_arg" ("_position" x'))))))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" n)
###                           ("_applC" ("_position" Actual_in)
###                             ("_tuple"
###                               ("_applC" ("_position" sourcenode)
###                                 ("_position" a))
###                               ("_tuple_arg" ("_position" x))))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" n')
###                             ("_applC" ("_position" Actual_out)
###                               ("_tuple"
###                                 ("_applC" ("_position" targetnode)
###                                   ("_position" a'))
###                                 ("_tuple_arg" ("_position" x'))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" p)
###                                 ("_tuple_args" ("_position" ins)
###                                   ("_tuple_arg" ("_position" outs))))
###                               ("_applC" ("_position" set)
###                                 ("_position" procs))))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Orderings.ord_class.less"
###                                 ("_position" x)
###                                 ("_applC" ("_position" length)
###                                   ("_position" ins))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Orderings.ord_class.less"
###                                   ("_position" x')
###                                   ("_applC" ("_position" length)
###                                     ("_position" outs)))))))))))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.sum_summary_edge" ("_position" n) ("_position" p)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" fs) ("_position" a')))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a))
###                   ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                     ("_position" r) ("_position" p) ("_position" fs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" a')
###                     ("_applC" ("_position" get_return_edges)
###                       ("_position" a))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" n)
###                       ("_applC" ("_position" CFG_node)
###                         ("_applC" ("_position" sourcenode)
###                           ("_position" a)))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" n')
###                         ("_applC" ("_position" CFG_node)
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a'))))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" fs)
###                     ("_idts" ("_position" a')
###                       ("_idts" ("_position" ns)
###                         ("_idts" ("_position" x)
###                           ("_idts" ("_position" x')
###                             ("_idts" ("_position" ins)
###                               ("_position" outs)))))))))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" valid_edge) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" kind) ("_position" a))
###                     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                       ("_position" r) ("_position" p) ("_position" fs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member" ("_position" a')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" matched)
###                         ("_cargs"
###                           ("_applC" ("_position" Formal_in)
###                             ("_tuple"
###                               ("_applC" ("_position" targetnode)
###                                 ("_position" a))
###                               ("_tuple_arg" ("_position" x))))
###                           ("_cargs" ("_position" ns)
###                             ("_applC" ("_position" Formal_out)
###                               ("_tuple"
###                                 ("_applC" ("_position" sourcenode)
###                                   ("_position" a'))
###                                 ("_tuple_arg" ("_position" x'))))))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" n)
###                           ("_applC" ("_position" Actual_in)
###                             ("_tuple"
###                               ("_applC" ("_position" sourcenode)
###                                 ("_position" a))
###                               ("_tuple_arg" ("_position" x))))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" n')
###                             ("_applC" ("_position" Actual_out)
###                               ("_tuple"
###                                 ("_applC" ("_position" targetnode)
###                                   ("_position" a'))
###                                 ("_tuple_arg" ("_position" x'))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" p)
###                                 ("_tuple_args" ("_position" ins)
###                                   ("_tuple_arg" ("_position" outs))))
###                               ("_applC" ("_position" set)
###                                 ("_position" procs))))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Orderings.ord_class.less"
###                                 ("_position" x)
###                                 ("_applC" ("_position" length)
###                                   ("_position" ins))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Orderings.ord_class.less"
###                                   ("_position" x')
###                                   ("_applC" ("_position" length)
###                                     ("_position" outs)))))))))))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2252 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2254 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###       ("_position" Q'))
###     ("_position" r') ("_position" p) ("_position" fs')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q')
###       ("_position" r') ("_position" p) ("_position" fs'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "intra_sum_SDG_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intra_call_sum_SDG_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intra_return_sum_SDG_path"
  Proving monotonicity ...
### Ambiguous input (line 3215 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>local.sum_return_edge" ("_position" nx) ("_position" p)
###       ("_position" nx'))
###     ("\<^const>HOL.Ex_binder" ("_position" V)
###       ("\<^const>local.sum_param_out_edge" ("_position" nx) ("_position" p)
###         ("_position" V) ("_position" nx')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.sum_return_edge" ("_position" nx) ("_position" p)
###     ("\<^const>HOL.disj" ("_position" nx')
###       ("\<^const>HOL.Ex_binder" ("_position" V)
###         ("\<^const>local.sum_param_out_edge" ("_position" nx)
###           ("_position" p) ("_position" V) ("_position" nx'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3349 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>local.sum_return_edge" ("_position" n'') ("_position" p)
###       ("_position" n'))
###     ("\<^const>local.sum_param_out_edge" ("_position" n'') ("_position" p)
###       ("_position" V) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.sum_return_edge" ("_position" n'') ("_position" p)
###     ("\<^const>HOL.disj" ("_position" n')
###       ("\<^const>local.sum_param_out_edge" ("_position" n'') ("_position" p)
###         ("_position" V) ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.sum_param_out_edge"
###     ("\<^const>local.sum_return_edge" ("_position" n'') ("_position" p)
###       ("\<^const>HOL.disj" ("_position" n') ("_position" n'')))
###     ("_position" p) ("_position" V) ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HRB-Slicing.SDG"
### 3.483s elapsed time, 4.958s cpu time, 1.345s GC time
Loading theory "HRB-Slicing.HRBSlice" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter" via "HRB-Slicing.FundamentalProperty" via "HRB-Slicing.WeakSimulation" via "HRB-Slicing.Slice" via "HRB-Slicing.SCDObservable")
locale SDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
  assumes
    "SDG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_) Def Use ParamDefs ParamUses"
Proofs for inductive predicate(s) "sum_SDG_slice1p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "sum_SDG_slice2p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "combine_SDG_slicesp"
  Proving monotonicity ...
### Ambiguous input (line 305 of "$AFP/HRB-Slicing/StaticInter/HRBSlice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 306 of "$AFP/HRB-Slicing/StaticInter/HRBSlice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###       ("_position" Q'))
###     ("_position" r') ("_position" p) ("_position" fs')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q')
###       ("_position" r') ("_position" p) ("_position" fs'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HRB-Slicing.HRBSlice"
### 0.900s elapsed time, 0.965s cpu time, 0.093s GC time
Loading theory "HRB-Slicing.SCDObservable" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter" via "HRB-Slicing.FundamentalProperty" via "HRB-Slicing.WeakSimulation" via "HRB-Slicing.Slice")
locale SDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
  assumes
    "SDG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_) Def Use ParamDefs ParamUses"
### Ambiguous input (line 8 of "$AFP/HRB-Slicing/StaticInter/SCDObservable.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>local.call_edge" ("_position" n\<^sub>1) ("_position" p)
###       ("_position" n\<^sub>2))
###     ("\<^const>local.param_in_edge" ("_position" n\<^sub>1) ("_position" p)
###       ("_position" V') ("_position" n\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.call_edge" ("_position" n\<^sub>1) ("_position" p)
###     ("\<^const>HOL.disj" ("_position" n\<^sub>2)
###       ("\<^const>local.param_in_edge" ("_position" n\<^sub>1)
###         ("_position" p) ("_position" V') ("_position" n\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.param_in_edge"
###     ("\<^const>local.call_edge" ("_position" n\<^sub>1) ("_position" p)
###       ("\<^const>HOL.disj" ("_position" n\<^sub>2) ("_position" n\<^sub>1)))
###     ("_position" p) ("_position" V') ("_position" n\<^sub>2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 9 of "$AFP/HRB-Slicing/StaticInter/SCDObservable.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>local.return_edge" ("_position" n\<^sub>3) ("_position" p)
###       ("_position" n\<^sub>4))
###     ("\<^const>local.param_out_edge" ("_position" n\<^sub>3) ("_position" p)
###       ("_position" V) ("_position" n\<^sub>4))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.return_edge" ("_position" n\<^sub>3) ("_position" p)
###     ("\<^const>HOL.disj" ("_position" n\<^sub>4)
###       ("\<^const>local.param_out_edge" ("_position" n\<^sub>3)
###         ("_position" p) ("_position" V) ("_position" n\<^sub>4)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.param_out_edge"
###     ("\<^const>local.return_edge" ("_position" n\<^sub>3) ("_position" p)
###       ("\<^const>HOL.disj" ("_position" n\<^sub>4) ("_position" n\<^sub>3)))
###     ("_position" p) ("_position" V) ("_position" n\<^sub>4)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HRB-Slicing.SCDObservable"
### 0.566s elapsed time, 0.584s cpu time, 0.026s GC time
Loading theory "HRB-Slicing.Slice" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter" via "HRB-Slicing.FundamentalProperty" via "HRB-Slicing.WeakSimulation")
locale SDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
  assumes
    "SDG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_) Def Use ParamDefs ParamUses"
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
### Ambiguous input (line 93 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" slice_kind_aux)
###       ("_cargs" ("_position" m)
###         ("_cargs" ("_position" m')
###           ("_cargs" ("_position" S)
###             ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" f))))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member" ("_position" m)
###         ("\<^const>local.SDG_to_CFG_set" ("_position" S)))
###       ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" f))
###       ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" slice_kind_aux)
###     ("_cargs" ("_position" m)
###       ("_cargs" ("_position" m')
###         ("_cargs" ("_position" S)
###           ("\<^const>BasicDefs.edge_kind.UpdateEdge"
###             ("\<^const>HOL.eq" ("_position" f)
###               ("\<^const>HOL.If"
###                 ("\<^const>Set.member" ("_position" m)
###                   ("\<^const>local.SDG_to_CFG_set" ("_position" S)))
###                 ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" f))
###                 ("\<^const>BasicDefs.edge_kind.UpdateEdge"
###                   ("_position" id))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  slice_kind_aux ::
    "'node
     => 'node
        => 'node SDG_node set
           => ('var, 'val, 'ret, 'pname) edge_kind
              => ('var, 'val, 'ret, 'pname) edge_kind"
### Ambiguous input (line 369 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" slice_kind)
###           ("_cargs" ("_position" S) ("_position" a)))
###         ("_lambda" ("_position" cf) ("_position" False)))
###       ("_position" r) ("_position" p) ("_position" fs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" slice_kind)
###           ("_cargs" ("_position" S) ("_position" a)))
###         ("_lambda" ("_position" cf) ("_position" False)))
###       ("_position" r) ("_position" p) ("_position" fs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("_lambda" ("_position" cf) ("_position" False)) ("_position" r)
###         ("_position" p) ("_position" fs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("_lambda" ("_position" cf) ("_position" False)) ("_position" r)
###         ("_position" p) ("_position" fs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 375 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" slice_kind)
###           ("_cargs" ("_position" S) ("_position" a)))
###         ("_position" Q))
###       ("_position" r) ("_position" p)
###       ("_applC" ("_position" cspp)
###         ("_cargs" ("_applC" ("_position" targetnode) ("_position" a))
###           ("_cargs" ("_applC" ("_position" HRB_slice) ("_position" S))
###             ("_position" fs)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" slice_kind)
###           ("_cargs" ("_position" S) ("_position" a)))
###         ("_position" Q))
###       ("_position" r) ("_position" p)
###       ("_applC" ("_position" cspp)
###         ("_cargs" ("_applC" ("_position" targetnode) ("_position" a))
###           ("_cargs" ("_applC" ("_position" HRB_slice) ("_position" S))
###             ("_position" fs)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###         ("_position" r) ("_position" p)
###         ("_applC" ("_position" cspp)
###           ("_cargs" ("_applC" ("_position" targetnode) ("_position" a))
###             ("_cargs" ("_applC" ("_position" HRB_slice) ("_position" S))
###               ("_position" fs))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###         ("_position" r) ("_position" p)
###         ("_applC" ("_position" cspp)
###           ("_cargs" ("_applC" ("_position" targetnode) ("_position" a))
###             ("_cargs" ("_applC" ("_position" HRB_slice) ("_position" S))
###               ("_position" fs))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 381 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 383 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("_position" Q))
###     ("_position" r) ("_position" p)
###     ("_applC" ("_position" replicate)
###       ("_cargs" ("_applC" ("_position" length) ("_position" fs))
###         ("_position" Map.empty)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" slice_kind)
###       ("_cargs" ("_position" S) ("_position" a)))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p)
###       ("_applC" ("_position" replicate)
###         ("_cargs" ("_applC" ("_position" length) ("_position" fs))
###           ("_position" Map.empty))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 397 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 399 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" slice_kind)
###       ("_cargs" ("_position" S) ("_position" a)))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 414 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 520 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" slice_kind)
###           ("_cargs" ("_position" S) ("_position" a)))
###         ("_lambda" ("_position" cf) ("_position" True)))
###       ("_position" p)
###       ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###         ("_position" cf')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" slice_kind)
###           ("_cargs" ("_position" S) ("_position" a)))
###         ("_lambda" ("_position" cf) ("_position" True)))
###       ("_position" p)
###       ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###         ("_position" cf')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf) ("_position" True)) ("_position" p)
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("_position" cf'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf) ("_position" True)) ("_position" p)
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("_position" cf'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 526 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_arg" ("_position" outs))))
###               ("_applC" ("_position" set) ("_position" procs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" slice_kind)
###           ("_cargs" ("_position" S) ("_position" a)))
###         ("_position" Q))
###       ("_position" p)
###       ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###         ("_applC" ("_position" rspp)
###           ("_cargs" ("_applC" ("_position" targetnode) ("_position" a))
###             ("_cargs" ("_applC" ("_position" HRB_slice) ("_position" S))
###               ("_cargs" ("_position" outs)
###                 ("_cargs" ("_position" cf') ("_position" cf))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))
###             ("_position" p) ("_position" f)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_arg" ("_position" outs))))
###               ("_applC" ("_position" set) ("_position" procs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" slice_kind)
###           ("_cargs" ("_position" S) ("_position" a)))
###         ("_position" Q))
###       ("_position" p)
###       ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###         ("_applC" ("_position" rspp)
###           ("_cargs" ("_applC" ("_position" targetnode) ("_position" a))
###             ("_cargs" ("_applC" ("_position" HRB_slice) ("_position" S))
###               ("_cargs" ("_position" outs)
###                 ("_cargs" ("_position" cf') ("_position" cf))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_arg" ("_position" outs))))
###               ("_applC" ("_position" set) ("_position" procs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###         ("_position" p)
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("_applC" ("_position" rspp)
###             ("_cargs" ("_applC" ("_position" targetnode) ("_position" a))
###               ("_cargs" ("_applC" ("_position" HRB_slice) ("_position" S))
###                 ("_cargs" ("_position" outs)
###                   ("_cargs" ("_position" cf') ("_position" cf)))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))
###             ("_position" p) ("_position" f)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_arg" ("_position" outs))))
###               ("_applC" ("_position" set) ("_position" procs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###         ("_position" p)
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("_applC" ("_position" rspp)
###             ("_cargs" ("_applC" ("_position" targetnode) ("_position" a))
###               ("_cargs" ("_applC" ("_position" HRB_slice) ("_position" S))
###                 ("_cargs" ("_position" outs)
###                   ("_cargs" ("_position" cf') ("_position" cf)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HRB-Slicing.Slice"
### 0.938s elapsed time, 0.998s cpu time, 0.084s GC time
Loading theory "HRB-Slicing.WeakSimulation" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter" via "HRB-Slicing.FundamentalProperty")
locale SDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
  assumes
    "SDG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_) Def Use ParamDefs ParamUses"
### Ambiguous input (line 225 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_applC" ("_position" f) ("_position" a))
###           ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" transfer)
###             ("_cargs" ("_applC" ("_position" f) ("_position" a))
###               ("_position" s)))
###           ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" a')
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.disj"
###                     ("_Bex" ("_position" m)
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" tl) ("_position" ms)))
###                       ("\<^const>HOL.Ex_binder" ("_position" m')
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" call_of_return_node)
###                             ("_cargs" ("_position" m) ("_position" m')))
###                           ("\<^const>Set.not_member" ("_position" m')
###                             ("\<^const>local.SDG_to_CFG_set"
###                               ("_applC" ("_position" HRB_slice)
###                                 ("_position" S)))))))
###                     ("\<^const>Set.not_member"
###                       ("_applC" ("_position" hd) ("_position" ms))
###                       ("\<^const>local.SDG_to_CFG_set"
###                         ("_applC" ("_position" HRB_slice)
###                           ("_position" S))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Ball" ("_position" m)
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" tl) ("_position" ms)))
###                       ("_applC" ("_position" return_node) ("_position" m))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" ms))
###                         ("_applC" ("_position" length) ("_position" s))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" s'))
###                           ("_applC" ("_position" Suc)
###                             ("_applC" ("_position" length)
###                               ("_position" s)))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" hd) ("_position" ms))
###                             ("_applC" ("_position" sourcenode)
###                               ("_position" a))))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq" ("_position" ms')
###                               ("\<^const>List.list.Cons"
###                                 ("_applC" ("_position" targetnode)
###                                   ("_position" a))
###                                 ("\<^const>List.list.Cons"
###                                   ("_applC" ("_position" targetnode)
###                                     ("_position" a'))
###                                   ("_applC" ("_position" tl)
###                                     ("_position" ms))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>silent_move" ("_position" S) ("_position" f) ("_position" ms)
###       ("_position" s) ("_position" a) ("_position" ms') ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_applC" ("_position" f) ("_position" a))
###           ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" transfer)
###             ("_cargs" ("_applC" ("_position" f) ("_position" a))
###               ("_position" s)))
###           ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" a')
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.disj"
###                     ("_Bex" ("_position" m)
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" tl) ("_position" ms)))
###                       ("\<^const>HOL.Ex_binder" ("_position" m')
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" call_of_return_node)
###                             ("_cargs" ("_position" m) ("_position" m')))
###                           ("\<^const>Set.not_member" ("_position" m')
###                             ("\<^const>local.SDG_to_CFG_set"
###                               ("_applC" ("_position" HRB_slice)
###                                 ("_position" S)))))))
###                     ("\<^const>Set.not_member"
###                       ("_applC" ("_position" hd) ("_position" ms))
###                       ("\<^const>local.SDG_to_CFG_set"
###                         ("_applC" ("_position" HRB_slice)
###                           ("_position" S))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Ball" ("_position" m)
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" tl) ("_position" ms)))
###                       ("_applC" ("_position" return_node) ("_position" m))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" ms))
###                         ("_applC" ("_position" length) ("_position" s))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" s'))
###                           ("_applC" ("_position" Suc)
###                             ("_applC" ("_position" length)
###                               ("_position" s)))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" hd) ("_position" ms))
###                             ("_applC" ("_position" sourcenode)
###                               ("_position" a))))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq" ("_position" ms')
###                               ("\<^const>List.list.Cons"
###                                 ("_applC" ("_position" targetnode)
###                                   ("_position" a))
###                                 ("\<^const>List.list.Cons"
###                                   ("_applC" ("_position" targetnode)
###                                     ("_position" a'))
###                                   ("_applC" ("_position" tl)
###                                     ("_position" ms))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>silent_move" ("_position" S) ("_position" f) ("_position" ms)
###       ("_position" s) ("_position" a) ("_position" ms') ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 234 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_applC" ("_position" f) ("_position" a))
###           ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" transfer)
###             ("_cargs" ("_applC" ("_position" f) ("_position" a))
###               ("_position" s)))
###           ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f'))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_Bex" ("_position" m)
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" tl) ("_position" ms)))
###                 ("\<^const>HOL.Ex_binder" ("_position" m')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" call_of_return_node)
###                       ("_cargs" ("_position" m) ("_position" m')))
###                     ("\<^const>Set.not_member" ("_position" m')
###                       ("\<^const>local.SDG_to_CFG_set"
###                         ("_applC" ("_position" HRB_slice)
###                           ("_position" S))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_Ball" ("_position" m)
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" tl) ("_position" ms)))
###                   ("_applC" ("_position" return_node) ("_position" m))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" length) ("_position" ms))
###                     ("_applC" ("_position" length) ("_position" s))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" length) ("_position" s))
###                       ("_applC" ("_position" Suc)
###                         ("_applC" ("_position" length) ("_position" s')))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" s')
###                         ("\<^const>List.list.Nil")))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" hd) ("_position" ms))
###                           ("_applC" ("_position" sourcenode)
###                             ("_position" a))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" hd)
###                               ("_applC" ("_position" tl) ("_position" ms)))
###                             ("_applC" ("_position" targetnode)
###                               ("_position" a))))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq" ("_position" ms')
###                               ("_applC" ("_position" tl)
###                                 ("_position" ms))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>silent_move" ("_position" S) ("_position" f) ("_position" ms)
###       ("_position" s) ("_position" a) ("_position" ms') ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_applC" ("_position" f) ("_position" a))
###           ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" transfer)
###             ("_cargs" ("_applC" ("_position" f) ("_position" a))
###               ("_position" s)))
###           ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f')))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_Bex" ("_position" m)
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" tl) ("_position" ms)))
###                 ("\<^const>HOL.Ex_binder" ("_position" m')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" call_of_return_node)
###                       ("_cargs" ("_position" m) ("_position" m')))
###                     ("\<^const>Set.not_member" ("_position" m')
###                       ("\<^const>local.SDG_to_CFG_set"
###                         ("_applC" ("_position" HRB_slice)
###                           ("_position" S))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_Ball" ("_position" m)
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" tl) ("_position" ms)))
###                   ("_applC" ("_position" return_node) ("_position" m))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" length) ("_position" ms))
###                     ("_applC" ("_position" length) ("_position" s))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" length) ("_position" s))
###                       ("_applC" ("_position" Suc)
###                         ("_applC" ("_position" length) ("_position" s')))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" s')
###                         ("\<^const>List.list.Nil")))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" hd) ("_position" ms))
###                           ("_applC" ("_position" sourcenode)
###                             ("_position" a))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" hd)
###                               ("_applC" ("_position" tl) ("_position" ms)))
###                             ("_applC" ("_position" targetnode)
###                               ("_position" a))))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq" ("_position" ms')
###                               ("_applC" ("_position" tl)
###                                 ("_position" ms))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>silent_move" ("_position" S) ("_position" f) ("_position" ms)
###       ("_position" s) ("_position" a) ("_position" ms') ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "silent_move"
  Proving monotonicity ...
Proofs for inductive predicate(s) "silent_moves"
  Proving monotonicity ...
### Ambiguous input (line 1177 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_applC" ("_position" f) ("_position" a))
###           ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" transfer)
###             ("_cargs" ("_applC" ("_position" f) ("_position" a))
###               ("_position" s)))
###           ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" a')
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_Ball" ("_position" m)
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" tl) ("_position" ms)))
###                     ("\<^const>HOL.Ex_binder" ("_position" m')
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" call_of_return_node)
###                           ("_cargs" ("_position" m) ("_position" m')))
###                         ("\<^const>Set.member" ("_position" m')
###                           ("\<^const>local.SDG_to_CFG_set"
###                             ("_applC" ("_position" HRB_slice)
###                               ("_position" S))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" hd) ("_position" ms))
###                       ("\<^const>local.SDG_to_CFG_set"
###                         ("_applC" ("_position" HRB_slice)
###                           ("_position" S)))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" ms))
###                         ("_applC" ("_position" length) ("_position" s))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" s'))
###                           ("_applC" ("_position" Suc)
###                             ("_applC" ("_position" length)
###                               ("_position" s)))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" hd) ("_position" ms))
###                             ("_applC" ("_position" sourcenode)
###                               ("_position" a))))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq" ("_position" ms')
###                               ("\<^const>List.list.Cons"
###                                 ("_applC" ("_position" targetnode)
###                                   ("_position" a))
###                                 ("\<^const>List.list.Cons"
###                                   ("_applC" ("_position" targetnode)
###                                     ("_position" a'))
###                                   ("_applC" ("_position" tl)
###                                     ("_position" ms))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>observable_move" ("_position" S) ("_position" f)
###       ("_position" ms) ("_position" s) ("_position" a) ("_position" ms')
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_applC" ("_position" f) ("_position" a))
###           ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" transfer)
###             ("_cargs" ("_applC" ("_position" f) ("_position" a))
###               ("_position" s)))
###           ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" a')
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_Ball" ("_position" m)
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" tl) ("_position" ms)))
###                     ("\<^const>HOL.Ex_binder" ("_position" m')
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" call_of_return_node)
###                           ("_cargs" ("_position" m) ("_position" m')))
###                         ("\<^const>Set.member" ("_position" m')
###                           ("\<^const>local.SDG_to_CFG_set"
###                             ("_applC" ("_position" HRB_slice)
###                               ("_position" S))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" hd) ("_position" ms))
###                       ("\<^const>local.SDG_to_CFG_set"
###                         ("_applC" ("_position" HRB_slice)
###                           ("_position" S)))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" ms))
###                         ("_applC" ("_position" length) ("_position" s))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" s'))
###                           ("_applC" ("_position" Suc)
###                             ("_applC" ("_position" length)
###                               ("_position" s)))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" hd) ("_position" ms))
###                             ("_applC" ("_position" sourcenode)
###                               ("_position" a))))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq" ("_position" ms')
###                               ("\<^const>List.list.Cons"
###                                 ("_applC" ("_position" targetnode)
###                                   ("_position" a))
###                                 ("\<^const>List.list.Cons"
###                                   ("_applC" ("_position" targetnode)
###                                     ("_position" a'))
###                                   ("_applC" ("_position" tl)
###                                     ("_position" ms))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>observable_move" ("_position" S) ("_position" f)
###       ("_position" ms) ("_position" s) ("_position" a) ("_position" ms')
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1185 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_applC" ("_position" f) ("_position" a))
###           ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" transfer)
###             ("_cargs" ("_applC" ("_position" f) ("_position" a))
###               ("_position" s)))
###           ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f'))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_Ball" ("_position" m)
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" tl) ("_position" ms)))
###                 ("\<^const>HOL.Ex_binder" ("_position" m')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" call_of_return_node)
###                       ("_cargs" ("_position" m) ("_position" m')))
###                     ("\<^const>Set.member" ("_position" m')
###                       ("\<^const>local.SDG_to_CFG_set"
###                         ("_applC" ("_position" HRB_slice)
###                           ("_position" S))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length) ("_position" ms))
###                   ("_applC" ("_position" length) ("_position" s))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" length) ("_position" s))
###                     ("_applC" ("_position" Suc)
###                       ("_applC" ("_position" length) ("_position" s')))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.not_equal" ("_position" s')
###                       ("\<^const>List.list.Nil")))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" hd) ("_position" ms))
###                         ("_applC" ("_position" sourcenode)
###                           ("_position" a))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" hd)
###                             ("_applC" ("_position" tl) ("_position" ms)))
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" ms')
###                             ("_applC" ("_position" tl)
###                               ("_position" ms)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>observable_move" ("_position" S) ("_position" f)
###       ("_position" ms) ("_position" s) ("_position" a) ("_position" ms')
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_applC" ("_position" f) ("_position" a))
###           ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" transfer)
###             ("_cargs" ("_applC" ("_position" f) ("_position" a))
###               ("_position" s)))
###           ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f')))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_Ball" ("_position" m)
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" tl) ("_position" ms)))
###                 ("\<^const>HOL.Ex_binder" ("_position" m')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" call_of_return_node)
###                       ("_cargs" ("_position" m) ("_position" m')))
###                     ("\<^const>Set.member" ("_position" m')
###                       ("\<^const>local.SDG_to_CFG_set"
###                         ("_applC" ("_position" HRB_slice)
###                           ("_position" S))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length) ("_position" ms))
###                   ("_applC" ("_position" length) ("_position" s))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" length) ("_position" s))
###                     ("_applC" ("_position" Suc)
###                       ("_applC" ("_position" length) ("_position" s')))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.not_equal" ("_position" s')
###                       ("\<^const>List.list.Nil")))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" hd) ("_position" ms))
###                         ("_applC" ("_position" sourcenode)
###                           ("_position" a))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" hd)
###                             ("_applC" ("_position" tl) ("_position" ms)))
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" ms')
###                             ("_applC" ("_position" tl)
###                               ("_position" ms)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>observable_move" ("_position" S) ("_position" f)
###       ("_position" ms) ("_position" s) ("_position" a) ("_position" ms')
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "observable_move"
  Proving monotonicity ...
Proofs for inductive predicate(s) "observable_moves"
  Proving monotonicity ...
### Ambiguous input (line 1340 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" parent_node) ("_position" n''))
###                   ("\<^const>local.notin_SDG_Def"
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" as)))
###                       ("_position" V))
###                     ("_position" n''))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                 ("\<^const>local.notin_SDG_Def"
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" parent_node) ("_position" n''))
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" as))))
###                     ("_position" V))
###                   ("_position" n'')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>local.notin_SDG_Def"
###               ("\<^const>HOL.All_binder" ("_position" n'')
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" valid_SDG_node)
###                       ("_position" n''))
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" parent_node) ("_position" n''))
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" as)))))
###                   ("_position" V)))
###               ("_position" n'')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>local.notin_SDG_Def"
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" valid_SDG_node)
###                       ("_position" n''))
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" parent_node) ("_position" n''))
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" as)))))
###                   ("_position" V))
###                 ("_position" n''))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("_applC" ("_position" valid_SDG_node)
###                 ("\<^const>local.notin_SDG_Def"
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj" ("_position" n'')
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" parent_node)
###                           ("_position" n''))
###                         ("_applC" ("_position" set)
###                           ("_applC" ("_position" sourcenodes)
###                             ("_position" as)))))
###                     ("_position" V))
###                   ("_position" n'')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                 ("_applC" ("_position" parent_node)
###                   ("\<^const>local.notin_SDG_Def"
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member" ("_position" n'')
###                         ("_applC" ("_position" set)
###                           ("_applC" ("_position" sourcenodes)
###                             ("_position" as))))
###                       ("_position" V))
###                     ("_position" n''))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" parent_node) ("_position" n''))
###                   ("_applC" ("_position" set)
###                     ("\<^const>local.notin_SDG_Def"
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" as))
###                         ("_position" V))
###                       ("_position" n'')))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                   ("\<^const>Set.member"
###                     ("_applC" ("_position" parent_node) ("_position" n''))
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("_position" as)))))
###                 ("\<^const>local.notin_SDG_Def" ("_position" V)
###                   ("_position" n'')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" parent_node) ("_position" n''))
###                   ("\<^const>local.notin_SDG_Def"
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" as)))
###                       ("_position" V))
###                     ("_position" n''))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("\<^fixed>relevant_vars"
###         ("_applC" ("_position" S) ("_position" n))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                 ("\<^const>local.notin_SDG_Def"
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" parent_node) ("_position" n''))
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" as))))
###                     ("_position" V))
###                   ("_position" n'')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("\<^fixed>relevant_vars"
###         ("_applC" ("_position" S) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "relevant_varsp"
  Proving monotonicity ...
### Ambiguous input (line 1347 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1350 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n'')
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###         ("\<^const>Set.member"
###           ("_applC" ("_position" parent_node) ("_position" n''))
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes) ("_position" as)))))
###       ("\<^const>local.notin_SDG_Def" ("_position" V) ("_position" n'')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n'')
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###       ("\<^const>Set.member"
###         ("_applC" ("_position" parent_node) ("_position" n''))
###         ("_applC" ("_position" set)
###           ("\<^const>local.notin_SDG_Def"
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" sourcenodes) ("_position" as))
###               ("_position" V))
###             ("_position" n'')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n'')
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###       ("_applC" ("_position" parent_node)
###         ("\<^const>local.notin_SDG_Def"
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member" ("_position" n'')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as))))
###             ("_position" V))
###           ("_position" n''))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n'')
###     ("_applC" ("_position" valid_SDG_node)
###       ("\<^const>local.notin_SDG_Def"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj" ("_position" n'')
###             ("\<^const>Set.member"
###               ("_applC" ("_position" parent_node) ("_position" n''))
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as)))))
###           ("_position" V))
###         ("_position" n'')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n'')
###     ("\<^const>local.notin_SDG_Def"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###           ("\<^const>Set.member"
###             ("_applC" ("_position" parent_node) ("_position" n''))
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))
###         ("_position" V))
###       ("_position" n''))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.notin_SDG_Def"
###     ("\<^const>HOL.All_binder" ("_position" n'')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###           ("\<^const>Set.member"
###             ("_applC" ("_position" parent_node) ("_position" n''))
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))
###         ("_position" V)))
###     ("_position" n'')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n'')
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###       ("\<^const>local.notin_SDG_Def"
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" parent_node) ("_position" n''))
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as))))
###           ("_position" V))
###         ("_position" n'')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n'')
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###       ("\<^const>Set.member"
###         ("_applC" ("_position" parent_node) ("_position" n''))
###         ("\<^const>local.notin_SDG_Def"
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))
###             ("_position" V))
###           ("_position" n''))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1357 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 7 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" parent_node) ("_position" n))
###       ("_applC" ("_position" parent_node) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>local.relevant_vars"
###         ("\<^const>HOL.eq"
###           ("_applC"
###             ("_constrain" ("_position" S)
###               ("_tapp"
###                 ("_tapp" ("_position_sort" 'node) ("_type_name" SDG_node))
###                 ("_type_name" set)))
###             ("_position" n))
###           ("\<^const>local.relevant_vars" ("_position" S))))
###       ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" parent_node) ("_position" n))
###       ("_applC" ("_position" parent_node) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.relevant_vars"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("_constrain" ("_position" S)
###             ("_tapp"
###               ("_tapp" ("_position_sort" 'node) ("_type_name" SDG_node))
###               ("_type_name" set)))
###           ("_position" n))
###         ("\<^const>local.relevant_vars"
###           ("_applC" ("_position" S) ("_position" n')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" parent_node) ("_position" n))
###       ("_applC" ("_position" parent_node) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>local.relevant_vars"
###         ("_applC"
###           ("_constrain" ("_position" S)
###             ("_tapp"
###               ("_tapp" ("_position_sort" 'node) ("_type_name" SDG_node))
###               ("_type_name" set)))
###           ("_position" n)))
###       ("\<^const>local.relevant_vars"
###         ("_applC" ("_position" S) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" parent_node) ("_position" n))
###       ("_applC" ("_position" parent_node) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC"
###         ("\<^const>local.relevant_vars"
###           ("_constrain" ("_position" S)
###             ("_tapp"
###               ("_tapp" ("_position_sort" 'node) ("_type_name" SDG_node))
###               ("_type_name" set))))
###         ("_position" n))
###       ("\<^const>local.relevant_vars"
###         ("_applC" ("_position" S) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" parent_node) ("_position" n))
###       ("_applC" ("_position" parent_node) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.relevant_vars"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("_constrain" ("_position" S)
###             ("_tapp"
###               ("_tapp" ("_position_sort" 'node) ("_type_name" SDG_node))
###               ("_type_name" set)))
###           ("_position" n))
###         ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###           ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" parent_node) ("_position" n))
###       ("_applC" ("_position" parent_node) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>local.relevant_vars"
###         ("_applC"
###           ("_constrain" ("_position" S)
###             ("_tapp"
###               ("_tapp" ("_position_sort" 'node) ("_type_name" SDG_node))
###               ("_type_name" set)))
###           ("_position" n)))
###       ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###         ("_position" n')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" parent_node) ("_position" n))
###       ("_applC" ("_position" parent_node) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC"
###         ("\<^const>local.relevant_vars"
###           ("_constrain" ("_position" S)
###             ("_tapp"
###               ("_tapp" ("_position_sort" 'node) ("_type_name" SDG_node))
###               ("_type_name" set))))
###         ("_position" n))
###       ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###         ("_position" n')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1362 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relevant_vars"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m)))
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m))))
###     ("\<^const>Set.empty")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node) ("_position" m)))
###     ("\<^const>Set.empty")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1380 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1380 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1532 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>local.relevant_vars"
###       ("\<^const>HOL.eq" ("_applC" ("_position" S) ("_position" n))
###         ("\<^const>local.relevant_vars" ("_position" S))))
###     ("_position" n')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relevant_vars"
###     ("\<^const>HOL.eq" ("_applC" ("_position" S) ("_position" n))
###       ("\<^const>local.relevant_vars"
###         ("_applC" ("_position" S) ("_position" n'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relevant_vars"
###     ("\<^const>HOL.eq" ("_applC" ("_position" S) ("_position" n))
###       ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###         ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1552 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>local.relevant_vars"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" S)
###           ("_applC" ("_position" CFG_node) ("_position" m)))
###         ("\<^const>local.relevant_vars" ("_position" S))))
###     ("_applC" ("_position" CFG_node) ("_position" m'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relevant_vars"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m)))
###       ("\<^const>local.relevant_vars"
###         ("_applC" ("_position" S)
###           ("_applC" ("_position" CFG_node) ("_position" m')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m))))
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node) ("_position" m)))
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relevant_vars"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m)))
###       ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###         ("_applC" ("_position" CFG_node) ("_position" m'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m))))
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node) ("_position" m')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node) ("_position" m)))
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node) ("_position" m')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1577 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node)
###         ("_applC" ("_position" sourcenode) ("_position" a))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node)
###           ("_applC" ("_position" sourcenode) ("_position" a)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1645 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node)
###         ("_applC" ("_position" sourcenode) ("_position" a))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node)
###           ("_applC" ("_position" sourcenode) ("_position" a)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1647 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node)
###         ("_applC" ("_position" targetnode) ("_position" a))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs"
###           ("_applC" ("_position" transfer)
###             ("_cargs"
###               ("_applC" ("_position" slice_kind)
###                 ("_cargs" ("_position" S) ("_position" a)))
###               ("_position" s)))
###           ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs"
###           ("_applC" ("_position" transfer)
###             ("_cargs"
###               ("_applC" ("_position" slice_kind)
###                 ("_cargs" ("_position" S) ("_position" a)))
###               ("_position" s')))
###           ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node)
###           ("_applC" ("_position" targetnode) ("_position" a)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs"
###           ("_applC" ("_position" transfer)
###             ("_cargs"
###               ("_applC" ("_position" slice_kind)
###                 ("_cargs" ("_position" S) ("_position" a)))
###               ("_position" s)))
###           ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs"
###           ("_applC" ("_position" transfer)
###             ("_cargs"
###               ("_applC" ("_position" slice_kind)
###                 ("_cargs" ("_position" S) ("_position" a)))
###               ("_position" s')))
###           ("_position" V))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1796 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" m) ("_applC" ("_position" set) ("_position" ms))
###         ("_applC" ("_position" valid_node) ("_position" m))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" m')
###           ("_applC" ("_position" set) ("_position" ms'))
###           ("_applC" ("_position" valid_node) ("_position" m'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" length) ("_position" ms))
###             ("_applC" ("_position" length) ("_position" s))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" length) ("_position" ms'))
###               ("_applC" ("_position" length) ("_position" s'))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" s)
###                 ("\<^const>List.list.Nil")))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" s')
###                   ("\<^const>List.list.Nil")))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" ms)
###                     ("\<^const>List.append" ("_position" msx)
###                       ("\<^const>List.list.Cons" ("_position" mx)
###                         ("_applC" ("_position" tl) ("_position" ms'))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" get_proc) ("_position" mx))
###                       ("_applC" ("_position" get_proc)
###                         ("_applC" ("_position" hd) ("_position" ms')))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("_Ball" ("_position" m)
###                         ("_applC" ("_position" set)
###                           ("_applC" ("_position" tl) ("_position" ms')))
###                         ("\<^const>HOL.Ex_binder" ("_position" m')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" call_of_return_node)
###                               ("_cargs" ("_position" m) ("_position" m')))
###                             ("\<^const>Set.member" ("_position" m')
###                               ("\<^const>local.SDG_to_CFG_set"
###                                 ("_applC" ("_position" HRB_slice)
###                                   ("_position" S))))))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.not_equal" ("_position" msx)
###                             ("\<^const>List.list.Nil"))
###                           ("\<^const>HOL.Ex_binder" ("_position" mx')
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" call_of_return_node)
###                                 ("_cargs" ("_position" mx)
###                                   ("_position" mx')))
###                               ("\<^const>Set.not_member" ("_position" mx')
###                                 ("\<^const>local.SDG_to_CFG_set"
###                                   ("_applC" ("_position" HRB_slice)
###                                     ("_position" S))))))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("_All_less" ("_position" i)
###                             ("_applC" ("_position" length)
###                               ("_position" ms'))
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" snd)
###                                 ("\<^const>List.nth" ("_position" s)
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_applC" ("_position" length)
### ("_position" msx))
###                                     ("_position" i))))
###                               ("_applC" ("_position" snd)
###                                 ("\<^const>List.nth" ("_position" s')
###                                   ("_position" i))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("_Ball" ("_position" m)
###                               ("_applC" ("_position" set)
###                                 ("_applC" ("_position" tl)
###                                   ("_position" ms)))
###                               ("_applC" ("_position" return_node)
###                                 ("_position" m))))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("_All_less" ("_position" i)
###                                 ("_applC" ("_position" length)
###                                   ("_position" ms'))
###                                 ("_Ball" ("_position" V)
###                                   ("\<^const>local.relevant_vars"
###                                     ("_applC" ("_position" S)
### ("_applC" ("_position" CFG_node)
###   ("\<^const>List.nth"
###     ("\<^const>List.list.Cons" ("_position" mx)
###       ("_applC" ("_position" tl) ("_position" ms')))
###     ("_position" i)))))
###                                   ("\<^const>HOL.eq"
###                                     ("_applC"
### ("_applC" ("_position" fst)
###   ("\<^const>List.nth" ("_position" s)
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" length) ("_position" msx)) ("_position" i))))
### ("_position" V))
###                                     ("_applC"
### ("_applC" ("_position" fst)
###   ("\<^const>List.nth" ("_position" s') ("_position" i)))
### ("_position" V))))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" obs)
###                                     ("_cargs" ("_position" ms)
### ("\<^const>local.SDG_to_CFG_set"
###   ("_applC" ("_position" HRB_slice) ("_position" S)))))
###                                   ("_applC" ("_position" obs)
###                                     ("_cargs" ("_position" ms')
### ("\<^const>local.SDG_to_CFG_set"
###   ("_applC" ("_position" HRB_slice) ("_position" S)))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_tuple" ("_position" ms) ("_tuple_arg" ("_position" s)))
###         ("_tuple_arg"
###           ("_tuple" ("_position" ms') ("_tuple_arg" ("_position" s')))))
###       ("_applC" ("_position" WS) ("_position" S)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" m) ("_applC" ("_position" set) ("_position" ms))
###         ("_applC" ("_position" valid_node) ("_position" m))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" m')
###           ("_applC" ("_position" set) ("_position" ms'))
###           ("_applC" ("_position" valid_node) ("_position" m'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" length) ("_position" ms))
###             ("_applC" ("_position" length) ("_position" s))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" length) ("_position" ms'))
###               ("_applC" ("_position" length) ("_position" s'))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" s)
###                 ("\<^const>List.list.Nil")))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" s')
###                   ("\<^const>List.list.Nil")))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" ms)
###                     ("\<^const>List.append" ("_position" msx)
###                       ("\<^const>List.list.Cons" ("_position" mx)
###                         ("_applC" ("_position" tl) ("_position" ms'))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" get_proc) ("_position" mx))
###                       ("_applC" ("_position" get_proc)
###                         ("_applC" ("_position" hd) ("_position" ms')))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("_Ball" ("_position" m)
###                         ("_applC" ("_position" set)
###                           ("_applC" ("_position" tl) ("_position" ms')))
###                         ("\<^const>HOL.Ex_binder" ("_position" m')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" call_of_return_node)
###                               ("_cargs" ("_position" m) ("_position" m')))
###                             ("\<^const>Set.member" ("_position" m')
###                               ("\<^const>local.SDG_to_CFG_set"
###                                 ("_applC" ("_position" HRB_slice)
###                                   ("_position" S))))))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.not_equal" ("_position" msx)
###                             ("\<^const>List.list.Nil"))
###                           ("\<^const>HOL.Ex_binder" ("_position" mx')
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" call_of_return_node)
###                                 ("_cargs" ("_position" mx)
###                                   ("_position" mx')))
###                               ("\<^const>Set.not_member" ("_position" mx')
###                                 ("\<^const>local.SDG_to_CFG_set"
###                                   ("_applC" ("_position" HRB_slice)
###                                     ("_position" S))))))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("_All_less" ("_position" i)
###                             ("_applC" ("_position" length)
###                               ("_position" ms'))
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" snd)
###                                 ("\<^const>List.nth" ("_position" s)
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_applC" ("_position" length)
### ("_position" msx))
###                                     ("_position" i))))
###                               ("_applC" ("_position" snd)
###                                 ("\<^const>List.nth" ("_position" s')
###                                   ("_position" i))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("_Ball" ("_position" m)
###                               ("_applC" ("_position" set)
###                                 ("_applC" ("_position" tl)
###                                   ("_position" ms)))
###                               ("_applC" ("_position" return_node)
###                                 ("_position" m))))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("_All_less" ("_position" i)
###                                 ("_applC" ("_position" length)
###                                   ("_position" ms'))
###                                 ("_Ball" ("_position" V)
###                                   ("_applC"
###                                     ("\<^const>local.relevant_vars"
### ("_position" S))
###                                     ("_applC" ("_position" CFG_node)
### ("\<^const>List.nth"
###   ("\<^const>List.list.Cons" ("_position" mx)
###     ("_applC" ("_position" tl) ("_position" ms')))
###   ("_position" i))))
###                                   ("\<^const>HOL.eq"
###                                     ("_applC"
### ("_applC" ("_position" fst)
###   ("\<^const>List.nth" ("_position" s)
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" length) ("_position" msx)) ("_position" i))))
### ("_position" V))
###                                     ("_applC"
### ("_applC" ("_position" fst)
###   ("\<^const>List.nth" ("_position" s') ("_position" i)))
### ("_position" V))))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" obs)
###                                     ("_cargs" ("_position" ms)
### ("\<^const>local.SDG_to_CFG_set"
###   ("_applC" ("_position" HRB_slice) ("_position" S)))))
###                                   ("_applC" ("_position" obs)
###                                     ("_cargs" ("_position" ms')
### ("\<^const>local.SDG_to_CFG_set"
###   ("_applC" ("_position" HRB_slice) ("_position" S)))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_tuple" ("_position" ms) ("_tuple_arg" ("_position" s)))
###         ("_tuple_arg"
###           ("_tuple" ("_position" ms') ("_tuple_arg" ("_position" s')))))
###       ("_applC" ("_position" WS) ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WSp"
  Proving monotonicity ...
### theory "HRB-Slicing.WeakSimulation"
### 1.519s elapsed time, 1.610s cpu time, 0.131s GC time
Loading theory "HRB-Slicing.FundamentalProperty" (required by "Draft.NonInterferenceInterMoreTemplates" via "Draft.NonInterferenceInter")
locale SDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
  assumes
    "SDG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_) Def Use ParamDefs ParamUses"
### Ambiguous input (line 463 of "$AFP/HRB-Slicing/StaticInter/FundamentalProperty.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.silent_moves" ("_position" S) ("_position" f)
###         ("\<^const>List.list.Cons" ("_position" m)
###           ("\<^const>List.append" ("_position" ms'') ("_position" ms)))
###         ("_position" s) ("_position" as)
###         ("\<^const>List.list.Cons" ("_position" m') ("_position" ms'))
###         ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_node) ("_position" m)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" m))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_All_less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" rs))
###               ("\<^const>Set.member"
###                 ("\<^const>List.nth" ("_position" rs) ("_position" i))
###                 ("_applC" ("_position" get_return_edges)
###                   ("\<^const>List.nth" ("_position" cs) ("_position" i))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_return_list)
###                 ("_cargs" ("_position" rs) ("_position" m))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length) ("_position" rs))
###                   ("_applC" ("_position" length) ("_position" cs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" ms'')
###                     ("_applC" ("_position" targetnodes) ("_position" rs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Ball" ("_position" mx)
###                       ("_applC" ("_position" set) ("_position" ms))
###                       ("\<^const>HOL.Ex_binder" ("_position" mx')
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" call_of_return_node)
###                             ("_cargs" ("_position" mx) ("_position" mx')))
###                           ("\<^const>Set.member" ("_position" mx')
###                             ("\<^const>local.SDG_to_CFG_set"
###                               ("_applC" ("_position" HRB_slice)
###                                 ("_position" S))))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.not_equal" ("_position" ms'')
###                           ("\<^const>List.list.Nil"))
###                         ("\<^const>HOL.Ex_binder" ("_position" mx')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" call_of_return_node)
###                               ("_cargs"
###                                 ("_applC" ("_position" last)
###                                   ("_position" ms''))
###                                 ("_position" mx')))
###                             ("\<^const>Set.not_member" ("_position" mx')
###                               ("\<^const>local.SDG_to_CFG_set"
###                                 ("_applC" ("_position" HRB_slice)
###                                   ("_position" S))))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("_Ball" ("_position" mx)
###                           ("_applC" ("_position" set) ("_position" ms'))
###                           ("\<^const>HOL.Ex_binder" ("_position" mx')
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" call_of_return_node)
###                                 ("_cargs" ("_position" mx)
###                                   ("_position" mx')))
###                               ("\<^const>Set.member" ("_position" mx')
###                                 ("\<^const>local.SDG_to_CFG_set"
###                                   ("_applC" ("_position" HRB_slice)
###                                     ("_position" S))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil"))
###         ("\<^const>HOL.eq"
###           ("\<^const>local.path" ("_position" m) ("_position" as)
###             ("\<^const>HOL.conj" ("_position" m') ("_position" ms)))
###           ("_position" ms'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.silent_moves" ("_position" S) ("_position" f)
###         ("\<^const>List.list.Cons" ("_position" m)
###           ("\<^const>List.append" ("_position" ms'') ("_position" ms)))
###         ("_position" s) ("_position" as)
###         ("\<^const>List.list.Cons" ("_position" m') ("_position" ms'))
###         ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_node) ("_position" m)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" m))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_All_less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" rs))
###               ("\<^const>Set.member"
###                 ("\<^const>List.nth" ("_position" rs) ("_position" i))
###                 ("_applC" ("_position" get_return_edges)
###                   ("\<^const>List.nth" ("_position" cs) ("_position" i))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_return_list)
###                 ("_cargs" ("_position" rs) ("_position" m))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length) ("_position" rs))
###                   ("_applC" ("_position" length) ("_position" cs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" ms'')
###                     ("_applC" ("_position" targetnodes) ("_position" rs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Ball" ("_position" mx)
###                       ("_applC" ("_position" set) ("_position" ms))
###                       ("\<^const>HOL.Ex_binder" ("_position" mx')
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" call_of_return_node)
###                             ("_cargs" ("_position" mx) ("_position" mx')))
###                           ("\<^const>Set.member" ("_position" mx')
###                             ("\<^const>local.SDG_to_CFG_set"
###                               ("_applC" ("_position" HRB_slice)
###                                 ("_position" S))))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.not_equal" ("_position" ms'')
###                           ("\<^const>List.list.Nil"))
###                         ("\<^const>HOL.Ex_binder" ("_position" mx')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" call_of_return_node)
###                               ("_cargs"
###                                 ("_applC" ("_position" last)
###                                   ("_position" ms''))
###                                 ("_position" mx')))
###                             ("\<^const>Set.not_member" ("_position" mx')
###                               ("\<^const>local.SDG_to_CFG_set"
###                                 ("_applC" ("_position" HRB_slice)
###                                   ("_position" S))))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("_Ball" ("_position" mx)
###                           ("_applC" ("_position" set) ("_position" ms'))
###                           ("\<^const>HOL.Ex_binder" ("_position" mx')
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" call_of_return_node)
###                                 ("_cargs" ("_position" mx)
###                                   ("_position" mx')))
###                               ("\<^const>Set.member" ("_position" mx')
###                                 ("\<^const>local.SDG_to_CFG_set"
###                                   ("_applC" ("_position" HRB_slice)
###                                     ("_position" S))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil"))
###         ("\<^const>local.path" ("_position" m) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" m')
###             ("\<^const>HOL.eq" ("_position" ms) ("_position" ms'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.silent_moves" ("_position" S) ("_position" f)
###         ("\<^const>List.list.Cons" ("_position" m)
###           ("\<^const>List.append" ("_position" ms'') ("_position" ms)))
###         ("_position" s) ("_position" as)
###         ("\<^const>List.list.Cons" ("_position" m') ("_position" ms'))
###         ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_node) ("_position" m)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" m))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_All_less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" rs))
###               ("\<^const>Set.member"
###                 ("\<^const>List.nth" ("_position" rs) ("_position" i))
###                 ("_applC" ("_position" get_return_edges)
###                   ("\<^const>List.nth" ("_position" cs) ("_position" i))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_return_list)
###                 ("_cargs" ("_position" rs) ("_position" m))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length) ("_position" rs))
###                   ("_applC" ("_position" length) ("_position" cs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" ms'')
###                     ("_applC" ("_position" targetnodes) ("_position" rs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Ball" ("_position" mx)
###                       ("_applC" ("_position" set) ("_position" ms))
###                       ("\<^const>HOL.Ex_binder" ("_position" mx')
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" call_of_return_node)
###                             ("_cargs" ("_position" mx) ("_position" mx')))
###                           ("\<^const>Set.member" ("_position" mx')
###                             ("\<^const>local.SDG_to_CFG_set"
###                               ("_applC" ("_position" HRB_slice)
###                                 ("_position" S))))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.not_equal" ("_position" ms'')
###                           ("\<^const>List.list.Nil"))
###                         ("\<^const>HOL.Ex_binder" ("_position" mx')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" call_of_return_node)
###                               ("_cargs"
###                                 ("_applC" ("_position" last)
###                                   ("_position" ms''))
###                                 ("_position" mx')))
###                             ("\<^const>Set.not_member" ("_position" mx')
###                               ("\<^const>local.SDG_to_CFG_set"
###                                 ("_applC" ("_position" HRB_slice)
###                                   ("_position" S))))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("_Ball" ("_position" mx)
###                           ("_applC" ("_position" set) ("_position" ms'))
###                           ("\<^const>HOL.Ex_binder" ("_position" mx')
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" call_of_return_node)
###                                 ("_cargs" ("_position" mx)
###                                   ("_position" mx')))
###                               ("\<^const>Set.member" ("_position" mx')
###                                 ("\<^const>local.SDG_to_CFG_set"
###                                   ("_applC" ("_position" HRB_slice)
###                                     ("_position" S))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil"))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" m) ("_position" as)
###             ("_position" m'))
###           ("\<^const>HOL.eq" ("_position" ms) ("_position" ms')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 721 of "$AFP/HRB-Slicing/StaticInter/FundamentalProperty.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.silent_moves" ("_position" S) ("_position" f)
###         ("\<^const>List.list.Cons" ("_position" m) ("_position" ms))
###         ("_position" s) ("_position" as)
###         ("\<^const>List.list.Cons" ("_position" m') ("_position" ms'))
###         ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_node) ("_position" m)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" mx)
###             ("_applC" ("_position" set) ("_position" ms))
###             ("\<^const>HOL.Ex_binder" ("_position" mx')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" call_of_return_node)
###                   ("_cargs" ("_position" mx) ("_position" mx')))
###                 ("\<^const>Set.member" ("_position" mx')
###                   ("\<^const>local.SDG_to_CFG_set"
###                     ("_applC" ("_position" HRB_slice) ("_position" S))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" mx)
###               ("_applC" ("_position" set) ("_position" ms'))
###               ("\<^const>HOL.Ex_binder" ("_position" mx')
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" call_of_return_node)
###                     ("_cargs" ("_position" mx) ("_position" mx')))
###                   ("\<^const>Set.member" ("_position" mx')
###                     ("\<^const>local.SDG_to_CFG_set"
###                       ("_applC" ("_position" HRB_slice)
###                         ("_position" S))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>local.same_level_path'" ("_position" m) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" m') ("_position" ms)))
###       ("_position" ms'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.silent_moves" ("_position" S) ("_position" f)
###         ("\<^const>List.list.Cons" ("_position" m) ("_position" ms))
###         ("_position" s) ("_position" as)
###         ("\<^const>List.list.Cons" ("_position" m') ("_position" ms'))
###         ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_node) ("_position" m)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" mx)
###             ("_applC" ("_position" set) ("_position" ms))
###             ("\<^const>HOL.Ex_binder" ("_position" mx')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" call_of_return_node)
###                   ("_cargs" ("_position" mx) ("_position" mx')))
###                 ("\<^const>Set.member" ("_position" mx')
###                   ("\<^const>local.SDG_to_CFG_set"
###                     ("_applC" ("_position" HRB_slice) ("_position" S))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" mx)
###               ("_applC" ("_position" set) ("_position" ms'))
###               ("\<^const>HOL.Ex_binder" ("_position" mx')
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" call_of_return_node)
###                     ("_cargs" ("_position" mx) ("_position" mx')))
###                   ("\<^const>Set.member" ("_position" mx')
###                     ("\<^const>local.SDG_to_CFG_set"
###                       ("_applC" ("_position" HRB_slice)
###                         ("_position" S))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.same_level_path'" ("_position" m) ("_position" as)
###       ("\<^const>HOL.conj" ("_position" m')
###         ("\<^const>HOL.eq" ("_position" ms) ("_position" ms'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.silent_moves" ("_position" S) ("_position" f)
###         ("\<^const>List.list.Cons" ("_position" m) ("_position" ms))
###         ("_position" s) ("_position" as)
###         ("\<^const>List.list.Cons" ("_position" m') ("_position" ms'))
###         ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_node) ("_position" m)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" mx)
###             ("_applC" ("_position" set) ("_position" ms))
###             ("\<^const>HOL.Ex_binder" ("_position" mx')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" call_of_return_node)
###                   ("_cargs" ("_position" mx) ("_position" mx')))
###                 ("\<^const>Set.member" ("_position" mx')
###                   ("\<^const>local.SDG_to_CFG_set"
###                     ("_applC" ("_position" HRB_slice) ("_position" S))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" mx)
###               ("_applC" ("_position" set) ("_position" ms'))
###               ("\<^const>HOL.Ex_binder" ("_position" mx')
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" call_of_return_node)
###                     ("_cargs" ("_position" mx) ("_position" mx')))
###                   ("\<^const>Set.member" ("_position" mx')
###                     ("\<^const>local.SDG_to_CFG_set"
###                       ("_applC" ("_position" HRB_slice)
###                         ("_position" S))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>local.same_level_path'" ("_position" m) ("_position" as)
###         ("_position" m'))
###       ("\<^const>HOL.eq" ("_position" ms) ("_position" ms')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 915 of "$AFP/HRB-Slicing/StaticInter/FundamentalProperty.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" r)
###           ("_idts" ("_position" p) ("_position" fs))))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###         ("_position" Q)))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" r) ("_idts" ("_position" p) ("_position" fs))))
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###         ("_position" Q))
###       ("_position" r) ("_position" p) ("_position" fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" r) ("_idts" ("_position" p) ("_position" fs))))
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###         ("_position" r) ("_position" p) ("_position" fs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1173 of "$AFP/HRB-Slicing/StaticInter/FundamentalProperty.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" r)
###           ("_idts" ("_position" p) ("_position" fs))))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###         ("_position" Q)))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" r) ("_idts" ("_position" p) ("_position" fs))))
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###         ("_position" Q))
###       ("_position" r) ("_position" p) ("_position" fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" r) ("_idts" ("_position" p) ("_position" fs))))
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###         ("_position" r) ("_position" p) ("_position" fs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "trans_observable_moves"
  Proving monotonicity ...
locale SemanticsProperty
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
    and
    sem ::
      "'com
       => ('var => 'val option) list
          => 'com => ('var => 'val option) list => bool"
      (\<open>((1\<langle>_,/_\<rangle>) \<Rightarrow>/ (1\<langle>_,/_\<rangle>))\<close>
        [0, 0, 0, 0] 81)
    and
    identifies :: "'node => 'com => bool"
      (\<open>_ \<triangleq> _\<close> [51, 0] 80)
  assumes
    "SemanticsProperty sourcenode targetnode kind valid_edge (_Entry_)
      get_proc get_return_edges procs Main (_Exit_) Def Use ParamDefs
      ParamUses sem identifies"
### theory "HRB-Slicing.FundamentalProperty"
### 2.491s elapsed time, 3.515s cpu time, 1.422s GC time
Loading theory "Draft.NonInterferenceInter" (required by "Draft.NonInterferenceInterMoreTemplates")
locale NonInterferenceInterGraph
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
    and H :: "'var set"
    and L :: "'var set"
    and High :: "'node"  (\<open>'('_High'_')\<close>)
    and Low :: "'node"  (\<open>'('_Low'_')\<close>)
  assumes
    "NonInterferenceInterGraph sourcenode targetnode kind valid_edge
      (_Entry_) get_proc get_return_edges procs Main (_Exit_) Def Use
      ParamDefs ParamUses H L (_High_) (_Low_)"
### Ambiguous input (line 198 of "$AFP/InformationFlowSlicing_Inter/NonInterferenceInter.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node) ("\<^fixed>Entry")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("\<^fixed>Entry"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 263 of "$AFP/InformationFlowSlicing_Inter/NonInterferenceInter.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node) ("\<^fixed>Entry")))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" hd) ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" hd)
###         ("_cargs" ("_position" s') ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("\<^fixed>Entry"))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" hd) ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" hd)
###         ("_cargs" ("_position" s') ("_position" V))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 287 of "$AFP/InformationFlowSlicing_Inter/NonInterferenceInter.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs" ("_position" cs) ("_position" as'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>local.path" ("_position" m) ("_position" as)
###                 ("\<^fixed>Low")))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.path" ("_position" m) ("_position" as')
###                   ("\<^fixed>Low")))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_All_less" ("_position" i)
###                     ("_applC" ("_position" length) ("_position" cs))
###                     ("_Ball" ("_position" V)
###                       ("\<^const>local.relevant_vars"
###                         ("_applC" ("_position" S)
###                           ("_applC" ("_position" CFG_node)
###                             ("_applC" ("_position" sourcenode)
###                               ("\<^const>List.nth" ("_position" cs)
###                                 ("_position" i))))))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" fst)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" s)
###                               ("_applC" ("_position" Suc) ("_position" i)))
###                             ("_position" V)))
###                         ("_applC" ("_position" fst)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" s')
###                               ("_applC" ("_position" Suc) ("_position" i)))
###                             ("_position" V)))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_All_less" ("_position" i)
###                       ("_applC" ("_position" Suc)
###                         ("_applC" ("_position" length) ("_position" cs)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" snd)
###                           ("\<^const>List.nth" ("_position" s)
###                             ("_position" i)))
###                         ("_applC" ("_position" snd)
###                           ("\<^const>List.nth" ("_position" s')
###                             ("_position" i))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("_Ball" ("_position" V)
###                         ("\<^const>local.relevant_vars"
###                           ("_applC" ("_position" S)
###                             ("_applC" ("_position" CFG_node)
###                               ("_position" m))))
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" state_val)
###                             ("_cargs" ("_position" s) ("_position" V)))
###                           ("_applC" ("_position" state_val)
###                             ("_cargs" ("_position" s') ("_position" V))))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("_applC" ("_position" preds)
###                           ("_cargs"
###                             ("_applC" ("_position" slice_kinds)
###                               ("_cargs" ("_position" S) ("_position" as)))
###                             ("_position" s))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("_applC" ("_position" preds)
###                             ("_cargs"
###                               ("_applC" ("_position" slice_kinds)
###                                 ("_cargs" ("_position" S)
###                                   ("_position" as')))
###                               ("_position" s'))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" length)
###                                 ("_position" s))
###                               ("_applC" ("_position" Suc)
###                                 ("_applC" ("_position" length)
###                                   ("_position" cs)))))
###                           ("_asm"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>HOL.eq"
###                                 ("_applC" ("_position" length)
###                                   ("_position" s'))
###                                 ("_applC" ("_position" Suc)
###                                   ("_applC" ("_position" length)
###                                     ("_position" cs))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" V) ("_applC" ("_position" Use) ("\<^fixed>Low"))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" state_val)
###           ("_cargs"
###             ("_applC" ("_position" transfers)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as)))
###                 ("_position" s)))
###             ("_position" V)))
###         ("_applC" ("_position" state_val)
###           ("_cargs"
###             ("_applC" ("_position" transfers)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as')))
###                 ("_position" s')))
###             ("_position" V)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs" ("_position" cs) ("_position" as'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>local.path" ("_position" m) ("_position" as)
###                 ("\<^fixed>Low")))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.path" ("_position" m) ("_position" as')
###                   ("\<^fixed>Low")))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_All_less" ("_position" i)
###                     ("_applC" ("_position" length) ("_position" cs))
###                     ("_Ball" ("_position" V)
###                       ("_applC"
###                         ("\<^const>local.relevant_vars" ("_position" S))
###                         ("_applC" ("_position" CFG_node)
###                           ("_applC" ("_position" sourcenode)
###                             ("\<^const>List.nth" ("_position" cs)
###                               ("_position" i)))))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" fst)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" s)
###                               ("_applC" ("_position" Suc) ("_position" i)))
###                             ("_position" V)))
###                         ("_applC" ("_position" fst)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" s')
###                               ("_applC" ("_position" Suc) ("_position" i)))
###                             ("_position" V)))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_All_less" ("_position" i)
###                       ("_applC" ("_position" Suc)
###                         ("_applC" ("_position" length) ("_position" cs)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" snd)
###                           ("\<^const>List.nth" ("_position" s)
###                             ("_position" i)))
###                         ("_applC" ("_position" snd)
###                           ("\<^const>List.nth" ("_position" s')
###                             ("_position" i))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("_Ball" ("_position" V)
###                         ("\<^const>local.relevant_vars"
###                           ("_applC" ("_position" S)
###                             ("_applC" ("_position" CFG_node)
###                               ("_position" m))))
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" state_val)
###                             ("_cargs" ("_position" s) ("_position" V)))
###                           ("_applC" ("_position" state_val)
###                             ("_cargs" ("_position" s') ("_position" V))))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("_applC" ("_position" preds)
###                           ("_cargs"
###                             ("_applC" ("_position" slice_kinds)
###                               ("_cargs" ("_position" S) ("_position" as)))
###                             ("_position" s))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("_applC" ("_position" preds)
###                             ("_cargs"
###                               ("_applC" ("_position" slice_kinds)
###                                 ("_cargs" ("_position" S)
###                                   ("_position" as')))
###                               ("_position" s'))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" length)
###                                 ("_position" s))
###                               ("_applC" ("_position" Suc)
###                                 ("_applC" ("_position" length)
###                                   ("_position" cs)))))
###                           ("_asm"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>HOL.eq"
###                                 ("_applC" ("_position" length)
###                                   ("_position" s'))
###                                 ("_applC" ("_position" Suc)
###                                   ("_applC" ("_position" length)
###                                     ("_position" cs))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" V) ("_applC" ("_position" Use) ("\<^fixed>Low"))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" state_val)
###           ("_cargs"
###             ("_applC" ("_position" transfers)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as)))
###                 ("_position" s)))
###             ("_position" V)))
###         ("_applC" ("_position" state_val)
###           ("_cargs"
###             ("_applC" ("_position" transfers)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as')))
###                 ("_position" s')))
###             ("_position" V)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs" ("_position" cs) ("_position" as'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>local.path" ("_position" m) ("_position" as)
###                 ("\<^fixed>Low")))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.path" ("_position" m) ("_position" as')
###                   ("\<^fixed>Low")))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_All_less" ("_position" i)
###                     ("_applC" ("_position" length) ("_position" cs))
###                     ("_Ball" ("_position" V)
###                       ("\<^const>local.relevant_vars"
###                         ("_applC" ("_position" S)
###                           ("_applC" ("_position" CFG_node)
###                             ("_applC" ("_position" sourcenode)
###                               ("\<^const>List.nth" ("_position" cs)
###                                 ("_position" i))))))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" fst)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" s)
###                               ("_applC" ("_position" Suc) ("_position" i)))
###                             ("_position" V)))
###                         ("_applC" ("_position" fst)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" s')
###                               ("_applC" ("_position" Suc) ("_position" i)))
###                             ("_position" V)))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_All_less" ("_position" i)
###                       ("_applC" ("_position" Suc)
###                         ("_applC" ("_position" length) ("_position" cs)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" snd)
###                           ("\<^const>List.nth" ("_position" s)
###                             ("_position" i)))
###                         ("_applC" ("_position" snd)
###                           ("\<^const>List.nth" ("_position" s')
###                             ("_position" i))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("_Ball" ("_position" V)
###                         ("_applC"
###                           ("\<^const>local.relevant_vars" ("_position" S))
###                           ("_applC" ("_position" CFG_node) ("_position" m)))
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" state_val)
###                             ("_cargs" ("_position" s) ("_position" V)))
###                           ("_applC" ("_position" state_val)
###                             ("_cargs" ("_position" s') ("_position" V))))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("_applC" ("_position" preds)
###                           ("_cargs"
###                             ("_applC" ("_position" slice_kinds)
###                               ("_cargs" ("_position" S) ("_position" as)))
###                             ("_position" s))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("_applC" ("_position" preds)
###                             ("_cargs"
###                               ("_applC" ("_position" slice_kinds)
###                                 ("_cargs" ("_position" S)
###                                   ("_position" as')))
###                               ("_position" s'))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" length)
###                                 ("_position" s))
###                               ("_applC" ("_position" Suc)
###                                 ("_applC" ("_position" length)
###                                   ("_position" cs)))))
###                           ("_asm"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>HOL.eq"
###                                 ("_applC" ("_position" length)
###                                   ("_position" s'))
###                                 ("_applC" ("_position" Suc)
###                                   ("_applC" ("_position" length)
###                                     ("_position" cs))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" V) ("_applC" ("_position" Use) ("\<^fixed>Low"))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" state_val)
###           ("_cargs"
###             ("_applC" ("_position" transfers)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as)))
###                 ("_position" s)))
###             ("_position" V)))
###         ("_applC" ("_position" state_val)
###           ("_cargs"
###             ("_applC" ("_position" transfers)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as')))
###                 ("_position" s')))
###             ("_position" V)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs" ("_position" cs) ("_position" as'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>local.path" ("_position" m) ("_position" as)
###                 ("\<^fixed>Low")))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>local.path" ("_position" m) ("_position" as')
###                   ("\<^fixed>Low")))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_All_less" ("_position" i)
###                     ("_applC" ("_position" length) ("_position" cs))
###                     ("_Ball" ("_position" V)
###                       ("_applC"
###                         ("\<^const>local.relevant_vars" ("_position" S))
###                         ("_applC" ("_position" CFG_node)
###                           ("_applC" ("_position" sourcenode)
###                             ("\<^const>List.nth" ("_position" cs)
###                               ("_position" i)))))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" fst)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" s)
###                               ("_applC" ("_position" Suc) ("_position" i)))
###                             ("_position" V)))
###                         ("_applC" ("_position" fst)
###                           ("_cargs"
###                             ("\<^const>List.nth" ("_position" s')
###                               ("_applC" ("_position" Suc) ("_position" i)))
###                             ("_position" V)))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_All_less" ("_position" i)
###                       ("_applC" ("_position" Suc)
###                         ("_applC" ("_position" length) ("_position" cs)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" snd)
###                           ("\<^const>List.nth" ("_position" s)
###                             ("_position" i)))
###                         ("_applC" ("_position" snd)
###                           ("\<^const>List.nth" ("_position" s')
###                             ("_position" i))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("_Ball" ("_position" V)
###                         ("_applC"
###                           ("\<^const>local.relevant_vars" ("_position" S))
###                           ("_applC" ("_position" CFG_node) ("_position" m)))
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" state_val)
###                             ("_cargs" ("_position" s) ("_position" V)))
###                           ("_applC" ("_position" state_val)
###                             ("_cargs" ("_position" s') ("_position" V))))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("_applC" ("_position" preds)
###                           ("_cargs"
###                             ("_applC" ("_position" slice_kinds)
###                               ("_cargs" ("_position" S) ("_position" as)))
###                             ("_position" s))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("_applC" ("_position" preds)
###                             ("_cargs"
###                               ("_applC" ("_position" slice_kinds)
###                                 ("_cargs" ("_position" S)
###                                   ("_position" as')))
###                               ("_position" s'))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" length)
###                                 ("_position" s))
###                               ("_applC" ("_position" Suc)
###                                 ("_applC" ("_position" length)
###                                   ("_position" cs)))))
###                           ("_asm"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>HOL.eq"
###                                 ("_applC" ("_position" length)
###                                   ("_position" s'))
###                                 ("_applC" ("_position" Suc)
###                                   ("_applC" ("_position" length)
###                                     ("_position" cs))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" V) ("_applC" ("_position" Use) ("\<^fixed>Low"))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" state_val)
###           ("_cargs"
###             ("_applC" ("_position" transfers)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as)))
###                 ("_position" s)))
###             ("_position" V)))
###         ("_applC" ("_position" state_val)
###           ("_cargs"
###             ("_applC" ("_position" transfers)
###               ("_cargs"
###                 ("_applC" ("_position" slice_kinds)
###                   ("_cargs" ("_position" S) ("_position" as')))
###                 ("_position" s')))
###             ("_position" V)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1077 of "$AFP/InformationFlowSlicing_Inter/NonInterferenceInter.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node) ("_position" m)))
###     ("\<^const>HOL.eq" ("_applC" ("_position" cf) ("_position" V))
###       ("_applC" ("_position" cf') ("_position" V)))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m))))
###     ("\<^const>HOL.eq" ("_applC" ("_position" cf) ("_position" V))
###       ("_applC" ("_position" cf') ("_position" V)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale NonInterferenceInter
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
    and
    sem ::
      "'com
       => ('var => 'val option) list
          => 'com => ('var => 'val option) list => bool"
      (\<open>((1\<langle>_,/_\<rangle>) \<Rightarrow>/ (1\<langle>_,/_\<rangle>))\<close>
        [0, 0, 0, 0] 81)
    and
    identifies :: "'node => 'com => bool"
      (\<open>_ \<triangleq> _\<close> [51, 0] 80)
    and H :: "'var set"
    and L :: "'var set"
    and High :: "'node"  (\<open>'('_High'_')\<close>)
    and Low :: "'node"  (\<open>'('_Low'_')\<close>)
    and final :: "'com => bool"
  assumes
    "NonInterferenceInter sourcenode targetnode kind valid_edge (_Entry_)
      get_proc get_return_edges procs Main (_Exit_) Def Use ParamDefs
      ParamUses sem identifies H L (_High_) (_Low_) final"
### theory "Draft.NonInterferenceInter"
### 1.987s elapsed time, 2.086s cpu time, 0.141s GC time
Loading theory "Draft.NonInterferenceInterMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.NonInterferenceInterMoreTemplates"
### 0.318s elapsed time, 0.426s cpu time, 0.021s GC time
val it = (): unit
