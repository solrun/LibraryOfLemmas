Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Abstract_First_Goedel" via "Draft.Goedel_Formula" via "Draft.Diagonalization" via "Draft.Abstract_Representability" via "Draft.Abstract_Encoding" via "Draft.Deduction2" via "Syntax_Independent_Logic.Deduction" via "Syntax_Independent_Logic.Syntax" via "Syntax_Independent_Logic.Prelim")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.All_AbstractMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.All_AbstractMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.All_AbstractMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
### theory "HOL-Library.Function_Algebras"
### 0.114s elapsed time, 0.441s cpu time, 0.038s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.All_AbstractMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
structure Eisbach_Rule_Insts: sig end
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.836s cpu time, 0.038s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.All_AbstractMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.320s elapsed time, 1.243s cpu time, 0.119s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.All_AbstractMoreTemplates" via "Draft.ExtrEqs")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Eisbach.Eisbach"
### 0.442s elapsed time, 1.726s cpu time, 0.173s GC time
Loading theory "Syntax_Independent_Logic.Prelim" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Abstract_First_Goedel" via "Draft.Goedel_Formula" via "Draft.Diagonalization" via "Draft.Abstract_Representability" via "Draft.Abstract_Encoding" via "Draft.Deduction2" via "Syntax_Independent_Logic.Deduction" via "Syntax_Independent_Logic.Syntax")
Found termination order: "size <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
exception TAC of term
val simped = fn: attribute
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.951s elapsed time, 3.659s cpu time, 0.651s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.049s elapsed time, 3.878s cpu time, 0.686s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.953s elapsed time, 6.143s cpu time, 0.859s GC time
Loading theory "Draft.Templates" (required by "Draft.All_AbstractMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.051s elapsed time, 0.115s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.All_AbstractMoreTemplates")
### theory "Syntax_Independent_Logic.Prelim"
### 2.172s elapsed time, 6.004s cpu time, 0.767s GC time
Loading theory "Syntax_Independent_Logic.Syntax" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Abstract_First_Goedel" via "Draft.Goedel_Formula" via "Draft.Diagonalization" via "Draft.Abstract_Representability" via "Draft.Abstract_Encoding" via "Draft.Deduction2" via "Syntax_Independent_Logic.Deduction")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.505s elapsed time, 1.034s cpu time, 0.043s GC time
locale Generic_Syntax
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
  assumes "Generic_Syntax var trm fmla Var FvarsT substT Fvars subst"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
locale Syntax_with_Numerals
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
  assumes
    "Syntax_with_Numerals var trm fmla Var FvarsT substT Fvars subst num"
locale Syntax_with_Connectives
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
  assumes
    "Syntax_with_Connectives var trm fmla Var FvarsT substT Fvars subst eql
      cnj imp all exi"
locale Syntax_with_Numerals_and_Connectives
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
  assumes
    "Syntax_with_Numerals_and_Connectives var trm fmla Var FvarsT substT
      Fvars subst num eql cnj imp all exi"
locale Syntax_with_Connectives_False
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
  assumes
    "Syntax_with_Connectives_False var trm fmla Var FvarsT substT Fvars
      subst eql cnj imp all exi fls"
Found termination order: "length <*mlex*> {}"
locale Syntax_with_Connectives_False_Disj
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
  assumes
    "Syntax_with_Connectives_False_Disj var trm fmla Var FvarsT substT Fvars
      subst eql cnj imp all exi fls dsj"
Found termination order: "length <*mlex*> {}"
locale Syntax_with_Numerals_and_Connectives_False_Disj
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
  assumes
    "Syntax_with_Numerals_and_Connectives_False_Disj var trm fmla Var FvarsT
      substT Fvars subst eql cnj imp all exi fls dsj num"
locale Syntax_PseudoOrder
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and Lq :: "'fmla"
  assumes
    "Syntax_PseudoOrder var trm fmla Var FvarsT substT Fvars subst eql cnj
      imp all exi fls dsj num Lq"
locale Syntax_with_Connectives_Rename
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
  assumes
    "Syntax_with_Connectives_Rename var trm fmla Var FvarsT substT Fvars
      subst eql cnj imp all exi"
### theory "Syntax_Independent_Logic.Syntax"
### 1.682s elapsed time, 1.815s cpu time, 0.181s GC time
Loading theory "Syntax_Independent_Logic.Deduction" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Abstract_First_Goedel" via "Draft.Goedel_Formula" via "Draft.Diagonalization" via "Draft.Abstract_Representability" via "Draft.Abstract_Encoding" via "Draft.Deduction2")
locale Deduct
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
  assumes
    "Deduct var trm fmla Var FvarsT substT Fvars subst num eql cnj imp all
      exi prv"
locale Deduct_with_False
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
  assumes
    "Deduct_with_False var trm fmla Var FvarsT substT Fvars subst eql cnj
      imp all exi fls num prv"
locale Deduct_with_False_Disj
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
  assumes
    "Deduct_with_False_Disj var trm fmla Var FvarsT substT Fvars subst eql
      cnj imp all exi fls dsj num prv"
locale Deduct_with_False_Disj_Rename
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
  assumes
    "Deduct_with_False_Disj_Rename var trm fmla Var FvarsT substT Fvars
      subst eql cnj imp all exi fls dsj num prv"
locale Deduct_with_PseudoOrder
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and Lq :: "'fmla"
  assumes
    "Deduct_with_PseudoOrder var trm fmla Var FvarsT substT Fvars subst eql
      cnj imp all exi fls dsj num prv Lq"
### theory "Syntax_Independent_Logic.Deduction"
### 1.297s elapsed time, 1.376s cpu time, 0.112s GC time
Loading theory "Draft.Abstract_Jeroslow_Encoding" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Jeroslow_Original")
Loading theory "Draft.Deduction2" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Abstract_First_Goedel" via "Draft.Goedel_Formula" via "Draft.Diagonalization" via "Draft.Abstract_Representability" via "Draft.Abstract_Encoding")
Loading theory "Syntax_Independent_Logic.Natural_Deduction" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Jeroslow_Original" via "Syntax_Independent_Logic.Pseudo_Term")
Loading theory "Syntax_Independent_Logic.Standard_Model" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Abstract_First_Goedel" via "Draft.Standard_Model_More")
locale Encode
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
  assumes "Encode var trm fmla Var FvarsT substT Fvars subst num enc"
locale Deduct2
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
  assumes
    "Deduct2 var trm fmla Var FvarsT substT Fvars subst num eql cnj imp all
      exi prv bprv"
locale Deduct_with_False_Disj
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
  assumes
    "Deduct_with_False_Disj var trm fmla Var FvarsT substT Fvars subst eql
      cnj imp all exi fls dsj num prv"
locale Encode_UComput
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and ucfunc :: "('trm => 'trm) set"
    and encF :: "('trm => 'trm) => 'trm"
    and sub :: "'fmla => 'trm => 'trm"
  assumes
    "Encode_UComput var trm fmla Var FvarsT substT Fvars subst num enc
      ucfunc encF sub"
locale Minimal_Truth
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and isTrue :: "'fmla => bool"
  assumes
    "Minimal_Truth var trm fmla Var FvarsT substT Fvars subst eql cnj imp
      all exi fls dsj num isTrue"
locale TermEncode
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and Ops :: "('trm => 'trm) set"
    and
    enc :: "('trm => 'trm) => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
  assumes
    "TermEncode var trm fmla Var FvarsT substT Fvars subst num Ops enc"
locale Deduct2_with_False
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
  assumes
    "Deduct2_with_False var trm fmla Var FvarsT substT Fvars subst eql cnj
      imp all exi fls num prv bprv"
locale HBL1
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'a"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and P :: "'fmla"
  assumes
    "HBL1 var trm fmla Var FvarsT substT Fvars subst num eql cnj imp all exi
      prv enc P"
locale Minimal_Truth_Soundness
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and isTrue :: "'fmla => bool"
  assumes
    "Minimal_Truth_Soundness var trm fmla Var FvarsT substT Fvars subst eql
      cnj imp all exi fls dsj num prv isTrue"
### theory "Draft.Abstract_Jeroslow_Encoding"
### 0.461s elapsed time, 1.811s cpu time, 0.128s GC time
Loading theory "Draft.Jeroslow_Simplified" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract")
### theory "Syntax_Independent_Logic.Standard_Model"
### 0.475s elapsed time, 1.871s cpu time, 0.128s GC time
[| prv ?\<phi>; ?\<phi> : fmla |] ==> nprv {} ?\<phi>
locale Deduct2_with_False
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
  assumes
    "Deduct2_with_False var trm fmla Var FvarsT substT Fvars subst eql cnj
      imp all exi fls num prv bprv"
locale Jeroslow_Diagonalization
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and Ops :: "('trm => 'trm) set"
    and tenc :: "('trm => 'trm) => 'trm"
    and F :: "('trm => 'trm) set"
    and encF :: "('trm => 'trm) => 'trm => 'trm"
    and N :: "'trm => 'trm"
    and ssap :: "'fmla => 'trm => 'trm"
  assumes
    "Jeroslow_Diagonalization var trm fmla Var FvarsT substT Fvars subst eql
      cnj imp all exi fls num prv enc Ops tenc F encF N ssap"
locale Deduct2_with_False_Disj
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
  assumes
    "Deduct2_with_False_Disj var trm fmla Var FvarsT substT Fvars subst eql
      cnj imp all exi fls dsj num prv bprv"
locale Jeroslow_Godel_Second
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and Ops :: "('trm => 'trm) set"
    and tenc :: "('trm => 'trm) => 'trm"
    and P :: "'fmla"
    and F :: "('trm => 'trm) set"
    and encF :: "('trm => 'trm) => 'trm => 'trm"
    and N :: "'trm => 'trm"
    and ssap :: "'fmla => 'trm => 'trm"
  assumes
    "Jeroslow_Godel_Second var trm fmla Var FvarsT substT Fvars subst eql
      cnj imp all exi fls num prv enc Ops tenc P F encF N ssap"
### theory "Draft.Jeroslow_Simplified"
### 0.545s elapsed time, 1.647s cpu time, 0.080s GC time
locale Deduct2_with_PseudoOrder
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and Lq :: "'fmla"
  assumes
    "Deduct2_with_PseudoOrder var trm fmla Var FvarsT substT Fvars subst eql
      cnj imp all exi fls dsj num prv bprv Lq"
locale Deduct_with_Proofs
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and "proof" :: "'proof set"
    and prfOf :: "'proof => 'fmla => bool"
  assumes
    "Deduct_with_Proofs var trm fmla Var FvarsT substT Fvars subst eql cnj
      imp all exi fls dsj num prv proof prfOf"
locale Deduct2_with_Proofs
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and "proof" :: "'proof set"
    and prfOf :: "'proof => 'fmla => bool"
  assumes
    "Deduct2_with_Proofs var trm fmla Var FvarsT substT Fvars subst eql cnj
      imp all exi fls dsj num prv bprv proof prfOf"
locale Deduct2_with_Proofs_PseudoOrder
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and "proof" :: "'proof set"
    and prfOf :: "'proof => 'fmla => bool"
    and Lq :: "'fmla"
  assumes
    "Deduct2_with_Proofs_PseudoOrder var trm fmla Var FvarsT substT Fvars
      subst eql cnj imp all exi fls dsj num prv bprv proof prfOf Lq"
### theory "Draft.Deduction2"
### 1.706s elapsed time, 4.893s cpu time, 0.292s GC time
Loading theory "Draft.Abstract_Encoding" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Abstract_First_Goedel" via "Draft.Goedel_Formula" via "Draft.Diagonalization" via "Draft.Abstract_Representability")
locale Encode
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
  assumes "Encode var trm fmla Var FvarsT substT Fvars subst num enc"
locale Encode_Proofs
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and "proof" :: "'proof set"
    and prfOf :: "'proof => 'fmla => bool"
    and encPf :: "'proof => 'trm"
  assumes
    "Encode_Proofs var trm fmla Var FvarsT substT Fvars subst num eql cnj
      imp all exi prv bprv enc fls dsj proof prfOf encPf"
### theory "Draft.Abstract_Encoding"
### 0.304s elapsed time, 0.620s cpu time, 0.037s GC time
Loading theory "Draft.Abstract_Representability" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Abstract_First_Goedel" via "Draft.Goedel_Formula" via "Draft.Diagonalization")
locale Repr_Neg
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and N :: "'fmla"
  assumes
    "Repr_Neg var trm fmla Var FvarsT substT Fvars subst eql cnj imp all exi
      fls num prv bprv enc N"
locale Repr_SelfSubst
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
  assumes
    "Repr_SelfSubst var trm fmla Var FvarsT substT Fvars subst num eql cnj
      imp all exi prv bprv enc S"
locale Repr_SelfSoftSubst
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
  assumes
    "Repr_SelfSoftSubst var trm fmla Var FvarsT substT Fvars subst num eql
      cnj imp all exi prv bprv enc S"
locale CleanRepr_Proofs
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and "proof" :: "'proof set"
    and prfOf :: "'proof => 'fmla => bool"
    and encPf :: "'proof => 'trm"
    and Pf :: "'fmla"
  assumes
    "CleanRepr_Proofs var trm fmla Var FvarsT substT Fvars subst num eql cnj
      imp all exi prv bprv enc fls dsj proof prfOf encPf Pf"
### theory "Draft.Abstract_Representability"
### 0.935s elapsed time, 1.912s cpu time, 0.122s GC time
Loading theory "Draft.Derivability_Conditions" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Abstract_First_Goedel" via "Draft.Goedel_Formula")
Loading theory "Draft.Diagonalization" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Abstract_First_Goedel" via "Draft.Goedel_Formula")
locale Repr_SelfSubst
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
  assumes
    "Repr_SelfSubst var trm fmla Var FvarsT substT Fvars subst num eql cnj
      imp all exi prv bprv enc S"
locale HBL1
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and P :: "'fmla"
  assumes
    "HBL1 var trm fmla Var FvarsT substT Fvars subst num eql cnj imp all exi
      prv bprv enc P"
locale Repr_SelfSoftSubst
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
  assumes
    "Repr_SelfSoftSubst var trm fmla Var FvarsT substT Fvars subst num eql
      cnj imp all exi prv bprv enc S"
### theory "Draft.Diagonalization"
### 0.228s elapsed time, 0.682s cpu time, 0.023s GC time
locale CleanRepr_Proofs
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and "proof" :: "'proof set"
    and prfOf :: "'proof => 'fmla => bool"
    and encPf :: "'proof => 'trm"
    and Pf :: "'fmla"
  assumes
    "CleanRepr_Proofs var trm fmla Var FvarsT substT Fvars subst num eql cnj
      imp all exi prv bprv enc fls dsj proof prfOf encPf Pf"
locale CleanRepr_Proofs
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and "proof" :: "'proof set"
    and prfOf :: "'proof => 'fmla => bool"
    and encPf :: "'proof => 'trm"
    and Pf :: "'fmla"
  assumes
    "CleanRepr_Proofs var trm fmla Var FvarsT substT Fvars subst num eql cnj
      imp all exi prv bprv enc fls dsj proof prfOf encPf Pf"
locale HBL1_2_3
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and P :: "'fmla"
  assumes
    "HBL1_2_3 var trm fmla Var FvarsT substT Fvars subst num eql cnj imp all
      exi prv bprv enc P"
### theory "Draft.Derivability_Conditions"
### 0.723s elapsed time, 1.703s cpu time, 0.092s GC time
Loading theory "Draft.Goedel_Formula" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Abstract_First_Goedel")
Loading theory "Draft.Loeb_Formula" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Loeb")
Loading theory "Draft.Standard_Model_More" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Abstract_First_Goedel")
locale Loeb_Form
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and num :: "'trm set"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and P :: "'fmla"
  assumes
    "Loeb_Form var trm fmla Var num FvarsT substT Fvars subst eql cnj imp
      all exi prv bprv enc S P"
### theory "Draft.Loeb_Formula"
### 0.372s elapsed time, 1.462s cpu time, 0.065s GC time
Loading theory "Draft.Loeb" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract")
locale Goedel_Form
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and num :: "'trm set"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and P :: "'fmla"
  assumes
    "Goedel_Form var trm fmla Var num FvarsT substT Fvars subst eql cnj imp
      all exi fls prv bprv enc S P"
locale Minimal_Truth_Soundness_Proof_Repr
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and isTrue :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and "proof" :: "'proof set"
    and prfOf :: "'proof => 'fmla => bool"
    and encPf :: "'proof => 'trm"
    and Pf :: "'fmla"
  assumes
    "Minimal_Truth_Soundness_Proof_Repr var trm fmla Var FvarsT substT Fvars
      subst eql cnj imp all exi fls dsj num prv bprv isTrue enc proof prfOf
      encPf Pf"
locale Loeb_Assumptions
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and num :: "'trm set"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and P :: "'fmla"
  assumes
    "Loeb_Assumptions var trm fmla Var num FvarsT substT Fvars subst eql cnj
      imp all exi prv bprv enc S P"
### theory "Draft.Loeb"
### 0.286s elapsed time, 1.111s cpu time, 0.100s GC time
locale Goedel_Form_Proofs
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and "proof" :: "'proof set"
    and prfOf :: "'proof => 'fmla => bool"
    and encPf :: "'proof => 'trm"
    and Pf :: "'fmla"
  assumes
    "Goedel_Form_Proofs var trm fmla Var FvarsT substT Fvars subst num eql
      cnj imp all exi fls prv bprv enc S dsj proof prfOf encPf Pf"
locale Minimal_Truth_Soundness_HBL1iff_Compl_Pf
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and P :: "'fmla"
    and isTrue :: "'fmla => bool"
    and Pf :: "'fmla"
  assumes
    "Minimal_Truth_Soundness_HBL1iff_Compl_Pf var trm fmla Var FvarsT substT
      Fvars subst eql cnj imp all exi fls dsj num enc prv bprv P isTrue Pf"
locale Goedel_Form_Proofs
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and "proof" :: "'proof set"
    and prfOf :: "'proof => 'fmla => bool"
    and encPf :: "'proof => 'trm"
    and Pf :: "'fmla"
  assumes
    "Goedel_Form_Proofs var trm fmla Var FvarsT substT Fvars subst num eql
      cnj imp all exi fls prv bprv enc S dsj proof prfOf encPf Pf"
### theory "Draft.Goedel_Formula"
### 1.051s elapsed time, 3.768s cpu time, 0.267s GC time
Loading theory "Draft.Rosser_Formula" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Abstract_First_Goedel_Rosser")
locale Minimal_Truth_Soundness_HBL1iff_Compl_Pf_Compl_NegPf
  fixes var :: "'a set"
    and trm :: "'b set"
    and fmla :: "'c set"
    and Var :: "'a => 'b"
    and FvarsT :: "'b => 'a set"
    and substT :: "'b => 'b => 'a => 'b"
    and Fvars :: "'c => 'a set"
    and subst :: "'c => 'b => 'a => 'c"
    and eql :: "'b => 'b => 'c"
    and cnj :: "'c => 'c => 'c"
    and imp :: "'c => 'c => 'c"
    and all :: "'a => 'c => 'c"
    and exi :: "'a => 'c => 'c"
    and fls :: "'c"
    and dsj :: "'c => 'c => 'c"
    and num :: "'b set"
    and enc :: "'c => 'b"  (\<open>\<langle>_\<rangle>\<close>)
    and prv :: "'c => bool"
    and bprv :: "'c => bool"
    and P :: "'c"
    and isTrue :: "'c => bool"
    and Pf :: "'c"
  assumes
    "Minimal_Truth_Soundness_HBL1iff_Compl_Pf_Compl_NegPf var trm fmla Var
      FvarsT substT Fvars subst eql cnj imp all exi fls dsj num enc prv bprv
      P isTrue Pf"
locale Rosser_Form
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and Lq :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and N :: "'fmla"
    and S :: "'fmla"
    and P :: "'fmla"
  assumes
    "Rosser_Form var trm fmla Var FvarsT substT Fvars subst num eql cnj imp
      all exi fls prv bprv Lq dsj enc N S P"
locale Rosser_Form_Proofs
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and Lq :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and "proof" :: "'proof set"
    and prfOf :: "'proof => 'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and N :: "'fmla"
    and S :: "'fmla"
    and encPf :: "'proof => 'trm"
    and Pf :: "'fmla"
  assumes
    "Rosser_Form_Proofs var trm fmla Var FvarsT substT Fvars subst num eql
      cnj imp all exi fls prv bprv Lq dsj proof prfOf enc N S encPf Pf"
locale Minimal_Truth_Soundness_HBL1iff_prv_Compl_Pf
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and P :: "'fmla"
    and isTrue :: "'fmla => bool"
    and Pf :: "'fmla"
  assumes
    "Minimal_Truth_Soundness_HBL1iff_prv_Compl_Pf var trm fmla Var FvarsT
      substT Fvars subst eql cnj imp all exi fls dsj num enc prv bprv P
      isTrue Pf"
locale Rosser_Form_Proofs
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and Lq :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and "proof" :: "'proof set"
    and prfOf :: "'proof => 'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and N :: "'fmla"
    and S :: "'fmla"
    and encPf :: "'proof => 'trm"
    and Pf :: "'fmla"
  assumes
    "Rosser_Form_Proofs var trm fmla Var FvarsT substT Fvars subst num eql
      cnj imp all exi fls prv bprv Lq dsj proof prfOf enc N S encPf Pf"
### theory "Draft.Rosser_Formula"
### 1.259s elapsed time, 3.792s cpu time, 0.357s GC time
locale Minimal_Truth_Soundness_HBL1iff_prv_Compl_Pf_Classical
  fixes var :: "'a set"
    and trm :: "'b set"
    and fmla :: "'c set"
    and Var :: "'a => 'b"
    and FvarsT :: "'b => 'a set"
    and substT :: "'b => 'b => 'a => 'b"
    and Fvars :: "'c => 'a set"
    and subst :: "'c => 'b => 'a => 'c"
    and eql :: "'b => 'b => 'c"
    and cnj :: "'c => 'c => 'c"
    and imp :: "'c => 'c => 'c"
    and all :: "'a => 'c => 'c"
    and exi :: "'a => 'c => 'c"
    and fls :: "'c"
    and dsj :: "'c => 'c => 'c"
    and num :: "'b set"
    and enc :: "'c => 'b"  (\<open>\<langle>_\<rangle>\<close>)
    and prv :: "'c => bool"
    and bprv :: "'c => bool"
    and P :: "'c"
    and isTrue :: "'c => bool"
    and Pf :: "'c"
  assumes
    "Minimal_Truth_Soundness_HBL1iff_prv_Compl_Pf_Classical var trm fmla Var
      FvarsT substT Fvars subst eql cnj imp all exi fls dsj num enc prv bprv
      P isTrue Pf"
### theory "Draft.Standard_Model_More"
### 2.415s elapsed time, 7.778s cpu time, 0.651s GC time
Loading theory "Draft.Abstract_First_Goedel" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract")
Loading theory "Draft.Abstract_First_Goedel_Rosser" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract")
Loading theory "Draft.Tarski" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract")
locale Goedel_Form
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and num :: "'trm set"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and P :: "'fmla"
  assumes
    "Goedel_Form var trm fmla Var num FvarsT substT Fvars subst eql cnj imp
      all exi fls prv bprv enc S P"
locale Goedel_Form
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and num :: "'trm set"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and P :: "'fmla"
  assumes
    "Goedel_Form var trm fmla Var num FvarsT substT Fvars subst eql cnj imp
      all exi fls prv bprv enc S P"
locale Rosser_Form_Proofs
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and Lq :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and "proof" :: "'proof set"
    and prfOf :: "'proof => 'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and N :: "'fmla"
    and S :: "'fmla"
    and encPf :: "'proof => 'trm"
    and Pf :: "'fmla"
  assumes
    "Rosser_Form_Proofs var trm fmla Var FvarsT substT Fvars subst num eql
      cnj imp all exi fls prv bprv Lq dsj proof prfOf enc N S encPf Pf"
locale Goedel_Form_Proofs
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and "proof" :: "'proof set"
    and prfOf :: "'proof => 'fmla => bool"
    and encPf :: "'proof => 'trm"
    and Pf :: "'fmla"
  assumes
    "Goedel_Form_Proofs var trm fmla Var FvarsT substT Fvars subst num eql
      cnj imp all exi fls prv bprv enc S dsj proof prfOf encPf Pf"
locale Goedel_Form_prv_eq_isTrue
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and num :: "'trm set"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and P :: "'fmla"
    and isTrue :: "'fmla => bool"
  assumes
    "Goedel_Form_prv_eq_isTrue var trm fmla Var num FvarsT substT Fvars
      subst eql cnj imp all exi fls prv bprv enc S P isTrue"
### theory "Draft.Tarski"
### 0.615s elapsed time, 2.400s cpu time, 0.209s GC time
locale Rosser_Form_Proofs_Minimal_Truth
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and Lq :: "'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and N :: "'fmla"
    and S :: "'fmla"
    and P :: "'a"
    and "proof" :: "'proof set"
    and prfOf :: "'proof => 'fmla => bool"
    and encPf :: "'proof => 'trm"
    and Pf :: "'fmla"
    and isTrue :: "'fmla => bool"
  assumes
    "Rosser_Form_Proofs_Minimal_Truth var trm fmla Var FvarsT substT Fvars
      subst eql cnj imp all exi fls dsj num Lq prv bprv enc N S proof prfOf
      encPf Pf isTrue"
locale Goedel_Form_Proofs_Minimal_Truth
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and "proof" :: "'proof set"
    and prfOf :: "'proof => 'fmla => bool"
    and encPf :: "'proof => 'trm"
    and Pf :: "'fmla"
    and isTrue :: "'fmla => bool"
  assumes
    "Goedel_Form_Proofs_Minimal_Truth var trm fmla Var FvarsT substT Fvars
      subst eql cnj imp all exi fls dsj num prv bprv enc S proof prfOf encPf
      Pf isTrue"
locale Rosser_Form
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and Lq :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and N :: "'fmla"
    and S :: "'fmla"
    and P :: "'fmla"
  assumes
    "Rosser_Form var trm fmla Var FvarsT substT Fvars subst num eql cnj imp
      all exi fls prv bprv Lq dsj enc N S P"
locale Goedel_Form_Minimal_Truth_Soundness_HBL1iff_Compl_Pf
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and isTrue :: "'fmla => bool"
    and P :: "'fmla"
    and Pf :: "'fmla"
  assumes
    "Goedel_Form_Minimal_Truth_Soundness_HBL1iff_Compl_Pf var trm fmla Var
      FvarsT substT Fvars subst eql cnj imp all exi fls dsj num prv bprv enc
      S isTrue P Pf"
locale Rosser_Form
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and Lq :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and N :: "'fmla"
    and S :: "'fmla"
    and P :: "'fmla"
  assumes
    "Rosser_Form var trm fmla Var FvarsT substT Fvars subst num eql cnj imp
      all exi fls prv bprv Lq dsj enc N S P"
locale Rosser_Form_Minimal_Truth_Soundness_HBL1iff_Compl_Pf
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and Lq :: "'fmla"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and N :: "'fmla"
    and S :: "'fmla"
    and isTrue :: "'fmla => bool"
    and P :: "'fmla"
    and Pf :: "'fmla"
  assumes
    "Rosser_Form_Minimal_Truth_Soundness_HBL1iff_Compl_Pf var trm fmla Var
      FvarsT substT Fvars subst eql cnj imp all exi fls dsj num prv bprv Lq
      enc N S isTrue P Pf"
locale Goedel_Form_Minimal_Truth_Soundness_HBL1iff_Compl_Pf_Compl_NegPf
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and isTrue :: "'fmla => bool"
    and P :: "'fmla"
    and Pf :: "'fmla"
  assumes
    "Goedel_Form_Minimal_Truth_Soundness_HBL1iff_Compl_Pf_Compl_NegPf var
      trm fmla Var FvarsT substT Fvars subst eql cnj imp all exi fls dsj num
      prv bprv enc S isTrue P Pf"
locale Rosser_Form_Minimal_Truth_Soundness_HBL1iff_Compl_Pf_Compl_NegPf
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and Lq :: "'fmla"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and N :: "'fmla"
    and S :: "'fmla"
    and P :: "'fmla"
    and isTrue :: "'fmla => bool"
    and Pf :: "'fmla"
  assumes
    "Rosser_Form_Minimal_Truth_Soundness_HBL1iff_Compl_Pf_Compl_NegPf var
      trm fmla Var FvarsT substT Fvars subst eql cnj imp all exi fls dsj num
      prv bprv Lq enc N S P isTrue Pf"
locale Goedel_Form_Minimal_Truth_Soundness_HBL1iff_Compl_Pf_Compl_NegPf
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and isTrue :: "'fmla => bool"
    and P :: "'fmla"
    and Pf :: "'fmla"
  assumes
    "Goedel_Form_Minimal_Truth_Soundness_HBL1iff_Compl_Pf_Compl_NegPf var
      trm fmla Var FvarsT substT Fvars subst eql cnj imp all exi fls dsj num
      prv bprv enc S isTrue P Pf"
\<omega>consistent ==>
~ prv recover_proofs.\<phi>G &
~ prv (neg recover_proofs.\<phi>G) & isTrue recover_proofs.\<phi>G
locale Goedel_Form_Classical_HBL1_rev_prv
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and num :: "'trm set"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and P :: "'fmla"
  assumes
    "Goedel_Form_Classical_HBL1_rev_prv var trm fmla Var num FvarsT substT
      Fvars subst eql cnj imp all exi fls prv bprv enc S P"
locale Rosser_Form_Minimal_Truth_Soundness_HBL1iff_Compl_Pf_Compl_NegPf
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and Lq :: "'fmla"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and N :: "'fmla"
    and S :: "'fmla"
    and P :: "'fmla"
    and isTrue :: "'fmla => bool"
    and Pf :: "'fmla"
  assumes
    "Rosser_Form_Minimal_Truth_Soundness_HBL1iff_Compl_Pf_Compl_NegPf var
      trm fmla Var FvarsT substT Fvars subst eql cnj imp all exi fls dsj num
      prv bprv Lq enc N S P isTrue Pf"
consistent ==>
~ prv recover_proofs.\<phi>R &
~ prv (neg recover_proofs.\<phi>R) & isTrue recover_proofs.\<phi>R
### theory "Draft.Abstract_First_Goedel_Rosser"
### 2.760s elapsed time, 9.156s cpu time, 2.089s GC time
locale Goedel_Form_Classical_HBL1_rev_prv_Minimal_Truth_Soundness_TIP
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and num :: "'trm set"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and P :: "'fmla"
    and isTrue :: "'fmla => bool"
  assumes
    "Goedel_Form_Classical_HBL1_rev_prv_Minimal_Truth_Soundness_TIP var trm
      fmla Var num FvarsT substT Fvars subst eql cnj dsj imp all exi fls prv
      bprv enc S P isTrue"
locale Goedel_Form_Minimal_Truth_Soundness_HBL1iff_prv_Compl_Pf_Classical
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and isTrue :: "'fmla => bool"
    and P :: "'fmla"
    and Pf :: "'fmla"
  assumes
    "Goedel_Form_Minimal_Truth_Soundness_HBL1iff_prv_Compl_Pf_Classical var
      trm fmla Var FvarsT substT Fvars subst eql cnj imp all exi fls dsj num
      prv bprv enc S isTrue P Pf"
locale Goedel_Form_Minimal_Truth_Soundness_HBL1iff_prv_Compl_Pf_Classical
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and isTrue :: "'fmla => bool"
    and P :: "'fmla"
    and Pf :: "'fmla"
  assumes
    "Goedel_Form_Minimal_Truth_Soundness_HBL1iff_prv_Compl_Pf_Classical var
      trm fmla Var FvarsT substT Fvars subst eql cnj imp all exi fls dsj num
      prv bprv enc S isTrue P Pf"
consistent ==> ~ prv \<phi>G & ~ prv (neg \<phi>G) & isTrue \<phi>G
### theory "Draft.Abstract_First_Goedel"
### 3.495s elapsed time, 10.671s cpu time, 2.220s GC time
Loading theory "Draft.Abstract_Second_Goedel" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract")
locale Goedel_Second_Assumptions
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and S :: "'fmla"
    and P :: "'fmla"
    and fls :: "'fmla"
  assumes
    "Goedel_Second_Assumptions var trm fmla Var FvarsT substT Fvars subst
      num eql cnj imp all exi prv bprv enc S P fls"
### theory "Draft.Abstract_Second_Goedel"
### 0.220s elapsed time, 0.445s cpu time, 0.018s GC time
locale Deduct_with_False_Disj_Rename
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
  assumes
    "Deduct_with_False_Disj_Rename var trm fmla Var FvarsT substT Fvars
      subst eql cnj imp all exi fls dsj num prv"
### theory "Syntax_Independent_Logic.Natural_Deduction"
### 13.948s elapsed time, 32.278s cpu time, 3.597s GC time
Loading theory "Syntax_Independent_Logic.Pseudo_Term" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract" via "Draft.Jeroslow_Original")
locale Generic_Syntax
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
  assumes "Generic_Syntax var trm fmla Var FvarsT substT Fvars subst"
locale Deduct_with_False_Disj_Rename
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
  assumes
    "Deduct_with_False_Disj_Rename var trm fmla Var FvarsT substT Fvars
      subst eql cnj imp all exi fls dsj num prv"
locale Generic_Syntax
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
  assumes "Generic_Syntax var trm fmla Var FvarsT substT Fvars subst"
locale Deduct_with_False_Disj_Rename
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
  assumes
    "Deduct_with_False_Disj_Rename var trm fmla Var FvarsT substT Fvars
      subst eql cnj imp all exi fls dsj num prv"
### theory "Syntax_Independent_Logic.Pseudo_Term"
### 0.464s elapsed time, 0.501s cpu time, 0.053s GC time
Loading theory "Draft.Jeroslow_Original" (required by "Draft.All_AbstractMoreTemplates" via "Draft.All_Abstract")
locale HBL1
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and num :: "'trm set"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and prv :: "'fmla => bool"
    and bprv :: "'a"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and P :: "'fmla"
  assumes
    "HBL1 var trm fmla Var FvarsT substT Fvars subst num eql cnj imp all exi
      prv enc P"
locale Jeroslow_Diagonalization
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and F :: "('trm => 'trm) set"
    and encF :: "('trm => 'trm) => 'fmla"
    and N :: "'trm => 'trm"
    and ssap :: "'fmla => 'trm => 'trm"
  assumes
    "Jeroslow_Diagonalization var trm fmla Var FvarsT substT Fvars subst eql
      cnj imp all exi fls dsj num prv enc F encF N ssap"
locale Jeroslow_Godel_Second
  fixes var :: "'var set"
    and trm :: "'trm set"
    and fmla :: "'fmla set"
    and Var :: "'var => 'trm"
    and FvarsT :: "'trm => 'var set"
    and substT :: "'trm => 'trm => 'var => 'trm"
    and Fvars :: "'fmla => 'var set"
    and subst :: "'fmla => 'trm => 'var => 'fmla"
    and eql :: "'trm => 'trm => 'fmla"
    and cnj :: "'fmla => 'fmla => 'fmla"
    and imp :: "'fmla => 'fmla => 'fmla"
    and all :: "'var => 'fmla => 'fmla"
    and exi :: "'var => 'fmla => 'fmla"
    and fls :: "'fmla"
    and dsj :: "'fmla => 'fmla => 'fmla"
    and num :: "'trm set"
    and prv :: "'fmla => bool"
    and enc :: "'fmla => 'trm"  (\<open>\<langle>_\<rangle>\<close>)
    and P :: "'fmla"
    and F :: "('trm => 'trm) set"
    and encF :: "('trm => 'trm) => 'fmla"
    and N :: "'trm => 'trm"
    and ssap :: "'fmla => 'trm => 'trm"
  assumes
    "Jeroslow_Godel_Second var trm fmla Var FvarsT substT Fvars subst eql
      cnj imp all exi fls dsj num prv enc P F encF N ssap"
### theory "Draft.Jeroslow_Original"
### 1.074s elapsed time, 2.029s cpu time, 1.330s GC time
Loading theory "Draft.All_Abstract" (required by "Draft.All_AbstractMoreTemplates")
### theory "Draft.All_Abstract"
### 0.343s elapsed time, 0.346s cpu time, 0.000s GC time
Loading theory "Draft.All_AbstractMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.All_AbstractMoreTemplates"
### 0.285s elapsed time, 0.416s cpu time, 0.046s GC time
val it = (): unit
