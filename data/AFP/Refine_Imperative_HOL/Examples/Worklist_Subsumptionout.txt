Loading theory "Draft.User_Smashing" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
Loading theory "Draft.Named_Theorems_Rev" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic" via "Draft.Sepref_Misc")
Loading theory "Draft.Concl_Pres_Clarification" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Intf_Util")
Loading theory "Draft.Structured_Apply" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic")
val enumerate = fn: 'a list -> ('a * int) list
val dummy_abs = fn: int -> typ list -> term -> term
val common_prefix = fn: typ list -> term -> term -> typ list * term * term
val dest_app = fn: term list -> term -> term * term list
val add_bound = fn: term * 'a -> (int * 'a) list -> (int * 'a) list
### ML warning (line 43 of "$AFP/Refine_Imperative_HOL/Lib/User_Smashing.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 34 of "$AFP/Refine_Imperative_HOL/Lib/User_Smashing.thy"):
### Pattern is not exhaustive.
### ML warning (line 35 of "$AFP/Refine_Imperative_HOL/Lib/User_Smashing.thy"):
### Pattern is not exhaustive.
val smash_pair = fn: Proof.context -> thm -> term * term -> thm
val smash = fn: Proof.context -> thm -> thm
val smashed_attrib = fn: Proof.context -> thm -> 'a option * thm option
val smash_new_rule = fn: Proof.context -> thm -> thm Seq.seq
### theory "Draft.User_Smashing"
### 0.036s elapsed time, 0.142s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
val cp_clarify_step_tac = fn: Proof.context -> int -> tactic
val cp_clarify_tac = fn: Proof.context -> int -> tactic
val cp_clarsimp_tac = fn: Proof.context -> int -> tactic
### theory "Draft.Concl_Pres_Clarification"
### 0.062s elapsed time, 0.271s cpu time, 0.000s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.ExtrEqs")
signature NAMED_THEOREMS_REV =
  sig
    val add: string -> attribute
    val add_thm: string -> thm -> Context.generic -> Context.generic
    val check: Proof.context -> string * Position.T -> string
    val declare: binding -> string -> local_theory -> string * local_theory
    val del: string -> attribute
    val del_thm: string -> thm -> Context.generic -> Context.generic
    val get: Proof.context -> string -> thm list
    val member: Proof.context -> string -> thm -> bool
  end
structure Named_Theorems_Rev: NAMED_THEOREMS_REV
### theory "Draft.Named_Theorems_Rev"
### 0.068s elapsed time, 0.303s cpu time, 0.000s GC time
Loading theory "Draft.PO_Normalizer" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic" via "Draft.Sepref_Misc")
signature STRUCTURED_APPLY =
  sig
    val apply1:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val applyT:
       Method.text * Position.range ->
         Proof.state -> Proof.state Seq.result Seq.seq
    val apply_focus:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val apply_solve:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val focus: Proof.state -> Proof.state
    val solved: Proof.state -> Proof.state
    val unfocus: Proof.state -> Proof.state
  end
structure Structured_Apply: STRUCTURED_APPLY
### theory "Draft.Structured_Apply"
### 0.072s elapsed time, 0.320s cpu time, 0.000s GC time
Loading theory "Draft.Sepref_Id_Op" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### ML warning (line 63 of "$AFP/Refine_Imperative_HOL/Lib/PO_Normalizer.ML"):
### Pattern is not exhaustive.
### ML warning (line 77 of "$AFP/Refine_Imperative_HOL/Lib/PO_Normalizer.ML"):
### Pattern is not exhaustive.
signature PO_NORMALIZER =
  sig
    val gen_norm_rule: thm list -> norm_set -> Proof.context -> thm -> thm
    val gen_norm_tac: norm_set -> Proof.context -> tactic'
    type norm_set =
       {cong_rules: thm list,
        norm_rules: thm list, refl_rules: thm list, trans_rules: thm list}
  end
structure PO_Normalizer: PO_NORMALIZER
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.PO_Normalizer"
### 0.057s elapsed time, 0.200s cpu time, 0.024s GC time
Loading theory "Draft.Pf_Add" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Foreach")
### theory "HOL-Library.Function_Algebras"
### 0.171s elapsed time, 0.677s cpu time, 0.024s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
infix 0 THEN_ELSE_COMB'
signature ID_OP_TACTICAL =
  sig
    val DF_SOLVE_FWD: bool -> tactic' -> tactic'
    val SOLVE_FWD: tactic' -> tactic'
  end
structure Id_Op_Tactical: ID_OP_TACTICAL
### theory "Draft.Pf_Add"
### 0.205s elapsed time, 0.820s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.234s elapsed time, 0.903s cpu time, 0.091s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
structure Id_Op:
  sig
    val add_id_rule: thm -> Proof.context -> Proof.context
    val cfg_id_debug: bool Config.T
    val cfg_id_trace_fallback: bool Config.T
    val dest_id_rl: thm -> term * typ
    val do_unprotect_tac: Proof.context -> int -> tactic
    val id_a_conv: conv -> cterm -> thm
    val id_tac: id_tac_mode -> Proof.context -> int -> tactic
    datatype id_tac_mode = Init | Normal | Solve | Step
    val protect: typ list -> term -> term
    val protect_conv: Proof.context -> conv
    val unprotect_conv: Proof.context -> conv
  end
consts
  stake :: "nat => 'a stream => 'a list"
### theory "Draft.Sepref_Id_Op"
### 0.603s elapsed time, 2.335s cpu time, 0.189s GC time
Loading theory "Draft.Pf_Mono_Prover" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
consts
  sdrop :: "nat => 'a stream => 'a stream"
structure Pf_Mono_Prover:
  sig val mono_tac: Proof.context -> int -> tactic end
### theory "Draft.Pf_Mono_Prover"
### 0.032s elapsed time, 0.128s cpu time, 0.000s GC time
Loading theory "Draft.Sepref_Misc" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.929s elapsed time, 3.601s cpu time, 0.303s GC time
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.896s elapsed time, 3.235s cpu time, 0.742s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Sepref_Misc"
### 0.947s elapsed time, 2.863s cpu time, 0.699s GC time
Loading theory "Draft.Sepref_Basic" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify")
Loading theory "Draft.Term_Synth" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Definition")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature TERM_SYNTH =
  sig val synth_term: thm list -> Proof.context -> term -> term end
structure Term_Synth: TERM_SYNTH
### theory "Draft.Term_Synth"
### 0.162s elapsed time, 0.489s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.827s elapsed time, 5.515s cpu time, 0.927s GC time
Loading theory "Draft.Templates" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.078s elapsed time, 0.200s cpu time, 0.066s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Worklist_SubsumptionTemplates")
### Ignoring duplicate rewrite rule:
### hn_refine ?\<Gamma>1 ?c1 ?\<Gamma>'1 ?R1 FAIL == True
signature SEPREF_BASIC =
  sig
    val PHASES': phase list -> phases_ctrl -> Proof.context -> tactic'
    val apply_under_lambda:
       (Proof.context -> term -> term) -> Proof.context -> term -> term
    val constrain_type_pre: typ -> term -> term
    val dbg_phases_ctrl: phases_ctrl
    val dest_hn_ctxt: term -> term * term * term
    val dest_hn_ctxt_opt: term -> (term * term * term) option
    val dest_hn_refine: term -> term * term * term * term * term
    val dest_hnr_absfun: term -> bool * (term * term list)
    val dest_lambda_rc:
       Proof.context -> term -> (term * (term -> term)) * Proof.context
    val dest_nresT: typ -> typ
    val dflt_phases_ctrl: phases_ctrl
    val flag_phases_ctrl: bool -> phases_ctrl
    val hn_refine_concl_conv_a:
       (Proof.context -> conv) -> Proof.context -> conv
    val hn_refine_conv: conv -> conv -> conv -> conv -> conv -> conv
    val hn_refine_conv_a: conv -> conv
    val is_hn_ctxt: term -> bool
    val is_hn_refine_concl: term -> bool
    val is_nresT: typ -> bool
    val is_true: term -> bool
    val list_star: term list -> term
    val mk_cequals: cterm * cterm -> cterm
    val mk_compN_pre: int -> term -> term -> term
    val mk_curry0_pre: term -> term
    val mk_curryN_pre: int -> term -> term
    val mk_curry_pre: term -> term
    val mk_entails: term * term -> term
    val mk_hn_refine: term * term * term * term * term -> term
    val mk_hnr_absfun: bool * (term * term list) -> term
    val mk_hnr_absfun': term * term list -> term
    val mk_nresT: typ -> typ
    val mk_pair_in_pre: term -> term -> term -> term
    val mk_star: term * term -> term
    val mk_uncurry0_pre: term -> term
    val mk_uncurryN_pre: int -> term -> term
    val mk_uncurry_pre: term -> term
    type phase = string * (Proof.context -> tactic') * int
    type phases_ctrl =
       {int_res: bool,
        start: string option, stop: string option, trace: bool}
    val star_permute_tac: Proof.context -> tactic
    val strip_star: term -> term list
  end
signature SEPREF_DEBUGGING =
  sig
    val DBG_CONVERSION: bool Config.T -> Proof.context -> conv -> tactic'
    val DBG_CONVERSION': Proof.context -> conv -> tactic'
    val cfg_debug_all: bool Config.T
    val dbg_msg_tac:
       bool Config.T ->
         (Proof.context -> int -> thm -> string) -> Proof.context -> tactic'
    val dbg_msg_tac':
       (Proof.context -> int -> thm -> string) -> Proof.context -> tactic'
    val dbg_trace_msg: bool Config.T -> Proof.context -> string -> unit
    val dbg_trace_msg': Proof.context -> string -> unit
    val error_tac': string -> Proof.context -> tactic'
    val is_debug: bool Config.T -> Proof.context -> bool
    val is_debug': Proof.context -> bool
    val msg_allgoals: string -> Proof.context -> int -> thm -> string
    val msg_from_subgoal:
       string ->
         (term -> Proof.context -> string) ->
           Proof.context -> int -> thm -> string
    val msg_subgoal: string -> Proof.context -> int -> thm -> string
    val msg_text: string -> Proof.context -> int -> thm -> string
    val tracing_tac': string -> Proof.context -> tactic'
    val warning_tac': string -> Proof.context -> tactic'
  end
structure Sepref_Basic: SEPREF_BASIC
structure Sepref_Debugging: SEPREF_DEBUGGING
infix 1 THEN_NEXT
infix 1 THEN_ALL_NEW_LIST
infix 1 THEN_ALL_NEW_LIST'
signature STACTICAL =
  sig
    val APPLY_LIST: tactic' list -> tactic'
    val THEN_ALL_NEW_LIST: tactic' * tactic' list -> tactic'
    val THEN_ALL_NEW_LIST': tactic' * (tactic' list * tactic') -> tactic'
    val THEN_NEXT: tactic' * tactic' -> tactic'
  end
structure STactical: STACTICAL
val THEN_ALL_NEW_LIST = fn: tactic' * tactic' list -> tactic'
val APPLY_LIST = fn: tactic' list -> tactic'
val THEN_NEXT = fn: tactic' * tactic' -> tactic'
val THEN_ALL_NEW_LIST' = fn: tactic' * (tactic' list * tactic') -> tactic'
### theory "Draft.Sepref_Basic"
### 1.274s elapsed time, 3.114s cpu time, 0.967s GC time
Loading theory "Draft.Sepref_Constraints" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
Loading theory "Draft.Sepref_Monadify" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.791s elapsed time, 2.013s cpu time, 0.799s GC time
### ML warning (line 153 of "$AFP/Refine_Imperative_HOL/Sepref_Monadify.thy"):
### (aconv) has infix status but was not preceded by op.
### ML warning (line 188 of "$AFP/Refine_Imperative_HOL/Sepref_Monadify.thy"):
### (aconv) has infix status but was not preceded by op.
structure Sepref_Monadify:
  sig
    val arity_tac: Proof.context -> int -> tactic
    val comb_tac: Proof.context -> int -> tactic
    val contains_eval: term -> bool
    val dup_tac: Proof.context -> int -> tactic
    val mark_params_conv: Proof.context -> conv
    val mark_params_tac: Proof.context -> int -> tactic
    val monadify_simproc: simproc
    val monadify_tac: bool -> Proof.context -> tactic'
    val remove_pass_tac: Proof.context -> int -> tactic
  end
signature SEPREF_CONSTRAINTS =
  sig
    val ON_SLOT: tactic -> tactic
    val WITH_SLOT: tactic' -> tactic
    val add_constraint_rule: thm -> Context.generic -> Context.generic
    val add_safe_constraint_rule: thm -> Context.generic -> Context.generic
    val cond_focus: (term -> bool) -> tactic
    val constraint_tac: Proof.context -> tactic'
    val create_slot_tac: tactic
    val del_constraint_rule: thm -> Context.generic -> Context.generic
    val del_safe_constraint_rule: thm -> Context.generic -> Context.generic
    val dest_slot_tac: tactic'
    val ensure_slot_tac: tactic
    val focus: tactic
    val get_constraint_rules: Proof.context -> thm list
    val get_safe_constraint_rules: Proof.context -> thm list
    val has_slot: thm -> bool
    val is_constraint_goal: term -> bool
    val is_constraint_tac: tactic'
    val prefer_slot_tac: tactic
    val print_slot_tac: Proof.context -> tactic
    val process_constraint_slot: Proof.context -> tactic
    val remove_slot_tac: tactic
    val safe_constraint'_tac: Proof.context -> tactic'
    val safe_constraint_tac: Proof.context -> tactic'
    val setup: theory -> theory
    val slot_constraint_tac: int -> tactic
    val solve_constraint'_tac: Proof.context -> tactic'
    val solve_constraint_slot: Proof.context -> tactic
    val solve_constraint_tac: Proof.context -> tactic'
    val some_to_slot_tac: (term -> bool) -> tactic
    val to_slot_tac: tactic'
    val unfocus: tactic
    val unfocus_ins: tactic
  end
structure Sepref_Constraints: SEPREF_CONSTRAINTS
### theory "Draft.Sepref_Constraints"
### 0.362s elapsed time, 0.841s cpu time, 0.068s GC time
Loading theory "Draft.Sepref_Frame" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
Loading theory "Draft.Sepref_Rules" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
### theory "Draft.Sepref_Monadify"
### 0.398s elapsed time, 0.950s cpu time, 0.068s GC time
consts
  hf_pres ::
    "('a => 'b => assn) => bool => ('a => 'b => assn) * ('a => 'b => assn)"
signature SEPREF_FRAME =
  sig
    val add_normrel_eq: thm -> Context.generic -> Context.generic
    val align_goal_tac: Proof.context -> tactic'
    val align_rl_conv: Proof.context -> conv
    val cfg_debug: bool Config.T
    val del_normrel_eq: thm -> Context.generic -> Context.generic
    val frame_step_tac:
       (Proof.context -> tactic') -> bool -> Proof.context -> tactic'
    val frame_tac: (Proof.context -> tactic') -> Proof.context -> tactic'
    val get_normrel_eqs: Proof.context -> thm list
    val is_merge: term -> bool
    val merge_tac: (Proof.context -> tactic') -> Proof.context -> tactic'
    val norm_goal_pre_tac: Proof.context -> tactic'
    val prepare_frame_tac: Proof.context -> tactic'
    val recover_pure_tac: Proof.context -> tactic'
    val setup: theory -> theory
    val weaken_post_tac: Proof.context -> tactic'
  end
structure Sepref_Frame: SEPREF_FRAME
### theory "Draft.Sepref_Frame"
### 0.514s elapsed time, 1.109s cpu time, 0.135s GC time
signature SEPREF_RULES =
  sig
    val add_pure_constraints_rule: Proof.context -> thm -> thm
    val analyze_hnr: Proof.context -> thm -> hnr_analysis
    val analyze_rel: term -> term option * term list * term
    val binder_rels: term -> term list
    val body_rel: term -> term
    val ensure_fref: Proof.context -> thm -> thm
    val ensure_fref_nres: Proof.context -> thm -> thm
    val ensure_hfref: Proof.context -> thm -> thm
    val ensure_hnr: Proof.context -> thm -> thm
    val fcomp_attrib: attribute context_parser
    val gen_compose: Proof.context -> thm -> thm -> thm
    type hnr_analysis =
       {ahead: term * bool,
        argrels: (term * bool) list,
        chead: term * bool,
        precond: term, prems: term list, result_rel: term, thm: thm}
    val intf_of_assn: Proof.context -> term -> typ
    val mk_hfprod: term * term -> term
    val mk_hfprods: term list -> term
    val mk_hfref_thm: Proof.context -> hnr_analysis -> thm
    val mk_rel: term option * term list * term -> term
    val mk_triv_precond: term list -> term
    val norm_fcomp_rule: Proof.context -> thm -> thm
    val prepare_hfref_synth_tac: Proof.context -> tactic'
    val pretty_hnr_analysis: Proof.context -> hnr_analysis -> Pretty.T
    val simplify_precond: Proof.context -> thm -> thm
    val strip_rel: term -> term list * term
    val to_foparam: Proof.context -> thm -> thm
    val to_fref: Proof.context -> thm -> thm
    val to_hfref: Proof.context -> thm -> thm
    val to_hnr: Proof.context -> thm -> thm
  end
structure Sepref_Rules: SEPREF_RULES
### theory "Draft.Sepref_Rules"
### 1.723s elapsed time, 2.329s cpu time, 0.176s GC time
Loading theory "Draft.Sepref_Combinator_Setup" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
Loading theory "Draft.Sepref_Definition" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool")
### ML warning (line 62 of "$AFP/Refine_Imperative_HOL/Sepref_Combinator_Setup.thy"):
### (=) has infix status but was not preceded by op.
signature SEPREF_INTF_TYPES =
  sig
    val check_intf_type: Proof.context -> typ -> typ -> bool
    val check_intf_type_err: Proof.context -> typ -> typ -> unit
    val check_intf_type_msg:
       (typ * typ -> unit) -> Proof.context -> typ -> typ -> unit
    val decl_intf_type_cmd:
       ((string list * binding) * mixfix) * string ->
         local_theory -> local_theory
    val norm_intf_type: Proof.context -> typ -> typ
    val register_itype_rewrite: typ -> typ -> Proof.context -> local_theory
  end
structure Sepref_Intf_Types: SEPREF_INTF_TYPES
structure Sepref_Extraction:
  sig
    val heap_extraction: Refine_Automation.extraction
    val setup: theory -> theory
  end
"starts_with"
  :: "'a"
structure Sepref_Definition:
  sig
    val cfg_prep_code: bool Config.T
    val make_hnr_goal:
       term -> Proof.context -> (cterm * term) * Proof.context
    val mk_synth_term: Proof.context -> string -> string -> term
    val sd_cmd:
       (((('a Config.T * 'a) list * binding) * Token.src list) * string) *
       string
         -> Proof.context -> Proof.state
    val sd_parser:
       Token.T list ->
         (((((bool Config.T * bool) list * binding) * Token.src list) *
           string)
          *
          string)
         *
         Token.T list
    val st_cmd: (binding * string) * string -> Proof.context -> Proof.state
    val st_parser:
       Token.T list -> ((binding * string) * string) * Token.T list
  end
### theory "Draft.Sepref_Definition"
### 0.452s elapsed time, 0.925s cpu time, 0.082s GC time
### ML warning (line 347 of "$AFP/Refine_Imperative_HOL/Sepref_Combinator_Setup.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 349 of "$AFP/Refine_Imperative_HOL/Sepref_Combinator_Setup.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 436 of "$AFP/Refine_Imperative_HOL/Sepref_Combinator_Setup.thy"):
### Pattern is not exhaustive.
structure Sepref_Combinator_Setup:
  sig
    val analyze_decl: term -> term -> opkind * (typ list * typ)
    val analyze_itype_thm: thm -> term * opkind * (typ list * typ)
    val check_type_intf: Proof.context -> typ -> typ -> bool
    val cr_reg_thms:
       term ->
         typ ->
           Proof.context ->
             {arity_thm: thm option, itype_thm: thm, mcomb_thm: thm option}
    val gen_pr_const_pat: Proof.context -> term -> thm option * term
    val generate_basename: Proof.context -> term -> string
    val get_nt_rule: thm -> typ * typ
    val import_terms_disj:
       term list -> Proof.context -> term list * Proof.context
    val is_valid_abs_op: Proof.context -> term -> bool
    val map_type: Proof.context -> typ -> typ
    val map_type_raw: Proof.context -> (typ * typ) list -> typ -> typ
    val mk_arity: Proof.context -> term -> int -> thm
    val mk_itype: Proof.context -> term -> term -> thm
    val mk_mcomb: Proof.context -> term -> int -> thm
    datatype opkind = COMB | PURE
    val read_term_type:
       string ->
         string option -> Proof.context -> (term * typ) * Proof.context
    type reg_thms =
       {arity_thm: thm option, itype_thm: thm, mcomb_thm: thm option}
    val sepref_register_adhoc:
       (term * typ option) list -> Context.generic -> Context.generic
    val sepref_register_adhoc_attr: (term * typ option) list -> attribute
    val sepref_register_adhoc_attr_decl:
       Context.generic * Token.T list ->
         attribute * (Context.generic * Token.T list)
    val sepref_register_adhoc_parser:
       Context.generic * Token.T list ->
         (term * typ option) list * (Context.generic * Token.T list)
    val sepref_register_adhoc_single:
       term * typ option -> Context.generic -> Context.generic
    val sepref_register_cmd:
       ((string option * string) * string option) list ->
         Proof.context -> Proof.context
    val sepref_register_parser:
       Token.T list ->
         ((string option * string) * string option) list * Token.T list
    val sepref_register_single:
       string ->
         term ->
           typ ->
             Proof.context ->
               ((thm option * thm option) * thm) * local_theory
    val sepref_register_single_cmd:
       (string option * string) * string option ->
         Proof.context -> local_theory
  end
### theory "Draft.Sepref_Combinator_Setup"
### 0.515s elapsed time, 0.988s cpu time, 0.082s GC time
Loading theory "Draft.Sepref_Translate" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool")
structure Sepref_Translate:
  sig
    val cfg_debug: bool Config.T
    val check_side_conds: thm -> unit list
    val dbg_msg_tac:
       (Proof.context -> int -> thm -> string) -> Proof.context -> tactic'
    val gen_msg_analyze: term -> Proof.context -> string
    val gen_trans_op_tac: bool -> Proof.context -> tactic'
    val gen_trans_step_tac: bool -> Proof.context -> tactic'
    val gen_trans_tac: bool -> Proof.context -> tactic'
    val msg_analyze: string -> Proof.context -> int -> thm -> string
    structure sepref_comb_rules: NAMED_SORTED_THMS
    structure sepref_fr_rules: NAMED_SORTED_THMS
    val setup: theory -> theory
    val side_cond_dispatch_tac:
       bool -> (int -> tactic) -> Proof.context -> tactic'
    val side_constraint_tac: Proof.context -> tactic'
    val side_fallback_tac: Proof.context -> int -> tactic
    val side_frame_tac: Proof.context -> tactic'
    val side_gen_algo_tac: Proof.context -> int -> tactic
    val side_merge_tac: Proof.context -> tactic'
    val side_mono_tac: Proof.context -> int -> tactic
    val side_pref_def_tac: Proof.context -> int -> tactic
    val side_rprem_tac: Proof.context -> int -> tactic
    val side_unfold_tac: Proof.context -> int -> tactic
    val trans_comb_tac: Proof.context -> int -> tactic
    val trans_keep_tac: Proof.context -> tactic'
    val trans_step_keep_tac: Proof.context -> tactic'
    val trans_step_tac: Proof.context -> tactic'
    val trans_tac: Proof.context -> tactic'
  end
"PR_CONST (op_ASSERT_bind I)"
  :: "'a nres => 'a nres"
structure Sepref_Import_Param:
  sig
    val add_PR_CONST: thm -> thm
    val import: Proof.context -> thm -> thm
    val import_attr:
       Context.generic * Token.T list ->
         attribute * (Context.generic * Token.T list)
    val import_attr_rl:
       Context.generic * Token.T list ->
         attribute * (Context.generic * Token.T list)
    val setup: theory -> theory
    val to_import_fo: Proof.context -> thm -> thm
  end
### theory "Draft.Sepref_Translate"
### 0.862s elapsed time, 0.891s cpu time, 0.044s GC time
Loading theory "Draft.Sepref_Intf_Util" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref" via "Draft.Sepref_Tool")
### ML warning (line 926 of "$AFP/Refine_Imperative_HOL/Sepref_Intf_Util.thy"):
### Value identifier (unfold_PR_CONST_tac) has not been referenced.
signature SEPREF_INTF_UTIL =
  sig
    val cfg_def: bool Config.T
    val cfg_ismop: bool Config.T
    val cfg_mop: bool Config.T
    val cfg_rawgoals: bool Config.T
    val cleanup_constraints: Proof.context -> thm -> thm
    val get_intf_of_rel: Proof.context -> term -> typ
    val list_filtered_subterms: (term -> 'a option) -> term -> 'a list
    val simp_precond_tac: Proof.context -> tactic'
    val to_assns_rl: bool -> Proof.context -> thm -> thm
  end
structure Sepref_Intf_Util: SEPREF_INTF_UTIL
### theory "Draft.Sepref_Intf_Util"
### 1.166s elapsed time, 1.252s cpu time, 0.133s GC time
Loading theory "Draft.Sepref_Tool" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref")
structure Sepref:
  sig
    val cons_init_tac: Proof.context -> int -> tactic
    val cons_solve_tac: bool -> Proof.context -> int -> tactic
    val id_init_tac: Proof.context -> int -> tactic
    val id_solve_tac: Proof.context -> int -> tactic
    val id_step_tac: Proof.context -> int -> tactic
    val id_tac: Proof.context -> int -> tactic
    val monadify_tac: bool -> Proof.context -> tactic'
    val opt_tac: Proof.context -> int -> tactic
    val preproc_tac: Proof.context -> int -> tactic
    structure sepref_opt_simps: NAMED_THMS
    structure sepref_opt_simps2: NAMED_THMS
    structure sepref_preproc_simps: NAMED_THMS
    val sepref_tac: bool -> Proof.context -> int -> tactic
    val setup: theory -> theory
    val trans_tac: Proof.context -> tactic'
  end
val SIMPLE_METHOD_NOPARAM' = fn:
   ('a -> int -> tactic) -> 'b -> ('a -> Method.method) * 'b
val SIMPLE_METHOD_NOPARAM = fn:
   ('a -> tactic) -> 'b -> ('a -> Method.method) * 'b
COPY ::\<^sub>i TYPE(?'a => ?'a)
val prec_extract_eqs_tac = fn: Proof.context -> int -> tactic
val prep_comb_rule = fn: thm -> thm
### theory "Draft.Sepref_Tool"
### 0.387s elapsed time, 0.427s cpu time, 0.061s GC time
Loading theory "Draft.Sepref_HOL_Bindings" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref")
PR_CONST (ASSN_ANNOT A) ::\<^sub>i TYPE('a => 'a)
IS_ID ?R ==> IS_LEFT_TOTAL ?R
IS_ID ?R ==> IS_RIGHT_TOTAL ?R
IS_BELOW_ID ?R ==> IS_LEFT_UNIQUE ?R
IS_BELOW_ID ?R ==> single_valued ?R
IS_ID ?R ==> IS_BELOW_ID ?R
single_valued ?R ==> precise (pure ?R)
[| precise ?R; single_valued ?S |] ==> precise (hr_comp ?R ?S)
### Ignoring duplicate rewrite rule:
### b_rel (b_rel ?R1 ?P1.1) ?P2.1 == b_rel ?R1 (%x. ?P1.1 x & ?P2.1 x)
### Ignoring duplicate rewrite rule:
### b_assn (b_assn ?A1 ?P1.1) ?P2.1 == b_assn ?A1 (%x. ?P1.1 x & ?P2.1 x)
Found termination order: "{}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
Inr ::\<^sub>i TYPE(?'a => ?'b + ?'a)
Inl ::\<^sub>i TYPE(?'a => ?'a + ?'b)
case_sum ::\<^sub>i TYPE((?'a => ?'b) => (?'c => ?'b) => ?'a + ?'c => ?'b)
isl ::\<^sub>i TYPE(?'a + ?'b => bool)
projl ::\<^sub>i TYPE(?'a + ?'b => ?'a)
projr ::\<^sub>i TYPE(?'a + ?'b => ?'b)
PR_CONST STR '''' ::\<^sub>i TYPE(String.literal)
PR_CONST (String.Literal b0 b1 b2 b3 b4 b5 b6 s) ::\<^sub>i
TYPE(String.literal)
### theory "Draft.Sepref_HOL_Bindings"
### 1.481s elapsed time, 1.648s cpu time, 0.227s GC time
Loading theory "Draft.Sepref_Foreach" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref")
"FOREACH\<^sub>O\<^sub>C\<^bsup>R,I\<^esup>"
  :: "'a set => ('b => bool) => ('a => 'b => 'b nres) => 'b => 'b nres"
### Ambiguous input (line 233 of "$AFP/Refine_Imperative_HOL/Sepref_Foreach.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sepref_Id_Op.intf_type"
###     ("_applC" ("_position" PR_CONST)
###       ("_applC" ("_position" FOREACHoci)
###         ("_cargs" ("_position" R) ("_position" I))))
###     ("_TYPE"
###       ("\<^type>fun" ("_tapp" ("_position_sort" 'c) ("_type_name" set))
###         ("\<^type>fun"
###           ("\<^type>fun" ("_position_sort" 'd) ("_type_name" bool))
###           ("\<^type>fun"
###             ("\<^type>fun" ("_position_sort" 'c)
###               ("\<^type>fun" ("_position_sort" 'd)
###                 ("_tapp" ("_position_sort" 'd) ("_type_name" nres))))
###             ("\<^type>fun" ("_position_sort" 'd)
###               ("_tapp" ("_position_sort" 'd) ("_type_name" nres)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Autoref_Id_Ops.CONST_INTF"
###     ("_applC" ("_position" PR_CONST)
###       ("_applC" ("_position" FOREACHoci)
###         ("_cargs" ("_position" R) ("_position" I))))
###     ("_TYPE"
###       ("\<^type>fun" ("_tapp" ("_position_sort" 'c) ("_type_name" set))
###         ("\<^type>fun"
###           ("\<^type>fun" ("_position_sort" 'd) ("_type_name" bool))
###           ("\<^type>fun"
###             ("\<^type>fun" ("_position_sort" 'c)
###               ("\<^type>fun" ("_position_sort" 'd)
###                 ("_tapp" ("_position_sort" 'd) ("_type_name" nres))))
###             ("\<^type>fun" ("_position_sort" 'd)
###               ("_tapp" ("_position_sort" 'd) ("_type_name" nres)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Sepref_Foreach"
### 0.842s elapsed time, 0.926s cpu time, 0.123s GC time
Loading theory "Draft.Sepref_Improper" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption" via "Draft.Sepref")
pho_apply ::\<^sub>i TYPE((?'a => ?'b) => ?'a => ?'b)
### theory "Draft.Sepref_Improper"
### 0.037s elapsed time, 0.039s cpu time, 0.000s GC time
Loading theory "Draft.Sepref" (required by "Draft.Worklist_SubsumptionTemplates" via "Draft.Worklist_Subsumption")
### theory "Draft.Sepref"
### 0.314s elapsed time, 0.363s cpu time, 0.070s GC time
Loading theory "Draft.Worklist_Subsumption" (required by "Draft.Worklist_SubsumptionTemplates")
locale Search_Space_Defs
  fixes E :: "'a => 'a => bool"
    and a\<^sub>0 :: "'a"
    and F :: "'a => bool"
    and subsumes :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 50)
locale Search_Space
  fixes E :: "'a => 'a => bool"
    and a\<^sub>0 :: "'a"
    and F :: "'a => bool"
    and subsumes :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 50)
  assumes "Search_Space E a\<^sub>0 F (\<preceq>)"
"card"
  :: "'a set => nat"
locale Search_Space_Defs
  fixes E :: "'a => 'a => bool"
    and a\<^sub>0 :: "'a"
    and F :: "'a => bool"
    and subsumes :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 50)
locale Search_Space
  fixes E :: "'a => 'a => bool"
    and a\<^sub>0 :: "'a"
    and F :: "'a => bool"
    and subsumes :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 50)
  assumes "Search_Space E a\<^sub>0 F (\<preceq>)"
locale Worklist1_Defs
  fixes E :: "'a => 'a => bool"
    and a\<^sub>0 :: "'a"
    and F :: "'a => bool"
    and subsumes :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 50)
    and succs :: "'a => 'a list"
locale Worklist1
  fixes E :: "'a => 'a => bool"
    and a\<^sub>0 :: "'a"
    and F :: "'a => bool"
    and subsumes :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 50)
    and succs :: "'a => 'a list"
  assumes "Worklist1 E a\<^sub>0 F (\<preceq>) succs"
### theory "Draft.Worklist_Subsumption"
### 0.244s elapsed time, 0.308s cpu time, 0.091s GC time
Loading theory "Draft.Worklist_SubsumptionTemplates"
val templateLemmas =
   [("Worklist_Subsumption.pred_not_lt_is_zero",
     "(~ ?n - Suc 0 < ?n) = (?n = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_app (template_hole 2, template_hole 1))),
                template_var 0))
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Worklist_Subsumption.set_mset_mp",
     "[| set_mset ?m <= ?s; ?n < count ?m ?x |] ==> ?x : ?s",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 3),
          template_var 2),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 1, template_var 3),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Worklist_Subsumption.take_from_set_correct",
     "?s ~= {} ==>
      take_from_set ?s <= SPEC (%(x, s'). x : ?s & s' = ?s - {x})",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_inequation
        (less_equals, template_app (template_hole 7, template_var 0),
         template_app
          (template_hole 6,
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty)))))),
    ("Worklist_Subsumption.take_from_mset_correct",
     "?s ~= {#} ==>
      take_from_mset ?s <= SPEC (%(x, s'). x :# ?s & s' = ?s - {#x#})",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_inequation
        (less_equals, template_app (template_hole 8, template_var 0),
         template_app
          (template_hole 7,
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty))))))]:
   (string * thm * template) list
### theory "Draft.Worklist_SubsumptionTemplates"
### 0.554s elapsed time, 0.759s cpu time, 0.088s GC time
val it = (): unit
