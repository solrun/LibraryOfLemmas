   [("Sepref_Tool.infer_post_triv", "?P \<Longrightarrow>\<^sub>t ?P",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Sepref_Tool.fold_COPY", "?x = COPY ?x",
     template_equation
      (template_var 0, template_app (template_hole 0, template_var 0))),
    ("Sepref_Tool.sepref_opt_simps", "?f >>= return = ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Sepref_Tool.sepref_preproc", "(?f o ?g) ?x = ?f (?g ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_var 2, template_app (template_var 1, template_var 0)))),
    ("Sepref_Tool.short_circuit_conv",
     "(?a & ?b) = (if ?a then ?b else False)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Sepref_Tool.short_circuit_conv",
     "(?a | ?b) = (if ?a then True else ?b)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0))),
    ("Sepref_Tool.short_circuit_conv",
     "(?a --> ?b) = (if ?a then ?b else True)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Sepref_Tool.prec_split1_aux",
     "?A * ?B * true \<Longrightarrow>\<^sub>A ?A * true",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_hole 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))
         )),
    ("Sepref_Tool.prec_split2_aux",
     "?A * ?B * true \<Longrightarrow>\<^sub>A ?B * true",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_hole 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Sepref_Tool.prec_specI",
     "?h \<Turnstile> ?\<Gamma> \<and>\<^sub>A ?\<Gamma>' ==>
      prec_spec ?h ?\<Gamma> ?\<Gamma>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Sepref_Tool.if_return",
     "(if ?b then return ?t else return ?e) =
      return (if ?b then ?t else ?e)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Sepref_Tool.return_bind_eq_let", "return ?v >>= ?f = Let ?v ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Sepref_Tool.case_prod_return_opt",
     "(case ?p of (a, b) => return (?f a b)) =
      return (case ?p of (x, xa) => ?f x xa)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Sepref_Tool.sepref_opt_simps",
     "?f >>= ?g >>= ?k = ?f >>= (%x. ?g x >>= ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Sepref_Tool.case_option_return_opt",
     "(case ?v of None => return ?fn | Some s => return (?fs s)) =
      return (case ?v of None => ?fn | Some x => ?fs x)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           t_empty),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Sepref_Tool.ho_prod_move",
     "(%(a, b) x. ?f x a b) = (%p x. case p of (xa, xb) => ?f x xa xb)",
     template_equation (template_app (template_hole 1, t_empty), t_empty)),
    ("Sepref_Tool.case_list_return",
     "(case ?l of [] => return ?fn | x # xs => return (?fc x xs)) =
      return (case ?l of [] => ?fn | x # xa => ?fc x xa)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           t_empty),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Sepref_Tool.case_prod_opt2",
     "(%x. return (case x of (a, b) => ?f a b)) =
      (%(a, b). return (?f a b))",
     template_equation (t_empty, template_app (template_hole 0, t_empty))),
    ("Sepref_Tool.prec_specD",
     "[| precise ?R; prec_spec ?h (?R ?a ?p) (?R ?a' ?p) |] ==> ?a = ?a'",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_app
                 (template_app (template_var 4, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_var 4, template_var 0),
                template_var 1))
            )],
       template_equation (template_var 2, template_var 0))),
    ("Sepref_Tool.hnr_pure_COPY",
     "CONSTRAINT is_pure ?R ==>
      (return, RETURN o COPY) : ?R\<^sup>k \<rightarrow>\<^sub>a ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_hole 3))),
             template_app
              (template_app
                (template_app (template_hole 2, t_empty),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_hole 1)),
               template_var 0))
           ))),
    ("Sepref_Tool.TRANS_init",
     "[| hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R ?a; CNV ?c ?c' |]
      ==> hn_refine ?\<Gamma> ?c' ?\<Gamma>' ?R ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Sepref_Tool.ID_init",
     "[| ID ?a ?a' TYPE(?'T); hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R ?a' |]
      ==> hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 5),
                template_var 4),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 5)
           ))),
    ("Sepref_Tool.split_merge",
     "[| ?A \<or>\<^sub>A ?B \<Longrightarrow>\<^sub>t ?X;
         ?X \<or>\<^sub>A ?C \<Longrightarrow>\<^sub>t ?D |]
      ==> ?A \<or>\<^sub>A ?B \<or>\<^sub>A ?C \<Longrightarrow>\<^sub>t
          ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 1))),
             template_var 0)
           ))),
    ("Sepref_Tool.prec_spec_splitE",
     "[| prec_spec ?h (?A * ?B) (?C * ?D);
         [| prec_spec ?h ?A ?C; prec_spec ?h ?B ?D |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_app
                 (template_app (template_hole 0, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4),
                 template_var 2)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 3),
                   template_var 1)
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Sepref_Tool.CONS_init",
     "[| hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R ?a;
         ?\<Gamma>' \<Longrightarrow>\<^sub>t ?\<Gamma>c';
         !!a c. hn_ctxt ?R a c \<Longrightarrow>\<^sub>t hn_ctxt ?Rc a c |]
      ==> hn_refine ?\<Gamma> ?c ?\<Gamma>c' ?Rc ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 6),
                   template_var 5),
                 template_var 1),
               template_var 0),
             template_var 2)
           )))]
