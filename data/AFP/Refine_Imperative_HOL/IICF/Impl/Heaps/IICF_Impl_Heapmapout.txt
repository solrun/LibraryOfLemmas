Loading theory "Draft.User_Smashing" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
Loading theory "Draft.Named_Theorems_Rev" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic" via "Draft.Sepref_Misc")
Loading theory "Draft.Concl_Pres_Clarification" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Intf_Util")
Loading theory "Draft.Structured_Apply" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic")
val enumerate = fn: 'a list -> ('a * int) list
val dummy_abs = fn: int -> typ list -> term -> term
val common_prefix = fn: typ list -> term -> term -> typ list * term * term
val dest_app = fn: term list -> term -> term * term list
val add_bound = fn: term * 'a -> (int * 'a) list -> (int * 'a) list
### ML warning (line 43 of "$AFP/Refine_Imperative_HOL/Lib/User_Smashing.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 34 of "$AFP/Refine_Imperative_HOL/Lib/User_Smashing.thy"):
### Pattern is not exhaustive.
### ML warning (line 35 of "$AFP/Refine_Imperative_HOL/Lib/User_Smashing.thy"):
### Pattern is not exhaustive.
val smash_pair = fn: Proof.context -> thm -> term * term -> thm
val smash = fn: Proof.context -> thm -> thm
val smashed_attrib = fn: Proof.context -> thm -> 'a option * thm option
val smash_new_rule = fn: Proof.context -> thm -> thm Seq.seq
### theory "Draft.User_Smashing"
### 0.032s elapsed time, 0.125s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
val cp_clarify_step_tac = fn: Proof.context -> int -> tactic
val cp_clarify_tac = fn: Proof.context -> int -> tactic
val cp_clarsimp_tac = fn: Proof.context -> int -> tactic
### theory "Draft.Concl_Pres_Clarification"
### 0.059s elapsed time, 0.256s cpu time, 0.000s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
signature NAMED_THEOREMS_REV =
  sig
    val add: string -> attribute
    val add_thm: string -> thm -> Context.generic -> Context.generic
    val check: Proof.context -> string * Position.T -> string
    val declare: binding -> string -> local_theory -> string * local_theory
    val del: string -> attribute
    val del_thm: string -> thm -> Context.generic -> Context.generic
    val get: Proof.context -> string -> thm list
    val member: Proof.context -> string -> thm -> bool
  end
structure Named_Theorems_Rev: NAMED_THEOREMS_REV
### theory "Draft.Named_Theorems_Rev"
### 0.082s elapsed time, 0.363s cpu time, 0.000s GC time
Loading theory "Draft.PO_Normalizer" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic" via "Draft.Sepref_Misc")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
signature STRUCTURED_APPLY =
  sig
    val apply1:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val applyT:
       Method.text * Position.range ->
         Proof.state -> Proof.state Seq.result Seq.seq
    val apply_focus:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val apply_solve:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val focus: Proof.state -> Proof.state
    val solved: Proof.state -> Proof.state
    val unfocus: Proof.state -> Proof.state
  end
structure Structured_Apply: STRUCTURED_APPLY
### theory "Draft.Structured_Apply"
### 0.104s elapsed time, 0.425s cpu time, 0.024s GC time
Loading theory "Draft.Sepref_Id_Op" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### ML warning (line 63 of "$AFP/Refine_Imperative_HOL/Lib/PO_Normalizer.ML"):
### Pattern is not exhaustive.
### ML warning (line 77 of "$AFP/Refine_Imperative_HOL/Lib/PO_Normalizer.ML"):
### Pattern is not exhaustive.
signature PO_NORMALIZER =
  sig
    val gen_norm_rule: thm list -> norm_set -> Proof.context -> thm -> thm
    val gen_norm_tac: norm_set -> Proof.context -> tactic'
    type norm_set =
       {cong_rules: thm list,
        norm_rules: thm list, refl_rules: thm list, trans_rules: thm list}
  end
structure PO_Normalizer: PO_NORMALIZER
### theory "Draft.PO_Normalizer"
### 0.073s elapsed time, 0.261s cpu time, 0.024s GC time
Loading theory "Draft.Pf_Add" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Foreach")
### theory "HOL-Library.Function_Algebras"
### 0.135s elapsed time, 0.540s cpu time, 0.024s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
infix 0 THEN_ELSE_COMB'
signature ID_OP_TACTICAL =
  sig
    val DF_SOLVE_FWD: bool -> tactic' -> tactic'
    val SOLVE_FWD: tactic' -> tactic'
  end
structure Id_Op_Tactical: ID_OP_TACTICAL
### theory "Draft.Pf_Add"
### 0.228s elapsed time, 0.882s cpu time, 0.108s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.231s elapsed time, 0.897s cpu time, 0.108s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
structure Id_Op:
  sig
    val add_id_rule: thm -> Proof.context -> Proof.context
    val cfg_id_debug: bool Config.T
    val cfg_id_trace_fallback: bool Config.T
    val dest_id_rl: thm -> term * typ
    val do_unprotect_tac: Proof.context -> int -> tactic
    val id_a_conv: conv -> cterm -> thm
    val id_tac: id_tac_mode -> Proof.context -> int -> tactic
    datatype id_tac_mode = Init | Normal | Solve | Step
    val protect: typ list -> term -> term
    val protect_conv: Proof.context -> conv
    val unprotect_conv: Proof.context -> conv
  end
### theory "Draft.Sepref_Id_Op"
### 0.589s elapsed time, 2.309s cpu time, 0.184s GC time
Loading theory "Draft.Pf_Mono_Prover" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
structure Pf_Mono_Prover:
  sig val mono_tac: Proof.context -> int -> tactic end
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "Draft.Pf_Mono_Prover"
### 0.060s elapsed time, 0.214s cpu time, 0.074s GC time
Loading theory "Draft.Sepref_Misc" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic")
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  left :: "'a tree => 'a tree"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
consts
  right :: "'a tree => 'a tree"
### theory "HOL-Library.Stream"
### 0.903s elapsed time, 3.485s cpu time, 0.366s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.015s elapsed time, 3.566s cpu time, 0.852s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Sepref_Misc"
### 1.060s elapsed time, 3.047s cpu time, 0.774s GC time
Loading theory "Draft.Sepref_Basic" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify")
Loading theory "Draft.Term_Synth" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Definition")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature TERM_SYNTH =
  sig val synth_term: thm list -> Proof.context -> term -> term end
structure Term_Synth: TERM_SYNTH
### theory "Draft.Term_Synth"
### 0.147s elapsed time, 0.441s cpu time, 0.000s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.026s elapsed time, 5.862s cpu time, 1.047s GC time
Loading theory "Draft.Templates" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.081s elapsed time, 0.209s cpu time, 0.082s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.IICF_Impl_HeapmapTemplates")
### Ignoring duplicate rewrite rule:
### hn_refine ?\<Gamma>1 ?c1 ?\<Gamma>'1 ?R1 FAIL == True
signature SEPREF_BASIC =
  sig
    val PHASES': phase list -> phases_ctrl -> Proof.context -> tactic'
    val apply_under_lambda:
       (Proof.context -> term -> term) -> Proof.context -> term -> term
    val constrain_type_pre: typ -> term -> term
    val dbg_phases_ctrl: phases_ctrl
    val dest_hn_ctxt: term -> term * term * term
    val dest_hn_ctxt_opt: term -> (term * term * term) option
    val dest_hn_refine: term -> term * term * term * term * term
    val dest_hnr_absfun: term -> bool * (term * term list)
    val dest_lambda_rc:
       Proof.context -> term -> (term * (term -> term)) * Proof.context
    val dest_nresT: typ -> typ
    val dflt_phases_ctrl: phases_ctrl
    val flag_phases_ctrl: bool -> phases_ctrl
    val hn_refine_concl_conv_a:
       (Proof.context -> conv) -> Proof.context -> conv
    val hn_refine_conv: conv -> conv -> conv -> conv -> conv -> conv
    val hn_refine_conv_a: conv -> conv
    val is_hn_ctxt: term -> bool
    val is_hn_refine_concl: term -> bool
    val is_nresT: typ -> bool
    val is_true: term -> bool
    val list_star: term list -> term
    val mk_cequals: cterm * cterm -> cterm
    val mk_compN_pre: int -> term -> term -> term
    val mk_curry0_pre: term -> term
    val mk_curryN_pre: int -> term -> term
    val mk_curry_pre: term -> term
    val mk_entails: term * term -> term
    val mk_hn_refine: term * term * term * term * term -> term
    val mk_hnr_absfun: bool * (term * term list) -> term
    val mk_hnr_absfun': term * term list -> term
    val mk_nresT: typ -> typ
    val mk_pair_in_pre: term -> term -> term -> term
    val mk_star: term * term -> term
    val mk_uncurry0_pre: term -> term
    val mk_uncurryN_pre: int -> term -> term
    val mk_uncurry_pre: term -> term
    type phase = string * (Proof.context -> tactic') * int
    type phases_ctrl =
       {int_res: bool,
        start: string option, stop: string option, trace: bool}
    val star_permute_tac: Proof.context -> tactic
    val strip_star: term -> term list
  end
signature SEPREF_DEBUGGING =
  sig
    val DBG_CONVERSION: bool Config.T -> Proof.context -> conv -> tactic'
    val DBG_CONVERSION': Proof.context -> conv -> tactic'
    val cfg_debug_all: bool Config.T
    val dbg_msg_tac:
       bool Config.T ->
         (Proof.context -> int -> thm -> string) -> Proof.context -> tactic'
    val dbg_msg_tac':
       (Proof.context -> int -> thm -> string) -> Proof.context -> tactic'
    val dbg_trace_msg: bool Config.T -> Proof.context -> string -> unit
    val dbg_trace_msg': Proof.context -> string -> unit
    val error_tac': string -> Proof.context -> tactic'
    val is_debug: bool Config.T -> Proof.context -> bool
    val is_debug': Proof.context -> bool
    val msg_allgoals: string -> Proof.context -> int -> thm -> string
    val msg_from_subgoal:
       string ->
         (term -> Proof.context -> string) ->
           Proof.context -> int -> thm -> string
    val msg_subgoal: string -> Proof.context -> int -> thm -> string
    val msg_text: string -> Proof.context -> int -> thm -> string
    val tracing_tac': string -> Proof.context -> tactic'
    val warning_tac': string -> Proof.context -> tactic'
  end
structure Sepref_Basic: SEPREF_BASIC
structure Sepref_Debugging: SEPREF_DEBUGGING
infix 1 THEN_NEXT
infix 1 THEN_ALL_NEW_LIST
infix 1 THEN_ALL_NEW_LIST'
signature STACTICAL =
  sig
    val APPLY_LIST: tactic' list -> tactic'
    val THEN_ALL_NEW_LIST: tactic' * tactic' list -> tactic'
    val THEN_ALL_NEW_LIST': tactic' * (tactic' list * tactic') -> tactic'
    val THEN_NEXT: tactic' * tactic' -> tactic'
  end
structure STactical: STACTICAL
val THEN_ALL_NEW_LIST = fn: tactic' * tactic' list -> tactic'
val APPLY_LIST = fn: tactic' list -> tactic'
val THEN_NEXT = fn: tactic' * tactic' -> tactic'
val THEN_ALL_NEW_LIST' = fn: tactic' * (tactic' list * tactic') -> tactic'
### theory "Draft.Sepref_Basic"
### 1.277s elapsed time, 3.055s cpu time, 0.878s GC time
Loading theory "Draft.Sepref_Constraints" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
Loading theory "Draft.Sepref_Monadify" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.787s elapsed time, 2.013s cpu time, 0.673s GC time
### ML warning (line 153 of "$AFP/Refine_Imperative_HOL/Sepref_Monadify.thy"):
### (aconv) has infix status but was not preceded by op.
### ML warning (line 188 of "$AFP/Refine_Imperative_HOL/Sepref_Monadify.thy"):
### (aconv) has infix status but was not preceded by op.
structure Sepref_Monadify:
  sig
    val arity_tac: Proof.context -> int -> tactic
    val comb_tac: Proof.context -> int -> tactic
    val contains_eval: term -> bool
    val dup_tac: Proof.context -> int -> tactic
    val mark_params_conv: Proof.context -> conv
    val mark_params_tac: Proof.context -> int -> tactic
    val monadify_simproc: simproc
    val monadify_tac: bool -> Proof.context -> tactic'
    val remove_pass_tac: Proof.context -> int -> tactic
  end
signature SEPREF_CONSTRAINTS =
  sig
    val ON_SLOT: tactic -> tactic
    val WITH_SLOT: tactic' -> tactic
    val add_constraint_rule: thm -> Context.generic -> Context.generic
    val add_safe_constraint_rule: thm -> Context.generic -> Context.generic
    val cond_focus: (term -> bool) -> tactic
    val constraint_tac: Proof.context -> tactic'
    val create_slot_tac: tactic
    val del_constraint_rule: thm -> Context.generic -> Context.generic
    val del_safe_constraint_rule: thm -> Context.generic -> Context.generic
    val dest_slot_tac: tactic'
    val ensure_slot_tac: tactic
    val focus: tactic
    val get_constraint_rules: Proof.context -> thm list
    val get_safe_constraint_rules: Proof.context -> thm list
    val has_slot: thm -> bool
    val is_constraint_goal: term -> bool
    val is_constraint_tac: tactic'
    val prefer_slot_tac: tactic
    val print_slot_tac: Proof.context -> tactic
    val process_constraint_slot: Proof.context -> tactic
    val remove_slot_tac: tactic
    val safe_constraint'_tac: Proof.context -> tactic'
    val safe_constraint_tac: Proof.context -> tactic'
    val setup: theory -> theory
    val slot_constraint_tac: int -> tactic
    val solve_constraint'_tac: Proof.context -> tactic'
    val solve_constraint_slot: Proof.context -> tactic
    val solve_constraint_tac: Proof.context -> tactic'
    val some_to_slot_tac: (term -> bool) -> tactic
    val to_slot_tac: tactic'
    val unfocus: tactic
    val unfocus_ins: tactic
  end
structure Sepref_Constraints: SEPREF_CONSTRAINTS
### theory "Draft.Sepref_Constraints"
### 0.359s elapsed time, 0.911s cpu time, 0.058s GC time
Loading theory "Draft.Sepref_Frame" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
Loading theory "Draft.Sepref_Rules" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
### theory "Draft.Sepref_Monadify"
### 0.416s elapsed time, 1.077s cpu time, 0.058s GC time
consts
  hf_pres ::
    "('a => 'b => assn) => bool => ('a => 'b => assn) * ('a => 'b => assn)"
signature SEPREF_FRAME =
  sig
    val add_normrel_eq: thm -> Context.generic -> Context.generic
    val align_goal_tac: Proof.context -> tactic'
    val align_rl_conv: Proof.context -> conv
    val cfg_debug: bool Config.T
    val del_normrel_eq: thm -> Context.generic -> Context.generic
    val frame_step_tac:
       (Proof.context -> tactic') -> bool -> Proof.context -> tactic'
    val frame_tac: (Proof.context -> tactic') -> Proof.context -> tactic'
    val get_normrel_eqs: Proof.context -> thm list
    val is_merge: term -> bool
    val merge_tac: (Proof.context -> tactic') -> Proof.context -> tactic'
    val norm_goal_pre_tac: Proof.context -> tactic'
    val prepare_frame_tac: Proof.context -> tactic'
    val recover_pure_tac: Proof.context -> tactic'
    val setup: theory -> theory
    val weaken_post_tac: Proof.context -> tactic'
  end
structure Sepref_Frame: SEPREF_FRAME
### theory "Draft.Sepref_Frame"
### 0.499s elapsed time, 1.081s cpu time, 0.097s GC time
signature SEPREF_RULES =
  sig
    val add_pure_constraints_rule: Proof.context -> thm -> thm
    val analyze_hnr: Proof.context -> thm -> hnr_analysis
    val analyze_rel: term -> term option * term list * term
    val binder_rels: term -> term list
    val body_rel: term -> term
    val ensure_fref: Proof.context -> thm -> thm
    val ensure_fref_nres: Proof.context -> thm -> thm
    val ensure_hfref: Proof.context -> thm -> thm
    val ensure_hnr: Proof.context -> thm -> thm
    val fcomp_attrib: attribute context_parser
    val gen_compose: Proof.context -> thm -> thm -> thm
    type hnr_analysis =
       {ahead: term * bool,
        argrels: (term * bool) list,
        chead: term * bool,
        precond: term, prems: term list, result_rel: term, thm: thm}
    val intf_of_assn: Proof.context -> term -> typ
    val mk_hfprod: term * term -> term
    val mk_hfprods: term list -> term
    val mk_hfref_thm: Proof.context -> hnr_analysis -> thm
    val mk_rel: term option * term list * term -> term
    val mk_triv_precond: term list -> term
    val norm_fcomp_rule: Proof.context -> thm -> thm
    val prepare_hfref_synth_tac: Proof.context -> tactic'
    val pretty_hnr_analysis: Proof.context -> hnr_analysis -> Pretty.T
    val simplify_precond: Proof.context -> thm -> thm
    val strip_rel: term -> term list * term
    val to_foparam: Proof.context -> thm -> thm
    val to_fref: Proof.context -> thm -> thm
    val to_hfref: Proof.context -> thm -> thm
    val to_hnr: Proof.context -> thm -> thm
  end
structure Sepref_Rules: SEPREF_RULES
### theory "Draft.Sepref_Rules"
### 1.766s elapsed time, 2.347s cpu time, 0.131s GC time
Loading theory "Draft.Sepref_Combinator_Setup" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
Loading theory "Draft.Sepref_Definition" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool")
### ML warning (line 62 of "$AFP/Refine_Imperative_HOL/Sepref_Combinator_Setup.thy"):
### (=) has infix status but was not preceded by op.
signature SEPREF_INTF_TYPES =
  sig
    val check_intf_type: Proof.context -> typ -> typ -> bool
    val check_intf_type_err: Proof.context -> typ -> typ -> unit
    val check_intf_type_msg:
       (typ * typ -> unit) -> Proof.context -> typ -> typ -> unit
    val decl_intf_type_cmd:
       ((string list * binding) * mixfix) * string ->
         local_theory -> local_theory
    val norm_intf_type: Proof.context -> typ -> typ
    val register_itype_rewrite: typ -> typ -> Proof.context -> local_theory
  end
structure Sepref_Intf_Types: SEPREF_INTF_TYPES
structure Sepref_Extraction:
  sig
    val heap_extraction: Refine_Automation.extraction
    val setup: theory -> theory
  end
"starts_with"
  :: "'a"
structure Sepref_Definition:
  sig
    val cfg_prep_code: bool Config.T
    val make_hnr_goal:
       term -> Proof.context -> (cterm * term) * Proof.context
    val mk_synth_term: Proof.context -> string -> string -> term
    val sd_cmd:
       (((('a Config.T * 'a) list * binding) * Token.src list) * string) *
       string
         -> Proof.context -> Proof.state
    val sd_parser:
       Token.T list ->
         (((((bool Config.T * bool) list * binding) * Token.src list) *
           string)
          *
          string)
         *
         Token.T list
    val st_cmd: (binding * string) * string -> Proof.context -> Proof.state
    val st_parser:
       Token.T list -> ((binding * string) * string) * Token.T list
  end
### theory "Draft.Sepref_Definition"
### 0.429s elapsed time, 0.858s cpu time, 0.021s GC time
### ML warning (line 347 of "$AFP/Refine_Imperative_HOL/Sepref_Combinator_Setup.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 349 of "$AFP/Refine_Imperative_HOL/Sepref_Combinator_Setup.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 436 of "$AFP/Refine_Imperative_HOL/Sepref_Combinator_Setup.thy"):
### Pattern is not exhaustive.
structure Sepref_Combinator_Setup:
  sig
    val analyze_decl: term -> term -> opkind * (typ list * typ)
    val analyze_itype_thm: thm -> term * opkind * (typ list * typ)
    val check_type_intf: Proof.context -> typ -> typ -> bool
    val cr_reg_thms:
       term ->
         typ ->
           Proof.context ->
             {arity_thm: thm option, itype_thm: thm, mcomb_thm: thm option}
    val gen_pr_const_pat: Proof.context -> term -> thm option * term
    val generate_basename: Proof.context -> term -> string
    val get_nt_rule: thm -> typ * typ
    val import_terms_disj:
       term list -> Proof.context -> term list * Proof.context
    val is_valid_abs_op: Proof.context -> term -> bool
    val map_type: Proof.context -> typ -> typ
    val map_type_raw: Proof.context -> (typ * typ) list -> typ -> typ
    val mk_arity: Proof.context -> term -> int -> thm
    val mk_itype: Proof.context -> term -> term -> thm
    val mk_mcomb: Proof.context -> term -> int -> thm
    datatype opkind = COMB | PURE
    val read_term_type:
       string ->
         string option -> Proof.context -> (term * typ) * Proof.context
    type reg_thms =
       {arity_thm: thm option, itype_thm: thm, mcomb_thm: thm option}
    val sepref_register_adhoc:
       (term * typ option) list -> Context.generic -> Context.generic
    val sepref_register_adhoc_attr: (term * typ option) list -> attribute
    val sepref_register_adhoc_attr_decl:
       Context.generic * Token.T list ->
         attribute * (Context.generic * Token.T list)
    val sepref_register_adhoc_parser:
       Context.generic * Token.T list ->
         (term * typ option) list * (Context.generic * Token.T list)
    val sepref_register_adhoc_single:
       term * typ option -> Context.generic -> Context.generic
    val sepref_register_cmd:
       ((string option * string) * string option) list ->
         Proof.context -> Proof.context
    val sepref_register_parser:
       Token.T list ->
         ((string option * string) * string option) list * Token.T list
    val sepref_register_single:
       string ->
         term ->
           typ ->
             Proof.context ->
               ((thm option * thm option) * thm) * local_theory
    val sepref_register_single_cmd:
       (string option * string) * string option ->
         Proof.context -> local_theory
  end
### theory "Draft.Sepref_Combinator_Setup"
### 0.520s elapsed time, 0.977s cpu time, 0.064s GC time
Loading theory "Draft.Sepref_Translate" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool")
structure Sepref_Translate:
  sig
    val cfg_debug: bool Config.T
    val check_side_conds: thm -> unit list
    val dbg_msg_tac:
       (Proof.context -> int -> thm -> string) -> Proof.context -> tactic'
    val gen_msg_analyze: term -> Proof.context -> string
    val gen_trans_op_tac: bool -> Proof.context -> tactic'
    val gen_trans_step_tac: bool -> Proof.context -> tactic'
    val gen_trans_tac: bool -> Proof.context -> tactic'
    val msg_analyze: string -> Proof.context -> int -> thm -> string
    structure sepref_comb_rules: NAMED_SORTED_THMS
    structure sepref_fr_rules: NAMED_SORTED_THMS
    val setup: theory -> theory
    val side_cond_dispatch_tac:
       bool -> (int -> tactic) -> Proof.context -> tactic'
    val side_constraint_tac: Proof.context -> tactic'
    val side_fallback_tac: Proof.context -> int -> tactic
    val side_frame_tac: Proof.context -> tactic'
    val side_gen_algo_tac: Proof.context -> int -> tactic
    val side_merge_tac: Proof.context -> tactic'
    val side_mono_tac: Proof.context -> int -> tactic
    val side_pref_def_tac: Proof.context -> int -> tactic
    val side_rprem_tac: Proof.context -> int -> tactic
    val side_unfold_tac: Proof.context -> int -> tactic
    val trans_comb_tac: Proof.context -> int -> tactic
    val trans_keep_tac: Proof.context -> tactic'
    val trans_step_keep_tac: Proof.context -> tactic'
    val trans_step_tac: Proof.context -> tactic'
    val trans_tac: Proof.context -> tactic'
  end
"PR_CONST (op_ASSERT_bind I)"
  :: "'a nres => 'a nres"
structure Sepref_Import_Param:
  sig
    val add_PR_CONST: thm -> thm
    val import: Proof.context -> thm -> thm
    val import_attr:
       Context.generic * Token.T list ->
         attribute * (Context.generic * Token.T list)
    val import_attr_rl:
       Context.generic * Token.T list ->
         attribute * (Context.generic * Token.T list)
    val setup: theory -> theory
    val to_import_fo: Proof.context -> thm -> thm
  end
### theory "Draft.Sepref_Translate"
### 0.910s elapsed time, 0.935s cpu time, 0.038s GC time
Loading theory "Draft.Sepref_Intf_Util" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool")
### ML warning (line 926 of "$AFP/Refine_Imperative_HOL/Sepref_Intf_Util.thy"):
### Value identifier (unfold_PR_CONST_tac) has not been referenced.
signature SEPREF_INTF_UTIL =
  sig
    val cfg_def: bool Config.T
    val cfg_ismop: bool Config.T
    val cfg_mop: bool Config.T
    val cfg_rawgoals: bool Config.T
    val cleanup_constraints: Proof.context -> thm -> thm
    val get_intf_of_rel: Proof.context -> term -> typ
    val list_filtered_subterms: (term -> 'a option) -> term -> 'a list
    val simp_precond_tac: Proof.context -> tactic'
    val to_assns_rl: bool -> Proof.context -> thm -> thm
  end
structure Sepref_Intf_Util: SEPREF_INTF_UTIL
### theory "Draft.Sepref_Intf_Util"
### 1.210s elapsed time, 1.265s cpu time, 0.085s GC time
Loading theory "Draft.Sepref_Tool" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref")
structure Sepref:
  sig
    val cons_init_tac: Proof.context -> int -> tactic
    val cons_solve_tac: bool -> Proof.context -> int -> tactic
    val id_init_tac: Proof.context -> int -> tactic
    val id_solve_tac: Proof.context -> int -> tactic
    val id_step_tac: Proof.context -> int -> tactic
    val id_tac: Proof.context -> int -> tactic
    val monadify_tac: bool -> Proof.context -> tactic'
    val opt_tac: Proof.context -> int -> tactic
    val preproc_tac: Proof.context -> int -> tactic
    structure sepref_opt_simps: NAMED_THMS
    structure sepref_opt_simps2: NAMED_THMS
    structure sepref_preproc_simps: NAMED_THMS
    val sepref_tac: bool -> Proof.context -> int -> tactic
    val setup: theory -> theory
    val trans_tac: Proof.context -> tactic'
  end
val SIMPLE_METHOD_NOPARAM' = fn:
   ('a -> int -> tactic) -> 'b -> ('a -> Method.method) * 'b
val SIMPLE_METHOD_NOPARAM = fn:
   ('a -> tactic) -> 'b -> ('a -> Method.method) * 'b
COPY ::\<^sub>i TYPE(?'a => ?'a)
val prec_extract_eqs_tac = fn: Proof.context -> int -> tactic
val prep_comb_rule = fn: thm -> thm
### theory "Draft.Sepref_Tool"
### 0.388s elapsed time, 0.388s cpu time, 0.000s GC time
Loading theory "Draft.Sepref_HOL_Bindings" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref")
PR_CONST (ASSN_ANNOT A) ::\<^sub>i TYPE('a => 'a)
IS_ID ?R ==> IS_LEFT_TOTAL ?R
IS_ID ?R ==> IS_RIGHT_TOTAL ?R
IS_BELOW_ID ?R ==> IS_LEFT_UNIQUE ?R
IS_BELOW_ID ?R ==> single_valued ?R
IS_ID ?R ==> IS_BELOW_ID ?R
single_valued ?R ==> precise (pure ?R)
[| precise ?R; single_valued ?S |] ==> precise (hr_comp ?R ?S)
### Ignoring duplicate rewrite rule:
### b_rel (b_rel ?R1 ?P1.1) ?P2.1 == b_rel ?R1 (%x. ?P1.1 x & ?P2.1 x)
### Ignoring duplicate rewrite rule:
### b_assn (b_assn ?A1 ?P1.1) ?P2.1 == b_assn ?A1 (%x. ?P1.1 x & ?P2.1 x)
Found termination order: "{}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
Inr ::\<^sub>i TYPE(?'a => ?'b + ?'a)
Inl ::\<^sub>i TYPE(?'a => ?'a + ?'b)
case_sum ::\<^sub>i TYPE((?'a => ?'b) => (?'c => ?'b) => ?'a + ?'c => ?'b)
isl ::\<^sub>i TYPE(?'a + ?'b => bool)
projl ::\<^sub>i TYPE(?'a + ?'b => ?'a)
projr ::\<^sub>i TYPE(?'a + ?'b => ?'b)
PR_CONST STR '''' ::\<^sub>i TYPE(String.literal)
PR_CONST (String.Literal b0 b1 b2 b3 b4 b5 b6 s) ::\<^sub>i
TYPE(String.literal)
### theory "Draft.Sepref_HOL_Bindings"
### 1.548s elapsed time, 1.668s cpu time, 0.158s GC time
Loading theory "Draft.Sepref_Foreach" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref")
"FOREACH\<^sub>O\<^sub>C\<^bsup>R,I\<^esup>"
  :: "'a set => ('b => bool) => ('a => 'b => 'b nres) => 'b => 'b nres"
### Ambiguous input (line 233 of "$AFP/Refine_Imperative_HOL/Sepref_Foreach.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sepref_Id_Op.intf_type"
###     ("_applC" ("_position" PR_CONST)
###       ("_applC" ("_position" FOREACHoci)
###         ("_cargs" ("_position" R) ("_position" I))))
###     ("_TYPE"
###       ("\<^type>fun" ("_tapp" ("_position_sort" 'c) ("_type_name" set))
###         ("\<^type>fun"
###           ("\<^type>fun" ("_position_sort" 'd) ("_type_name" bool))
###           ("\<^type>fun"
###             ("\<^type>fun" ("_position_sort" 'c)
###               ("\<^type>fun" ("_position_sort" 'd)
###                 ("_tapp" ("_position_sort" 'd) ("_type_name" nres))))
###             ("\<^type>fun" ("_position_sort" 'd)
###               ("_tapp" ("_position_sort" 'd) ("_type_name" nres)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Autoref_Id_Ops.CONST_INTF"
###     ("_applC" ("_position" PR_CONST)
###       ("_applC" ("_position" FOREACHoci)
###         ("_cargs" ("_position" R) ("_position" I))))
###     ("_TYPE"
###       ("\<^type>fun" ("_tapp" ("_position_sort" 'c) ("_type_name" set))
###         ("\<^type>fun"
###           ("\<^type>fun" ("_position_sort" 'd) ("_type_name" bool))
###           ("\<^type>fun"
###             ("\<^type>fun" ("_position_sort" 'c)
###               ("\<^type>fun" ("_position_sort" 'd)
###                 ("_tapp" ("_position_sort" 'd) ("_type_name" nres))))
###             ("\<^type>fun" ("_position_sort" 'd)
###               ("_tapp" ("_position_sort" 'd) ("_type_name" nres)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Sepref_Foreach"
### 0.900s elapsed time, 1.007s cpu time, 0.154s GC time
Loading theory "Draft.Sepref_Improper" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref")
pho_apply ::\<^sub>i TYPE((?'a => ?'b) => ?'a => ?'b)
### theory "Draft.Sepref_Improper"
### 0.039s elapsed time, 0.041s cpu time, 0.000s GC time
Loading theory "Draft.Sepref" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap")
### theory "Draft.Sepref"
### 0.311s elapsed time, 0.311s cpu time, 0.000s GC time
Loading theory "Draft.IICF_List" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap")
Loading theory "Draft.IICF_Map" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Prio_Map")
Loading theory "Draft.IICF_Multiset" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.IICF_Prio_Bag")
### Ambiguous input (line 18 of "$AFP/Refine_Imperative_HOL/IICF/Intf/IICF_List.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" swap)
###     ("_cargs" ("_position" l) ("_cargs" ("_position" i) ("_position" j))))
###   ("_applC" ("_position" l)
###     ("_list"
###       ("_args"
###         ("\<^const>Ref.update" ("_position" i)
###           ("\<^const>List.nth" ("_position" l) ("_position" j)))
###         ("\<^const>Ref.update" ("_position" j)
###           ("\<^const>List.nth" ("_position" l) ("_position" i)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" swap)
###     ("_cargs" ("_position" l) ("_cargs" ("_position" i) ("_position" j))))
###   ("_LUpdate" ("_position" l)
###     ("_lupdbinds"
###       ("_lupdbind" ("_position" i)
###         ("\<^const>List.nth" ("_position" l) ("_position" j)))
###       ("_lupdbind" ("_position" j)
###         ("\<^const>List.nth" ("_position" l) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
op_list_empty ::\<^sub>i TYPE(?'a list)
op_mset_empty ::\<^sub>i TYPE(?'a multiset)
op_map_empty ::\<^sub>i TYPE((?'a, ?'b) i_map)
mop_list_empty ::\<^sub>i TYPE(?'a list nres)
mop_mset_empty ::\<^sub>i TYPE(?'a multiset nres)
mop_map_empty ::\<^sub>i TYPE((?'a, ?'b) i_map nres)
op_list_is_empty ::\<^sub>i TYPE(?'a list => bool)
op_mset_is_empty ::\<^sub>i TYPE(?'a multiset => bool)
op_map_is_empty ::\<^sub>i TYPE((?'a, ?'b) i_map => bool)
mop_list_is_empty ::\<^sub>i TYPE(?'a list => bool nres)
mop_mset_is_empty ::\<^sub>i TYPE(?'a multiset => bool nres)
mop_map_is_empty ::\<^sub>i TYPE((?'a, ?'b) i_map => bool nres)
op_list_replicate ::\<^sub>i TYPE(nat => ?'a => ?'a list)
op_mset_insert ::\<^sub>i TYPE(?'a => ?'a multiset => ?'a multiset)
mop_list_replicate ::\<^sub>i TYPE(nat => ?'a => ?'a list nres)
mop_mset_insert ::\<^sub>i TYPE(?'a => ?'a multiset => ?'a multiset nres)
op_map_update ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) i_map => (?'a, ?'b) i_map)
mop_map_update ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) i_map => (?'a, ?'b) i_map nres)
op_list_copy ::\<^sub>i TYPE(?'a list => ?'a list)
mop_list_copy ::\<^sub>i TYPE(?'a list => ?'a list nres)
op_mset_delete ::\<^sub>i TYPE(?'a => ?'a multiset => ?'a multiset)
mop_mset_delete ::\<^sub>i TYPE(?'a => ?'a multiset => ?'a multiset nres)
op_list_prepend ::\<^sub>i TYPE(?'a => ?'a list => ?'a list)
mop_list_prepend ::\<^sub>i TYPE(?'a => ?'a list => ?'a list nres)
op_list_append ::\<^sub>i TYPE(?'a list => ?'a => ?'a list)
op_mset_plus ::\<^sub>i TYPE(?'a multiset => ?'a multiset => ?'a multiset)
mop_list_append ::\<^sub>i TYPE(?'a list => ?'a => ?'a list nres)
op_map_delete ::\<^sub>i TYPE(?'a => (?'a, ?'b) i_map => (?'a, ?'b) i_map)
mop_mset_plus ::\<^sub>i
TYPE(?'a multiset => ?'a multiset => ?'a multiset nres)
mop_map_delete ::\<^sub>i
TYPE(?'a => (?'a, ?'b) i_map => (?'a, ?'b) i_map nres)
op_list_concat ::\<^sub>i TYPE(?'a list => ?'a list => ?'a list)
op_mset_minus ::\<^sub>i TYPE(?'a multiset => ?'a multiset => ?'a multiset)
mop_list_concat ::\<^sub>i TYPE(?'a list => ?'a list => ?'a list nres)
mop_mset_minus ::\<^sub>i
TYPE(?'a multiset => ?'a multiset => ?'a multiset nres)
op_list_length ::\<^sub>i TYPE(?'a list => nat)
mop_list_length ::\<^sub>i TYPE(?'a list => nat nres)
op_map_lookup ::\<^sub>i TYPE(?'a => (?'a, ?'b) i_map => ?'b option)
op_mset_contains ::\<^sub>i TYPE(?'a => ?'a multiset => bool)
mop_map_lookup ::\<^sub>i TYPE(?'a => (?'a, ?'b) i_map => ?'b option nres)
op_list_get ::\<^sub>i TYPE(?'a list => nat => ?'a)
mop_mset_contains ::\<^sub>i TYPE(?'a => ?'a multiset => bool nres)
mop_list_get ::\<^sub>i TYPE(?'a list => nat => ?'a nres)
op_map_contains_key ::\<^sub>i TYPE(?'a => (?'a, ?'b) i_map => bool)
op_mset_count ::\<^sub>i TYPE(?'a => ?'a multiset => nat)
mop_map_contains_key ::\<^sub>i TYPE(?'a => (?'a, ?'b) i_map => bool nres)
op_list_set ::\<^sub>i TYPE(?'a list => nat => ?'a => ?'a list)
mop_mset_count ::\<^sub>i TYPE(?'a => ?'a multiset => nat nres)
mop_list_set ::\<^sub>i TYPE(?'a list => nat => ?'a => ?'a list nres)
op_mset_pick ::\<^sub>i TYPE(?'a multiset => (?'a * ?'a multiset) nres)
mop_mset_pick ::\<^sub>i TYPE(?'a multiset => (?'a * ?'a multiset) nres)
op_list_hd ::\<^sub>i TYPE(?'a list => ?'a)
mop_list_hd ::\<^sub>i TYPE(?'a list => ?'a nres)
locale map_custom_empty
  fixes op_custom_empty :: "'k => 'v option"
  assumes "map_custom_empty op_custom_empty"
op_custom_empty ::\<^sub>i TYPE((?'a, ?'b) i_map)
### theory "Draft.IICF_Map"
### 0.835s elapsed time, 2.755s cpu time, 1.369s GC time
Loading theory "Draft.IICF_Prio_Map" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap")
op_list_tl ::\<^sub>i TYPE(?'a list => ?'a list)
mop_list_tl ::\<^sub>i TYPE(?'a list => ?'a list nres)
op_list_last ::\<^sub>i TYPE(?'a list => ?'a)
mop_list_last ::\<^sub>i TYPE(?'a list => ?'a nres)
locale mset_custom_empty
  fixes rel :: "'a multiset => 'b => assn"
    and empty :: "'b Heap"
    and op_custom_empty :: "'a multiset"
  assumes "mset_custom_empty rel empty op_custom_empty"
op_custom_empty ::\<^sub>i TYPE(?'c multiset)
op_list_butlast ::\<^sub>i TYPE(?'a list => ?'a list)
op_map_update_new ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) i_map => (?'a, ?'b) i_map)
### theory "Draft.IICF_Multiset"
### 0.943s elapsed time, 3.090s cpu time, 1.459s GC time
Loading theory "Draft.IICF_Prio_Bag" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap")
mop_list_butlast ::\<^sub>i TYPE(?'a list => ?'a list nres)
mop_map_update_new ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) i_map => (?'a, ?'b) i_map nres)
op_list_contains ::\<^sub>i TYPE(?'a => ?'a list => bool)
mop_list_contains ::\<^sub>i TYPE(?'a => ?'a list => bool nres)
PR_CONST (mop_prio_pop_min prio) ::\<^sub>i
TYPE('a multiset => ('a * 'a multiset) nres)
op_list_swap ::\<^sub>i TYPE(?'a list => nat => nat => ?'a list)
mop_list_swap ::\<^sub>i TYPE(?'a list => nat => nat => ?'a list nres)
PR_CONST (mop_prio_peek_min prio) ::\<^sub>i TYPE('a multiset => 'a nres)
op_map_update_ex ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) i_map => (?'a, ?'b) i_map)
mop_map_update_ex ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) i_map => (?'a, ?'b) i_map nres)
### theory "Draft.IICF_Prio_Bag"
### 0.128s elapsed time, 0.384s cpu time, 0.000s GC time
op_list_rotate1 ::\<^sub>i TYPE(?'a list => ?'a list)
mop_list_rotate1 ::\<^sub>i TYPE(?'a list => ?'a list nres)
op_list_rev ::\<^sub>i TYPE(?'a list => ?'a list)
op_map_delete_ex ::\<^sub>i
TYPE(?'a => (?'a, ?'b) i_map => (?'a, ?'b) i_map)
mop_list_rev ::\<^sub>i TYPE(?'a list => ?'a list nres)
mop_map_delete_ex ::\<^sub>i
TYPE(?'a => (?'a, ?'b) i_map => (?'a, ?'b) i_map nres)
op_list_index ::\<^sub>i TYPE(?'a list => ?'a => nat)
mop_list_index ::\<^sub>i TYPE(?'a list => ?'a => nat nres)
op_pm_decrease_key ::\<^sub>i
TYPE(?'a => 'v => (?'a, 'v) i_map => (?'a, 'v) i_map)
IICF_Prio_Map.mop_pm_decrease_key $ prio ==
UNPROTECT local.mop_pm_decrease_key
PR_CONST local.mop_pm_decrease_key ::\<^sub>i
TYPE(?'a2 => 'v => (?'a2, 'v) i_map => (?'a2, 'v) i_map nres)
locale list_custom_empty
  fixes rel :: "'a list => 'b => assn"
    and empty :: "'b Heap"
    and op_custom_empty :: "'a list"
  assumes "list_custom_empty rel empty op_custom_empty"
op_custom_empty ::\<^sub>i TYPE(?'c list)
### theory "Draft.IICF_List"
### 1.286s elapsed time, 3.937s cpu time, 1.543s GC time
Loading theory "Draft.IICF_Array" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Indexed_Array_List")
Loading theory "Draft.IICF_MS_Array_List" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Indexed_Array_List")
Loading theory "Draft.IICF_Abs_Heap" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap" via "Draft.IICF_Abs_Heapmap")
### Cannot skip proof of schematic goal statement
(uncurry0 heap_array_empty, uncurry0 (RETURN op_list_empty))
: unit_assn\<^sup>k \<rightarrow>\<^sub>a array_assn ?A
(uncurry0 heap_array_empty, uncurry0 mop_list_empty)
: unit_assn\<^sup>k \<rightarrow>\<^sub>a array_assn ?A
### Cannot skip proof of schematic goal statement
CONSTRAINT is_pure ?A ==>
(uncurry Array.new, uncurry (RETURN \<circ>\<circ> op_list_replicate))
: nat_assn\<^sup>k *\<^sub>a ?A\<^sup>k \<rightarrow>\<^sub>a array_assn ?A
CONSTRAINT is_pure ?A ==>
(uncurry Array.new, uncurry mop_list_replicate)
: nat_assn\<^sup>k *\<^sub>a ?A\<^sup>k \<rightarrow>\<^sub>a array_assn ?A
op_array_replicate ::\<^sub>i TYPE(nat => ?'a => ?'a list)
### Ambiguous input (line 96 of "$AFP/Refine_Imperative_HOL/IICF/Impl/IICF_MS_Array_List.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" i)
###       ("_applC" ("_position" length) ("_position" l))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Hoare_Triple.hoare_triple"
###       ("_applC" ("_position" is_ms_array_list)
###         ("_cargs" ("_position" N)
###           ("_cargs" ("_position" l) ("_position" a))))
###       ("_applC" ("_position" marl_set)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" i) ("_position" x))))
###       ("_applC" ("_position" is_ms_array_list)
###         ("_cargs" ("_position" N)
###           ("_LUpdate" ("_position" l)
###             ("_lupdbind" ("_position" i) ("_position" x))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" i)
###       ("_applC" ("_position" length) ("_position" l))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Hoare_Triple.hoare_triple"
###       ("_applC" ("_position" is_ms_array_list)
###         ("_cargs" ("_position" N)
###           ("_cargs" ("_position" l) ("_position" a))))
###       ("_applC" ("_position" marl_set)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" i) ("_position" x))))
###       ("_applC" ("_position" is_ms_array_list)
###         ("_cargs" ("_position" N)
###           ("_applC" ("_position" l)
###             ("_list"
###               ("\<^const>Ref.update" ("_position" i) ("_position" x)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Cannot skip proof of schematic goal statement
PR_CONST (op_marl_empty_sz N) ::\<^sub>i TYPE(?'a list)
CONSTRAINT is_pure ?A ==>
(Array.of_list, RETURN o op_list_copy)
: (list_assn ?A)\<^sup>k \<rightarrow>\<^sub>a array_assn ?A
CONSTRAINT is_pure ?A ==>
(Array.of_list, mop_list_copy)
: (list_assn ?A)\<^sup>k \<rightarrow>\<^sub>a array_assn ?A
op_pm_increase_key ::\<^sub>i
TYPE(?'a2 => 'v => (?'a2, 'v) i_map => (?'a2, 'v) i_map)
op_array_of_list ::\<^sub>i TYPE(?'a list => ?'a list)
IICF_Prio_Map.mop_pm_increase_key $ prio ==
UNPROTECT local.mop_pm_increase_key
PR_CONST local.mop_pm_increase_key ::\<^sub>i
TYPE(?'a4 => 'v => (?'a4, 'v) i_map => (?'a4, 'v) i_map nres)
locale heapstruct
  fixes prio :: "'a => 'b"
### Cannot skip proof of schematic goal statement
(array_copy, RETURN o op_list_copy)
: (array_assn ?A)\<^sup>k \<rightarrow>\<^sub>a array_assn ?A
(array_copy, mop_list_copy)
: (array_assn ?A)\<^sup>k \<rightarrow>\<^sub>a array_assn ?A
### Cannot skip proof of schematic goal statement
CONSTRAINT is_pure ?A ==>
(uncurry Array.nth, uncurry (RETURN \<circ>\<circ> op_list_get))
: [pre_list_get]\<^sub>a (array_assn ?A)\<^sup>k *\<^sub>a
                         nat_assn\<^sup>k \<rightarrow> ?A
CONSTRAINT is_pure ?A ==>
(uncurry Array.nth, uncurry mop_list_get)
: (array_assn ?A)\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a ?A
### Cannot skip proof of schematic goal statement
CONSTRAINT is_pure ?A ==>
(uncurry2 heap_array_set,
 uncurry2 (RETURN \<circ>\<circ>\<circ> op_list_set))
: [pre_list_set]\<^sub>a (array_assn ?A)\<^sup>d *\<^sub>a
                         nat_assn\<^sup>k *\<^sub>a
                         ?A\<^sup>k \<rightarrow> array_assn ?A
IICF_Prio_Map.op_pm_peek_min $ prio == UNPROTECT local.op_pm_peek_min
PR_CONST local.op_pm_peek_min ::\<^sub>i
TYPE((?'a5, 'v) i_map => (?'a5 * 'v) nres)
IICF_Prio_Map.mop_pm_peek_min $ prio == UNPROTECT local.mop_pm_peek_min
### Ambiguous input (line 189 of "$AFP/Refine_Imperative_HOL/IICF/Impl/Heaps/IICF_Abs_Heap.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" update)
###     ("_cargs" ("_position" h) ("_cargs" ("_position" i) ("_position" v))))
###   ("_LUpdate" ("_position" h)
###     ("_lupdbind"
###       ("\<^const>Groups.minus_class.minus" ("_position" i)
###         ("\<^const>Groups.one_class.one"))
###       ("_position" v))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" update)
###     ("_cargs" ("_position" h) ("_cargs" ("_position" i) ("_position" v))))
###   ("_applC" ("_position" h)
###     ("_list"
###       ("\<^const>Ref.update"
###         ("\<^const>Groups.minus_class.minus" ("_position" i)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" v)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
PR_CONST local.mop_pm_peek_min ::\<^sub>i
TYPE((?'a7, 'v) i_map => (?'a7 * 'v) nres)
CONSTRAINT is_pure ?A ==>
(uncurry2 heap_array_set, uncurry2 mop_list_set)
: (array_assn ?A)\<^sup>d *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  ?A\<^sup>k \<rightarrow>\<^sub>a array_assn ?A
### Cannot skip proof of schematic goal statement
(Array.len, RETURN o op_list_length)
: (array_assn ?A)\<^sup>k \<rightarrow>\<^sub>a nat_assn
(Array.len, mop_list_length)
: (array_assn ?A)\<^sup>k \<rightarrow>\<^sub>a nat_assn
### theory "Draft.IICF_Array"
### 0.434s elapsed time, 1.696s cpu time, 0.135s GC time
IICF_Prio_Map.op_pm_pop_min $ prio == UNPROTECT local.op_pm_pop_min
PR_CONST local.op_pm_pop_min ::\<^sub>i
TYPE((?'a8, 'v) i_map => ((?'a8 * 'v) * (?'a8, 'v) i_map) nres)
IICF_Prio_Map.mop_pm_pop_min $ prio == UNPROTECT local.mop_pm_pop_min
PR_CONST local.mop_pm_pop_min ::\<^sub>i
TYPE((?'a10, 'v) i_map => ((?'a10 * 'v) * (?'a10, 'v) i_map) nres)
### Cannot skip proof of schematic goal statement
### theory "Draft.IICF_Abs_Heap"
### 0.719s elapsed time, 2.565s cpu time, 0.194s GC time
### theory "Draft.IICF_Prio_Map"
### 1.192s elapsed time, 3.803s cpu time, 0.368s GC time
Loading theory "Draft.IICF_Abs_Heapmap" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap")
### Cannot skip proof of schematic goal statement
### theory "Draft.IICF_MS_Array_List"
### 0.784s elapsed time, 2.704s cpu time, 0.194s GC time
Loading theory "Draft.IICF_Indexed_Array_List" (required by "Draft.IICF_Impl_HeapmapTemplates" via "Draft.IICF_Impl_Heapmap")
locale ial_invar
  fixes maxsize :: "nat"
    and l :: "nat list"
    and qp :: "nat list"
  assumes "ial_invar maxsize l qp"
locale hmstruct
  fixes prio :: "'v => 'b"
### Ambiguous input (line 72 of "$AFP/Refine_Imperative_HOL/IICF/Impl/IICF_Indexed_Array_List.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ial_invar)
###     ("_cargs" ("_applC" ("_position" length) ("_position" qp))
###       ("_cargs"
###         ("_applC" ("_position" swap)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" i) ("_position" j))))
###         ("_applC" ("_position" qp)
###           ("_list"
###             ("_args"
###               ("\<^const>Ref.update"
###                 ("\<^const>List.nth" ("_position" l) ("_position" j))
###                 ("_position" i))
###               ("\<^const>Ref.update"
###                 ("\<^const>List.nth" ("_position" l) ("_position" i))
###                 ("_position" j)))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ial_invar)
###     ("_cargs" ("_applC" ("_position" length) ("_position" qp))
###       ("_cargs"
###         ("_applC" ("_position" swap)
###           ("_cargs" ("_position" l)
###             ("_cargs" ("_position" i) ("_position" j))))
###         ("_LUpdate" ("_position" qp)
###           ("_lupdbinds"
###             ("_lupdbind"
###               ("\<^const>List.nth" ("_position" l) ("_position" j))
###               ("_position" i))
###             ("_lupdbind"
###               ("\<^const>List.nth" ("_position" l) ("_position" i))
###               ("_position" j))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
PR_CONST (op_ial_empty_sz maxsize) ::\<^sub>i TYPE(?'a list)
### Cannot skip proof of schematic goal statement
ial_empty ==
marl_empty_sz maxsize >>=
(%x'. Array.new maxsize maxsize >>= (%x'b. return (x', x'b)))
(uncurry0 ial_empty, uncurry0 local.aial_empty)
: unit_assn\<^sup>k \<rightarrow>\<^sub>a ial_assn2 maxsize
### Cannot skip proof of schematic goal statement
(uncurry0 local.ial_empty, uncurry0 (RETURN op_list_empty))
: unit_assn\<^sup>k \<rightarrow>\<^sub>a ial_assn maxsize ?A
(uncurry0 local.ial_empty, uncurry0 mop_list_empty)
: unit_assn\<^sup>k \<rightarrow>\<^sub>a ial_assn maxsize ?A
### Cannot skip proof of schematic goal statement
### Ambiguous input (line 257 of "$AFP/Refine_Imperative_HOL/IICF/Impl/Heaps/IICF_Abs_Heapmap.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" hm_butlast_op)
###   ("_lambda" ("_pattern" ("_position" pq) ("_position" m))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("_position" ASSERT)
###             ("_applC" ("_position" hmr_invar)
###               ("_tuple" ("_position" pq) ("_tuple_arg" ("_position" m))))))
###         ("_do_cons"
###           ("_do_bind" ("_position" k)
###             ("_applC" ("_position" mop_list_get)
###               ("_cargs" ("_position" pq)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("_applC" ("_position" length) ("_position" pq))
###                   ("\<^const>Groups.one_class.one")))))
###           ("_do_cons"
###             ("_do_bind" ("_position" pq)
###               ("_applC" ("_position" mop_list_butlast) ("_position" pq)))
###             ("_do_cons"
###               ("_do_let" ("_position" m)
###                 ("_applC" ("_position" m)
###                   ("\<^const>Ref.update" ("_position" k)
###                     ("_position" None))))
###               ("_do_final"
###                 ("_applC" ("_position" RETURN)
###                   ("_tuple" ("_position" pq)
###                     ("_tuple_arg" ("_position" m))))))))))))
### ("\<^const>Pure.eq" ("_position" hm_butlast_op)
###   ("_lambda" ("_pattern" ("_position" pq) ("_position" m))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("_position" ASSERT)
###             ("_applC" ("_position" hmr_invar)
###               ("_tuple" ("_position" pq) ("_tuple_arg" ("_position" m))))))
###         ("_do_cons"
###           ("_do_bind" ("_position" k)
###             ("_applC" ("_position" mop_list_get)
###               ("_cargs" ("_position" pq)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("_applC" ("_position" length) ("_position" pq))
###                   ("\<^const>Groups.one_class.one")))))
###           ("_do_cons"
###             ("_do_bind" ("_position" pq)
###               ("_applC" ("_position" mop_list_butlast) ("_position" pq)))
###             ("_do_cons"
###               ("_do_let" ("_position" m)
###                 ("_Update" ("_position" m)
###                   ("_updbind" ("_position" k) ("_position" None))))
###               ("_do_final"
###                 ("_applC" ("_position" RETURN)
###                   ("_tuple" ("_position" pq)
###                     ("_tuple_arg" ("_position" m))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 277 of "$AFP/Refine_Imperative_HOL/IICF/Impl/Heaps/IICF_Abs_Heapmap.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Refine_Leof.le_or_fail"
###     ("_applC" ("_position" hm_butlast_op) ("_position" hm))
###     ("_applC" ("_position" SPEC)
###       ("_lambda" ("_position" hm')
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm'))
###           ("_Update"
###             ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm))
###             ("_updbind"
###               ("_applC" ("_position" hm_key_of)
###                 ("_cargs" ("_position" hm)
###                   ("_applC" ("_position" hm_length) ("_position" hm))))
###               ("_position" None))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Refine_Leof.le_or_fail"
###     ("_applC" ("_position" hm_butlast_op) ("_position" hm))
###     ("_applC" ("_position" SPEC)
###       ("_lambda" ("_position" hm')
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm'))
###           ("_applC"
###             ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm))
###             ("\<^const>Ref.update"
###               ("_applC" ("_position" hm_key_of)
###                 ("_cargs" ("_position" hm)
###                   ("_applC" ("_position" hm_length) ("_position" hm))))
###               ("_position" None))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
ial_swap ==
%ai bia bi.
   case ai of
   (a1, a2) =>
     marl_get a1 bia >>=
     (%x'. marl_get a1 bi >>=
           (%x'a. marl_set a1 bia x'a >>=
                  (%x'b. marl_set x'b bi x' >>=
                         (%x'c. heap_array_set a2 x'a bia >>=
                                (%x'd. heap_array_set x'd x' bi >>=
 (%x'e. return (x'c, x'e)))))))
(uncurry2 ial_swap, uncurry2 aial_swap)
: (ial_assn2 maxsize)\<^sup>d *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a ial_assn2 maxsize
### Cannot skip proof of schematic goal statement
(uncurry2 ial_swap, uncurry2 mop_list_swap)
: (ial_assn maxsize ?A)\<^sup>d *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a ial_assn maxsize ?A
(uncurry2 ial_swap, uncurry2 (RETURN \<circ>\<circ>\<circ> op_list_swap))
: [pre_list_swap]\<^sub>a (ial_assn maxsize ?A)\<^sup>d *\<^sub>a
                          nat_assn\<^sup>k *\<^sub>a
                          nat_assn\<^sup>k \<rightarrow> ial_assn maxsize ?A
### Cannot skip proof of schematic goal statement
ial_length == %xi. case xi of (a1, a2) => marl_length a1
(ial_length, aial_length)
: (ial_assn2 maxsize)\<^sup>k \<rightarrow>\<^sub>a nat_assn
### Cannot skip proof of schematic goal statement
(ial_length, mop_list_length)
: (ial_assn maxsize ?A)\<^sup>k \<rightarrow>\<^sub>a nat_assn
(ial_length, RETURN o op_list_length)
: [pre_list_length]\<^sub>a (ial_assn maxsize
                              ?A)\<^sup>k \<rightarrow> nat_assn
### Cannot skip proof of schematic goal statement
ial_index == %ai bi. case ai of (a1, a2) => Array.nth a2 bi
(uncurry ial_index, uncurry aial_index)
: (ial_assn2 maxsize)\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a nat_assn
### Cannot skip proof of schematic goal statement
[| CONSTRAINT (IS_PURE single_valued) ?A;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?A |]
==> (uncurry ial_index, uncurry mop_list_index)
    : [%(x, xa).
          xa : set x]\<^sub>a (ial_assn maxsize ?A)\<^sup>k *\<^sub>a
                              ?A\<^sup>k \<rightarrow> nat_assn
[| CONSTRAINT (IS_PURE single_valued) ?A;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?A |]
==> (uncurry ial_index, uncurry (RETURN \<circ>\<circ> op_list_index))
    : [%(x, xa).
          xa : set x]\<^sub>a (ial_assn maxsize ?A)\<^sup>k *\<^sub>a
                              ?A\<^sup>k \<rightarrow> nat_assn
### Cannot skip proof of schematic goal statement
ial_butlast ==
%xi. case xi of
     (a1, a2) =>
       marl_length a1 >>=
       (%x'. marl_get a1 (x' - 1) >>=
             (%x'a. marl_butlast a1 >>=
                    (%x'b. Array.len a2 >>=
                           (%x. heap_array_set a2 x'a x >>=
                                (%x'c. return (x'b, x'c))))))
(ial_butlast, aial_butlast)
: (ial_assn2 maxsize)\<^sup>d \<rightarrow>\<^sub>a ial_assn2 maxsize
### Cannot skip proof of schematic goal statement
(ial_butlast, mop_list_butlast)
: (ial_assn maxsize ?A)\<^sup>d \<rightarrow>\<^sub>a ial_assn maxsize ?A
(ial_butlast, RETURN o op_list_butlast)
: [pre_list_butlast]\<^sub>a (ial_assn maxsize
                               ?A)\<^sup>d \<rightarrow> ial_assn maxsize ?A
### Cannot skip proof of schematic goal statement
### Ambiguous input (line 940 of "$AFP/Refine_Imperative_HOL/IICF/Impl/Heaps/IICF_Abs_Heapmap.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Refine_Leof.le_or_fail"
###     ("_applC" ("_position" hm_pop_min_op) ("_position" hm))
###     ("_applC" ("_position" SPEC)
###       ("_lambda"
###         ("_pattern" ("_pattern" ("_position" k) ("_position" v))
###           ("_position" hm'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" heapmap_\<alpha>)
###               ("_cargs" ("_position" hm) ("_position" k)))
###             ("_applC" ("_position" Some) ("_position" v)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm'))
###               ("_applC"
###                 ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm))
###                 ("\<^const>Ref.update" ("_position" k) ("_position" None))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" k') ("_position" v'))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" heapmap_\<alpha>)
###                     ("_cargs" ("_position" hm) ("_position" k')))
###                   ("_applC" ("_position" Some) ("_position" v')))
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("_applC" ("_position" prio) ("_position" v))
###                   ("_applC" ("_position" prio) ("_position" v')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Refine_Leof.le_or_fail"
###     ("_applC" ("_position" hm_pop_min_op) ("_position" hm))
###     ("_applC" ("_position" SPEC)
###       ("_lambda"
###         ("_pattern" ("_pattern" ("_position" k) ("_position" v))
###           ("_position" hm'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" heapmap_\<alpha>)
###               ("_cargs" ("_position" hm) ("_position" k)))
###             ("_applC" ("_position" Some) ("_position" v)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm'))
###               ("_Update"
###                 ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm))
###                 ("_updbind" ("_position" k) ("_position" None))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" k') ("_position" v'))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" heapmap_\<alpha>)
###                     ("_cargs" ("_position" hm) ("_position" k')))
###                   ("_applC" ("_position" Some) ("_position" v')))
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("_applC" ("_position" prio) ("_position" v))
###                   ("_applC" ("_position" prio) ("_position" v')))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
ial_append ==
%ai bi.
   case ai of
   (a1, a2) =>
     marl_length a1 >>=
     (%x'. marl_append a1 bi >>=
           (%x'a. heap_array_set a2 bi x' >>= (%x'b. return (x'a, x'b))))
(uncurry ial_append, uncurry aial_append)
: [%(lqp, uu_).
      lqp
      : Domain
         (ial_rel1
           maxsize)]\<^sub>a (ial_assn2 maxsize)\<^sup>d *\<^sub>a
                             nat_assn\<^sup>k \<rightarrow> ial_assn2
                       maxsize
### Cannot skip proof of schematic goal statement
CONSTRAINT (IS_PURE IS_BELOW_ID) ?R ==>
(uncurry ial_append, uncurry mop_list_append)
: [%(x, xa).
      xa < maxsize &
      xa ~: set x]\<^sub>a (ial_assn maxsize ?R)\<^sup>d *\<^sub>a
                           ?R\<^sup>k \<rightarrow> ial_assn maxsize ?R
CONSTRAINT (IS_PURE IS_BELOW_ID) ?R ==>
(uncurry ial_append, uncurry (RETURN \<circ>\<circ> op_list_append))
: [%(x, xa).
      xa < maxsize &
      xa ~: set x]\<^sub>a (ial_assn maxsize ?R)\<^sup>d *\<^sub>a
                           ?R\<^sup>k \<rightarrow> ial_assn maxsize ?R
### Cannot skip proof of schematic goal statement
ial_get == %ai bi. case ai of (a1, a2) => marl_get a1 bi
(uncurry ial_get, uncurry aial_get)
: (ial_assn2 maxsize)\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a nat_assn
### Cannot skip proof of schematic goal statement
### Ambiguous input (line 1144 of "$AFP/Refine_Imperative_HOL/IICF/Impl/Heaps/IICF_Abs_Heapmap.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Refine_Leof.le_or_fail"
###     ("_applC" ("_position" hm_remove_op)
###       ("_cargs" ("_position" k) ("_position" hm)))
###     ("_applC" ("_position" SPEC)
###       ("_lambda" ("_position" hm')
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm'))
###           ("_applC"
###             ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm))
###             ("\<^const>Ref.update" ("_position" k) ("_position" None))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Refine_Leof.le_or_fail"
###     ("_applC" ("_position" hm_remove_op)
###       ("_cargs" ("_position" k) ("_position" hm)))
###     ("_applC" ("_position" SPEC)
###       ("_lambda" ("_position" hm')
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm'))
###           ("_Update"
###             ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm))
###             ("_updbind" ("_position" k) ("_position" None))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
CONSTRAINT is_pure ?A ==>
(uncurry ial_get, uncurry mop_list_get)
: (ial_assn maxsize ?A)\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a ?A
### theory "Draft.IICF_Abs_Heapmap"
### 1.326s elapsed time, 2.766s cpu time, 0.292s GC time
CONSTRAINT is_pure ?A ==>
(uncurry ial_get, uncurry (RETURN \<circ>\<circ> op_list_get))
: [pre_list_get]\<^sub>a (ial_assn maxsize ?A)\<^sup>k *\<^sub>a
                         nat_assn\<^sup>k \<rightarrow> ?A
### Cannot skip proof of schematic goal statement
ial_contains ==
%ai bi.
   case bi of
   (a1, a2) =>
     if ai < maxsize then Array.nth a2 ai >>= (%x'a. return (x'a < maxsize))
     else return False
(uncurry ial_contains, uncurry local.aial_contains)
: nat_assn\<^sup>k *\<^sub>a
  (ial_assn2 maxsize)\<^sup>k \<rightarrow>\<^sub>a bool_assn
### Cannot skip proof of schematic goal statement
[| CONSTRAINT (IS_PURE single_valued) ?A;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?A |]
==> (uncurry local.ial_contains, uncurry mop_list_contains)
    : ?A\<^sup>k *\<^sub>a
      (ial_assn maxsize ?A)\<^sup>k \<rightarrow>\<^sub>a bool_assn
[| CONSTRAINT (IS_PURE single_valued) ?A;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?A |]
==> (uncurry local.ial_contains,
     uncurry (RETURN \<circ>\<circ> op_list_contains))
    : [pre_list_contains]\<^sub>a ?A\<^sup>k *\<^sub>a
                                  (ial_assn maxsize
                                    ?A)\<^sup>k \<rightarrow> bool_assn
### theory "Draft.IICF_Indexed_Array_List"
### 1.427s elapsed time, 2.830s cpu time, 0.292s GC time
Loading theory "Draft.IICF_Impl_Heapmap" (required by "Draft.IICF_Impl_HeapmapTemplates")
locale hmstruct_impl
  fixes prio :: "'v => 'p"
prio ::\<^sub>i TYPE('v => 'p)
"hm_empty_op"
  :: "('a list * ('a => 'v option)) nres"
"hm_key_of_op"
  :: "'a list * ('a => 'v option) => nat => 'a nres"
"heapmap_\<alpha>"
  :: "'a list * ('a => 'v option) => 'a => 'v option"
"hm_contains_key_op"
  :: "'a => 'a list * ('a => 'v option) => bool nres"
"hm_valid"
  :: "'a list * ('a => 'v option) => nat => bool"
"hm_index_op"
  :: "'a list * ('a => 'v option) => 'a => nat nres"
"hm_butlast_op"
  :: "'a list * ('a => 'v option) => ('a list * ('a => 'v option)) nres"
h.parent ::\<^sub>i TYPE(nat => nat)
h.left ::\<^sub>i TYPE(nat => nat)
h.right ::\<^sub>i TYPE(nat => nat)
### Cannot skip proof of schematic goal statement
hm_length_impl == %xi. case xi of (a1, a2) => ial_length a1
(hm_length_impl, RETURN o local.hm_length')
: local.hm_impl2_rel\<^sup>k \<rightarrow>\<^sub>a nat_assn
hm_length ::\<^sub>i TYPE('v i_hma => nat)
### Cannot skip proof of schematic goal statement
hm_key_of_op_impl == %ai bi. case ai of (a1, a2) => ial_get a1 (bi - 1)
(uncurry hm_key_of_op_impl, uncurry hm_key_of_op')
: local.hm_impl2_rel\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a nat_assn
hm_key_of_op ::\<^sub>i TYPE('v i_hma => nat => nat nres)
### Cannot skip proof of schematic goal statement
hm_lookup_impl ==
%ai bi.
   case ai of
   (a1, a2) =>
     if bi < maxsize
     then ial_contains maxsize bi a1 >>=
          (%x'a. if x'a then Array.nth a2 bi >>= (%x'c. return (Some x'c))
                 else return None)
     else return None
(uncurry hm_lookup_impl, uncurry local.hm_lookup_op')
: local.hm_impl2_rel\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a option_assn id_assn
heapmap_\<alpha> ::\<^sub>i TYPE('v i_hma => nat => 'v option)
### Cannot skip proof of schematic goal statement
hm_exch_op_impl ==
%ai bia bi.
   case ai of
   (a1, a2) => ial_swap a1 (bia - 1) (bi - 1) >>= (%x'. return (x', a2))
(uncurry2 hm_exch_op_impl, uncurry2 local.hm_exch_op')
: local.hm_impl2_rel\<^sup>d *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a local.hm_impl2_rel
hm_exch_op ::\<^sub>i TYPE('v i_hma => nat => nat => 'v i_hma nres)
### Cannot skip proof of schematic goal statement
hm_index_op_impl ==
%ai bi. case ai of (a1, a2) => ial_index a1 bi >>= (%x'. return (x' + 1))
(uncurry hm_index_op_impl, uncurry local.hm_index_op')
: local.hm_impl2_rel\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a nat_assn
hm_index_op ::\<^sub>i TYPE('v i_hma => nat => nat nres)
### Cannot skip proof of schematic goal statement
hm_update_op_impl ==
%ai bia bi.
   case ai of
   (a1, a2) =>
     ial_get a1 (bia - 1) >>=
     (%x'. heap_array_set a2 x' bi >>= (%x'a. return (a1, x'a)))
(uncurry2 hm_update_op_impl, uncurry2 local.hm_update_op')
: local.hm_impl2_rel\<^sup>d *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  id_assn\<^sup>k \<rightarrow>\<^sub>a local.hm_impl2_rel
hm_update_op ::\<^sub>i TYPE('v i_hma => nat => 'v => 'v i_hma nres)
### Cannot skip proof of schematic goal statement
hm_butlast_op_impl ==
%xi. case xi of (a1, a2) => ial_butlast a1 >>= (%x'. return (x', a2))
(hm_butlast_op_impl, hm_butlast_op')
: local.hm_impl2_rel\<^sup>d \<rightarrow>\<^sub>a local.hm_impl2_rel
hm_butlast_op ::\<^sub>i TYPE('v i_hma => 'v i_hma nres)
### Cannot skip proof of schematic goal statement
hm_append_op_impl ==
%ai bia bi.
   case ai of
   (a1, a2) =>
     ial_append a1 bia >>=
     (%x'. Array.len a2 >>=
           (%x. (if x = 0 then Array.new maxsize bi else return a2) >>=
                (%x'a. heap_array_set x'a bia bi >>=
                       (%x'b. return (x', x'b)))))
(uncurry2 hm_append_op_impl, uncurry2 local.hm_append_op')
: local.hm_impl2_rel\<^sup>d *\<^sub>a nat_assn\<^sup>k *\<^sub>a
  id_assn\<^sup>k \<rightarrow>\<^sub>a local.hm_impl2_rel
hm_append_op ::\<^sub>i TYPE('v i_hma => nat => 'v => 'v i_hma nres)
### Cannot skip proof of schematic goal statement
hm_valid_impl ==
%ai bi. local.hm_length_impl ai >>= (%x. return (0 < bi & bi <= x))
(uncurry hm_valid_impl, uncurry (RETURN \<circ>\<circ> hm_valid))
: local.hm_impl_rel\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a bool_assn
hm_valid ::\<^sub>i TYPE('v i_hma => nat => bool)
### Cannot skip proof of schematic goal statement
hm_the_lookup_op_impl == %ai bi. case ai of (a1, a2) => Array.nth a2 bi
(uncurry hm_the_lookup_op_impl, uncurry local.hm_the_lookup_op')
: local.hm_impl2_rel\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a id_assn
hm_the_lookup_op ::\<^sub>i TYPE('v i_hma => nat => 'v nres)
### Cannot skip proof of schematic goal statement
hm_val_of_op_impl ==
%ai bi. hm_key_of_op_impl ai bi >>= local.hm_the_lookup_op_impl ai
(uncurry hm_val_of_op_impl, uncurry hm_val_of_op)
: local.hm_impl_rel\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a id_assn
hm_val_of_op ::\<^sub>i TYPE('v i_hma => nat => 'v nres)
### Cannot skip proof of schematic goal statement
hm_prio_of_op_impl ==
%ai bi. local.hm_val_of_op_impl ai bi >>= (%x'. return (prio x'))
(uncurry hm_prio_of_op_impl, uncurry (PR_CONST hm_prio_of_op))
: local.hm_impl_rel\<^sup>k *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a id_assn
PR_CONST hm_prio_of_op ::\<^sub>i TYPE('v i_hma => nat => 'p nres)
### Cannot skip proof of schematic goal statement
hm_swim_op_impl ==
%ai bi.
   heap.fixp_fun
    (%cf (a1, a2).
        local.hm_valid_impl a1 (efficient_nat_div2 a2) >>=
        (%x'a. if x'a
               then local.hm_prio_of_op_impl a1 (efficient_nat_div2 a2) >>=
                    (%x'b. local.hm_prio_of_op_impl a1 a2 >>=
                           (%x'c. if ~ x'b <= x'c
                                  then local.hm_exch_op_impl a1 a2
  (efficient_nat_div2 a2) >>=
 (%x'e. cf (x'e, efficient_nat_div2 a2))
                                  else return a1))
               else return a1))
    (ai, bi)
(uncurry hm_swim_op_impl, uncurry (PR_CONST hm_swim_op))
: local.hm_impl_rel\<^sup>d *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a local.hm_impl_rel
PR_CONST hm_swim_op ::\<^sub>i TYPE('v i_hma => nat => 'v i_hma nres)
### Cannot skip proof of schematic goal statement
hm_sink_op_impl ==
%ai bi.
   heap.fixp_fun
    (%cf (a1, a2).
        local.hm_length_impl a1 >>=
        (%x'a. if 2 * a2 <= x'a
               then let x'd = 2 * a2
                    in local.hm_prio_of_op_impl a1 x'd >>=
                       (%x'f. (if x'd < x'a
                               then local.hm_prio_of_op_impl a1
                                     (Suc x'd) >>=
                                    (%x'h.
  return (if x'h < x'f then x'd + 1 else x'd))
                               else return x'd) >>=
                              (%x'g. local.hm_prio_of_op_impl a1 x'g >>=
                                     (%x'h.
   local.hm_prio_of_op_impl a1 a2 >>=
   (%x'i. if x'h < x'i
          then local.hm_exch_op_impl a1 a2 x'g >>= (%x'k. cf (x'k, x'g))
          else return a1))))
               else return a1))
    (ai, bi)
(uncurry hm_sink_op_impl, uncurry (PR_CONST hm_sink_op))
: local.hm_impl_rel\<^sup>d *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a local.hm_impl_rel
PR_CONST hm_sink_op ::\<^sub>i TYPE('v i_hma => nat => 'v i_hma nres)
### Cannot skip proof of schematic goal statement
hm_repair_op_impl ==
%ai bi. local.hm_sink_op_impl ai bi >>= (%x'. local.hm_swim_op_impl x' bi)
(uncurry hm_repair_op_impl, uncurry (PR_CONST hm_repair_op))
: local.hm_impl_rel\<^sup>d *\<^sub>a
  nat_assn\<^sup>k \<rightarrow>\<^sub>a local.hm_impl_rel
PR_CONST hm_repair_op ::\<^sub>i TYPE('v i_hma => nat => 'v i_hma nres)
PR_CONST (op_hm_empty_sz maxsize) ::\<^sub>i TYPE((?'a13, 'v) i_map)
### Cannot skip proof of schematic goal statement
hm_empty_op_impl ==
ial_empty maxsize >>= (%x'. heap_array_empty >>= (%x'b. return (x', x'b)))
(uncurry0 hm_empty_op_impl, uncurry0 local.hm_empty_op')
: unit_assn\<^sup>k \<rightarrow>\<^sub>a local.hm_impl2_rel
### Cannot skip proof of schematic goal statement
hm_insert_op_impl ==
%ai bia bi.
   local.hm_append_op_impl bi ai bia >>=
   (%x'. local.hm_length_impl x' >>= local.hm_swim_op_impl x')
(uncurry2 hm_insert_op_impl, uncurry2 hm_insert_op)
: [%((k, uu_), uu_).
      k < maxsize]\<^sub>a nat_assn\<^sup>k *\<^sub>a
                           id_assn\<^sup>k *\<^sub>a
                           local.hm_impl_rel\<^sup>d \<rightarrow> local.hm_impl_rel
### Cannot skip proof of schematic goal statement
hm_is_empty_op_impl ==
%xi. local.hm_length_impl xi >>= (%x'. return (x' = 0))
(hm_is_empty_op_impl, hm_is_empty_op)
: local.hm_impl_rel\<^sup>k \<rightarrow>\<^sub>a bool_assn
### Cannot skip proof of schematic goal statement
hm_lookup_op_impl == %ai bi. local.hm_lookup_impl bi ai
(uncurry hm_lookup_op_impl, uncurry hm_lookup_op)
: nat_assn\<^sup>k *\<^sub>a
  local.hm_impl_rel\<^sup>k \<rightarrow>\<^sub>a option_assn id_assn
### Cannot skip proof of schematic goal statement
hm_contains_key_impl ==
%ai bi.
   case bi of
   (a1, a2) =>
     if ai < maxsize then ial_contains maxsize ai a1 else return False
(uncurry hm_contains_key_impl, uncurry local.hm_contains_key_op')
: nat_assn\<^sup>k *\<^sub>a
  local.hm_impl2_rel\<^sup>k \<rightarrow>\<^sub>a bool_assn
### Cannot skip proof of schematic goal statement
hm_decrease_key_op_impl ==
%ai bia bi.
   local.hm_index_op_impl bi ai >>=
   (%x'. local.hm_update_op_impl bi x' bia >>=
         (%x'a. local.hm_swim_op_impl x'a x'))
(uncurry2 hm_decrease_key_op_impl, uncurry2 hm_decrease_key_op)
: nat_assn\<^sup>k *\<^sub>a id_assn\<^sup>k *\<^sub>a
  local.hm_impl_rel\<^sup>d \<rightarrow>\<^sub>a local.hm_impl_rel
### Cannot skip proof of schematic goal statement
hm_increase_key_op_impl ==
%ai bia bi.
   local.hm_index_op_impl bi ai >>=
   (%x'. local.hm_update_op_impl bi x' bia >>=
         (%x'a. local.hm_sink_op_impl x'a x'))
(uncurry2 hm_increase_key_op_impl, uncurry2 hm_increase_key_op)
: nat_assn\<^sup>k *\<^sub>a id_assn\<^sup>k *\<^sub>a
  local.hm_impl_rel\<^sup>d \<rightarrow>\<^sub>a local.hm_impl_rel
### Cannot skip proof of schematic goal statement
hm_change_key_op_impl ==
%ai bia bi.
   local.hm_index_op_impl bi ai >>=
   (%x'. local.hm_update_op_impl bi x' bia >>=
         (%x'a. local.hm_repair_op_impl x'a x'))
(uncurry2 hm_change_key_op_impl, uncurry2 hm_change_key_op)
: nat_assn\<^sup>k *\<^sub>a id_assn\<^sup>k *\<^sub>a
  local.hm_impl_rel\<^sup>d \<rightarrow>\<^sub>a local.hm_impl_rel
### Cannot skip proof of schematic goal statement
hm_pop_min_op_impl ==
%xi. hm_key_of_op_impl xi 1 >>=
     (%x'. local.hm_the_lookup_op_impl xi x' >>=
           (%x'a. local.hm_length_impl xi >>=
                  (%x'b. local.hm_exch_op_impl xi 1 x'b >>=
                         (%x'd. hm_butlast_op_impl x'd >>=
                                (%x'e. if x'b ~= 1
 then local.hm_sink_op_impl x'e 1 >>= (%x'g. return ((x', x'a), x'g))
 else return ((x', x'a), x'e))))))
(hm_pop_min_op_impl, hm_pop_min_op)
: local.hm_impl_rel\<^sup>d \<rightarrow>\<^sub>a (nat_assn \<times>\<^sub>a
             id_assn) \<times>\<^sub>a
            local.hm_impl_rel
### Cannot skip proof of schematic goal statement
hm_remove_op_impl ==
%ai bi.
   local.hm_index_op_impl bi ai >>=
   (%x'. local.hm_length_impl bi >>=
         (%x'a. local.hm_exch_op_impl bi x' x'a >>=
                (%x'c. hm_butlast_op_impl x'c >>=
                       (%x'd. if x' ~= x'a
                              then local.hm_repair_op_impl x'd x'
                              else return x'd))))
(uncurry hm_remove_op_impl, uncurry hm_remove_op)
: nat_assn\<^sup>k *\<^sub>a
  local.hm_impl_rel\<^sup>d \<rightarrow>\<^sub>a local.hm_impl_rel
### Cannot skip proof of schematic goal statement
hm_peek_min_op_impl ==
%xi. hm_key_of_op_impl xi 1 >>=
     (%x'. local.hm_the_lookup_op_impl xi x' >>= (%x'a. return (x', x'a)))
(hm_peek_min_op_impl, hm_peek_min_op)
: local.hm_impl_rel\<^sup>k \<rightarrow>\<^sub>a nat_assn \<times>\<^sub>a
            id_assn
### Cannot skip proof of schematic goal statement
(uncurry0 local.hm_empty_op_impl, uncurry0 (RETURN op_map_empty))
: unit_assn\<^sup>k \<rightarrow>\<^sub>a local.hm_rel ?K ?V
(uncurry0 local.hm_empty_op_impl, uncurry0 mop_map_empty)
: unit_assn\<^sup>k \<rightarrow>\<^sub>a local.hm_rel ?K ?V
### Cannot skip proof of schematic goal statement
[| CONSTRAINT (IS_PURE IS_BELOW_ID) ?K; CONSTRAINT is_pure ?V |]
==> (uncurry2 local.hm_insert_op_impl, uncurry2 mop_map_update_new)
    : [%((x, xa), xb).
          x < maxsize]\<^sub>a ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
                               (local.hm_rel ?K
                                 ?V)\<^sup>d \<rightarrow> local.hm_rel ?K
                      ?V
[| CONSTRAINT (IS_PURE IS_BELOW_ID) ?K; CONSTRAINT is_pure ?V |]
==> (uncurry2 local.hm_insert_op_impl,
     uncurry2 (RETURN \<circ>\<circ>\<circ> op_map_update_new))
    : [%((x, xa), xb).
          x < maxsize &
          x ~: dom xb]\<^sub>a ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
                               (local.hm_rel ?K
                                 ?V)\<^sup>d \<rightarrow> local.hm_rel ?K
                      ?V
### Cannot skip proof of schematic goal statement
(local.hm_is_empty_op_impl, RETURN o op_map_is_empty)
: (local.hm_rel ?K ?V)\<^sup>k \<rightarrow>\<^sub>a bool_assn
(local.hm_is_empty_op_impl, mop_map_is_empty)
: (local.hm_rel ?K ?V)\<^sup>k \<rightarrow>\<^sub>a bool_assn
### Cannot skip proof of schematic goal statement
[| CONSTRAINT is_pure ?K; CONSTRAINT is_pure ?V |]
==> (uncurry local.hm_lookup_op_impl,
     uncurry (RETURN \<circ>\<circ> op_map_lookup))
    : ?K\<^sup>k *\<^sub>a
      (local.hm_rel ?K ?V)\<^sup>k \<rightarrow>\<^sub>a option_assn ?V
[| CONSTRAINT is_pure ?K; CONSTRAINT is_pure ?V |]
==> (uncurry local.hm_lookup_op_impl, uncurry mop_map_lookup)
    : ?K\<^sup>k *\<^sub>a
      (local.hm_rel ?K ?V)\<^sup>k \<rightarrow>\<^sub>a option_assn ?V
### Cannot skip proof of schematic goal statement
CONSTRAINT is_pure ?K ==>
(uncurry local.hm_contains_key_impl,
 uncurry (RETURN \<circ>\<circ> op_map_contains_key))
: ?K\<^sup>k *\<^sub>a
  (local.hm_rel ?K ?V)\<^sup>k \<rightarrow>\<^sub>a bool_assn
CONSTRAINT is_pure ?K ==>
(uncurry local.hm_contains_key_impl, uncurry mop_map_contains_key)
: ?K\<^sup>k *\<^sub>a
  (local.hm_rel ?K ?V)\<^sup>k \<rightarrow>\<^sub>a bool_assn
### Cannot skip proof of schematic goal statement
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K;
   CONSTRAINT (IS_PURE IS_BELOW_ID) ?V |]
==> (uncurry2 local.hm_decrease_key_op_impl,
     uncurry2 (PR_CONST (mop_pm_decrease_key prio)))
    : ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
      (local.hm_rel ?K ?V)\<^sup>d \<rightarrow>\<^sub>a local.hm_rel ?K ?V
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K;
   CONSTRAINT (IS_PURE IS_BELOW_ID) ?V |]
==> (uncurry2 local.hm_decrease_key_op_impl,
     uncurry2 (RETURN \<circ>\<circ>\<circ> op_pm_decrease_key))
    : [pre_pm_decrease_key
        prio]\<^sub>a ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
                      (local.hm_rel ?K
                        ?V)\<^sup>d \<rightarrow> local.hm_rel ?K ?V
### Cannot skip proof of schematic goal statement
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K;
   CONSTRAINT (IS_PURE IS_BELOW_ID) ?V |]
==> (uncurry2 local.hm_increase_key_op_impl,
     uncurry2 (PR_CONST (mop_pm_increase_key prio)))
    : ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
      (local.hm_rel ?K ?V)\<^sup>d \<rightarrow>\<^sub>a local.hm_rel ?K ?V
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K;
   CONSTRAINT (IS_PURE IS_BELOW_ID) ?V |]
==> (uncurry2 local.hm_increase_key_op_impl,
     uncurry2 (RETURN \<circ>\<circ>\<circ> op_pm_increase_key))
    : [pre_pm_increase_key
        prio]\<^sub>a ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
                      (local.hm_rel ?K
                        ?V)\<^sup>d \<rightarrow> local.hm_rel ?K ?V
### Cannot skip proof of schematic goal statement
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K; CONSTRAINT is_pure ?V |]
==> (uncurry2 local.hm_change_key_op_impl, uncurry2 mop_map_update_ex)
    : ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
      (local.hm_rel ?K ?V)\<^sup>d \<rightarrow>\<^sub>a local.hm_rel ?K ?V
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K; CONSTRAINT is_pure ?V |]
==> (uncurry2 local.hm_change_key_op_impl,
     uncurry2 (RETURN \<circ>\<circ>\<circ> op_map_update_ex))
    : [pre_map_update_ex]\<^sub>a ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
                                  (local.hm_rel ?K
                                    ?V)\<^sup>d \<rightarrow> local.hm_rel
                         ?K ?V
### Cannot skip proof of schematic goal statement
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K |]
==> (uncurry local.hm_remove_op_impl, uncurry mop_map_delete_ex)
    : ?K\<^sup>k *\<^sub>a
      (local.hm_rel ?K ?V)\<^sup>d \<rightarrow>\<^sub>a local.hm_rel ?K ?V
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K |]
==> (uncurry local.hm_remove_op_impl,
     uncurry (RETURN \<circ>\<circ> op_map_delete_ex))
    : [pre_map_delete_ex]\<^sub>a ?K\<^sup>k *\<^sub>a
                                  (local.hm_rel ?K
                                    ?V)\<^sup>d \<rightarrow> local.hm_rel
                         ?K ?V
### Cannot skip proof of schematic goal statement
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K;
   CONSTRAINT (IS_PURE IS_BELOW_ID) ?V |]
==> (local.hm_pop_min_op_impl, PR_CONST (mop_pm_pop_min prio))
    : (local.hm_rel ?K
        ?V)\<^sup>d \<rightarrow>\<^sub>a (?K \<times>\<^sub>a
     ?V) \<times>\<^sub>a
    local.hm_rel ?K ?V
[| CONSTRAINT (IS_PURE single_valued) ?K;
   CONSTRAINT (IS_PURE IS_LEFT_UNIQUE) ?K;
   CONSTRAINT (IS_PURE IS_BELOW_ID) ?V |]
==> (local.hm_pop_min_op_impl, PR_CONST (op_pm_pop_min prio))
    : [pre_pm_pop_min]\<^sub>a (local.hm_rel ?K
                                 ?V)\<^sup>d \<rightarrow> (?K \<times>\<^sub>a
                      ?V) \<times>\<^sub>a
                     local.hm_rel ?K ?V
### Cannot skip proof of schematic goal statement
[| CONSTRAINT (IS_PURE IS_BELOW_ID) ?V; CONSTRAINT is_pure ?K |]
==> (local.hm_peek_min_op_impl, PR_CONST (mop_pm_peek_min prio))
    : (local.hm_rel ?K
        ?V)\<^sup>k \<rightarrow>\<^sub>a ?K \<times>\<^sub>a ?V
[| CONSTRAINT (IS_PURE IS_BELOW_ID) ?V; CONSTRAINT is_pure ?K |]
==> (local.hm_peek_min_op_impl, PR_CONST (op_pm_peek_min prio))
    : [pre_pm_peek_min]\<^sub>a (local.hm_rel ?K
                                  ?V)\<^sup>k \<rightarrow> ?K \<times>\<^sub>a
                      ?V
### Cannot skip proof of schematic goal statement
hm_upd_op_impl ==
%ai bia bi.
   local.hm_contains_key_impl ai bi >>=
   (%x'. if x' then local.hm_change_key_op_impl ai bia bi
         else local.hm_insert_op_impl ai bia bi)
(uncurry2 hm_upd_op_impl,
 uncurry2 (RETURN \<circ>\<circ>\<circ> op_map_update))
: [%((k, uu_), uu_).
      k < maxsize]\<^sub>a nat_assn\<^sup>k *\<^sub>a
                           id_assn\<^sup>k *\<^sub>a
                           (local.hm_rel nat_assn
                             id_assn)\<^sup>d \<rightarrow> local.hm_rel
                       nat_assn id_assn
### Cannot skip proof of schematic goal statement
[| CONSTRAINT (IS_PURE IS_BELOW_ID) ?K; CONSTRAINT is_pure ?V |]
==> (uncurry2 local.hm_upd_op_impl,
     uncurry2 (RETURN \<circ>\<circ>\<circ> op_map_update))
    : [%((x, xa), xb).
          x < maxsize]\<^sub>a ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
                               (local.hm_rel ?K
                                 ?V)\<^sup>d \<rightarrow> local.hm_rel ?K
                      ?V
[| CONSTRAINT (IS_PURE IS_BELOW_ID) ?K; CONSTRAINT is_pure ?V |]
==> (uncurry2 local.hm_upd_op_impl, uncurry2 mop_map_update)
    : [%((x, xa), xb).
          x < maxsize]\<^sub>a ?K\<^sup>k *\<^sub>a ?V\<^sup>k *\<^sub>a
                               (local.hm_rel ?K
                                 ?V)\<^sup>d \<rightarrow> local.hm_rel ?K
                      ?V
### Cannot skip proof of schematic goal statement
### Ignoring duplicate rewrite rule:
### heap_array_set ?p ?i ?v == Array.upd ?i ?v ?p
### Ignoring duplicate rewrite rule:
### case ?p1 of (p1, p2) => case ?p1 of (p1', p2') => ?f1 p1 p2 p1' p2' ==
### case ?p1 of (p1, p2) => ?f1 p1 p2 p1 p2
### Code generator: dropping subsumed code equation
### hm_insert_op_impl ?maxsize ?prio ==
### %ai bia bi.
###    hm_append_op_impl ?maxsize bi ai bia >>=
###    (%x'. hm_length_impl x' >>= hm_swim_op_impl ?prio x')
### Cannot skip proof of schematic goal statement
### Ignoring duplicate rewrite rule:
### heap_array_set ?p ?i ?v == Array.upd ?i ?v ?p
### Ignoring duplicate rewrite rule:
### case ?p1 of (p1, p2) => case ?p1 of (p1', p2') => ?f1 p1 p2 p1' p2' ==
### case ?p1 of (p1, p2) => ?f1 p1 p2 p1 p2
### Code generator: dropping subsumed code equation
### hm_swim_op_impl ?prio ?hm ?i ==
### heap.fixp_fun
###  (%cf (a1, a2).
###      case a1 of
###      ((a1b, a2b), a2a) =>
###        case a1b of
###        (a, b) =>
###          let d2 = efficient_nat_div2 a2
###          in if 0 < d2 & d2 <= b
###             then (case a1b of (a, n) => Array.nth a) (d2 - Suc 0) >>=
###                  (%x. Array.nth a2a x >>=
###                       (%x. (case a1b of (a, n) => Array.nth a)
###                             (a2 - Suc 0) >>=
###                            (%xa. Array.nth a2a xa >>=
###                                  (%xa. if ?prio x <= ?prio xa then return a1
###  else hm_exch_op_impl a1 a2 d2 >>= (%x'g. cf (x'g, d2))))))
###             else return a1)
###  (?hm, ?i)
### Cannot skip proof of schematic goal statement
### Ignoring duplicate rewrite rule:
### heap_array_set ?p ?i ?v == Array.upd ?i ?v ?p
### Ignoring duplicate rewrite rule:
### case ?p1 of (p1, p2) => case ?p1 of (p1', p2') => ?f1 p1 p2 p1' p2' ==
### case ?p1 of (p1, p2) => ?f1 p1 p2 p1 p2
### Code generator: dropping subsumed code equation
### hm_sink_op_impl ?prio ?hm ?i ==
### heap.fixp_fun
###  (%cf (a1, a2).
###      case a1 of
###      (((a, b), a2b), a2a) =>
###        if 2 * a2 <= b
###        then let x'd = 2 * a2
###             in case a1 of
###                ((a1b, a2b), a2a) =>
###                  (case a1b of (a, n) => Array.nth a) (x'd - Suc 0) >>=
###                  (%x. Array.nth a2a x >>=
###                       (%x. (if x'd < b
###                             then (case a1b of (a, n) => Array.nth a) x'd >>=
###                                  (%xa. Array.nth a2a xa >>=
###  (%xa. return (if ?prio xa < ?prio x then Suc x'd else x'd)))
###                             else return x'd) >>=
###                            (%x'g. (case a1b of (a, n) => Array.nth a)
###                                    (x'g - Suc 0) >>=
###                                   (%x.
### Array.nth a2a x >>=
### (%x. (case a1b of (a, n) => Array.nth a) (a2 - Suc 0) >>=
###      (%xa. Array.nth a2a xa >>=
###            (%xa. if ?prio x < ?prio xa
###                  then hm_exch_op_impl a1 a2 x'g >>= (%x'k. cf (x'k, x'g))
###                  else return a1)))))))
###        else return a1)
###  (?hm, ?i)
See theory exports
### Cannot skip proof of schematic goal statement
### Ignoring duplicate rewrite rule:
### heap_array_set ?p ?i ?v == Array.upd ?i ?v ?p
### Ignoring duplicate rewrite rule:
### case ?p1 of (p1, p2) => case ?p1 of (p1', p2') => ?f1 p1 p2 p1' p2' ==
### case ?p1 of (p1, p2) => ?f1 p1 p2 p1 p2
### Code generator: dropping subsumed code equation
### hm_change_key_op_impl ?prio ==
### %ai bia bi.
###    hm_index_op_impl bi ai >>=
###    (%x'. hm_update_op_impl bi x' bia >>=
###          (%x'a. hm_repair_op_impl ?prio x'a x'))
### Cannot skip proof of schematic goal statement
### Ignoring duplicate rewrite rule:
### heap_array_set ?p ?i ?v == Array.upd ?i ?v ?p
### Ignoring duplicate rewrite rule:
### case ?p1 of (p1, p2) => case ?p1 of (p1', p2') => ?f1 p1 p2 p1' p2' ==
### case ?p1 of (p1, p2) => ?f1 p1 p2 p1 p2
### Code generator: dropping subsumed code equation
### hm_upd_op_impl ?maxsize ?prio ==
### %ai bia bi.
###    hm_contains_key_impl ?maxsize ai bi >>=
###    (%x'. if x' then hm_change_key_op_impl ?prio ai bia bi
###          else hm_insert_op_impl ?maxsize ?prio ai bia bi)
### Cannot skip proof of schematic goal statement
### Ignoring duplicate rewrite rule:
### heap_array_set ?p ?i ?v == Array.upd ?i ?v ?p
### Ignoring duplicate rewrite rule:
### case ?p1 of (p1, p2) => case ?p1 of (p1', p2') => ?f1 p1 p2 p1' p2' ==
### case ?p1 of (p1, p2) => ?f1 p1 p2 p1 p2
### Code generator: dropping subsumed code equation
### hm_pop_min_op_impl ?prio ==
### %xi. hm_key_of_op_impl xi 1 >>=
###      (%x'. hm_the_lookup_op_impl xi x' >>=
###            (%x'a. hm_length_impl xi >>=
###                   (%x'b. hm_exch_op_impl xi 1 x'b >>=
###                          (%x'd. hm_butlast_op_impl x'd >>=
###                                 (%x'e. if x'b ~= 1
###  then hm_sink_op_impl ?prio x'e 1 >>= (%x'g. return ((x', x'a), x'g))
###  else return ((x', x'a), x'e))))))
### theory "Draft.IICF_Impl_Heapmap"
### 5.937s elapsed time, 6.331s cpu time, 0.556s GC time
*** Failed to load theory "Draft.IICF_Impl_HeapmapTemplates" (unresolved "Draft.IICF_Impl_Heapmap")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "334")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 723 of "$AFP/Refine_Imperative_HOL/IICF/Impl/Heaps/IICF_Impl_Heapmap.thy")
Exception- TOPLEVEL_ERROR raised
