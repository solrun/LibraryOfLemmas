Loading theory "Draft.User_Smashing" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
Loading theory "Draft.Named_Theorems_Rev" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic" via "Draft.Sepref_Misc")
Loading theory "Draft.Structured_Apply" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic")
Loading theory "Draft.Concl_Pres_Clarification" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Intf_Util")
val enumerate = fn: 'a list -> ('a * int) list
val dummy_abs = fn: int -> typ list -> term -> term
val common_prefix = fn: typ list -> term -> term -> typ list * term * term
val dest_app = fn: term list -> term -> term * term list
val add_bound = fn: term * 'a -> (int * 'a) list -> (int * 'a) list
### ML warning (line 43 of "$AFP/Refine_Imperative_HOL/Lib/User_Smashing.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 34 of "$AFP/Refine_Imperative_HOL/Lib/User_Smashing.thy"):
### Pattern is not exhaustive.
### ML warning (line 35 of "$AFP/Refine_Imperative_HOL/Lib/User_Smashing.thy"):
### Pattern is not exhaustive.
val smash_pair = fn: Proof.context -> thm -> term * term -> thm
val smash = fn: Proof.context -> thm -> thm
val smashed_attrib = fn: Proof.context -> thm -> 'a option * thm option
val smash_new_rule = fn: Proof.context -> thm -> thm Seq.seq
### theory "Draft.User_Smashing"
### 0.025s elapsed time, 0.098s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
val cp_clarify_step_tac = fn: Proof.context -> int -> tactic
val cp_clarify_tac = fn: Proof.context -> int -> tactic
val cp_clarsimp_tac = fn: Proof.context -> int -> tactic
### theory "Draft.Concl_Pres_Clarification"
### 0.053s elapsed time, 0.238s cpu time, 0.000s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
signature NAMED_THEOREMS_REV =
  sig
    val add: string -> attribute
    val add_thm: string -> thm -> Context.generic -> Context.generic
    val check: Proof.context -> string * Position.T -> string
    val declare: binding -> string -> local_theory -> string * local_theory
    val del: string -> attribute
    val del_thm: string -> thm -> Context.generic -> Context.generic
    val get: Proof.context -> string -> thm list
    val member: Proof.context -> string -> thm -> bool
  end
structure Named_Theorems_Rev: NAMED_THEOREMS_REV
### theory "Draft.Named_Theorems_Rev"
### 0.065s elapsed time, 0.289s cpu time, 0.000s GC time
Loading theory "Draft.PO_Normalizer" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic" via "Draft.Sepref_Misc")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
signature STRUCTURED_APPLY =
  sig
    val apply1:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val applyT:
       Method.text * Position.range ->
         Proof.state -> Proof.state Seq.result Seq.seq
    val apply_focus:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val apply_solve:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val focus: Proof.state -> Proof.state
    val solved: Proof.state -> Proof.state
    val unfocus: Proof.state -> Proof.state
  end
structure Structured_Apply: STRUCTURED_APPLY
### theory "Draft.Structured_Apply"
### 0.096s elapsed time, 0.383s cpu time, 0.024s GC time
Loading theory "Draft.Sepref_Id_Op" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### ML warning (line 63 of "$AFP/Refine_Imperative_HOL/Lib/PO_Normalizer.ML"):
### Pattern is not exhaustive.
### ML warning (line 77 of "$AFP/Refine_Imperative_HOL/Lib/PO_Normalizer.ML"):
### Pattern is not exhaustive.
signature PO_NORMALIZER =
  sig
    val gen_norm_rule: thm list -> norm_set -> Proof.context -> thm -> thm
    val gen_norm_tac: norm_set -> Proof.context -> tactic'
    type norm_set =
       {cong_rules: thm list,
        norm_rules: thm list, refl_rules: thm list, trans_rules: thm list}
  end
structure PO_Normalizer: PO_NORMALIZER
### theory "Draft.PO_Normalizer"
### 0.055s elapsed time, 0.190s cpu time, 0.024s GC time
Loading theory "Draft.Pf_Add" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Foreach")
### theory "HOL-Library.Function_Algebras"
### 0.160s elapsed time, 0.638s cpu time, 0.024s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
infix 0 THEN_ELSE_COMB'
signature ID_OP_TACTICAL =
  sig
    val DF_SOLVE_FWD: bool -> tactic' -> tactic'
    val SOLVE_FWD: tactic' -> tactic'
  end
structure Id_Op_Tactical: ID_OP_TACTICAL
### theory "Draft.Pf_Add"
### 0.219s elapsed time, 0.852s cpu time, 0.099s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.227s elapsed time, 0.884s cpu time, 0.099s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
structure Id_Op:
  sig
    val add_id_rule: thm -> Proof.context -> Proof.context
    val cfg_id_debug: bool Config.T
    val cfg_id_trace_fallback: bool Config.T
    val dest_id_rl: thm -> term * typ
    val do_unprotect_tac: Proof.context -> int -> tactic
    val id_a_conv: conv -> cterm -> thm
    val id_tac: id_tac_mode -> Proof.context -> int -> tactic
    datatype id_tac_mode = Init | Normal | Solve | Step
    val protect: typ list -> term -> term
    val protect_conv: Proof.context -> conv
    val unprotect_conv: Proof.context -> conv
  end
### theory "Draft.Sepref_Id_Op"
### 0.552s elapsed time, 2.158s cpu time, 0.181s GC time
Loading theory "Draft.Pf_Mono_Prover" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
structure Pf_Mono_Prover:
  sig val mono_tac: Proof.context -> int -> tactic end
### theory "Draft.Pf_Mono_Prover"
### 0.053s elapsed time, 0.188s cpu time, 0.065s GC time
Loading theory "Draft.Sepref_Misc" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic")
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.881s elapsed time, 3.398s cpu time, 0.346s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.918s elapsed time, 3.263s cpu time, 0.798s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Sepref_Misc"
### 0.957s elapsed time, 2.856s cpu time, 0.733s GC time
Loading theory "Draft.Sepref_Basic" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify")
Loading theory "Draft.Term_Synth" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Definition")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature TERM_SYNTH =
  sig val synth_term: thm list -> Proof.context -> term -> term end
structure Term_Synth: TERM_SYNTH
### theory "Draft.Term_Synth"
### 0.131s elapsed time, 0.392s cpu time, 0.000s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.858s elapsed time, 5.513s cpu time, 0.989s GC time
Loading theory "Draft.Templates" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.191s cpu time, 0.063s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.IICF_Abs_HeapmapTemplates")
### Ignoring duplicate rewrite rule:
### hn_refine ?\<Gamma>1 ?c1 ?\<Gamma>'1 ?R1 FAIL == True
signature SEPREF_BASIC =
  sig
    val PHASES': phase list -> phases_ctrl -> Proof.context -> tactic'
    val apply_under_lambda:
       (Proof.context -> term -> term) -> Proof.context -> term -> term
    val constrain_type_pre: typ -> term -> term
    val dbg_phases_ctrl: phases_ctrl
    val dest_hn_ctxt: term -> term * term * term
    val dest_hn_ctxt_opt: term -> (term * term * term) option
    val dest_hn_refine: term -> term * term * term * term * term
    val dest_hnr_absfun: term -> bool * (term * term list)
    val dest_lambda_rc:
       Proof.context -> term -> (term * (term -> term)) * Proof.context
    val dest_nresT: typ -> typ
    val dflt_phases_ctrl: phases_ctrl
    val flag_phases_ctrl: bool -> phases_ctrl
    val hn_refine_concl_conv_a:
       (Proof.context -> conv) -> Proof.context -> conv
    val hn_refine_conv: conv -> conv -> conv -> conv -> conv -> conv
    val hn_refine_conv_a: conv -> conv
    val is_hn_ctxt: term -> bool
    val is_hn_refine_concl: term -> bool
    val is_nresT: typ -> bool
    val is_true: term -> bool
    val list_star: term list -> term
    val mk_cequals: cterm * cterm -> cterm
    val mk_compN_pre: int -> term -> term -> term
    val mk_curry0_pre: term -> term
    val mk_curryN_pre: int -> term -> term
    val mk_curry_pre: term -> term
    val mk_entails: term * term -> term
    val mk_hn_refine: term * term * term * term * term -> term
    val mk_hnr_absfun: bool * (term * term list) -> term
    val mk_hnr_absfun': term * term list -> term
    val mk_nresT: typ -> typ
    val mk_pair_in_pre: term -> term -> term -> term
    val mk_star: term * term -> term
    val mk_uncurry0_pre: term -> term
    val mk_uncurryN_pre: int -> term -> term
    val mk_uncurry_pre: term -> term
    type phase = string * (Proof.context -> tactic') * int
    type phases_ctrl =
       {int_res: bool,
        start: string option, stop: string option, trace: bool}
    val star_permute_tac: Proof.context -> tactic
    val strip_star: term -> term list
  end
signature SEPREF_DEBUGGING =
  sig
    val DBG_CONVERSION: bool Config.T -> Proof.context -> conv -> tactic'
    val DBG_CONVERSION': Proof.context -> conv -> tactic'
    val cfg_debug_all: bool Config.T
    val dbg_msg_tac:
       bool Config.T ->
         (Proof.context -> int -> thm -> string) -> Proof.context -> tactic'
    val dbg_msg_tac':
       (Proof.context -> int -> thm -> string) -> Proof.context -> tactic'
    val dbg_trace_msg: bool Config.T -> Proof.context -> string -> unit
    val dbg_trace_msg': Proof.context -> string -> unit
    val error_tac': string -> Proof.context -> tactic'
    val is_debug: bool Config.T -> Proof.context -> bool
    val is_debug': Proof.context -> bool
    val msg_allgoals: string -> Proof.context -> int -> thm -> string
    val msg_from_subgoal:
       string ->
         (term -> Proof.context -> string) ->
           Proof.context -> int -> thm -> string
    val msg_subgoal: string -> Proof.context -> int -> thm -> string
    val msg_text: string -> Proof.context -> int -> thm -> string
    val tracing_tac': string -> Proof.context -> tactic'
    val warning_tac': string -> Proof.context -> tactic'
  end
structure Sepref_Basic: SEPREF_BASIC
structure Sepref_Debugging: SEPREF_DEBUGGING
infix 1 THEN_NEXT
infix 1 THEN_ALL_NEW_LIST
infix 1 THEN_ALL_NEW_LIST'
signature STACTICAL =
  sig
    val APPLY_LIST: tactic' list -> tactic'
    val THEN_ALL_NEW_LIST: tactic' * tactic' list -> tactic'
    val THEN_ALL_NEW_LIST': tactic' * (tactic' list * tactic') -> tactic'
    val THEN_NEXT: tactic' * tactic' -> tactic'
  end
structure STactical: STACTICAL
val THEN_ALL_NEW_LIST = fn: tactic' * tactic' list -> tactic'
val APPLY_LIST = fn: tactic' list -> tactic'
val THEN_NEXT = fn: tactic' * tactic' -> tactic'
val THEN_ALL_NEW_LIST' = fn: tactic' * (tactic' list * tactic') -> tactic'
### theory "Draft.Sepref_Basic"
### 1.181s elapsed time, 2.862s cpu time, 0.848s GC time
Loading theory "Draft.Sepref_Constraints" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
Loading theory "Draft.Sepref_Monadify" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.731s elapsed time, 1.899s cpu time, 0.677s GC time
### ML warning (line 153 of "$AFP/Refine_Imperative_HOL/Sepref_Monadify.thy"):
### (aconv) has infix status but was not preceded by op.
### ML warning (line 188 of "$AFP/Refine_Imperative_HOL/Sepref_Monadify.thy"):
### (aconv) has infix status but was not preceded by op.
structure Sepref_Monadify:
  sig
    val arity_tac: Proof.context -> int -> tactic
    val comb_tac: Proof.context -> int -> tactic
    val contains_eval: term -> bool
    val dup_tac: Proof.context -> int -> tactic
    val mark_params_conv: Proof.context -> conv
    val mark_params_tac: Proof.context -> int -> tactic
    val monadify_simproc: simproc
    val monadify_tac: bool -> Proof.context -> tactic'
    val remove_pass_tac: Proof.context -> int -> tactic
  end
signature SEPREF_CONSTRAINTS =
  sig
    val ON_SLOT: tactic -> tactic
    val WITH_SLOT: tactic' -> tactic
    val add_constraint_rule: thm -> Context.generic -> Context.generic
    val add_safe_constraint_rule: thm -> Context.generic -> Context.generic
    val cond_focus: (term -> bool) -> tactic
    val constraint_tac: Proof.context -> tactic'
    val create_slot_tac: tactic
    val del_constraint_rule: thm -> Context.generic -> Context.generic
    val del_safe_constraint_rule: thm -> Context.generic -> Context.generic
    val dest_slot_tac: tactic'
    val ensure_slot_tac: tactic
    val focus: tactic
    val get_constraint_rules: Proof.context -> thm list
    val get_safe_constraint_rules: Proof.context -> thm list
    val has_slot: thm -> bool
    val is_constraint_goal: term -> bool
    val is_constraint_tac: tactic'
    val prefer_slot_tac: tactic
    val print_slot_tac: Proof.context -> tactic
    val process_constraint_slot: Proof.context -> tactic
    val remove_slot_tac: tactic
    val safe_constraint'_tac: Proof.context -> tactic'
    val safe_constraint_tac: Proof.context -> tactic'
    val setup: theory -> theory
    val slot_constraint_tac: int -> tactic
    val solve_constraint'_tac: Proof.context -> tactic'
    val solve_constraint_slot: Proof.context -> tactic
    val solve_constraint_tac: Proof.context -> tactic'
    val some_to_slot_tac: (term -> bool) -> tactic
    val to_slot_tac: tactic'
    val unfocus: tactic
    val unfocus_ins: tactic
  end
structure Sepref_Constraints: SEPREF_CONSTRAINTS
### theory "Draft.Sepref_Constraints"
### 0.361s elapsed time, 0.894s cpu time, 0.060s GC time
Loading theory "Draft.Sepref_Frame" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
Loading theory "Draft.Sepref_Rules" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
### theory "Draft.Sepref_Monadify"
### 0.395s elapsed time, 0.992s cpu time, 0.060s GC time
consts
  hf_pres ::
    "('a => 'b => assn) => bool => ('a => 'b => assn) * ('a => 'b => assn)"
signature SEPREF_FRAME =
  sig
    val add_normrel_eq: thm -> Context.generic -> Context.generic
    val align_goal_tac: Proof.context -> tactic'
    val align_rl_conv: Proof.context -> conv
    val cfg_debug: bool Config.T
    val del_normrel_eq: thm -> Context.generic -> Context.generic
    val frame_step_tac:
       (Proof.context -> tactic') -> bool -> Proof.context -> tactic'
    val frame_tac: (Proof.context -> tactic') -> Proof.context -> tactic'
    val get_normrel_eqs: Proof.context -> thm list
    val is_merge: term -> bool
    val merge_tac: (Proof.context -> tactic') -> Proof.context -> tactic'
    val norm_goal_pre_tac: Proof.context -> tactic'
    val prepare_frame_tac: Proof.context -> tactic'
    val recover_pure_tac: Proof.context -> tactic'
    val setup: theory -> theory
    val weaken_post_tac: Proof.context -> tactic'
  end
structure Sepref_Frame: SEPREF_FRAME
### theory "Draft.Sepref_Frame"
### 0.507s elapsed time, 1.078s cpu time, 0.111s GC time
signature SEPREF_RULES =
  sig
    val add_pure_constraints_rule: Proof.context -> thm -> thm
    val analyze_hnr: Proof.context -> thm -> hnr_analysis
    val analyze_rel: term -> term option * term list * term
    val binder_rels: term -> term list
    val body_rel: term -> term
    val ensure_fref: Proof.context -> thm -> thm
    val ensure_fref_nres: Proof.context -> thm -> thm
    val ensure_hfref: Proof.context -> thm -> thm
    val ensure_hnr: Proof.context -> thm -> thm
    val fcomp_attrib: attribute context_parser
    val gen_compose: Proof.context -> thm -> thm -> thm
    type hnr_analysis =
       {ahead: term * bool,
        argrels: (term * bool) list,
        chead: term * bool,
        precond: term, prems: term list, result_rel: term, thm: thm}
    val intf_of_assn: Proof.context -> term -> typ
    val mk_hfprod: term * term -> term
    val mk_hfprods: term list -> term
    val mk_hfref_thm: Proof.context -> hnr_analysis -> thm
    val mk_rel: term option * term list * term -> term
    val mk_triv_precond: term list -> term
    val norm_fcomp_rule: Proof.context -> thm -> thm
    val prepare_hfref_synth_tac: Proof.context -> tactic'
    val pretty_hnr_analysis: Proof.context -> hnr_analysis -> Pretty.T
    val simplify_precond: Proof.context -> thm -> thm
    val strip_rel: term -> term list * term
    val to_foparam: Proof.context -> thm -> thm
    val to_fref: Proof.context -> thm -> thm
    val to_hfref: Proof.context -> thm -> thm
    val to_hnr: Proof.context -> thm -> thm
  end
structure Sepref_Rules: SEPREF_RULES
### theory "Draft.Sepref_Rules"
### 1.778s elapsed time, 2.353s cpu time, 0.153s GC time
Loading theory "Draft.Sepref_Combinator_Setup" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
Loading theory "Draft.Sepref_Definition" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool")
### ML warning (line 62 of "$AFP/Refine_Imperative_HOL/Sepref_Combinator_Setup.thy"):
### (=) has infix status but was not preceded by op.
signature SEPREF_INTF_TYPES =
  sig
    val check_intf_type: Proof.context -> typ -> typ -> bool
    val check_intf_type_err: Proof.context -> typ -> typ -> unit
    val check_intf_type_msg:
       (typ * typ -> unit) -> Proof.context -> typ -> typ -> unit
    val decl_intf_type_cmd:
       ((string list * binding) * mixfix) * string ->
         local_theory -> local_theory
    val norm_intf_type: Proof.context -> typ -> typ
    val register_itype_rewrite: typ -> typ -> Proof.context -> local_theory
  end
structure Sepref_Intf_Types: SEPREF_INTF_TYPES
structure Sepref_Extraction:
  sig
    val heap_extraction: Refine_Automation.extraction
    val setup: theory -> theory
  end
"starts_with"
  :: "'a"
structure Sepref_Definition:
  sig
    val cfg_prep_code: bool Config.T
    val make_hnr_goal:
       term -> Proof.context -> (cterm * term) * Proof.context
    val mk_synth_term: Proof.context -> string -> string -> term
    val sd_cmd:
       (((('a Config.T * 'a) list * binding) * Token.src list) * string) *
       string
         -> Proof.context -> Proof.state
    val sd_parser:
       Token.T list ->
         (((((bool Config.T * bool) list * binding) * Token.src list) *
           string)
          *
          string)
         *
         Token.T list
    val st_cmd: (binding * string) * string -> Proof.context -> Proof.state
    val st_parser:
       Token.T list -> ((binding * string) * string) * Token.T list
  end
### theory "Draft.Sepref_Definition"
### 0.463s elapsed time, 0.930s cpu time, 0.027s GC time
### ML warning (line 347 of "$AFP/Refine_Imperative_HOL/Sepref_Combinator_Setup.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 349 of "$AFP/Refine_Imperative_HOL/Sepref_Combinator_Setup.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 436 of "$AFP/Refine_Imperative_HOL/Sepref_Combinator_Setup.thy"):
### Pattern is not exhaustive.
structure Sepref_Combinator_Setup:
  sig
    val analyze_decl: term -> term -> opkind * (typ list * typ)
    val analyze_itype_thm: thm -> term * opkind * (typ list * typ)
    val check_type_intf: Proof.context -> typ -> typ -> bool
    val cr_reg_thms:
       term ->
         typ ->
           Proof.context ->
             {arity_thm: thm option, itype_thm: thm, mcomb_thm: thm option}
    val gen_pr_const_pat: Proof.context -> term -> thm option * term
    val generate_basename: Proof.context -> term -> string
    val get_nt_rule: thm -> typ * typ
    val import_terms_disj:
       term list -> Proof.context -> term list * Proof.context
    val is_valid_abs_op: Proof.context -> term -> bool
    val map_type: Proof.context -> typ -> typ
    val map_type_raw: Proof.context -> (typ * typ) list -> typ -> typ
    val mk_arity: Proof.context -> term -> int -> thm
    val mk_itype: Proof.context -> term -> term -> thm
    val mk_mcomb: Proof.context -> term -> int -> thm
    datatype opkind = COMB | PURE
    val read_term_type:
       string ->
         string option -> Proof.context -> (term * typ) * Proof.context
    type reg_thms =
       {arity_thm: thm option, itype_thm: thm, mcomb_thm: thm option}
    val sepref_register_adhoc:
       (term * typ option) list -> Context.generic -> Context.generic
    val sepref_register_adhoc_attr: (term * typ option) list -> attribute
    val sepref_register_adhoc_attr_decl:
       Context.generic * Token.T list ->
         attribute * (Context.generic * Token.T list)
    val sepref_register_adhoc_parser:
       Context.generic * Token.T list ->
         (term * typ option) list * (Context.generic * Token.T list)
    val sepref_register_adhoc_single:
       term * typ option -> Context.generic -> Context.generic
    val sepref_register_cmd:
       ((string option * string) * string option) list ->
         Proof.context -> Proof.context
    val sepref_register_parser:
       Token.T list ->
         ((string option * string) * string option) list * Token.T list
    val sepref_register_single:
       string ->
         term ->
           typ ->
             Proof.context ->
               ((thm option * thm option) * thm) * local_theory
    val sepref_register_single_cmd:
       (string option * string) * string option ->
         Proof.context -> local_theory
  end
### theory "Draft.Sepref_Combinator_Setup"
### 0.571s elapsed time, 1.068s cpu time, 0.076s GC time
Loading theory "Draft.Sepref_Translate" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool")
structure Sepref_Translate:
  sig
    val cfg_debug: bool Config.T
    val check_side_conds: thm -> unit list
    val dbg_msg_tac:
       (Proof.context -> int -> thm -> string) -> Proof.context -> tactic'
    val gen_msg_analyze: term -> Proof.context -> string
    val gen_trans_op_tac: bool -> Proof.context -> tactic'
    val gen_trans_step_tac: bool -> Proof.context -> tactic'
    val gen_trans_tac: bool -> Proof.context -> tactic'
    val msg_analyze: string -> Proof.context -> int -> thm -> string
    structure sepref_comb_rules: NAMED_SORTED_THMS
    structure sepref_fr_rules: NAMED_SORTED_THMS
    val setup: theory -> theory
    val side_cond_dispatch_tac:
       bool -> (int -> tactic) -> Proof.context -> tactic'
    val side_constraint_tac: Proof.context -> tactic'
    val side_fallback_tac: Proof.context -> int -> tactic
    val side_frame_tac: Proof.context -> tactic'
    val side_gen_algo_tac: Proof.context -> int -> tactic
    val side_merge_tac: Proof.context -> tactic'
    val side_mono_tac: Proof.context -> int -> tactic
    val side_pref_def_tac: Proof.context -> int -> tactic
    val side_rprem_tac: Proof.context -> int -> tactic
    val side_unfold_tac: Proof.context -> int -> tactic
    val trans_comb_tac: Proof.context -> int -> tactic
    val trans_keep_tac: Proof.context -> tactic'
    val trans_step_keep_tac: Proof.context -> tactic'
    val trans_step_tac: Proof.context -> tactic'
    val trans_tac: Proof.context -> tactic'
  end
"PR_CONST (op_ASSERT_bind I)"
  :: "'a nres => 'a nres"
structure Sepref_Import_Param:
  sig
    val add_PR_CONST: thm -> thm
    val import: Proof.context -> thm -> thm
    val import_attr:
       Context.generic * Token.T list ->
         attribute * (Context.generic * Token.T list)
    val import_attr_rl:
       Context.generic * Token.T list ->
         attribute * (Context.generic * Token.T list)
    val setup: theory -> theory
    val to_import_fo: Proof.context -> thm -> thm
  end
### theory "Draft.Sepref_Translate"
### 0.958s elapsed time, 0.981s cpu time, 0.036s GC time
Loading theory "Draft.Sepref_Intf_Util" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref" via "Draft.Sepref_Tool")
### ML warning (line 926 of "$AFP/Refine_Imperative_HOL/Sepref_Intf_Util.thy"):
### Value identifier (unfold_PR_CONST_tac) has not been referenced.
signature SEPREF_INTF_UTIL =
  sig
    val cfg_def: bool Config.T
    val cfg_ismop: bool Config.T
    val cfg_mop: bool Config.T
    val cfg_rawgoals: bool Config.T
    val cleanup_constraints: Proof.context -> thm -> thm
    val get_intf_of_rel: Proof.context -> term -> typ
    val list_filtered_subterms: (term -> 'a option) -> term -> 'a list
    val simp_precond_tac: Proof.context -> tactic'
    val to_assns_rl: bool -> Proof.context -> thm -> thm
  end
structure Sepref_Intf_Util: SEPREF_INTF_UTIL
### theory "Draft.Sepref_Intf_Util"
### 1.220s elapsed time, 1.270s cpu time, 0.082s GC time
Loading theory "Draft.Sepref_Tool" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref")
structure Sepref:
  sig
    val cons_init_tac: Proof.context -> int -> tactic
    val cons_solve_tac: bool -> Proof.context -> int -> tactic
    val id_init_tac: Proof.context -> int -> tactic
    val id_solve_tac: Proof.context -> int -> tactic
    val id_step_tac: Proof.context -> int -> tactic
    val id_tac: Proof.context -> int -> tactic
    val monadify_tac: bool -> Proof.context -> tactic'
    val opt_tac: Proof.context -> int -> tactic
    val preproc_tac: Proof.context -> int -> tactic
    structure sepref_opt_simps: NAMED_THMS
    structure sepref_opt_simps2: NAMED_THMS
    structure sepref_preproc_simps: NAMED_THMS
    val sepref_tac: bool -> Proof.context -> int -> tactic
    val setup: theory -> theory
    val trans_tac: Proof.context -> tactic'
  end
val SIMPLE_METHOD_NOPARAM' = fn:
   ('a -> int -> tactic) -> 'b -> ('a -> Method.method) * 'b
val SIMPLE_METHOD_NOPARAM = fn:
   ('a -> tactic) -> 'b -> ('a -> Method.method) * 'b
COPY ::\<^sub>i TYPE(?'a => ?'a)
val prec_extract_eqs_tac = fn: Proof.context -> int -> tactic
val prep_comb_rule = fn: thm -> thm
### theory "Draft.Sepref_Tool"
### 0.387s elapsed time, 0.387s cpu time, 0.000s GC time
Loading theory "Draft.Sepref_HOL_Bindings" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref")
PR_CONST (ASSN_ANNOT A) ::\<^sub>i TYPE('a => 'a)
IS_ID ?R ==> IS_LEFT_TOTAL ?R
IS_ID ?R ==> IS_RIGHT_TOTAL ?R
IS_BELOW_ID ?R ==> IS_LEFT_UNIQUE ?R
IS_BELOW_ID ?R ==> single_valued ?R
IS_ID ?R ==> IS_BELOW_ID ?R
single_valued ?R ==> precise (pure ?R)
[| precise ?R; single_valued ?S |] ==> precise (hr_comp ?R ?S)
### Ignoring duplicate rewrite rule:
### b_rel (b_rel ?R1 ?P1.1) ?P2.1 == b_rel ?R1 (%x. ?P1.1 x & ?P2.1 x)
### Ignoring duplicate rewrite rule:
### b_assn (b_assn ?A1 ?P1.1) ?P2.1 == b_assn ?A1 (%x. ?P1.1 x & ?P2.1 x)
Found termination order: "{}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
Inr ::\<^sub>i TYPE(?'a => ?'b + ?'a)
Inl ::\<^sub>i TYPE(?'a => ?'a + ?'b)
case_sum ::\<^sub>i TYPE((?'a => ?'b) => (?'c => ?'b) => ?'a + ?'c => ?'b)
isl ::\<^sub>i TYPE(?'a + ?'b => bool)
projl ::\<^sub>i TYPE(?'a + ?'b => ?'a)
projr ::\<^sub>i TYPE(?'a + ?'b => ?'b)
PR_CONST STR '''' ::\<^sub>i TYPE(String.literal)
PR_CONST (String.Literal b0 b1 b2 b3 b4 b5 b6 s) ::\<^sub>i
TYPE(String.literal)
### theory "Draft.Sepref_HOL_Bindings"
### 1.543s elapsed time, 1.667s cpu time, 0.163s GC time
Loading theory "Draft.Sepref_Foreach" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref")
"FOREACH\<^sub>O\<^sub>C\<^bsup>R,I\<^esup>"
  :: "'a set => ('b => bool) => ('a => 'b => 'b nres) => 'b => 'b nres"
### Ambiguous input (line 233 of "$AFP/Refine_Imperative_HOL/Sepref_Foreach.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sepref_Id_Op.intf_type"
###     ("_applC" ("_position" PR_CONST)
###       ("_applC" ("_position" FOREACHoci)
###         ("_cargs" ("_position" R) ("_position" I))))
###     ("_TYPE"
###       ("\<^type>fun" ("_tapp" ("_position_sort" 'c) ("_type_name" set))
###         ("\<^type>fun"
###           ("\<^type>fun" ("_position_sort" 'd) ("_type_name" bool))
###           ("\<^type>fun"
###             ("\<^type>fun" ("_position_sort" 'c)
###               ("\<^type>fun" ("_position_sort" 'd)
###                 ("_tapp" ("_position_sort" 'd) ("_type_name" nres))))
###             ("\<^type>fun" ("_position_sort" 'd)
###               ("_tapp" ("_position_sort" 'd) ("_type_name" nres)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Autoref_Id_Ops.CONST_INTF"
###     ("_applC" ("_position" PR_CONST)
###       ("_applC" ("_position" FOREACHoci)
###         ("_cargs" ("_position" R) ("_position" I))))
###     ("_TYPE"
###       ("\<^type>fun" ("_tapp" ("_position_sort" 'c) ("_type_name" set))
###         ("\<^type>fun"
###           ("\<^type>fun" ("_position_sort" 'd) ("_type_name" bool))
###           ("\<^type>fun"
###             ("\<^type>fun" ("_position_sort" 'c)
###               ("\<^type>fun" ("_position_sort" 'd)
###                 ("_tapp" ("_position_sort" 'd) ("_type_name" nres))))
###             ("\<^type>fun" ("_position_sort" 'd)
###               ("_tapp" ("_position_sort" 'd) ("_type_name" nres)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Sepref_Foreach"
### 1.172s elapsed time, 1.976s cpu time, 1.115s GC time
Loading theory "Draft.Sepref_Improper" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.Sepref")
pho_apply ::\<^sub>i TYPE((?'a => ?'b) => ?'a => ?'b)
### theory "Draft.Sepref_Improper"
### 0.045s elapsed time, 0.047s cpu time, 0.000s GC time
Loading theory "Draft.Sepref" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap")
### theory "Draft.Sepref"
### 0.343s elapsed time, 0.382s cpu time, 0.057s GC time
Loading theory "Draft.IICF_List" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap")
Loading theory "Draft.IICF_Map" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Prio_Map")
Loading theory "Draft.IICF_Multiset" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap" via "Draft.IICF_Prio_Bag")
### Ambiguous input (line 18 of "$AFP/Refine_Imperative_HOL/IICF/Intf/IICF_List.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" swap)
###     ("_cargs" ("_position" l) ("_cargs" ("_position" i) ("_position" j))))
###   ("_applC" ("_position" l)
###     ("_list"
###       ("_args"
###         ("\<^const>Ref.update" ("_position" i)
###           ("\<^const>List.nth" ("_position" l) ("_position" j)))
###         ("\<^const>Ref.update" ("_position" j)
###           ("\<^const>List.nth" ("_position" l) ("_position" i)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" swap)
###     ("_cargs" ("_position" l) ("_cargs" ("_position" i) ("_position" j))))
###   ("_LUpdate" ("_position" l)
###     ("_lupdbinds"
###       ("_lupdbind" ("_position" i)
###         ("\<^const>List.nth" ("_position" l) ("_position" j)))
###       ("_lupdbind" ("_position" j)
###         ("\<^const>List.nth" ("_position" l) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
op_list_empty ::\<^sub>i TYPE(?'a list)
mop_list_empty ::\<^sub>i TYPE(?'a list nres)
op_list_is_empty ::\<^sub>i TYPE(?'a list => bool)
op_map_empty ::\<^sub>i TYPE((?'a, ?'b) i_map)
mop_list_is_empty ::\<^sub>i TYPE(?'a list => bool nres)
mop_map_empty ::\<^sub>i TYPE((?'a, ?'b) i_map nres)
op_mset_empty ::\<^sub>i TYPE(?'a multiset)
mop_mset_empty ::\<^sub>i TYPE(?'a multiset nres)
op_map_is_empty ::\<^sub>i TYPE((?'a, ?'b) i_map => bool)
op_list_replicate ::\<^sub>i TYPE(nat => ?'a => ?'a list)
mop_map_is_empty ::\<^sub>i TYPE((?'a, ?'b) i_map => bool nres)
op_mset_is_empty ::\<^sub>i TYPE(?'a multiset => bool)
mop_list_replicate ::\<^sub>i TYPE(nat => ?'a => ?'a list nres)
mop_mset_is_empty ::\<^sub>i TYPE(?'a multiset => bool nres)
op_list_copy ::\<^sub>i TYPE(?'a list => ?'a list)
op_map_update ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) i_map => (?'a, ?'b) i_map)
op_mset_insert ::\<^sub>i TYPE(?'a => ?'a multiset => ?'a multiset)
mop_list_copy ::\<^sub>i TYPE(?'a list => ?'a list nres)
mop_map_update ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) i_map => (?'a, ?'b) i_map nres)
mop_mset_insert ::\<^sub>i TYPE(?'a => ?'a multiset => ?'a multiset nres)
op_list_prepend ::\<^sub>i TYPE(?'a => ?'a list => ?'a list)
mop_list_prepend ::\<^sub>i TYPE(?'a => ?'a list => ?'a list nres)
op_mset_delete ::\<^sub>i TYPE(?'a => ?'a multiset => ?'a multiset)
mop_mset_delete ::\<^sub>i TYPE(?'a => ?'a multiset => ?'a multiset nres)
op_list_append ::\<^sub>i TYPE(?'a list => ?'a => ?'a list)
mop_list_append ::\<^sub>i TYPE(?'a list => ?'a => ?'a list nres)
op_map_delete ::\<^sub>i TYPE(?'a => (?'a, ?'b) i_map => (?'a, ?'b) i_map)
op_mset_plus ::\<^sub>i TYPE(?'a multiset => ?'a multiset => ?'a multiset)
mop_map_delete ::\<^sub>i
TYPE(?'a => (?'a, ?'b) i_map => (?'a, ?'b) i_map nres)
op_list_concat ::\<^sub>i TYPE(?'a list => ?'a list => ?'a list)
mop_mset_plus ::\<^sub>i
TYPE(?'a multiset => ?'a multiset => ?'a multiset nres)
mop_list_concat ::\<^sub>i TYPE(?'a list => ?'a list => ?'a list nres)
op_mset_minus ::\<^sub>i TYPE(?'a multiset => ?'a multiset => ?'a multiset)
op_list_length ::\<^sub>i TYPE(?'a list => nat)
mop_mset_minus ::\<^sub>i
TYPE(?'a multiset => ?'a multiset => ?'a multiset nres)
mop_list_length ::\<^sub>i TYPE(?'a list => nat nres)
op_list_get ::\<^sub>i TYPE(?'a list => nat => ?'a)
op_map_lookup ::\<^sub>i TYPE(?'a => (?'a, ?'b) i_map => ?'b option)
mop_list_get ::\<^sub>i TYPE(?'a list => nat => ?'a nres)
mop_map_lookup ::\<^sub>i TYPE(?'a => (?'a, ?'b) i_map => ?'b option nres)
op_mset_contains ::\<^sub>i TYPE(?'a => ?'a multiset => bool)
mop_mset_contains ::\<^sub>i TYPE(?'a => ?'a multiset => bool nres)
op_list_set ::\<^sub>i TYPE(?'a list => nat => ?'a => ?'a list)
op_map_contains_key ::\<^sub>i TYPE(?'a => (?'a, ?'b) i_map => bool)
mop_map_contains_key ::\<^sub>i TYPE(?'a => (?'a, ?'b) i_map => bool nres)
mop_list_set ::\<^sub>i TYPE(?'a list => nat => ?'a => ?'a list nres)
op_mset_count ::\<^sub>i TYPE(?'a => ?'a multiset => nat)
mop_mset_count ::\<^sub>i TYPE(?'a => ?'a multiset => nat nres)
op_list_hd ::\<^sub>i TYPE(?'a list => ?'a)
op_mset_pick ::\<^sub>i TYPE(?'a multiset => (?'a * ?'a multiset) nres)
mop_list_hd ::\<^sub>i TYPE(?'a list => ?'a nres)
mop_mset_pick ::\<^sub>i TYPE(?'a multiset => (?'a * ?'a multiset) nres)
locale map_custom_empty
  fixes op_custom_empty :: "'k => 'v option"
  assumes "map_custom_empty op_custom_empty"
op_custom_empty ::\<^sub>i TYPE((?'a, ?'b) i_map)
### theory "Draft.IICF_Map"
### 0.518s elapsed time, 1.566s cpu time, 0.109s GC time
Loading theory "Draft.IICF_Prio_Map" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap")
op_list_tl ::\<^sub>i TYPE(?'a list => ?'a list)
mop_list_tl ::\<^sub>i TYPE(?'a list => ?'a list nres)
op_list_last ::\<^sub>i TYPE(?'a list => ?'a)
mop_list_last ::\<^sub>i TYPE(?'a list => ?'a nres)
op_list_butlast ::\<^sub>i TYPE(?'a list => ?'a list)
mop_list_butlast ::\<^sub>i TYPE(?'a list => ?'a list nres)
locale mset_custom_empty
  fixes rel :: "'a multiset => 'b => assn"
    and empty :: "'b Heap"
    and op_custom_empty :: "'a multiset"
  assumes "mset_custom_empty rel empty op_custom_empty"
op_custom_empty ::\<^sub>i TYPE(?'c multiset)
op_map_update_new ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) i_map => (?'a, ?'b) i_map)
### theory "Draft.IICF_Multiset"
### 0.624s elapsed time, 1.884s cpu time, 0.170s GC time
Loading theory "Draft.IICF_Prio_Bag" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap" via "Draft.IICF_Abs_Heap")
mop_map_update_new ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) i_map => (?'a, ?'b) i_map nres)
op_list_contains ::\<^sub>i TYPE(?'a => ?'a list => bool)
mop_list_contains ::\<^sub>i TYPE(?'a => ?'a list => bool nres)
op_list_swap ::\<^sub>i TYPE(?'a list => nat => nat => ?'a list)
mop_list_swap ::\<^sub>i TYPE(?'a list => nat => nat => ?'a list nres)
PR_CONST (mop_prio_pop_min prio) ::\<^sub>i
TYPE('a multiset => ('a * 'a multiset) nres)
op_map_update_ex ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) i_map => (?'a, ?'b) i_map)
PR_CONST (mop_prio_peek_min prio) ::\<^sub>i TYPE('a multiset => 'a nres)
mop_map_update_ex ::\<^sub>i
TYPE(?'a => ?'b => (?'a, ?'b) i_map => (?'a, ?'b) i_map nres)
### theory "Draft.IICF_Prio_Bag"
### 0.128s elapsed time, 0.383s cpu time, 0.000s GC time
op_list_rotate1 ::\<^sub>i TYPE(?'a list => ?'a list)
mop_list_rotate1 ::\<^sub>i TYPE(?'a list => ?'a list nres)
op_list_rev ::\<^sub>i TYPE(?'a list => ?'a list)
mop_list_rev ::\<^sub>i TYPE(?'a list => ?'a list nres)
op_map_delete_ex ::\<^sub>i
TYPE(?'a => (?'a, ?'b) i_map => (?'a, ?'b) i_map)
op_list_index ::\<^sub>i TYPE(?'a list => ?'a => nat)
mop_list_index ::\<^sub>i TYPE(?'a list => ?'a => nat nres)
mop_map_delete_ex ::\<^sub>i
TYPE(?'a => (?'a, ?'b) i_map => (?'a, ?'b) i_map nres)
op_pm_decrease_key ::\<^sub>i
TYPE(?'a => 'v => (?'a, 'v) i_map => (?'a, 'v) i_map)
locale list_custom_empty
  fixes rel :: "'a list => 'b => assn"
    and empty :: "'b Heap"
    and op_custom_empty :: "'a list"
  assumes "list_custom_empty rel empty op_custom_empty"
op_custom_empty ::\<^sub>i TYPE(?'c list)
IICF_Prio_Map.mop_pm_decrease_key $ prio ==
UNPROTECT local.mop_pm_decrease_key
PR_CONST local.mop_pm_decrease_key ::\<^sub>i
TYPE(?'a2 => 'v => (?'a2, 'v) i_map => (?'a2, 'v) i_map nres)
### theory "Draft.IICF_List"
### 0.933s elapsed time, 2.659s cpu time, 0.235s GC time
Loading theory "Draft.IICF_Abs_Heap" (required by "Draft.IICF_Abs_HeapmapTemplates" via "Draft.IICF_Abs_Heapmap")
op_pm_increase_key ::\<^sub>i
TYPE(?'a2 => 'v => (?'a2, 'v) i_map => (?'a2, 'v) i_map)
locale heapstruct
  fixes prio :: "'a => 'b"
IICF_Prio_Map.mop_pm_increase_key $ prio ==
UNPROTECT local.mop_pm_increase_key
PR_CONST local.mop_pm_increase_key ::\<^sub>i
TYPE(?'a4 => 'v => (?'a4, 'v) i_map => (?'a4, 'v) i_map nres)
IICF_Prio_Map.op_pm_peek_min $ prio == UNPROTECT local.op_pm_peek_min
PR_CONST local.op_pm_peek_min ::\<^sub>i
TYPE((?'a5, 'v) i_map => (?'a5 * 'v) nres)
### Ambiguous input (line 189 of "$AFP/Refine_Imperative_HOL/IICF/Impl/Heaps/IICF_Abs_Heap.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" update)
###     ("_cargs" ("_position" h) ("_cargs" ("_position" i) ("_position" v))))
###   ("_LUpdate" ("_position" h)
###     ("_lupdbind"
###       ("\<^const>Groups.minus_class.minus" ("_position" i)
###         ("\<^const>Groups.one_class.one"))
###       ("_position" v))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" update)
###     ("_cargs" ("_position" h) ("_cargs" ("_position" i) ("_position" v))))
###   ("_applC" ("_position" h)
###     ("_list"
###       ("\<^const>Ref.update"
###         ("\<^const>Groups.minus_class.minus" ("_position" i)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" v)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
IICF_Prio_Map.mop_pm_peek_min $ prio == UNPROTECT local.mop_pm_peek_min
PR_CONST local.mop_pm_peek_min ::\<^sub>i
TYPE((?'a7, 'v) i_map => (?'a7 * 'v) nres)
IICF_Prio_Map.op_pm_pop_min $ prio == UNPROTECT local.op_pm_pop_min
PR_CONST local.op_pm_pop_min ::\<^sub>i
TYPE((?'a8, 'v) i_map => ((?'a8 * 'v) * (?'a8, 'v) i_map) nres)
IICF_Prio_Map.mop_pm_pop_min $ prio == UNPROTECT local.mop_pm_pop_min
PR_CONST local.mop_pm_pop_min ::\<^sub>i
TYPE((?'a10, 'v) i_map => ((?'a10 * 'v) * (?'a10, 'v) i_map) nres)
### theory "Draft.IICF_Abs_Heap"
### 0.621s elapsed time, 1.286s cpu time, 0.115s GC time
### theory "Draft.IICF_Prio_Map"
### 1.037s elapsed time, 2.346s cpu time, 0.180s GC time
Loading theory "Draft.IICF_Abs_Heapmap" (required by "Draft.IICF_Abs_HeapmapTemplates")
locale hmstruct
  fixes prio :: "'v => 'b"
### Ambiguous input (line 257 of "$AFP/Refine_Imperative_HOL/IICF/Impl/Heaps/IICF_Abs_Heapmap.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" hm_butlast_op)
###   ("_lambda" ("_pattern" ("_position" pq) ("_position" m))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("_position" ASSERT)
###             ("_applC" ("_position" hmr_invar)
###               ("_tuple" ("_position" pq) ("_tuple_arg" ("_position" m))))))
###         ("_do_cons"
###           ("_do_bind" ("_position" k)
###             ("_applC" ("_position" mop_list_get)
###               ("_cargs" ("_position" pq)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("_applC" ("_position" length) ("_position" pq))
###                   ("\<^const>Groups.one_class.one")))))
###           ("_do_cons"
###             ("_do_bind" ("_position" pq)
###               ("_applC" ("_position" mop_list_butlast) ("_position" pq)))
###             ("_do_cons"
###               ("_do_let" ("_position" m)
###                 ("_applC" ("_position" m)
###                   ("\<^const>Ref.update" ("_position" k)
###                     ("_position" None))))
###               ("_do_final"
###                 ("_applC" ("_position" RETURN)
###                   ("_tuple" ("_position" pq)
###                     ("_tuple_arg" ("_position" m))))))))))))
### ("\<^const>Pure.eq" ("_position" hm_butlast_op)
###   ("_lambda" ("_pattern" ("_position" pq) ("_position" m))
###     ("_do_block"
###       ("_do_cons"
###         ("_do_then"
###           ("_applC" ("_position" ASSERT)
###             ("_applC" ("_position" hmr_invar)
###               ("_tuple" ("_position" pq) ("_tuple_arg" ("_position" m))))))
###         ("_do_cons"
###           ("_do_bind" ("_position" k)
###             ("_applC" ("_position" mop_list_get)
###               ("_cargs" ("_position" pq)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("_applC" ("_position" length) ("_position" pq))
###                   ("\<^const>Groups.one_class.one")))))
###           ("_do_cons"
###             ("_do_bind" ("_position" pq)
###               ("_applC" ("_position" mop_list_butlast) ("_position" pq)))
###             ("_do_cons"
###               ("_do_let" ("_position" m)
###                 ("_Update" ("_position" m)
###                   ("_updbind" ("_position" k) ("_position" None))))
###               ("_do_final"
###                 ("_applC" ("_position" RETURN)
###                   ("_tuple" ("_position" pq)
###                     ("_tuple_arg" ("_position" m))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 277 of "$AFP/Refine_Imperative_HOL/IICF/Impl/Heaps/IICF_Abs_Heapmap.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Refine_Leof.le_or_fail"
###     ("_applC" ("_position" hm_butlast_op) ("_position" hm))
###     ("_applC" ("_position" SPEC)
###       ("_lambda" ("_position" hm')
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm'))
###           ("_Update"
###             ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm))
###             ("_updbind"
###               ("_applC" ("_position" hm_key_of)
###                 ("_cargs" ("_position" hm)
###                   ("_applC" ("_position" hm_length) ("_position" hm))))
###               ("_position" None))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Refine_Leof.le_or_fail"
###     ("_applC" ("_position" hm_butlast_op) ("_position" hm))
###     ("_applC" ("_position" SPEC)
###       ("_lambda" ("_position" hm')
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm'))
###           ("_applC"
###             ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm))
###             ("\<^const>Ref.update"
###               ("_applC" ("_position" hm_key_of)
###                 ("_cargs" ("_position" hm)
###                   ("_applC" ("_position" hm_length) ("_position" hm))))
###               ("_position" None))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 940 of "$AFP/Refine_Imperative_HOL/IICF/Impl/Heaps/IICF_Abs_Heapmap.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Refine_Leof.le_or_fail"
###     ("_applC" ("_position" hm_pop_min_op) ("_position" hm))
###     ("_applC" ("_position" SPEC)
###       ("_lambda"
###         ("_pattern" ("_pattern" ("_position" k) ("_position" v))
###           ("_position" hm'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" heapmap_\<alpha>)
###               ("_cargs" ("_position" hm) ("_position" k)))
###             ("_applC" ("_position" Some) ("_position" v)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm'))
###               ("_applC"
###                 ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm))
###                 ("\<^const>Ref.update" ("_position" k) ("_position" None))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" k') ("_position" v'))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" heapmap_\<alpha>)
###                     ("_cargs" ("_position" hm) ("_position" k')))
###                   ("_applC" ("_position" Some) ("_position" v')))
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("_applC" ("_position" prio) ("_position" v))
###                   ("_applC" ("_position" prio) ("_position" v')))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Refine_Leof.le_or_fail"
###     ("_applC" ("_position" hm_pop_min_op) ("_position" hm))
###     ("_applC" ("_position" SPEC)
###       ("_lambda"
###         ("_pattern" ("_pattern" ("_position" k) ("_position" v))
###           ("_position" hm'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" heapmap_\<alpha>)
###               ("_cargs" ("_position" hm) ("_position" k)))
###             ("_applC" ("_position" Some) ("_position" v)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm'))
###               ("_Update"
###                 ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm))
###                 ("_updbind" ("_position" k) ("_position" None))))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" k') ("_position" v'))
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" heapmap_\<alpha>)
###                     ("_cargs" ("_position" hm) ("_position" k')))
###                   ("_applC" ("_position" Some) ("_position" v')))
###                 ("\<^const>Orderings.ord_class.less_eq"
###                   ("_applC" ("_position" prio) ("_position" v))
###                   ("_applC" ("_position" prio) ("_position" v')))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1144 of "$AFP/Refine_Imperative_HOL/IICF/Impl/Heaps/IICF_Abs_Heapmap.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Refine_Leof.le_or_fail"
###     ("_applC" ("_position" hm_remove_op)
###       ("_cargs" ("_position" k) ("_position" hm)))
###     ("_applC" ("_position" SPEC)
###       ("_lambda" ("_position" hm')
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm'))
###           ("_applC"
###             ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm))
###             ("\<^const>Ref.update" ("_position" k) ("_position" None))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Refine_Leof.le_or_fail"
###     ("_applC" ("_position" hm_remove_op)
###       ("_cargs" ("_position" k) ("_position" hm)))
###     ("_applC" ("_position" SPEC)
###       ("_lambda" ("_position" hm')
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm'))
###           ("_Update"
###             ("_applC" ("_position" heapmap_\<alpha>) ("_position" hm))
###             ("_updbind" ("_position" k) ("_position" None))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.IICF_Abs_Heapmap"
### 1.145s elapsed time, 1.263s cpu time, 0.166s GC time
Loading theory "Draft.IICF_Abs_HeapmapTemplates"
val templateLemmas =
   [("IICF_Abs_Heapmap.swap_empty_iff", "(swap ?l ?i ?j = []) = (?l = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 0),
       template_equation (template_var 2, template_hole 0)))]:
   (string * thm * template) list
### theory "Draft.IICF_Abs_HeapmapTemplates"
### 0.619s elapsed time, 0.817s cpu time, 0.127s GC time
val it = (): unit
