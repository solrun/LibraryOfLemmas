Loading theory "Draft.User_Smashing" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
Loading theory "Draft.Concl_Pres_Clarification" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Intf_Util")
Loading theory "Draft.Named_Theorems_Rev" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic" via "Draft.Sepref_Misc")
Loading theory "Draft.Structured_Apply" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic")
val enumerate = fn: 'a list -> ('a * int) list
val dummy_abs = fn: int -> typ list -> term -> term
val common_prefix = fn: typ list -> term -> term -> typ list * term * term
val dest_app = fn: term list -> term -> term * term list
val add_bound = fn: term * 'a -> (int * 'a) list -> (int * 'a) list
### ML warning (line 43 of "$AFP/Refine_Imperative_HOL/Lib/User_Smashing.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 34 of "$AFP/Refine_Imperative_HOL/Lib/User_Smashing.thy"):
### Pattern is not exhaustive.
### ML warning (line 35 of "$AFP/Refine_Imperative_HOL/Lib/User_Smashing.thy"):
### Pattern is not exhaustive.
val smash_pair = fn: Proof.context -> thm -> term * term -> thm
val smash = fn: Proof.context -> thm -> thm
val smashed_attrib = fn: Proof.context -> thm -> 'a option * thm option
val smash_new_rule = fn: Proof.context -> thm -> thm Seq.seq
### theory "Draft.User_Smashing"
### 0.037s elapsed time, 0.145s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
val cp_clarify_step_tac = fn: Proof.context -> int -> tactic
val cp_clarify_tac = fn: Proof.context -> int -> tactic
val cp_clarsimp_tac = fn: Proof.context -> int -> tactic
### theory "Draft.Concl_Pres_Clarification"
### 0.051s elapsed time, 0.211s cpu time, 0.000s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.ExtrEqs")
signature NAMED_THEOREMS_REV =
  sig
    val add: string -> attribute
    val add_thm: string -> thm -> Context.generic -> Context.generic
    val check: Proof.context -> string * Position.T -> string
    val declare: binding -> string -> local_theory -> string * local_theory
    val del: string -> attribute
    val del_thm: string -> thm -> Context.generic -> Context.generic
    val get: Proof.context -> string -> thm list
    val member: Proof.context -> string -> thm -> bool
  end
structure Named_Theorems_Rev: NAMED_THEOREMS_REV
### theory "Draft.Named_Theorems_Rev"
### 0.074s elapsed time, 0.323s cpu time, 0.000s GC time
Loading theory "Draft.PO_Normalizer" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic" via "Draft.Sepref_Misc")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
signature STRUCTURED_APPLY =
  sig
    val apply1:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val applyT:
       Method.text * Position.range ->
         Proof.state -> Proof.state Seq.result Seq.seq
    val apply_focus:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val apply_solve:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val focus: Proof.state -> Proof.state
    val solved: Proof.state -> Proof.state
    val unfocus: Proof.state -> Proof.state
  end
structure Structured_Apply: STRUCTURED_APPLY
### theory "Draft.Structured_Apply"
### 0.103s elapsed time, 0.414s cpu time, 0.026s GC time
Loading theory "Draft.Sepref_Id_Op" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### ML warning (line 63 of "$AFP/Refine_Imperative_HOL/Lib/PO_Normalizer.ML"):
### Pattern is not exhaustive.
### ML warning (line 77 of "$AFP/Refine_Imperative_HOL/Lib/PO_Normalizer.ML"):
### Pattern is not exhaustive.
signature PO_NORMALIZER =
  sig
    val gen_norm_rule: thm list -> norm_set -> Proof.context -> thm -> thm
    val gen_norm_tac: norm_set -> Proof.context -> tactic'
    type norm_set =
       {cong_rules: thm list,
        norm_rules: thm list, refl_rules: thm list, trans_rules: thm list}
  end
structure PO_Normalizer: PO_NORMALIZER
### theory "Draft.PO_Normalizer"
### 0.057s elapsed time, 0.200s cpu time, 0.026s GC time
Loading theory "Draft.Pf_Add" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Foreach")
### theory "HOL-Library.Function_Algebras"
### 0.150s elapsed time, 0.601s cpu time, 0.026s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.Pf_Add"
### 0.220s elapsed time, 0.857s cpu time, 0.100s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
infix 0 THEN_ELSE_COMB'
signature ID_OP_TACTICAL =
  sig
    val DF_SOLVE_FWD: bool -> tactic' -> tactic'
    val SOLVE_FWD: tactic' -> tactic'
  end
structure Id_Op_Tactical: ID_OP_TACTICAL
### theory "HOL-Library.Set_Algebras"
### 0.225s elapsed time, 0.870s cpu time, 0.100s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
structure Id_Op:
  sig
    val add_id_rule: thm -> Proof.context -> Proof.context
    val cfg_id_debug: bool Config.T
    val cfg_id_trace_fallback: bool Config.T
    val dest_id_rl: thm -> term * typ
    val do_unprotect_tac: Proof.context -> int -> tactic
    val id_a_conv: conv -> cterm -> thm
    val id_tac: id_tac_mode -> Proof.context -> int -> tactic
    datatype id_tac_mode = Init | Normal | Solve | Step
    val protect: typ list -> term -> term
    val protect_conv: Proof.context -> conv
    val unprotect_conv: Proof.context -> conv
  end
consts
  cycle :: "'a list => 'a stream"
### theory "Draft.Sepref_Id_Op"
### 0.573s elapsed time, 2.243s cpu time, 0.186s GC time
Loading theory "Draft.Pf_Mono_Prover" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
structure Pf_Mono_Prover:
  sig val mono_tac: Proof.context -> int -> tactic end
### theory "Draft.Pf_Mono_Prover"
### 0.051s elapsed time, 0.185s cpu time, 0.066s GC time
Loading theory "Draft.Sepref_Misc" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify" via "Draft.Sepref_Basic")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.870s elapsed time, 3.374s cpu time, 0.350s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.912s elapsed time, 3.239s cpu time, 0.801s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Sepref_Misc"
### 0.960s elapsed time, 2.798s cpu time, 0.723s GC time
Loading theory "Draft.Sepref_Basic" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate" via "Draft.Sepref_Monadify")
Loading theory "Draft.Term_Synth" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Definition")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature TERM_SYNTH =
  sig val synth_term: thm list -> Proof.context -> term -> term end
structure Term_Synth: TERM_SYNTH
### theory "Draft.Term_Synth"
### 0.145s elapsed time, 0.434s cpu time, 0.000s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.903s elapsed time, 5.580s cpu time, 0.992s GC time
Loading theory "Draft.Templates" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.078s elapsed time, 0.212s cpu time, 0.068s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.IICF_Array_MatrixTemplates")
### Ignoring duplicate rewrite rule:
### hn_refine ?\<Gamma>1 ?c1 ?\<Gamma>'1 ?R1 FAIL == True
signature SEPREF_BASIC =
  sig
    val PHASES': phase list -> phases_ctrl -> Proof.context -> tactic'
    val apply_under_lambda:
       (Proof.context -> term -> term) -> Proof.context -> term -> term
    val constrain_type_pre: typ -> term -> term
    val dbg_phases_ctrl: phases_ctrl
    val dest_hn_ctxt: term -> term * term * term
    val dest_hn_ctxt_opt: term -> (term * term * term) option
    val dest_hn_refine: term -> term * term * term * term * term
    val dest_hnr_absfun: term -> bool * (term * term list)
    val dest_lambda_rc:
       Proof.context -> term -> (term * (term -> term)) * Proof.context
    val dest_nresT: typ -> typ
    val dflt_phases_ctrl: phases_ctrl
    val flag_phases_ctrl: bool -> phases_ctrl
    val hn_refine_concl_conv_a:
       (Proof.context -> conv) -> Proof.context -> conv
    val hn_refine_conv: conv -> conv -> conv -> conv -> conv -> conv
    val hn_refine_conv_a: conv -> conv
    val is_hn_ctxt: term -> bool
    val is_hn_refine_concl: term -> bool
    val is_nresT: typ -> bool
    val is_true: term -> bool
    val list_star: term list -> term
    val mk_cequals: cterm * cterm -> cterm
    val mk_compN_pre: int -> term -> term -> term
    val mk_curry0_pre: term -> term
    val mk_curryN_pre: int -> term -> term
    val mk_curry_pre: term -> term
    val mk_entails: term * term -> term
    val mk_hn_refine: term * term * term * term * term -> term
    val mk_hnr_absfun: bool * (term * term list) -> term
    val mk_hnr_absfun': term * term list -> term
    val mk_nresT: typ -> typ
    val mk_pair_in_pre: term -> term -> term -> term
    val mk_star: term * term -> term
    val mk_uncurry0_pre: term -> term
    val mk_uncurryN_pre: int -> term -> term
    val mk_uncurry_pre: term -> term
    type phase = string * (Proof.context -> tactic') * int
    type phases_ctrl =
       {int_res: bool,
        start: string option, stop: string option, trace: bool}
    val star_permute_tac: Proof.context -> tactic
    val strip_star: term -> term list
  end
signature SEPREF_DEBUGGING =
  sig
    val DBG_CONVERSION: bool Config.T -> Proof.context -> conv -> tactic'
    val DBG_CONVERSION': Proof.context -> conv -> tactic'
    val cfg_debug_all: bool Config.T
    val dbg_msg_tac:
       bool Config.T ->
         (Proof.context -> int -> thm -> string) -> Proof.context -> tactic'
    val dbg_msg_tac':
       (Proof.context -> int -> thm -> string) -> Proof.context -> tactic'
    val dbg_trace_msg: bool Config.T -> Proof.context -> string -> unit
    val dbg_trace_msg': Proof.context -> string -> unit
    val error_tac': string -> Proof.context -> tactic'
    val is_debug: bool Config.T -> Proof.context -> bool
    val is_debug': Proof.context -> bool
    val msg_allgoals: string -> Proof.context -> int -> thm -> string
    val msg_from_subgoal:
       string ->
         (term -> Proof.context -> string) ->
           Proof.context -> int -> thm -> string
    val msg_subgoal: string -> Proof.context -> int -> thm -> string
    val msg_text: string -> Proof.context -> int -> thm -> string
    val tracing_tac': string -> Proof.context -> tactic'
    val warning_tac': string -> Proof.context -> tactic'
  end
structure Sepref_Basic: SEPREF_BASIC
structure Sepref_Debugging: SEPREF_DEBUGGING
infix 1 THEN_NEXT
infix 1 THEN_ALL_NEW_LIST
infix 1 THEN_ALL_NEW_LIST'
signature STACTICAL =
  sig
    val APPLY_LIST: tactic' list -> tactic'
    val THEN_ALL_NEW_LIST: tactic' * tactic' list -> tactic'
    val THEN_ALL_NEW_LIST': tactic' * (tactic' list * tactic') -> tactic'
    val THEN_NEXT: tactic' * tactic' -> tactic'
  end
structure STactical: STACTICAL
val THEN_ALL_NEW_LIST = fn: tactic' * tactic' list -> tactic'
val APPLY_LIST = fn: tactic' list -> tactic'
val THEN_NEXT = fn: tactic' * tactic' -> tactic'
val THEN_ALL_NEW_LIST' = fn: tactic' * (tactic' list * tactic') -> tactic'
### theory "Draft.Sepref_Basic"
### 1.284s elapsed time, 3.092s cpu time, 0.897s GC time
Loading theory "Draft.Sepref_Constraints" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
Loading theory "Draft.Sepref_Monadify" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.783s elapsed time, 1.993s cpu time, 0.713s GC time
### ML warning (line 153 of "$AFP/Refine_Imperative_HOL/Sepref_Monadify.thy"):
### (aconv) has infix status but was not preceded by op.
### ML warning (line 188 of "$AFP/Refine_Imperative_HOL/Sepref_Monadify.thy"):
### (aconv) has infix status but was not preceded by op.
structure Sepref_Monadify:
  sig
    val arity_tac: Proof.context -> int -> tactic
    val comb_tac: Proof.context -> int -> tactic
    val contains_eval: term -> bool
    val dup_tac: Proof.context -> int -> tactic
    val mark_params_conv: Proof.context -> conv
    val mark_params_tac: Proof.context -> int -> tactic
    val monadify_simproc: simproc
    val monadify_tac: bool -> Proof.context -> tactic'
    val remove_pass_tac: Proof.context -> int -> tactic
  end
signature SEPREF_CONSTRAINTS =
  sig
    val ON_SLOT: tactic -> tactic
    val WITH_SLOT: tactic' -> tactic
    val add_constraint_rule: thm -> Context.generic -> Context.generic
    val add_safe_constraint_rule: thm -> Context.generic -> Context.generic
    val cond_focus: (term -> bool) -> tactic
    val constraint_tac: Proof.context -> tactic'
    val create_slot_tac: tactic
    val del_constraint_rule: thm -> Context.generic -> Context.generic
    val del_safe_constraint_rule: thm -> Context.generic -> Context.generic
    val dest_slot_tac: tactic'
    val ensure_slot_tac: tactic
    val focus: tactic
    val get_constraint_rules: Proof.context -> thm list
    val get_safe_constraint_rules: Proof.context -> thm list
    val has_slot: thm -> bool
    val is_constraint_goal: term -> bool
    val is_constraint_tac: tactic'
    val prefer_slot_tac: tactic
    val print_slot_tac: Proof.context -> tactic
    val process_constraint_slot: Proof.context -> tactic
    val remove_slot_tac: tactic
    val safe_constraint'_tac: Proof.context -> tactic'
    val safe_constraint_tac: Proof.context -> tactic'
    val setup: theory -> theory
    val slot_constraint_tac: int -> tactic
    val solve_constraint'_tac: Proof.context -> tactic'
    val solve_constraint_slot: Proof.context -> tactic
    val solve_constraint_tac: Proof.context -> tactic'
    val some_to_slot_tac: (term -> bool) -> tactic
    val to_slot_tac: tactic'
    val unfocus: tactic
    val unfocus_ins: tactic
  end
structure Sepref_Constraints: SEPREF_CONSTRAINTS
### theory "Draft.Sepref_Constraints"
### 0.350s elapsed time, 0.850s cpu time, 0.062s GC time
Loading theory "Draft.Sepref_Frame" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
Loading theory "Draft.Sepref_Rules" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
### theory "Draft.Sepref_Monadify"
### 0.387s elapsed time, 0.962s cpu time, 0.062s GC time
consts
  hf_pres ::
    "('a => 'b => assn) => bool => ('a => 'b => assn) * ('a => 'b => assn)"
signature SEPREF_FRAME =
  sig
    val add_normrel_eq: thm -> Context.generic -> Context.generic
    val align_goal_tac: Proof.context -> tactic'
    val align_rl_conv: Proof.context -> conv
    val cfg_debug: bool Config.T
    val del_normrel_eq: thm -> Context.generic -> Context.generic
    val frame_step_tac:
       (Proof.context -> tactic') -> bool -> Proof.context -> tactic'
    val frame_tac: (Proof.context -> tactic') -> Proof.context -> tactic'
    val get_normrel_eqs: Proof.context -> thm list
    val is_merge: term -> bool
    val merge_tac: (Proof.context -> tactic') -> Proof.context -> tactic'
    val norm_goal_pre_tac: Proof.context -> tactic'
    val prepare_frame_tac: Proof.context -> tactic'
    val recover_pure_tac: Proof.context -> tactic'
    val setup: theory -> theory
    val weaken_post_tac: Proof.context -> tactic'
  end
structure Sepref_Frame: SEPREF_FRAME
### theory "Draft.Sepref_Frame"
### 0.519s elapsed time, 1.127s cpu time, 0.146s GC time
signature SEPREF_RULES =
  sig
    val add_pure_constraints_rule: Proof.context -> thm -> thm
    val analyze_hnr: Proof.context -> thm -> hnr_analysis
    val analyze_rel: term -> term option * term list * term
    val binder_rels: term -> term list
    val body_rel: term -> term
    val ensure_fref: Proof.context -> thm -> thm
    val ensure_fref_nres: Proof.context -> thm -> thm
    val ensure_hfref: Proof.context -> thm -> thm
    val ensure_hnr: Proof.context -> thm -> thm
    val fcomp_attrib: attribute context_parser
    val gen_compose: Proof.context -> thm -> thm -> thm
    type hnr_analysis =
       {ahead: term * bool,
        argrels: (term * bool) list,
        chead: term * bool,
        precond: term, prems: term list, result_rel: term, thm: thm}
    val intf_of_assn: Proof.context -> term -> typ
    val mk_hfprod: term * term -> term
    val mk_hfprods: term list -> term
    val mk_hfref_thm: Proof.context -> hnr_analysis -> thm
    val mk_rel: term option * term list * term -> term
    val mk_triv_precond: term list -> term
    val norm_fcomp_rule: Proof.context -> thm -> thm
    val prepare_hfref_synth_tac: Proof.context -> tactic'
    val pretty_hnr_analysis: Proof.context -> hnr_analysis -> Pretty.T
    val simplify_precond: Proof.context -> thm -> thm
    val strip_rel: term -> term list * term
    val to_foparam: Proof.context -> thm -> thm
    val to_fref: Proof.context -> thm -> thm
    val to_hfref: Proof.context -> thm -> thm
    val to_hnr: Proof.context -> thm -> thm
  end
structure Sepref_Rules: SEPREF_RULES
### theory "Draft.Sepref_Rules"
### 1.789s elapsed time, 2.416s cpu time, 0.197s GC time
Loading theory "Draft.Sepref_Combinator_Setup" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool" via "Draft.Sepref_Translate")
Loading theory "Draft.Sepref_Definition" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool")
### ML warning (line 62 of "$AFP/Refine_Imperative_HOL/Sepref_Combinator_Setup.thy"):
### (=) has infix status but was not preceded by op.
signature SEPREF_INTF_TYPES =
  sig
    val check_intf_type: Proof.context -> typ -> typ -> bool
    val check_intf_type_err: Proof.context -> typ -> typ -> unit
    val check_intf_type_msg:
       (typ * typ -> unit) -> Proof.context -> typ -> typ -> unit
    val decl_intf_type_cmd:
       ((string list * binding) * mixfix) * string ->
         local_theory -> local_theory
    val norm_intf_type: Proof.context -> typ -> typ
    val register_itype_rewrite: typ -> typ -> Proof.context -> local_theory
  end
structure Sepref_Intf_Types: SEPREF_INTF_TYPES
structure Sepref_Extraction:
  sig
    val heap_extraction: Refine_Automation.extraction
    val setup: theory -> theory
  end
"starts_with"
  :: "'a"
structure Sepref_Definition:
  sig
    val cfg_prep_code: bool Config.T
    val make_hnr_goal:
       term -> Proof.context -> (cterm * term) * Proof.context
    val mk_synth_term: Proof.context -> string -> string -> term
    val sd_cmd:
       (((('a Config.T * 'a) list * binding) * Token.src list) * string) *
       string
         -> Proof.context -> Proof.state
    val sd_parser:
       Token.T list ->
         (((((bool Config.T * bool) list * binding) * Token.src list) *
           string)
          *
          string)
         *
         Token.T list
    val st_cmd: (binding * string) * string -> Proof.context -> Proof.state
    val st_parser:
       Token.T list -> ((binding * string) * string) * Token.T list
  end
### theory "Draft.Sepref_Definition"
### 0.425s elapsed time, 0.857s cpu time, 0.029s GC time
### ML warning (line 347 of "$AFP/Refine_Imperative_HOL/Sepref_Combinator_Setup.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 349 of "$AFP/Refine_Imperative_HOL/Sepref_Combinator_Setup.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 436 of "$AFP/Refine_Imperative_HOL/Sepref_Combinator_Setup.thy"):
### Pattern is not exhaustive.
structure Sepref_Combinator_Setup:
  sig
    val analyze_decl: term -> term -> opkind * (typ list * typ)
    val analyze_itype_thm: thm -> term * opkind * (typ list * typ)
    val check_type_intf: Proof.context -> typ -> typ -> bool
    val cr_reg_thms:
       term ->
         typ ->
           Proof.context ->
             {arity_thm: thm option, itype_thm: thm, mcomb_thm: thm option}
    val gen_pr_const_pat: Proof.context -> term -> thm option * term
    val generate_basename: Proof.context -> term -> string
    val get_nt_rule: thm -> typ * typ
    val import_terms_disj:
       term list -> Proof.context -> term list * Proof.context
    val is_valid_abs_op: Proof.context -> term -> bool
    val map_type: Proof.context -> typ -> typ
    val map_type_raw: Proof.context -> (typ * typ) list -> typ -> typ
    val mk_arity: Proof.context -> term -> int -> thm
    val mk_itype: Proof.context -> term -> term -> thm
    val mk_mcomb: Proof.context -> term -> int -> thm
    datatype opkind = COMB | PURE
    val read_term_type:
       string ->
         string option -> Proof.context -> (term * typ) * Proof.context
    type reg_thms =
       {arity_thm: thm option, itype_thm: thm, mcomb_thm: thm option}
    val sepref_register_adhoc:
       (term * typ option) list -> Context.generic -> Context.generic
    val sepref_register_adhoc_attr: (term * typ option) list -> attribute
    val sepref_register_adhoc_attr_decl:
       Context.generic * Token.T list ->
         attribute * (Context.generic * Token.T list)
    val sepref_register_adhoc_parser:
       Context.generic * Token.T list ->
         (term * typ option) list * (Context.generic * Token.T list)
    val sepref_register_adhoc_single:
       term * typ option -> Context.generic -> Context.generic
    val sepref_register_cmd:
       ((string option * string) * string option) list ->
         Proof.context -> Proof.context
    val sepref_register_parser:
       Token.T list ->
         ((string option * string) * string option) list * Token.T list
    val sepref_register_single:
       string ->
         term ->
           typ ->
             Proof.context ->
               ((thm option * thm option) * thm) * local_theory
    val sepref_register_single_cmd:
       (string option * string) * string option ->
         Proof.context -> local_theory
  end
### theory "Draft.Sepref_Combinator_Setup"
### 0.526s elapsed time, 0.985s cpu time, 0.075s GC time
Loading theory "Draft.Sepref_Translate" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool")
structure Sepref_Translate:
  sig
    val cfg_debug: bool Config.T
    val check_side_conds: thm -> unit list
    val dbg_msg_tac:
       (Proof.context -> int -> thm -> string) -> Proof.context -> tactic'
    val gen_msg_analyze: term -> Proof.context -> string
    val gen_trans_op_tac: bool -> Proof.context -> tactic'
    val gen_trans_step_tac: bool -> Proof.context -> tactic'
    val gen_trans_tac: bool -> Proof.context -> tactic'
    val msg_analyze: string -> Proof.context -> int -> thm -> string
    structure sepref_comb_rules: NAMED_SORTED_THMS
    structure sepref_fr_rules: NAMED_SORTED_THMS
    val setup: theory -> theory
    val side_cond_dispatch_tac:
       bool -> (int -> tactic) -> Proof.context -> tactic'
    val side_constraint_tac: Proof.context -> tactic'
    val side_fallback_tac: Proof.context -> int -> tactic
    val side_frame_tac: Proof.context -> tactic'
    val side_gen_algo_tac: Proof.context -> int -> tactic
    val side_merge_tac: Proof.context -> tactic'
    val side_mono_tac: Proof.context -> int -> tactic
    val side_pref_def_tac: Proof.context -> int -> tactic
    val side_rprem_tac: Proof.context -> int -> tactic
    val side_unfold_tac: Proof.context -> int -> tactic
    val trans_comb_tac: Proof.context -> int -> tactic
    val trans_keep_tac: Proof.context -> tactic'
    val trans_step_keep_tac: Proof.context -> tactic'
    val trans_step_tac: Proof.context -> tactic'
    val trans_tac: Proof.context -> tactic'
  end
"PR_CONST (op_ASSERT_bind I)"
  :: "'a nres => 'a nres"
structure Sepref_Import_Param:
  sig
    val add_PR_CONST: thm -> thm
    val import: Proof.context -> thm -> thm
    val import_attr:
       Context.generic * Token.T list ->
         attribute * (Context.generic * Token.T list)
    val import_attr_rl:
       Context.generic * Token.T list ->
         attribute * (Context.generic * Token.T list)
    val setup: theory -> theory
    val to_import_fo: Proof.context -> thm -> thm
  end
### theory "Draft.Sepref_Translate"
### 0.907s elapsed time, 0.937s cpu time, 0.045s GC time
Loading theory "Draft.Sepref_Intf_Util" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref" via "Draft.Sepref_Tool")
### ML warning (line 926 of "$AFP/Refine_Imperative_HOL/Sepref_Intf_Util.thy"):
### Value identifier (unfold_PR_CONST_tac) has not been referenced.
signature SEPREF_INTF_UTIL =
  sig
    val cfg_def: bool Config.T
    val cfg_ismop: bool Config.T
    val cfg_mop: bool Config.T
    val cfg_rawgoals: bool Config.T
    val cleanup_constraints: Proof.context -> thm -> thm
    val get_intf_of_rel: Proof.context -> term -> typ
    val list_filtered_subterms: (term -> 'a option) -> term -> 'a list
    val simp_precond_tac: Proof.context -> tactic'
    val to_assns_rl: bool -> Proof.context -> thm -> thm
  end
structure Sepref_Intf_Util: SEPREF_INTF_UTIL
### theory "Draft.Sepref_Intf_Util"
### 1.214s elapsed time, 1.276s cpu time, 0.095s GC time
Loading theory "Draft.Sepref_Tool" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref")
structure Sepref:
  sig
    val cons_init_tac: Proof.context -> int -> tactic
    val cons_solve_tac: bool -> Proof.context -> int -> tactic
    val id_init_tac: Proof.context -> int -> tactic
    val id_solve_tac: Proof.context -> int -> tactic
    val id_step_tac: Proof.context -> int -> tactic
    val id_tac: Proof.context -> int -> tactic
    val monadify_tac: bool -> Proof.context -> tactic'
    val opt_tac: Proof.context -> int -> tactic
    val preproc_tac: Proof.context -> int -> tactic
    structure sepref_opt_simps: NAMED_THMS
    structure sepref_opt_simps2: NAMED_THMS
    structure sepref_preproc_simps: NAMED_THMS
    val sepref_tac: bool -> Proof.context -> int -> tactic
    val setup: theory -> theory
    val trans_tac: Proof.context -> tactic'
  end
val SIMPLE_METHOD_NOPARAM' = fn:
   ('a -> int -> tactic) -> 'b -> ('a -> Method.method) * 'b
val SIMPLE_METHOD_NOPARAM = fn:
   ('a -> tactic) -> 'b -> ('a -> Method.method) * 'b
COPY ::\<^sub>i TYPE(?'a => ?'a)
val prec_extract_eqs_tac = fn: Proof.context -> int -> tactic
val prep_comb_rule = fn: thm -> thm
### theory "Draft.Sepref_Tool"
### 0.383s elapsed time, 0.383s cpu time, 0.000s GC time
Loading theory "Draft.Sepref_HOL_Bindings" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref")
PR_CONST (ASSN_ANNOT A) ::\<^sub>i TYPE('a => 'a)
IS_ID ?R ==> IS_LEFT_TOTAL ?R
IS_ID ?R ==> IS_RIGHT_TOTAL ?R
IS_BELOW_ID ?R ==> IS_LEFT_UNIQUE ?R
IS_BELOW_ID ?R ==> single_valued ?R
IS_ID ?R ==> IS_BELOW_ID ?R
single_valued ?R ==> precise (pure ?R)
[| precise ?R; single_valued ?S |] ==> precise (hr_comp ?R ?S)
### Ignoring duplicate rewrite rule:
### b_rel (b_rel ?R1 ?P1.1) ?P2.1 == b_rel ?R1 (%x. ?P1.1 x & ?P2.1 x)
### Ignoring duplicate rewrite rule:
### b_assn (b_assn ?A1 ?P1.1) ?P2.1 == b_assn ?A1 (%x. ?P1.1 x & ?P2.1 x)
Found termination order: "{}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
Inr ::\<^sub>i TYPE(?'a => ?'b + ?'a)
Inl ::\<^sub>i TYPE(?'a => ?'a + ?'b)
case_sum ::\<^sub>i TYPE((?'a => ?'b) => (?'c => ?'b) => ?'a + ?'c => ?'b)
isl ::\<^sub>i TYPE(?'a + ?'b => bool)
projl ::\<^sub>i TYPE(?'a + ?'b => ?'a)
projr ::\<^sub>i TYPE(?'a + ?'b => ?'b)
PR_CONST STR '''' ::\<^sub>i TYPE(String.literal)
PR_CONST (String.Literal b0 b1 b2 b3 b4 b5 b6 s) ::\<^sub>i
TYPE(String.literal)
### theory "Draft.Sepref_HOL_Bindings"
### 1.949s elapsed time, 2.715s cpu time, 1.058s GC time
Loading theory "Draft.Sepref_Foreach" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref")
"FOREACH\<^sub>O\<^sub>C\<^bsup>R,I\<^esup>"
  :: "'a set => ('b => bool) => ('a => 'b => 'b nres) => 'b => 'b nres"
### Ambiguous input (line 233 of "$AFP/Refine_Imperative_HOL/Sepref_Foreach.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Sepref_Id_Op.intf_type"
###     ("_applC" ("_position" PR_CONST)
###       ("_applC" ("_position" FOREACHoci)
###         ("_cargs" ("_position" R) ("_position" I))))
###     ("_TYPE"
###       ("\<^type>fun" ("_tapp" ("_position_sort" 'c) ("_type_name" set))
###         ("\<^type>fun"
###           ("\<^type>fun" ("_position_sort" 'd) ("_type_name" bool))
###           ("\<^type>fun"
###             ("\<^type>fun" ("_position_sort" 'c)
###               ("\<^type>fun" ("_position_sort" 'd)
###                 ("_tapp" ("_position_sort" 'd) ("_type_name" nres))))
###             ("\<^type>fun" ("_position_sort" 'd)
###               ("_tapp" ("_position_sort" 'd) ("_type_name" nres)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Autoref_Id_Ops.CONST_INTF"
###     ("_applC" ("_position" PR_CONST)
###       ("_applC" ("_position" FOREACHoci)
###         ("_cargs" ("_position" R) ("_position" I))))
###     ("_TYPE"
###       ("\<^type>fun" ("_tapp" ("_position_sort" 'c) ("_type_name" set))
###         ("\<^type>fun"
###           ("\<^type>fun" ("_position_sort" 'd) ("_type_name" bool))
###           ("\<^type>fun"
###             ("\<^type>fun" ("_position_sort" 'c)
###               ("\<^type>fun" ("_position_sort" 'd)
###                 ("_tapp" ("_position_sort" 'd) ("_type_name" nres))))
###             ("\<^type>fun" ("_position_sort" 'd)
###               ("_tapp" ("_position_sort" 'd) ("_type_name" nres)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Sepref_Foreach"
### 0.874s elapsed time, 0.933s cpu time, 0.086s GC time
Loading theory "Draft.Sepref_Improper" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix" via "Draft.Sepref")
pho_apply ::\<^sub>i TYPE((?'a => ?'b) => ?'a => ?'b)
### theory "Draft.Sepref_Improper"
### 0.038s elapsed time, 0.040s cpu time, 0.000s GC time
Loading theory "Draft.Sepref" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix" via "Draft.IICF_Matrix")
### theory "Draft.Sepref"
### 0.348s elapsed time, 0.436s cpu time, 0.123s GC time
Loading theory "Draft.IICF_Matrix" (required by "Draft.IICF_Array_MatrixTemplates" via "Draft.IICF_Array_Matrix")
op_mtx_new ::\<^sub>i TYPE((nat * nat => ?'a) => ?'a i_mtx)
mop_mtx_new ::\<^sub>i TYPE((nat * nat => ?'a) => ?'a i_mtx nres)
op_mtx_copy ::\<^sub>i TYPE(?'a i_mtx => ?'a i_mtx)
mop_mtx_copy ::\<^sub>i TYPE(?'a i_mtx => ?'a i_mtx nres)
op_mtx_get ::\<^sub>i TYPE(?'a i_mtx => nat * nat => ?'a)
mop_mtx_get ::\<^sub>i TYPE(?'a i_mtx => nat * nat => ?'a nres)
op_mtx_set ::\<^sub>i TYPE(?'a i_mtx => nat * nat => ?'a => ?'a i_mtx)
mop_mtx_set ::\<^sub>i TYPE(?'a i_mtx => nat * nat => ?'a => ?'a i_mtx nres)
op_mtx_nonzero ::\<^sub>i TYPE(?'a i_mtx => (nat * nat) set)
mop_mtx_nonzero ::\<^sub>i TYPE(?'a i_mtx => (nat * nat) set nres)
locale pointwise_op
  fixes f :: "'p => 's => 's"
    and q :: "'s => 'p => 'a"
  assumes "pointwise_op f q"
PR_CONST (mtx_pointwise_unop f) ::\<^sub>i TYPE('a i_mtx => 'a i_mtx)
locale mtx_pointwise_unop_loc
  fixes N :: "nat"
    and M :: "nat"
    and f :: "nat * nat => 'a => 'a"
  assumes "mtx_pointwise_unop_loc N M f"
### Ambiguous input (line 164 of "$AFP/Refine_Imperative_HOL/IICF/Intf/IICF_Matrix.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_position" opr_fold_impl)
###   ("_applC" ("_position" fold)
###     ("_cargs"
###       ("_lambda" ("_position" i)
###         ("_applC" ("_position" fold)
###           ("_cargs"
###             ("_lambda" ("_pttrns" ("_position" j) ("_position" m))
###               ("_Update" ("_position" m)
###                 ("_updbind"
###                   ("_tuple" ("_position" i) ("_tuple_arg" ("_position" j)))
###                   ("_applC" ("_position" f)
###                     ("_cargs"
###                       ("_tuple" ("_position" i)
###                         ("_tuple_arg" ("_position" j)))
###                       ("_applC" ("_position" m)
###                         ("_tuple" ("_position" i)
###                           ("_tuple_arg" ("_position" j)))))))))
###             ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###               ("_position" M)))))
###       ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###         ("_position" N)))))
### ("\<^const>Pure.eq" ("_position" opr_fold_impl)
###   ("_applC" ("_position" fold)
###     ("_cargs"
###       ("_lambda" ("_position" i)
###         ("_applC" ("_position" fold)
###           ("_cargs"
###             ("_lambda" ("_pttrns" ("_position" j) ("_position" m))
###               ("_applC" ("_position" m)
###                 ("\<^const>Ref.update"
###                   ("_tuple" ("_position" i) ("_tuple_arg" ("_position" j)))
###                   ("_applC" ("_position" f)
###                     ("_cargs"
###                       ("_tuple" ("_position" i)
###                         ("_tuple_arg" ("_position" j)))
###                       ("_applC" ("_position" m)
###                         ("_tuple" ("_position" i)
###                           ("_tuple_arg" ("_position" j)))))))))
###             ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###               ("_position" M)))))
###       ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###         ("_position" N)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale mtx_pointwise_unop_gen_impl
  fixes N :: "nat"
    and M :: "nat"
    and f :: "nat * nat => 'a => 'a"
    and assn :: "(nat * nat => 'a) => 'i => assn"
    and A :: "'a => 'ai => assn"
    and get_impl :: "'i => nat * nat => 'ai Heap"
    and set_impl :: "'i => nat * nat => 'ai => 'i Heap"
    and fi :: "nat * nat => 'ai => 'ai Heap"
  assumes "mtx_pointwise_unop_gen_impl N M f assn A get_impl set_impl fi"
### Cannot skip proof of schematic goal statement
(imp_for' 0 N
  (%xb. imp_for' 0 M
         (%xd \<sigma>'''.
             get_impl \<sigma>''' (xb, xd) >>=
             (%x. fi (xb, xd) x >>= set_impl \<sigma>''' (xb, xd)))),
 (RETURN \<circ>\<circ>\<circ> mtx_pointwise_unop_loc.opr_fold_impl N) M f)
: assn\<^sup>d \<rightarrow>\<^sub>a assn
PR_CONST (mtx_pointwise_binop f) ::\<^sub>i
TYPE('a i_mtx => 'a i_mtx => 'a i_mtx)
locale mtx_pointwise_binop_loc
  fixes N :: "nat"
    and M :: "nat"
    and f :: "'a => 'a => 'a"
  assumes "mtx_pointwise_binop_loc f"
### Ambiguous input (line 242 of "$AFP/Refine_Imperative_HOL/IICF/Intf/IICF_Matrix.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" opr_fold_impl)
###     ("_cargs" ("_position" m) ("_position" n)))
###   ("_applC" ("_position" fold)
###     ("_cargs"
###       ("_lambda" ("_position" i)
###         ("_applC" ("_position" fold)
###           ("_cargs"
###             ("_lambda" ("_pttrns" ("_position" j) ("_position" m))
###               ("_Update" ("_position" m)
###                 ("_updbind"
###                   ("_tuple" ("_position" i) ("_tuple_arg" ("_position" j)))
###                   ("_applC" ("_position" f)
###                     ("_cargs"
###                       ("_applC" ("_position" m)
###                         ("_tuple" ("_position" i)
###                           ("_tuple_arg" ("_position" j))))
###                       ("_applC" ("_position" n)
###                         ("_tuple" ("_position" i)
###                           ("_tuple_arg" ("_position" j)))))))))
###             ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###               ("_position" M)))))
###       ("_cargs"
###         ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###           ("_position" N))
###         ("_position" m)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" opr_fold_impl)
###     ("_cargs" ("_position" m) ("_position" n)))
###   ("_applC" ("_position" fold)
###     ("_cargs"
###       ("_lambda" ("_position" i)
###         ("_applC" ("_position" fold)
###           ("_cargs"
###             ("_lambda" ("_pttrns" ("_position" j) ("_position" m))
###               ("_applC" ("_position" m)
###                 ("\<^const>Ref.update"
###                   ("_tuple" ("_position" i) ("_tuple_arg" ("_position" j)))
###                   ("_applC" ("_position" f)
###                     ("_cargs"
###                       ("_applC" ("_position" m)
###                         ("_tuple" ("_position" i)
###                           ("_tuple_arg" ("_position" j))))
###                       ("_applC" ("_position" n)
###                         ("_tuple" ("_position" i)
###                           ("_tuple_arg" ("_position" j)))))))))
###             ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###               ("_position" M)))))
###       ("_cargs"
###         ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###           ("_position" N))
###         ("_position" m)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale mtx_pointwise_binop_gen_impl
  fixes N :: "nat"
    and M :: "nat"
    and f :: "'a => 'a => 'a"
    and assn :: "(nat * nat => 'a) => 'i => assn"
    and A :: "'a => 'ai => assn"
    and get_impl :: "'i => nat * nat => 'ai Heap"
    and set_impl :: "'i => nat * nat => 'ai => 'i Heap"
    and fi :: "'ai => 'ai => 'ai Heap"
  assumes "mtx_pointwise_binop_gen_impl N M f assn A get_impl set_impl fi"
### Cannot skip proof of schematic goal statement
(uncurry
  (%ai bi.
      imp_for' 0 N
       (%xa. imp_for' 0 M
              (%xc \<sigma>'''.
                  get_impl \<sigma>''' (xa, xc) >>=
                  (%x. get_impl bi (xa, xc) >>=
                       (%xb. fi x xb >>= set_impl \<sigma>''' (xa, xc)))))
       ai),
 uncurry
  ((RETURN \<circ>\<circ>\<circ> mtx_pointwise_binop_loc.opr_fold_impl N M)
    f))
: assn\<^sup>d *\<^sub>a assn\<^sup>k \<rightarrow>\<^sub>a assn
PR_CONST (mtx_pointwise_cmpop f g) ::\<^sub>i
TYPE('a i_mtx => 'a i_mtx => bool)
locale mtx_pointwise_cmpop_loc
  fixes N :: "nat"
    and M :: "nat"
    and f :: "'a => 'a => bool"
    and g :: "'a => 'a => bool"
  assumes "mtx_pointwise_cmpop_loc f g"
locale mtx_pointwise_cmpop_gen_impl
  fixes N :: "nat"
    and M :: "nat"
    and f :: "'a => 'a => bool"
    and g :: "'a => 'a => bool"
    and assn :: "(nat * nat => 'a) => 'i => assn"
    and A :: "'a => 'ai => assn"
    and get_impl :: "'i => nat * nat => 'ai Heap"
    and fi :: "'ai => 'ai => bool Heap"
    and gi :: "'ai => 'ai => bool Heap"
  assumes "mtx_pointwise_cmpop_gen_impl N M f g assn A get_impl fi gi"
### Cannot skip proof of schematic goal statement
(uncurry
  (%ai bi.
      imp_for 0 N (%\<sigma>. return (\<sigma> ~= 2))
       (%xb. imp_for 0 M (%\<sigma>''. return (\<sigma>'' ~= 2))
              (%xd \<sigma>'''.
                  get_impl ai (xb, xd) >>=
                  (%x. get_impl bi (xb, xd) >>=
                       (%xa. fi x xa >>=
                             (%x'e. if x'e
                                    then if \<sigma>''' = 0
   then get_impl ai (xb, xd) >>=
        (%x. get_impl bi (xb, xd) >>=
             (%xa. gi x xa >>=
                   (%x'g. return (if x'g then 1 else \<sigma>'''))))
   else return \<sigma>'''
                                    else return 2)))))
       0 >>=
      (%x'. return (x' = 1))),
 uncurry opr_fold_impl)
: assn\<^sup>d *\<^sub>a assn\<^sup>k \<rightarrow>\<^sub>a bool_assn
### theory "Draft.IICF_Matrix"
### 2.188s elapsed time, 3.105s cpu time, 1.276s GC time
Loading theory "Draft.IICF_Array_Matrix" (required by "Draft.IICF_Array_MatrixTemplates")
op_amtx_dfltNxM $ N $ M == UNPROTECT (op_amtx_dfltNxM N M)
PR_CONST (op_amtx_dfltNxM N M) ::\<^sub>i TYPE(?'a => ?'a i_mtx)
IICF_Array_Matrix.mop_op_amtx_dfltNxM $ N $ M ==
UNPROTECT local.mop_op_amtx_dfltNxM
PR_CONST local.mop_op_amtx_dfltNxM ::\<^sub>i TYPE(?'a1 => ?'a1 i_mtx nres)
### Ambiguous input (line 123 of "$AFP/Refine_Imperative_HOL/IICF/Impl/IICF_Array_Matrix.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i) ("_position" N)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" j)
###           ("_position" M)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Hoare_Triple.hoare_triple"
###       ("_applC" ("_position" is_amtx)
###         ("_cargs" ("_position" N)
###           ("_cargs" ("_position" M)
###             ("_cargs" ("_position" c) ("_position" mtx)))))
###       ("_applC" ("_position" mtx_set)
###         ("_cargs" ("_position" M)
###           ("_cargs" ("_position" mtx)
###             ("_cargs"
###               ("_tuple" ("_position" i) ("_tuple_arg" ("_position" j)))
###               ("_position" v)))))
###       ("_lambda" ("_position" r)
###         ("_applC" ("_position" is_amtx)
###           ("_cargs" ("_position" N)
###             ("_cargs" ("_position" M)
###               ("_cargs"
###                 ("_applC" ("_position" c)
###                   ("\<^const>Ref.update"
###                     ("_tuple" ("_position" i)
###                       ("_tuple_arg" ("_position" j)))
###                     ("_position" v)))
###                 ("_position" r)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" i) ("_position" N)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" j)
###           ("_position" M)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Hoare_Triple.hoare_triple"
###       ("_applC" ("_position" is_amtx)
###         ("_cargs" ("_position" N)
###           ("_cargs" ("_position" M)
###             ("_cargs" ("_position" c) ("_position" mtx)))))
###       ("_applC" ("_position" mtx_set)
###         ("_cargs" ("_position" M)
###           ("_cargs" ("_position" mtx)
###             ("_cargs"
###               ("_tuple" ("_position" i) ("_tuple_arg" ("_position" j)))
###               ("_position" v)))))
###       ("_lambda" ("_position" r)
###         ("_applC" ("_position" is_amtx)
###           ("_cargs" ("_position" N)
###             ("_cargs" ("_position" M)
###               ("_cargs"
###                 ("_Update" ("_position" c)
###                   ("_updbind"
###                     ("_tuple" ("_position" i)
###                       ("_tuple_arg" ("_position" j)))
###                     ("_position" v)))
###                 ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Cannot skip proof of schematic goal statement
CONSTRAINT (IS_PURE PRES_ZERO_UNIQUE) ?A ==>
(mtx_tabulate ?N ?M, RETURN o op_mtx_new)
: [%x. mtx_nonzero x
       <= {0..<?N} \<times>
          {0..<?M}]\<^sub>a (pure
                              (nat_rel \<times>\<^sub>r
                               nat_rel \<rightarrow>
                               the_pure
                                ?A))\<^sup>k \<rightarrow> amtx_assn ?N ?M
                      ?A
CONSTRAINT (IS_PURE PRES_ZERO_UNIQUE) ?A ==>
(mtx_tabulate ?N ?M, mop_mtx_new)
: [%x. mtx_nonzero x
       <= {0..<?N} \<times>
          {0..<?M}]\<^sub>a (pure
                              (nat_rel \<times>\<^sub>r
                               nat_rel \<rightarrow>
                               the_pure
                                ?A))\<^sup>k \<rightarrow> amtx_assn ?N ?M
                      ?A
### Cannot skip proof of schematic goal statement
(amtx_copy, RETURN o op_mtx_copy)
: (amtx_assn ?N ?M ?A)\<^sup>k \<rightarrow>\<^sub>a amtx_assn ?N ?M ?A
(amtx_copy, mop_mtx_copy)
: (amtx_assn ?N ?M ?A)\<^sup>k \<rightarrow>\<^sub>a amtx_assn ?N ?M ?A
PR_CONST (op_amtx_new N M) ::\<^sub>i TYPE((nat * nat => ?'a) => ?'a i_mtx)
### Cannot skip proof of schematic goal statement
CONSTRAINT (IS_PURE PRES_ZERO_UNIQUE) ?A ==>
(amtx_dflt N M, (RETURN \<circ>\<circ> PR_CONST) (op_amtx_dfltNxM N M))
: ?A\<^sup>k \<rightarrow>\<^sub>a amtx_assn N M ?A
CONSTRAINT (IS_PURE PRES_ZERO_UNIQUE) ?A ==>
(amtx_dflt N M, PR_CONST (mop_op_amtx_dfltNxM N M))
: ?A\<^sup>k \<rightarrow>\<^sub>a amtx_assn N M ?A
### Cannot skip proof of schematic goal statement
CONSTRAINT is_pure ?A ==>
(uncurry (mtx_get M), uncurry (RETURN \<circ>\<circ> op_mtx_get))
: [%(x, xa, xb).
      xa < N &
      xb < M]\<^sub>a (amtx_assn N M ?A)\<^sup>k *\<^sub>a
                      (nat_assn \<times>\<^sub>a
                       nat_assn)\<^sup>k \<rightarrow> ?A
CONSTRAINT is_pure ?A ==>
(uncurry (mtx_get M), uncurry mop_mtx_get)
: [%(x, xa, xb).
      xa < N &
      xb < M]\<^sub>a (amtx_assn N M ?A)\<^sup>k *\<^sub>a
                      (nat_assn \<times>\<^sub>a
                       nat_assn)\<^sup>k \<rightarrow> ?A
### Cannot skip proof of schematic goal statement
CONSTRAINT is_pure ?A ==>
(uncurry2 (mtx_set M), uncurry2 (RETURN \<circ>\<circ>\<circ> op_mtx_set))
: [%((x, xa, xb), xc).
      xa < N &
      xb < M]\<^sub>a (amtx_assn N M ?A)\<^sup>d *\<^sub>a
                      (nat_assn \<times>\<^sub>a nat_assn)\<^sup>k *\<^sub>a
                      ?A\<^sup>k \<rightarrow> amtx_assn N M ?A
CONSTRAINT is_pure ?A ==>
(uncurry2 (mtx_set M), uncurry2 mop_mtx_set)
: [%((x, xa, xb), xc).
      xa < N &
      xb < M]\<^sub>a (amtx_assn N M ?A)\<^sup>d *\<^sub>a
                      (nat_assn \<times>\<^sub>a nat_assn)\<^sup>k *\<^sub>a
                      ?A\<^sup>k \<rightarrow> amtx_assn N M ?A
### Cannot skip proof of schematic goal statement
CONSTRAINT is_pure ?A ==>
(uncurry (mtx_get M), uncurry (RETURN \<circ>\<circ> op_mtx_get))
: (amtx_assn N M ?A)\<^sup>k *\<^sub>a
  (nbn_assn N \<times>\<^sub>a nbn_assn M)\<^sup>k \<rightarrow>\<^sub>a ?A
CONSTRAINT is_pure ?A ==>
(uncurry (mtx_get M), uncurry mop_mtx_get)
: (amtx_assn N M ?A)\<^sup>k *\<^sub>a
  (nbn_assn N \<times>\<^sub>a nbn_assn M)\<^sup>k \<rightarrow>\<^sub>a ?A
### Cannot skip proof of schematic goal statement
CONSTRAINT is_pure ?A ==>
(uncurry2 (mtx_set M), uncurry2 (RETURN \<circ>\<circ>\<circ> op_mtx_set))
: (amtx_assn N M ?A)\<^sup>d *\<^sub>a
  (nbn_assn N \<times>\<^sub>a nbn_assn M)\<^sup>k *\<^sub>a
  ?A\<^sup>k \<rightarrow>\<^sub>a amtx_assn N M ?A
CONSTRAINT is_pure ?A ==>
(uncurry2 (mtx_set M), uncurry2 mop_mtx_set)
: (amtx_assn N M ?A)\<^sup>d *\<^sub>a
  (nbn_assn N \<times>\<^sub>a nbn_assn M)\<^sup>k *\<^sub>a
  ?A\<^sup>k \<rightarrow>\<^sub>a amtx_assn N M ?A
IICF_Array_Matrix.op_amtx_lin_get $ M == UNPROTECT local.op_amtx_lin_get
PR_CONST local.op_amtx_lin_get ::\<^sub>i TYPE(?'a1 i_mtx => nat => ?'a1)
IICF_Array_Matrix.mop_amtx_lin_get $ M == UNPROTECT local.mop_amtx_lin_get
PR_CONST local.mop_amtx_lin_get ::\<^sub>i
TYPE(?'a2 i_mtx => nat => ?'a2 nres)
IICF_Array_Matrix.op_amtx_lin_set $ M == UNPROTECT local.op_amtx_lin_set
PR_CONST local.op_amtx_lin_set ::\<^sub>i
TYPE(?'a3 i_mtx => nat => ?'a3 => ?'a3 i_mtx)
IICF_Array_Matrix.mop_amtx_lin_set $ M == UNPROTECT local.mop_amtx_lin_set
PR_CONST local.mop_amtx_lin_set ::\<^sub>i
TYPE(?'a4 i_mtx => nat => ?'a4 => ?'a4 i_mtx nres)
### Cannot skip proof of schematic goal statement
CONSTRAINT is_pure ?A ==>
(uncurry Array.nth,
 uncurry ((RETURN \<circ>\<circ>\<circ> PR_CONST) local.op_amtx_lin_get))
: [%(x, xa).
      xa < N *
           M]\<^sub>a (amtx_assn N M ?A)\<^sup>k *\<^sub>a
                      nat_assn\<^sup>k \<rightarrow> ?A
CONSTRAINT is_pure ?A ==>
(uncurry Array.nth, uncurry (PR_CONST local.mop_amtx_lin_get))
: [%(x, xa).
      xa < N *
           M]\<^sub>a (amtx_assn N M ?A)\<^sup>k *\<^sub>a
                      nat_assn\<^sup>k \<rightarrow> ?A
### Cannot skip proof of schematic goal statement
CONSTRAINT is_pure ?A ==>
(uncurry2 (%m i x. Array.upd i x m),
 uncurry2 (RETURN \<circ>\<circ>\<circ> PR_CONST local.op_amtx_lin_set))
: [%((x, xa), xb).
      xa < N *
           M]\<^sub>a (amtx_assn N M ?A)\<^sup>d *\<^sub>a
                      nat_assn\<^sup>k *\<^sub>a
                      ?A\<^sup>k \<rightarrow> amtx_assn N M ?A
CONSTRAINT is_pure ?A ==>
(uncurry2 (%m i x. Array.upd i x m),
 uncurry2 (PR_CONST local.mop_amtx_lin_set))
: [%((x, xa), xb).
      xa < N *
           M]\<^sub>a (amtx_assn N M ?A)\<^sup>d *\<^sub>a
                      nat_assn\<^sup>k *\<^sub>a
                      ?A\<^sup>k \<rightarrow> amtx_assn N M ?A
### Ambiguous input (line 295 of "$AFP/Refine_Imperative_HOL/IICF/Impl/IICF_Array_Matrix.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" m)
###       ("_updbind"
###         ("_tuple"
###           ("\<^const>Rings.divide_class.divide" ("_position" i)
###             ("_position" M))
###           ("_tuple_arg"
###             ("\<^const>Rings.modulo_class.modulo" ("_position" i)
###               ("_position" M))))
###         ("_position" x)))
###     ("_applC" ("_position" op_amtx_lin_set)
###       ("_cargs" ("_position" M)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" i) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" m)
###       ("\<^const>Ref.update"
###         ("_tuple"
###           ("\<^const>Rings.divide_class.divide" ("_position" i)
###             ("_position" M))
###           ("_tuple_arg"
###             ("\<^const>Rings.modulo_class.modulo" ("_position" i)
###               ("_position" M))))
###         ("_position" x)))
###     ("_applC" ("_position" op_amtx_lin_set)
###       ("_cargs" ("_position" M)
###         ("_cargs" ("_position" m)
###           ("_cargs" ("_position" i) ("_position" x)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale amtx_pointwise_unop_impl
  fixes N :: "nat"
    and M :: "nat"
    and f :: "nat * nat => 'a => 'a"
    and A :: "'a => 'ai => assn"
    and fi :: "nat * nat => 'ai => 'ai Heap"
  assumes "amtx_pointwise_unop_impl N M f A fi"
### Cannot skip proof of schematic goal statement
(imp_for' 0 (M * N)
  (%xb \<sigma>.
      Array.nth \<sigma> xb >>=
      (%x. fi (xb div M, xb mod M) x >>=
           (%x'b. Array.upd xb x'b \<sigma>))),
 (RETURN \<circ>\<circ>\<circ> mtx_pointwise_unop_loc.opr_fold_impl N) M f)
: (amtx_assn N M A)\<^sup>d \<rightarrow>\<^sub>a amtx_assn N M A
locale amtx_pointwise_binop_impl
  fixes N :: "nat"
    and M :: "nat"
    and f :: "'a => 'a => 'a"
    and A :: "'a => 'ai => assn"
    and fi :: "'ai => 'ai => 'ai Heap"
  assumes "amtx_pointwise_binop_impl f A fi"
### Cannot skip proof of schematic goal statement
(uncurry
  (%ai bi.
      imp_for' 0 (M * N)
       (%xa \<sigma>.
           Array.nth \<sigma> xa >>=
           (%x. Array.nth bi xa >>=
                (%xb. fi x xb >>= (%x'b. Array.upd xa x'b \<sigma>))))
       ai),
 uncurry
  ((RETURN \<circ>\<circ>\<circ> mtx_pointwise_binop_loc.opr_fold_impl N M)
    f))
: (amtx_assn N M A)\<^sup>d *\<^sub>a
  (amtx_assn N M A)\<^sup>k \<rightarrow>\<^sub>a amtx_assn N M A
locale amtx_pointwise_cmpop_impl
  fixes N :: "nat"
    and M :: "nat"
    and f :: "'a => 'a => bool"
    and g :: "'a => 'a => bool"
    and A :: "'a => 'ai => assn"
    and fi :: "'ai => 'ai => bool Heap"
    and gi :: "'ai => 'ai => bool Heap"
  assumes "amtx_pointwise_cmpop_impl f g A fi gi"
### Cannot skip proof of schematic goal statement
(uncurry
  (%ai bi.
      imp_for 0 (N * M) (%\<sigma>. return (\<sigma> ~= 2))
       (%xb \<sigma>.
           Array.nth ai xb >>=
           (%x. Array.nth bi xb >>=
                (%xa. fi x xa >>=
                      (%x'c. if x'c
                             then if \<sigma> = 0
                                  then Array.nth ai xb >>=
 (%x. Array.nth bi xb >>=
      (%xa. gi x xa >>= (%x'e. return (if x'e then 1 else \<sigma>))))
                                  else return \<sigma>
                             else return 2))))
       0 >>=
      (%x'. return (x' = 1))),
 uncurry opr_fold_impl)
: (amtx_assn N M A)\<^sup>d *\<^sub>a
  (amtx_assn N M A)\<^sup>k \<rightarrow>\<^sub>a bool_assn
### Ambiguous input (line 436 of "$AFP/Refine_Imperative_HOL/IICF/Impl/IICF_Array_Matrix.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" scmul) ("_cargs" ("_position" x) ("_position" m)))
###   ("_applC" ("_position" nfoldli)
###     ("_cargs"
###       ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###         ("_position" N))
###       ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###         ("_cargs"
###           ("_lambda" ("_pttrns" ("_position" i) ("_position" m))
###             ("_applC" ("_position" nfoldli)
###               ("_cargs"
###                 ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###                   ("_position" M))
###                 ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###                   ("_cargs"
###                     ("_lambda" ("_pttrns" ("_position" j) ("_position" m))
###                       ("_do_block"
###                         ("_do_cons"
###                           ("_do_let" ("_position" mij)
###                             ("_applC" ("_position" m)
###                               ("_tuple" ("_position" i)
###                                 ("_tuple_arg" ("_position" j)))))
###                           ("_do_final"
###                             ("_applC" ("_position" RETURN)
###                               ("_Update" ("_position" m)
###                                 ("_updbind"
###                                   ("_tuple" ("_position" i)
###                                     ("_tuple_arg" ("_position" j)))
###                                   ("\<^const>Groups.times_class.times"
###                                     ("_position" x)
###                                     ("_position" mij)))))))))
###                     ("_position" m))))))
###           ("_position" m))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" scmul) ("_cargs" ("_position" x) ("_position" m)))
###   ("_applC" ("_position" nfoldli)
###     ("_cargs"
###       ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###         ("_position" N))
###       ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###         ("_cargs"
###           ("_lambda" ("_pttrns" ("_position" i) ("_position" m))
###             ("_applC" ("_position" nfoldli)
###               ("_cargs"
###                 ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###                   ("_position" M))
###                 ("_cargs" ("_lambda" ("_idtdummy") ("_position" True))
###                   ("_cargs"
###                     ("_lambda" ("_pttrns" ("_position" j) ("_position" m))
###                       ("_do_block"
###                         ("_do_cons"
###                           ("_do_let" ("_position" mij)
###                             ("_applC" ("_position" m)
###                               ("_tuple" ("_position" i)
###                                 ("_tuple_arg" ("_position" j)))))
###                           ("_do_final"
###                             ("_applC" ("_position" RETURN)
###                               ("_applC" ("_position" m)
###                                 ("\<^const>Ref.update"
###                                   ("_tuple" ("_position" i)
###                                     ("_tuple_arg" ("_position" j)))
###                                   ("\<^const>Groups.times_class.times"
###                                     ("_position" x)
###                                     ("_position" mij)))))))))
###                     ("_position" m))))))
###           ("_position" m))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Cannot skip proof of schematic goal statement
scmul_impl ==
%ai. imp_for' 0 N
      (%xa. imp_for' 0 M
             (%xc \<sigma>'''.
                 mtx_get M \<sigma>''' (xa, xc) >>=
                 (%x'd. mtx_set M \<sigma>''' (xa, xc) (ai * x'd))))
(uncurry scmul_impl, uncurry scmul)
: id_assn\<^sup>k *\<^sub>a
  (amtx_assn N M
    id_assn)\<^sup>d \<rightarrow>\<^sub>a amtx_assn N M id_assn
### Cannot skip proof of schematic goal statement
init_test_impl == amtx_dflt 10 5 0 >>= (%x'. mtx_get 5 x' (1, 2))
(uncurry0 init_test_impl, uncurry0 init_test)
: unit_assn\<^sup>k \<rightarrow>\<^sub>a nat_assn
PR_CONST diagonalN ::\<^sub>i TYPE(?'b1 => nat * nat => ?'b1)
### Cannot skip proof of schematic goal statement
init_test2_impl ==
mtx_tabulate N N (diagonalN 1) >>= (%x'. mtx_get N x' (1, 2))
(uncurry0 init_test2_impl, uncurry0 init_test2)
: unit_assn\<^sup>k \<rightarrow>\<^sub>a int_assn
See theory exports
### theory "Draft.IICF_Array_Matrix"
### 2.237s elapsed time, 2.304s cpu time, 0.108s GC time
Loading theory "Draft.IICF_Array_MatrixTemplates"
val templateLemmas =
   [("IICF_Array_Matrix.is_amtx_precise",
     "precise (IICF_Array_Matrix.is_amtx ?N ?M)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("IICF_Array_Matrix.IS_ID_imp_PRES_ZERO_UNIQUE",
     "IS_ID ?A ==> PRES_ZERO_UNIQUE ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("IICF_Array_Matrix.amtx_fold_lin_get",
     "?m (?i div ?M, ?i mod ?M) = op_amtx_lin_get ?M ?m ?i",
     template_equation
      (template_app
        (template_var 2,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("IICF_Array_Matrix.mtx_dflt_rl",
     "<emp> amtx_dflt ?N ?M ?k
      <IICF_Array_Matrix.is_amtx ?N ?M (op_amtx_dfltNxM ?N ?M ?k)>",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)))
         )),
    ("IICF_Array_Matrix.amtx_fold_lin_set",
     "?m((?i div ?M, ?i mod ?M) := ?x) = op_amtx_lin_set ?M ?m ?i ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 2),
         template_var 0))),
    ("IICF_Array_Matrix.mtx_copy_aref",
     "(amtx_copy, RETURN o op_mtx_copy)
      : (IICF_Array_Matrix.is_amtx ?N
          ?M)\<^sup>k \<rightarrow>\<^sub>a IICF_Array_Matrix.is_amtx ?N
       ?M",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_hole 4))),
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_hole 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("IICF_Array_Matrix.amtx_copy_hnr_mop",
     "(amtx_copy, mop_mtx_copy)
      : (amtx_assn ?N ?M
          ?A)\<^sup>k \<rightarrow>\<^sub>a amtx_assn ?N ?M ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_hole 4)),
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_hole 2)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)))
         )),
    ("IICF_Array_Matrix.diagonal_nonzero_ltN",
     "(?a, ?b) : mtx_nonzero (IICF_Array_Matrix.diagonalN ?N ?k) ==>
      ?a < ?N & ?b < ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("IICF_Array_Matrix.is_amtx_bounded",
     "rdomp (IICF_Array_Matrix.is_amtx ?N ?M) ?m ==>
      mtx_nonzero ?m <= {0..<?N} \<times> {0..<?M}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2)),
           t_empty)))),
    ("IICF_Array_Matrix.amtx_copy_hnr",
     "(amtx_copy, RETURN o op_mtx_copy)
      : (amtx_assn ?N ?M
          ?A)\<^sup>k \<rightarrow>\<^sub>a amtx_assn ?N ?M ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_hole 4))),
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_hole 2)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)))
         )),
    ("IICF_Array_Matrix.mtx_idx_valid",
     "[| ?i < ?N; ?j < ?M |] ==> ?i * ?M + ?j < ?N * ?M",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("IICF_Array_Matrix.mtx_copy_rl",
     "<IICF_Array_Matrix.is_amtx ?N ?M ?c ?mtx> amtx_copy ?mtx
      <%r. IICF_Array_Matrix.is_amtx ?N ?M ?c ?mtx *
           IICF_Array_Matrix.is_amtx ?N ?M ?c r>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app (template_hole 1, template_var 0)),
           t_empty)
         )),
    ("IICF_Array_Matrix.mtx_nonzero_zu_eq",
     "[| PRES_ZERO_UNIQUE ?R; (?a, ?a') : Id \<rightarrow> ?R |]
      ==> mtx_nonzero ?a = mtx_nonzero ?a'",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_hole 3)),
                template_var 2))
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("IICF_Array_Matrix.mtx_dflt_aref",
     "(amtx_dflt ?N ?M,
       (RETURN \<circ>\<circ> PR_CONST) (op_amtx_dfltNxM ?N ?M))
      : id_assn\<^sup>k \<rightarrow>\<^sub>a IICF_Array_Matrix.is_amtx ?N
         ?M",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_var 0))))),
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)),
                 template_hole 4)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("IICF_Array_Matrix.mtx_nonzero_bid_eq",
     "[| ?R <= Id; (?a, ?a') : Id \<rightarrow> ?R |]
      ==> mtx_nonzero ?a = mtx_nonzero ?a'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_hole 8),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_hole 2)),
                template_var 2))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("IICF_Array_Matrix.mtx_rel_pres_zero",
     "[| PRES_ZERO_UNIQUE ?A; (?m, ?m') : \<langle>?A\<rangle>mtx_rel |]
      ==> (?m ?ij = (0::?'a)) = (?m' ?ij = (0::?'b))",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 3))
            )],
       template_bimplication
        (template_equation
          (template_app (template_var 2, template_var 0), template_hole 2),
         template_equation
          (template_app (template_var 1, template_var 0),
           template_hole 0)))),
    ("IICF_Array_Matrix.mtx_tabulate_rl",
     "mtx_nonzero ?c <= {0..<?N} \<times> {0..<?M} ==>
      <emp> mtx_tabulate ?N ?M ?c <IICF_Array_Matrix.is_amtx ?N ?M ?c>",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1)),
            t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("IICF_Array_Matrix.amtx_dflt_hnr_mop",
     "CONSTRAINT (IS_PURE PRES_ZERO_UNIQUE) ?A ==>
      (amtx_dflt ?N ?M, PR_CONST (mop_op_amtx_dfltNxM ?N ?M))
      : ?A\<^sup>k \<rightarrow>\<^sub>a amtx_assn ?N ?M ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_hole 9)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)))),
             template_app
              (template_app
                (template_app (template_hole 3, t_empty),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 2)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)))
           ))),
    ("IICF_Array_Matrix.amtx_assn_bounded",
     "[| CONSTRAINT (IS_PURE PRES_ZERO_UNIQUE) ?A;
         rdomp (amtx_assn ?N ?M ?A) ?m |]
      ==> mtx_nonzero ?m <= {0..<?N} \<times> {0..<?M}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1),
                  template_var 3)),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2)),
           t_empty)))),
    ("IICF_Array_Matrix.amtx_dflt_hnr",
     "CONSTRAINT (IS_PURE PRES_ZERO_UNIQUE) ?A ==>
      (amtx_dflt ?N ?M,
       (RETURN \<circ>\<circ> PR_CONST) (op_amtx_dfltNxM ?N ?M))
      : ?A\<^sup>k \<rightarrow>\<^sub>a amtx_assn ?N ?M ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_hole 11)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 0))))),
             template_app
              (template_app
                (template_app (template_hole 3, t_empty),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 2)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)))
           ))),
    ("IICF_Array_Matrix.mtx_tabulate_aref",
     "(mtx_tabulate ?N ?M, RETURN o op_mtx_new)
      : [%c. mtx_nonzero c
             <= {0..<?N} \<times>
                {0..<?M}]\<^sub>a id_assn\<^sup>k \<rightarrow> IICF_Array_Matrix.is_amtx
                           ?N ?M",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app (template_hole 14, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 13, template_hole 12),
                 template_hole 11))),
           template_app
            (template_app
              (template_app (template_hole 10, t_empty),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("IICF_Array_Matrix.mtx_idx_unique_conv",
     "[| ?j < ?M; ?j' < ?M |]
      ==> (?i * ?M + ?j = ?i' * ?M + ?j') = (?i = ?i' & ?j = ?j')",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_inequation (less_than, template_var 2, template_var 3)],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)),
             template_var 4),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 3)),
             template_var 2)),
         template_predicate
          (
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 2))
             )))),
    ("IICF_Array_Matrix.op_mtx_new_fref'",
     "CONSTRAINT PRES_ZERO_UNIQUE ?A ==>
      (RETURN o op_mtx_new, RETURN o op_mtx_new)
      : nat_rel \<times>\<^sub>r nat_rel \<rightarrow>
        ?A \<rightarrow>\<^sub>f \<langle>\<langle>?A\<rangle>mtx_rel\<rangle>nres_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_hole 20),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app
                  (template_hole 18,
                   template_app
                    (template_app (template_hole 17, template_hole 16),
                     template_hole 15)),
                 template_app
                  (template_app (template_hole 14, template_hole 13),
                   template_hole 12))),
             template_app
              (template_app
                (template_app (template_hole 11, t_empty),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_hole 7),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_app
                              (template_hole 5, template_hole 4),
                             template_hole 3)),
                         template_hole 3))),
                   template_var 0)),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_app (template_hole 9, template_hole 0),
                   template_var 0))))
           ))),
    ("IICF_Array_Matrix.op_amtx_lin_get_aref",
     "(uncurry Array.nth,
       uncurry
        ((RETURN \<circ>\<circ>\<circ> PR_CONST) (op_amtx_lin_get ?M)))
      : [%(uu_, i).
            i < ?N *
                ?M]\<^sub>a (IICF_Array_Matrix.is_amtx ?N
                              ?M)\<^sup>k *\<^sub>a
                            nat_assn\<^sup>k \<rightarrow> id_assn",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 21,
             template_app
              (template_app
                (template_hole 20,
                 template_app (template_hole 19, template_hole 18)),
               template_app (template_hole 17, t_empty))),
           template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, t_empty)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_var 1)),
                     template_hole 5)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)),
                   template_hole 5))),
             template_app (template_hole 1, template_hole 0)))
         )),
    ("IICF_Array_Matrix.amtx_lin_get_hnr_mop",
     "CONSTRAINT is_pure ?A ==>
      (uncurry Array.nth, uncurry (PR_CONST (mop_amtx_lin_get ?M)))
      : [%(x, xa).
            xa < ?N *
                 ?M]\<^sub>a (amtx_assn ?N ?M ?A)\<^sup>k *\<^sub>a
                             nat_assn\<^sup>k \<rightarrow> ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_hole 18),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app
                  (template_hole 16,
                   template_app (template_hole 15, template_hole 14)),
                 template_app
                  (template_hole 13,
                   template_app
                    (template_hole 12,
                     template_app (template_hole 11, template_var 1))))),
             template_app
              (template_app
                (template_app
                  (template_hole 10,
                   template_app (template_hole 9, t_empty)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_app (template_hole 4, template_var 0),
                             template_var 1),
                           template_var 2)),
                       template_hole 3)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0)),
                     template_hole 3))),
               template_var 2))
           ))),
    ("IICF_Array_Matrix.diagonalN_hnr",
     "CONSTRAINT (IS_PURE PRES_ZERO_UNIQUE) ?A ==>
      ((return \<circ>\<circ> IICF_Array_Matrix.diagonalN) ?N,
       (RETURN \<circ>\<circ> PR_CONST) (IICF_Array_Matrix.diagonalN ?N))
      : ?A\<^sup>k \<rightarrow>\<^sub>a pure
    (nat_rel \<times>\<^sub>r nat_rel \<rightarrow> the_pure ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app (template_hole 22, template_hole 21)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 20,
               template_app
                (template_app
                  (template_hole 19,
                   template_app
                    (template_app (template_hole 18, template_hole 17),
                     template_app (template_hole 16, template_var 0))),
                 template_app
                  (template_app (template_hole 15, template_hole 14),
                   template_app
                    (template_hole 13,
                     template_app (template_hole 12, template_var 0))))),
             template_app
              (template_app
                (template_app (template_hole 11, t_empty),
                 template_app
                  (template_app (template_hole 9, template_var 1),
                   template_hole 10)),
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 6, template_hole 5),
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_hole 3, template_hole 2),
                             template_hole 1)),
                         template_hole 1))),
                   template_app (template_hole 0, template_var 1)))))
           ))),
    ("IICF_Array_Matrix.mtx_set_rl",
     "[| ?i < ?N; ?j < ?M |]
      ==> <IICF_Array_Matrix.is_amtx ?N ?M ?c ?mtx>
          mtx_set ?M ?mtx (?i, ?j) ?v
          <IICF_Array_Matrix.is_amtx ?N ?M (?c((?i, ?j) := ?v))>",
     template_implication
      ([template_inequation (less_than, template_var 6, template_var 5),
        template_inequation (less_than, template_var 4, template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 5),
                       template_var 3),
                     template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 1),
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 4)),
                 template_var 0)),
             t_empty)
           ))),
    ("IICF_Array_Matrix.mtx_get_rl",
     "[| ?i < ?N; ?j < ?M |]
      ==> <IICF_Array_Matrix.is_amtx ?N ?M ?c ?mtx> mtx_get ?M ?mtx (?i, ?j)
          <%r. IICF_Array_Matrix.is_amtx ?N ?M ?c ?mtx *
               \<up> (r = ?c (?i, ?j))>",
     template_implication
      ([template_inequation (less_than, template_var 5, template_var 4),
        template_inequation (less_than, template_var 3, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_var 4),
                       template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 5),
                   template_var 3))),
             t_empty)
           ))),
    ("IICF_Array_Matrix.amtx_lin_get_hnr",
     "CONSTRAINT is_pure ?A ==>
      (uncurry Array.nth,
       uncurry
        ((RETURN \<circ>\<circ>\<circ> PR_CONST) (op_amtx_lin_get ?M)))
      : [%(x, xa).
            xa < ?N *
                 ?M]\<^sub>a (amtx_assn ?N ?M ?A)\<^sup>k *\<^sub>a
                             nat_assn\<^sup>k \<rightarrow> ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_hole 20),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app
                  (template_hole 18,
                   template_app (template_hole 17, template_hole 16)),
                 template_app (template_hole 15, t_empty))),
             template_app
              (template_app
                (template_app
                  (template_hole 10,
                   template_app (template_hole 9, t_empty)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_app (template_hole 4, template_var 0),
                             template_var 1),
                           template_var 2)),
                       template_hole 3)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0)),
                     template_hole 3))),
               template_var 2))
           ))),
    ("IICF_Array_Matrix.amtx_get_aref'",
     "(uncurry (mtx_get ?M), uncurry (RETURN \<circ>\<circ> op_mtx_get))
      : (IICF_Array_Matrix.is_amtx ?N ?M)\<^sup>k *\<^sub>a
        (pure (nbn_rel ?N) \<times>\<^sub>a
         pure (nbn_rel ?M))\<^sup>k \<rightarrow>\<^sub>a id_assn",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 20,
             template_app
              (template_app
                (template_hole 19,
                 template_app
                  (template_hole 18,
                   template_app (template_hole 17, template_var 1))),
               template_app (template_hole 16, t_empty))),
           template_app
            (template_app
              (template_app (template_hole 12, t_empty),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 8, template_var 0),
                         template_var 1)),
                     template_hole 11)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_hole 4, template_hole 3),
                             t_empty))),
                       template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_hole 3),
                           t_empty)))),
                   template_hole 11))),
             template_app (template_hole 1, template_hole 0)))
         )),
    ("IICF_Array_Matrix.amtx_get_aref",
     "(uncurry (mtx_get ?M), uncurry (RETURN \<circ>\<circ> op_mtx_get))
      : [%(uu_, i, j).
            i < ?N &
            j < ?M]\<^sub>a (IICF_Array_Matrix.is_amtx ?N
                              ?M)\<^sup>k *\<^sub>a
                            (nat_assn \<times>\<^sub>a
                             nat_assn)\<^sup>k \<rightarrow> id_assn",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 22,
             template_app
              (template_app
                (template_hole 21,
                 template_app
                  (template_hole 20,
                   template_app (template_hole 19, template_var 1))),
               template_app (template_hole 18, t_empty))),
           template_app
            (template_app
              (template_app
                (template_hole 14,
                 template_app (template_hole 13, t_empty)),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 7, template_var 0),
                         template_var 1)),
                     template_hole 6)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_hole 2)),
                       template_app (template_hole 3, template_hole 2))),
                   template_hole 6))),
             template_app (template_hole 1, template_hole 0)))
         )),
    ("IICF_Array_Matrix.amtx_get'_hnr_mop",
     "CONSTRAINT is_pure ?A ==>
      (uncurry (mtx_get ?M), uncurry mop_mtx_get)
      : (amtx_assn ?N ?M ?A)\<^sup>k *\<^sub>a
        (nbn_assn ?N \<times>\<^sub>a
         nbn_assn ?M)\<^sup>k \<rightarrow>\<^sub>a ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_hole 17),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_hole 15,
                   template_app
                    (template_hole 14,
                     template_app (template_hole 13, template_var 1))),
                 template_app (template_hole 12, template_hole 11))),
             template_app
              (template_app
                (template_app (template_hole 10, t_empty),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_app (template_hole 6, template_var 0),
                             template_var 1),
                           template_var 2)),
                       template_hole 9)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_hole 3,
                               template_app
                                (template_hole 2, template_hole 1)),
                             t_empty)),
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_hole 1)),
                           t_empty))),
                     template_hole 9))),
               template_var 2))
           ))),
    ("IICF_Array_Matrix.amtx_get_hnr_mop",
     "CONSTRAINT is_pure ?A ==>
      (uncurry (mtx_get ?M), uncurry mop_mtx_get)
      : [%(x, xa, xb).
            xa < ?N &
            xb < ?M]\<^sub>a (amtx_assn ?N ?M ?A)\<^sup>k *\<^sub>a
                             (nat_assn \<times>\<^sub>a
                              nat_assn)\<^sup>k \<rightarrow> ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_hole 19),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 18,
               template_app
                (template_app
                  (template_hole 17,
                   template_app
                    (template_hole 16,
                     template_app (template_hole 15, template_var 1))),
                 template_app (template_hole 14, template_hole 13))),
             template_app
              (template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 11, t_empty)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app
                            (template_app (template_hole 5, template_var 0),
                             template_var 1),
                           template_var 2)),
                       template_hole 4)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app (template_hole 1, template_hole 0)),
                         template_app (template_hole 1, template_hole 0))),
                     template_hole 4))),
               template_var 2))
           ))),
    ("IICF_Array_Matrix.amtx_new_by_tab_hnr_mop",
     "CONSTRAINT (IS_PURE PRES_ZERO_UNIQUE) ?A ==>
      (mtx_tabulate ?N ?M, mop_mtx_new)
      : [%x. mtx_nonzero x
             <= {0..<?N} \<times>
                {0..<?M}]\<^sub>a (pure
                                    (nat_rel \<times>\<^sub>r
                                     nat_rel \<rightarrow>
                                     the_pure
?A))\<^sup>k \<rightarrow> amtx_assn ?N ?M ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app (template_hole 23, template_hole 22)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 21,
               template_app
                (template_app
                  (template_hole 20,
                   template_app
                    (template_app (template_hole 19, template_var 1),
                     template_var 0)),
                 template_hole 18)),
             template_app
              (template_app
                (template_app (template_hole 17, t_empty),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_hole 10,
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_app
                              (template_hole 8, template_hole 7),
                             template_app
                              (template_app
                                (template_hole 6,
                                 template_app
                                  (template_app
                                    (template_hole 5, template_hole 4),
                                   template_hole 3)),
                               template_hole 3))),
                         template_app (template_hole 2, template_var 2)))),
                   template_hole 1)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)))
           ))),
    ("IICF_Array_Matrix.amtx_get'_hnr",
     "CONSTRAINT is_pure ?A ==>
      (uncurry (mtx_get ?M), uncurry (RETURN \<circ>\<circ> op_mtx_get))
      : (amtx_assn ?N ?M ?A)\<^sup>k *\<^sub>a
        (nbn_assn ?N \<times>\<^sub>a
         nbn_assn ?M)\<^sup>k \<rightarrow>\<^sub>a ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_hole 19),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 18,
               template_app
                (template_app
                  (template_hole 17,
                   template_app
                    (template_hole 16,
                     template_app (template_hole 15, template_var 1))),
                 template_app (template_hole 14, t_empty))),
             template_app
              (template_app
                (template_app (template_hole 10, t_empty),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_app (template_hole 6, template_var 0),
                             template_var 1),
                           template_var 2)),
                       template_hole 9)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_hole 3,
                               template_app
                                (template_hole 2, template_hole 1)),
                             t_empty)),
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_hole 1)),
                           t_empty))),
                     template_hole 9))),
               template_var 2))
           ))),
    ("IICF_Array_Matrix.amtx_get_hnr",
     "CONSTRAINT is_pure ?A ==>
      (uncurry (mtx_get ?M), uncurry (RETURN \<circ>\<circ> op_mtx_get))
      : [%(x, xa, xb).
            xa < ?N &
            xb < ?M]\<^sub>a (amtx_assn ?N ?M ?A)\<^sup>k *\<^sub>a
                             (nat_assn \<times>\<^sub>a
                              nat_assn)\<^sup>k \<rightarrow> ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_hole 21),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 20,
               template_app
                (template_app
                  (template_hole 19,
                   template_app
                    (template_hole 18,
                     template_app (template_hole 17, template_var 1))),
                 template_app (template_hole 16, t_empty))),
             template_app
              (template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 11, t_empty)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app
                            (template_app (template_hole 5, template_var 0),
                             template_var 1),
                           template_var 2)),
                       template_hole 4)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app (template_hole 1, template_hole 0)),
                         template_app (template_hole 1, template_hole 0))),
                     template_hole 4))),
               template_var 2))
           ))),
    ("IICF_Array_Matrix.amtx_new_by_tab_hnr",
     "CONSTRAINT (IS_PURE PRES_ZERO_UNIQUE) ?A ==>
      (mtx_tabulate ?N ?M, RETURN o op_mtx_new)
      : [%x. mtx_nonzero x
             <= {0..<?N} \<times>
                {0..<?M}]\<^sub>a (pure
                                    (nat_rel \<times>\<^sub>r
                                     nat_rel \<rightarrow>
                                     the_pure
?A))\<^sup>k \<rightarrow> amtx_assn ?N ?M ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app (template_hole 25, template_hole 24)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 23,
               template_app
                (template_app
                  (template_hole 22,
                   template_app
                    (template_app (template_hole 21, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 20, template_hole 19),
                   template_hole 18))),
             template_app
              (template_app
                (template_app (template_hole 17, t_empty),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_hole 10,
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_app
                              (template_hole 8, template_hole 7),
                             template_app
                              (template_app
                                (template_hole 6,
                                 template_app
                                  (template_app
                                    (template_hole 5, template_hole 4),
                                   template_hole 3)),
                               template_hole 3))),
                         template_app (template_hole 2, template_var 2)))),
                   template_hole 1)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)))
           ))),
    ("IICF_Array_Matrix.amtx_new_hnr",
     "CONSTRAINT (IS_PURE PRES_ZERO_UNIQUE) ?A ==>
      (mtx_tabulate ?N ?M,
       (RETURN \<circ>\<circ> PR_CONST) (op_amtx_new ?N ?M))
      : [%x. mtx_nonzero x
             <= {0..<?N} \<times>
                {0..<?M}]\<^sub>a (pure
                                    (nat_rel \<times>\<^sub>r
                                     nat_rel \<rightarrow>
                                     the_pure
?A))\<^sup>k \<rightarrow> amtx_assn ?N ?M ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 27,
                template_app (template_hole 26, template_hole 25)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 24,
               template_app
                (template_app
                  (template_hole 23,
                   template_app
                    (template_app (template_hole 22, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 21, template_hole 20),
                   template_app
                    (template_hole 19,
                     template_app
                      (template_app (template_hole 18, template_var 1),
                       template_var 0))))),
             template_app
              (template_app
                (template_app (template_hole 17, t_empty),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_hole 10,
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_app
                              (template_hole 8, template_hole 7),
                             template_app
                              (template_app
                                (template_hole 6,
                                 template_app
                                  (template_app
                                    (template_hole 5, template_hole 4),
                                   template_hole 3)),
                               template_hole 3))),
                         template_app (template_hole 2, template_var 2)))),
                   template_hole 1)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)))
           ))),
    ("IICF_Array_Matrix.amtx_set_aref'",
     "(uncurry2 (mtx_set ?M),
       uncurry2 (RETURN \<circ>\<circ>\<circ> op_mtx_set))
      : (IICF_Array_Matrix.is_amtx ?N ?M)\<^sup>d *\<^sub>a
        (pure (nbn_rel ?N) \<times>\<^sub>a
         pure (nbn_rel ?M))\<^sup>k *\<^sub>a
        id_assn\<^sup>k \<rightarrow>\<^sub>a IICF_Array_Matrix.is_amtx ?N
         ?M",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 25,
             template_app
              (template_app
                (template_hole 24,
                 template_app
                  (template_hole 23,
                   template_app
                    (template_hole 22,
                     template_app (template_hole 21, template_var 1)))),
               template_app
                (template_hole 20,
                 template_app (template_hole 19, t_empty)))),
           template_app
            (template_app
              (template_app (template_hole 15, t_empty),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_app
                              (template_hole 10, template_var 0),
                             template_var 1)),
                         template_hole 9)),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_hole 6,
                               template_app
                                (template_app
                                  (template_hole 5, template_hole 4),
                                 t_empty))),
                           template_app
                            (template_hole 6,
                             template_app
                              (template_app
                                (template_hole 5, template_hole 4),
                               t_empty)))),
                       template_hole 14))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)),
                   template_hole 14))),
             template_app
              (template_app (template_hole 10, template_var 0),
               template_var 1)))
         )),
    ("IICF_Array_Matrix.amtx_set'_hnr_mop",
     "CONSTRAINT is_pure ?A ==>
      (uncurry2 (mtx_set ?M), uncurry2 mop_mtx_set)
      : (amtx_assn ?N ?M ?A)\<^sup>d *\<^sub>a
        (nbn_assn ?N \<times>\<^sub>a nbn_assn ?M)\<^sup>k *\<^sub>a
        ?A\<^sup>k \<rightarrow>\<^sub>a amtx_assn ?N ?M ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 23, template_hole 22),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 21,
               template_app
                (template_app
                  (template_hole 20,
                   template_app
                    (template_hole 19,
                     template_app
                      (template_hole 18,
                       template_app (template_hole 17, template_var 1)))),
                 template_app
                  (template_hole 16,
                   template_app (template_hole 15, template_hole 14)))),
             template_app
              (template_app
                (template_app (template_hole 13, t_empty),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_app
                            (template_hole 9,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 8, template_var 0),
                                 template_var 1),
                               template_var 2)),
                           template_hole 7)),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_app
                              (template_hole 5,
                               template_app
                                (template_app
                                  (template_hole 4,
                                   template_app
                                    (template_hole 3, template_hole 2)),
                                 t_empty)),
                             template_app
                              (template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 3, template_hole 2)),
                               t_empty))),
                         template_hole 12))),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_hole 12))),
               template_app
                (template_app
                  (template_app (template_hole 8, template_var 0),
                   template_var 1),
                 template_var 2)))
           ))),
    ("IICF_Array_Matrix.op_amtx_lin_set_aref",
     "(uncurry2 (%m i x. Array.upd i x m),
       uncurry2
        (RETURN \<circ>\<circ>\<circ> PR_CONST (op_amtx_lin_set ?M)))
      : [%((uu_, i), uu_).
            i < ?N *
                ?M]\<^sub>a (IICF_Array_Matrix.is_amtx ?N
                              ?M)\<^sup>d *\<^sub>a
                            nat_assn\<^sup>k *\<^sub>a
                            id_assn\<^sup>k \<rightarrow> IICF_Array_Matrix.is_amtx
                     ?N ?M",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 27,
             template_app
              (template_app
                (template_hole 26,
                 template_app
                  (template_hole 25,
                   template_app (template_hole 24, t_empty))),
               template_app
                (template_hole 22,
                 template_app (template_hole 21, t_empty)))),
           template_app
            (template_app
              (template_app
                (template_hole 16,
                 template_app
                  (template_hole 15,
                   template_app (template_hole 14, t_empty))),
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_app (template_hole 8, template_var 0),
                             template_var 1)),
                         template_hole 7)),
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_hole 4)),
                       template_hole 3))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)),
                   template_hole 3))),
             template_app
              (template_app (template_hole 8, template_var 0),
               template_var 1)))
         )),
    ("IICF_Array_Matrix.amtx_set_aref",
     "(uncurry2 (mtx_set ?M),
       uncurry2 (RETURN \<circ>\<circ>\<circ> op_mtx_set))
      : [%((uu_, i, j), uu_).
            i < ?N &
            j < ?M]\<^sub>a (IICF_Array_Matrix.is_amtx ?N
                              ?M)\<^sup>d *\<^sub>a
                            (nat_assn \<times>\<^sub>a
                             nat_assn)\<^sup>k *\<^sub>a
                            id_assn\<^sup>k \<rightarrow> IICF_Array_Matrix.is_amtx
                     ?N ?M",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 28,
             template_app
              (template_app
                (template_hole 27,
                 template_app
                  (template_hole 26,
                   template_app
                    (template_hole 25,
                     template_app (template_hole 24, template_var 1)))),
               template_app
                (template_hole 23,
                 template_app (template_hole 22, t_empty)))),
           template_app
            (template_app
              (template_app
                (template_hole 18,
                 template_app
                  (template_hole 17,
                   template_app (template_hole 16, t_empty))),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_app (template_hole 9, template_var 0),
                             template_var 1)),
                         template_hole 8)),
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_hole 6,
                             template_app
                              (template_hole 5, template_hole 4)),
                           template_app
                            (template_hole 5, template_hole 4))),
                       template_hole 3))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0)),
                   template_hole 3))),
             template_app
              (template_app (template_hole 9, template_var 0),
               template_var 1)))
         )),
    ("IICF_Array_Matrix.amtx_lin_set_hnr_mop",
     "CONSTRAINT is_pure ?A ==>
      (uncurry2 (%m i x. Array.upd i x m),
       uncurry2 (PR_CONST (mop_amtx_lin_set ?M)))
      : [%((x, xa), xb).
            xa < ?N *
                 ?M]\<^sub>a (amtx_assn ?N ?M ?A)\<^sup>d *\<^sub>a
                             nat_assn\<^sup>k *\<^sub>a
                             ?A\<^sup>k \<rightarrow> amtx_assn ?N ?M ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 25, template_hole 24),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 23,
               template_app
                (template_app
                  (template_hole 22,
                   template_app
                    (template_hole 21,
                     template_app (template_hole 20, t_empty))),
                 template_app
                  (template_hole 18,
                   template_app
                    (template_hole 17,
                     template_app
                      (template_hole 16,
                       template_app (template_hole 15, template_var 1)))))),
             template_app
              (template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_hole 13,
                     template_app (template_hole 12, t_empty))),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 6, template_var 0),
                                 template_var 1),
                               template_var 2)),
                           template_hole 5)),
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app (template_hole 3, template_hole 2)),
                         template_hole 1))),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_hole 1))),
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 0),
                   template_var 1),
                 template_var 2)))
           ))),
    ("IICF_Array_Matrix.amtx_set_hnr_mop",
     "CONSTRAINT is_pure ?A ==>
      (uncurry2 (mtx_set ?M), uncurry2 mop_mtx_set)
      : [%((x, xa, xb), xc).
            xa < ?N &
            xb < ?M]\<^sub>a (amtx_assn ?N ?M ?A)\<^sup>d *\<^sub>a
                             (nat_assn \<times>\<^sub>a
                              nat_assn)\<^sup>k *\<^sub>a
                             ?A\<^sup>k \<rightarrow> amtx_assn ?N ?M ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 26, template_hole 25),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 24,
               template_app
                (template_app
                  (template_hole 23,
                   template_app
                    (template_hole 22,
                     template_app
                      (template_hole 21,
                       template_app (template_hole 20, template_var 1)))),
                 template_app
                  (template_hole 19,
                   template_app (template_hole 18, template_hole 17)))),
             template_app
              (template_app
                (template_app
                  (template_hole 16,
                   template_app
                    (template_hole 15,
                     template_app (template_hole 14, t_empty))),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 7, template_var 0),
                                 template_var 1),
                               template_var 2)),
                           template_hole 6)),
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_hole 3, template_hole 2)),
                             template_app
                              (template_hole 3, template_hole 2))),
                         template_hole 1))),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_hole 1))),
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 0),
                   template_var 1),
                 template_var 2)))
           ))),
    ("IICF_Array_Matrix.amtx_set'_hnr",
     "CONSTRAINT is_pure ?A ==>
      (uncurry2 (mtx_set ?M),
       uncurry2 (RETURN \<circ>\<circ>\<circ> op_mtx_set))
      : (amtx_assn ?N ?M ?A)\<^sup>d *\<^sub>a
        (nbn_assn ?N \<times>\<^sub>a nbn_assn ?M)\<^sup>k *\<^sub>a
        ?A\<^sup>k \<rightarrow>\<^sub>a amtx_assn ?N ?M ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 25, template_hole 24),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 23,
               template_app
                (template_app
                  (template_hole 22,
                   template_app
                    (template_hole 21,
                     template_app
                      (template_hole 20,
                       template_app (template_hole 19, template_var 1)))),
                 template_app
                  (template_hole 18,
                   template_app (template_hole 17, t_empty)))),
             template_app
              (template_app
                (template_app (template_hole 13, t_empty),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_app
                            (template_hole 9,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 8, template_var 0),
                                 template_var 1),
                               template_var 2)),
                           template_hole 7)),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_app
                              (template_hole 5,
                               template_app
                                (template_app
                                  (template_hole 4,
                                   template_app
                                    (template_hole 3, template_hole 2)),
                                 t_empty)),
                             template_app
                              (template_app
                                (template_hole 4,
                                 template_app
                                  (template_hole 3, template_hole 2)),
                               t_empty))),
                         template_hole 12))),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_hole 12))),
               template_app
                (template_app
                  (template_app (template_hole 8, template_var 0),
                   template_var 1),
                 template_var 2)))
           ))),
    ("IICF_Array_Matrix.amtx_lin_set_hnr",
     "CONSTRAINT is_pure ?A ==>
      (uncurry2 (%m i x. Array.upd i x m),
       uncurry2
        (RETURN \<circ>\<circ>\<circ> PR_CONST (op_amtx_lin_set ?M)))
      : [%((x, xa), xb).
            xa < ?N *
                 ?M]\<^sub>a (amtx_assn ?N ?M ?A)\<^sup>d *\<^sub>a
                             nat_assn\<^sup>k *\<^sub>a
                             ?A\<^sup>k \<rightarrow> amtx_assn ?N ?M ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 27, template_hole 26),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 25,
               template_app
                (template_app
                  (template_hole 24,
                   template_app
                    (template_hole 23,
                     template_app (template_hole 22, t_empty))),
                 template_app
                  (template_hole 20,
                   template_app (template_hole 19, t_empty)))),
             template_app
              (template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_hole 13,
                     template_app (template_hole 12, t_empty))),
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 6, template_var 0),
                                 template_var 1),
                               template_var 2)),
                           template_hole 5)),
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app (template_hole 3, template_hole 2)),
                         template_hole 1))),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_hole 1))),
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 0),
                   template_var 1),
                 template_var 2)))
           ))),
    ("IICF_Array_Matrix.amtx_set_hnr",
     "CONSTRAINT is_pure ?A ==>
      (uncurry2 (mtx_set ?M),
       uncurry2 (RETURN \<circ>\<circ>\<circ> op_mtx_set))
      : [%((x, xa, xb), xc).
            xa < ?N &
            xb < ?M]\<^sub>a (amtx_assn ?N ?M ?A)\<^sup>d *\<^sub>a
                             (nat_assn \<times>\<^sub>a
                              nat_assn)\<^sup>k *\<^sub>a
                             ?A\<^sup>k \<rightarrow> amtx_assn ?N ?M ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 28, template_hole 27),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 26,
               template_app
                (template_app
                  (template_hole 25,
                   template_app
                    (template_hole 24,
                     template_app
                      (template_hole 23,
                       template_app (template_hole 22, template_var 1)))),
                 template_app
                  (template_hole 21,
                   template_app (template_hole 20, t_empty)))),
             template_app
              (template_app
                (template_app
                  (template_hole 16,
                   template_app
                    (template_hole 15,
                     template_app (template_hole 14, t_empty))),
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app
                            (template_hole 8,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 7, template_var 0),
                                 template_var 1),
                               template_var 2)),
                           template_hole 6)),
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_hole 3, template_hole 2)),
                             template_app
                              (template_hole 3, template_hole 2))),
                         template_hole 1))),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_hole 1))),
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 0),
                   template_var 1),
                 template_var 2)))
           )))]:
   (string * thm * template) list
### theory "Draft.IICF_Array_MatrixTemplates"
### 0.648s elapsed time, 0.812s cpu time, 0.056s GC time
val it = (): unit
