Loading theory "Draft.Named_Theorems_Rev" (required by "Draft.Sepref_FrameTemplates" via "Draft.Sepref_Frame" via "Draft.Sepref_Basic" via "Draft.Sepref_Misc")
Loading theory "Draft.Structured_Apply" (required by "Draft.Sepref_FrameTemplates" via "Draft.Sepref_Frame" via "Draft.Sepref_Basic")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Sepref_FrameTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Sepref_FrameTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
signature STRUCTURED_APPLY =
  sig
    val apply1:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val applyT:
       Method.text * Position.range ->
         Proof.state -> Proof.state Seq.result Seq.seq
    val apply_focus:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val apply_solve:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val focus: Proof.state -> Proof.state
    val solved: Proof.state -> Proof.state
    val unfocus: Proof.state -> Proof.state
  end
structure Structured_Apply: STRUCTURED_APPLY
### theory "Draft.Structured_Apply"
### 0.066s elapsed time, 0.288s cpu time, 0.000s GC time
Loading theory "Draft.PO_Normalizer" (required by "Draft.Sepref_FrameTemplates" via "Draft.Sepref_Frame" via "Draft.Sepref_Basic" via "Draft.Sepref_Misc")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature NAMED_THEOREMS_REV =
  sig
    val add: string -> attribute
    val add_thm: string -> thm -> Context.generic -> Context.generic
    val check: Proof.context -> string * Position.T -> string
    val declare: binding -> string -> local_theory -> string * local_theory
    val del: string -> attribute
    val del_thm: string -> thm -> Context.generic -> Context.generic
    val get: Proof.context -> string -> thm list
    val member: Proof.context -> string -> thm -> bool
  end
structure Named_Theorems_Rev: NAMED_THEOREMS_REV
### theory "Draft.Named_Theorems_Rev"
### 0.081s elapsed time, 0.350s cpu time, 0.000s GC time
Loading theory "Draft.Sepref_Id_Op" (required by "Draft.Sepref_FrameTemplates" via "Draft.Sepref_Frame" via "Draft.Sepref_Basic")
### ML warning (line 63 of "$AFP/Refine_Imperative_HOL/Lib/PO_Normalizer.ML"):
### Pattern is not exhaustive.
### ML warning (line 77 of "$AFP/Refine_Imperative_HOL/Lib/PO_Normalizer.ML"):
### Pattern is not exhaustive.
signature PO_NORMALIZER =
  sig
    val gen_norm_rule: thm list -> norm_set -> Proof.context -> thm -> thm
    val gen_norm_tac: norm_set -> Proof.context -> tactic'
    type norm_set =
       {cong_rules: thm list,
        norm_rules: thm list, refl_rules: thm list, trans_rules: thm list}
  end
structure PO_Normalizer: PO_NORMALIZER
### theory "Draft.PO_Normalizer"
### 0.071s elapsed time, 0.252s cpu time, 0.033s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Sepref_FrameTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Function_Algebras"
### 0.166s elapsed time, 0.658s cpu time, 0.033s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Sepref_FrameTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
infix 0 THEN_ELSE_COMB'
signature ID_OP_TACTICAL =
  sig
    val DF_SOLVE_FWD: bool -> tactic' -> tactic'
    val SOLVE_FWD: tactic' -> tactic'
  end
structure Id_Op_Tactical: ID_OP_TACTICAL
### theory "HOL-Library.Set_Algebras"
### 0.261s elapsed time, 1.024s cpu time, 0.094s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Sepref_FrameTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
structure Id_Op:
  sig
    val add_id_rule: thm -> Proof.context -> Proof.context
    val cfg_id_debug: bool Config.T
    val cfg_id_trace_fallback: bool Config.T
    val dest_id_rl: thm -> term * typ
    val do_unprotect_tac: Proof.context -> int -> tactic
    val id_a_conv: conv -> cterm -> thm
    val id_tac: id_tac_mode -> Proof.context -> int -> tactic
    datatype id_tac_mode = Init | Normal | Solve | Step
    val protect: typ list -> term -> term
    val protect_conv: Proof.context -> conv
    val unprotect_conv: Proof.context -> conv
  end
### theory "Draft.Sepref_Id_Op"
### 0.610s elapsed time, 2.363s cpu time, 0.184s GC time
Loading theory "Draft.Sepref_Misc" (required by "Draft.Sepref_FrameTemplates" via "Draft.Sepref_Frame" via "Draft.Sepref_Basic")
consts
  left :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  right :: "'a tree => 'a tree"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.907s elapsed time, 3.526s cpu time, 0.302s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.900s elapsed time, 3.188s cpu time, 0.657s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Sepref_Misc"
### 0.977s elapsed time, 2.839s cpu time, 0.717s GC time
Loading theory "Draft.Sepref_Basic" (required by "Draft.Sepref_FrameTemplates" via "Draft.Sepref_Frame")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.904s elapsed time, 5.707s cpu time, 0.919s GC time
Loading theory "Draft.Templates" (required by "Draft.Sepref_FrameTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.204s cpu time, 0.059s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Sepref_FrameTemplates")
### Ignoring duplicate rewrite rule:
### hn_refine ?\<Gamma>1 ?c1 ?\<Gamma>'1 ?R1 FAIL == True
signature SEPREF_BASIC =
  sig
    val PHASES': phase list -> phases_ctrl -> Proof.context -> tactic'
    val apply_under_lambda:
       (Proof.context -> term -> term) -> Proof.context -> term -> term
    val constrain_type_pre: typ -> term -> term
    val dbg_phases_ctrl: phases_ctrl
    val dest_hn_ctxt: term -> term * term * term
    val dest_hn_ctxt_opt: term -> (term * term * term) option
    val dest_hn_refine: term -> term * term * term * term * term
    val dest_hnr_absfun: term -> bool * (term * term list)
    val dest_lambda_rc:
       Proof.context -> term -> (term * (term -> term)) * Proof.context
    val dest_nresT: typ -> typ
    val dflt_phases_ctrl: phases_ctrl
    val flag_phases_ctrl: bool -> phases_ctrl
    val hn_refine_concl_conv_a:
       (Proof.context -> conv) -> Proof.context -> conv
    val hn_refine_conv: conv -> conv -> conv -> conv -> conv -> conv
    val hn_refine_conv_a: conv -> conv
    val is_hn_ctxt: term -> bool
    val is_hn_refine_concl: term -> bool
    val is_nresT: typ -> bool
    val is_true: term -> bool
    val list_star: term list -> term
    val mk_cequals: cterm * cterm -> cterm
    val mk_compN_pre: int -> term -> term -> term
    val mk_curry0_pre: term -> term
    val mk_curryN_pre: int -> term -> term
    val mk_curry_pre: term -> term
    val mk_entails: term * term -> term
    val mk_hn_refine: term * term * term * term * term -> term
    val mk_hnr_absfun: bool * (term * term list) -> term
    val mk_hnr_absfun': term * term list -> term
    val mk_nresT: typ -> typ
    val mk_pair_in_pre: term -> term -> term -> term
    val mk_star: term * term -> term
    val mk_uncurry0_pre: term -> term
    val mk_uncurryN_pre: int -> term -> term
    val mk_uncurry_pre: term -> term
    type phase = string * (Proof.context -> tactic') * int
    type phases_ctrl =
       {int_res: bool,
        start: string option, stop: string option, trace: bool}
    val star_permute_tac: Proof.context -> tactic
    val strip_star: term -> term list
  end
signature SEPREF_DEBUGGING =
  sig
    val DBG_CONVERSION: bool Config.T -> Proof.context -> conv -> tactic'
    val DBG_CONVERSION': Proof.context -> conv -> tactic'
    val cfg_debug_all: bool Config.T
    val dbg_msg_tac:
       bool Config.T ->
         (Proof.context -> int -> thm -> string) -> Proof.context -> tactic'
    val dbg_msg_tac':
       (Proof.context -> int -> thm -> string) -> Proof.context -> tactic'
    val dbg_trace_msg: bool Config.T -> Proof.context -> string -> unit
    val dbg_trace_msg': Proof.context -> string -> unit
    val error_tac': string -> Proof.context -> tactic'
    val is_debug: bool Config.T -> Proof.context -> bool
    val is_debug': Proof.context -> bool
    val msg_allgoals: string -> Proof.context -> int -> thm -> string
    val msg_from_subgoal:
       string ->
         (term -> Proof.context -> string) ->
           Proof.context -> int -> thm -> string
    val msg_subgoal: string -> Proof.context -> int -> thm -> string
    val msg_text: string -> Proof.context -> int -> thm -> string
    val tracing_tac': string -> Proof.context -> tactic'
    val warning_tac': string -> Proof.context -> tactic'
  end
structure Sepref_Basic: SEPREF_BASIC
structure Sepref_Debugging: SEPREF_DEBUGGING
infix 1 THEN_NEXT
infix 1 THEN_ALL_NEW_LIST
infix 1 THEN_ALL_NEW_LIST'
signature STACTICAL =
  sig
    val APPLY_LIST: tactic' list -> tactic'
    val THEN_ALL_NEW_LIST: tactic' * tactic' list -> tactic'
    val THEN_ALL_NEW_LIST': tactic' * (tactic' list * tactic') -> tactic'
    val THEN_NEXT: tactic' * tactic' -> tactic'
  end
structure STactical: STACTICAL
val THEN_ALL_NEW_LIST = fn: tactic' * tactic' list -> tactic'
val APPLY_LIST = fn: tactic' list -> tactic'
val THEN_NEXT = fn: tactic' * tactic' -> tactic'
val THEN_ALL_NEW_LIST' = fn: tactic' * (tactic' list * tactic') -> tactic'
### theory "Draft.Sepref_Basic"
### 1.153s elapsed time, 2.661s cpu time, 0.818s GC time
Loading theory "Draft.Sepref_Constraints" (required by "Draft.Sepref_FrameTemplates" via "Draft.Sepref_Frame")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.698s elapsed time, 1.685s cpu time, 0.707s GC time
signature SEPREF_CONSTRAINTS =
  sig
    val ON_SLOT: tactic -> tactic
    val WITH_SLOT: tactic' -> tactic
    val add_constraint_rule: thm -> Context.generic -> Context.generic
    val add_safe_constraint_rule: thm -> Context.generic -> Context.generic
    val cond_focus: (term -> bool) -> tactic
    val constraint_tac: Proof.context -> tactic'
    val create_slot_tac: tactic
    val del_constraint_rule: thm -> Context.generic -> Context.generic
    val del_safe_constraint_rule: thm -> Context.generic -> Context.generic
    val dest_slot_tac: tactic'
    val ensure_slot_tac: tactic
    val focus: tactic
    val get_constraint_rules: Proof.context -> thm list
    val get_safe_constraint_rules: Proof.context -> thm list
    val has_slot: thm -> bool
    val is_constraint_goal: term -> bool
    val is_constraint_tac: tactic'
    val prefer_slot_tac: tactic
    val print_slot_tac: Proof.context -> tactic
    val process_constraint_slot: Proof.context -> tactic
    val remove_slot_tac: tactic
    val safe_constraint'_tac: Proof.context -> tactic'
    val safe_constraint_tac: Proof.context -> tactic'
    val setup: theory -> theory
    val slot_constraint_tac: int -> tactic
    val solve_constraint'_tac: Proof.context -> tactic'
    val solve_constraint_slot: Proof.context -> tactic
    val solve_constraint_tac: Proof.context -> tactic'
    val some_to_slot_tac: (term -> bool) -> tactic
    val to_slot_tac: tactic'
    val unfocus: tactic
    val unfocus_ins: tactic
  end
structure Sepref_Constraints: SEPREF_CONSTRAINTS
### theory "Draft.Sepref_Constraints"
### 0.322s elapsed time, 0.342s cpu time, 0.000s GC time
Loading theory "Draft.Sepref_Frame" (required by "Draft.Sepref_FrameTemplates")
signature SEPREF_FRAME =
  sig
    val add_normrel_eq: thm -> Context.generic -> Context.generic
    val align_goal_tac: Proof.context -> tactic'
    val align_rl_conv: Proof.context -> conv
    val cfg_debug: bool Config.T
    val del_normrel_eq: thm -> Context.generic -> Context.generic
    val frame_step_tac:
       (Proof.context -> tactic') -> bool -> Proof.context -> tactic'
    val frame_tac: (Proof.context -> tactic') -> Proof.context -> tactic'
    val get_normrel_eqs: Proof.context -> thm list
    val is_merge: term -> bool
    val merge_tac: (Proof.context -> tactic') -> Proof.context -> tactic'
    val norm_goal_pre_tac: Proof.context -> tactic'
    val prepare_frame_tac: Proof.context -> tactic'
    val recover_pure_tac: Proof.context -> tactic'
    val setup: theory -> theory
    val weaken_post_tac: Proof.context -> tactic'
  end
structure Sepref_Frame: SEPREF_FRAME
### theory "Draft.Sepref_Frame"
### 0.459s elapsed time, 0.480s cpu time, 0.035s GC time
Loading theory "Draft.Sepref_FrameTemplates"
val templateLemmas =
   [("Sepref_Frame.frame_rem4", "?P \<Longrightarrow>\<^sub>t emp",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Sepref_Frame.frame_rem1", "?P \<Longrightarrow>\<^sub>t ?P",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Sepref_Frame.recover_pure_triv", "RECOVER_PURE ?P ?P",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Sepref_Frame.weaken_hnr_post_triv", "WEAKEN_HNR_POST ?\<Gamma> ?P ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Sepref_Frame.hn_merge1",
     "?F \<or>\<^sub>A ?F \<Longrightarrow>\<^sub>t ?F",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 0)),
           template_var 0)
         )),
    ("Sepref_Frame.sepref_frame_normrel_eqs", "the_pure (pure ?R) = ?R",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Sepref_Frame.recover_pure",
     "RECOVER_PURE (hn_ctxt ?R ?x ?y) (hn_ctxt ?R ?x ?y)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("Sepref_Frame.sepref_frame_normrel_eqs",
     "is_pure ?R ==> pure (the_pure ?R) = ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Sepref_Frame.frame_thms",
     "hn_ctxt ?R ?x ?y \<Longrightarrow>\<^sub>t hn_invalid ?R ?x ?y",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1),
             template_var 0))
         )),
    ("Sepref_Frame.frame_thms",
     "hn_ctxt ?R ?x ?y \<Longrightarrow>\<^sub>t
      hn_ctxt (%_ _. true) ?x ?y",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), template_var 1),
             template_var 0))
         )),
    ("Sepref_Frame.merge_sat1",
     "?A \<or>\<^sub>A ?A' \<Longrightarrow>\<^sub>t ?Am ==>
      ?A \<or>\<^sub>A ?Am \<Longrightarrow>\<^sub>t ?Am",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 0)
           ))),
    ("Sepref_Frame.merge_sat2",
     "?A \<or>\<^sub>A ?A' \<Longrightarrow>\<^sub>t ?Am ==>
      ?Am \<or>\<^sub>A ?A' \<Longrightarrow>\<^sub>t ?Am",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 0)
           ))),
    ("Sepref_Frame.is_merge",
     "?P1.0 \<or>\<^sub>A ?P2.0 \<Longrightarrow>\<^sub>t ?P ==>
      ?P1.0 \<or>\<^sub>A ?P2.0 \<Longrightarrow>\<^sub>t ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("Sepref_Frame.weaken_hnr_post",
     "WEAKEN_HNR_POST (hn_ctxt ?R ?x ?y) (hn_ctxt ?R ?x ?y)
       (hn_ctxt ?R ?x ?y)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("Sepref_Frame.frame_rem3",
     "?F \<Longrightarrow>\<^sub>t ?F' ==>
      ?F * hn_ctxt ?A ?x ?y \<Longrightarrow>\<^sub>t ?F'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1),
                   template_var 0))),
             template_var 3)
           ))),
    ("Sepref_Frame.recover_pure_aux",
     "CONSTRAINT is_pure ?R ==>
      hn_invalid ?R ?x ?y \<Longrightarrow>\<^sub>t hn_ctxt ?R ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2)),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Sepref_Frame.recover_pure",
     "CONSTRAINT is_pure ?R ==>
      RECOVER_PURE (hn_invalid ?R ?x ?y) (hn_ctxt ?R ?x ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2)),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("Sepref_Frame.hn_merge_mismatch",
     "hn_ctxt ?R1.0 ?x ?x' \<or>\<^sub>A
      hn_ctxt ?R2.0 ?x ?x' \<Longrightarrow>\<^sub>t
      hn_mismatch ?R1.0 ?R2.0 ?x ?x'",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2),
                 template_var 1))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_var 2),
             template_var 1))
         )),
    ("Sepref_Frame.hn_merge2",
     "hn_ctxt ?R ?x ?x' \<or>\<^sub>A
      hn_invalid ?R ?x ?x' \<Longrightarrow>\<^sub>t
      hn_invalid ?R ?x ?x'",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2)),
                   template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1),
             template_var 0))
         )),
    ("Sepref_Frame.hn_merge2",
     "hn_invalid ?R ?x ?x' \<or>\<^sub>A
      hn_ctxt ?R ?x ?x' \<Longrightarrow>\<^sub>t
      hn_invalid ?R ?x ?x'",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 2)),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1),
             template_var 0))
         )),
    ("Sepref_Frame.weaken_hnr_post",
     "WEAKEN_HNR_POST (hn_ctxt ?R ?x ?y) (hn_invalid ?R ?x ?y)
       (hn_ctxt (%_ _. true) ?x ?y)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_var 1),
             template_var 0))
         )),
    ("Sepref_Frame.gen_merge_cons1",
     "[| ?A \<Longrightarrow>\<^sub>t ?A';
         ?A' \<or>\<^sub>A ?B \<Longrightarrow>\<^sub>t ?C |]
      ==> ?A \<or>\<^sub>A ?B \<Longrightarrow>\<^sub>t ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 0)
           ))),
    ("Sepref_Frame.gen_merge_cons2",
     "[| ?B \<Longrightarrow>\<^sub>t ?B';
         ?A \<or>\<^sub>A ?B' \<Longrightarrow>\<^sub>t ?C |]
      ==> ?A \<or>\<^sub>A ?B \<Longrightarrow>\<^sub>t ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_var 0)
           ))),
    ("Sepref_Frame.frame_thms",
     "[| ?P \<Longrightarrow>\<^sub>t ?P';
         ?F \<Longrightarrow>\<^sub>t ?F' |]
      ==> ?F * ?P \<Longrightarrow>\<^sub>t ?F' * ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Sepref_Frame.recover_pure",
     "[| RECOVER_PURE ?P2.0 ?Q2.0; RECOVER_PURE ?P1.0 ?Q1.0 |]
      ==> RECOVER_PURE (?P1.0 * ?P2.0) (?Q1.0 * ?Q2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Sepref_Frame.frame_rem2",
     "?F \<Longrightarrow>\<^sub>t ?F' ==>
      ?F * hn_ctxt ?A ?x ?y \<Longrightarrow>\<^sub>t
      ?F' * hn_ctxt ?A ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)))
           ))),
    ("Sepref_Frame.weaken_hnr_postI",
     "[| WEAKEN_HNR_POST ?\<Gamma> ?\<Gamma>'' ?\<Gamma>';
         hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R ?a |]
      ==> hn_refine ?\<Gamma> ?c ?\<Gamma>'' ?R ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 5),
                    template_var 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 2),
                 template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("Sepref_Frame.invalid_assn_mono",
     "hn_ctxt ?A ?x ?y \<Longrightarrow>\<^sub>t hn_ctxt ?B ?x ?y ==>
      hn_invalid ?A ?x ?y \<Longrightarrow>\<^sub>t hn_invalid ?B ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 3)),
                   template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 2),
               template_var 1))
           ))),
    ("Sepref_Frame.weaken_hnr_post",
     "[| WEAKEN_HNR_POST ?\<Gamma> ?P ?P';
         WEAKEN_HNR_POST ?\<Gamma>' ?Q ?Q' |]
      ==> WEAKEN_HNR_POST (?\<Gamma> * ?\<Gamma>') (?P * ?Q) (?P' * ?Q')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Sepref_Frame.merge_mono",
     "[| ?A \<Longrightarrow>\<^sub>t ?A'; ?B \<Longrightarrow>\<^sub>t ?B';
         ?A' \<or>\<^sub>A ?B' \<Longrightarrow>\<^sub>t ?C |]
      ==> ?A \<or>\<^sub>A ?B \<Longrightarrow>\<^sub>t ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2)),
             template_var 0)
           ))),
    ("Sepref_Frame.ent_disj_star_mono",
     "[| ?A \<or>\<^sub>A ?C \<Longrightarrow>\<^sub>A ?E;
         ?B \<or>\<^sub>A ?D \<Longrightarrow>\<^sub>A ?F |]
      ==> ?A * ?B \<or>\<^sub>A ?C * ?D \<Longrightarrow>\<^sub>A ?E * ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1))),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Sepref_Frame.entt_disj_star_mono",
     "[| ?A \<or>\<^sub>A ?C \<Longrightarrow>\<^sub>t ?E;
         ?B \<or>\<^sub>A ?D \<Longrightarrow>\<^sub>t ?F |]
      ==> ?A * ?B \<or>\<^sub>A ?C * ?D \<Longrightarrow>\<^sub>t ?E * ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1))),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Sepref_Frame.hn_merge3",
     "[| NO_MATCH (hn_invalid ?XX) ?R1.0;
         hn_ctxt ?R1.0 ?x ?x' \<or>\<^sub>A
         hn_ctxt ?R2.0 ?x ?x' \<Longrightarrow>\<^sub>t
         hn_ctxt ?Rm ?x ?x' |]
      ==> hn_ctxt ?R1.0 ?x ?x' \<or>\<^sub>A
          hn_invalid ?R2.0 ?x ?x' \<Longrightarrow>\<^sub>t
          hn_invalid ?Rm ?x ?x'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 5))),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app
                       (template_app (template_hole 1, template_var 4),
                        template_var 3),
                      template_var 2)),
                  template_app
                   (template_app
                     (template_app (template_hole 1, template_var 1),
                      template_var 3),
                    template_var 2))),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 1)),
                     template_var 3),
                   template_var 2))),
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 3),
               template_var 2))
           ))),
    ("Sepref_Frame.hn_merge3",
     "[| NO_MATCH (hn_invalid ?XX) ?R2.0;
         hn_ctxt ?R1.0 ?x ?x' \<or>\<^sub>A
         hn_ctxt ?R2.0 ?x ?x' \<Longrightarrow>\<^sub>t
         hn_ctxt ?Rm ?x ?x' |]
      ==> hn_invalid ?R1.0 ?x ?x' \<or>\<^sub>A
          hn_ctxt ?R2.0 ?x ?x' \<Longrightarrow>\<^sub>t
          hn_invalid ?Rm ?x ?x'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 5))),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app
                       (template_app (template_hole 1, template_var 3),
                        template_var 2),
                      template_var 1)),
                  template_app
                   (template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 2),
                    template_var 1))),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app
                        (template_hole 1,
                         template_app (template_hole 0, template_var 3)),
                       template_var 2),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 2),
               template_var 1))
           ))),
    ("Sepref_Frame.hn_merge1",
     "[| hn_ctxt ?R1.0 ?x ?x' \<or>\<^sub>A
         hn_ctxt ?R2.0 ?x ?x' \<Longrightarrow>\<^sub>t
         hn_ctxt ?R ?x ?x';
         ?Fl \<or>\<^sub>A ?Fr \<Longrightarrow>\<^sub>t ?F |]
      ==> ?Fl * hn_ctxt ?R1.0 ?x ?x' \<or>\<^sub>A
          ?Fr * hn_ctxt ?R2.0 ?x ?x' \<Longrightarrow>\<^sub>t
          ?F * hn_ctxt ?R ?x ?x'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app
                       (template_app (template_hole 1, template_var 7),
                        template_var 6),
                      template_var 5)),
                  template_app
                   (template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 6),
                    template_var 5))),
              template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 6),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 7),
                         template_var 6),
                       template_var 5))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 6),
                     template_var 5)))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 6),
                 template_var 5)))
           )))]:
   (string * thm * template) list
### theory "Draft.Sepref_FrameTemplates"
### 0.548s elapsed time, 0.696s cpu time, 0.076s GC time
val it = (): unit
