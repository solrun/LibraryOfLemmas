Loading theory "Draft.Structured_Apply" (required by "Draft.Sepref_BasicTemplates" via "Draft.Sepref_Basic")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Sepref_BasicTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Named_Theorems_Rev" (required by "Draft.Sepref_BasicTemplates" via "Draft.Sepref_Basic" via "Draft.Sepref_Misc")
Loading theory "HOL-Library.Stream" (required by "Draft.Sepref_BasicTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
signature NAMED_THEOREMS_REV =
  sig
    val add: string -> attribute
    val add_thm: string -> thm -> Context.generic -> Context.generic
    val check: Proof.context -> string * Position.T -> string
    val declare: binding -> string -> local_theory -> string * local_theory
    val del: string -> attribute
    val del_thm: string -> thm -> Context.generic -> Context.generic
    val get: Proof.context -> string -> thm list
    val member: Proof.context -> string -> thm -> bool
  end
structure Named_Theorems_Rev: NAMED_THEOREMS_REV
### theory "Draft.Named_Theorems_Rev"
### 0.069s elapsed time, 0.312s cpu time, 0.000s GC time
Loading theory "Draft.PO_Normalizer" (required by "Draft.Sepref_BasicTemplates" via "Draft.Sepref_Basic" via "Draft.Sepref_Misc")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature STRUCTURED_APPLY =
  sig
    val apply1:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val applyT:
       Method.text * Position.range ->
         Proof.state -> Proof.state Seq.result Seq.seq
    val apply_focus:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val apply_solve:
       Method.text_range -> Proof.state -> Proof.state Seq.result Seq.seq
    val focus: Proof.state -> Proof.state
    val solved: Proof.state -> Proof.state
    val unfocus: Proof.state -> Proof.state
  end
structure Structured_Apply: STRUCTURED_APPLY
### theory "Draft.Structured_Apply"
### 0.084s elapsed time, 0.373s cpu time, 0.000s GC time
Loading theory "Draft.Sepref_Id_Op" (required by "Draft.Sepref_BasicTemplates" via "Draft.Sepref_Basic")
### ML warning (line 63 of "$AFP/Refine_Imperative_HOL/Lib/PO_Normalizer.ML"):
### Pattern is not exhaustive.
### ML warning (line 77 of "$AFP/Refine_Imperative_HOL/Lib/PO_Normalizer.ML"):
### Pattern is not exhaustive.
signature PO_NORMALIZER =
  sig
    val gen_norm_rule: thm list -> norm_set -> Proof.context -> thm -> thm
    val gen_norm_tac: norm_set -> Proof.context -> tactic'
    type norm_set =
       {cong_rules: thm list,
        norm_rules: thm list, refl_rules: thm list, trans_rules: thm list}
  end
structure PO_Normalizer: PO_NORMALIZER
### theory "Draft.PO_Normalizer"
### 0.055s elapsed time, 0.196s cpu time, 0.033s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Sepref_BasicTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Function_Algebras"
### 0.143s elapsed time, 0.582s cpu time, 0.033s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Sepref_BasicTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
infix 0 THEN_ELSE_COMB'
signature ID_OP_TACTICAL =
  sig
    val DF_SOLVE_FWD: bool -> tactic' -> tactic'
    val SOLVE_FWD: tactic' -> tactic'
  end
structure Id_Op_Tactical: ID_OP_TACTICAL
### theory "HOL-Library.Set_Algebras"
### 0.231s elapsed time, 0.900s cpu time, 0.095s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Sepref_BasicTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
structure Id_Op:
  sig
    val add_id_rule: thm -> Proof.context -> Proof.context
    val cfg_id_debug: bool Config.T
    val cfg_id_trace_fallback: bool Config.T
    val dest_id_rl: thm -> term * typ
    val do_unprotect_tac: Proof.context -> int -> tactic
    val id_a_conv: conv -> cterm -> thm
    val id_tac: id_tac_mode -> Proof.context -> int -> tactic
    datatype id_tac_mode = Init | Normal | Solve | Step
    val protect: typ list -> term -> term
    val protect_conv: Proof.context -> conv
    val unprotect_conv: Proof.context -> conv
  end
### theory "Draft.Sepref_Id_Op"
### 0.576s elapsed time, 2.230s cpu time, 0.187s GC time
Loading theory "Draft.Sepref_Misc" (required by "Draft.Sepref_BasicTemplates" via "Draft.Sepref_Basic")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.877s elapsed time, 3.416s cpu time, 0.307s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.883s elapsed time, 3.146s cpu time, 0.642s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Sepref_Misc"
### 0.989s elapsed time, 2.824s cpu time, 0.698s GC time
Loading theory "Draft.Sepref_Basic" (required by "Draft.Sepref_BasicTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.893s elapsed time, 5.630s cpu time, 0.896s GC time
Loading theory "Draft.Templates" (required by "Draft.Sepref_BasicTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.181s cpu time, 0.060s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Sepref_BasicTemplates")
### Ignoring duplicate rewrite rule:
### hn_refine ?\<Gamma>1 ?c1 ?\<Gamma>'1 ?R1 FAIL == True
signature SEPREF_BASIC =
  sig
    val PHASES': phase list -> phases_ctrl -> Proof.context -> tactic'
    val apply_under_lambda:
       (Proof.context -> term -> term) -> Proof.context -> term -> term
    val constrain_type_pre: typ -> term -> term
    val dbg_phases_ctrl: phases_ctrl
    val dest_hn_ctxt: term -> term * term * term
    val dest_hn_ctxt_opt: term -> (term * term * term) option
    val dest_hn_refine: term -> term * term * term * term * term
    val dest_hnr_absfun: term -> bool * (term * term list)
    val dest_lambda_rc:
       Proof.context -> term -> (term * (term -> term)) * Proof.context
    val dest_nresT: typ -> typ
    val dflt_phases_ctrl: phases_ctrl
    val flag_phases_ctrl: bool -> phases_ctrl
    val hn_refine_concl_conv_a:
       (Proof.context -> conv) -> Proof.context -> conv
    val hn_refine_conv: conv -> conv -> conv -> conv -> conv -> conv
    val hn_refine_conv_a: conv -> conv
    val is_hn_ctxt: term -> bool
    val is_hn_refine_concl: term -> bool
    val is_nresT: typ -> bool
    val is_true: term -> bool
    val list_star: term list -> term
    val mk_cequals: cterm * cterm -> cterm
    val mk_compN_pre: int -> term -> term -> term
    val mk_curry0_pre: term -> term
    val mk_curryN_pre: int -> term -> term
    val mk_curry_pre: term -> term
    val mk_entails: term * term -> term
    val mk_hn_refine: term * term * term * term * term -> term
    val mk_hnr_absfun: bool * (term * term list) -> term
    val mk_hnr_absfun': term * term list -> term
    val mk_nresT: typ -> typ
    val mk_pair_in_pre: term -> term -> term -> term
    val mk_star: term * term -> term
    val mk_uncurry0_pre: term -> term
    val mk_uncurryN_pre: int -> term -> term
    val mk_uncurry_pre: term -> term
    type phase = string * (Proof.context -> tactic') * int
    type phases_ctrl =
       {int_res: bool,
        start: string option, stop: string option, trace: bool}
    val star_permute_tac: Proof.context -> tactic
    val strip_star: term -> term list
  end
signature SEPREF_DEBUGGING =
  sig
    val DBG_CONVERSION: bool Config.T -> Proof.context -> conv -> tactic'
    val DBG_CONVERSION': Proof.context -> conv -> tactic'
    val cfg_debug_all: bool Config.T
    val dbg_msg_tac:
       bool Config.T ->
         (Proof.context -> int -> thm -> string) -> Proof.context -> tactic'
    val dbg_msg_tac':
       (Proof.context -> int -> thm -> string) -> Proof.context -> tactic'
    val dbg_trace_msg: bool Config.T -> Proof.context -> string -> unit
    val dbg_trace_msg': Proof.context -> string -> unit
    val error_tac': string -> Proof.context -> tactic'
    val is_debug: bool Config.T -> Proof.context -> bool
    val is_debug': Proof.context -> bool
    val msg_allgoals: string -> Proof.context -> int -> thm -> string
    val msg_from_subgoal:
       string ->
         (term -> Proof.context -> string) ->
           Proof.context -> int -> thm -> string
    val msg_subgoal: string -> Proof.context -> int -> thm -> string
    val msg_text: string -> Proof.context -> int -> thm -> string
    val tracing_tac': string -> Proof.context -> tactic'
    val warning_tac': string -> Proof.context -> tactic'
  end
structure Sepref_Basic: SEPREF_BASIC
structure Sepref_Debugging: SEPREF_DEBUGGING
infix 1 THEN_NEXT
infix 1 THEN_ALL_NEW_LIST
infix 1 THEN_ALL_NEW_LIST'
signature STACTICAL =
  sig
    val APPLY_LIST: tactic' list -> tactic'
    val THEN_ALL_NEW_LIST: tactic' * tactic' list -> tactic'
    val THEN_ALL_NEW_LIST': tactic' * (tactic' list * tactic') -> tactic'
    val THEN_NEXT: tactic' * tactic' -> tactic'
  end
structure STactical: STACTICAL
val THEN_ALL_NEW_LIST = fn: tactic' * tactic' list -> tactic'
val APPLY_LIST = fn: tactic' list -> tactic'
val THEN_NEXT = fn: tactic' * tactic' -> tactic'
val THEN_ALL_NEW_LIST' = fn: tactic' * (tactic' list * tactic') -> tactic'
### theory "Draft.Sepref_Basic"
### 1.156s elapsed time, 2.642s cpu time, 0.805s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.709s elapsed time, 1.689s cpu time, 0.701s GC time
Loading theory "Draft.Sepref_BasicTemplates"
val templateLemmas =
   [("Sepref_Basic.pure_pure", "is_pure (pure ?P)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Sepref_Basic.the_pure_pure", "the_pure (pure ?R) = ?R",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Sepref_Basic.rdomp_ctxt", "rdomp (hn_ctxt ?R) = rdomp ?R",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Sepref_Basic.hn_refine_false", "hn_refine false ?c ?\<Gamma>' ?R ?m",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)
         )),
    ("Sepref_Basic.hnr_FAIL", "hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R FAIL",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Sepref_Basic.rdom_pure", "rdom (pure ?R) = Range ?R",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Sepref_Basic.pure_hn_ctxt", "is_pure ?P ==> is_pure (hn_ctxt ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Sepref_Basic.invalidate",
     "?R ?x ?y \<Longrightarrow>\<^sub>A invalid_assn ?R ?x ?y",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_var 2, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("Sepref_Basic.is_pure_conv", "is_pure ?R = (EX R'. ?R = pure R')",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Sepref_Basic.rdomp_pure", "rdomp (pure ?R) ?a = (?a : Range ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Sepref_Basic.pure_eq_conv", "(pure ?R = pure ?R') = (?R = ?R')",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Sepref_Basic.pure_the_pure", "is_pure ?R ==> pure (the_pure ?R) = ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Sepref_Basic.is_pure_iff_pure_assn",
     "is_pure ?P = (ALL x x'. is_pure_assn (?P x x'))",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Sepref_Basic.pure_app_eq", "pure ?R ?a ?c = \<up> ((?c, ?a) : ?R)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2)))),
    ("Sepref_Basic.invalidate_clone",
     "?R ?x ?y \<Longrightarrow>\<^sub>A invalid_assn ?R ?x ?y * ?R ?x ?y",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_var 2, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_var 2, template_var 1),
               template_var 0)))
         )),
    ("Sepref_Basic.prod_assn_pure_conv",
     "pure ?R1.0 \<times>\<^sub>a pure ?R2.0 =
      pure (?R1.0 \<times>\<^sub>r ?R2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("Sepref_Basic.Range_of_constraint_conv",
     "Range (?A Int UNIV \<times> ?C) = Range ?A Int ?C",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_hole 1), t_empty))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 4, template_var 1)),
         template_var 0))),
    ("Sepref_Basic.hn_val_unfold",
     "hn_val ?R ?a ?b = \<up> ((?b, ?a) : ?R)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2)))),
    ("Sepref_Basic.invalid_pure_recover",
     "invalid_assn (pure ?R) ?x ?y = pure ?R ?x ?y * true",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Sepref_Basic.pure_rel_eq_false_iff",
     "(pure ?R ?x ?y = false) = ((?y, ?x) ~: ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2)))),
    ("Sepref_Basic.is_pure_the_pure_id_eq",
     "is_pure ?R ==> (the_pure ?R = Id) = (?R = pure Id)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_bimplication
        (template_equation
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_equation
          (template_var 0,
           template_app (template_hole 0, template_hole 2))))),
    ("Sepref_Basic.invalidate_clone'",
     "?R ?x ?y \<Longrightarrow>\<^sub>A
      invalid_assn ?R ?x ?y * ?R ?x ?y * true",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_var 2, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_var 2, template_var 1),
                   template_var 0))),
             template_hole 0))
         )),
    ("Sepref_Basic.hnr_RETURN_pass",
     "hn_refine (hn_ctxt ?R ?x ?p) (return ?p) (hn_invalid ?R ?x ?p) ?R
       (RETURN ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 0)),
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 1, template_var 2)),
                   template_var 1),
                 template_var 0)),
             template_var 2),
           template_app (template_hole 0, template_var 1))
         )),
    ("Sepref_Basic.hn_invalidI",
     "?h \<Turnstile> hn_ctxt ?P ?x ?y ==> hn_invalid ?P ?x ?y = true",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 1, template_var 3)),
             template_var 2),
           template_var 1),
         template_hole 0))),
    ("Sepref_Basic.hnr_RETURN_pure",
     "(?c, ?a) : ?R ==>
      hn_refine emp (return ?c) emp (pure ?R) (RETURN ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app (template_hole 2, template_var 2)),
                 template_hole 3),
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Sepref_Basic.hn_refine_split_post",
     "hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R ?a ==>
      hn_refine ?\<Gamma> ?c (?\<Gamma>' \<or>\<^sub>A ?\<Gamma>'') ?R ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_var 2),
             template_var 1)
           ))),
    ("Sepref_Basic.hn_refine_post_other",
     "hn_refine ?\<Gamma> ?c ?\<Gamma>'' ?R ?a ==>
      hn_refine ?\<Gamma> ?c (?\<Gamma>' \<or>\<^sub>A ?\<Gamma>'') ?R ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_var 2),
             template_var 1)
           ))),
    ("Sepref_Basic.is_pureI",
     "(!!x x'. ?P x x' = \<up> (?P' x x')) ==> is_pure ?P",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Sepref_Basic.prod_assn_pair_conv",
     "(?A \<times>\<^sub>a ?B) (?a1.0, ?b1.0) (?a2.0, ?b2.0) =
      ?A ?a1.0 ?a2.0 * ?B ?b1.0 ?b2.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_var 5, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_var 4, template_var 2),
           template_var 0)))),
    ("Sepref_Basic.mod_pure_conv",
     "((?h, ?as) \<Turnstile> pure ?R ?a ?b) = (?as = {} & (?b, ?a) : ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3)),
               template_var 4))
           ))),
    ("Sepref_Basic.hnr_pre_pure_conv",
     "hn_refine (?\<Gamma> * \<up> ?P) ?c ?\<Gamma>' ?R ?a =
      (?P --> hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R ?a)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_app (template_hole 1, template_var 4))),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Sepref_Basic.hn_refine_nofailI",
     "(nofail ?a ==> hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R ?a) ==>
      hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R ?a",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_hole 1, template_var 4))],
          template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0),
                template_var 4)
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 4)
           ))),
    ("Sepref_Basic.hnr_pre_ex_conv",
     "hn_refine (\<exists>\<^sub>Ax. ?\<Gamma> x) ?c ?\<Gamma>' ?R ?a =
      (ALL x. hn_refine (?\<Gamma> x) ?c ?\<Gamma>' ?R ?a)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2, template_app (template_hole 1, t_empty)),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app (template_hole 0, t_empty))),
    ("Sepref_Basic.hn_refine_cons_pre",
     "[| ?P \<Longrightarrow>\<^sub>t ?P'; hn_refine ?P' ?c ?Q ?R ?m |]
      ==> hn_refine ?P ?c ?Q ?R ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Sepref_Basic.hn_refine_ref",
     "[| ?m <= ?m'; hn_refine ?P ?c ?Q ?R ?m |]
      ==> hn_refine ?P ?c ?Q ?R ?m'",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0),
              template_var 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 4)
           ))),
    ("Sepref_Basic.bind_det_aux",
     "[| RETURN ?x <= ?m; RETURN ?y <= ?f ?x |] ==> RETURN ?y <= ?m >>= ?f",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 3),
          template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_app (template_var 0, template_var 3))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Sepref_Basic.hn_refine_cons_post",
     "[| hn_refine ?P ?c ?Q ?R ?m; ?Q \<Longrightarrow>\<^sub>t ?Q' |]
      ==> hn_refine ?P ?c ?Q' ?R ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4),
                 template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Sepref_Basic.hn_refine_guessI",
     "[| hn_refine ?P ?f ?P' ?R ?f'; ?f = ?f_conc |]
      ==> hn_refine ?P ?f_conc ?P' ?R ?f'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation (template_var 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 0),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("Sepref_Basic.hnr_ASSERT",
     "(?\<Phi> ==> hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R ?c') ==>
      hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R (ASSERT ?\<Phi> >>= (%_. ?c'))",
     template_implication
      ([template_implication
         ([template_predicate (template_var 5)],
          template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0)
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 5)),
               t_empty))
           ))),
    ("Sepref_Basic.hn_refine_preI",
     "(!!h. h \<Turnstile> ?\<Gamma> ==>
            hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R ?a) ==>
      hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R ?a",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Sepref_Basic.hn_refine_frame",
     "[| hn_refine ?P' ?c ?Q' ?R ?m;
         ?P \<Longrightarrow>\<^sub>t ?F * ?P' |]
      ==> hn_refine ?P ?c (?F * ?Q') ?R ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 6))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 5),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 4)),
               template_var 3),
             template_var 2)
           ))),
    ("Sepref_Basic.is_pureE",
     "[| is_pure ?P;
         !!P'. (!!x x'. ?P x x' = \<up> (P' x x')) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Sepref_Basic.hn_refine_cons_res",
     "[| hn_refine ?\<Gamma> ?f ?\<Gamma>' ?R ?g;
         !!a c. ?R a c \<Longrightarrow>\<^sub>t ?R' a c |]
      ==> hn_refine ?\<Gamma> ?f ?\<Gamma>' ?R' ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("Sepref_Basic.hn_refine_augment_res",
     "[| hn_refine ?\<Gamma> ?f ?\<Gamma>' ?R ?g;
         ?g \<le>\<^sub>n SPEC ?\<Phi> |]
      ==> hn_refine ?\<Gamma> ?f ?\<Gamma>'
           (%a c. ?R a c * \<up> (?\<Phi> a)) ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 5),
                   template_var 4),
                 template_var 3),
               t_empty),
             template_var 1)
           ))),
    ("Sepref_Basic.hn_refineI",
     "(nofail ?m ==>
       <?\<Gamma>> ?c <%r. ?\<Gamma>' *
                           (\<exists>\<^sub>Ax.
                               ?R x r *
                               \<up> (RETURN x <= ?m))>\<^sub>t) ==>
      hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R ?m",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_hole 8, template_var 4))],
          template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                t_empty)
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_var 4)
           ))),
    ("Sepref_Basic.hn_refineD",
     "[| hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R ?m; nofail ?m |]
      ==> <?\<Gamma>> ?c <%r. ?\<Gamma>' *
                              (\<exists>\<^sub>Ax.
                                  ?R x r *
                                  \<up> (RETURN x <= ?m))>\<^sub>t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 4),
               template_var 3),
             t_empty)
           ))),
    ("Sepref_Basic.imp_correctI",
     "[| hn_refine ?\<Gamma> ?c ?\<Gamma>' ?R ?a; ?a <= SPEC ?\<Phi> |]
      ==> <?\<Gamma>> ?c <%r. \<exists>\<^sub>Ara.
                                 ?\<Gamma>' * ?R ra r *
                                 \<up> (?\<Phi> ra)>\<^sub>t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 4),
             t_empty)
           ))),
    ("Sepref_Basic.wit_swap_forall",
     "[| <?P> ?c <%_. true>; ALL x. ?A x --> <?P> ?c <?Q x> |]
      ==> <?P> ?c
          <%r. \<not>\<^sub>A (\<exists>\<^sub>Ax.
                                  \<up> (?A x) * \<not>\<^sub>A ?Q x r)>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              t_empty)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             t_empty)
           ))),
    ("Sepref_Basic.hn_refine_cons",
     "[| ?P \<Longrightarrow>\<^sub>t ?P'; hn_refine ?P' ?c ?Q ?R ?m;
         ?Q \<Longrightarrow>\<^sub>t ?Q';
         !!x y. ?R x y \<Longrightarrow>\<^sub>t ?R' x y |]
      ==> hn_refine ?P ?c ?Q' ?R' ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 7),
                   template_var 5),
                 template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Sepref_Basic.hn_refine_cons_complete",
     "[| ?P \<Longrightarrow>\<^sub>t ?P'; hn_refine ?P' ?c ?Q ?R ?m;
         ?Q \<Longrightarrow>\<^sub>t ?Q';
         !!x y. ?R x y \<Longrightarrow>\<^sub>t ?R' x y; ?m <= ?m' |]
      ==> hn_refine ?P ?c ?Q' ?R' ?m'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 8),
                   template_var 6),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Sepref_Basic.hn_admissible",
     "[| precise ?Ry;
         ALL f:?A. nofail (f ?x) --> <?P> ?c <%r. hn_rel ?Ry (f ?x) r * ?F>;
         nofail (INF f\<in>?A. f ?x) |]
      ==> <?P> ?c <%r. hn_rel ?Ry (INF f\<in>?A. f ?x) r * ?F>",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, t_empty), template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             t_empty)
           ))),
    ("Sepref_Basic.hn_admissible'",
     "[| precise ?Ry;
         ALL f:?A.
            nofail (f ?x) -->
            <?P> ?c <%r. hn_rel ?Ry (f ?x) r * ?F>\<^sub>t;
         nofail (INF f\<in>?A. f ?x) |]
      ==> <?P> ?c <%r. hn_rel ?Ry (INF f\<in>?A. f ?x) r * ?F>\<^sub>t",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, t_empty), template_var 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1),
             t_empty)
           ))),
    ("Sepref_Basic.hnr_bind",
     "[| hn_refine ?\<Gamma> ?m' ?\<Gamma>1.0 ?Rh ?m;
         !!x x'.
            RETURN x <= ?m ==>
            hn_refine (?\<Gamma>1.0 * hn_ctxt ?Rh x x') (?f' x')
             (?\<Gamma>2.0 x x') ?R (?f x);
         !!x x'.
            ?\<Gamma>2.0 x x' \<Longrightarrow>\<^sub>t
            ?\<Gamma>' * hn_ctxt ?Rx x x' |]
      ==> hn_refine ?\<Gamma> (?m' >>= ?f') ?\<Gamma>' ?R (?m >>= ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 10, template_var 10),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, template_var 10),
                   template_app
                    (template_app (template_hole 1, template_var 9),
                     template_var 5)),
                 template_var 1),
               template_var 3),
             template_app
              (template_app (template_hole 0, template_var 6),
               template_var 2))
           ))),
    ("Sepref_Basic.hnr_If",
     "[| ?\<Gamma> \<Longrightarrow>\<^sub>t
         ?\<Gamma>1.0 * hn_val bool_rel ?a ?a';
         ?a ==>
         hn_refine (?\<Gamma>1.0 * hn_val bool_rel ?a ?a') ?b' ?\<Gamma>2b
          ?R ?b;
         ~ ?a ==>
         hn_refine (?\<Gamma>1.0 * hn_val bool_rel ?a ?a') ?c' ?\<Gamma>2c
          ?R ?c;
         ?\<Gamma>2b \<or>\<^sub>A ?\<Gamma>2c \<Longrightarrow>\<^sub>t
         ?\<Gamma>' |]
      ==> hn_refine ?\<Gamma> (if ?a' then ?b' else ?c') ?\<Gamma>' ?R
           (if ?a then ?b else ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 11),
              template_app
               (template_app (template_hole 8, template_var 10),
                template_app
                 (template_app
                   (template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_hole 5)),
                    template_var 9),
                  template_var 8)))
            ),
        template_implication
         ([template_predicate (template_var 9)],
          template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 8, template_var 10),
                          template_app
                           (template_app
                             (template_app
                               (template_hole 7,
                                template_app
                                 (template_hole 6, template_hole 5)),
                              template_var 9),
                            template_var 8))),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4)
              )),
        template_implication
         ([template_negation (template_predicate (template_var 9))],
          template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 8, template_var 10),
                          template_app
                           (template_app
                             (template_app
                               (template_hole 7,
                                template_app
                                 (template_hole 6, template_hole 5)),
                              template_var 9),
                            template_var 8))),
                      template_var 3),
                    template_var 2),
                  template_var 5),
                template_var 1)
              )),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 11),
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 8),
                       template_var 7),
                     template_var 3)),
                 template_var 0),
               template_var 5),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 9),
                 template_var 4),
               template_var 1))
           ))),
    ("Sepref_Basic.hnr_RECT",
     "[| !!cf af ax px.
            (!!ax px.
                hn_refine (hn_ctxt ?Rx ax px * ?F) (cf px) (?F' ax px) ?Ry
                 (af ax)) ==>
            hn_refine (hn_ctxt ?Rx ax px * ?F) (?cB cf px) (?F' ax px) ?Ry
             (?aB af ax);
         !!x. mono_Heap (%f. ?cB f x) |]
      ==> hn_refine (hn_ctxt ?Rx ?ax ?px * ?F) (heap.fixp_fun ?cB ?px)
           (?F' ?ax ?px) ?Ry (REC\<^sub>T ?aB ?ax)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_app
                            (template_app (template_hole 7, template_var 7),
                             template_var 1),
                           template_var 0)),
                       template_var 6)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_hole 1)),
                         template_app (template_hole 5, template_hole 4)),
                       template_var 3),
                     template_var 0)),
                 template_app
                  (template_app (template_var 5, template_var 1),
                   template_var 0)),
               template_var 4),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Sepref_Basic.hnr_RECT_old",
     "[| !!cf af ax px.
            (!!ax px.
                hn_refine (hn_ctxt ?Rx ax px * ?F) (cf px) (?F' ax px) ?Ry
                 (af ax)) ==>
            hn_refine (hn_ctxt ?Rx ax px * ?F) (?cB cf px) (?F' ax px) ?Ry
             (?aB af ax);
         !!x. mono_Heap (%f. ?cB f x); precise ?Ry |]
      ==> hn_refine (hn_ctxt ?Rx ?ax ?px * ?F) (heap.fixp_fun ?cB ?px)
           (?F' ?ax ?px) ?Ry (REC\<^sub>T ?aB ?ax)",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (template_app (template_hole 4, template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_app
                            (template_app (template_hole 8, template_var 7),
                             template_var 1),
                           template_var 0)),
                       template_var 6)),
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_hole 1)),
                         template_app (template_hole 6, template_hole 5)),
                       template_var 3),
                     template_var 0)),
                 template_app
                  (template_app (template_var 5, template_var 1),
                   template_var 0)),
               template_var 4),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.Sepref_BasicTemplates"
### 0.627s elapsed time, 0.787s cpu time, 0.078s GC time
val it = (): unit
