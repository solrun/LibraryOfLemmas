Loading theory "HOL-Library.Stream" (required by "Draft.DebruijnTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.MPolyExtension" (required by "Draft.DebruijnTemplates" via "Draft.Debruijn" via "Draft.PolyAtoms" via "Draft.ExecutiblePolyProps")
Loading theory "HOL-Library.BigO" (required by "Draft.DebruijnTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.DebruijnTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### Ambiguous input (line 42 of "$AFP/Virtual_Substitution/MPolyExtension.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Series.suminf_binder" ("_position" k)
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" lookup)
###           ("_cargs"
###             ("_constrain" ("_position" x)
###               ("\<^type>Poly_Mapping.poly_mapping" ("_position_sort" 'a)
###                 ("_ofsort" ("_position_sort" 'b)
###                   ("_class_name" comm_semiring_1))))
###             ("_constrain" ("_position" k) ("_position_sort" 'a))))
###         ("_applC"
###           ("_constrain" ("_position" f)
###             ("\<^type>fun" ("_position_sort" 'a)
###               ("_ofsort" ("_position_sort" 'b)
###                 ("_class_name" comm_semiring_1))))
###           ("_position" k))))
###     ("_sum" ("_position" k) ("_applC" ("_position" keys) ("_position" x))
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" x)
###             ("_constrain" ("_position" k) ("_position_sort" 'a))))
###         ("_applC" ("_position" f) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Sum_any" ("_position" k)
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" lookup)
###           ("_cargs"
###             ("_constrain" ("_position" x)
###               ("\<^type>Poly_Mapping.poly_mapping" ("_position_sort" 'a)
###                 ("_ofsort" ("_position_sort" 'b)
###                   ("_class_name" comm_semiring_1))))
###             ("_constrain" ("_position" k) ("_position_sort" 'a))))
###         ("_applC"
###           ("_constrain" ("_position" f)
###             ("\<^type>fun" ("_position_sort" 'a)
###               ("_ofsort" ("_position_sort" 'b)
###                 ("_class_name" comm_semiring_1))))
###           ("_position" k))))
###     ("_sum" ("_position" k) ("_applC" ("_position" keys) ("_position" x))
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" x)
###             ("_constrain" ("_position" k) ("_position_sort" 'a))))
###         ("_applC" ("_position" f) ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.765s elapsed time, 2.977s cpu time, 0.307s GC time
Found termination order: "{}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.861s elapsed time, 3.338s cpu time, 0.388s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.MPolyExtension"
### 0.933s elapsed time, 3.631s cpu time, 0.388s GC time
Loading theory "Draft.ExecutiblePolyProps" (required by "Draft.DebruijnTemplates" via "Draft.Debruijn" via "Draft.PolyAtoms")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
AList.merge
  AList.merge ?qs ?ps == foldr (%(x, y). AList.update x y) ?ps ?qs
AList.update
  AList.update ?k ?v [] == [(?k, ?v)]
  AList.update ?k ?v (?p # ?ps) ==
  if fst ?p = ?k then (?k, ?v) # ?ps else ?p # AList.update ?k ?v ?ps
Ball
  Ball (set ?xs) ?p == list_all ?p ?xs
Collect
  Collect ?p == set (filter ?p enum_class.enum)
HOL.eq
  ?x = ?x == True
  ?a = ?b == equal_class.equal ?a ?b
If
  if False then ?x else ?y == ?y
  if True then ?x else ?y == ?x
List.member
  List.member [] ?y == False
  List.member (?x # ?xs) ?y == ?x = ?y | List.member ?xs ?y
Not
  ~ False == True
  ~ True == False
Prod_any
  Prod_any ?g == prod ?g {a. ?g a ~= (1::?'b)}
Sum_any
  Sum_any ?g == sum ?g {a. ?g a ~= (0::?'b)}
case_option
  case Some ?x2.0 of None => ?f1.0 | Some x => ?f2.0 x == ?f2.0 ?x2.0
  case None of None => ?f1.0 | Some x => ?f2.0 x == ?f1.0
case_prod
  case (?a, ?b) of (x, xa) => ?f x xa == ?f ?a ?b
comp
  ?f o ?g == %x. ?f (?g x)
conj
  ?p & True == ?p
  ?p & False == False
  True & ?p == ?p
  False & ?p == False
disj
  ?p | True == True
  ?p | False == ?p
  True | ?p == True
  False | ?p == ?p
equal_class.equal [nat]
  equal_class.equal ?x ?x == True
  equal_class.equal 0 (Suc ?x2.0) == False
  equal_class.equal (Suc ?x2.0) 0 == False
  equal_class.equal (Suc ?x2.0) (Suc ?y2.0) == equal_class.equal ?x2.0 ?y2.0
  equal_class.equal 0 0 == True
equal_class.equal [poly_mapping]
  equal_class.equal (Pm_fmap ?xs) (Pm_fmap ?ys) ==
  fmpred (%k v. lookup0 ?xs k = lookup0 ?ys k) (?xs ++\<^sub>f ?ys)
fBall
  fBall ?xa == Ball (fset ?xa)
filter
  filter ?p [] == []
  filter ?p (?x # ?xs) ==
  if ?p ?x then ?x # filter ?p ?xs else filter ?p ?xs
fimage
  fset (?xb |`| ?xc) == ?xb ` fset ?xc
fmadd
  fmap_of_list ?m ++\<^sub>f fmap_of_list ?n ==
  fmap_of_list (AList.merge ?m ?n)
fmdom
  fmdom (fmap_of_list ?m) == fst |`| fset_of_list ?m
fmlookup
  fmlookup (fmap_of_list ?m) == map_of ?m
fmlookup_default
  fmlookup_default ?d ?m ?x ==
  case fmlookup ?m ?x of None => ?d | Some v => v
fmpred
  fmpred ?p ?m == fBall (fmdom ?m) (%x. ?p x (the (fmlookup ?m x)))
foldr
  foldr ?f [] == id
  foldr ?f (?x # ?xs) == ?f ?x o foldr ?f ?xs
fset
  fset (Abs_fset ?x) == ?x
fset_of_list
  fset (fset_of_list ?xa) == set ?xa
fst
  fst (?x1.0, ?x2.0) == ?x1.0
id
  id == %x. x
image
  ?f ` set ?xs == set (map ?f ?xs)
insertion
  insertion ?xb (MPoly ?xa) == insertion_aux ?xb ?xa
insertion_aux
  insertion_aux ?x ?xc == insertion_fun ?x (lookup ?xc)
insertion_fun
  insertion_fun ?f ?p == SUM m. ?p m * (PROD v. ?f v ^ lookup m v)
list_all
  list_all ?p [] == True
  list_all ?p (?x # ?xs) == ?p ?x & list_all ?p ?xs
map
  map ?f [] == []
  map ?f (?x21.0 # ?x22.0) == ?f ?x21.0 # map ?f ?x22.0
map_of
  map_of ((?l, ?v) # ?ps) ?k == if ?l = ?k then Some ?v else map_of ?ps ?k
  map_of [] ?k == None
poly_mapping.lookup
  lookup (Pm_fmap ?xs) ?x == lookup0 ?xs ?x
power
  ?a ^ 0 == 1::?'a
  ?a ^ Suc ?n == ?a * ?a ^ ?n
prod
  prod ?g (set ?xs) == prod_list (map ?g (remdups ?xs))
prod_list
  prod_list ?xs == foldr (*) ?xs (1::?'a)
remdups
  remdups [] == []
  remdups (?x # ?xs) ==
  if List.member ?xs ?x then remdups ?xs else ?x # remdups ?xs
sum
  sum ?g (set ?xs) == sum_list (map ?g (remdups ?xs))
sum_list
  sum_list ?xs == foldr (+) ?xs (0::?'a)
the
  the (Some ?x2.0) == ?x2.0
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
AList.merge
  AList.merge ?qs ?ps == foldr (%(x, y). AList.update x y) ?ps ?qs
AList.update
  AList.update ?k ?v [] == [(?k, ?v)]
  AList.update ?k ?v (?p # ?ps) ==
  if fst ?p = ?k then (?k, ?v) # ?ps else ?p # AList.update ?k ?v ?ps
Ball
  Ball (set ?xs) ?p == list_all ?p ?xs
HOL.eq
  ?x = ?x == True
  ?a = ?b == equal_class.equal ?a ?b
If
  if False then ?x else ?y == ?y
  if True then ?x else ?y == ?x
List.member
  List.member [] ?y == False
  List.member (?x # ?xs) ?y == ?x = ?y | List.member ?xs ?y
Not
  ~ False == True
  ~ True == False
Poly_Mapping.keys
  keys (Pm_fmap ?xs) == fmdom' (clearjunk0 ?xs)
case_option
  case Some ?x2.0 of None => ?f1.0 | Some x => ?f2.0 x == ?f2.0 ?x2.0
  case None of None => ?f1.0 | Some x => ?f2.0 x == ?f1.0
case_prod
  case (?a, ?b) of (x, xa) => ?f x xa == ?f ?a ?b
clearjunk0
  clearjunk0 ?m ==
  fmfilter (%k. ~ equal_class.equal (fmlookup ?m k) (Some (0::?'b))) ?m
coeff
  coeff == coeff_code
coeff_code
  coeff_code (MPoly ?xa) == lookup ?xa
comp
  ?f o ?g == %x. ?f (?g x)
conj
  ?p & True == ?p
  ?p & False == False
  True & ?p == ?p
  False & ?p == False
disj
  ?p | True == True
  ?p | False == ?p
  True | ?p == True
  False | ?p == ?p
equal_class.equal [nat]
  equal_class.equal ?x ?x == True
  equal_class.equal 0 (Suc ?x2.0) == False
  equal_class.equal (Suc ?x2.0) 0 == False
  equal_class.equal (Suc ?x2.0) (Suc ?y2.0) == equal_class.equal ?x2.0 ?y2.0
  equal_class.equal 0 0 == True
equal_class.equal [option]
  equal_class.equal ?x ?x == True
  equal_class.equal None (Some ?x2.0) == False
  equal_class.equal (Some ?x2.0) None == False
  equal_class.equal (Some ?x2.0) (Some ?y2.0) == ?x2.0 = ?y2.0
  equal_class.equal None None == True
equal_class.equal [poly_mapping]
  equal_class.equal (Pm_fmap ?xs) (Pm_fmap ?ys) ==
  fmpred (%k v. lookup0 ?xs k = lookup0 ?ys k) (?xs ++\<^sub>f ?ys)
fBall
  fBall ?xa == Ball (fset ?xa)
filter
  filter ?p [] == []
  filter ?p (?x # ?xs) ==
  if ?p ?x then ?x # filter ?p ?xs else filter ?p ?xs
fimage
  fset (?xb |`| ?xc) == ?xb ` fset ?xc
fmadd
  fmap_of_list ?m ++\<^sub>f fmap_of_list ?n ==
  fmap_of_list (AList.merge ?m ?n)
fmdom
  fmdom (fmap_of_list ?m) == fst |`| fset_of_list ?m
fmdom'
  fmdom' ?m == fset (fmdom ?m)
fmfilter
  fmfilter ?p (fmap_of_list ?m) ==
  fmap_of_list (filter (%(k, uu_). ?p k) ?m)
fmlookup
  fmlookup (fmap_of_list ?m) == map_of ?m
fmlookup_default
  fmlookup_default ?d ?m ?x ==
  case fmlookup ?m ?x of None => ?d | Some v => v
fmpred
  fmpred ?p ?m == fBall (fmdom ?m) (%x. ?p x (the (fmlookup ?m x)))
foldr
  foldr ?f [] == id
  foldr ?f (?x # ?xs) == ?f ?x o foldr ?f ?xs
fset
  fset (Abs_fset ?x) == ?x
fset_of_list
  fset (fset_of_list ?xa) == set ?xa
fst
  fst (?x1.0, ?x2.0) == ?x1.0
id
  id == %x. x
image
  ?f ` set ?xs == set (map ?f ?xs)
insertion
  insertion ?i ?mp ==
  SUM m:monomials ?mp. coeff ?mp m * (PROD k:keys m. ?i k ^ lookup m k)
list_all
  list_all ?p [] == True
  list_all ?p (?x # ?xs) == ?p ?x & list_all ?p ?xs
map
  map ?f [] == []
  map ?f (?x21.0 # ?x22.0) == ?f ?x21.0 # map ?f ?x22.0
map_of
  map_of ((?l, ?v) # ?ps) ?k == if ?l = ?k then Some ?v else map_of ?ps ?k
  map_of [] ?k == None
monomials
  monomials (MPoly ?xa) == keys ?xa
poly_mapping.lookup
  lookup (Pm_fmap ?xs) ?x == lookup0 ?xs ?x
power
  ?a ^ 0 == 1::?'a
  ?a ^ Suc ?n == ?a * ?a ^ ?n
prod
  prod ?g (set ?xs) == prod_list (map ?g (remdups ?xs))
prod_list
  prod_list ?xs == foldr (*) ?xs (1::?'a)
remdups
  remdups [] == []
  remdups (?x # ?xs) ==
  if List.member ?xs ?x then remdups ?xs else ?x # remdups ?xs
sum
  sum ?g (set ?xs) == sum_list (map ?g (remdups ?xs))
sum_list
  sum_list ?xs == foldr (+) ?xs (0::?'a)
the
  the (Some ?x2.0) == ?x2.0
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
"{Pm_fmap (fmap_of_list [(0, 2)]), Pm_fmap (fmap_of_list [(1, 1), (0, 1)]),
  Pm_fmap (fmap_of_list [(1, 2)])}"
  :: "(nat \<Rightarrow>\<^sub>0 nat) set"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.199s elapsed time, 8.354s cpu time, 1.190s GC time
Loading theory "Draft.Templates" (required by "Draft.DebruijnTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.090s elapsed time, 0.325s cpu time, 0.066s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DebruijnTemplates")
### theory "Draft.ExecutiblePolyProps"
### 1.585s elapsed time, 5.933s cpu time, 0.917s GC time
Loading theory "Draft.PolyAtoms" (required by "Draft.DebruijnTemplates" via "Draft.Debruijn")
"6241 / 100"
  :: "real"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.705s elapsed time, 2.698s cpu time, 0.219s GC time
AList.merge
  AList.merge ?qs ?ps == foldr (%(x, y). AList.update x y) ?ps ?qs
AList.update
  AList.update ?k ?v [] == [(?k, ?v)]
  AList.update ?k ?v (?p # ?ps) ==
  if fst ?p = ?k then (?k, ?v) # ?ps else ?p # AList.update ?k ?v ?ps
Ball
  Ball (set ?xs) ?p == list_all ?p ?xs
HOL.eq
  ?x = ?x == True
  ?a = ?b == equal_class.equal ?a ?b
If
  if False then ?x else ?y == ?y
  if True then ?x else ?y == ?x
List.insert
  List.insert ?x ?xs == if List.member ?xs ?x then ?xs else ?x # ?xs
List.member
  List.member [] ?y == False
  List.member (?x # ?xs) ?y == ?x = ?y | List.member ?xs ?y
Max
  Max (set (?x # ?xs)) == fold max ?xs ?x
Not
  ~ False == True
  ~ True == False
Poly_Mapping.keys
  keys (Pm_fmap ?xs) == fmdom' (clearjunk0 ?xs)
case_option
  case Some ?x2.0 of None => ?f1.0 | Some x => ?f2.0 x == ?f2.0 ?x2.0
  case None of None => ?f1.0 | Some x => ?f2.0 x == ?f1.0
case_prod
  case (?a, ?b) of (x, xa) => ?f x xa == ?f ?a ?b
clearjunk0
  clearjunk0 ?m ==
  fmfilter (%k. ~ equal_class.equal (fmlookup ?m k) (Some (0::?'b))) ?m
comp
  ?f o ?g == %x. ?f (?g x)
conj
  ?p & True == ?p
  ?p & False == False
  True & ?p == ?p
  False & ?p == False
degree
  degree (MPoly ?xa) == %v. Max (insert 0 ((%m. lookup m v) ` keys ?xa))
disj
  ?p | True == True
  ?p | False == ?p
  True | ?p == True
  False | ?p == ?p
equal_class.equal [nat]
  equal_class.equal ?x ?x == True
  equal_class.equal 0 (Suc ?x2.0) == False
  equal_class.equal (Suc ?x2.0) 0 == False
  equal_class.equal (Suc ?x2.0) (Suc ?y2.0) == equal_class.equal ?x2.0 ?y2.0
  equal_class.equal 0 0 == True
equal_class.equal [option]
  equal_class.equal ?x ?x == True
  equal_class.equal None (Some ?x2.0) == False
  equal_class.equal (Some ?x2.0) None == False
  equal_class.equal (Some ?x2.0) (Some ?y2.0) == ?x2.0 = ?y2.0
  equal_class.equal None None == True
equal_class.equal [poly_mapping]
  equal_class.equal (Pm_fmap ?xs) (Pm_fmap ?ys) ==
  fmpred (%k v. lookup0 ?xs k = lookup0 ?ys k) (?xs ++\<^sub>f ?ys)
fBall
  fBall ?xa == Ball (fset ?xa)
filter
  filter ?p [] == []
  filter ?p (?x # ?xs) ==
  if ?p ?x then ?x # filter ?p ?xs else filter ?p ?xs
fimage
  fset (?xb |`| ?xc) == ?xb ` fset ?xc
fmadd
  fmap_of_list ?m ++\<^sub>f fmap_of_list ?n ==
  fmap_of_list (AList.merge ?m ?n)
fmdom
  fmdom (fmap_of_list ?m) == fst |`| fset_of_list ?m
fmdom'
  fmdom' ?m == fset (fmdom ?m)
fmfilter
  fmfilter ?p (fmap_of_list ?m) ==
  fmap_of_list (filter (%(k, uu_). ?p k) ?m)
fmlookup
  fmlookup (fmap_of_list ?m) == map_of ?m
fmlookup_default
  fmlookup_default ?d ?m ?x ==
  case fmlookup ?m ?x of None => ?d | Some v => v
fmpred
  fmpred ?p ?m == fBall (fmdom ?m) (%x. ?p x (the (fmlookup ?m x)))
fold
  fold ?f (?x # ?xs) ?s == fold ?f ?xs (?f ?x ?s)
  fold ?f [] ?s == ?s
foldr
  foldr ?f [] == id
  foldr ?f (?x # ?xs) == ?f ?x o foldr ?f ?xs
fset
  fset (Abs_fset ?x) == ?x
fset_of_list
  fset (fset_of_list ?xa) == set ?xa
fst
  fst (?x1.0, ?x2.0) == ?x1.0
id
  id == %x. x
image
  ?f ` set ?xs == set (map ?f ?xs)
insert
  insert ?x (List.coset ?xs) == List.coset (removeAll ?x ?xs)
  insert ?x (set ?xs) == set (List.insert ?x ?xs)
less [nat]
  ?m < Suc ?n == ?m <= ?n
  ?n < 0 == False
less_eq [nat]
  Suc ?m <= ?n == ?m < ?n
  0 <= ?n == True
list_all
  list_all ?p [] == True
  list_all ?p (?x # ?xs) == ?p ?x & list_all ?p ?xs
map
  map ?f [] == []
  map ?f (?x21.0 # ?x22.0) == ?f ?x21.0 # map ?f ?x22.0
map_of
  map_of ((?l, ?v) # ?ps) ?k == if ?l = ?k then Some ?v else map_of ?ps ?k
  map_of [] ?k == None
max
  max ?a ?b == if ?a <= ?b then ?b else ?a
poly_mapping.lookup
  lookup (Pm_fmap ?xs) ?x == lookup0 ?xs ?x
removeAll
  removeAll ?x [] == []
  removeAll ?x (?y # ?xs) ==
  if ?x = ?y then removeAll ?x ?xs else ?y # removeAll ?x ?xs
the
  the (Some ?x2.0) == ?x2.0
"MPoly
  (Pm_fmap
    (fmap_of_list
      [(Pm_fmap (fmap_of_list []),
        MPoly
         (Pm_fmap (fmap_of_list [(Pm_fmap (fmap_of_list [(0, 2)]), 1)]))),
       (Pm_fmap (fmap_of_list [(1, 2)]),
        MPoly (Pm_fmap (fmap_of_list [(Pm_fmap (fmap_of_list []), 9)]))),
       (Pm_fmap (fmap_of_list [(1, 1)]),
        MPoly
         (Pm_fmap
           (fmap_of_list [(Pm_fmap (fmap_of_list [(0, 1)]), 6)])))]))"
  :: "real mpoly mpoly"
"2"
  :: "nat"
"coeff p 0"
  :: "'a"
"True"
  :: "bool"
"{1, 0}"
  :: "nat set"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.PolyAtoms"
### 3.576s elapsed time, 8.598s cpu time, 1.512s GC time
Loading theory "Draft.Debruijn" (required by "Draft.DebruijnTemplates")
Found termination order: "{}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
"AllQ
  (And (ExQ (fm.Atom
              (Eq (MPoly
                    (Pm_fmap
                      (fmap_of_list
                        [(Pm_fmap (fmap_of_list [(1, 1), (2, 1)]), 1),
                         (Pm_fmap (fmap_of_list [(0, 2), (3, 1)]),
                          - 1)]))))))
    (Neg (AllQ
           (fm.Atom
             (Leq (MPoly
                    (Pm_fmap
                      (fmap_of_list
                        [(Pm_fmap (fmap_of_list [(1, 2)]), 5),
                         (Pm_fmap (fmap_of_list [(0, 1)]), - 1)]))))))))"
  :: "atom fm"
Found termination order: "{}"
Found termination order: "{}"
"True"
  :: "bool"
Found termination order: "{}"
"True"
  :: "bool"
"True"
  :: "bool"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Debruijn"
### 1.803s elapsed time, 5.664s cpu time, 1.123s GC time
Loading theory "Draft.DebruijnTemplates"
val templateLemmas =
   [("Debruijn.inj_lowerPowers", "inj (lowerPowers ?b ?i)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Debruijn.lift0", "liftPoly ?i ?j 0 = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("Debruijn.lower0", "lowerPoly ?i ?j 0 = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("Debruijn.lift00", "liftPoly 0 0 ?a = ?a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("Debruijn.higherPowers_zero", "higherPowers ?b ?i 0 = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("Debruijn.lower_power_zero", "lowerPowers ?a ?b 0 = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("Debruijn.finite_nonzero_coeff",
     "finite {x. MPoly_Type.coeff ?mpoly x ~= (0::?'a)}",
     template_predicate
      (
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))
         )),
    ("Debruijn.dec_above_inc_above",
     "dec_above ?b ?i (inc_above ?b ?i ?x) = ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_var 0)),
    ("Debruijn.higherPowers_lowerPowers",
     "higherPowers ?n ?i (lowerPowers ?n ?i ?x) = ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_var 0)),
    ("Debruijn.compute_higherPowers",
     "higherPowers ?n ?i (Pm_fmap ?xs) =
      Pm_fmap (higherPowers\<^sub>f ?n ?i ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Debruijn.compute_lowerPowers",
     "lowerPowers ?n ?i (Pm_fmap ?xs) =
      Pm_fmap (lowerPowers\<^sub>f ?n ?i ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Debruijn.compute_higherPoly\<^sub>0",
     "higherPoly\<^sub>0 ?n ?i (Pm_fmap ?m) =
      Pm_fmap (higherPoly\<^sub>f ?n ?i ?m)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Debruijn.compute_lowerPoly\<^sub>0",
     "lowerPoly\<^sub>0 ?n ?i (Pm_fmap ?m) =
      Pm_fmap (lowerPoly\<^sub>f ?n ?i ?m)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Debruijn.inc_above_id", "?n < ?m ==> inc_above ?m ?i ?n = ?n",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2),
         template_var 2))),
    ("Debruijn.keys_lowerPowers",
     "keys (lowerPowers ?b ?i ?m) = inc_above ?b ?i ` keys ?m",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Debruijn.monomials_liftPoly",
     "monomials (liftPoly ?b ?i ?mp) = lowerPowers ?b ?i ` monomials ?mp",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Debruijn.keys_higherPoly\<^sub>0",
     "keys (higherPoly\<^sub>0 ?b ?i ?mp) = lowerPowers ?b ?i ` keys ?mp",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Debruijn.lift_const",
     "insertion ?f (liftPoly 0 ?z (Const ?C)) = insertion ?f (Const ?C)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Debruijn.coeff_lowerPoly",
     "MPoly_Type.coeff (lowerPoly ?b ?i ?mp) ?x =
      MPoly_Type.coeff ?mp (lowerPowers ?b ?i ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Debruijn.higherPowers_eq",
     "lookup (higherPowers ?b ?i ?p) ?x = lookup ?p (inc_above ?b ?i ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Debruijn.lift_clear_vars",
     "vars (liftPoly ?i ?j ?p) Int {?i..<?i + ?j} = {}",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))),
       template_hole 0)),
    ("Debruijn.lower_lift",
     "insertion ?f ?p = insertion ?f (lowerPoly ?i ?j (liftPoly ?i ?j ?p))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3), template_var 2),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2))))),
    ("Debruijn.inc_above_Suc", "?m <= ?n ==> inc_above ?m ?i ?n = ?n + ?i",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Debruijn.map_of_eq_NoneI",
     "?x ~: fst ` set ?xs ==> map_of ?xs ?x = None",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_app (template_hole 3, template_var 0)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Debruijn.inj_on_dec_above",
     "inj_on (dec_above ?b ?i) {x. x < ?b | ?b + ?i <= x}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_app (template_hole 4, t_empty))
         )),
    ("Debruijn.liftPoly_add",
     "liftPoly ?w ?z (?a + ?b) = liftPoly ?w ?z ?a + liftPoly ?w ?z ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Debruijn.liftPoly_sub",
     "liftPoly 0 ?z (?a - ?b) = liftPoly 0 ?z ?a - liftPoly 0 ?z ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 2),
           template_var 0)))),
    ("Debruijn.higherPoly\<^sub>0_add",
     "higherPoly\<^sub>0 ?x ?y (?p + ?q) =
      higherPoly\<^sub>0 ?x ?y ?p + higherPoly\<^sub>0 ?x ?y ?q",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Debruijn.lower_lift_monom",
     "insertion ?f (MPoly_Type.monom ?m ?a) =
      insertion ?f
       (lowerPoly ?i ?j (liftPoly ?i ?j (MPoly_Type.monom ?m ?a)))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 4),
         template_app
          (template_app (template_hole 2, template_var 3), template_var 2)),
       template_app
        (template_app (template_hole 3, template_var 4),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)))))),
    ("Debruijn.map_of_filter_key_in",
     "?P ?x ==> map_of (filter (%(k, v). ?P k) ?xs) ?x = map_of ?xs ?x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1, template_app (template_hole 0, t_empty)),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("Debruijn.not_in_lift",
     "?var ~: vars ?p ==> ?var + ?z ~: vars (liftPoly 0 ?z ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0)),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 0),
                     template_var 1)))
               )
           ))),
    ("Debruijn.eval_lowerFm",
     "freeIn 0 ?F ==> ALL xs. eval (lowerFm 0 1 ?F) xs = eval (ExQ ?F) xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Debruijn.aEval_lowerAtom",
     "freeIn 0 (fm.Atom ?A) ==>
      aEval ?A (?x # ?L) = aEval (lowerAtom 0 1 ?A) ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 6),
                 template_hole 0),
               template_var 2)),
           template_var 0)))),
    ("Debruijn.lookup_not_in_vars_eq_zero",
     "[| ?x : monomials ?p; ?i ~: vars ?p |] ==> lookup ?x ?i = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_hole 0))),
    ("Debruijn.inc_above_dec_above_iff",
     "(inc_above ?b ?i (dec_above ?b ?i ?x) = ?x) =
      (?x < ?b | ?b + ?i <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0))),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Debruijn.mapping_of_lift_add",
     "mapping_of (liftPoly ?x ?y (?a + ?b)) =
      mapping_of (liftPoly ?x ?y ?a) + mapping_of (liftPoly ?x ?y ?b)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Debruijn.vars_lift_add",
     "vars (liftPoly ?a ?b (?p + ?q))
      <= vars (liftPoly ?a ?b ?p) Un vars (liftPoly ?a ?b ?q)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Debruijn.lift_sub",
     "insertion ?f (liftPoly 0 ?z (?a - ?b)) =
      insertion ?f (liftPoly 0 ?z ?a - liftPoly 0 ?z ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_var 0))))),
    ("Debruijn.lift_add",
     "insertion ?f (liftPoly 0 ?z (?a + ?b)) =
      insertion ?f (liftPoly 0 ?z ?a + liftPoly 0 ?z ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_var 0))))),
    ("Debruijn.inc_above_dec_above",
     "?x < ?b | ?b + ?i <= ?x ==>
      inc_above ?b ?i (dec_above ?b ?i ?x) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0)),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_var 2))),
    ("Debruijn.finite_dec_above_ne",
     "finite {x. ?f x ~= ?c} ==> finite {x. ?f (dec_above ?b ?i x) ~= ?c}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4, template_app (template_hole 3, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))
           ))),
    ("Debruijn.finite_inc_above_ne",
     "finite {x. ?f x ~= ?c} ==> finite {x. ?f (inc_above ?b ?i x) ~= ?c}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4, template_app (template_hole 3, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))
           ))),
    ("Debruijn.lift_minus",
     "insertion ?f (liftPoly 0 ?z (?c - Const ?C)) = 0 ==>
      insertion ?f (liftPoly 0 ?z ?c) = ?C",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3),
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)))),
          template_hole 0)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("Debruijn.coeff_lift_add",
     "MPoly_Type.coeff (liftPoly ?x ?y (?a + ?b)) ?m =
      MPoly_Type.coeff (liftPoly ?x ?y ?a) ?m +
      MPoly_Type.coeff (liftPoly ?x ?y ?b) ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 1)),
           template_var 0)))),
    ("Debruijn.lift_vars_monom",
     "vars (liftPoly ?i ?j (MPoly_Type.monom ?m ?a)) =
      (%x. if ?i <= x then x + ?j else x) ` vars (MPoly_Type.monom ?m ?a)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Debruijn.compute_lowerPowers\<^sub>f",
     "lowerPowers\<^sub>f ?b ?i (fmap_of_list ?xs) =
      fmap_of_list (map (%(k, v). (if k < ?b then k else k + ?i, v)) ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_var 0)))),
    ("Debruijn.inj_on_higherPowers",
     "inj_on (higherPowers ?n ?i)
       {x. ALL j. ?n <= j & j < ?n + ?i --> lookup x j = (0::?'a)}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 1),
               template_var 0)),
           template_app (template_hole 9, t_empty))
         )),
    ("Debruijn.keys_higherPowers",
     "keys (higherPowers ?b ?i ?m) =
      dec_above ?b ?i ` (keys ?m Int {x. x ~: {?b..<?b + ?i}})",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 9, template_var 0)),
           template_app (template_hole 4, t_empty))))),
    ("Debruijn.insertion_lowerPoly01",
     "0 ~: vars ?p ==>
      insertion (nth_default (0::?'a) (?x # ?L)) ?p =
      insertion (nth_default (0::?'a) ?L) (lowerPoly 0 1 ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app (template_hole 7, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 8),
               template_hole 0),
             template_var 2))))),
    ("Debruijn.lowerPowers_eq",
     "lookup (lowerPowers ?b ?i ?p) ?x =
      (if ?b <= ?x & ?x < ?b + ?i then 0::?'a
       else lookup ?p (dec_above ?b ?i ?x))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)))),
           template_hole 1),
         template_app
          (template_app (template_hole 8, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Debruijn.eval_liftFm",
     "[| length ?I = ?amount; ?d <= length ?L |]
      ==> eval ?F ?L = eval (liftFm ?d ?amount ?F) (insert_into ?L ?d ?I)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 4), template_var 3),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 4))))),
    ("Debruijn.coeff_liftPoly",
     "MPoly_Type.coeff (liftPoly ?b ?i ?mp) ?x =
      (if EX j:{?b..<?b + ?i}. 0 < lookup ?x j then 0::?'a
       else MPoly_Type.coeff ?mp (higherPowers ?b ?i ?x))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 3),
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 2))),
               t_empty)),
           template_hole 1),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Debruijn.monomials_lowerPoly",
     "monomials (lowerPoly ?b ?i ?mp) =
      higherPowers ?b ?i `
      (monomials ?mp Int {x. ALL j:{?b..<?b + ?i}. lookup x j = 0})",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 11, template_var 0)),
           template_app (template_hole 6, t_empty))))),
    ("Debruijn.keys_lowerPoly\<^sub>0",
     "keys (lowerPoly\<^sub>0 ?b ?i ?mp) =
      higherPowers ?b ?i `
      (keys ?mp Int {x. ALL j:{?b..<?b + ?i}. lookup x j = 0})",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 11, template_var 0)),
           template_app (template_hole 6, t_empty))))),
    ("Debruijn.eval_liftFm_helper",
     "[| length ?init = ?i; length ?I = ?amount |]
      ==> eval ?F (?init @ ?xs) =
          eval (liftFm ?i ?amount ?F) (?init @ ?I @ ?xs)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 5), template_var 4),
        template_equation
         (template_app (template_hole 4, template_var 3), template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 5),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 5),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)))))),
    ("Debruijn.eval_lowerFm_helper",
     "[| freeIn ?i ?F; length ?init = ?i |]
      ==> eval (lowerFm ?i 1 ?F) (?init @ ?xs) =
          eval ?F (?init @ [?x] @ ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app (template_hole 7, template_var 2), template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_hole 3),
               template_var 3)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 5, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_var 1)))))),
    ("Debruijn.lowerPowers_higherPowers",
     "(!!j. [| ?n <= j; j < ?n + ?i |] ==> lookup ?x j = (0::?'a)) ==>
      lowerPowers ?n ?i (higherPowers ?n ?i ?x) = ?x",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 0))),
    ("Debruijn.lift_insertion",
     "ALL init.
         length init = ?i -->
         (ALL I xs.
             insertion (nth_default 0 (init @ xs)) ?p =
             insertion (nth_default 0 (init @ I @ xs))
              (liftPoly ?i (length I) ?p))",
     template_predicate (template_app (template_hole 9, t_empty))),
    ("Debruijn.insertion_lowerPoly1",
     "[| ?i ~: vars ?p; length ?prfx = ?i |]
      ==> insertion (nth_default (0::?'a) (?prfx @ ?x # ?L)) ?p =
          insertion (nth_default (0::?'a) (?prfx @ ?L))
           (lowerPoly ?i 1 ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_var 4),
                  template_app (template_hole 10, template_var 3))
                )
            ),
        template_equation
         (template_app (template_hole 8, template_var 2), template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)))),
           template_var 3),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_hole 0),
             template_var 3))))),
    ("Debruijn.compute_higherPowers\<^sub>f",
     "higherPowers\<^sub>f ?b ?i (fmap_of_list ?xs) =
      fmap_of_list
       (map (%(k, v). (if k < ?b then k else k - ?i, v))
         (filter (%(k, v). k ~: {?b..<?b + ?i}) ?xs))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 13, template_var 2), template_var 1),
         template_app (template_hole 12, template_var 0)),
       template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11, template_app (template_hole 10, t_empty)),
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_var 0))))),
    ("Debruijn.compute_higherPoly\<^sub>f",
     "higherPoly\<^sub>f ?n ?i (fmap_of_list ?xs) =
      fmap_of_list
       (filter (%(mon, v). ALL j:{?n..<?n + ?i}. lookup mon j = 0)
         (map (%(mon, c). (lowerPowers ?n ?i mon, c)) ?xs))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 13, template_var 2), template_var 1),
         template_app (template_hole 12, template_var 0)),
       template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11, template_app (template_hole 10, t_empty)),
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_var 0))))),
    ("Debruijn.compute_lowerPoly\<^sub>f",
     "lowerPoly\<^sub>f ?n ?i (fmap_of_list ?xs) =
      fmap_of_list
       (map (%(mon, c). (higherPowers ?n ?i mon, c))
         (filter (%(mon, v). ALL j:{?n..<?n + ?i}. lookup mon j = 0) ?xs))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 13, template_var 2), template_var 1),
         template_app (template_hole 12, template_var 0)),
       template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11, template_app (template_hole 10, t_empty)),
           template_app
            (template_app
              (template_hole 7, template_app (template_hole 6, t_empty)),
             template_var 0))))),
    ("Debruijn.map_of_map_key_inverse_fun_eq",
     "[| !!x. x : set ?xs ==> ?g (?f (fst x)) = fst x; ?f (?g ?x) = ?x |]
      ==> map_of (map (%(k, y). (?f k, y)) ?xs) ?x = map_of ?xs (?g ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_equation
         (template_app
           (template_var 1, template_app (template_var 2, template_var 0)),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_var 3)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app (template_var 2, template_var 0))))),
    ("Debruijn.nth_dec_above",
     "[| length ?xs = ?i; length ?ys = ?j; ?k ~: {?i..<?i + ?j} |]
      ==> nth_default (0::?'a) (?xs @ ?zs) (dec_above ?i ?j ?k) =
          nth_default (0::?'a) (?xs @ ?ys @ ?zs) ?k",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 5), template_var 4),
        template_equation
         (template_app (template_hole 9, template_var 3), template_var 2),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 2)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 5),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 5),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0))),
           template_var 1)))),
    ("Debruijn.insertion_lowerPoly",
     "[| vars ?p Int {?i..<?i + ?j} = {}; length ?prfx = ?i;
         length ?xs = ?j |]
      ==> insertion (nth_default (0::?'a) (?prfx @ ?L))
           (lowerPoly ?i ?j ?p) =
          insertion (nth_default (0::?'a) (?prfx @ ?xs @ ?L)) ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 5)),
            template_app
             (template_app (template_hole 10, template_var 4),
              template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3))),
          template_hole 8),
        template_equation
         (template_app (template_hole 6, template_var 2), template_var 4),
        template_equation
         (template_app (template_hole 6, template_var 1), template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 5)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)))),
           template_var 5))))]:
   (string * thm * template) list
### theory "Draft.DebruijnTemplates"
### 0.717s elapsed time, 0.909s cpu time, 0.099s GC time
val it = (): unit
