   [("Debruijn.inj_lowerPowers", "inj (lowerPowers ?b ?i)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Debruijn.lift0", "liftPoly ?i ?j 0 = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("Debruijn.lower0", "lowerPoly ?i ?j 0 = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("Debruijn.lift00", "liftPoly 0 0 ?a = ?a",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("Debruijn.higherPowers_zero", "higherPowers ?b ?i 0 = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("Debruijn.lower_power_zero", "lowerPowers ?a ?b 0 = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("Debruijn.finite_nonzero_coeff",
     "finite {x. MPoly_Type.coeff ?mpoly x ~= (0::?'a)}",
     template_predicate
      (
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))
         )),
    ("Debruijn.dec_above_inc_above",
     "dec_above ?b ?i (inc_above ?b ?i ?x) = ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_var 0)),
    ("Debruijn.higherPowers_lowerPowers",
     "higherPowers ?n ?i (lowerPowers ?n ?i ?x) = ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_var 0)),
    ("Debruijn.compute_higherPowers",
     "higherPowers ?n ?i (Pm_fmap ?xs) =
      Pm_fmap (higherPowers\<^sub>f ?n ?i ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Debruijn.compute_lowerPowers",
     "lowerPowers ?n ?i (Pm_fmap ?xs) =
      Pm_fmap (lowerPowers\<^sub>f ?n ?i ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Debruijn.compute_higherPoly\<^sub>0",
     "higherPoly\<^sub>0 ?n ?i (Pm_fmap ?m) =
      Pm_fmap (higherPoly\<^sub>f ?n ?i ?m)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Debruijn.compute_lowerPoly\<^sub>0",
     "lowerPoly\<^sub>0 ?n ?i (Pm_fmap ?m) =
      Pm_fmap (lowerPoly\<^sub>f ?n ?i ?m)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Debruijn.inc_above_id", "?n < ?m ==> inc_above ?m ?i ?n = ?n",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2),
         template_var 2))),
    ("Debruijn.keys_lowerPowers",
     "keys (lowerPowers ?b ?i ?m) = inc_above ?b ?i ` keys ?m",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Debruijn.monomials_liftPoly",
     "monomials (liftPoly ?b ?i ?mp) = lowerPowers ?b ?i ` monomials ?mp",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Debruijn.keys_higherPoly\<^sub>0",
     "keys (higherPoly\<^sub>0 ?b ?i ?mp) = lowerPowers ?b ?i ` keys ?mp",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Debruijn.lift_const",
     "insertion ?f (liftPoly 0 ?z (Const ?C)) = insertion ?f (Const ?C)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Debruijn.coeff_lowerPoly",
     "MPoly_Type.coeff (lowerPoly ?b ?i ?mp) ?x =
      MPoly_Type.coeff ?mp (lowerPowers ?b ?i ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Debruijn.higherPowers_eq",
     "lookup (higherPowers ?b ?i ?p) ?x = lookup ?p (inc_above ?b ?i ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Debruijn.lift_clear_vars",
     "vars (liftPoly ?i ?j ?p) Int {?i..<?i + ?j} = {}",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))),
       template_hole 0)),
    ("Debruijn.lower_lift",
     "insertion ?f ?p = insertion ?f (lowerPoly ?i ?j (liftPoly ?i ?j ?p))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3), template_var 2),
       template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2))))),
    ("Debruijn.inc_above_Suc", "?m <= ?n ==> inc_above ?m ?i ?n = ?n + ?i",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Debruijn.map_of_eq_NoneI",
     "?x ~: fst ` set ?xs ==> map_of ?xs ?x = None",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_app (template_hole 3, template_var 0)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Debruijn.inj_on_dec_above",
     "inj_on (dec_above ?b ?i) {x. x < ?b | ?b + ?i <= x}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_app (template_hole 4, t_empty))
         )),
    ("Debruijn.liftPoly_add",
     "liftPoly ?w ?z (?a + ?b) = liftPoly ?w ?z ?a + liftPoly ?w ?z ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Debruijn.liftPoly_sub",
     "liftPoly 0 ?z (?a - ?b) = liftPoly 0 ?z ?a - liftPoly 0 ?z ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 2),
           template_var 0)))),
    ("Debruijn.higherPoly\<^sub>0_add",
     "higherPoly\<^sub>0 ?x ?y (?p + ?q) =
      higherPoly\<^sub>0 ?x ?y ?p + higherPoly\<^sub>0 ?x ?y ?q",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Debruijn.lower_lift_monom",
     "insertion ?f (MPoly_Type.monom ?m ?a) =
      insertion ?f
       (lowerPoly ?i ?j (liftPoly ?i ?j (MPoly_Type.monom ?m ?a)))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 4),
         template_app
          (template_app (template_hole 2, template_var 3), template_var 2)),
       template_app
        (template_app (template_hole 3, template_var 4),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)))))),
    ("Debruijn.map_of_filter_key_in",
     "?P ?x ==> map_of (filter (%(k, v). ?P k) ?xs) ?x = map_of ?xs ?x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1, template_app (template_hole 0, t_empty)),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("Debruijn.not_in_lift",
     "?var ~: vars ?p ==> ?var + ?z ~: vars (liftPoly 0 ?z ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0)),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 0),
                     template_var 1)))
               )
           ))),
    ("Debruijn.eval_lowerFm",
     "freeIn 0 ?F ==> ALL xs. eval (lowerFm 0 1 ?F) xs = eval (ExQ ?F) xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Debruijn.aEval_lowerAtom",
     "freeIn 0 (fm.Atom ?A) ==>
      aEval ?A (?x # ?L) = aEval (lowerAtom 0 1 ?A) ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 6),
                 template_hole 0),
               template_var 2)),
           template_var 0)))),
    ("Debruijn.lookup_not_in_vars_eq_zero",
     "[| ?x : monomials ?p; ?i ~: vars ?p |] ==> lookup ?x ?i = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_hole 0))),
    ("Debruijn.inc_above_dec_above_iff",
     "(inc_above ?b ?i (dec_above ?b ?i ?x) = ?x) =
      (?x < ?b | ?b + ?i <= ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0))),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Debruijn.mapping_of_lift_add",
     "mapping_of (liftPoly ?x ?y (?a + ?b)) =
      mapping_of (liftPoly ?x ?y ?a) + mapping_of (liftPoly ?x ?y ?b)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Debruijn.vars_lift_add",
     "vars (liftPoly ?a ?b (?p + ?q))
      <= vars (liftPoly ?a ?b ?p) Un vars (liftPoly ?a ?b ?q)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Debruijn.lift_sub",
     "insertion ?f (liftPoly 0 ?z (?a - ?b)) =
      insertion ?f (liftPoly 0 ?z ?a - liftPoly 0 ?z ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_var 0))))),
    ("Debruijn.lift_add",
     "insertion ?f (liftPoly 0 ?z (?a + ?b)) =
      insertion ?f (liftPoly 0 ?z ?a + liftPoly 0 ?z ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 2),
             template_var 0))))),
    ("Debruijn.inc_above_dec_above",
     "?x < ?b | ?b + ?i <= ?x ==>
      inc_above ?b ?i (dec_above ?b ?i ?x) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0)),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_var 2))),
    ("Debruijn.finite_dec_above_ne",
     "finite {x. ?f x ~= ?c} ==> finite {x. ?f (dec_above ?b ?i x) ~= ?c}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4, template_app (template_hole 3, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))
           ))),
    ("Debruijn.finite_inc_above_ne",
     "finite {x. ?f x ~= ?c} ==> finite {x. ?f (inc_above ?b ?i x) ~= ?c}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4, template_app (template_hole 3, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))
           ))),
    ("Debruijn.lift_minus",
     "insertion ?f (liftPoly 0 ?z (?c - Const ?C)) = 0 ==>
      insertion ?f (liftPoly 0 ?z ?c) = ?C",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3),
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)))),
          template_hole 0)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 2),
             template_var 1)),
         template_var 0))),
    ("Debruijn.coeff_lift_add",
     "MPoly_Type.coeff (liftPoly ?x ?y (?a + ?b)) ?m =
      MPoly_Type.coeff (liftPoly ?x ?y ?a) ?m +
      MPoly_Type.coeff (liftPoly ?x ?y ?b) ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 3),
               template_var 1)),
           template_var 0)))),
    ("Debruijn.lift_vars_monom",
     "vars (liftPoly ?i ?j (MPoly_Type.monom ?m ?a)) =
      (%x. if ?i <= x then x + ?j else x) ` vars (MPoly_Type.monom ?m ?a)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Debruijn.compute_lowerPowers\<^sub>f",
     "lowerPowers\<^sub>f ?b ?i (fmap_of_list ?xs) =
      fmap_of_list (map (%(k, v). (if k < ?b then k else k + ?i, v)) ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_var 0)))),
    ("Debruijn.inj_on_higherPowers",
     "inj_on (higherPowers ?n ?i)
       {x. ALL j. ?n <= j & j < ?n + ?i --> lookup x j = (0::?'a)}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 1),
               template_var 0)),
           template_app (template_hole 9, t_empty))
         )),
    ("Debruijn.keys_higherPowers",
     "keys (higherPowers ?b ?i ?m) =
      dec_above ?b ?i ` (keys ?m Int {x. x ~: {?b..<?b + ?i}})",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 9, template_var 0)),
           template_app (template_hole 4, t_empty))))),
    ("Debruijn.insertion_lowerPoly01",
     "0 ~: vars ?p ==>
      insertion (nth_default (0::?'a) (?x # ?L)) ?p =
      insertion (nth_default (0::?'a) ?L) (lowerPoly 0 1 ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app (template_hole 7, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 8),
               template_hole 0),
             template_var 2))))),
    ("Debruijn.lowerPowers_eq",
     "lookup (lowerPowers ?b ?i ?p) ?x =
      (if ?b <= ?x & ?x < ?b + ?i then 0::?'a
       else lookup ?p (dec_above ?b ?i ?x))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)))),
           template_hole 1),
         template_app
          (template_app (template_hole 8, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Debruijn.eval_liftFm",
     "[| length ?I = ?amount; ?d <= length ?L |]
      ==> eval ?F ?L = eval (liftFm ?d ?amount ?F) (insert_into ?L ?d ?I)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 4), template_var 3),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 3),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 4))))),
    ("Debruijn.coeff_liftPoly",
     "MPoly_Type.coeff (liftPoly ?b ?i ?mp) ?x =
      (if EX j:{?b..<?b + ?i}. 0 < lookup ?x j then 0::?'a
       else MPoly_Type.coeff ?mp (higherPowers ?b ?i ?x))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 3),
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 2))),
               t_empty)),
           template_hole 1),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0))))),
    ("Debruijn.monomials_lowerPoly",
     "monomials (lowerPoly ?b ?i ?mp) =
      higherPowers ?b ?i `
      (monomials ?mp Int {x. ALL j:{?b..<?b + ?i}. lookup x j = 0})",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 11, template_var 0)),
           template_app (template_hole 6, t_empty))))),
    ("Debruijn.keys_lowerPoly\<^sub>0",
     "keys (lowerPoly\<^sub>0 ?b ?i ?mp) =
      higherPowers ?b ?i `
      (keys ?mp Int {x. ALL j:{?b..<?b + ?i}. lookup x j = 0})",
     template_equation
      (template_app
        (template_hole 11,
         template_app
          (template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 11, template_var 0)),
           template_app (template_hole 6, t_empty))))),
    ("Debruijn.eval_liftFm_helper",
     "[| length ?init = ?i; length ?I = ?amount |]
      ==> eval ?F (?init @ ?xs) =
          eval (liftFm ?i ?amount ?F) (?init @ ?I @ ?xs)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 5), template_var 4),
        template_equation
         (template_app (template_hole 4, template_var 3), template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 5),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 5),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)))))),
    ("Debruijn.eval_lowerFm_helper",
     "[| freeIn ?i ?F; length ?init = ?i |]
      ==> eval (lowerFm ?i 1 ?F) (?init @ ?xs) =
          eval ?F (?init @ [?x] @ ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app (template_hole 7, template_var 2), template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 4),
                 template_hole 3),
               template_var 3)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 5, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_var 1)))))),
    ("Debruijn.lowerPowers_higherPowers",
     "(!!j. [| ?n <= j; j < ?n + ?i |] ==> lookup ?x j = (0::?'a)) ==>
      lowerPowers ?n ?i (higherPowers ?n ?i ?x) = ?x",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 0))),
    ("Debruijn.lift_insertion",
     "ALL init.
         length init = ?i -->
         (ALL I xs.
             insertion (nth_default 0 (init @ xs)) ?p =
             insertion (nth_default 0 (init @ I @ xs))
              (liftPoly ?i (length I) ?p))",
     template_predicate (template_app (template_hole 9, t_empty))),
    ("Debruijn.insertion_lowerPoly1",
     "[| ?i ~: vars ?p; length ?prfx = ?i |]
      ==> insertion (nth_default (0::?'a) (?prfx @ ?x # ?L)) ?p =
          insertion (nth_default (0::?'a) (?prfx @ ?L))
           (lowerPoly ?i 1 ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_var 4),
                  template_app (template_hole 10, template_var 3))
                )
            ),
        template_equation
         (template_app (template_hole 8, template_var 2), template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)))),
           template_var 3),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_hole 0),
             template_var 3))))),
    ("Debruijn.compute_higherPowers\<^sub>f",
     "higherPowers\<^sub>f ?b ?i (fmap_of_list ?xs) =
      fmap_of_list
       (map (%(k, v). (if k < ?b then k else k - ?i, v))
         (filter (%(k, v). k ~: {?b..<?b + ?i}) ?xs))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 13, template_var 2), template_var 1),
         template_app (template_hole 12, template_var 0)),
       template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11, template_app (template_hole 10, t_empty)),
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_var 0))))),
    ("Debruijn.compute_higherPoly\<^sub>f",
     "higherPoly\<^sub>f ?n ?i (fmap_of_list ?xs) =
      fmap_of_list
       (filter (%(mon, v). ALL j:{?n..<?n + ?i}. lookup mon j = 0)
         (map (%(mon, c). (lowerPowers ?n ?i mon, c)) ?xs))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 13, template_var 2), template_var 1),
         template_app (template_hole 12, template_var 0)),
       template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11, template_app (template_hole 10, t_empty)),
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_var 0))))),
    ("Debruijn.compute_lowerPoly\<^sub>f",
     "lowerPoly\<^sub>f ?n ?i (fmap_of_list ?xs) =
      fmap_of_list
       (map (%(mon, c). (higherPowers ?n ?i mon, c))
         (filter (%(mon, v). ALL j:{?n..<?n + ?i}. lookup mon j = 0) ?xs))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 13, template_var 2), template_var 1),
         template_app (template_hole 12, template_var 0)),
       template_app
        (template_hole 12,
         template_app
          (template_app
            (template_hole 11, template_app (template_hole 10, t_empty)),
           template_app
            (template_app
              (template_hole 7, template_app (template_hole 6, t_empty)),
             template_var 0))))),
    ("Debruijn.map_of_map_key_inverse_fun_eq",
     "[| !!x. x : set ?xs ==> ?g (?f (fst x)) = fst x; ?f (?g ?x) = ?x |]
      ==> map_of (map (%(k, y). (?f k, y)) ?xs) ?x = map_of ?xs (?g ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_equation
         (template_app
           (template_var 1, template_app (template_var 2, template_var 0)),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_var 3)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app (template_var 2, template_var 0))))),
    ("Debruijn.nth_dec_above",
     "[| length ?xs = ?i; length ?ys = ?j; ?k ~: {?i..<?i + ?j} |]
      ==> nth_default (0::?'a) (?xs @ ?zs) (dec_above ?i ?j ?k) =
          nth_default (0::?'a) (?xs @ ?ys @ ?zs) ?k",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 5), template_var 4),
        template_equation
         (template_app (template_hole 9, template_var 3), template_var 2),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_app
                   (template_app (template_hole 6, template_var 4),
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 2)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 5),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 5),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0))),
           template_var 1)))),
    ("Debruijn.insertion_lowerPoly",
     "[| vars ?p Int {?i..<?i + ?j} = {}; length ?prfx = ?i;
         length ?xs = ?j |]
      ==> insertion (nth_default (0::?'a) (?prfx @ ?L))
           (lowerPoly ?i ?j ?p) =
          insertion (nth_default (0::?'a) (?prfx @ ?xs @ ?L)) ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 5)),
            template_app
             (template_app (template_hole 10, template_var 4),
              template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3))),
          template_hole 8),
        template_equation
         (template_app (template_hole 6, template_var 2), template_var 4),
        template_equation
         (template_app (template_hole 6, template_var 1), template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 5)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)))),
           template_var 5))))]
