Loading theory "HOL-Library.Stream" (required by "Draft.GeneralVSProofsTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.GeneralVSProofsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.BigO" (required by "Draft.GeneralVSProofsTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.MPolyExtension" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs" via "Draft.DNFUni" via "Draft.InfinitesimalsUni" via "Draft.Infinitesimals" via "Draft.ExecutiblePolyProps")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### Ambiguous input (line 42 of "$AFP/Virtual_Substitution/MPolyExtension.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Series.suminf_binder" ("_position" k)
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" lookup)
###           ("_cargs"
###             ("_constrain" ("_position" x)
###               ("\<^type>Poly_Mapping.poly_mapping" ("_position_sort" 'a)
###                 ("_ofsort" ("_position_sort" 'b)
###                   ("_class_name" comm_semiring_1))))
###             ("_constrain" ("_position" k) ("_position_sort" 'a))))
###         ("_applC"
###           ("_constrain" ("_position" f)
###             ("\<^type>fun" ("_position_sort" 'a)
###               ("_ofsort" ("_position_sort" 'b)
###                 ("_class_name" comm_semiring_1))))
###           ("_position" k))))
###     ("_sum" ("_position" k) ("_applC" ("_position" keys) ("_position" x))
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" x)
###             ("_constrain" ("_position" k) ("_position_sort" 'a))))
###         ("_applC" ("_position" f) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Sum_any" ("_position" k)
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" lookup)
###           ("_cargs"
###             ("_constrain" ("_position" x)
###               ("\<^type>Poly_Mapping.poly_mapping" ("_position_sort" 'a)
###                 ("_ofsort" ("_position_sort" 'b)
###                   ("_class_name" comm_semiring_1))))
###             ("_constrain" ("_position" k) ("_position_sort" 'a))))
###         ("_applC"
###           ("_constrain" ("_position" f)
###             ("\<^type>fun" ("_position_sort" 'a)
###               ("_ofsort" ("_position_sort" 'b)
###                 ("_class_name" comm_semiring_1))))
###           ("_position" k))))
###     ("_sum" ("_position" k) ("_applC" ("_position" keys) ("_position" x))
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" x)
###             ("_constrain" ("_position" k) ("_position_sort" 'a))))
###         ("_applC" ("_position" f) ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.760s elapsed time, 2.960s cpu time, 0.307s GC time
Loading theory "Draft.QE" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs" via "Draft.DNFUni")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "{}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.923s elapsed time, 3.573s cpu time, 0.458s GC time
Found termination order: "{}"
### theory "Draft.MPolyExtension"
### 0.951s elapsed time, 3.684s cpu time, 0.458s GC time
Loading theory "Draft.ExecutiblePolyProps" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs" via "Draft.DNFUni" via "Draft.InfinitesimalsUni" via "Draft.Infinitesimals")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"{Pm_fmap (fmap_of_list [(0, 2)]), Pm_fmap (fmap_of_list [(1, 1), (0, 1)]),
  Pm_fmap (fmap_of_list [(1, 2)])}"
  :: "(nat \<Rightarrow>\<^sub>0 nat) set"
### theory "HOL-Library.Tree"
### 2.068s elapsed time, 7.898s cpu time, 1.305s GC time
Loading theory "Draft.Templates" (required by "Draft.GeneralVSProofsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.227s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.GeneralVSProofsTemplates")
AList.merge
  AList.merge ?qs ?ps == foldr (%(x, y). AList.update x y) ?ps ?qs
AList.update
  AList.update ?k ?v [] == [(?k, ?v)]
  AList.update ?k ?v (?p # ?ps) ==
  if fst ?p = ?k then (?k, ?v) # ?ps else ?p # AList.update ?k ?v ?ps
Ball
  Ball (set ?xs) ?p == list_all ?p ?xs
Collect
  Collect ?p == set (filter ?p enum_class.enum)
HOL.eq
  ?x = ?x == True
  ?a = ?b == equal_class.equal ?a ?b
If
  if False then ?x else ?y == ?y
  if True then ?x else ?y == ?x
List.member
  List.member [] ?y == False
  List.member (?x # ?xs) ?y == ?x = ?y | List.member ?xs ?y
Not
  ~ False == True
  ~ True == False
Prod_any
  Prod_any ?g == prod ?g {a. ?g a ~= (1::?'b)}
Sum_any
  Sum_any ?g == sum ?g {a. ?g a ~= (0::?'b)}
case_option
  case Some ?x2.0 of None => ?f1.0 | Some x => ?f2.0 x == ?f2.0 ?x2.0
  case None of None => ?f1.0 | Some x => ?f2.0 x == ?f1.0
case_prod
  case (?a, ?b) of (x, xa) => ?f x xa == ?f ?a ?b
comp
  ?f o ?g == %x. ?f (?g x)
conj
  ?p & True == ?p
  ?p & False == False
  True & ?p == ?p
  False & ?p == False
disj
  ?p | True == True
  ?p | False == ?p
  True | ?p == True
  False | ?p == ?p
equal_class.equal [nat]
  equal_class.equal ?x ?x == True
  equal_class.equal 0 (Suc ?x2.0) == False
  equal_class.equal (Suc ?x2.0) 0 == False
  equal_class.equal (Suc ?x2.0) (Suc ?y2.0) == equal_class.equal ?x2.0 ?y2.0
  equal_class.equal 0 0 == True
equal_class.equal [poly_mapping]
  equal_class.equal (Pm_fmap ?xs) (Pm_fmap ?ys) ==
  fmpred (%k v. lookup0 ?xs k = lookup0 ?ys k) (?xs ++\<^sub>f ?ys)
fBall
  fBall ?xa == Ball (fset ?xa)
filter
  filter ?p [] == []
  filter ?p (?x # ?xs) ==
  if ?p ?x then ?x # filter ?p ?xs else filter ?p ?xs
fimage
  fset (?xb |`| ?xc) == ?xb ` fset ?xc
fmadd
  fmap_of_list ?m ++\<^sub>f fmap_of_list ?n ==
  fmap_of_list (AList.merge ?m ?n)
fmdom
  fmdom (fmap_of_list ?m) == fst |`| fset_of_list ?m
fmlookup
  fmlookup (fmap_of_list ?m) == map_of ?m
fmlookup_default
  fmlookup_default ?d ?m ?x ==
  case fmlookup ?m ?x of None => ?d | Some v => v
fmpred
  fmpred ?p ?m == fBall (fmdom ?m) (%x. ?p x (the (fmlookup ?m x)))
foldr
  foldr ?f [] == id
  foldr ?f (?x # ?xs) == ?f ?x o foldr ?f ?xs
fset
  fset (Abs_fset ?x) == ?x
fset_of_list
  fset (fset_of_list ?xa) == set ?xa
fst
  fst (?x1.0, ?x2.0) == ?x1.0
id
  id == %x. x
image
  ?f ` set ?xs == set (map ?f ?xs)
insertion
  insertion ?xb (MPoly ?xa) == insertion_aux ?xb ?xa
insertion_aux
  insertion_aux ?x ?xc == insertion_fun ?x (lookup ?xc)
insertion_fun
  insertion_fun ?f ?p == SUM m. ?p m * (PROD v. ?f v ^ lookup m v)
list_all
  list_all ?p [] == True
  list_all ?p (?x # ?xs) == ?p ?x & list_all ?p ?xs
map
  map ?f [] == []
  map ?f (?x21.0 # ?x22.0) == ?f ?x21.0 # map ?f ?x22.0
map_of
  map_of ((?l, ?v) # ?ps) ?k == if ?l = ?k then Some ?v else map_of ?ps ?k
  map_of [] ?k == None
poly_mapping.lookup
  lookup (Pm_fmap ?xs) ?x == lookup0 ?xs ?x
power
  ?a ^ 0 == 1::?'a
  ?a ^ Suc ?n == ?a * ?a ^ ?n
prod
  prod ?g (set ?xs) == prod_list (map ?g (remdups ?xs))
prod_list
  prod_list ?xs == foldr (*) ?xs (1::?'a)
remdups
  remdups [] == []
  remdups (?x # ?xs) ==
  if List.member ?xs ?x then remdups ?xs else ?x # remdups ?xs
sum
  sum ?g (set ?xs) == sum_list (map ?g (remdups ?xs))
sum_list
  sum_list ?xs == foldr (+) ?xs (0::?'a)
the
  the (Some ?x2.0) == ?x2.0
### theory "Draft.ExecutiblePolyProps"
### 1.350s elapsed time, 5.155s cpu time, 0.558s GC time
Loading theory "Draft.PolyAtoms" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs" via "Draft.DNFUni" via "Draft.InfinitesimalsUni" via "Draft.Infinitesimals" via "Draft.LinearCase" via "Draft.VSAlgos" via "Draft.Debruijn")
AList.merge
  AList.merge ?qs ?ps == foldr (%(x, y). AList.update x y) ?ps ?qs
AList.update
  AList.update ?k ?v [] == [(?k, ?v)]
  AList.update ?k ?v (?p # ?ps) ==
  if fst ?p = ?k then (?k, ?v) # ?ps else ?p # AList.update ?k ?v ?ps
Ball
  Ball (set ?xs) ?p == list_all ?p ?xs
HOL.eq
  ?x = ?x == True
  ?a = ?b == equal_class.equal ?a ?b
If
  if False then ?x else ?y == ?y
  if True then ?x else ?y == ?x
List.member
  List.member [] ?y == False
  List.member (?x # ?xs) ?y == ?x = ?y | List.member ?xs ?y
Not
  ~ False == True
  ~ True == False
Poly_Mapping.keys
  keys (Pm_fmap ?xs) == fmdom' (clearjunk0 ?xs)
case_option
  case Some ?x2.0 of None => ?f1.0 | Some x => ?f2.0 x == ?f2.0 ?x2.0
  case None of None => ?f1.0 | Some x => ?f2.0 x == ?f1.0
case_prod
  case (?a, ?b) of (x, xa) => ?f x xa == ?f ?a ?b
clearjunk0
  clearjunk0 ?m ==
  fmfilter (%k. ~ equal_class.equal (fmlookup ?m k) (Some (0::?'b))) ?m
coeff
  coeff == coeff_code
coeff_code
  coeff_code (MPoly ?xa) == lookup ?xa
comp
  ?f o ?g == %x. ?f (?g x)
conj
  ?p & True == ?p
  ?p & False == False
  True & ?p == ?p
  False & ?p == False
disj
  ?p | True == True
  ?p | False == ?p
  True | ?p == True
  False | ?p == ?p
equal_class.equal [nat]
  equal_class.equal ?x ?x == True
  equal_class.equal 0 (Suc ?x2.0) == False
  equal_class.equal (Suc ?x2.0) 0 == False
  equal_class.equal (Suc ?x2.0) (Suc ?y2.0) == equal_class.equal ?x2.0 ?y2.0
  equal_class.equal 0 0 == True
equal_class.equal [option]
  equal_class.equal ?x ?x == True
  equal_class.equal None (Some ?x2.0) == False
  equal_class.equal (Some ?x2.0) None == False
  equal_class.equal (Some ?x2.0) (Some ?y2.0) == ?x2.0 = ?y2.0
  equal_class.equal None None == True
equal_class.equal [poly_mapping]
  equal_class.equal (Pm_fmap ?xs) (Pm_fmap ?ys) ==
  fmpred (%k v. lookup0 ?xs k = lookup0 ?ys k) (?xs ++\<^sub>f ?ys)
fBall
  fBall ?xa == Ball (fset ?xa)
filter
  filter ?p [] == []
  filter ?p (?x # ?xs) ==
  if ?p ?x then ?x # filter ?p ?xs else filter ?p ?xs
fimage
  fset (?xb |`| ?xc) == ?xb ` fset ?xc
fmadd
  fmap_of_list ?m ++\<^sub>f fmap_of_list ?n ==
  fmap_of_list (AList.merge ?m ?n)
fmdom
  fmdom (fmap_of_list ?m) == fst |`| fset_of_list ?m
fmdom'
  fmdom' ?m == fset (fmdom ?m)
fmfilter
  fmfilter ?p (fmap_of_list ?m) ==
  fmap_of_list (filter (%(k, uu_). ?p k) ?m)
fmlookup
  fmlookup (fmap_of_list ?m) == map_of ?m
fmlookup_default
  fmlookup_default ?d ?m ?x ==
  case fmlookup ?m ?x of None => ?d | Some v => v
fmpred
  fmpred ?p ?m == fBall (fmdom ?m) (%x. ?p x (the (fmlookup ?m x)))
foldr
  foldr ?f [] == id
  foldr ?f (?x # ?xs) == ?f ?x o foldr ?f ?xs
fset
  fset (Abs_fset ?x) == ?x
fset_of_list
  fset (fset_of_list ?xa) == set ?xa
fst
  fst (?x1.0, ?x2.0) == ?x1.0
id
  id == %x. x
image
  ?f ` set ?xs == set (map ?f ?xs)
insertion
  insertion ?i ?mp ==
  SUM m:monomials ?mp. coeff ?mp m * (PROD k:keys m. ?i k ^ lookup m k)
list_all
  list_all ?p [] == True
  list_all ?p (?x # ?xs) == ?p ?x & list_all ?p ?xs
map
  map ?f [] == []
  map ?f (?x21.0 # ?x22.0) == ?f ?x21.0 # map ?f ?x22.0
map_of
  map_of ((?l, ?v) # ?ps) ?k == if ?l = ?k then Some ?v else map_of ?ps ?k
  map_of [] ?k == None
monomials
  monomials (MPoly ?xa) == keys ?xa
poly_mapping.lookup
  lookup (Pm_fmap ?xs) ?x == lookup0 ?xs ?x
power
  ?a ^ 0 == 1::?'a
  ?a ^ Suc ?n == ?a * ?a ^ ?n
prod
  prod ?g (set ?xs) == prod_list (map ?g (remdups ?xs))
prod_list
  prod_list ?xs == foldr (*) ?xs (1::?'a)
remdups
  remdups [] == []
  remdups (?x # ?xs) ==
  if List.member ?xs ?x then remdups ?xs else ?x # remdups ?xs
sum
  sum ?g (set ?xs) == sum_list (map ?g (remdups ?xs))
sum_list
  sum_list ?xs == foldr (+) ?xs (0::?'a)
the
  the (Some ?x2.0) == ?x2.0
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.921s elapsed time, 3.469s cpu time, 1.161s GC time
"6241 / 100"
  :: "real"
AList.merge
  AList.merge ?qs ?ps == foldr (%(x, y). AList.update x y) ?ps ?qs
AList.update
  AList.update ?k ?v [] == [(?k, ?v)]
  AList.update ?k ?v (?p # ?ps) ==
  if fst ?p = ?k then (?k, ?v) # ?ps else ?p # AList.update ?k ?v ?ps
Ball
  Ball (set ?xs) ?p == list_all ?p ?xs
HOL.eq
  ?x = ?x == True
  ?a = ?b == equal_class.equal ?a ?b
If
  if False then ?x else ?y == ?y
  if True then ?x else ?y == ?x
List.insert
  List.insert ?x ?xs == if List.member ?xs ?x then ?xs else ?x # ?xs
List.member
  List.member [] ?y == False
  List.member (?x # ?xs) ?y == ?x = ?y | List.member ?xs ?y
Max
  Max (set (?x # ?xs)) == fold max ?xs ?x
Not
  ~ False == True
  ~ True == False
Poly_Mapping.keys
  keys (Pm_fmap ?xs) == fmdom' (clearjunk0 ?xs)
case_option
  case Some ?x2.0 of None => ?f1.0 | Some x => ?f2.0 x == ?f2.0 ?x2.0
  case None of None => ?f1.0 | Some x => ?f2.0 x == ?f1.0
case_prod
  case (?a, ?b) of (x, xa) => ?f x xa == ?f ?a ?b
clearjunk0
  clearjunk0 ?m ==
  fmfilter (%k. ~ equal_class.equal (fmlookup ?m k) (Some (0::?'b))) ?m
comp
  ?f o ?g == %x. ?f (?g x)
conj
  ?p & True == ?p
  ?p & False == False
  True & ?p == ?p
  False & ?p == False
degree
  degree (MPoly ?xa) == %v. Max (insert 0 ((%m. lookup m v) ` keys ?xa))
disj
  ?p | True == True
  ?p | False == ?p
  True | ?p == True
  False | ?p == ?p
equal_class.equal [nat]
  equal_class.equal ?x ?x == True
  equal_class.equal 0 (Suc ?x2.0) == False
  equal_class.equal (Suc ?x2.0) 0 == False
  equal_class.equal (Suc ?x2.0) (Suc ?y2.0) == equal_class.equal ?x2.0 ?y2.0
  equal_class.equal 0 0 == True
equal_class.equal [option]
  equal_class.equal ?x ?x == True
  equal_class.equal None (Some ?x2.0) == False
  equal_class.equal (Some ?x2.0) None == False
  equal_class.equal (Some ?x2.0) (Some ?y2.0) == ?x2.0 = ?y2.0
  equal_class.equal None None == True
equal_class.equal [poly_mapping]
  equal_class.equal (Pm_fmap ?xs) (Pm_fmap ?ys) ==
  fmpred (%k v. lookup0 ?xs k = lookup0 ?ys k) (?xs ++\<^sub>f ?ys)
fBall
  fBall ?xa == Ball (fset ?xa)
filter
  filter ?p [] == []
  filter ?p (?x # ?xs) ==
  if ?p ?x then ?x # filter ?p ?xs else filter ?p ?xs
fimage
  fset (?xb |`| ?xc) == ?xb ` fset ?xc
fmadd
  fmap_of_list ?m ++\<^sub>f fmap_of_list ?n ==
  fmap_of_list (AList.merge ?m ?n)
fmdom
  fmdom (fmap_of_list ?m) == fst |`| fset_of_list ?m
fmdom'
  fmdom' ?m == fset (fmdom ?m)
fmfilter
  fmfilter ?p (fmap_of_list ?m) ==
  fmap_of_list (filter (%(k, uu_). ?p k) ?m)
fmlookup
  fmlookup (fmap_of_list ?m) == map_of ?m
fmlookup_default
  fmlookup_default ?d ?m ?x ==
  case fmlookup ?m ?x of None => ?d | Some v => v
fmpred
  fmpred ?p ?m == fBall (fmdom ?m) (%x. ?p x (the (fmlookup ?m x)))
fold
  fold ?f (?x # ?xs) ?s == fold ?f ?xs (?f ?x ?s)
  fold ?f [] ?s == ?s
foldr
  foldr ?f [] == id
  foldr ?f (?x # ?xs) == ?f ?x o foldr ?f ?xs
fset
  fset (Abs_fset ?x) == ?x
fset_of_list
  fset (fset_of_list ?xa) == set ?xa
fst
  fst (?x1.0, ?x2.0) == ?x1.0
id
  id == %x. x
image
  ?f ` set ?xs == set (map ?f ?xs)
insert
  insert ?x (List.coset ?xs) == List.coset (removeAll ?x ?xs)
  insert ?x (set ?xs) == set (List.insert ?x ?xs)
less [nat]
  ?m < Suc ?n == ?m <= ?n
  ?n < 0 == False
less_eq [nat]
  Suc ?m <= ?n == ?m < ?n
  0 <= ?n == True
list_all
  list_all ?p [] == True
  list_all ?p (?x # ?xs) == ?p ?x & list_all ?p ?xs
map
  map ?f [] == []
  map ?f (?x21.0 # ?x22.0) == ?f ?x21.0 # map ?f ?x22.0
map_of
  map_of ((?l, ?v) # ?ps) ?k == if ?l = ?k then Some ?v else map_of ?ps ?k
  map_of [] ?k == None
max
  max ?a ?b == if ?a <= ?b then ?b else ?a
poly_mapping.lookup
  lookup (Pm_fmap ?xs) ?x == lookup0 ?xs ?x
removeAll
  removeAll ?x [] == []
  removeAll ?x (?y # ?xs) ==
  if ?x = ?y then removeAll ?x ?xs else ?y # removeAll ?x ?xs
the
  the (Some ?x2.0) == ?x2.0
"MPoly
  (Pm_fmap
    (fmap_of_list
      [(Pm_fmap (fmap_of_list []),
        MPoly
         (Pm_fmap (fmap_of_list [(Pm_fmap (fmap_of_list [(0, 2)]), 1)]))),
       (Pm_fmap (fmap_of_list [(1, 2)]),
        MPoly (Pm_fmap (fmap_of_list [(Pm_fmap (fmap_of_list []), 9)]))),
       (Pm_fmap (fmap_of_list [(1, 1)]),
        MPoly
         (Pm_fmap
           (fmap_of_list [(Pm_fmap (fmap_of_list [(0, 1)]), 6)])))]))"
  :: "real mpoly mpoly"
"2"
  :: "nat"
Found termination order: "{}"
Found termination order: "{}"
"True"
  :: "bool"
"coeff p 0"
  :: "'a"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
"{1, 0}"
  :: "nat set"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.PolyAtoms"
### 5.059s elapsed time, 17.515s cpu time, 4.626s GC time
Loading theory "Draft.Debruijn" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs" via "Draft.DNFUni" via "Draft.InfinitesimalsUni" via "Draft.Infinitesimals" via "Draft.LinearCase" via "Draft.VSAlgos")
### theory "Draft.QE"
### 6.813s elapsed time, 24.005s cpu time, 5.759s GC time
Found termination order: "{}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
"AllQ
  (And (ExQ (fm.Atom
              (Eq (MPoly
                    (Pm_fmap
                      (fmap_of_list
                        [(Pm_fmap (fmap_of_list [(1, 1), (2, 1)]), 1),
                         (Pm_fmap (fmap_of_list [(0, 2), (3, 1)]),
                          - 1)]))))))
    (Neg (AllQ
           (fm.Atom
             (Leq (MPoly
                    (Pm_fmap
                      (fmap_of_list
                        [(Pm_fmap (fmap_of_list [(1, 2)]), 5),
                         (Pm_fmap (fmap_of_list [(0, 1)]), - 1)]))))))))"
  :: "atom fm"
Found termination order: "{}"
Found termination order: "{}"
"True"
  :: "bool"
"True"
  :: "bool"
Found termination order: "{}"
"True"
  :: "bool"
### theory "Draft.Debruijn"
### 1.505s elapsed time, 4.952s cpu time, 0.229s GC time
Loading theory "Draft.Optimizations" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs" via "Draft.DNFUni" via "Draft.InfinitesimalsUni" via "Draft.Infinitesimals" via "Draft.LinearCase" via "Draft.VSAlgos")
Loading theory "Draft.UniAtoms" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs" via "Draft.DNFUni" via "Draft.InfinitesimalsUni")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.UniAtoms"
### 3.315s elapsed time, 7.496s cpu time, 0.482s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Optimizations"
### 3.384s elapsed time, 7.579s cpu time, 0.482s GC time
Loading theory "Draft.VSAlgos" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs" via "Draft.DNFUni" via "Draft.InfinitesimalsUni" via "Draft.Infinitesimals" via "Draft.LinearCase")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  quadratic_sub ::
    "nat
     => real mpoly
        => real mpoly => real mpoly => real mpoly => atom => atom fm"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
consts
  qe_eq_repeat_helper ::
    "nat => real mpoly list => atom list => atom fm list => atom fm"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.VSAlgos"
### 4.975s elapsed time, 6.040s cpu time, 0.325s GC time
Loading theory "Draft.LinearCase" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs" via "Draft.DNFUni" via "Draft.InfinitesimalsUni" via "Draft.Infinitesimals")
Loading theory "Draft.NegInfinity" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs" via "Draft.DNFUni" via "Draft.InfinitesimalsUni" via "Draft.Infinitesimals")
Loading theory "Draft.QuadraticCase" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs" via "Draft.DNFUni" via "Draft.InfinitesimalsUni" via "Draft.Infinitesimals")
### theory "Draft.LinearCase"
### 0.118s elapsed time, 0.376s cpu time, 0.000s GC time
### theory "Draft.QuadraticCase"
### 0.315s elapsed time, 0.800s cpu time, 0.159s GC time
Loading theory "Draft.EliminateVariable" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs" via "Draft.EqualityVS")
### theory "Draft.NegInfinity"
### 0.600s elapsed time, 1.404s cpu time, 0.159s GC time
Loading theory "Draft.Infinitesimals" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs" via "Draft.DNFUni" via "Draft.InfinitesimalsUni")
Loading theory "Draft.NegInfinityUni" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs" via "Draft.DNFUni" via "Draft.InfinitesimalsUni")
### theory "Draft.EliminateVariable"
### 0.400s elapsed time, 0.937s cpu time, 0.000s GC time
Loading theory "Draft.LuckyFind" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs" via "Draft.EqualityVS")
### theory "Draft.LuckyFind"
### 0.064s elapsed time, 0.192s cpu time, 0.000s GC time
Loading theory "Draft.EqualityVS" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs")
### theory "Draft.EqualityVS"
### 0.090s elapsed time, 0.274s cpu time, 0.000s GC time
### theory "Draft.Infinitesimals"
### 0.481s elapsed time, 1.263s cpu time, 0.000s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.NegInfinityUni"
### 0.971s elapsed time, 1.959s cpu time, 0.284s GC time
Loading theory "Draft.InfinitesimalsUni" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs" via "Draft.DNFUni")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.InfinitesimalsUni"
### 0.789s elapsed time, 0.802s cpu time, 0.000s GC time
Loading theory "Draft.DNFUni" (required by "Draft.GeneralVSProofsTemplates" via "Draft.GeneralVSProofs")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.DNFUni"
### 0.419s elapsed time, 0.610s cpu time, 0.214s GC time
Loading theory "Draft.GeneralVSProofs" (required by "Draft.GeneralVSProofsTemplates")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
### theory "Draft.GeneralVSProofs"
### 0.819s elapsed time, 0.833s cpu time, 0.000s GC time
Loading theory "Draft.GeneralVSProofsTemplates"
val templateLemmas =
   [("GeneralVSProofs.freeIn_elimVar",
     "freeIn ?var (elimVar ?var ?L ?F ?A)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0))
         )),
    ("GeneralVSProofs.eval_generalVS''",
     "(EX x. evalUni (list_conj_Uni (map AtomUni ?L)) x) =
      evalUni (generalVS_DNF ?L) ?x",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("GeneralVSProofs.linear_subst_map",
     "evalUni (map_atomUni (linearSubstitutionUni ?b ?c) ?F) ?x =
      evalUni ?F (- ?c / ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 3)))),
    ("GeneralVSProofs.all_degree_2_convert",
     "all_degree_2 ?var ?L ==>
      EX L'. convert_atom_list ?var ?L ?xs = Some L'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("GeneralVSProofs.forallx_substNegInf",
     "(~ evalUni (map_atomUni substNegInfinityUni ?F) ?x) =
      (ALL x. ~ evalUni (map_atomUni substNegInfinityUni ?F) x)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 0, t_empty))),
    ("GeneralVSProofs.freeInDisj",
     "freeIn ?var
       (list_disj
         (list_conj (map (substNegInfinity ?var) ?L) #
          map (elimVar ?var ?L []) ?L))",
     template_predicate
      (
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 1)),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 0),
                     template_hole 0)),
                 template_var 0))))
         )),
    ("GeneralVSProofs.gen_qe_eval'",
     "[| all_degree_2 ?var ?L; length ?xs' = ?var |]
      ==> freeIn ?var (gen_qe ?var ?L [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 3, template_var 0), template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_hole 0))
           ))),
    ("GeneralVSProofs.quadratic_subst_map",
     "evalUni (map_atomUni (quadraticSubUni ?a ?b ?c ?d) ?F) ?x =
      evalUni ?F ((?a + ?b * sqrt ?c) / ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 5),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app (template_hole 0, template_var 3)))),
           template_var 2)))),
    ("GeneralVSProofs.convert_atom_list_change",
     "length ?xs' = ?var ==>
      convert_atom_list ?var ?L (?xs' @ ?x # ?\<Gamma>) =
      convert_atom_list ?var ?L (?xs' @ ?x' # ?\<Gamma>)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 5), template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 1, template_var 5),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 1, template_var 5),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("GeneralVSProofs.set_split",
     "separateAtoms ?L = (?eq, ?les, ?leq, ?neq) ==>
      set ?L =
      set (map EqUni ?eq @
           map LessUni ?les @ map LeqUni ?leq @ map NeqUni ?neq)",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 4),
          template_app
           (template_app (template_hole 10, template_var 3),
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))))],
       template_equation
        (template_app (template_hole 6, template_var 4),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 2),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_hole 1),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_hole 0),
                   template_var 0)))))))),
    ("GeneralVSProofs.gen_qe_eval",
     "length ?xs = ?var ==>
      (EX x. eval (list_conj (map fm.Atom ?L @ ?F)) (?xs @ x # ?\<Gamma>)) =
      (EX x. eval (gen_qe ?var ?L ?F) (?xs @ x # ?\<Gamma>))",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 4), template_var 3)],
       template_equation
        (template_app (template_hole 8, t_empty),
         template_app (template_hole 8, t_empty)))),
    ("GeneralVSProofs.convert_list",
     "[| convert_atom_list ?var ?L (?xs' @ ?x # ?xs) = Some ?L';
         ?l : set ?L |]
      ==> EX l':set ?L'. convert_atom ?var ?l (?xs' @ ?x # ?xs) = Some l'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_var 6),
              template_var 5),
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2))),
          template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             t_empty)
           ))),
    ("GeneralVSProofs.convert_list2",
     "[| convert_atom_list ?var ?L (?xs' @ ?x # ?xs) = Some ?L';
         ?l' : set ?L' |]
      ==> EX l:set ?L. convert_atom ?var l (?xs' @ ?x # ?xs) = Some ?l'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_var 6),
              template_var 5),
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2))),
          template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 5)),
             t_empty)
           ))),
    ("GeneralVSProofs.gen_qe_eval'",
     "[| all_degree_2 ?var ?L; length ?xs' = ?var |]
      ==> (EX x. eval (list_conj (map fm.Atom ?L)) (?xs' @ x # ?\<Gamma>)) =
          (ALL x. eval (gen_qe ?var ?L []) (?xs' @ x # ?\<Gamma>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 11, template_var 1), template_var 3)],
       template_equation
        (template_app (template_hole 9, t_empty),
         template_app (template_hole 2, t_empty)))),
    ("GeneralVSProofs.split_elimvar",
     "separateAtoms ?L = (?eq, ?les, ?leq, ?neq) ==>
      evalUni (elimVarUni_atom ?L ?At) ?x =
      evalUni
       (elimVarUni_atom
         (map EqUni ?eq @
          map LessUni ?les @ map LeqUni ?leq @ map NeqUni ?neq)
         ?At)
       ?x",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 6),
          template_app
           (template_app (template_hole 11, template_var 5),
            template_app
             (template_app (template_hole 10, template_var 4),
              template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2))))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 6),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_var 5)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_hole 2),
                         template_var 4)),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 4, template_hole 1),
                           template_var 3)),
                       template_app
                        (template_app (template_hole 4, template_hole 0),
                         template_var 2))))),
               template_var 1)),
           template_var 0)))),
    ("GeneralVSProofs.eval_convert",
     "[| convert_atom_list ?var ?L (?xs' @ ?x # ?xs) = Some ?L';
         length ?xs' = ?var |]
      ==> (ALL f:set ?L. aEval f (?xs' @ ?x # ?xs)) =
          (ALL f:set ?L'. aEvalUni f ?x)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 12, template_var 5),
              template_var 4),
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1))),
          template_app (template_hole 9, template_var 0)),
        template_equation
         (template_app (template_hole 7, template_var 3), template_var 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 4)),
           t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           t_empty)))),
    ("GeneralVSProofs.set_split'",
     "separateAtoms ?L = (?eq, ?les, ?leq, ?neq) ==>
      set (map ?P ?L) =
      set (map (?P o EqUni) ?eq @
           map (?P o LessUni) ?les @
           map (?P o LeqUni) ?leq @ map (?P o NeqUni) ?neq)",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 5),
          template_app
           (template_app (template_hole 12, template_var 4),
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1))))],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 0),
             template_var 5)),
         template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3)),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 2)),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_var 0),
                         template_hole 1)),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_hole 0)),
                   template_var 1)))))))),
    ("GeneralVSProofs.negInf_convert",
     "[| convert_atom_list ?var ?L (?xs' @ ?x # ?xs) = Some ?L';
         length ?xs' = ?var |]
      ==> (ALL f:set ?L. eval (substNegInfinity ?var f) (?xs' @ ?x # ?xs)) =
          (ALL f:set ?L'. evalUni (substNegInfinityUni f) ?x)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 14, template_var 5),
              template_var 4),
            template_app
             (template_app (template_hole 13, template_var 3),
              template_app
               (template_app (template_hole 12, template_var 2),
                template_var 1))),
          template_app (template_hole 11, template_var 0)),
        template_equation
         (template_app (template_hole 9, template_var 3), template_var 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 4)),
           t_empty),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           t_empty)))),
    ("GeneralVSProofs.gen_qe_eval''",
     "[| all_degree_2 ?var ?L; length ?xs' = ?var |]
      ==> (EX x. eval (list_conj (map fm.Atom ?L)) (?xs' @ x # ?\<Gamma>)) =
          (ALL x.
              eval
               (list_disj
                 (list_conj (map (substNegInfinity ?var) ?L) #
                  map (elimVar ?var ?L []) ?L))
               (?xs' @ x # ?\<Gamma>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 14, template_var 1), template_var 3)],
       template_equation
        (template_app (template_hole 12, t_empty),
         template_app (template_hole 5, t_empty)))),
    ("GeneralVSProofs.elimVar_atom_single",
     "[| convert_atom ?var ?A (?xs' @ ?x # ?xs) = Some ?A';
         convert_atom_list ?var ?L2.0 (?xs' @ ?x # ?xs) = Some ?L2';
         length ?xs' = ?var |]
      ==> eval (elimVar ?var ?L2.0 [] ?A) (?xs' @ ?x # ?xs) =
          evalUni (elimVarUni_atom ?L2' ?A') ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 14, template_var 7),
              template_var 6),
            template_app
             (template_app (template_hole 13, template_var 5),
              template_app
               (template_app (template_hole 12, template_var 4),
                template_var 3))),
          template_app (template_hole 11, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 9, template_var 7),
              template_var 1),
            template_app
             (template_app (template_hole 13, template_var 5),
              template_app
               (template_app (template_hole 12, template_var 4),
                template_var 3))),
          template_app (template_hole 8, template_var 0)),
        template_equation
         (template_app (template_hole 6, template_var 5), template_var 7)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 7),
                   template_var 1),
                 template_hole 2),
               template_var 6)),
           template_app
            (template_app (template_hole 13, template_var 5),
             template_app
              (template_app (template_hole 12, template_var 4),
               template_var 3))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 4)))),
    ("GeneralVSProofs.eq_inf",
     "(ALL (a, b, c):set ?a. EX x. ALL y<x. a * y\<^sup>2 + b * y + c = 0) =
      (ALL (a, b, c):set ?a. a = 0 & b = 0 & c = 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 16,
           template_app (template_hole 15, template_var 0)),
         template_app (template_hole 14, t_empty)),
       template_app
        (template_app
          (template_hole 16,
           template_app (template_hole 15, template_var 0)),
         template_app (template_hole 14, t_empty)))),
    ("GeneralVSProofs.elimVar_atom_convert",
     "[| convert_atom_list ?var ?L (?xs' @ ?x # ?xs) = Some ?L';
         convert_atom_list ?var ?L2.0 (?xs' @ ?x # ?xs) = Some ?L2';
         length ?xs' = ?var |]
      ==> (EX f:set ?L. eval (elimVar ?var ?L2.0 [] f) (?xs' @ ?x # ?xs)) =
          (EX f:set ?L'. evalUni (elimVarUni_atom ?L2' f) ?x)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 15, template_var 7),
              template_var 6),
            template_app
             (template_app (template_hole 14, template_var 5),
              template_app
               (template_app (template_hole 13, template_var 4),
                template_var 3))),
          template_app (template_hole 12, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 15, template_var 7),
              template_var 1),
            template_app
             (template_app (template_hole 14, template_var 5),
              template_app
               (template_app (template_hole 13, template_var 4),
                template_var 3))),
          template_app (template_hole 12, template_var 0)),
        template_equation
         (template_app (template_hole 10, template_var 5), template_var 7)],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 6)),
           t_empty),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           t_empty)))),
    ("GeneralVSProofs.split_elimVar",
     "separateAtoms ?L = (?eq, ?les, ?leq, ?neq) ==>
      (EX l:set ?L. evalUni (elimVarUni_atom ?L' l) ?x) =
      ((EX (a', b', c'):set ?eq.
           evalUni (elimVarUni_atom ?L' (EqUni (a', b', c'))) ?x) |
       (EX (a', b', c'):set ?les.
           evalUni (elimVarUni_atom ?L' (LessUni (a', b', c'))) ?x) |
       (EX (a', b', c'):set ?leq.
           evalUni (elimVarUni_atom ?L' (LeqUni (a', b', c'))) ?x) |
       (EX (a', b', c'):set ?neq.
           evalUni (elimVarUni_atom ?L' (NeqUni (a', b', c'))) ?x))",
     template_implication
      ([template_equation
         (template_app (template_hole 19, template_var 6),
          template_app
           (template_app (template_hole 18, template_var 5),
            template_app
             (template_app (template_hole 17, template_var 4),
              template_app
               (template_app (template_hole 16, template_var 3),
                template_var 2))))],
       template_equation
        (template_app
          (template_app
            (template_hole 14,
             template_app (template_hole 13, template_var 6)),
           t_empty),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 5)),
               template_app (template_hole 7, t_empty))),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 4)),
                 template_app (template_hole 7, t_empty))),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 3)),
                   template_app (template_hole 7, t_empty))),
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 2)),
                 template_app (template_hole 7, t_empty)))))))),
    ("GeneralVSProofs.separate_aEval",
     "separateAtoms ?L = (?a, ?b, ?c, ?d) ==>
      (ALL l:set ?L. aEvalUni l ?x) =
      ((ALL (a, b, c):set ?a. a * ?x\<^sup>2 + b * ?x + c = 0) &
       (ALL (a, b, c):set ?b. a * ?x\<^sup>2 + b * ?x + c < 0) &
       (ALL (a, b, c):set ?c. a * ?x\<^sup>2 + b * ?x + c <= 0) &
       (ALL (a, b, c):set ?d. a * ?x\<^sup>2 + b * ?x + c ~= 0))",
     template_implication
      ([template_equation
         (template_app (template_hole 23, template_var 5),
          template_app
           (template_app (template_hole 22, template_var 4),
            template_app
             (template_app (template_hole 21, template_var 3),
              template_app
               (template_app (template_hole 20, template_var 2),
                template_var 1))))],
       template_equation
        (template_app
          (template_app
            (template_hole 18,
             template_app (template_hole 17, template_var 5)),
           t_empty),
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app
                (template_hole 14,
                 template_app (template_hole 13, template_var 4)),
               template_app (template_hole 12, t_empty))),
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_var 3)),
                 template_app (template_hole 12, t_empty))),
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app (template_hole 13, template_var 2)),
                   template_app (template_hole 12, t_empty))),
               template_app
                (template_app
                  (template_hole 14,
                   template_app (template_hole 13, template_var 1)),
                 template_app (template_hole 12, t_empty)))))))),
    ("GeneralVSProofs.splitAtoms_negInfinity",
     "separateAtoms ?L = (?a, ?b, ?c, ?d) ==>
      (ALL l:set ?L. evalUni (substNegInfinityUni l) ?x) =
      ((ALL (a, b, c):set ?a.
           EX x. ALL y<x. a * y\<^sup>2 + b * y + c = 0) &
       (ALL (a, b, c):set ?b.
           EX x. ALL y<x. a * y\<^sup>2 + b * y + c < 0) &
       (ALL (a, b, c):set ?c.
           EX x. ALL y<x. a * y\<^sup>2 + b * y + c <= 0) &
       (ALL (a, b, c):set ?d.
           EX x. ALL y<x. a * y\<^sup>2 + b * y + c ~= 0))",
     template_implication
      ([template_equation
         (template_app (template_hole 27, template_var 5),
          template_app
           (template_app (template_hole 26, template_var 4),
            template_app
             (template_app (template_hole 25, template_var 3),
              template_app
               (template_app (template_hole 24, template_var 2),
                template_var 1))))],
       template_equation
        (template_app
          (template_app
            (template_hole 22,
             template_app (template_hole 21, template_var 5)),
           t_empty),
         template_app
          (template_app
            (template_hole 18,
             template_app
              (template_app
                (template_hole 17,
                 template_app (template_hole 16, template_var 4)),
               template_app (template_hole 15, t_empty))),
           template_app
            (template_app
              (template_hole 18,
               template_app
                (template_app
                  (template_hole 17,
                   template_app (template_hole 16, template_var 3)),
                 template_app (template_hole 15, t_empty))),
             template_app
              (template_app
                (template_hole 18,
                 template_app
                  (template_app
                    (template_hole 17,
                     template_app (template_hole 16, template_var 2)),
                   template_app (template_hole 15, t_empty))),
               template_app
                (template_app
                  (template_hole 17,
                   template_app (template_hole 16, template_var 1)),
                 template_app (template_hole 15, t_empty)))))))),
    ("GeneralVSProofs.less",
     "((?a' = 0 & ?b' ~= 0) &
       (ALL (d, e, f):set ?a.
           evalUni (substInfinitesimalLinearUni ?b' ?c' (EqUni (d, e, f)))
            ?x) &
       (ALL (d, e, f):set ?b.
           evalUni (substInfinitesimalLinearUni ?b' ?c' (LessUni (d, e, f)))
            ?x) &
       (ALL (d, e, f):set ?c.
           evalUni (substInfinitesimalLinearUni ?b' ?c' (LeqUni (d, e, f)))
            ?x) &
       (ALL (d, e, f):set ?d.
           evalUni (substInfinitesimalLinearUni ?b' ?c' (NeqUni (d, e, f)))
            ?x) |
       ?a' ~= 0 &
       - ?b'\<^sup>2 + 4 * ?a' * ?c' <= 0 &
       ((ALL (d, e, f):set ?a.
            evalUni
             (substInfinitesimalQuadraticUni (- ?b') 1
               (?b'\<^sup>2 - 4 * ?a' * ?c') (2 * ?a') (EqUni (d, e, f)))
             ?x) &
        (ALL (d, e, f):set ?b.
            evalUni
             (substInfinitesimalQuadraticUni (- ?b') 1
               (?b'\<^sup>2 - 4 * ?a' * ?c') (2 * ?a') (LessUni (d, e, f)))
             ?x) &
        (ALL (d, e, f):set ?c.
            evalUni
             (substInfinitesimalQuadraticUni (- ?b') 1
               (?b'\<^sup>2 - 4 * ?a' * ?c') (2 * ?a') (LeqUni (d, e, f)))
             ?x) &
        (ALL (d, e, f):set ?d.
            evalUni
             (substInfinitesimalQuadraticUni (- ?b') 1
               (?b'\<^sup>2 - 4 * ?a' * ?c') (2 * ?a') (NeqUni (d, e, f)))
             ?x) |
        (ALL (d, e, f):set ?a.
            evalUni
             (substInfinitesimalQuadraticUni (- ?b') (- 1)
               (?b'\<^sup>2 - 4 * ?a' * ?c') (2 * ?a') (EqUni (d, e, f)))
             ?x) &
        (ALL (d, e, f):set ?b.
            evalUni
             (substInfinitesimalQuadraticUni (- ?b') (- 1)
               (?b'\<^sup>2 - 4 * ?a' * ?c') (2 * ?a') (LessUni (d, e, f)))
             ?x) &
        (ALL (d, e, f):set ?c.
            evalUni
             (substInfinitesimalQuadraticUni (- ?b') (- 1)
               (?b'\<^sup>2 - 4 * ?a' * ?c') (2 * ?a') (LeqUni (d, e, f)))
             ?x) &
        (ALL (d, e, f):set ?d.
            evalUni
             (substInfinitesimalQuadraticUni (- ?b') (- 1)
               (?b'\<^sup>2 - 4 * ?a' * ?c') (2 * ?a') (NeqUni (d, e, f)))
             ?x))) =
      ((?a' = 0 & ?b' ~= 0) &
       (ALL (d, e, f):set ?a.
           EX y'>- ?c' / ?b'.
              ALL x:{- ?c' / ?b'<..y'}. aEvalUni (EqUni (d, e, f)) x) &
       (ALL (d, e, f):set ?b.
           EX y'>- ?c' / ?b'.
              ALL x:{- ?c' / ?b'<..y'}. aEvalUni (LessUni (d, e, f)) x) &
       (ALL (d, e, f):set ?c.
           EX y'>- ?c' / ?b'.
              ALL x:{- ?c' / ?b'<..y'}. aEvalUni (LeqUni (d, e, f)) x) &
       (ALL (d, e, f):set ?d.
           EX y'>- ?c' / ?b'.
              ALL x:{- ?c' / ?b'<..y'}. aEvalUni (NeqUni (d, e, f)) x) |
       ?a' ~= 0 &
       - ?b'\<^sup>2 + 4 * ?a' * ?c' <= 0 &
       ((ALL (d, e, f):set ?a.
            EX y'>(- ?b' + 1 * sqrt (?b'\<^sup>2 - 4 * ?a' * ?c')) /
                  (2 * ?a').
               ALL x:{(- ?b' + 1 * sqrt (?b'\<^sup>2 - 4 * ?a' * ?c')) /
                      (2 * ?a')<..y'}.
                  aEvalUni (EqUni (d, e, f)) x) &
        (ALL (d, e, f):set ?b.
            EX y'>(- ?b' + 1 * sqrt (?b'\<^sup>2 - 4 * ?a' * ?c')) /
                  (2 * ?a').
               ALL x:{(- ?b' + 1 * sqrt (?b'\<^sup>2 - 4 * ?a' * ?c')) /
                      (2 * ?a')<..y'}.
                  aEvalUni (LessUni (d, e, f)) x) &
        (ALL (d, e, f):set ?c.
            EX y'>(- ?b' + 1 * sqrt (?b'\<^sup>2 - 4 * ?a' * ?c')) /
                  (2 * ?a').
               ALL x:{(- ?b' + 1 * sqrt (?b'\<^sup>2 - 4 * ?a' * ?c')) /
                      (2 * ?a')<..y'}.
                  aEvalUni (LeqUni (d, e, f)) x) &
        (ALL (d, e, f):set ?d.
            EX y'>(- ?b' + 1 * sqrt (?b'\<^sup>2 - 4 * ?a' * ?c')) /
                  (2 * ?a').
               ALL x:{(- ?b' + 1 * sqrt (?b'\<^sup>2 - 4 * ?a' * ?c')) /
                      (2 * ?a')<..y'}.
                  aEvalUni (NeqUni (d, e, f)) x) |
        (ALL (d, e, f):set ?a.
            EX y'>(- ?b' + - 1 * sqrt (?b'\<^sup>2 - 4 * ?a' * ?c')) /
                  (2 * ?a').
               ALL x:{(- ?b' + - 1 * sqrt (?b'\<^sup>2 - 4 * ?a' * ?c')) /
                      (2 * ?a')<..y'}.
                  aEvalUni (EqUni (d, e, f)) x) &
        (ALL (d, e, f):set ?b.
            EX y'>(- ?b' + - 1 * sqrt (?b'\<^sup>2 - 4 * ?a' * ?c')) /
                  (2 * ?a').
               ALL x:{(- ?b' + - 1 * sqrt (?b'\<^sup>2 - 4 * ?a' * ?c')) /
                      (2 * ?a')<..y'}.
                  aEvalUni (LessUni (d, e, f)) x) &
        (ALL (d, e, f):set ?c.
            EX y'>(- ?b' + - 1 * sqrt (?b'\<^sup>2 - 4 * ?a' * ?c')) /
                  (2 * ?a').
               ALL x:{(- ?b' + - 1 * sqrt (?b'\<^sup>2 - 4 * ?a' * ?c')) /
                      (2 * ?a')<..y'}.
                  aEvalUni (LeqUni (d, e, f)) x) &
        (ALL (d, e, f):set ?d.
            EX y'>(- ?b' + - 1 * sqrt (?b'\<^sup>2 - 4 * ?a' * ?c')) /
                  (2 * ?a').
               ALL x:{(- ?b' + - 1 * sqrt (?b'\<^sup>2 - 4 * ?a' * ?c')) /
                      (2 * ?a')<..y'}.
                  aEvalUni (NeqUni (d, e, f)) x)))",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 35,
               template_app
                (template_app
                  (template_hole 34,
                   template_app
                    (template_app
                      (template_hole 34,
                       template_app
                        (template_app (template_hole 33, template_var 7),
                         template_hole 32)),
                     template_app
                      (template_hole 31,
                       template_app
                        (template_app (template_hole 33, template_var 6),
                         template_hole 32)))),
                 template_app
                  (template_app
                    (template_hole 34,
                     template_app
                      (template_app
                        (template_hole 30,
                         template_app (template_hole 29, template_var 5)),
                       template_app (template_hole 28, t_empty))),
                   template_app
                    (template_app
                      (template_hole 34,
                       template_app
                        (template_app
                          (template_hole 30,
                           template_app (template_hole 29, template_var 2)),
                         template_app (template_hole 28, t_empty))),
                     template_app
                      (template_app
                        (template_hole 34,
                         template_app
                          (template_app
                            (template_hole 30,
                             template_app
                              (template_hole 29, template_var 1)),
                           template_app (template_hole 28, t_empty))),
                       template_app
                        (template_app
                          (template_hole 30,
                           template_app (template_hole 29, template_var 0)),
                         template_app (template_hole 28, t_empty))))))),
             template_app
              (template_app
                (template_hole 34,
                 template_app
                  (template_hole 31,
                   template_app
                    (template_app (template_hole 33, template_var 7),
                     template_hole 32))),
               template_app
                (template_app
                  (template_hole 34,
                   template_app
                    (template_app
                      (template_hole 18,
                       template_app
                        (template_app
                          (template_hole 17,
                           template_app
                            (template_hole 16,
                             template_app
                              (template_app
                                (template_hole 15, template_var 6),
                               template_app
                                (template_hole 14,
                                 template_app
                                  (template_hole 13, template_hole 12))))),
                         template_app
                          (template_app
                            (template_hole 11,
                             template_app
                              (template_app
                                (template_hole 11,
                                 template_app
                                  (template_hole 10,
                                   template_app
                                    (template_hole 13,
                                     template_app
(template_hole 13, template_hole 12)))),
                               template_var 7)),
                           template_var 4))),
                     template_hole 32)),
                 template_app
                  (template_app
                    (template_hole 35,
                     template_app
                      (template_app
                        (template_hole 34,
                         template_app
                          (template_app
                            (template_hole 30,
                             template_app
                              (template_hole 29, template_var 5)),
                           template_app (template_hole 28, t_empty))),
                       template_app
                        (template_app
                          (template_hole 34,
                           template_app
                            (template_app
                              (template_hole 30,
                               template_app
                                (template_hole 29, template_var 2)),
                             template_app (template_hole 28, t_empty))),
                         template_app
                          (template_app
                            (template_hole 34,
                             template_app
                              (template_app
                                (template_hole 30,
                                 template_app
                                  (template_hole 29, template_var 1)),
                               template_app (template_hole 28, t_empty))),
                           template_app
                            (template_app
                              (template_hole 30,
                               template_app
                                (template_hole 29, template_var 0)),
                             template_app (template_hole 28, t_empty)))))),
                   template_app
                    (template_app
                      (template_hole 34,
                       template_app
                        (template_app
                          (template_hole 30,
                           template_app (template_hole 29, template_var 5)),
                         template_app (template_hole 28, t_empty))),
                     template_app
                      (template_app
                        (template_hole 34,
                         template_app
                          (template_app
                            (template_hole 30,
                             template_app
                              (template_hole 29, template_var 2)),
                           template_app (template_hole 28, t_empty))),
                       template_app
                        (template_app
                          (template_hole 34,
                           template_app
                            (template_app
                              (template_hole 30,
                               template_app
                                (template_hole 29, template_var 1)),
                             template_app (template_hole 28, t_empty))),
                         template_app
                          (template_app
                            (template_hole 30,
                             template_app
                              (template_hole 29, template_var 0)),
                           template_app (template_hole 28, t_empty)))))))))
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 35,
               template_app
                (template_app
                  (template_hole 34,
                   template_app
                    (template_app
                      (template_hole 34,
                       template_app
                        (template_app (template_hole 33, template_var 7),
                         template_hole 32)),
                     template_app
                      (template_hole 31,
                       template_app
                        (template_app (template_hole 33, template_var 6),
                         template_hole 32)))),
                 template_app
                  (template_app
                    (template_hole 34,
                     template_app
                      (template_app
                        (template_hole 30,
                         template_app (template_hole 29, template_var 5)),
                       template_app (template_hole 28, t_empty))),
                   template_app
                    (template_app
                      (template_hole 34,
                       template_app
                        (template_app
                          (template_hole 30,
                           template_app (template_hole 29, template_var 2)),
                         template_app (template_hole 28, t_empty))),
                     template_app
                      (template_app
                        (template_hole 34,
                         template_app
                          (template_app
                            (template_hole 30,
                             template_app
                              (template_hole 29, template_var 1)),
                           template_app (template_hole 28, t_empty))),
                       template_app
                        (template_app
                          (template_hole 30,
                           template_app (template_hole 29, template_var 0)),
                         template_app (template_hole 28, t_empty))))))),
             template_app
              (template_app
                (template_hole 34,
                 template_app
                  (template_hole 31,
                   template_app
                    (template_app (template_hole 33, template_var 7),
                     template_hole 32))),
               template_app
                (template_app
                  (template_hole 34,
                   template_app
                    (template_app
                      (template_hole 18,
                       template_app
                        (template_app
                          (template_hole 17,
                           template_app
                            (template_hole 16,
                             template_app
                              (template_app
                                (template_hole 15, template_var 6),
                               template_app
                                (template_hole 14,
                                 template_app
                                  (template_hole 13, template_hole 12))))),
                         template_app
                          (template_app
                            (template_hole 11,
                             template_app
                              (template_app
                                (template_hole 11,
                                 template_app
                                  (template_hole 10,
                                   template_app
                                    (template_hole 13,
                                     template_app
(template_hole 13, template_hole 12)))),
                               template_var 7)),
                           template_var 4))),
                     template_hole 32)),
                 template_app
                  (template_app
                    (template_hole 35,
                     template_app
                      (template_app
                        (template_hole 34,
                         template_app
                          (template_app
                            (template_hole 30,
                             template_app
                              (template_hole 29, template_var 5)),
                           template_app (template_hole 28, t_empty))),
                       template_app
                        (template_app
                          (template_hole 34,
                           template_app
                            (template_app
                              (template_hole 30,
                               template_app
                                (template_hole 29, template_var 2)),
                             template_app (template_hole 28, t_empty))),
                         template_app
                          (template_app
                            (template_hole 34,
                             template_app
                              (template_app
                                (template_hole 30,
                                 template_app
                                  (template_hole 29, template_var 1)),
                               template_app (template_hole 28, t_empty))),
                           template_app
                            (template_app
                              (template_hole 30,
                               template_app
                                (template_hole 29, template_var 0)),
                             template_app (template_hole 28, t_empty)))))),
                   template_app
                    (template_app
                      (template_hole 34,
                       template_app
                        (template_app
                          (template_hole 30,
                           template_app (template_hole 29, template_var 5)),
                         template_app (template_hole 28, t_empty))),
                     template_app
                      (template_app
                        (template_hole 34,
                         template_app
                          (template_app
                            (template_hole 30,
                             template_app
                              (template_hole 29, template_var 2)),
                           template_app (template_hole 28, t_empty))),
                       template_app
                        (template_app
                          (template_hole 34,
                           template_app
                            (template_app
                              (template_hole 30,
                               template_app
                                (template_hole 29, template_var 1)),
                             template_app (template_hole 28, t_empty))),
                         template_app
                          (template_app
                            (template_hole 30,
                             template_app
                              (template_hole 29, template_var 0)),
                           template_app (template_hole 28, t_empty)))))))))
           )))]:
   (string * thm * template) list
### theory "Draft.GeneralVSProofsTemplates"
### 1.119s elapsed time, 1.447s cpu time, 0.262s GC time
val it = (): unit
