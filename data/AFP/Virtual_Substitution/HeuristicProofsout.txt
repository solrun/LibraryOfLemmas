Loading theory "Draft.MPolyExtension" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.EqualityVS" via "Draft.EliminateVariable" via "Draft.LinearCase" via "Draft.VSAlgos" via "Draft.Debruijn" via "Draft.PolyAtoms" via "Draft.ExecutiblePolyProps")
Loading theory "HOL-Library.Stream" (required by "Draft.HeuristicProofsTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.BigO" (required by "Draft.HeuristicProofsTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Tree" (required by "Draft.HeuristicProofsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 42 of "$AFP/Virtual_Substitution/MPolyExtension.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Series.suminf_binder" ("_position" k)
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" lookup)
###           ("_cargs"
###             ("_constrain" ("_position" x)
###               ("\<^type>Poly_Mapping.poly_mapping" ("_position_sort" 'a)
###                 ("_ofsort" ("_position_sort" 'b)
###                   ("_class_name" comm_semiring_1))))
###             ("_constrain" ("_position" k) ("_position_sort" 'a))))
###         ("_applC"
###           ("_constrain" ("_position" f)
###             ("\<^type>fun" ("_position_sort" 'a)
###               ("_ofsort" ("_position_sort" 'b)
###                 ("_class_name" comm_semiring_1))))
###           ("_position" k))))
###     ("_sum" ("_position" k) ("_applC" ("_position" keys) ("_position" x))
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" x)
###             ("_constrain" ("_position" k) ("_position_sort" 'a))))
###         ("_applC" ("_position" f) ("_position" k))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Sum_any" ("_position" k)
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" lookup)
###           ("_cargs"
###             ("_constrain" ("_position" x)
###               ("\<^type>Poly_Mapping.poly_mapping" ("_position_sort" 'a)
###                 ("_ofsort" ("_position_sort" 'b)
###                   ("_class_name" comm_semiring_1))))
###             ("_constrain" ("_position" k) ("_position_sort" 'a))))
###         ("_applC"
###           ("_constrain" ("_position" f)
###             ("\<^type>fun" ("_position_sort" 'a)
###               ("_ofsort" ("_position_sort" 'b)
###                 ("_class_name" comm_semiring_1))))
###           ("_position" k))))
###     ("_sum" ("_position" k) ("_applC" ("_position" keys) ("_position" x))
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" x)
###             ("_constrain" ("_position" k) ("_position_sort" 'a))))
###         ("_applC" ("_position" f) ("_position" k))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "{}"
### theory "HOL-Library.BigO"
### 0.821s elapsed time, 3.187s cpu time, 0.323s GC time
Loading theory "Draft.QE" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.GeneralVSProofs" via "Draft.DNFUni")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "{}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.896s elapsed time, 3.485s cpu time, 0.323s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.MPolyExtension"
### 0.948s elapsed time, 3.695s cpu time, 0.323s GC time
Loading theory "Draft.ExecutiblePolyProps" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.EqualityVS" via "Draft.EliminateVariable" via "Draft.LinearCase" via "Draft.VSAlgos" via "Draft.Debruijn" via "Draft.PolyAtoms")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"{Pm_fmap (fmap_of_list [(0, 2)]), Pm_fmap (fmap_of_list [(1, 1), (0, 1)]),
  Pm_fmap (fmap_of_list [(1, 2)])}"
  :: "(nat \<Rightarrow>\<^sub>0 nat) set"
### theory "HOL-Library.Tree"
### 2.099s elapsed time, 8.036s cpu time, 1.152s GC time
Loading theory "Draft.Templates" (required by "Draft.HeuristicProofsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.092s elapsed time, 0.335s cpu time, 0.070s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.HeuristicProofsTemplates")
AList.merge
  AList.merge ?qs ?ps == foldr (%(x, y). AList.update x y) ?ps ?qs
AList.update
  AList.update ?k ?v [] == [(?k, ?v)]
  AList.update ?k ?v (?p # ?ps) ==
  if fst ?p = ?k then (?k, ?v) # ?ps else ?p # AList.update ?k ?v ?ps
Ball
  Ball (set ?xs) ?p == list_all ?p ?xs
Collect
  Collect ?p == set (filter ?p enum_class.enum)
HOL.eq
  ?x = ?x == True
  ?a = ?b == equal_class.equal ?a ?b
If
  if False then ?x else ?y == ?y
  if True then ?x else ?y == ?x
List.member
  List.member [] ?y == False
  List.member (?x # ?xs) ?y == ?x = ?y | List.member ?xs ?y
Not
  ~ False == True
  ~ True == False
Prod_any
  Prod_any ?g == prod ?g {a. ?g a ~= (1::?'b)}
Sum_any
  Sum_any ?g == sum ?g {a. ?g a ~= (0::?'b)}
case_option
  case Some ?x2.0 of None => ?f1.0 | Some x => ?f2.0 x == ?f2.0 ?x2.0
  case None of None => ?f1.0 | Some x => ?f2.0 x == ?f1.0
case_prod
  case (?a, ?b) of (x, xa) => ?f x xa == ?f ?a ?b
comp
  ?f o ?g == %x. ?f (?g x)
conj
  ?p & True == ?p
  ?p & False == False
  True & ?p == ?p
  False & ?p == False
disj
  ?p | True == True
  ?p | False == ?p
  True | ?p == True
  False | ?p == ?p
equal_class.equal [nat]
  equal_class.equal ?x ?x == True
  equal_class.equal 0 (Suc ?x2.0) == False
  equal_class.equal (Suc ?x2.0) 0 == False
  equal_class.equal (Suc ?x2.0) (Suc ?y2.0) == equal_class.equal ?x2.0 ?y2.0
  equal_class.equal 0 0 == True
equal_class.equal [poly_mapping]
  equal_class.equal (Pm_fmap ?xs) (Pm_fmap ?ys) ==
  fmpred (%k v. lookup0 ?xs k = lookup0 ?ys k) (?xs ++\<^sub>f ?ys)
fBall
  fBall ?xa == Ball (fset ?xa)
filter
  filter ?p [] == []
  filter ?p (?x # ?xs) ==
  if ?p ?x then ?x # filter ?p ?xs else filter ?p ?xs
fimage
  fset (?xb |`| ?xc) == ?xb ` fset ?xc
fmadd
  fmap_of_list ?m ++\<^sub>f fmap_of_list ?n ==
  fmap_of_list (AList.merge ?m ?n)
fmdom
  fmdom (fmap_of_list ?m) == fst |`| fset_of_list ?m
fmlookup
  fmlookup (fmap_of_list ?m) == map_of ?m
fmlookup_default
  fmlookup_default ?d ?m ?x ==
  case fmlookup ?m ?x of None => ?d | Some v => v
fmpred
  fmpred ?p ?m == fBall (fmdom ?m) (%x. ?p x (the (fmlookup ?m x)))
foldr
  foldr ?f [] == id
  foldr ?f (?x # ?xs) == ?f ?x o foldr ?f ?xs
fset
  fset (Abs_fset ?x) == ?x
fset_of_list
  fset (fset_of_list ?xa) == set ?xa
fst
  fst (?x1.0, ?x2.0) == ?x1.0
id
  id == %x. x
image
  ?f ` set ?xs == set (map ?f ?xs)
insertion
  insertion ?xb (MPoly ?xa) == insertion_aux ?xb ?xa
insertion_aux
  insertion_aux ?x ?xc == insertion_fun ?x (lookup ?xc)
insertion_fun
  insertion_fun ?f ?p == SUM m. ?p m * (PROD v. ?f v ^ lookup m v)
list_all
  list_all ?p [] == True
  list_all ?p (?x # ?xs) == ?p ?x & list_all ?p ?xs
map
  map ?f [] == []
  map ?f (?x21.0 # ?x22.0) == ?f ?x21.0 # map ?f ?x22.0
map_of
  map_of ((?l, ?v) # ?ps) ?k == if ?l = ?k then Some ?v else map_of ?ps ?k
  map_of [] ?k == None
poly_mapping.lookup
  lookup (Pm_fmap ?xs) ?x == lookup0 ?xs ?x
power
  ?a ^ 0 == 1::?'a
  ?a ^ Suc ?n == ?a * ?a ^ ?n
prod
  prod ?g (set ?xs) == prod_list (map ?g (remdups ?xs))
prod_list
  prod_list ?xs == foldr (*) ?xs (1::?'a)
remdups
  remdups [] == []
  remdups (?x # ?xs) ==
  if List.member ?xs ?x then remdups ?xs else ?x # remdups ?xs
sum
  sum ?g (set ?xs) == sum_list (map ?g (remdups ?xs))
sum_list
  sum_list ?xs == foldr (+) ?xs (0::?'a)
the
  the (Some ?x2.0) == ?x2.0
### theory "Draft.ExecutiblePolyProps"
### 1.777s elapsed time, 6.627s cpu time, 1.805s GC time
Loading theory "Draft.PolyAtoms" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.EqualityVS" via "Draft.EliminateVariable" via "Draft.LinearCase" via "Draft.VSAlgos" via "Draft.Debruijn")
AList.merge
  AList.merge ?qs ?ps == foldr (%(x, y). AList.update x y) ?ps ?qs
AList.update
  AList.update ?k ?v [] == [(?k, ?v)]
  AList.update ?k ?v (?p # ?ps) ==
  if fst ?p = ?k then (?k, ?v) # ?ps else ?p # AList.update ?k ?v ?ps
Ball
  Ball (set ?xs) ?p == list_all ?p ?xs
HOL.eq
  ?x = ?x == True
  ?a = ?b == equal_class.equal ?a ?b
If
  if False then ?x else ?y == ?y
  if True then ?x else ?y == ?x
List.member
  List.member [] ?y == False
  List.member (?x # ?xs) ?y == ?x = ?y | List.member ?xs ?y
Not
  ~ False == True
  ~ True == False
Poly_Mapping.keys
  keys (Pm_fmap ?xs) == fmdom' (clearjunk0 ?xs)
case_option
  case Some ?x2.0 of None => ?f1.0 | Some x => ?f2.0 x == ?f2.0 ?x2.0
  case None of None => ?f1.0 | Some x => ?f2.0 x == ?f1.0
case_prod
  case (?a, ?b) of (x, xa) => ?f x xa == ?f ?a ?b
clearjunk0
  clearjunk0 ?m ==
  fmfilter (%k. ~ equal_class.equal (fmlookup ?m k) (Some (0::?'b))) ?m
coeff
  coeff == coeff_code
coeff_code
  coeff_code (MPoly ?xa) == lookup ?xa
comp
  ?f o ?g == %x. ?f (?g x)
conj
  ?p & True == ?p
  ?p & False == False
  True & ?p == ?p
  False & ?p == False
disj
  ?p | True == True
  ?p | False == ?p
  True | ?p == True
  False | ?p == ?p
equal_class.equal [nat]
  equal_class.equal ?x ?x == True
  equal_class.equal 0 (Suc ?x2.0) == False
  equal_class.equal (Suc ?x2.0) 0 == False
  equal_class.equal (Suc ?x2.0) (Suc ?y2.0) == equal_class.equal ?x2.0 ?y2.0
  equal_class.equal 0 0 == True
equal_class.equal [option]
  equal_class.equal ?x ?x == True
  equal_class.equal None (Some ?x2.0) == False
  equal_class.equal (Some ?x2.0) None == False
  equal_class.equal (Some ?x2.0) (Some ?y2.0) == ?x2.0 = ?y2.0
  equal_class.equal None None == True
equal_class.equal [poly_mapping]
  equal_class.equal (Pm_fmap ?xs) (Pm_fmap ?ys) ==
  fmpred (%k v. lookup0 ?xs k = lookup0 ?ys k) (?xs ++\<^sub>f ?ys)
fBall
  fBall ?xa == Ball (fset ?xa)
filter
  filter ?p [] == []
  filter ?p (?x # ?xs) ==
  if ?p ?x then ?x # filter ?p ?xs else filter ?p ?xs
fimage
  fset (?xb |`| ?xc) == ?xb ` fset ?xc
fmadd
  fmap_of_list ?m ++\<^sub>f fmap_of_list ?n ==
  fmap_of_list (AList.merge ?m ?n)
fmdom
  fmdom (fmap_of_list ?m) == fst |`| fset_of_list ?m
fmdom'
  fmdom' ?m == fset (fmdom ?m)
fmfilter
  fmfilter ?p (fmap_of_list ?m) ==
  fmap_of_list (filter (%(k, uu_). ?p k) ?m)
fmlookup
  fmlookup (fmap_of_list ?m) == map_of ?m
fmlookup_default
  fmlookup_default ?d ?m ?x ==
  case fmlookup ?m ?x of None => ?d | Some v => v
fmpred
  fmpred ?p ?m == fBall (fmdom ?m) (%x. ?p x (the (fmlookup ?m x)))
foldr
  foldr ?f [] == id
  foldr ?f (?x # ?xs) == ?f ?x o foldr ?f ?xs
fset
  fset (Abs_fset ?x) == ?x
fset_of_list
  fset (fset_of_list ?xa) == set ?xa
fst
  fst (?x1.0, ?x2.0) == ?x1.0
id
  id == %x. x
image
  ?f ` set ?xs == set (map ?f ?xs)
insertion
  insertion ?i ?mp ==
  SUM m:monomials ?mp. coeff ?mp m * (PROD k:keys m. ?i k ^ lookup m k)
list_all
  list_all ?p [] == True
  list_all ?p (?x # ?xs) == ?p ?x & list_all ?p ?xs
map
  map ?f [] == []
  map ?f (?x21.0 # ?x22.0) == ?f ?x21.0 # map ?f ?x22.0
map_of
  map_of ((?l, ?v) # ?ps) ?k == if ?l = ?k then Some ?v else map_of ?ps ?k
  map_of [] ?k == None
monomials
  monomials (MPoly ?xa) == keys ?xa
poly_mapping.lookup
  lookup (Pm_fmap ?xs) ?x == lookup0 ?xs ?x
power
  ?a ^ 0 == 1::?'a
  ?a ^ Suc ?n == ?a * ?a ^ ?n
prod
  prod ?g (set ?xs) == prod_list (map ?g (remdups ?xs))
prod_list
  prod_list ?xs == foldr (*) ?xs (1::?'a)
remdups
  remdups [] == []
  remdups (?x # ?xs) ==
  if List.member ?xs ?x then remdups ?xs else ?x # remdups ?xs
sum
  sum ?g (set ?xs) == sum_list (map ?g (remdups ?xs))
sum_list
  sum_list ?xs == foldr (+) ?xs (0::?'a)
the
  the (Some ?x2.0) == ?x2.0
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.983s elapsed time, 3.689s cpu time, 1.168s GC time
"6241 / 100"
  :: "real"
AList.merge
  AList.merge ?qs ?ps == foldr (%(x, y). AList.update x y) ?ps ?qs
AList.update
  AList.update ?k ?v [] == [(?k, ?v)]
  AList.update ?k ?v (?p # ?ps) ==
  if fst ?p = ?k then (?k, ?v) # ?ps else ?p # AList.update ?k ?v ?ps
Ball
  Ball (set ?xs) ?p == list_all ?p ?xs
HOL.eq
  ?x = ?x == True
  ?a = ?b == equal_class.equal ?a ?b
If
  if False then ?x else ?y == ?y
  if True then ?x else ?y == ?x
List.insert
  List.insert ?x ?xs == if List.member ?xs ?x then ?xs else ?x # ?xs
List.member
  List.member [] ?y == False
  List.member (?x # ?xs) ?y == ?x = ?y | List.member ?xs ?y
Max
  Max (set (?x # ?xs)) == fold max ?xs ?x
Not
  ~ False == True
  ~ True == False
Poly_Mapping.keys
  keys (Pm_fmap ?xs) == fmdom' (clearjunk0 ?xs)
case_option
  case Some ?x2.0 of None => ?f1.0 | Some x => ?f2.0 x == ?f2.0 ?x2.0
  case None of None => ?f1.0 | Some x => ?f2.0 x == ?f1.0
case_prod
  case (?a, ?b) of (x, xa) => ?f x xa == ?f ?a ?b
clearjunk0
  clearjunk0 ?m ==
  fmfilter (%k. ~ equal_class.equal (fmlookup ?m k) (Some (0::?'b))) ?m
comp
  ?f o ?g == %x. ?f (?g x)
conj
  ?p & True == ?p
  ?p & False == False
  True & ?p == ?p
  False & ?p == False
degree
  degree (MPoly ?xa) == %v. Max (insert 0 ((%m. lookup m v) ` keys ?xa))
disj
  ?p | True == True
  ?p | False == ?p
  True | ?p == True
  False | ?p == ?p
equal_class.equal [nat]
  equal_class.equal ?x ?x == True
  equal_class.equal 0 (Suc ?x2.0) == False
  equal_class.equal (Suc ?x2.0) 0 == False
  equal_class.equal (Suc ?x2.0) (Suc ?y2.0) == equal_class.equal ?x2.0 ?y2.0
  equal_class.equal 0 0 == True
equal_class.equal [option]
  equal_class.equal ?x ?x == True
  equal_class.equal None (Some ?x2.0) == False
  equal_class.equal (Some ?x2.0) None == False
  equal_class.equal (Some ?x2.0) (Some ?y2.0) == ?x2.0 = ?y2.0
  equal_class.equal None None == True
equal_class.equal [poly_mapping]
  equal_class.equal (Pm_fmap ?xs) (Pm_fmap ?ys) ==
  fmpred (%k v. lookup0 ?xs k = lookup0 ?ys k) (?xs ++\<^sub>f ?ys)
fBall
  fBall ?xa == Ball (fset ?xa)
filter
  filter ?p [] == []
  filter ?p (?x # ?xs) ==
  if ?p ?x then ?x # filter ?p ?xs else filter ?p ?xs
fimage
  fset (?xb |`| ?xc) == ?xb ` fset ?xc
fmadd
  fmap_of_list ?m ++\<^sub>f fmap_of_list ?n ==
  fmap_of_list (AList.merge ?m ?n)
fmdom
  fmdom (fmap_of_list ?m) == fst |`| fset_of_list ?m
fmdom'
  fmdom' ?m == fset (fmdom ?m)
fmfilter
  fmfilter ?p (fmap_of_list ?m) ==
  fmap_of_list (filter (%(k, uu_). ?p k) ?m)
fmlookup
  fmlookup (fmap_of_list ?m) == map_of ?m
fmlookup_default
  fmlookup_default ?d ?m ?x ==
  case fmlookup ?m ?x of None => ?d | Some v => v
fmpred
  fmpred ?p ?m == fBall (fmdom ?m) (%x. ?p x (the (fmlookup ?m x)))
fold
  fold ?f (?x # ?xs) ?s == fold ?f ?xs (?f ?x ?s)
  fold ?f [] ?s == ?s
foldr
  foldr ?f [] == id
  foldr ?f (?x # ?xs) == ?f ?x o foldr ?f ?xs
fset
  fset (Abs_fset ?x) == ?x
fset_of_list
  fset (fset_of_list ?xa) == set ?xa
fst
  fst (?x1.0, ?x2.0) == ?x1.0
id
  id == %x. x
image
  ?f ` set ?xs == set (map ?f ?xs)
insert
  insert ?x (List.coset ?xs) == List.coset (removeAll ?x ?xs)
  insert ?x (set ?xs) == set (List.insert ?x ?xs)
less [nat]
  ?m < Suc ?n == ?m <= ?n
  ?n < 0 == False
less_eq [nat]
  Suc ?m <= ?n == ?m < ?n
  0 <= ?n == True
list_all
  list_all ?p [] == True
  list_all ?p (?x # ?xs) == ?p ?x & list_all ?p ?xs
map
  map ?f [] == []
  map ?f (?x21.0 # ?x22.0) == ?f ?x21.0 # map ?f ?x22.0
map_of
  map_of ((?l, ?v) # ?ps) ?k == if ?l = ?k then Some ?v else map_of ?ps ?k
  map_of [] ?k == None
max
  max ?a ?b == if ?a <= ?b then ?b else ?a
poly_mapping.lookup
  lookup (Pm_fmap ?xs) ?x == lookup0 ?xs ?x
removeAll
  removeAll ?x [] == []
  removeAll ?x (?y # ?xs) ==
  if ?x = ?y then removeAll ?x ?xs else ?y # removeAll ?x ?xs
the
  the (Some ?x2.0) == ?x2.0
"MPoly
  (Pm_fmap
    (fmap_of_list
      [(Pm_fmap (fmap_of_list []),
        MPoly
         (Pm_fmap (fmap_of_list [(Pm_fmap (fmap_of_list [(0, 2)]), 1)]))),
       (Pm_fmap (fmap_of_list [(1, 2)]),
        MPoly (Pm_fmap (fmap_of_list [(Pm_fmap (fmap_of_list []), 9)]))),
       (Pm_fmap (fmap_of_list [(1, 1)]),
        MPoly
         (Pm_fmap
           (fmap_of_list [(Pm_fmap (fmap_of_list [(0, 1)]), 6)])))]))"
  :: "real mpoly mpoly"
"2"
  :: "nat"
Found termination order: "{}"
Found termination order: "{}"
"True"
  :: "bool"
"coeff p 0"
  :: "'a"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
"{1, 0}"
  :: "nat set"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.PolyAtoms"
### 4.342s elapsed time, 14.972s cpu time, 2.522s GC time
Loading theory "Draft.Debruijn" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.EqualityVS" via "Draft.EliminateVariable" via "Draft.LinearCase" via "Draft.VSAlgos")
Found termination order: "{}"
### theory "Draft.QE"
### 6.443s elapsed time, 22.611s cpu time, 4.390s GC time
Found termination order: "{}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
"AllQ
  (And (ExQ (fm.Atom
              (Eq (MPoly
                    (Pm_fmap
                      (fmap_of_list
                        [(Pm_fmap (fmap_of_list [(1, 1), (2, 1)]), 1),
                         (Pm_fmap (fmap_of_list [(0, 2), (3, 1)]),
                          - 1)]))))))
    (Neg (AllQ
           (fm.Atom
             (Leq (MPoly
                    (Pm_fmap
                      (fmap_of_list
                        [(Pm_fmap (fmap_of_list [(1, 2)]), 5),
                         (Pm_fmap (fmap_of_list [(0, 1)]), - 1)]))))))))"
  :: "atom fm"
Found termination order: "{}"
Found termination order: "{}"
"True"
  :: "bool"
"True"
  :: "bool"
"True"
  :: "bool"
Found termination order: "{}"
### theory "Draft.Debruijn"
### 1.559s elapsed time, 5.159s cpu time, 0.346s GC time
Loading theory "Draft.Optimizations" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.EqualityVS" via "Draft.EliminateVariable" via "Draft.LinearCase" via "Draft.VSAlgos")
Loading theory "Draft.Reindex" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad")
Loading theory "Draft.UniAtoms" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.GeneralVSProofs" via "Draft.DNFUni" via "Draft.InfinitesimalsUni")
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
"MPoly (Pm_fmap (fmap_of_list [(Pm_fmap (fmap_of_list [(1, 1)]), 1)]))"
  :: "real mpoly"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Reindex"
### 0.808s elapsed time, 2.831s cpu time, 0.201s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list (%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.UniAtoms"
### 3.546s elapsed time, 9.165s cpu time, 0.796s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Optimizations"
### 3.622s elapsed time, 9.253s cpu time, 0.796s GC time
Loading theory "Draft.OptimizationProofs" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad")
Loading theory "Draft.VSAlgos" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.EqualityVS" via "Draft.EliminateVariable" via "Draft.LinearCase")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.OptimizationProofs"
### 0.257s elapsed time, 0.534s cpu time, 0.000s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
consts
  quadratic_sub ::
    "nat
     => real mpoly
        => real mpoly => real mpoly => real mpoly => atom => atom fm"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
consts
  qe_eq_repeat_helper ::
    "nat => real mpoly list => atom list => atom fm list => atom fm"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.VSAlgos"
### 5.047s elapsed time, 6.588s cpu time, 0.526s GC time
Loading theory "Draft.DNF" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad")
Loading theory "Draft.Heuristic" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs")
Loading theory "Draft.LinearCase" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.EqualityVS" via "Draft.EliminateVariable")
Loading theory "Draft.NegInfinity" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.GeneralVSProofs" via "Draft.DNFUni" via "Draft.InfinitesimalsUni" via "Draft.Infinitesimals")
### theory "Draft.DNF"
### 0.063s elapsed time, 0.255s cpu time, 0.000s GC time
Loading theory "Draft.QuadraticCase" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.EqualityVS" via "Draft.EliminateVariable")
### theory "Draft.LinearCase"
### 0.120s elapsed time, 0.478s cpu time, 0.000s GC time
?P ?x ==> EX x. ?P x
[| ?P ?x; ?x : ?A |] ==> EX x:?A. ?P x
Found termination order: "{}"
### theory "Draft.QuadraticCase"
### 0.328s elapsed time, 1.070s cpu time, 0.148s GC time
Loading theory "Draft.EliminateVariable" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.EqualityVS")
### theory "Draft.NegInfinity"
### 0.681s elapsed time, 2.229s cpu time, 0.271s GC time
Loading theory "Draft.Infinitesimals" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.GeneralVSProofs" via "Draft.DNFUni" via "Draft.InfinitesimalsUni")
Loading theory "Draft.NegInfinityUni" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.GeneralVSProofs" via "Draft.DNFUni" via "Draft.InfinitesimalsUni")
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
### theory "Draft.EliminateVariable"
### 0.523s elapsed time, 1.823s cpu time, 0.207s GC time
Loading theory "Draft.LuckyFind" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.EqualityVS")
### theory "Draft.LuckyFind"
### 0.067s elapsed time, 0.262s cpu time, 0.000s GC time
Loading theory "Draft.EqualityVS" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### theory "Draft.EqualityVS"
### 0.094s elapsed time, 0.370s cpu time, 0.000s GC time
Found termination order: "{}"
### theory "Draft.Infinitesimals"
### 0.555s elapsed time, 2.080s cpu time, 0.216s GC time
Found termination order: "{}"
instantiation
  natpair :: linorder
  less_eq_natpair == less_eq :: natpair => natpair => bool
  less_natpair == less :: natpair => natpair => bool
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.NegInfinityUni"
### 1.004s elapsed time, 2.990s cpu time, 0.290s GC time
Loading theory "Draft.InfinitesimalsUni" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.GeneralVSProofs" via "Draft.DNFUni")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.InfinitesimalsUni"
### 0.886s elapsed time, 1.986s cpu time, 0.210s GC time
Loading theory "Draft.DNFUni" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad" via "Draft.GeneralVSProofs")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.DNFUni"
### 0.393s elapsed time, 0.828s cpu time, 0.067s GC time
Loading theory "Draft.GeneralVSProofs" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs" via "Draft.VSQuad")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
instantiation
  quadnat :: linorder
  less_eq_quadnat == less_eq :: quadnat => quadnat => bool
  less_quadnat == less :: quadnat => quadnat => bool
### theory "Draft.GeneralVSProofs"
### 0.962s elapsed time, 2.047s cpu time, 0.315s GC time
Loading theory "Draft.VSQuad" (required by "Draft.HeuristicProofsTemplates" via "Draft.HeuristicProofs")
Found termination order: "{}"
### theory "Draft.Heuristic"
### 4.048s elapsed time, 10.345s cpu time, 1.152s GC time
### theory "Draft.VSQuad"
### 1.460s elapsed time, 3.623s cpu time, 2.835s GC time
Loading theory "Draft.HeuristicProofs" (required by "Draft.HeuristicProofsTemplates")
### theory "Draft.HeuristicProofs"
### 0.429s elapsed time, 0.429s cpu time, 0.000s GC time
Loading theory "Draft.HeuristicProofsTemplates"
val templateLemmas =
   [("HeuristicProofs.brownHueristic_less_than",
     "brownsHeuristic ?n ?L ?F = ?var ==> ?var <= ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2),
            template_var 1),
          template_var 0)],
       template_inequation (less_equals, template_var 0, template_var 3))),
    ("HeuristicProofs.sortedListMember",
     "sorted_list_of_fset ?b = ?var # ?list ==> ?var |\<in>| ?b",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 2)
           ))),
    ("HeuristicProofs.rangeHeuristic",
     "heuristicPicker ?n ?L ?F = Some (?var, ?step) ==> ?var <= ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_inequation (less_equals, template_var 1, template_var 4))),
    ("HeuristicProofs.pickedOneOfThem",
     "heuristicPicker ?n ?L ?F = Some (?var, ?step) ==>
      ?step = qe_eq_repeat | ?step = gen_qe | ?step = luckyFind'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 1)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 0)))
           ))),
    ("HeuristicProofs.gen_qe_eval'",
     "(EX xs.
          length xs = ?var + 1 &
          eval (list_conj (map fm.Atom ?L @ ?F)) (xs @ ?\<Gamma>)) =
      (EX xs.
          length xs = ?var + 1 &
          eval (gen_qe ?var ?L ?F) (xs @ ?\<Gamma>))",
     template_equation
      (template_app (template_hole 12, t_empty),
       template_app (template_hole 12, t_empty))),
    ("HeuristicProofs.luckiestFind_eval'",
     "(EX xs.
          length xs = ?var + 1 &
          eval (list_conj (map fm.Atom ?L @ ?F)) (xs @ ?\<Gamma>)) =
      (EX xs.
          length xs = ?var + 1 &
          eval (luckiestFind ?var ?L ?F) (xs @ ?\<Gamma>))",
     template_equation
      (template_app (template_hole 12, t_empty),
       template_app (template_hole 12, t_empty))),
    ("HeuristicProofs.luckyFind_eval'",
     "(EX xs.
          length xs = ?var + 1 &
          eval (list_conj (map fm.Atom ?L @ ?F)) (xs @ ?\<Gamma>)) =
      (EX xs.
          length xs = ?var + 1 &
          eval (luckyFind' ?var ?L ?F) (xs @ ?\<Gamma>))",
     template_equation
      (template_app (template_hole 12, t_empty),
       template_app (template_hole 12, t_empty))),
    ("HeuristicProofs.qe_eq_repeat_eval'",
     "(EX xs.
          length xs = ?var + 1 &
          eval (list_conj (map fm.Atom ?L @ ?F)) (xs @ ?\<Gamma>)) =
      (EX xs.
          length xs = ?var + 1 &
          eval (qe_eq_repeat ?var ?L ?F) (xs @ ?\<Gamma>))",
     template_equation
      (template_app (template_hole 12, t_empty),
       template_app (template_hole 12, t_empty))),
    ("HeuristicProofs.superPicker_eval",
     "?amount <= ?var + 1 ==>
      (EX xs.
          length xs = ?var + 1 &
          eval (list_conj (map fm.Atom ?L @ ?F)) (xs @ ?\<Gamma>)) =
      (EX xs.
          length xs = ?var + 1 &
          eval (superPicker ?amount ?var ?L ?F) (xs @ ?\<Gamma>))",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app (template_hole 13, template_var 3),
            template_hole 12))],
       template_equation
        (template_app (template_hole 10, t_empty),
         template_app (template_hole 10, t_empty)))),
    ("HeuristicProofs.gen_qe_eval_augment",
     "?amount <= ?var + 1 ==>
      (EX xs.
          length xs = ?var + 1 &
          eval (list_conj (map fm.Atom ?L @ ?F)) (xs @ ?\<Gamma>)) =
      (EX xs.
          length xs = ?var + 1 &
          eval (step_augment gen_qe IdentityHeuristic ?amount ?var ?L ?F)
           (xs @ ?\<Gamma>))",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app (template_hole 15, template_var 3),
            template_hole 14))],
       template_equation
        (template_app (template_hole 12, t_empty),
         template_app (template_hole 12, t_empty)))),
    ("HeuristicProofs.luckyFind_eval_augment",
     "?amount <= ?var + 1 ==>
      (EX xs.
          length xs = ?var + 1 &
          eval (list_conj (map fm.Atom ?L @ ?F)) (xs @ ?\<Gamma>)) =
      (EX xs.
          length xs = ?var + 1 &
          eval
           (step_augment luckyFind' IdentityHeuristic ?amount ?var ?L ?F)
           (xs @ ?\<Gamma>))",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app (template_hole 15, template_var 3),
            template_hole 14))],
       template_equation
        (template_app (template_hole 12, t_empty),
         template_app (template_hole 12, t_empty)))),
    ("HeuristicProofs.qe_eq_repeat_eval_augment",
     "?amount <= ?var + 1 ==>
      (EX xs.
          length xs = ?var + 1 &
          eval (list_conj (map fm.Atom ?L @ ?F)) (xs @ ?\<Gamma>)) =
      (EX xs.
          length xs = ?var + 1 &
          eval
           (step_augment qe_eq_repeat IdentityHeuristic ?amount ?var ?L ?F)
           (xs @ ?\<Gamma>))",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app (template_hole 15, template_var 3),
            template_hole 14))],
       template_equation
        (template_app (template_hole 12, t_empty),
         template_app (template_hole 12, t_empty)))),
    ("HeuristicProofs.the_real_step_augment",
     "(!!xs var L F \<Gamma>.
          length xs = var ==>
          (EX x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \<Gamma>)) =
          (EX x. eval (?step var L F) (xs @ x # \<Gamma>))) ==>
      (EX xs.
          length xs = ?amount &
          eval
           (list_disj
             (map (%(L, F, n). ExN n (list_conj (map fm.Atom L @ F))) ?F))
           (xs @ ?\<Gamma>)) =
      eval (the_real_step_augment ?step ?amount ?F) ?\<Gamma>",
     template_implication
      ([template_predicate (template_app (template_hole 23, t_empty))],
       template_equation
        (template_app (template_hole 7, t_empty),
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 0)))),
    ("HeuristicProofs.step_converter",
     "(!!xs var L F \<Gamma>.
          length xs = var ==>
          (EX x. eval (list_conj (map fm.Atom L @ F)) (xs @ x # \<Gamma>)) =
          (EX x. eval (?step var L F) (xs @ x # \<Gamma>))) ==>
      (EX xs.
          length xs = ?var + 1 &
          eval (list_conj (map fm.Atom ?L @ ?F)) (xs @ ?\<Gamma>)) =
      (EX xs.
          length xs = ?var + 1 & eval (?step ?var ?L ?F) (xs @ ?\<Gamma>))",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty))],
       template_equation
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 3, t_empty)))),
    ("HeuristicProofs.step_augmenter_eval",
     "[| !!xs var L F \<Gamma>.
            length xs = var ==>
            (EX x. eval (list_conj (map fm.Atom L @ F))
                    (xs @ x # \<Gamma>)) =
            (EX x. eval (?step var L F) (xs @ x # \<Gamma>));
         !!n var L F. ?heuristic n L F = var ==> var <= n;
         ?amount <= ?var + 1 |]
      ==> (EX xs.
              length xs = ?var + 1 &
              eval (list_conj (map fm.Atom ?L @ ?F)) (xs @ ?\<Gamma>)) =
          (EX xs.
              length xs = ?var + 1 &
              eval (step_augment ?step ?heuristic ?amount ?var ?L ?F)
               (xs @ ?\<Gamma>))",
     template_implication
      ([template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_inequation
         (less_equals, template_var 4,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_hole 3))],
       template_equation
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 2, t_empty))))]:
   (string * thm * template) list
### theory "Draft.HeuristicProofsTemplates"
### 0.951s elapsed time, 1.270s cpu time, 0.216s GC time
val it = (): unit
