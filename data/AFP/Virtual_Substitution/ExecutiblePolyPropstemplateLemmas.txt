   [("ExecutiblePolyProps.coeff_zero", "MPoly_Type.coeff 0 ?x = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("ExecutiblePolyProps.var_not_in_Const", "?var ~: vars (Const ?x)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)))
             )
         )),
    ("ExecutiblePolyProps.degree_const",
     "MPoly_Type.degree (Const ?z) ?x = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_hole 0)),
    ("ExecutiblePolyProps.degree_one", "MPoly_Type.degree (Var ?x) ?x = 1",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("ExecutiblePolyProps.insertion_one", "insertion ?f (Const 1) = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_hole 0)),
    ("ExecutiblePolyProps.insertion_zero", "insertion ?f (Const 0) = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_hole 0)),
    ("ExecutiblePolyProps.insertion_const", "insertion ?f (Const ?c) = ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("ExecutiblePolyProps.add_zero", "?P + Const (0::?'a) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("ExecutiblePolyProps.isolate_zero",
     "isolate_variable_sparse 0 ?var ?n = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_hole 0)),
    ("ExecutiblePolyProps.mult_one_right", "?P * Const 1 = ?P",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("ExecutiblePolyProps.mult_one_left", "Const 1 * ?P = ?P",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0),
       template_var 0)),
    ("ExecutiblePolyProps.update_0_0",
     "Poly_Mapping.update ?x (0::?'b) 0 = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0),
       template_hole 0)),
    ("ExecutiblePolyProps.of_nat_monomial",
     "of_nat ?p = monomial ?p (0::?'a)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("ExecutiblePolyProps.mult_zero_right",
     "?P * Const (0::?'a) = Const (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_app (template_hole 1, template_hole 0))),
    ("ExecutiblePolyProps.mult_zero_left",
     "Const (0::?'a) * ?P = Const (0::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ExecutiblePolyProps.isolate_var_one",
     "isolate_variable_sparse (Var ?x) ?x 1 = 1",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 0),
         template_hole 1),
       template_hole 0)),
    ("ExecutiblePolyProps.isolate_var_0",
     "isolate_variable_sparse (Var ?x) ?x 0 = 0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 0),
         template_hole 1),
       template_hole 0)),
    ("ExecutiblePolyProps.degree_isovarspar",
     "MPoly_Type.degree (isolate_variable_sparse ?p ?x ?i) ?x = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 1),
       template_hole 0)),
    ("ExecutiblePolyProps.degree_var_i",
     "MPoly_Type.degree (Var ?x ^ ?i) ?x = ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_var 1),
       template_var 0)),
    ("ExecutiblePolyProps.const_lookup_zero",
     "isolate_variable_sparse (Const ?p) ?x 0 = Const ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0),
       template_app (template_hole 1, template_var 1))),
    ("ExecutiblePolyProps.const_lookup_suc",
     "isolate_variable_sparse (Const ?p) ?x (Suc ?i) = 0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("ExecutiblePolyProps.lookup_update_self",
     "Poly_Mapping.update ?i (lookup ?m ?i) ?m = ?m",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0),
       template_var 0)),
    ("ExecutiblePolyProps.insertion_neg",
     "insertion ?f (- ?p) = - insertion ?f ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("ExecutiblePolyProps.monomials_Var",
     "monomials (Var ?x) = {monomial 1 ?x}",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_hole 0))),
    ("ExecutiblePolyProps.mpoly_to_nested_poly_eq_zero_iff",
     "(mpoly_to_nested_poly ?mp ?v = 0) = (?mp = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 1, template_hole 0))),
    ("ExecutiblePolyProps.monom_eq_zero_iff",
     "(MPoly_Type.monom ?a ?b = 0) = (?b = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("ExecutiblePolyProps.coeff_Const",
     "MPoly_Type.coeff (Const ?p) ?m = (?p when ?m = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("ExecutiblePolyProps.insertion_var_zero",
     "insertion (nth_default (0::?'a) (?x # ?xs)) (Var 0) = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app (template_hole 1, template_hole 0)),
       template_var 1)),
    ("ExecutiblePolyProps.insertion_pow",
     "insertion ?f (?p ^ ?i) = insertion ?f ?p ^ ?i",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0))),
    ("ExecutiblePolyProps.in_monomials_iff",
     "(?x : monomials ?m) = (MPoly_Type.coeff ?m ?x ~= (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_hole 0)
           ))),
    ("ExecutiblePolyProps.coeff_eq_zero_iff",
     "(MPoly_Type.coeff ?c ?p = (0::?'a)) = (?p ~: monomials ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 3),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("ExecutiblePolyProps.monomial_adds_nat_iff",
     "(monomial ?p ?i adds ?c) = (?p <= lookup ?c ?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("ExecutiblePolyProps.nonzero_const_is_nonzero",
     "?k ~= 0 ==> Const ?k ~= 0",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("ExecutiblePolyProps.coeff_Var",
     "MPoly_Type.coeff (Var ?p) ?m = ((1::?'a) when ?m = monomial 1 ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)))
           ))),
    ("ExecutiblePolyProps.monomials_Const",
     "monomials (Const ?x) = (if ?x = (0::?'a) then {} else {0})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3)),
               template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 2))
           ))),
    ("ExecutiblePolyProps.not_in_neg",
     "(?var ~: vars ?p) = (?var ~: vars (- ?p))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("ExecutiblePolyProps.isolate_variable_sparse_degree_eq_zero_iff",
     "(isolate_variable_sparse ?p ?v (MPoly_Type.degree ?p ?v) = 0) =
      (?p = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_equation (template_var 1, template_hole 0))),
    ("ExecutiblePolyProps.of_nat_times_monomial",
     "of_nat ?p * monomial ?c ?i = monomial (?p * ?c) ?i",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ExecutiblePolyProps.degree_eq",
     "?p = ?q ==> MPoly_Type.degree ?p ?x = MPoly_Type.degree ?q ?x",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ExecutiblePolyProps.lookupNotIn",
     "?x ~: keys ?m ==> lookup ?m ?x = (0::?'b)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("ExecutiblePolyProps.varNotIn_degree",
     "?var ~: vars ?p ==> MPoly_Type.degree ?p ?var = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("ExecutiblePolyProps.get_if_const_insertion",
     "get_if_const ?p = Some ?r ==> insertion ?f ?p = ?r",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("ExecutiblePolyProps.coeff_eq_zero_mpoly_to_nested_polyD",
     "mpoly_to_nested_poly ?mp ?v = 0 ==>
      MPoly_Type.coeff ?mp 0 = (0::?'a)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_hole 1),
         template_hole 0))),
    ("ExecutiblePolyProps.degree_eq_0_mpoly_to_nested_polyI",
     "mpoly_to_nested_poly ?mp ?v = 0 ==> MPoly_Type.degree ?mp ?v = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("ExecutiblePolyProps.insertion_four",
     "insertion (nth_default (0::?'a) ?xs) 4 = (4::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 2, template_hole 1)))),
       template_app
        (template_hole 0,
         template_app
          (template_hole 2,
           template_app (template_hole 2, template_hole 1))))),
    ("ExecutiblePolyProps.coeff_sum",
     "MPoly_Type.coeff (sum ?f ?S) ?x =
      (SUM i:?S. MPoly_Type.coeff (?f i) ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("ExecutiblePolyProps.degree_eq_univariate_degree",
     "MPoly_Type.degree ?p ?v =
      (if ?p = 0 then 0
       else Polynomial.degree (mpoly_to_nested_poly ?p ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 3)),
               template_hole 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("ExecutiblePolyProps.mpoly_eq_iff",
     "(?p = ?q) = (ALL m. MPoly_Type.coeff ?p m = MPoly_Type.coeff ?q m)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("ExecutiblePolyProps.insertion_sub",
     "insertion ?f (?A - ?B) = insertion ?f ?A - insertion ?f ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("ExecutiblePolyProps.mpoly_to_nested_poly_mult",
     "mpoly_to_nested_poly (?p * ?q) ?v =
      mpoly_to_nested_poly ?p ?v * mpoly_to_nested_poly ?q ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("ExecutiblePolyProps.update_minus_monomial",
     "Poly_Mapping.update ?k ?i (?m - monomial ?i ?k) =
      Poly_Mapping.update ?k ?i ?m",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0))),
    ("ExecutiblePolyProps.isovarsparNotIn",
     "?x ~: vars ?p ==> isolate_variable_sparse ?p ?x 0 = ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_hole 0),
         template_var 0))),
    ("ExecutiblePolyProps.degree0isovarspar",
     "MPoly_Type.degree ?p ?x = 0 ==> isolate_variable_sparse ?p ?x 0 = ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_hole 2),
         template_var 1))),
    ("ExecutiblePolyProps.not_in_isovarspar",
     "isolate_variable_sparse ?p ?var ?x = ?q ==> ?var ~: vars ?q",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2),
            template_var 1),
          template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("ExecutiblePolyProps.isovar_greater_degree",
     "ALL i>MPoly_Type.degree ?p ?var.
         isolate_variable_sparse ?p ?var i = 0",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("ExecutiblePolyProps.degree_monom",
     "MPoly_Type.degree (MPoly_Type.monom ?x ?y) ?v =
      (if ?y = (0::?'a) then 0 else lookup ?x ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2)),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("ExecutiblePolyProps.not_in_pow",
     "?var ~: vars ?p ==> ?var ~: vars (?p ^ ?i)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))
               )
           ))),
    ("ExecutiblePolyProps.notInKeys_notInVars",
     "?x ~: keys ?m ==> ?x ~: vars (MPoly_Type.monom ?m ?a)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))
               )
           ))),
    ("ExecutiblePolyProps.isolate_variable_sparse_ne_zeroD",
     "isolate_variable_sparse ?mp ?v ?x ~= 0 ==>
      ?x <= MPoly_Type.degree ?mp ?v",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("ExecutiblePolyProps.degree_greater_iff",
     "(?k < MPoly_Type.degree ?p ?x) =
      (EX m:monomials ?p. ?k < lookup m ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         t_empty))),
    ("ExecutiblePolyProps.degree_le_iff",
     "(MPoly_Type.degree ?p ?x <= ?k) =
      (ALL m:monomials ?p. lookup m ?x <= ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         t_empty))),
    ("ExecutiblePolyProps.isovarspar_sum",
     "isolate_variable_sparse (?p + ?q) ?var ?deg =
      isolate_variable_sparse ?p ?var ?deg +
      isolate_variable_sparse ?q ?var ?deg",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("ExecutiblePolyProps.insertion_sum'",
     "insertion ?f (sum ?g {..?n}) = (SUM i<=?n. insertion ?f (?g i))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, t_empty),
         template_app (template_hole 1, template_var 0)))),
    ("ExecutiblePolyProps.monomials_monom_mult",
     "monomials (MPoly_Type.monom ?mon ?a * ?q) =
      (if ?a = (0::?'a) then {} else (+) ?mon ` monomials ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 3)),
               template_hole 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_app (template_hole 8, template_var 0)))
           ))),
    ("ExecutiblePolyProps.sum_over_zero",
     "?mp =
      (SUM i<=MPoly_Type.degree ?mp ?x.
       isolate_variable_sparse ?mp ?x i * Var ?x ^ i)",
     template_equation
      (template_var 1,
       template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("ExecutiblePolyProps.degree_exists_monom",
     "?p ~= 0 ==>
      EX m:monomials ?p. lookup m ?var = MPoly_Type.degree ?p ?var",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             t_empty)
           ))),
    ("ExecutiblePolyProps.insertion_var",
     "?var < length ?L ==>
      insertion (nth_default (0::?'a) (?L[?var := ?x])) (Var ?var) = ?x",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2),
                 template_var 0))),
           template_app (template_hole 0, template_var 2)),
         template_var 0))),
    ("ExecutiblePolyProps.degree_not_exists_monom",
     "?p ~= 0 ==>
      ~ (EX m:monomials ?p. MPoly_Type.degree ?p ?var < lookup m ?var)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 1)),
                 t_empty)
               )
           ))),
    ("ExecutiblePolyProps.degree_derivative",
     "0 < MPoly_Type.degree ?p ?x ==>
      MPoly_Type.degree ?p ?x =
      MPoly_Type.degree (derivative ?x ?p) ?x + 1",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1)),
               template_var 0)),
           template_hole 0)))),
    ("ExecutiblePolyProps.inKeys_inVars",
     "[| ?a ~= (0::?'a); ?x : keys ?m |]
      ==> ?x : vars (MPoly_Type.monom ?m ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)))
           ))),
    ("ExecutiblePolyProps.insertion_sum_var",
     "insertion ?f (sum ?g {0..<?n}) =
      (SUM i = 0..<?n. insertion ?f (?g i))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)))),
    ("ExecutiblePolyProps.monomials_and_monoms",
     "(?k : monomials ?m) =
      (EX a. a ~= 0 & monomials (MPoly_Type.monom ?k a) <= monomials ?m)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1),
         template_app (template_hole 8, template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("ExecutiblePolyProps.degree_less_iff",
     "(MPoly_Type.degree ?p ?x < ?k) =
      (0 < ?k & (ALL m:monomials ?p. lookup m ?x < ?k))",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 6, template_hole 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           t_empty)))),
    ("ExecutiblePolyProps.coeff_isolate_variable_sparse",
     "MPoly_Type.coeff (isolate_variable_sparse ?p ?var ?deg) ?x =
      (if lookup ?x ?var = 0
       then MPoly_Type.coeff ?p (Poly_Mapping.update ?var ?deg ?x)
       else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_var 2)),
                   template_hole 2)),
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1),
                   template_var 0))),
             template_hole 0)
           ))),
    ("ExecutiblePolyProps.compute_mpoly_to_nested_poly",
     "Polynomial.coeffs (mpoly_to_nested_poly ?mp ?v) =
      (if ?mp = 0 then []
       else map (isolate_variable_sparse ?mp ?v)
             [0..<Suc (MPoly_Type.degree ?mp ?v)])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_hole 7)),
               template_hole 6),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))))
           ))),
    ("ExecutiblePolyProps.degree_ge_iff",
     "0 < ?k ==>
      (?k <= MPoly_Type.degree ?p ?x) =
      (EX m:monomials ?p. ?k <= lookup m ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           t_empty)))),
    ("ExecutiblePolyProps.insertion_sum",
     "ALL n.
         insertion ?f (sum ?g {0..<n}) =
         (SUM i = 0..<n. insertion ?f (?g i))",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("ExecutiblePolyProps.update_eq_plus_monomial",
     "lookup ?m ?k <= ?v ==>
      Poly_Mapping.update ?k ?v ?m = ?m + monomial (?v - lookup ?m ?k) ?k",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1))))))),
    ("ExecutiblePolyProps.not_in_sum_var",
     "ALL i. ?var ~: vars (?f i) ==> ?var ~: vars (sum ?f {0..<?n})",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, t_empty),
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 0))))
               )
           ))),
    ("ExecutiblePolyProps.not_in_sub",
     "[| ?var ~: vars ?p; ?var ~: vars ?q |] ==> ?var ~: vars (?p - ?q)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))
               )
           ))),
    ("ExecutiblePolyProps.not_in_add",
     "[| ?var ~: vars ?p; ?var ~: vars ?q |] ==> ?var ~: vars (?p + ?q)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))
               )
           ))),
    ("ExecutiblePolyProps.not_in_mult",
     "[| ?var ~: vars ?p; ?var ~: vars ?q |] ==> ?var ~: vars (?p * ?q)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 1))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))
               )
           ))),
    ("ExecutiblePolyProps.degree_add_less",
     "[| MPoly_Type.degree ?a ?var < ?x; MPoly_Type.degree ?b ?var < ?x |]
      ==> MPoly_Type.degree (?a + ?b) ?var < ?x",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 1, template_var 3), template_var 2),
          template_var 1),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 1, template_var 0), template_var 2),
          template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 2),
         template_var 1))),
    ("ExecutiblePolyProps.degree_add_leq",
     "[| MPoly_Type.degree ?a ?var <= ?x; MPoly_Type.degree ?b ?var <= ?x |]
      ==> MPoly_Type.degree (?a + ?b) ?var <= ?x",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 3), template_var 2),
          template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 0), template_var 2),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 2),
         template_var 1))),
    ("ExecutiblePolyProps.coeff_mult_Var",
     "MPoly_Type.coeff (?x * Var ?i ^ ?p) ?c =
      (MPoly_Type.coeff ?x (?c - monomial ?p ?i) when ?p <= lookup ?c ?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 3),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 2)),
               template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 8, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("ExecutiblePolyProps.isolate_variable_sparse_mult",
     "isolate_variable_sparse (?p * ?q) ?v ?n =
      (SUM i<=?n.
       isolate_variable_sparse ?p ?v i *
       isolate_variable_sparse ?q ?v (?n - i))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("ExecutiblePolyProps.insertion_isovarspars_free",
     "insertion (nth_default 0 (?L[?var := ?x]))
       (isolate_variable_sparse ?p ?var ?i) =
      insertion (nth_default 0 (?L[?var := ?y]))
       (isolate_variable_sparse ?p ?var ?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4),
               template_var 3))),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 4),
           template_var 1)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4),
               template_var 0))),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 4),
           template_var 1)))),
    ("ExecutiblePolyProps.not_in_sum",
     "ALL i. ?var ~: vars (?f i) ==> ALL n. ?var ~: vars (sum ?f {0..<n})",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("ExecutiblePolyProps.isovarspase_monom",
     "[| ?x ~: keys ?m; ?a ~= 0 |]
      ==> isolate_variable_sparse (MPoly_Type.monom ?m ?a) ?x 0 =
          MPoly_Type.monom ?m ?a",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app (template_hole 6, template_var 1))
                )
            ),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_var 2),
           template_hole 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("ExecutiblePolyProps.coeff_isolate_variable_sparse_minus_monomial",
     "MPoly_Type.coeff (isolate_variable_sparse ?mp ?var ?i)
       (?m - monomial ?i ?var) =
      (if lookup ?m ?var <= ?i
       then MPoly_Type.coeff ?mp (Poly_Mapping.update ?var ?i ?m)
       else (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1))),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 2)),
               template_var 1)),
           template_app
            (template_app (template_hole 8, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0))),
         template_hole 0))),
    ("ExecutiblePolyProps.degree_plus_disjoint",
     "?m ~: monomials ?p ==>
      MPoly_Type.degree (?p + MPoly_Type.monom ?m ?c) ?v =
      max (MPoly_Type.degree ?p ?v)
       (MPoly_Type.degree (MPoly_Type.monom ?m ?c) ?v)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app (template_hole 5, template_var 2))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_var 0))))),
    ("ExecutiblePolyProps.coeff_monom_mult'",
     "?m'm = ?m' + (?m'm - ?m') ==>
      MPoly_Type.coeff (MPoly_Type.monom ?m' ?a * ?q) ?m'm =
      ?a * MPoly_Type.coeff ?q (?m'm - ?m')",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_var 3),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 5, template_var 3),
               template_var 2)))))),
    ("ExecutiblePolyProps.degree_sum_less",
     "ALL i:{0..?n}. MPoly_Type.degree (?f i) ?var < ?x ==>
      MPoly_Type.degree (sum ?f {0..?n}) ?var < ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 3)),
              t_empty)
            )],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 3))),
           template_var 1),
         template_var 0))),
    ("ExecutiblePolyProps.degree_sum",
     "ALL i:{0..?n}. MPoly_Type.degree (?f i) ?var <= ?x ==>
      MPoly_Type.degree (sum ?f {0..?n}) ?var <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 3)),
              t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 3))),
           template_var 1),
         template_var 0))),
    ("ExecutiblePolyProps.lookup_eq_and_update_lemma",
     "(lookup ?m ?var = ?deg & Poly_Mapping.update ?var (0::?'a) ?m = ?x) =
      (?m = Poly_Mapping.update ?var ?deg ?x & lookup ?x ?var = (0::?'a))",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0),
                   template_var 3)),
               template_var 0))
           ),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 2)),
               template_hole 0))
           ))),
    ("ExecutiblePolyProps.isolate_variable_sparse_monom",
     "isolate_variable_sparse (MPoly_Type.monom ?m ?a) ?v ?i =
      (if ?a = (0::?'a) | lookup ?m ?v ~= ?i then 0
       else MPoly_Type.monom (Poly_Mapping.update ?v 0 ?m) ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 2),
                       template_hole 6)),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 3),
                           template_var 1)),
                       template_var 0)))),
               template_hole 2),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 1),
                     template_hole 0),
                   template_var 3)),
               template_var 2))
           ))),
    ("ExecutiblePolyProps.power_both_sides",
     "[| 0 <= ?A; 0 <= ?B |] ==> (?A <= ?B) = (?A\<^sup>2 <= ?B\<^sup>2)",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 1),
        template_inequation (less_equals, template_hole 5, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))))),
    ("ExecutiblePolyProps.degree_mult",
     "[| ?p ~= 0; ?q ~= 0 |]
      ==> MPoly_Type.degree (?p * ?q) ?v =
          MPoly_Type.degree ?p ?v + MPoly_Type.degree ?q ?v",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("ExecutiblePolyProps.degree_mult_leq",
     "[| ?p ~= 0; ?q ~= 0 |]
      ==> MPoly_Type.degree (?p * ?q) ?var
          <= MPoly_Type.degree ?p ?var + MPoly_Type.degree ?q ?var",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("ExecutiblePolyProps.mult_monomials_dir_one",
     "monomials (?p * ?q)
      <= {a + b |a b. a : monomials ?p & b : monomials ?q}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("ExecutiblePolyProps.in_list_induct",
     "[| ?P []; !!x xs. [| x : set ?xs; ?P xs |] ==> ?P (x # xs) |]
      ==> ?P ?xs",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("ExecutiblePolyProps.degree_less_sum",
     "[| MPoly_Type.degree ?p ?var = ?n; MPoly_Type.degree ?q ?var = ?m;
         ?m < ?n |]
      ==> MPoly_Type.degree (?p + ?q) ?var = ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 3),
          template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 3),
          template_var 0),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_var 3),
         template_var 2))),
    ("ExecutiblePolyProps.degree_less_sum'",
     "[| MPoly_Type.degree ?p ?var = ?n; MPoly_Type.degree ?q ?var = ?m;
         ?n < ?m |]
      ==> MPoly_Type.degree (?p + ?q) ?var = ?m",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 4), template_var 3),
          template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 3),
          template_var 0),
        template_inequation (less_than, template_var 2, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_var 3),
         template_var 0))),
    ("ExecutiblePolyProps.notIn_insertion_sub",
     "[| ?x ~: vars ?p; ?x ~: vars ?q |]
      ==> insertion ?f (?p - ?q) = insertion ?f ?p - insertion ?f ?q",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app (template_hole 4, template_var 2))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app (template_hole 4, template_var 1))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("ExecutiblePolyProps.not_contains_insertion",
     "[| ?var ~: vars ?p;
         insertion (nth_default 0 (?L[?var := ?x])) ?p = ?val |]
      ==> insertion (nth_default 0 (?L[?var := ?y])) ?p = ?val",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 5),
                  template_app (template_hole 5, template_var 4))
                )
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 5),
                  template_var 2))),
            template_var 4),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 5),
                 template_var 0))),
           template_var 4),
         template_var 1))),
    ("ExecutiblePolyProps.isolate_variable_sparse_monom_mult",
     "isolate_variable_sparse (MPoly_Type.monom ?m ?a * ?q) ?v ?n =
      (if lookup ?m ?v <= ?n
       then MPoly_Type.monom (Poly_Mapping.update ?v 0 ?m) ?a *
            isolate_variable_sparse ?q ?v (?n - lookup ?m ?v)
       else 0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 4),
                   template_var 3)),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 1),
                       template_hole 2),
                     template_var 4)),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 9, template_var 2),
                 template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 1))))),
         template_hole 0))),
    ("ExecutiblePolyProps.in_list_induct_helper",
     "[| set ?xs <= ?X; ?P [];
         !!x xs. [| x : ?X; ?P xs |] ==> ?P (x # xs) |]
      ==> ?P ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_var 1),
        template_predicate (template_app (template_var 0, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("ExecutiblePolyProps.isolate_variable_spase_zero",
     "[| lookup ?m ?x = 0; insertion ((!) ?L) (MPoly_Type.monom ?m ?a) = 0;
         ?a ~= 0 |]
      ==> insertion ((!) ?L)
           (isolate_variable_sparse (MPoly_Type.monom ?m ?a) ?x 0) =
          0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 3), template_var 2),
          template_hole 7),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1)),
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 0)),
          template_hole 2),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 0)),
               template_var 2),
             template_hole 7)),
         template_hole 2))),
    ("ExecutiblePolyProps.degree_eq_iff",
     "(MPoly_Type.degree ?p ?x = ?k) =
      (if ?k = 0 then ALL m:monomials ?p. lookup m ?x = 0
       else (EX m:monomials ?p. lookup m ?x = ?k) &
            (ALL m:monomials ?p. lookup m ?x <= ?k))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 9, template_var 0),
                   template_hole 6)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 2)),
                 t_empty)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 4, template_var 2)),
                   t_empty)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 2)),
                 t_empty)))
           ))),
    ("ExecutiblePolyProps.normalize_summation",
     "?B ~= 0 ==>
      ((SUM i = 0..<?n + 1. ?f i * ?B ^ (?n - i)) = 0) =
      ((SUM i = 0..<?n + 1. ?f i / ?B ^ i) = 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 10))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 8, t_empty),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1))),
           template_hole 10),
         template_equation
          (template_app
            (template_app (template_hole 8, t_empty),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1))),
           template_hole 10)))),
    ("ExecutiblePolyProps.summation_normalized",
     "?B ~= 0 ==>
      (SUM i = 0..<?n + 1. ?f i * ?B ^ (?n - i)) =
      (SUM i = 0..<?n + 1. ?f i / ?B ^ i) * ?B ^ ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9))],
       template_equation
        (template_app
          (template_app (template_hole 8, t_empty),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 8, t_empty),
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)))),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 0))))),
    ("ExecutiblePolyProps.insertion_add_ind_basecase",
     "insertion ((!) (?L[?var := ?x]))
       (SUM i<=0. isolate_variable_sparse ?p ?var i * Var ?var ^ i) =
      (SUM i = 0..<0 + 1.
       insertion ((!) (?L[?var := ?x]))
        (isolate_variable_sparse ?p ?var i * Var ?var ^ i))",
     template_equation
      (template_app
        (template_app
          (template_hole 13,
           template_app
            (template_hole 12,
             template_app
              (template_app
                (template_app (template_hole 11, template_var 3),
                 template_var 2),
               template_var 1))),
         template_app
          (template_app (template_hole 10, t_empty),
           template_app (template_hole 5, template_hole 4))),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 4),
           template_app
            (template_app (template_hole 1, template_hole 4),
             template_hole 0))))),
    ("ExecutiblePolyProps.express_poly",
     "MPoly_Type.degree ?p ?var = 1 | MPoly_Type.degree ?p ?var = 2 ==>
      ?p =
      isolate_variable_sparse ?p ?var 2 * (Var ?var)\<^sup>2 +
      isolate_variable_sparse ?p ?var 1 * Var ?var +
      isolate_variable_sparse ?p ?var 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 1),
                      template_var 0)),
                  template_hole 10)),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 11, template_var 1),
                    template_var 0)),
                template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_hole 7))))
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_var 1),
                         template_var 0),
                       template_app
                        (template_hole 9,
                         template_app (template_hole 8, template_hole 7)))),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 0)),
                     template_app
                      (template_hole 9,
                       template_app (template_hole 8, template_hole 7))))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0),
                     template_hole 10)),
                 template_app (template_hole 1, template_var 0)))),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0),
             template_hole 0))))),
    ("ExecutiblePolyProps.insertion_add_ind",
     "insertion (nth_default (0::?'a) (?L[?var := ?x]))
       (SUM i<=?d. isolate_variable_sparse ?p ?var i * Var ?var ^ i) =
      (SUM i = 0..<?d + 1.
       insertion (nth_default (0::?'a) (?L[?var := ?x]))
        (isolate_variable_sparse ?p ?var i * Var ?var ^ i))",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, template_hole 12),
             template_app
              (template_app
                (template_app (template_hole 11, template_var 4),
                 template_var 3),
               template_var 2))),
         template_app
          (template_app (template_hole 10, t_empty),
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("ExecutiblePolyProps.sum_over_degree_insertion",
     "[| ?var < length ?L; MPoly_Type.degree ?p ?var = ?d |]
      ==> (SUM i = 0..<?d + 1.
           insertion (nth_default 0 (?L[?var := ?x]))
            (isolate_variable_sparse ?p ?var i) *
           ?x ^ i) =
          insertion (nth_default 0 (?L[?var := ?x])) ?p",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 15, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 13, template_var 2),
            template_var 4),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 11, t_empty),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 4),
                 template_var 0))),
           template_var 2)))),
    ("ExecutiblePolyProps.normalize_summation_less",
     "?B ~= 0 ==>
      ((SUM i = 0..<?n + 1. ?f i * ?B ^ (?n - i)) * ?B ^ (?n mod 2) < 0) =
      ((SUM i = 0..<?n + 1. ?f i / ?B ^ i) < 0)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 15))],
       template_equation
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, t_empty),
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_app
                      (template_app (template_hole 6, template_var 0),
                       template_hole 5)))),
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)))))),
           template_hole 15),
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app (template_hole 11, t_empty),
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 5)))),
           template_hole 15)))),
    ("ExecutiblePolyProps.not_contains_insertion_helper",
     "[| ALL x:keys (mapping_of ?p). ?var ~: keys x;
         !!k f. (k ~: keys f) = (lookup f k = (0::?'c)) |]
      ==> lookup (mapping_of ?p) ?a = (0::?'a) |
          (PROD aa. (if aa < length ?L then ?L[?var := ?y] ! aa
                     else (0::?'d)) ^
                    lookup ?a aa) =
          (PROD aa. (if aa < length ?L then ?L[?var := ?x] ! aa
                     else (0::?'d)) ^
                    lookup ?a aa)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 27,
                template_app
                 (template_hole 26,
                  template_app (template_hole 25, template_var 5))),
              t_empty)
            ),
        template_predicate (template_app (template_hole 21, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app (template_hole 25, template_var 5)),
                     template_var 3)),
                 template_hole 10)),
             template_app
              (template_app
                (template_hole 9, template_app (template_hole 8, t_empty)),
               template_app (template_hole 8, t_empty)))
           )))]
