   [("QuadraticCase.quad_part_2_deg",
     "?var ~: vars ?sq ==>
      MPoly_Type.degree (quadratic_part_2 ?var ?sq ?p) ?var <= 1",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app (template_hole 4, template_var 1))
                )
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 2),
         template_hole 0))),
    ("QuadraticCase.free_in_quad",
     "[| ?var ~: vars ?a; ?var ~: vars ?b; ?var ~: vars ?c;
         ?var ~: vars ?d |]
      ==> freeIn ?var (quadratic_sub ?var ?a ?b ?c ?d ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_app (template_hole 2, template_var 4))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_app (template_hole 2, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_app (template_hole 2, template_var 2))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 5),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("QuadraticCase.free_in_quad_fm",
     "[| ?var ~: vars ?a; ?var ~: vars ?b; ?var ~: vars ?c;
         ?var ~: vars ?d |]
      ==> freeIn ?var (quadratic_sub_fm ?var ?a ?b ?c ?d ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_app (template_hole 2, template_var 4))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_app (template_hole 2, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_app (template_hole 2, template_var 2))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 5),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("QuadraticCase.free_in_quad_fm_helper",
     "[| ?var ~: vars ?a; ?var ~: vars ?b; ?var ~: vars ?c;
         ?var ~: vars ?d |]
      ==> freeIn (?var + ?z)
           (quadratic_sub_fm_helper ?var ?a ?b ?c ?d ?F ?z)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app (template_hole 3, template_var 5))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app (template_hole 3, template_var 4))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app (template_hole 3, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app (template_hole 3, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 1)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 5),
                       template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 0),
               template_var 1))
           ))),
    ("QuadraticCase.sqrt_case",
     "0 <= ?SQ ==>
      ?SQ ^ (?i div 2) * real (?i mod 2) * sqrt ?SQ +
      ?SQ ^ (?i div 2) * (1 - real (?i mod 2)) =
      sqrt ?SQ ^ ?i",
     template_implication
      ([template_inequation
         (less_equals, template_hole 13, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_var 1),
                       template_app
                        (template_app (template_hole 8, template_var 0),
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6, template_hole 5))))),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 0),
                       template_app
                        (template_hole 7,
                         template_app
                          (template_hole 6, template_hole 5)))))),
               template_app (template_hole 2, template_var 1))),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_app
                  (template_app (template_hole 8, template_var 0),
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))))),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))))))),
         template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("QuadraticCase.quad_part_2_eq",
     "[| ?var < length ?L; 0 <= ?SQ; MPoly_Type.degree ?p ?var = ?deg;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?sq = ?SQ |]
      ==> aEval (Eq ?p) (?L[?var := sqrt ?SQ]) =
          aEval (Eq (quadratic_part_2 ?var ?sq ?p)) (?L[?var := sqrt ?SQ])",
     template_implication
      ([template_inequation
         (less_than, template_var 5,
          template_app (template_hole 14, template_var 4)),
        template_inequation (less_equals, template_hole 12, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 2),
            template_var 5),
          template_var 1),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 5),
             template_app (template_hole 1, template_var 3))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 0),
                 template_var 2))),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 5),
             template_app (template_hole 1, template_var 3)))))),
    ("QuadraticCase.quad_part_2_leq",
     "[| ?var < length ?L; 0 <= ?SQ; MPoly_Type.degree ?p ?var = ?deg;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?sq = ?SQ |]
      ==> aEval (Leq ?p) (?L[?var := sqrt ?SQ]) =
          aEval (Leq (quadratic_part_2 ?var ?sq ?p))
           (?L[?var := sqrt ?SQ])",
     template_implication
      ([template_inequation
         (less_than, template_var 5,
          template_app (template_hole 14, template_var 4)),
        template_inequation (less_equals, template_hole 12, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 2),
            template_var 5),
          template_var 1),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 5),
             template_app (template_hole 1, template_var 3))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 0),
                 template_var 2))),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 5),
             template_app (template_hole 1, template_var 3)))))),
    ("QuadraticCase.quad_part_2_less",
     "[| ?var < length ?L; 0 <= ?SQ; MPoly_Type.degree ?p ?var = ?deg;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?sq = ?SQ |]
      ==> aEval (Less ?p) (?L[?var := sqrt ?SQ]) =
          aEval (Less (quadratic_part_2 ?var ?sq ?p))
           (?L[?var := sqrt ?SQ])",
     template_implication
      ([template_inequation
         (less_than, template_var 5,
          template_app (template_hole 14, template_var 4)),
        template_inequation (less_equals, template_hole 12, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 2),
            template_var 5),
          template_var 1),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 5),
             template_app (template_hole 1, template_var 3))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 0),
                 template_var 2))),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 5),
             template_app (template_hole 1, template_var 3)))))),
    ("QuadraticCase.quad_part_2_neq",
     "[| ?var < length ?L; 0 <= ?SQ; MPoly_Type.degree ?p ?var = ?deg;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?sq = ?SQ |]
      ==> aEval (Neq ?p) (?L[?var := sqrt ?SQ]) =
          aEval (Neq (quadratic_part_2 ?var ?sq ?p))
           (?L[?var := sqrt ?SQ])",
     template_implication
      ([template_inequation
         (less_than, template_var 5,
          template_app (template_hole 14, template_var 4)),
        template_inequation (less_equals, template_hole 12, template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 2),
            template_var 5),
          template_var 1),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 5),
             template_app (template_hole 1, template_var 3))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 0),
                 template_var 2))),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 5),
             template_app (template_hole 1, template_var 3)))))),
    ("QuadraticCase.sum_over_sqrt",
     "0 <= ?SQ ==>
      (SUM i = 0..<?n + 1.
       ?f i * ?SQ ^ (i div 2) * real (i mod 2) * sqrt ?SQ +
       ?f i * ?SQ ^ (i div 2) * (1 - real (i mod 2))) =
      (SUM i = 0..<?n + 1. ?f i * sqrt ?SQ ^ i)",
     template_implication
      ([template_inequation
         (less_equals, template_hole 18, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 16, t_empty),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_app
          (template_app (template_hole 16, t_empty),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("QuadraticCase.quad_part_1_eq",
     "[| ?var < length ?L; MPoly_Type.degree ?p ?var = ?deg; ?D ~= 0;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?a = ?A;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?b = ?B;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?d = ?D |]
      ==> aEval (Eq ?p) (?L[?var := (?A + ?B * ?C) / ?D]) =
          aEval (Eq (quadratic_part_1 ?var ?a ?b ?d (Eq ?p)))
           (?L[?var := ?C])",
     template_implication
      ([template_inequation
         (less_than, template_var 10,
          template_app (template_hole 16, template_var 9)),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 8),
            template_var 10),
          template_var 7),
        template_negation
         (template_equation (template_var 6, template_hole 11)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 8)),
           template_app
            (template_app
              (template_app (template_hole 7, template_var 9),
               template_var 10),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0))),
               template_var 6))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 10),
                       template_var 5),
                     template_var 3),
                   template_var 1),
                 template_app (template_hole 4, template_var 8)))),
           template_app
            (template_app
              (template_app (template_hole 7, template_var 9),
               template_var 10),
             template_var 0))))),
    ("QuadraticCase.quad_part_1_leq",
     "[| ?var < length ?L; MPoly_Type.degree ?p ?var = ?deg; ?D ~= 0;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?a = ?A;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?b = ?B;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?d = ?D |]
      ==> aEval (Leq ?p) (?L[?var := (?A + ?B * ?C) / ?D]) =
          aEval (Leq (quadratic_part_1 ?var ?a ?b ?d (Leq ?p)))
           (?L[?var := ?C])",
     template_implication
      ([template_inequation
         (less_than, template_var 10,
          template_app (template_hole 16, template_var 9)),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 8),
            template_var 10),
          template_var 7),
        template_negation
         (template_equation (template_var 6, template_hole 11)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 8)),
           template_app
            (template_app
              (template_app (template_hole 7, template_var 9),
               template_var 10),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0))),
               template_var 6))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 10),
                       template_var 5),
                     template_var 3),
                   template_var 1),
                 template_app (template_hole 4, template_var 8)))),
           template_app
            (template_app
              (template_app (template_hole 7, template_var 9),
               template_var 10),
             template_var 0))))),
    ("QuadraticCase.quad_part_1_less",
     "[| ?var < length ?L; MPoly_Type.degree ?p ?var = ?deg; ?D ~= 0;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?a = ?A;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?b = ?B;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?d = ?D |]
      ==> aEval (Less ?p) (?L[?var := (?A + ?B * ?C) / ?D]) =
          aEval (Less (quadratic_part_1 ?var ?a ?b ?d (Less ?p)))
           (?L[?var := ?C])",
     template_implication
      ([template_inequation
         (less_than, template_var 10,
          template_app (template_hole 16, template_var 9)),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 8),
            template_var 10),
          template_var 7),
        template_negation
         (template_equation (template_var 6, template_hole 11)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 8)),
           template_app
            (template_app
              (template_app (template_hole 7, template_var 9),
               template_var 10),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0))),
               template_var 6))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 10),
                       template_var 5),
                     template_var 3),
                   template_var 1),
                 template_app (template_hole 4, template_var 8)))),
           template_app
            (template_app
              (template_app (template_hole 7, template_var 9),
               template_var 10),
             template_var 0))))),
    ("QuadraticCase.quad_part_1_neq",
     "[| ?var < length ?L; MPoly_Type.degree ?p ?var = ?deg; ?D ~= 0;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?a = ?A;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?b = ?B;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?d = ?D |]
      ==> aEval (Neq ?p) (?L[?var := (?A + ?B * ?C) / ?D]) =
          aEval (Neq (quadratic_part_1 ?var ?a ?b ?d (Neq ?p)))
           (?L[?var := ?C])",
     template_implication
      ([template_inequation
         (less_than, template_var 10,
          template_app (template_hole 16, template_var 9)),
        template_equation
         (template_app
           (template_app (template_hole 14, template_var 8),
            template_var 10),
          template_var 7),
        template_negation
         (template_equation (template_var 6, template_hole 11)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 8)),
           template_app
            (template_app
              (template_app (template_hole 7, template_var 9),
               template_var 10),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0))),
               template_var 6))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 10),
                       template_var 5),
                     template_var 3),
                   template_var 1),
                 template_app (template_hole 4, template_var 8)))),
           template_app
            (template_app
              (template_app (template_hole 7, template_var 9),
               template_var 10),
             template_var 0))))),
    ("QuadraticCase.quad_equality_helper",
     "[| ?var < length ?L; 0 <= ?Cv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?C = ?Cv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?A = ?Av;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?B = ?Bv |]
      ==> aEval (Eq (?A + ?B * Var ?var)) (?L[?var := sqrt ?Cv]) =
          eval
           (And (fm.Atom (Leq (?A * ?B)))
             (fm.Atom (Eq (?A\<^sup>2 - ?B\<^sup>2 * ?C))))
           (?L[?var := sqrt ?Cv])",
     template_implication
      ([template_inequation
         (less_than, template_var 7,
          template_app (template_hole 23, template_var 6)),
        template_inequation (less_equals, template_hole 21, template_var 5),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_var 3),
                 template_app
                  (template_app (template_hole 11, template_var 1),
                   template_app (template_hole 10, template_var 7))))),
           template_app
            (template_app
              (template_app (template_hole 16, template_var 6),
               template_var 7),
             template_app (template_hole 9, template_var 5))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 11, template_var 3),
                       template_var 1)))),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 1, template_hole 0)))),
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app
                          (template_app (template_hole 3, template_var 1),
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_hole 0)))),
                       template_var 4)))))),
           template_app
            (template_app
              (template_app (template_hole 16, template_var 6),
               template_var 7),
             template_app (template_hole 9, template_var 5)))))),
    ("QuadraticCase.quadratic_sub",
     "[| ?var < length ?L; ?Dv ~= 0; 0 <= ?Cv; ?var ~: vars ?c;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?a = ?Av;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?b = ?Bv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?c = ?Cv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?d = ?Dv |]
      ==> aEval ?A (?L[?var := (?Av + ?Bv * sqrt ?Cv) / ?Dv]) =
          eval (quadratic_sub ?var ?a ?b ?c ?d ?A) (?L[?var := sqrt ?Cv])",
     template_implication
      ([template_inequation
         (less_than, template_var 10,
          template_app (template_hole 18, template_var 9)),
        template_negation
         (template_equation (template_var 8, template_hole 15)),
        template_inequation (less_equals, template_hole 15, template_var 7),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 13, template_var 10),
                  template_app (template_hole 12, template_var 6))
                )
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_app
              (template_app (template_hole 8, template_var 9),
               template_var 10),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app (template_hole 2, template_var 7)))),
               template_var 8))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 10),
                       template_var 5),
                     template_var 3),
                   template_var 6),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 8, template_var 9),
               template_var 10),
             template_app (template_hole 2, template_var 7)))))),
    ("QuadraticCase.quadratic_sub_fm",
     "[| ?var < length ?L; ?Dv ~= 0; 0 <= ?Cv; ?var ~: vars ?c;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?a = ?Av;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?b = ?Bv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?c = ?Cv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?d = ?Dv |]
      ==> eval ?F (?L[?var := (?Av + ?Bv * sqrt ?Cv) / ?Dv]) =
          eval (quadratic_sub_fm ?var ?a ?b ?c ?d ?F)
           (?L[?var := sqrt ?Cv])",
     template_implication
      ([template_inequation
         (less_than, template_var 10,
          template_app (template_hole 17, template_var 9)),
        template_negation
         (template_equation (template_var 8, template_hole 14)),
        template_inequation (less_equals, template_hole 14, template_var 7),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 12, template_var 10),
                  template_app (template_hole 11, template_var 6))
                )
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app
              (template_app (template_hole 7, template_var 9),
               template_var 10),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app (template_hole 1, template_var 7)))),
               template_var 8))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 10),
                       template_var 5),
                     template_var 3),
                   template_var 6),
                 template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 7, template_var 9),
               template_var 10),
             template_app (template_hole 1, template_var 7)))))),
    ("QuadraticCase.quadratic_sub_eq",
     "[| ?var < length ?L; ?Dv ~= 0; 0 <= ?Cv; ?var ~: vars ?c;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?a = ?Av;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?b = ?Bv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?c = ?Cv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?d = ?Dv |]
      ==> aEval (Eq ?p) (?L[?var := (?Av + ?Bv * sqrt ?Cv) / ?Dv]) =
          eval (quadratic_sub ?var ?a ?b ?c ?d (Eq ?p))
           (?L[?var := sqrt ?Cv])",
     template_implication
      ([template_inequation
         (less_than, template_var 10,
          template_app (template_hole 19, template_var 9)),
        template_negation
         (template_equation (template_var 8, template_hole 16)),
        template_inequation (less_equals, template_hole 16, template_var 7),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 14, template_var 10),
                  template_app (template_hole 13, template_var 6))
                )
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 9, template_var 9),
               template_var 10),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app (template_hole 2, template_var 7)))),
               template_var 8))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 10),
                       template_var 5),
                     template_var 3),
                   template_var 6),
                 template_var 1),
               template_app (template_hole 6, template_var 0))),
           template_app
            (template_app
              (template_app (template_hole 9, template_var 9),
               template_var 10),
             template_app (template_hole 2, template_var 7)))))),
    ("QuadraticCase.quadratic_sub_leq",
     "[| ?var < length ?L; ?Dv ~= 0; 0 <= ?Cv; ?var ~: vars ?c;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?a = ?Av;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?b = ?Bv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?c = ?Cv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?d = ?Dv |]
      ==> aEval (Leq ?p) (?L[?var := (?Av + ?Bv * sqrt ?Cv) / ?Dv]) =
          eval (quadratic_sub ?var ?a ?b ?c ?d (Leq ?p))
           (?L[?var := sqrt ?Cv])",
     template_implication
      ([template_inequation
         (less_than, template_var 10,
          template_app (template_hole 19, template_var 9)),
        template_negation
         (template_equation (template_var 8, template_hole 16)),
        template_inequation (less_equals, template_hole 16, template_var 7),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 14, template_var 10),
                  template_app (template_hole 13, template_var 6))
                )
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 9, template_var 9),
               template_var 10),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app (template_hole 2, template_var 7)))),
               template_var 8))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 10),
                       template_var 5),
                     template_var 3),
                   template_var 6),
                 template_var 1),
               template_app (template_hole 6, template_var 0))),
           template_app
            (template_app
              (template_app (template_hole 9, template_var 9),
               template_var 10),
             template_app (template_hole 2, template_var 7)))))),
    ("QuadraticCase.quadratic_sub_less",
     "[| ?var < length ?L; ?Dv ~= 0; 0 <= ?Cv; ?var ~: vars ?c;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?a = ?Av;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?b = ?Bv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?c = ?Cv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?d = ?Dv |]
      ==> aEval (Less ?p) (?L[?var := (?Av + ?Bv * sqrt ?Cv) / ?Dv]) =
          eval (quadratic_sub ?var ?a ?b ?c ?d (Less ?p))
           (?L[?var := sqrt ?Cv])",
     template_implication
      ([template_inequation
         (less_than, template_var 10,
          template_app (template_hole 19, template_var 9)),
        template_negation
         (template_equation (template_var 8, template_hole 16)),
        template_inequation (less_equals, template_hole 16, template_var 7),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 14, template_var 10),
                  template_app (template_hole 13, template_var 6))
                )
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 9, template_var 9),
               template_var 10),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app (template_hole 2, template_var 7)))),
               template_var 8))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 10),
                       template_var 5),
                     template_var 3),
                   template_var 6),
                 template_var 1),
               template_app (template_hole 6, template_var 0))),
           template_app
            (template_app
              (template_app (template_hole 9, template_var 9),
               template_var 10),
             template_app (template_hole 2, template_var 7)))))),
    ("QuadraticCase.quadratic_sub_neq",
     "[| ?var < length ?L; ?Dv ~= 0; 0 <= ?Cv; ?var ~: vars ?c;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?a = ?Av;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?b = ?Bv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?c = ?Cv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?d = ?Dv |]
      ==> aEval (Neq ?p) (?L[?var := (?Av + ?Bv * sqrt ?Cv) / ?Dv]) =
          eval (quadratic_sub ?var ?a ?b ?c ?d (Neq ?p))
           (?L[?var := sqrt ?Cv])",
     template_implication
      ([template_inequation
         (less_than, template_var 10,
          template_app (template_hole 19, template_var 9)),
        template_negation
         (template_equation (template_var 8, template_hole 16)),
        template_inequation (less_equals, template_hole 16, template_var 7),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 14, template_var 10),
                  template_app (template_hole 13, template_var 6))
                )
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 9, template_var 9),
               template_var 10),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app (template_hole 2, template_var 7)))),
               template_var 8))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 10),
                       template_var 5),
                     template_var 3),
                   template_var 6),
                 template_var 1),
               template_app (template_hole 6, template_var 0))),
           template_app
            (template_app
              (template_app (template_hole 9, template_var 9),
               template_var 10),
             template_app (template_hole 2, template_var 7)))))),
    ("QuadraticCase.quadratic_sub_leq_helper",
     "[| ?var < length ?L; 0 <= ?Cv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?C = ?Cv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?A = ?Av;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?B = ?Bv |]
      ==> aEval (Leq (?A + ?B * Var ?var)) (?L[?var := sqrt ?Cv]) =
          eval
           (Or (And (fm.Atom (Leq ?A))
                 (fm.Atom (Leq (?B\<^sup>2 * ?C - ?A\<^sup>2))))
             (And (fm.Atom (Leq ?B))
               (fm.Atom (Leq (?A\<^sup>2 - ?B\<^sup>2 * ?C)))))
           (?L[?var := sqrt ?Cv])",
     template_implication
      ([template_inequation
         (less_than, template_var 7,
          template_app (template_hole 23, template_var 6)),
        template_inequation (less_equals, template_hole 21, template_var 5),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_var 3),
                 template_app
                  (template_app (template_hole 11, template_var 1),
                   template_app (template_hole 10, template_var 7))))),
           template_app
            (template_app
              (template_app (template_hole 16, template_var 6),
               template_var 7),
             template_app (template_hole 9, template_var 5))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 13, template_var 3))),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 13,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_hole 11,
                               template_app
                                (template_app
                                  (template_hole 3, template_var 1),
                                 template_app
                                  (template_hole 2,
                                   template_app
                                    (template_hole 1, template_hole 0)))),
                             template_var 4)),
                         template_app
                          (template_app (template_hole 3, template_var 3),
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_hole 0)))))))),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 13, template_var 1))),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 13,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 3),
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_hole 0)))),
                       template_app
                        (template_app
                          (template_hole 11,
                           template_app
                            (template_app (template_hole 3, template_var 1),
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1, template_hole 0)))),
                         template_var 4))))))),
           template_app
            (template_app
              (template_app (template_hole 16, template_var 6),
               template_var 7),
             template_app (template_hole 9, template_var 5)))))),
    ("QuadraticCase.quadratic_sub_less_helper",
     "[| ?var < length ?L; 0 <= ?Cv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?C = ?Cv;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?A = ?Av;
         ALL x. insertion (nth_default 0 (?L[?var := x])) ?B = ?Bv |]
      ==> aEval (Less (?A + ?B * Var ?var)) (?L[?var := sqrt ?Cv]) =
          eval
           (Or (And (fm.Atom (Less ?A))
                 (fm.Atom (Less (?B\<^sup>2 * ?C - ?A\<^sup>2))))
             (And (fm.Atom (Leq ?B))
               (Or (fm.Atom (Less ?A))
                 (fm.Atom (Less (?A\<^sup>2 - ?B\<^sup>2 * ?C))))))
           (?L[?var := sqrt ?Cv])",
     template_implication
      ([template_inequation
         (less_than, template_var 7,
          template_app (template_hole 24, template_var 6)),
        template_inequation (less_equals, template_hole 22, template_var 5),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 21, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 15,
             template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 13, template_var 3),
                 template_app
                  (template_app (template_hole 12, template_var 1),
                   template_app (template_hole 11, template_var 7))))),
           template_app
            (template_app
              (template_app (template_hole 17, template_var 6),
               template_var 7),
             template_app (template_hole 10, template_var 5))),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 14, template_var 3))),
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 14,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_hole 12,
                               template_app
                                (template_app
                                  (template_hole 4, template_var 1),
                                 template_app
                                  (template_hole 3,
                                   template_app
                                    (template_hole 2, template_hole 1)))),
                             template_var 4)),
                         template_app
                          (template_app (template_hole 4, template_var 3),
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_hole 1)))))))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 0, template_var 1))),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 14, template_var 3))),
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 14,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app (template_hole 4, template_var 3),
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 2, template_hole 1)))),
                         template_app
                          (template_app
                            (template_hole 12,
                             template_app
                              (template_app
                                (template_hole 4, template_var 1),
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 2, template_hole 1)))),
                           template_var 4)))))))),
           template_app
            (template_app
              (template_app (template_hole 17, template_var 6),
               template_var 7),
             template_app (template_hole 10, template_var 5)))))),
    ("QuadraticCase.quadratic_sub_fm_helper",
     "[| ?Dv ~= 0; 0 <= ?Cv; ?var ~: vars ?c; ?var + ?z < length ?L;
         ALL x.
            insertion (nth_default 0 ((drop ?z ?L)[?var := x])) ?a = ?Av;
         ALL x.
            insertion (nth_default 0 ((drop ?z ?L)[?var := x])) ?b = ?Bv;
         ALL x.
            insertion (nth_default 0 ((drop ?z ?L)[?var := x])) ?c = ?Cv;
         ALL x.
            insertion (nth_default 0 ((drop ?z ?L)[?var := x])) ?d = ?Dv |]
      ==> eval ?F (?L[?var + ?z := (?Av + ?Bv * sqrt ?Cv) / ?Dv]) =
          eval (quadratic_sub_fm_helper ?var ?a ?b ?c ?d ?F ?z)
           (?L[?var + ?z := sqrt ?Cv])",
     template_implication
      ([template_negation
         (template_equation (template_var 11, template_hole 18)),
        template_inequation
         (less_equals, template_hole 18, template_var 10),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 16, template_var 9),
                  template_app (template_hole 15, template_var 8))
                )
            ),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 13, template_var 9),
            template_var 7),
          template_app (template_hole 12, template_var 6)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app
              (template_app (template_hole 8, template_var 6),
               template_app
                (template_app (template_hole 13, template_var 9),
                 template_var 7)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app (template_hole 1, template_var 10)))),
               template_var 11))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 9),
                         template_var 5),
                       template_var 3),
                     template_var 8),
                   template_var 1),
                 template_var 0),
               template_var 7)),
           template_app
            (template_app
              (template_app (template_hole 8, template_var 6),
               template_app
                (template_app (template_hole 13, template_var 9),
                 template_var 7)),
             template_app (template_hole 1, template_var 10))))))]
