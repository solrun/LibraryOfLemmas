   [("OptimizationProofs.negation_free_nnf", "negation_free (nnf ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("OptimizationProofs.sublist", "sublist (chop ?L) ?L",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)
         )),
    ("OptimizationProofs.insert_Var_Zero", "insertion ?f (Var ?v) = ?f ?v",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("OptimizationProofs.push_forall_negation_free",
     "negation_free ?\<phi> ==> negation_free (push_forall ?\<phi>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("OptimizationProofs.simp_atom_eval",
     "aEval ?a ?xs = eval (simp_atom ?a) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("OptimizationProofs.groupQuantifiers_eval",
     "eval ?F ?L = eval (groupQuantifiers ?F) ?L",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("OptimizationProofs.clearQuantifiers_eval",
     "eval (clearQuantifiers ?\<phi>) ?xs = eval ?\<phi> ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("OptimizationProofs.push_forall_negation_free_all",
     "negation_free ?\<phi> ==> negation_free (push_forall (AllQ ?\<phi>))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("OptimizationProofs.unpower_eval",
     "eval (unpower ?v ?\<phi>) ?L = eval ?\<phi> ?L",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("OptimizationProofs.map_fm_binders_negation_free",
     "negation_free ?\<phi> ==>
      negation_free (map_fm_binders ?f ?\<phi> ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("OptimizationProofs.eval_nnf",
     "ALL \<Gamma>. eval ?\<phi> \<Gamma> = eval (nnf ?\<phi>) \<Gamma>",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("OptimizationProofs.push_forall_eval",
     "ALL xs. eval ?\<phi> xs = eval (push_forall ?\<phi>) xs",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("OptimizationProofs.simpfm_eval",
     "ALL L. eval ?\<phi> L = eval (simpfm ?\<phi>) L",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("OptimizationProofs.push_forall_eval_AllQ",
     "ALL xs.
         eval (AllQ ?\<phi>) xs = eval (push_forall (AllQ ?\<phi>)) xs",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("OptimizationProofs.negation_free_and",
     "[| negation_free ?\<phi>; negation_free ?\<psi> |]
      ==> negation_free (PolyAtoms.and ?\<phi> ?\<psi>)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("OptimizationProofs.negation_free_or",
     "[| negation_free ?\<phi>; negation_free ?\<psi> |]
      ==> negation_free (PolyAtoms.or ?\<phi> ?\<psi>)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("OptimizationProofs.neg_nnf",
     "ALL \<Gamma>.
         (~ eval (nnf (Neg ?\<phi>)) \<Gamma>) =
         eval (nnf ?\<phi>) \<Gamma>",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("OptimizationProofs.sorted",
     "sorted_wrt (%(uu_, i) (uu_, i'). i < i') (to_list ?v ?p)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("OptimizationProofs.compare",
     "(?a, ?b) = chophelper ?L ?L' ==> chop ?L = ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 2))),
    ("OptimizationProofs.to_list_p",
     "?p = (SUM (term, i)<-to_list ?v ?p. term * Var ?v ^ i)",
     template_equation
      (template_var 1,
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("OptimizationProofs.preserve",
     "(?a, ?b) = chophelper ?L ?L' ==> ?a @ ?b = ?L' @ ?L",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("OptimizationProofs.to_list_insertion",
     "insertion ?f ?p =
      (SUM (term, i)<-to_list ?v ?p. insertion ?f term * ?f ?v ^ i)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2), template_var 1),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4, template_app (template_hole 3, t_empty)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("OptimizationProofs.insertion_chop",
     "insertion ?f ?p =
      (SUM (term, i)<-chop (to_list ?v ?p). insertion ?f term * ?f ?v ^ i)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2), template_var 1),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("OptimizationProofs.decreasePower_insertion",
     "decreasePower ?v ?p = (?p', ?i) ==>
      insertion ?f ?p = insertion ?f ?p' * ?f ?v ^ ?i",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 3),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 0, template_var 4)),
             template_var 1))))),
    ("OptimizationProofs.allQ_clearQuantifiers",
     "(!!xs. eval (clearQuantifiers ?\<phi>) xs = eval ?\<phi> xs) ==>
      eval (clearQuantifiers (AllQ ?\<phi>)) ?xs = eval (AllQ ?\<phi>) ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("OptimizationProofs.exQ_clearQuantifiers",
     "(!!xs. eval (clearQuantifiers ?\<phi>) xs = eval ?\<phi> xs) ==>
      eval (clearQuantifiers (ExQ ?\<phi>)) ?xs = eval (ExQ ?\<phi>) ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("OptimizationProofs.to_list_filter",
     "?p =
      (SUM (term,
          i)<-filter (%(x, uu_). x ~= 0)
               (to_list ?v ?p). term * Var ?v ^ i)",
     template_equation
      (template_var 1,
       template_app
        (template_hole 10,
         template_app
          (template_app
            (template_hole 9, template_app (template_hole 8, t_empty)),
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("OptimizationProofs.chopped",
     "(?a, ?b) = chophelper (to_list ?v ?p) [] ==>
      insertion ?f ?p = (SUM (term, i)<-?b. insertion ?f term * ?f ?v ^ i)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 4),
            template_var 3),
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1)),
            template_hole 7))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0), template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_var 3))))),
    ("OptimizationProofs.allzero",
     "[| ALL (p, i):set ?L'. p = 0; (?a, ?b) = chophelper ?L ?L' |]
      ==> ALL (p, i):set ?a. p = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)),
              template_app (template_hole 5, t_empty))
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 2)),
             template_app (template_hole 5, t_empty))
           ))),
    ("OptimizationProofs.move_exp",
     "(?p', ?i) # ?L = chop (to_list ?v ?p) ==>
      insertion ?f ?p =
      (SUM (term,
          d)<-chop (to_list ?v ?p). insertion ?f term * ?f ?v ^ (d - ?i)) *
      ?f ?v ^ ?i",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 5),
                template_var 4)),
            template_var 3),
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, t_empty)),
                 template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 2),
                     template_var 1))))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 0, template_var 2)),
             template_var 4))))),
    ("OptimizationProofs.separate",
     "(?a, ?b) = chophelper (to_list ?v ?p) [] ==>
      insertion ?f ?p =
      (SUM (term, i)<-?a. insertion ?f term * ?f ?v ^ i) +
      (SUM (term, i)<-?b. insertion ?f term * ?f ?v ^ i)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 4),
            template_var 3),
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1)),
            template_hole 8))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, t_empty)),
                 template_var 4))),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_var 3))))))]
