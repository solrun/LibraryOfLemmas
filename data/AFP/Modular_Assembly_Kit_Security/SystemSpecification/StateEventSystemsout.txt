Loading theory "Draft.Prefix" (required by "Draft.StateEventSystemsMoreTemplates" via "Draft.StateEventSystems" via "Draft.EventSystems")
Loading theory "Draft.Projection" (required by "Draft.StateEventSystemsMoreTemplates" via "Draft.StateEventSystems" via "Draft.EventSystems")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.StateEventSystemsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.StateEventSystemsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Prefix"
### 0.045s elapsed time, 0.211s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.StateEventSystemsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.526s cpu time, 0.045s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.StateEventSystemsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.225s elapsed time, 0.870s cpu time, 0.126s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.StateEventSystemsMoreTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. length (snd (snd (snd p)))) <*mlex*>
   (%p. length (fst (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Projection"
### 0.321s elapsed time, 1.284s cpu time, 0.126s GC time
Loading theory "Draft.EventSystems" (required by "Draft.StateEventSystemsMoreTemplates" via "Draft.StateEventSystems")
### theory "HOL-Library.Nat_Bijection"
### 0.331s elapsed time, 1.327s cpu time, 0.126s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.StateEventSystemsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "Draft.EventSystems"
### 0.489s elapsed time, 1.924s cpu time, 0.198s GC time
Loading theory "Draft.StateEventSystems" (required by "Draft.StateEventSystemsMoreTemplates")
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.976s elapsed time, 3.709s cpu time, 0.792s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 28 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>EventSystems.ESrecEES" ("_position" SES))
###   ("_applC" ("_position" E_SES) ("_position" SES)))
### ("\<^const>Pure.eq" ("\<^fixed>SESrecESES" ("_position" SES))
###   ("_applC" ("_position" E_SES) ("_position" SES)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###   ("_applC" ("_position" I_SES) ("_position" SES)))
### ("\<^const>Pure.eq" ("\<^fixed>SESrecISES" ("_position" SES))
###   ("_applC" ("_position" I_SES) ("_position" SES)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>EventSystems.ESrecOES" ("_position" SES))
###   ("_applC" ("_position" O_SES) ("_position" SES)))
### ("\<^const>Pure.eq" ("\<^fixed>SESrecOSES" ("_position" SES))
###   ("_applC" ("_position" O_SES) ("_position" SES)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Ambiguous input (line 57 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###     ("\<^const>EventSystems.ESrecEES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>StateEventSystems.SESrecISES" ("_position" SES))
###     ("\<^const>EventSystems.ESrecEES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###     ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>StateEventSystems.SESrecISES" ("_position" SES))
###     ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 61 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_outputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>EventSystems.ESrecOES" ("_position" SES))
###     ("\<^const>EventSystems.ESrecEES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_outputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES))
###     ("\<^const>EventSystems.ESrecEES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_outputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>EventSystems.ESrecOES" ("_position" SES))
###     ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_outputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES))
###     ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Ambiguous input (line 65 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_outputs_disjoint) ("_position" SES))
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###       ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###     ("\<^const>Set.empty")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_outputs_disjoint) ("_position" SES))
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("\<^const>StateEventSystems.SESrecISES" ("_position" SES))
###       ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###     ("\<^const>Set.empty")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_outputs_disjoint) ("_position" SES))
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###       ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###     ("\<^const>Set.empty")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_outputs_disjoint) ("_position" SES))
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("\<^const>StateEventSystems.SESrecISES" ("_position" SES))
###       ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###     ("\<^const>Set.empty")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 69 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" correct_transition_relation) ("_position" SES))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" x) ("_idts" ("_position" y) ("_position" z)))
###     ("\<^const>HOL.implies"
###       ("\<^const>StateEventSystems.TSESpred" ("_position" x) ("_position" y)
###         ("_position" SES) ("_position" z))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###           ("\<^const>Set.member" ("_position" z)
###             ("\<^const>StateEventSystems.SESrecSSES"
###               ("_position" SES))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" correct_transition_relation) ("_position" SES))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" x) ("_idts" ("_position" y) ("_position" z)))
###     ("\<^const>HOL.implies"
###       ("\<^const>StateEventSystems.TSESpred" ("_position" x) ("_position" y)
###         ("_position" SES) ("_position" z))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###           ("\<^const>Set.member" ("_position" z)
###             ("\<^const>StateEventSystems.SESrecSSES"
###               ("_position" SES))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
consts
  path :: "('s, 'e) SES_rec => 's => 'e list => 's option"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Ambiguous input (line 116 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 8 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>StateEventSystems.SESrecISES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>StateEventSystems.SESrecISES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>EventSystems.ESrecIES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>EventSystems.ESrecIES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>StateEventSystems.SESrecISES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>StateEventSystems.SESrecISES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>EventSystems.ESrecIES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>EventSystems.ESrecIES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Stream"
### 1.145s elapsed time, 4.174s cpu time, 0.859s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.StateEventSystems"
### 0.699s elapsed time, 2.351s cpu time, 0.661s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.945s elapsed time, 5.677s cpu time, 1.001s GC time
Loading theory "Draft.Templates" (required by "Draft.StateEventSystemsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.107s cpu time, 0.044s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.StateEventSystemsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.444s elapsed time, 0.448s cpu time, 0.000s GC time
Loading theory "Draft.StateEventSystemsMoreTemplates"
val templateLemmas =
   [("StateEventSystems.induceES_yields_ES",
     "SES_valid ?SES ==> ES_valid (induceES ?SES)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("StateEventSystems.enabledPrefix",
     "enabled ?SES ?s (?t1.0 @ ?t2.0) ==> enabled ?SES ?s ?t1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("StateEventSystems.enabledPrefixSingle",
     "enabled ?SES ?s (?t @ [?e]) ==> enabled ?SES ?s ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_hole 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("StateEventSystems.none_remains_none",
     "path ?SES ?s ?t = None ==> path ?SES ?s (?t @ [?e]) = None",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2),
            template_var 1),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_hole 3))),
    ("StateEventSystems.enabledPrefixSingleFinalStep",
     "enabled ?SES ?s (?t @ [?e]) ==>
      EX t' t''. t' ?e\<longrightarrow>\<^bsub>?SES\<^esub> t''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_hole 4)))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("StateEventSystems.path_trans",
     "[| ?s1.0 ?l1.0\<Longrightarrow>\<^bsub>?SES\<^esub> ?s2.0;
         ?s2.0 ?l2.0\<Longrightarrow>\<^bsub>?SES\<^esub> ?sn |]
      ==> ?s1.0 (?l1.0 @ ?l2.0)\<Longrightarrow>\<^bsub>?SES\<^esub> ?sn",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 5),
              template_var 4),
            template_var 3),
          template_app (template_hole 1, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 5),
              template_var 2),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("StateEventSystems.path_split",
     "?s1.0 (?t1.0 @ ?t2.0)\<Longrightarrow>\<^bsub>?SES\<^esub> ?sn ==>
      EX s2.
         ?s1.0 ?t1.0\<Longrightarrow>\<^bsub>?SES\<^esub> s2 &
         s2 ?t2.0\<Longrightarrow>\<^bsub>?SES\<^esub> ?sn",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("StateEventSystems.path_trans_single",
     "[| ?s ?t\<Longrightarrow>\<^bsub>?SES\<^esub> ?s';
         ?s' ?e\<longrightarrow>\<^bsub>?SES\<^esub> ?sn |]
      ==> ?s (?t @ [?e])\<Longrightarrow>\<^bsub>?SES\<^esub> ?sn",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 5),
              template_var 4),
            template_var 3),
          template_app (template_hole 4, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 5),
              template_var 2),
            template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_app (template_hole 4, template_var 0)))),
    ("StateEventSystems.path_split_single",
     "?s1.0 (?t @ [?e])\<Longrightarrow>\<^bsub>?SES\<^esub> ?sn ==>
      EX s'.
         ?s1.0 ?t\<Longrightarrow>\<^bsub>?SES\<^esub> s' &
         s' ?e\<longrightarrow>\<^bsub>?SES\<^esub> ?sn",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3),
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4))),
          template_app (template_hole 3, template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("StateEventSystems.path_trans_single_neg",
     "[| ?s1.0 ?t\<Longrightarrow>\<^bsub>?SES\<^esub> ?s2.0;
         T\<^bsub>?SES\<^esub> ?s2.0 ?e ~= Some ?sn |]
      ==> path ?SES ?s1.0 (?t @ [?e]) ~= Some ?sn",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 5),
              template_var 4),
            template_var 3),
          template_app (template_hole 5, template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 2),
                template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 6, template_var 5),
                 template_var 4),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0))),
             template_app (template_hole 5, template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.StateEventSystemsMoreTemplates"
### 0.315s elapsed time, 0.424s cpu time, 0.049s GC time
val it = (): unit
