Loading theory "Draft.Projection" (required by "Draft.ProjectionMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ProjectionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ProjectionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ProjectionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.510s cpu time, 0.050s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ProjectionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.299s elapsed time, 1.192s cpu time, 0.127s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ProjectionMoreTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. length (snd (snd (snd p)))) <*mlex*>
   (%p. length (fst (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Projection"
### 0.324s elapsed time, 1.292s cpu time, 0.127s GC time
### theory "HOL-Library.Nat_Bijection"
### 0.380s elapsed time, 1.463s cpu time, 0.127s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ProjectionMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.715s elapsed time, 2.211s cpu time, 0.218s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.965s elapsed time, 2.785s cpu time, 0.728s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.825s elapsed time, 4.438s cpu time, 0.896s GC time
Loading theory "Draft.Templates" (required by "Draft.ProjectionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.061s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ProjectionMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.464s elapsed time, 0.520s cpu time, 0.069s GC time
Loading theory "Draft.ProjectionMoreTemplates"
val templateLemmas =
   [("Projection.projection_on_empty_trace", "[] \<upharpoonleft> ?X = []",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Projection.projection_to_emptyset_is_empty_trace",
     "?l \<upharpoonleft> {} = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Projection.projection_idempotent",
     "?l \<upharpoonleft> ?X = ?l \<upharpoonleft> ?X \<upharpoonleft> ?X",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Projection.projection_rev_commute",
     "rev (?l \<upharpoonleft> ?X) = rev ?l \<upharpoonleft> ?X",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("Projection.list_subset_iff_projection_neutral",
     "(set ?l <= ?X) = (?l \<upharpoonleft> ?X = ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("Projection.projection_commute",
     "?l \<upharpoonleft> ?X \<upharpoonleft> ?Y =
      ?l \<upharpoonleft> ?Y \<upharpoonleft> ?X",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Projection.projection_sequence",
     "?xs \<upharpoonleft> ?X \<upharpoonleft> ?Y =
      ?xs \<upharpoonleft> (?X Int ?Y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Projection.projection_concatenation_commute",
     "(?l1.0 @ ?l2.0) \<upharpoonleft> ?X =
      ?l1.0 \<upharpoonleft> ?X @ ?l2.0 \<upharpoonleft> ?X",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Projection.projection_empty_implies_absence_of_events",
     "?l \<upharpoonleft> ?X = [] ==> ?X Int set ?l = {}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("Projection.projection_subset_elim",
     "?Y <= ?X ==>
      ?l \<upharpoonleft> ?X \<upharpoonleft> ?Y = ?l \<upharpoonleft> ?Y",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Projection.disjoint_projection",
     "?X Int ?Y = {} ==> ?l \<upharpoonleft> ?X \<upharpoonleft> ?Y = []",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_var 1),
         template_hole 0))),
    ("Projection.projection_on_intersection",
     "?l \<upharpoonleft> ?X = [] ==> ?l \<upharpoonleft> (?X Int ?Y) = []",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Projection.projection_intersection_neutral",
     "set ?l <= ?X ==>
      ?l \<upharpoonleft> (?X Int ?Y) = ?l \<upharpoonleft> ?Y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Projection.projection_on_union",
     "?l \<upharpoonleft> ?Y = [] ==>
      ?l \<upharpoonleft> (?X Un ?Y) = ?l \<upharpoonleft> ?X",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Projection.projection_on_subset",
     "[| ?Y <= ?X; ?l \<upharpoonleft> ?X = [] |]
      ==> ?l \<upharpoonleft> ?Y = []",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 0), template_var 1),
          template_hole 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 2),
         template_hole 0))),
    ("Projection.non_empty_projection_on_subset",
     "?X <= ?Y &
      ?l\<^sub>1 \<upharpoonleft> ?Y = ?l\<^sub>2 \<upharpoonleft> ?Y ==>
      ?l\<^sub>1 \<upharpoonleft> ?X = ?l\<^sub>2 \<upharpoonleft> ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 1),
                    template_var 2)),
                template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 2)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 3)))),
    ("Projection.projection_subset_eq_from_superset_eq",
     "?xs \<upharpoonleft> (?X Un ?Y) = ?ys \<upharpoonleft> (?X Un ?Y) ==>
      ?xs \<upharpoonleft> ?X = ?ys \<upharpoonleft> ?X",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 3),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Projection.projection_on_subset2",
     "[| set ?l <= ?L; ?l \<upharpoonleft> ?X' = []; ?X Int ?L <= ?X' |]
      ==> ?l \<upharpoonleft> ?X = []",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 3),
          template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 1),
          template_hole 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 0), template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 0),
         template_hole 1))),
    ("Projection.projection_split_first",
     "?\<tau> \<upharpoonleft> ?X = ?x # ?xs ==>
      EX \<alpha> \<beta>.
         ?\<tau> = \<alpha> @ [?x] @ \<beta> &
         \<alpha> \<upharpoonleft> ?X = []",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Projection.projection_split_first_with_suffix",
     "?\<tau> \<upharpoonleft> ?X = ?x # ?xs ==>
      EX \<alpha> \<beta>.
         ?\<tau> = \<alpha> @ [?x] @ \<beta> &
         \<alpha> \<upharpoonleft> ?X = [] &
         \<beta> \<upharpoonleft> ?X = ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Projection.projection_split_last",
     "Suc ?n = length (?\<tau> \<upharpoonleft> ?X) ==>
      EX \<beta> x \<alpha>.
         x : ?X &
         ?\<tau> = \<beta> @ [x] @ \<alpha> &
         \<alpha> \<upharpoonleft> ?X = [] &
         ?n = length ((\<beta> @ \<alpha>) \<upharpoonleft> ?X)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 2),
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Projection.merge_property",
     "[| set ?t1.0 <= ?A; set ?t2.0 <= ?B;
         ?t1.0 \<upharpoonleft> ?B = ?t2.0 \<upharpoonleft> ?A |]
      ==> let t = merge ?A ?B ?t1.0 ?t2.0
          in t \<upharpoonleft> ?A = ?t1.0 &
             t \<upharpoonleft> ?B = ?t2.0 &
             set t <= set ?t1.0 Un set ?t2.0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 3),
          template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_var 0),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 0),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0),
                   template_var 3),
                 template_var 1)),
             t_empty)
           ))),
    ("Projection.projection_split_arbitrary_element",
     "[| ?\<tau> \<upharpoonleft> ?X =
         (?\<alpha> @ [?x] @ ?\<beta>) \<upharpoonleft> ?X;
         ?x : ?X |]
      ==> EX \<alpha>' \<beta>'.
             ?\<tau> = \<alpha>' @ [?x] @ \<beta>' &
             \<alpha>' \<upharpoonleft> ?X = ?\<alpha> \<upharpoonleft> ?X &
             \<beta>' \<upharpoonleft> ?X = ?\<beta> \<upharpoonleft> ?X",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 4), template_var 3),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 1),
                      template_hole 3)),
                  template_var 0))),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 3)
            )],
       template_predicate (template_app (template_hole 1, t_empty))))]:
   (string * thm * template) list
### theory "Draft.ProjectionMoreTemplates"
### 0.287s elapsed time, 0.366s cpu time, 0.000s GC time
val it = (): unit
