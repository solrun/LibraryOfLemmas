   [("Projection.projection_on_empty_trace", "[] \<upharpoonleft> ?X = []",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Projection.projection_to_emptyset_is_empty_trace",
     "?l \<upharpoonleft> {} = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Projection.projection_idempotent",
     "?l \<upharpoonleft> ?X = ?l \<upharpoonleft> ?X \<upharpoonleft> ?X",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Projection.projection_rev_commute",
     "rev (?l \<upharpoonleft> ?X) = rev ?l \<upharpoonleft> ?X",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("Projection.list_subset_iff_projection_neutral",
     "(set ?l <= ?X) = (?l \<upharpoonleft> ?X = ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1))),
    ("Projection.projection_commute",
     "?l \<upharpoonleft> ?X \<upharpoonleft> ?Y =
      ?l \<upharpoonleft> ?Y \<upharpoonleft> ?X",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Projection.projection_sequence",
     "?xs \<upharpoonleft> ?X \<upharpoonleft> ?Y =
      ?xs \<upharpoonleft> (?X Int ?Y)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Projection.projection_concatenation_commute",
     "(?l1.0 @ ?l2.0) \<upharpoonleft> ?X =
      ?l1.0 \<upharpoonleft> ?X @ ?l2.0 \<upharpoonleft> ?X",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Projection.projection_empty_implies_absence_of_events",
     "?l \<upharpoonleft> ?X = [] ==> ?X Int set ?l = {}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 1), template_var 0),
          template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("Projection.projection_subset_elim",
     "?Y <= ?X ==>
      ?l \<upharpoonleft> ?X \<upharpoonleft> ?Y = ?l \<upharpoonleft> ?Y",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Projection.disjoint_projection",
     "?X Int ?Y = {} ==> ?l \<upharpoonleft> ?X \<upharpoonleft> ?Y = []",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_var 1),
         template_hole 0))),
    ("Projection.projection_on_intersection",
     "?l \<upharpoonleft> ?X = [] ==> ?l \<upharpoonleft> (?X Int ?Y) = []",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Projection.projection_intersection_neutral",
     "set ?l <= ?X ==>
      ?l \<upharpoonleft> (?X Int ?Y) = ?l \<upharpoonleft> ?Y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Projection.projection_on_union",
     "?l \<upharpoonleft> ?Y = [] ==>
      ?l \<upharpoonleft> (?X Un ?Y) = ?l \<upharpoonleft> ?X",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Projection.projection_on_subset",
     "[| ?Y <= ?X; ?l \<upharpoonleft> ?X = [] |]
      ==> ?l \<upharpoonleft> ?Y = []",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 0), template_var 1),
          template_hole 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 2),
         template_hole 0))),
    ("Projection.non_empty_projection_on_subset",
     "?X <= ?Y &
      ?l\<^sub>1 \<upharpoonleft> ?Y = ?l\<^sub>2 \<upharpoonleft> ?Y ==>
      ?l\<^sub>1 \<upharpoonleft> ?X = ?l\<^sub>2 \<upharpoonleft> ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 1),
                    template_var 2)),
                template_app
                 (template_app (template_hole 0, template_var 0),
                  template_var 2)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 3)))),
    ("Projection.projection_subset_eq_from_superset_eq",
     "?xs \<upharpoonleft> (?X Un ?Y) = ?ys \<upharpoonleft> (?X Un ?Y) ==>
      ?xs \<upharpoonleft> ?X = ?ys \<upharpoonleft> ?X",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 3),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Projection.projection_on_subset2",
     "[| set ?l <= ?L; ?l \<upharpoonleft> ?X' = []; ?X Int ?L <= ?X' |]
      ==> ?l \<upharpoonleft> ?X = []",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 3),
          template_var 2),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 1),
          template_hole 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 0), template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 0),
         template_hole 1))),
    ("Projection.projection_split_first",
     "?\<tau> \<upharpoonleft> ?X = ?x # ?xs ==>
      EX \<alpha> \<beta>.
         ?\<tau> = \<alpha> @ [?x] @ \<beta> &
         \<alpha> \<upharpoonleft> ?X = []",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Projection.projection_split_first_with_suffix",
     "?\<tau> \<upharpoonleft> ?X = ?x # ?xs ==>
      EX \<alpha> \<beta>.
         ?\<tau> = \<alpha> @ [?x] @ \<beta> &
         \<alpha> \<upharpoonleft> ?X = [] &
         \<beta> \<upharpoonleft> ?X = ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Projection.projection_split_last",
     "Suc ?n = length (?\<tau> \<upharpoonleft> ?X) ==>
      EX \<beta> x \<alpha>.
         x : ?X &
         ?\<tau> = \<beta> @ [x] @ \<alpha> &
         \<alpha> \<upharpoonleft> ?X = [] &
         ?n = length ((\<beta> @ \<alpha>) \<upharpoonleft> ?X)",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 2),
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Projection.merge_property",
     "[| set ?t1.0 <= ?A; set ?t2.0 <= ?B;
         ?t1.0 \<upharpoonleft> ?B = ?t2.0 \<upharpoonleft> ?A |]
      ==> let t = merge ?A ?B ?t1.0 ?t2.0
          in t \<upharpoonleft> ?A = ?t1.0 &
             t \<upharpoonleft> ?B = ?t2.0 &
             set t <= set ?t1.0 Un set ?t2.0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 3),
          template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_var 0),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 0),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0),
                   template_var 3),
                 template_var 1)),
             t_empty)
           ))),
    ("Projection.projection_split_arbitrary_element",
     "[| ?\<tau> \<upharpoonleft> ?X =
         (?\<alpha> @ [?x] @ ?\<beta>) \<upharpoonleft> ?X;
         ?x : ?X |]
      ==> EX \<alpha>' \<beta>'.
             ?\<tau> = \<alpha>' @ [?x] @ \<beta>' &
             \<alpha>' \<upharpoonleft> ?X = ?\<alpha> \<upharpoonleft> ?X &
             \<beta>' \<upharpoonleft> ?X = ?\<beta> \<upharpoonleft> ?X",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 4), template_var 3),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 1),
                      template_hole 3)),
                  template_var 0))),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 3)
            )],
       template_predicate (template_app (template_hole 1, t_empty))))]
