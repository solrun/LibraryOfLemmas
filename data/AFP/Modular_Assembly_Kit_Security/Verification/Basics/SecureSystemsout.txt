Loading theory "Draft.Prefix" (required by "Draft.SecureSystemsMoreTemplates" via "Draft.SecureSystems" via "Draft.StateEventSystems" via "Draft.EventSystems")
Loading theory "Draft.Projection" (required by "Draft.SecureSystemsMoreTemplates" via "Draft.SecureSystems" via "Draft.StateEventSystems" via "Draft.EventSystems")
Loading theory "Draft.Views" (required by "Draft.SecureSystemsMoreTemplates" via "Draft.SecureSystems" via "Draft.InformationFlowProperties" via "Draft.BasicSecurityPredicates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SecureSystemsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Prefix"
### 0.049s elapsed time, 0.226s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SecureSystemsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.141s elapsed time, 0.572s cpu time, 0.050s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SecureSystemsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.Views"
### 0.252s elapsed time, 1.019s cpu time, 0.050s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SecureSystemsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
Found termination order:
  "(%p. length (snd (snd (snd p)))) <*mlex*>
   (%p. length (fst (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.228s elapsed time, 0.899s cpu time, 0.090s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SecureSystemsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.337s elapsed time, 1.322s cpu time, 0.140s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SecureSystemsMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Projection"
### 0.394s elapsed time, 1.576s cpu time, 0.140s GC time
Loading theory "Draft.EventSystems" (required by "Draft.SecureSystemsMoreTemplates" via "Draft.SecureSystems" via "Draft.StateEventSystems")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.EventSystems"
### 0.541s elapsed time, 2.131s cpu time, 0.241s GC time
Loading theory "Draft.StateEventSystems" (required by "Draft.SecureSystemsMoreTemplates" via "Draft.SecureSystems")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.BigO"
### 1.079s elapsed time, 4.106s cpu time, 1.006s GC time
Loading theory "Draft.BasicSecurityPredicates" (required by "Draft.SecureSystemsMoreTemplates" via "Draft.SecureSystems" via "Draft.InformationFlowProperties")
### theory "HOL-Library.Stream"
### 1.090s elapsed time, 4.140s cpu time, 1.006s GC time
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 28 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>EventSystems.ESrecEES" ("_position" SES))
###   ("_applC" ("_position" E_SES) ("_position" SES)))
### ("\<^const>Pure.eq" ("\<^fixed>SESrecESES" ("_position" SES))
###   ("_applC" ("_position" E_SES) ("_position" SES)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###   ("_applC" ("_position" I_SES) ("_position" SES)))
### ("\<^const>Pure.eq" ("\<^fixed>SESrecISES" ("_position" SES))
###   ("_applC" ("_position" I_SES) ("_position" SES)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>EventSystems.ESrecOES" ("_position" SES))
###   ("_applC" ("_position" O_SES) ("_position" SES)))
### ("\<^const>Pure.eq" ("\<^fixed>SESrecOSES" ("_position" SES))
###   ("_applC" ("_position" O_SES) ("_position" SES)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###     ("\<^const>EventSystems.ESrecEES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>StateEventSystems.SESrecISES" ("_position" SES))
###     ("\<^const>EventSystems.ESrecEES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###     ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>StateEventSystems.SESrecISES" ("_position" SES))
###     ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 61 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_outputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>EventSystems.ESrecOES" ("_position" SES))
###     ("\<^const>EventSystems.ESrecEES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_outputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES))
###     ("\<^const>EventSystems.ESrecEES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_outputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>EventSystems.ESrecOES" ("_position" SES))
###     ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_outputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES))
###     ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 65 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_outputs_disjoint) ("_position" SES))
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###       ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###     ("\<^const>Set.empty")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_outputs_disjoint) ("_position" SES))
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("\<^const>StateEventSystems.SESrecISES" ("_position" SES))
###       ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###     ("\<^const>Set.empty")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_outputs_disjoint) ("_position" SES))
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###       ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###     ("\<^const>Set.empty")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_outputs_disjoint) ("_position" SES))
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("\<^const>StateEventSystems.SESrecISES" ("_position" SES))
###       ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###     ("\<^const>Set.empty")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 69 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" correct_transition_relation) ("_position" SES))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" x) ("_idts" ("_position" y) ("_position" z)))
###     ("\<^const>HOL.implies"
###       ("\<^const>StateEventSystems.TSESpred" ("_position" x) ("_position" y)
###         ("_position" SES) ("_position" z))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###           ("\<^const>Set.member" ("_position" z)
###             ("\<^const>StateEventSystems.SESrecSSES"
###               ("_position" SES))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" correct_transition_relation) ("_position" SES))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" x) ("_idts" ("_position" y) ("_position" z)))
###     ("\<^const>HOL.implies"
###       ("\<^const>StateEventSystems.TSESpred" ("_position" x) ("_position" y)
###         ("_position" SES) ("_position" z))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###           ("\<^const>Set.member" ("_position" z)
###             ("\<^const>StateEventSystems.SESrecSSES"
###               ("_position" SES))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
consts
  path :: "('s, 'e) SES_rec => 's => 'e list => 's option"
### Ambiguous input (line 116 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 8 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>StateEventSystems.SESrecISES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>StateEventSystems.SESrecISES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>EventSystems.ESrecIES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>EventSystems.ESrecIES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>StateEventSystems.SESrecISES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>StateEventSystems.SESrecISES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>EventSystems.ESrecIES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>EventSystems.ESrecIES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### theory "Draft.StateEventSystems"
### 0.757s elapsed time, 2.643s cpu time, 0.837s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.BasicSecurityPredicates"
### 0.573s elapsed time, 1.466s cpu time, 0.162s GC time
Loading theory "Draft.InformationFlowProperties" (required by "Draft.SecureSystemsMoreTemplates" via "Draft.SecureSystems")
### theory "Draft.InformationFlowProperties"
### 0.033s elapsed time, 0.071s cpu time, 0.000s GC time
Loading theory "Draft.SecureSystems" (required by "Draft.SecureSystemsMoreTemplates")
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 11 of "$AFP/Modular_Assembly_Kit_Security/Verification/Basics/SecureSystems.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" IFP_valid)
###     ("_cargs" ("\<^const>StateEventSystems.SESrecESES" ("_position" ES))
###       ("_position" IFP))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" IFP_valid)
###     ("_cargs" ("\<^const>EventSystems.ESrecEES" ("_position" ES))
###       ("_position" IFP))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale SecureESIFP
  fixes ES :: "'e ES_rec"
    and IFP :: "'e V_rec set * ('e V_rec => 'e list set => bool) set"
  assumes "SecureESIFP ES IFP"
locale SecureESIFP
  fixes ES :: "'e ES_rec"
    and IFP :: "'e V_rec set * ('e V_rec => 'e list set => bool) set"
  assumes "SecureESIFP ES IFP"
### Ambiguous input (line 33 of "$AFP/Modular_Assembly_Kit_Security/Verification/Basics/SecureSystems.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" IFP_valid)
###     ("_cargs" ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))
###       ("_position" IFP))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" IFP_valid)
###     ("_cargs" ("\<^const>EventSystems.ESrecEES" ("_position" SES))
###       ("_position" IFP))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale SecureSESIFP
  fixes SES :: "('s, 'e) SES_rec"
    and IFP :: "'e V_rec set * ('e V_rec => 'e list set => bool) set"
  assumes "SecureSESIFP SES IFP"
locale SecureSESIFP
  fixes SES :: "('s, 'e) SES_rec"
    and IFP :: "'e V_rec set * ('e V_rec => 'e list set => bool) set"
  assumes "SecureSESIFP SES IFP"
### theory "Draft.SecureSystems"
### 0.187s elapsed time, 0.405s cpu time, 0.065s GC time
### theory "HOL-Library.Tree"
### 2.054s elapsed time, 6.620s cpu time, 1.323s GC time
Loading theory "Draft.Templates" (required by "Draft.SecureSystemsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.133s cpu time, 0.059s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SecureSystemsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.453s elapsed time, 0.459s cpu time, 0.000s GC time
Loading theory "Draft.SecureSystemsMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.SecureSystemsMoreTemplates"
### 0.331s elapsed time, 0.450s cpu time, 0.058s GC time
val it = (): unit
