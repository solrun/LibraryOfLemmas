Loading theory "Draft.Projection" (required by "Draft.GeneralizedZippingLemmaMoreTemplates" via "Draft.GeneralizedZippingLemma" via "Draft.CompositionBase" via "Draft.BSPTaxonomy" via "Draft.EventSystems")
Loading theory "Draft.Prefix" (required by "Draft.GeneralizedZippingLemmaMoreTemplates" via "Draft.GeneralizedZippingLemma" via "Draft.CompositionBase" via "Draft.BSPTaxonomy" via "Draft.EventSystems")
Loading theory "Draft.Views" (required by "Draft.GeneralizedZippingLemmaMoreTemplates" via "Draft.GeneralizedZippingLemma" via "Draft.CompositionBase" via "Draft.BSPTaxonomy" via "Draft.BasicSecurityPredicates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.GeneralizedZippingLemmaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Prefix"
### 0.051s elapsed time, 0.230s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.GeneralizedZippingLemmaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.514s cpu time, 0.050s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.GeneralizedZippingLemmaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Views"
### 0.256s elapsed time, 1.038s cpu time, 0.050s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.GeneralizedZippingLemmaMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.817s cpu time, 0.068s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.GeneralizedZippingLemmaMoreTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. length (snd (snd (snd p)))) <*mlex*>
   (%p. length (fst (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Projection"
### 0.366s elapsed time, 1.464s cpu time, 0.118s GC time
Loading theory "Draft.EventSystems" (required by "Draft.GeneralizedZippingLemmaMoreTemplates" via "Draft.GeneralizedZippingLemma" via "Draft.CompositionBase" via "Draft.BSPTaxonomy")
### theory "HOL-Library.Nat_Bijection"
### 0.359s elapsed time, 1.407s cpu time, 0.118s GC time
Loading theory "Draft.BasicSecurityPredicates" (required by "Draft.GeneralizedZippingLemmaMoreTemplates" via "Draft.GeneralizedZippingLemma" via "Draft.CompositionBase" via "Draft.BSPTaxonomy")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
### theory "Draft.EventSystems"
### 0.491s elapsed time, 1.932s cpu time, 0.203s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.GeneralizedZippingLemmaMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.BasicSecurityPredicates"
### 0.623s elapsed time, 2.445s cpu time, 0.293s GC time
Loading theory "Draft.BSPTaxonomy" (required by "Draft.GeneralizedZippingLemmaMoreTemplates" via "Draft.GeneralizedZippingLemma" via "Draft.CompositionBase")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.993s elapsed time, 3.761s cpu time, 0.883s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale BSPTaxonomyDifferentCorrections
  fixes ES :: "'e ES_rec"
    and \<V> :: "'e V_rec"
  assumes "BSPTaxonomyDifferentCorrections ES \<V>"
locale BSPTaxonomyDifferentViews
  fixes ES :: "'e ES_rec"
    and \<V>\<^sub>1 :: "'e V_rec"
    and \<V>\<^sub>2 :: "'e V_rec"
  assumes "BSPTaxonomyDifferentViews ES \<V>\<^sub>1 \<V>\<^sub>2"
locale BSPTaxonomyDifferentViewsFirstDim
  fixes ES :: "'a ES_rec"
    and \<V>\<^sub>1 :: "'a V_rec"
    and \<V>\<^sub>2 :: "'a V_rec"
  assumes "BSPTaxonomyDifferentViewsFirstDim ES \<V>\<^sub>1 \<V>\<^sub>2"
locale BSPTaxonomyDifferentViewsSecondDim
  fixes ES :: "'a ES_rec"
    and \<V>\<^sub>1 :: "'a V_rec"
    and \<V>\<^sub>2 :: "'a V_rec"
  assumes "BSPTaxonomyDifferentViewsSecondDim ES \<V>\<^sub>1 \<V>\<^sub>2"
locale BSPTaxonomyDifferentCorrections
  fixes ES :: "'e ES_rec"
    and \<V> :: "'e V_rec"
  assumes "BSPTaxonomyDifferentCorrections ES \<V>"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale BSPTaxonomyDifferentCorrections
  fixes ES :: "'e ES_rec"
    and \<V> :: "'e V_rec"
  assumes "BSPTaxonomyDifferentCorrections ES \<V>"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
locale BSPTaxonomyDifferentViewsFirstDim
  fixes ES :: "'a ES_rec"
    and \<V>\<^sub>1 :: "'a V_rec"
    and \<V>\<^sub>2 :: "'a V_rec"
  assumes "BSPTaxonomyDifferentViewsFirstDim ES \<V>\<^sub>1 \<V>\<^sub>2"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale BSPTaxonomyDifferentViewsSecondDim
  fixes ES :: "'a ES_rec"
    and \<V>\<^sub>1 :: "'a V_rec"
    and \<V>\<^sub>2 :: "'a V_rec"
  assumes "BSPTaxonomyDifferentViewsSecondDim ES \<V>\<^sub>1 \<V>\<^sub>2"
### theory "Draft.BSPTaxonomy"
### 0.648s elapsed time, 2.079s cpu time, 0.683s GC time
Loading theory "Draft.CompositionBase" (required by "Draft.GeneralizedZippingLemmaMoreTemplates" via "Draft.GeneralizedZippingLemma")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale Compositionality
  fixes ES1 :: "'e ES_rec"
    and ES2 :: "'e ES_rec"
    and \<V> :: "'e V_rec"
    and \<V>1 :: "'e V_rec"
    and \<V>2 :: "'e V_rec"
  assumes "Compositionality ES1 ES2 \<V> \<V>1 \<V>2"
locale Compositionality
  fixes ES1 :: "'e ES_rec"
    and ES2 :: "'e ES_rec"
    and \<V> :: "'e V_rec"
    and \<V>1 :: "'e V_rec"
    and \<V>2 :: "'e V_rec"
  assumes "Compositionality ES1 ES2 \<V> \<V>1 \<V>2"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.CompositionBase"
### 0.113s elapsed time, 0.348s cpu time, 0.064s GC time
Loading theory "Draft.GeneralizedZippingLemma" (required by "Draft.GeneralizedZippingLemmaMoreTemplates")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale Compositionality
  fixes ES1 :: "'e ES_rec"
    and ES2 :: "'e ES_rec"
    and \<V> :: "'e V_rec"
    and \<V>1 :: "'e V_rec"
    and \<V>2 :: "'e V_rec"
  assumes "Compositionality ES1 ES2 \<V> \<V>1 \<V>2"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.117s elapsed time, 3.680s cpu time, 0.923s GC time
### theory "Draft.GeneralizedZippingLemma"
### 0.237s elapsed time, 0.606s cpu time, 0.086s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.052s elapsed time, 6.563s cpu time, 1.229s GC time
Loading theory "Draft.Templates" (required by "Draft.GeneralizedZippingLemmaMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.GeneralizedZippingLemmaMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.456s elapsed time, 0.501s cpu time, 0.055s GC time
Loading theory "Draft.GeneralizedZippingLemmaMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.GeneralizedZippingLemmaMoreTemplates"
### 0.320s elapsed time, 0.440s cpu time, 0.050s GC time
val it = (): unit
