Loading theory "Draft.Prefix" (required by "Draft.UnwindingConditionsMoreTemplates" via "Draft.UnwindingConditions" via "Draft.BSPTaxonomy" via "Draft.EventSystems")
Loading theory "Draft.Projection" (required by "Draft.UnwindingConditionsMoreTemplates" via "Draft.UnwindingConditions" via "Draft.BSPTaxonomy" via "Draft.EventSystems")
Loading theory "Draft.Views" (required by "Draft.UnwindingConditionsMoreTemplates" via "Draft.UnwindingConditions" via "Draft.BSPTaxonomy" via "Draft.BasicSecurityPredicates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.UnwindingConditionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Prefix"
### 0.048s elapsed time, 0.227s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.UnwindingConditionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.502s cpu time, 0.048s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.UnwindingConditionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Views"
### 0.270s elapsed time, 1.089s cpu time, 0.113s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.UnwindingConditionsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order:
  "(%p. length (snd (snd (snd p)))) <*mlex*>
   (%p. length (fst (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Projection"
### 0.309s elapsed time, 1.238s cpu time, 0.113s GC time
Loading theory "Draft.EventSystems" (required by "Draft.UnwindingConditionsMoreTemplates" via "Draft.UnwindingConditions" via "Draft.BSPTaxonomy")
### theory "HOL-Library.Set_Algebras"
### 0.199s elapsed time, 0.789s cpu time, 0.065s GC time
Loading theory "Draft.BasicSecurityPredicates" (required by "Draft.UnwindingConditionsMoreTemplates" via "Draft.UnwindingConditions" via "Draft.BSPTaxonomy")
### theory "HOL-Library.Nat_Bijection"
### 0.303s elapsed time, 1.184s cpu time, 0.113s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.UnwindingConditionsMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
consts
  left :: "'a tree => 'a tree"
### theory "Draft.EventSystems"
### 0.434s elapsed time, 1.710s cpu time, 0.212s GC time
Loading theory "Draft.StateEventSystems" (required by "Draft.UnwindingConditionsMoreTemplates" via "Draft.UnwindingConditions")
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.BasicSecurityPredicates"
### 0.670s elapsed time, 2.547s cpu time, 0.665s GC time
Loading theory "Draft.BSPTaxonomy" (required by "Draft.UnwindingConditionsMoreTemplates" via "Draft.UnwindingConditions")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale BSPTaxonomyDifferentCorrections
  fixes ES :: "'e ES_rec"
    and \<V> :: "'e V_rec"
  assumes "BSPTaxonomyDifferentCorrections ES \<V>"
locale BSPTaxonomyDifferentViews
  fixes ES :: "'e ES_rec"
    and \<V>\<^sub>1 :: "'e V_rec"
    and \<V>\<^sub>2 :: "'e V_rec"
  assumes "BSPTaxonomyDifferentViews ES \<V>\<^sub>1 \<V>\<^sub>2"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale BSPTaxonomyDifferentViewsFirstDim
  fixes ES :: "'a ES_rec"
    and \<V>\<^sub>1 :: "'a V_rec"
    and \<V>\<^sub>2 :: "'a V_rec"
  assumes "BSPTaxonomyDifferentViewsFirstDim ES \<V>\<^sub>1 \<V>\<^sub>2"
### Ambiguous input (line 28 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>EventSystems.ESrecEES" ("_position" SES))
###   ("_applC" ("_position" E_SES) ("_position" SES)))
### ("\<^const>Pure.eq" ("\<^fixed>SESrecESES" ("_position" SES))
###   ("_applC" ("_position" E_SES) ("_position" SES)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 33 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###   ("_applC" ("_position" I_SES) ("_position" SES)))
### ("\<^const>Pure.eq" ("\<^fixed>SESrecISES" ("_position" SES))
###   ("_applC" ("_position" I_SES) ("_position" SES)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale BSPTaxonomyDifferentViewsSecondDim
  fixes ES :: "'a ES_rec"
    and \<V>\<^sub>1 :: "'a V_rec"
    and \<V>\<^sub>2 :: "'a V_rec"
  assumes "BSPTaxonomyDifferentViewsSecondDim ES \<V>\<^sub>1 \<V>\<^sub>2"
locale BSPTaxonomyDifferentCorrections
  fixes ES :: "'e ES_rec"
    and \<V> :: "'e V_rec"
  assumes "BSPTaxonomyDifferentCorrections ES \<V>"
### Ambiguous input (line 38 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>EventSystems.ESrecOES" ("_position" SES))
###   ("_applC" ("_position" O_SES) ("_position" SES)))
### ("\<^const>Pure.eq" ("\<^fixed>SESrecOSES" ("_position" SES))
###   ("_applC" ("_position" O_SES) ("_position" SES)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Ambiguous input (line 57 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###     ("\<^const>EventSystems.ESrecEES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>StateEventSystems.SESrecISES" ("_position" SES))
###     ("\<^const>EventSystems.ESrecEES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###     ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>StateEventSystems.SESrecISES" ("_position" SES))
###     ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 61 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_outputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>EventSystems.ESrecOES" ("_position" SES))
###     ("\<^const>EventSystems.ESrecEES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_outputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES))
###     ("\<^const>EventSystems.ESrecEES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_outputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>EventSystems.ESrecOES" ("_position" SES))
###     ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_outputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES))
###     ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 65 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_outputs_disjoint) ("_position" SES))
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###       ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###     ("\<^const>Set.empty")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_outputs_disjoint) ("_position" SES))
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("\<^const>StateEventSystems.SESrecISES" ("_position" SES))
###       ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###     ("\<^const>Set.empty")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_outputs_disjoint) ("_position" SES))
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###       ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###     ("\<^const>Set.empty")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_outputs_disjoint) ("_position" SES))
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("\<^const>StateEventSystems.SESrecISES" ("_position" SES))
###       ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###     ("\<^const>Set.empty")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Ambiguous input (line 69 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" correct_transition_relation) ("_position" SES))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" x) ("_idts" ("_position" y) ("_position" z)))
###     ("\<^const>HOL.implies"
###       ("\<^const>StateEventSystems.TSESpred" ("_position" x) ("_position" y)
###         ("_position" SES) ("_position" z))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###           ("\<^const>Set.member" ("_position" z)
###             ("\<^const>StateEventSystems.SESrecSSES"
###               ("_position" SES))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" correct_transition_relation) ("_position" SES))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" x) ("_idts" ("_position" y) ("_position" z)))
###     ("\<^const>HOL.implies"
###       ("\<^const>StateEventSystems.TSESpred" ("_position" x) ("_position" y)
###         ("_position" SES) ("_position" z))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###           ("\<^const>Set.member" ("_position" z)
###             ("\<^const>StateEventSystems.SESrecSSES"
###               ("_position" SES))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  path :: "('s, 'e) SES_rec => 's => 'e list => 's option"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.968s elapsed time, 3.714s cpu time, 0.793s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.UnwindingConditionsMoreTemplates" via "Draft.ExtrEqs")
locale BSPTaxonomyDifferentCorrections
  fixes ES :: "'e ES_rec"
    and \<V> :: "'e V_rec"
  assumes "BSPTaxonomyDifferentCorrections ES \<V>"
### Ambiguous input (line 116 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 8 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>StateEventSystems.SESrecISES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>StateEventSystems.SESrecISES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>EventSystems.ESrecIES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>EventSystems.ESrecIES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>StateEventSystems.SESrecISES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>StateEventSystems.SESrecISES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>EventSystems.ESrecIES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>EventSystems.ESrecIES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.StateEventSystems"
### 0.656s elapsed time, 2.485s cpu time, 0.650s GC time
Found termination order: "size <*mlex*> {}"
locale BSPTaxonomyDifferentViewsFirstDim
  fixes ES :: "'a ES_rec"
    and \<V>\<^sub>1 :: "'a V_rec"
    and \<V>\<^sub>2 :: "'a V_rec"
  assumes "BSPTaxonomyDifferentViewsFirstDim ES \<V>\<^sub>1 \<V>\<^sub>2"
locale BSPTaxonomyDifferentViewsSecondDim
  fixes ES :: "'a ES_rec"
    and \<V>\<^sub>1 :: "'a V_rec"
    and \<V>\<^sub>2 :: "'a V_rec"
  assumes "BSPTaxonomyDifferentViewsSecondDim ES \<V>\<^sub>1 \<V>\<^sub>2"
Found termination order: "size <*mlex*> {}"
### theory "Draft.BSPTaxonomy"
### 0.470s elapsed time, 1.770s cpu time, 0.197s GC time
Loading theory "Draft.UnwindingConditions" (required by "Draft.UnwindingConditionsMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 11 of "$AFP/Modular_Assembly_Kit_Security/Verification/Unwinding/UnwindingConditions.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" isViewOn)
###     ("_cargs" ("_position" \<V>)
###       ("\<^const>EventSystems.ESrecEES" ("_position" SES)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" isViewOn)
###     ("_cargs" ("_position" \<V>)
###       ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale Unwinding
  fixes SES :: "('s, 'e) SES_rec"
    and \<V> :: "'e V_rec"
  assumes "Unwinding SES \<V>"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale Unwinding
  fixes SES :: "('s, 'e) SES_rec"
    and \<V> :: "'e V_rec"
  assumes "Unwinding SES \<V>"
### Ambiguous input (line 25 of "$AFP/Modular_Assembly_Kit_Security/Verification/Unwinding/UnwindingConditions.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" osc) ("_position" ur))
###   ("_Ball" ("_position" s1)
###     ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES))
###     ("_Ball" ("_position" s1')
###       ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES))
###       ("_Ball" ("_position" s2')
###         ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES))
###         ("_Ball" ("_position" e)
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))
###             ("\<^const>Views.VrecC" ("_position" \<V>)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" reachable)
###                 ("_cargs" ("_position" SES) ("_position" s1)))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" reachable)
###                   ("_cargs" ("_position" SES) ("_position" s1')))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>StateEventSystems.TSESpred" ("_position" s1')
###                     ("_position" e) ("_position" SES) ("_position" s2'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" s1')
###                       ("_tuple_arg" ("_position" s1)))
###                     ("_position" ur)))))
###             ("_Bex" ("_position" s2)
###               ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES))
###               ("\<^const>HOL.Ex_binder" ("_position" \<delta>)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("\<^const>Projection.projection" ("_position" \<delta>)
###                       ("\<^const>Views.VrecC" ("_position" \<V>)))
###                     ("\<^const>List.list.Nil"))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("\<^const>Projection.projection"
###                         ("_position" \<delta>)
###                         ("\<^const>Views.VrecV" ("_position" \<V>)))
###                       ("\<^const>Projection.projection"
###                         ("_list" ("_position" e))
###                         ("\<^const>Views.VrecV" ("_position" \<V>))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>StateEventSystems.pathpred"
###                         ("_position" s1) ("_position" \<delta>)
###                         ("_position" SES) ("_position" s2))
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" s2')
###                           ("_tuple_arg" ("_position" s2)))
###                         ("_position" ur)))))))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" osc) ("_position" ur))
###   ("_Ball" ("_position" s1)
###     ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES))
###     ("_Ball" ("_position" s1')
###       ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES))
###       ("_Ball" ("_position" s2')
###         ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES))
###         ("_Ball" ("_position" e)
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>EventSystems.ESrecEES" ("_position" SES))
###             ("\<^const>Views.VrecC" ("_position" \<V>)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" reachable)
###                 ("_cargs" ("_position" SES) ("_position" s1)))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" reachable)
###                   ("_cargs" ("_position" SES) ("_position" s1')))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>StateEventSystems.TSESpred" ("_position" s1')
###                     ("_position" e) ("_position" SES) ("_position" s2'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" s1')
###                       ("_tuple_arg" ("_position" s1)))
###                     ("_position" ur)))))
###             ("_Bex" ("_position" s2)
###               ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES))
###               ("\<^const>HOL.Ex_binder" ("_position" \<delta>)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("\<^const>Projection.projection" ("_position" \<delta>)
###                       ("\<^const>Views.VrecC" ("_position" \<V>)))
###                     ("\<^const>List.list.Nil"))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("\<^const>Projection.projection"
###                         ("_position" \<delta>)
###                         ("\<^const>Views.VrecV" ("_position" \<V>)))
###                       ("\<^const>Projection.projection"
###                         ("_list" ("_position" e))
###                         ("\<^const>Views.VrecV" ("_position" \<V>))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>StateEventSystems.pathpred"
###                         ("_position" s1) ("_position" \<delta>)
###                         ("_position" SES) ("_position" s2))
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" s2')
###                           ("_tuple_arg" ("_position" s2)))
###                         ("_position" ur)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### theory "Draft.UnwindingConditions"
### 0.296s elapsed time, 0.899s cpu time, 0.060s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.776s elapsed time, 2.143s cpu time, 0.240s GC time
### theory "HOL-Library.Tree"
### 1.930s elapsed time, 6.336s cpu time, 1.033s GC time
Loading theory "Draft.Templates" (required by "Draft.UnwindingConditionsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.114s cpu time, 0.046s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.UnwindingConditionsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.454s elapsed time, 0.460s cpu time, 0.000s GC time
Loading theory "Draft.UnwindingConditionsMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.UnwindingConditionsMoreTemplates"
### 0.323s elapsed time, 0.425s cpu time, 0.043s GC time
val it = (): unit
