Loading theory "Draft.Prefix" (required by "Draft.AuxiliaryLemmasMoreTemplates" via "Draft.AuxiliaryLemmas" via "Draft.UnwindingConditions" via "Draft.BSPTaxonomy" via "Draft.EventSystems")
Loading theory "Draft.Views" (required by "Draft.AuxiliaryLemmasMoreTemplates" via "Draft.AuxiliaryLemmas" via "Draft.UnwindingConditions" via "Draft.BSPTaxonomy" via "Draft.BasicSecurityPredicates")
Loading theory "Draft.Projection" (required by "Draft.AuxiliaryLemmasMoreTemplates" via "Draft.AuxiliaryLemmas" via "Draft.UnwindingConditions" via "Draft.BSPTaxonomy" via "Draft.EventSystems")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AuxiliaryLemmasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Prefix"
### 0.055s elapsed time, 0.245s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AuxiliaryLemmasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.148s elapsed time, 0.600s cpu time, 0.056s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AuxiliaryLemmasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.Views"
### 0.249s elapsed time, 1.004s cpu time, 0.056s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AuxiliaryLemmasMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
Found termination order:
  "(%p. length (snd (snd (snd p)))) <*mlex*>
   (%p. length (fst (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Projection"
### 0.319s elapsed time, 1.273s cpu time, 0.122s GC time
Loading theory "Draft.EventSystems" (required by "Draft.AuxiliaryLemmasMoreTemplates" via "Draft.AuxiliaryLemmas" via "Draft.UnwindingConditions" via "Draft.BSPTaxonomy")
### theory "HOL-Library.Set_Algebras"
### 0.198s elapsed time, 0.788s cpu time, 0.066s GC time
Loading theory "Draft.BasicSecurityPredicates" (required by "Draft.AuxiliaryLemmasMoreTemplates" via "Draft.AuxiliaryLemmas" via "Draft.UnwindingConditions" via "Draft.BSPTaxonomy")
### theory "HOL-Library.Nat_Bijection"
### 0.322s elapsed time, 1.263s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AuxiliaryLemmasMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "Draft.EventSystems"
### 0.494s elapsed time, 1.944s cpu time, 0.214s GC time
Loading theory "Draft.StateEventSystems" (required by "Draft.AuxiliaryLemmasMoreTemplates" via "Draft.AuxiliaryLemmas" via "Draft.UnwindingConditions")
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "Draft.BasicSecurityPredicates"
### 0.783s elapsed time, 2.945s cpu time, 0.733s GC time
Loading theory "Draft.BSPTaxonomy" (required by "Draft.AuxiliaryLemmasMoreTemplates" via "Draft.AuxiliaryLemmas" via "Draft.UnwindingConditions")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale BSPTaxonomyDifferentCorrections
  fixes ES :: "'e ES_rec"
    and \<V> :: "'e V_rec"
  assumes "BSPTaxonomyDifferentCorrections ES \<V>"
locale BSPTaxonomyDifferentViews
  fixes ES :: "'e ES_rec"
    and \<V>\<^sub>1 :: "'e V_rec"
    and \<V>\<^sub>2 :: "'e V_rec"
  assumes "BSPTaxonomyDifferentViews ES \<V>\<^sub>1 \<V>\<^sub>2"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale BSPTaxonomyDifferentViewsFirstDim
  fixes ES :: "'a ES_rec"
    and \<V>\<^sub>1 :: "'a V_rec"
    and \<V>\<^sub>2 :: "'a V_rec"
  assumes "BSPTaxonomyDifferentViewsFirstDim ES \<V>\<^sub>1 \<V>\<^sub>2"
locale BSPTaxonomyDifferentViewsSecondDim
  fixes ES :: "'a ES_rec"
    and \<V>\<^sub>1 :: "'a V_rec"
    and \<V>\<^sub>2 :: "'a V_rec"
  assumes "BSPTaxonomyDifferentViewsSecondDim ES \<V>\<^sub>1 \<V>\<^sub>2"
### Ambiguous input (line 28 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>EventSystems.ESrecEES" ("_position" SES))
###   ("_applC" ("_position" E_SES) ("_position" SES)))
### ("\<^const>Pure.eq" ("\<^fixed>SESrecESES" ("_position" SES))
###   ("_applC" ("_position" E_SES) ("_position" SES)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale BSPTaxonomyDifferentCorrections
  fixes ES :: "'e ES_rec"
    and \<V> :: "'e V_rec"
  assumes "BSPTaxonomyDifferentCorrections ES \<V>"
### Ambiguous input (line 33 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###   ("_applC" ("_position" I_SES) ("_position" SES)))
### ("\<^const>Pure.eq" ("\<^fixed>SESrecISES" ("_position" SES))
###   ("_applC" ("_position" I_SES) ("_position" SES)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 38 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>EventSystems.ESrecOES" ("_position" SES))
###   ("_applC" ("_position" O_SES) ("_position" SES)))
### ("\<^const>Pure.eq" ("\<^fixed>SESrecOSES" ("_position" SES))
###   ("_applC" ("_position" O_SES) ("_position" SES)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Ambiguous input (line 57 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###     ("\<^const>EventSystems.ESrecEES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>StateEventSystems.SESrecISES" ("_position" SES))
###     ("\<^const>EventSystems.ESrecEES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###     ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>StateEventSystems.SESrecISES" ("_position" SES))
###     ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 61 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_outputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>EventSystems.ESrecOES" ("_position" SES))
###     ("\<^const>EventSystems.ESrecEES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_outputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES))
###     ("\<^const>EventSystems.ESrecEES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_outputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>EventSystems.ESrecOES" ("_position" SES))
###     ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_outputs_are_events) ("_position" SES))
###   ("\<^const>Set.subset_eq"
###     ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES))
###     ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 65 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_outputs_disjoint) ("_position" SES))
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###       ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###     ("\<^const>Set.empty")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_outputs_disjoint) ("_position" SES))
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("\<^const>StateEventSystems.SESrecISES" ("_position" SES))
###       ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###     ("\<^const>Set.empty")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_outputs_disjoint) ("_position" SES))
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("\<^const>EventSystems.ESrecIES" ("_position" SES))
###       ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###     ("\<^const>Set.empty")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ses_inputs_outputs_disjoint) ("_position" SES))
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("\<^const>StateEventSystems.SESrecISES" ("_position" SES))
###       ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###     ("\<^const>Set.empty")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 69 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" correct_transition_relation) ("_position" SES))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" x) ("_idts" ("_position" y) ("_position" z)))
###     ("\<^const>HOL.implies"
###       ("\<^const>StateEventSystems.TSESpred" ("_position" x) ("_position" y)
###         ("_position" SES) ("_position" z))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###           ("\<^const>Set.member" ("_position" z)
###             ("\<^const>StateEventSystems.SESrecSSES"
###               ("_position" SES))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" correct_transition_relation) ("_position" SES))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" x) ("_idts" ("_position" y) ("_position" z)))
###     ("\<^const>HOL.implies"
###       ("\<^const>StateEventSystems.TSESpred" ("_position" x) ("_position" y)
###         ("_position" SES) ("_position" z))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###           ("\<^const>Set.member" ("_position" z)
###             ("\<^const>StateEventSystems.SESrecSSES"
###               ("_position" SES))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
consts
  path :: "('s, 'e) SES_rec => 's => 'e list => 's option"
### theory "HOL-Library.Stream"
### 1.137s elapsed time, 4.323s cpu time, 0.942s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AuxiliaryLemmasMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 116 of "$AFP/Modular_Assembly_Kit_Security/SystemSpecification/StateEventSystems.thy") produces 8 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>StateEventSystems.SESrecISES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>StateEventSystems.SESrecISES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>EventSystems.ESrecIES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>EventSystems.ESrecIES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>StateEventSystems.SESrecOSES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>StateEventSystems.SESrecISES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>StateEventSystems.SESrecISES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>EventSystems.ESrecIES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" induceES) ("_position" SES))
###   ("_record"
###     ("_fields"
###       ("_field" ("_constify" E_ES)
###         ("\<^const>EventSystems.ESrecEES" ("_position" SES)))
###       ("_fields"
###         ("_field" ("_constify" I_ES)
###           ("\<^const>EventSystems.ESrecIES" ("_position" SES)))
###         ("_fields"
###           ("_field" ("_constify" O_ES)
###             ("\<^const>EventSystems.ESrecOES" ("_position" SES)))
###           ("_field" ("_constify" Tr_ES)
###             ("_applC" ("_position" possible_traces) ("_position" SES))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale BSPTaxonomyDifferentCorrections
  fixes ES :: "'e ES_rec"
    and \<V> :: "'e V_rec"
  assumes "BSPTaxonomyDifferentCorrections ES \<V>"
Found termination order: "size <*mlex*> {}"
### theory "Draft.StateEventSystems"
### 0.751s elapsed time, 2.807s cpu time, 0.728s GC time
Found termination order: "size <*mlex*> {}"
locale BSPTaxonomyDifferentViewsFirstDim
  fixes ES :: "'a ES_rec"
    and \<V>\<^sub>1 :: "'a V_rec"
    and \<V>\<^sub>2 :: "'a V_rec"
  assumes "BSPTaxonomyDifferentViewsFirstDim ES \<V>\<^sub>1 \<V>\<^sub>2"
locale BSPTaxonomyDifferentViewsSecondDim
  fixes ES :: "'a ES_rec"
    and \<V>\<^sub>1 :: "'a V_rec"
    and \<V>\<^sub>2 :: "'a V_rec"
  assumes "BSPTaxonomyDifferentViewsSecondDim ES \<V>\<^sub>1 \<V>\<^sub>2"
Found termination order: "size <*mlex*> {}"
### theory "Draft.BSPTaxonomy"
### 0.510s elapsed time, 1.919s cpu time, 0.144s GC time
Loading theory "Draft.UnwindingConditions" (required by "Draft.AuxiliaryLemmasMoreTemplates" via "Draft.AuxiliaryLemmas")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 11 of "$AFP/Modular_Assembly_Kit_Security/Verification/Unwinding/UnwindingConditions.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" isViewOn)
###     ("_cargs" ("_position" \<V>)
###       ("\<^const>EventSystems.ESrecEES" ("_position" SES)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" isViewOn)
###     ("_cargs" ("_position" \<V>)
###       ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
locale Unwinding
  fixes SES :: "('s, 'e) SES_rec"
    and \<V> :: "'e V_rec"
  assumes "Unwinding SES \<V>"
locale Unwinding
  fixes SES :: "('s, 'e) SES_rec"
    and \<V> :: "'e V_rec"
  assumes "Unwinding SES \<V>"
### Ambiguous input (line 25 of "$AFP/Modular_Assembly_Kit_Security/Verification/Unwinding/UnwindingConditions.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" osc) ("_position" ur))
###   ("_Ball" ("_position" s1)
###     ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES))
###     ("_Ball" ("_position" s1')
###       ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES))
###       ("_Ball" ("_position" s2')
###         ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES))
###         ("_Ball" ("_position" e)
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>StateEventSystems.SESrecESES" ("_position" SES))
###             ("\<^const>Views.VrecC" ("_position" \<V>)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" reachable)
###                 ("_cargs" ("_position" SES) ("_position" s1)))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" reachable)
###                   ("_cargs" ("_position" SES) ("_position" s1')))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>StateEventSystems.TSESpred" ("_position" s1')
###                     ("_position" e) ("_position" SES) ("_position" s2'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" s1')
###                       ("_tuple_arg" ("_position" s1)))
###                     ("_position" ur)))))
###             ("_Bex" ("_position" s2)
###               ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES))
###               ("\<^const>HOL.Ex_binder" ("_position" \<delta>)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("\<^const>Projection.projection" ("_position" \<delta>)
###                       ("\<^const>Views.VrecC" ("_position" \<V>)))
###                     ("\<^const>List.list.Nil"))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("\<^const>Projection.projection"
###                         ("_position" \<delta>)
###                         ("\<^const>Views.VrecV" ("_position" \<V>)))
###                       ("\<^const>Projection.projection"
###                         ("_list" ("_position" e))
###                         ("\<^const>Views.VrecV" ("_position" \<V>))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>StateEventSystems.pathpred"
###                         ("_position" s1) ("_position" \<delta>)
###                         ("_position" SES) ("_position" s2))
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" s2')
###                           ("_tuple_arg" ("_position" s2)))
###                         ("_position" ur)))))))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" osc) ("_position" ur))
###   ("_Ball" ("_position" s1)
###     ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES))
###     ("_Ball" ("_position" s1')
###       ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES))
###       ("_Ball" ("_position" s2')
###         ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES))
###         ("_Ball" ("_position" e)
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>EventSystems.ESrecEES" ("_position" SES))
###             ("\<^const>Views.VrecC" ("_position" \<V>)))
###           ("\<^const>HOL.implies"
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" reachable)
###                 ("_cargs" ("_position" SES) ("_position" s1)))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" reachable)
###                   ("_cargs" ("_position" SES) ("_position" s1')))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>StateEventSystems.TSESpred" ("_position" s1')
###                     ("_position" e) ("_position" SES) ("_position" s2'))
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" s1')
###                       ("_tuple_arg" ("_position" s1)))
###                     ("_position" ur)))))
###             ("_Bex" ("_position" s2)
###               ("\<^const>StateEventSystems.SESrecSSES" ("_position" SES))
###               ("\<^const>HOL.Ex_binder" ("_position" \<delta>)
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("\<^const>Projection.projection" ("_position" \<delta>)
###                       ("\<^const>Views.VrecC" ("_position" \<V>)))
###                     ("\<^const>List.list.Nil"))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("\<^const>Projection.projection"
###                         ("_position" \<delta>)
###                         ("\<^const>Views.VrecV" ("_position" \<V>)))
###                       ("\<^const>Projection.projection"
###                         ("_list" ("_position" e))
###                         ("\<^const>Views.VrecV" ("_position" \<V>))))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>StateEventSystems.pathpred"
###                         ("_position" s1) ("_position" \<delta>)
###                         ("_position" SES) ("_position" s2))
###                       ("\<^const>Set.member"
###                         ("_tuple" ("_position" s2')
###                           ("_tuple_arg" ("_position" s2)))
###                         ("_position" ur)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.UnwindingConditions"
### 0.307s elapsed time, 0.936s cpu time, 0.134s GC time
Loading theory "Draft.AuxiliaryLemmas" (required by "Draft.AuxiliaryLemmasMoreTemplates")
locale Unwinding
  fixes SES :: "('s, 'e) SES_rec"
    and \<V> :: "'e V_rec"
  assumes "Unwinding SES \<V>"
### Ambiguous input (line 280 of "$AFP/Modular_Assembly_Kit_Security/Verification/Unwinding/AuxiliaryLemmas.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" isViewOn)
###     ("_cargs"
###       ("_record"
###         ("_fields"
###           ("_field" ("_constify" V)
###             ("\<^const>Set.union"
###               ("\<^const>Views.VrecV" ("_position" \<V>))
###               ("\<^const>Views.VrecN" ("_position" \<V>))))
###           ("_fields" ("_field" ("_constify" N) ("\<^const>Set.empty"))
###             ("_field" ("_constify" C)
###               ("\<^const>Views.VrecC" ("_position" \<V>))))))
###       ("\<^const>EventSystems.ESrecEES" ("_position" SES)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" isViewOn)
###     ("_cargs"
###       ("_record"
###         ("_fields"
###           ("_field" ("_constify" V)
###             ("\<^const>Set.union"
###               ("\<^const>Views.VrecV" ("_position" \<V>))
###               ("\<^const>Views.VrecN" ("_position" \<V>))))
###           ("_fields" ("_field" ("_constify" N) ("\<^const>Set.empty"))
###             ("_field" ("_constify" C)
###               ("\<^const>Views.VrecC" ("_position" \<V>))))))
###       ("\<^const>StateEventSystems.SESrecESES" ("_position" SES)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.AuxiliaryLemmas"
### 0.071s elapsed time, 0.215s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.766s elapsed time, 2.165s cpu time, 0.189s GC time
### theory "HOL-Library.Tree"
### 2.095s elapsed time, 7.122s cpu time, 1.196s GC time
Loading theory "Draft.Templates" (required by "Draft.AuxiliaryLemmasMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.075s elapsed time, 0.141s cpu time, 0.062s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AuxiliaryLemmasMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.452s elapsed time, 0.458s cpu time, 0.000s GC time
Loading theory "Draft.AuxiliaryLemmasMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.AuxiliaryLemmasMoreTemplates"
### 0.580s elapsed time, 1.219s cpu time, 0.756s GC time
val it = (): unit
