Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "Polynomial_Interpolation.Ring_Hom_Poly" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "HOL-Combinatorics.Multiset_Permutations" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Polynomial_Factorization.Missing_List" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras" via "HOL-Library.Multiset")
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.076s elapsed time, 0.327s cpu time, 0.012s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Polynomial_Factorization.Missing_List")
### theory "HOL-Library.Monad_Syntax"
### 0.032s elapsed time, 0.126s cpu time, 0.000s GC time
Loading theory "HOL-Library.Fun_Lexorder" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
### theory "HOL-Combinatorics.Transposition"
### 0.130s elapsed time, 0.540s cpu time, 0.012s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras" via "Card_Partitions.Set_Partition" via "HOL-Library.Disjoint_Sets")
### theory "HOL-Library.Fun_Lexorder"
### 0.043s elapsed time, 0.175s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.105s elapsed time, 0.416s cpu time, 0.038s GC time
Loading theory "HOL-Library.Groups_Big_Fun" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
locale comm_monoid_fun
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fun (\<^bold>*) \<^bold>1"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.423s elapsed time, 1.692s cpu time, 0.111s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### Cannot skip proof of schematic goal statement
### theory "HOL-Library.Groups_Big_Fun"
### 0.258s elapsed time, 0.997s cpu time, 0.137s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "HOL-Library.Ramsey")
### theory "HOL-Library.FuncSet"
### 0.387s elapsed time, 1.489s cpu time, 0.175s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
consts
  enumerate :: "'a set => nat => 'a"
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Computational_Algebra.Fraction_Field"
### 0.930s elapsed time, 3.570s cpu time, 0.549s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras" via "Card_Partitions.Set_Partition")
### theory "HOL-Library.Infinite_Set"
### 0.433s elapsed time, 1.619s cpu time, 0.363s GC time
Loading theory "Abstract-Rewriting.Seq" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
locale infinitely_many
  fixes p :: "nat => bool"
  assumes "infinitely_many p"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
Found termination order: "size <*mlex*> {}"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### theory "HOL-Library.Disjoint_Sets"
### 0.320s elapsed time, 1.253s cpu time, 0.146s GC time
Loading theory "Card_Partitions.Set_Partition" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Algebra.Congruence"
### 0.827s elapsed time, 3.163s cpu time, 0.586s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
### theory "Abstract-Rewriting.Seq"
### 0.404s elapsed time, 1.581s cpu time, 0.223s GC time
Loading theory "HOL-Library.Ramsey" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
### theory "Card_Partitions.Set_Partition"
### 0.160s elapsed time, 0.631s cpu time, 0.077s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
### theory "HOL-Library.More_List"
### 0.397s elapsed time, 1.449s cpu time, 0.775s GC time
Loading theory "HOL-Library.Poly_Mapping" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type")
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  choice :: "('a => bool) => ('a * 'a) set => nat => 'a"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### theory "HOL-Library.Ramsey"
### 0.658s elapsed time, 2.483s cpu time, 0.827s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
class zero = type +
  fixes zero :: "'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
consts
  mset :: "'a list => 'a multiset"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size_list size <*mlex*> {}"
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
### theory "HOL-Library.Nat_Bijection"
### 0.353s elapsed time, 1.388s cpu time, 0.166s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.ExtrEqs")
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
instantiation
  poly_mapping :: (type, zero) zero
  zero_poly_mapping == zero_class.zero :: 'a \<Rightarrow>\<^sub>0 'b
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
instantiation
  poly_mapping :: (type, monoid_add) monoid_add
  plus_poly_mapping == plus ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
instantiation
  poly_mapping :: (type, cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly_mapping == minus ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
### theory "HOL-Algebra.Order"
### 1.190s elapsed time, 4.570s cpu time, 1.117s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
instantiation
  poly_mapping :: (type, ab_group_add) ab_group_add
  uminus_poly_mapping == uminus ::
    ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
instantiation
  poly_mapping :: (zero, zero_neq_one) zero_neq_one
  one_poly_mapping == one_class.one :: 'a \<Rightarrow>\<^sub>0 'b
instantiation
  poly_mapping :: (monoid_add, semiring_0) semiring_0
  times_poly_mapping == times ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
instantiation
  poly_mapping :: (linorder, {zero,linorder}) linorder
  less_eq_poly_mapping == less_eq ::
    ('a \<Rightarrow>\<^sub>0 'b) => ('a \<Rightarrow>\<^sub>0 'b) => bool
  less_poly_mapping == less ::
    ('a \<Rightarrow>\<^sub>0 'b) => ('a \<Rightarrow>\<^sub>0 'b) => bool
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
instantiation
  poly_mapping :: (type, zero) size
  size_poly_mapping == size :: ('a \<Rightarrow>\<^sub>0 'b) => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
consts
  flat :: "'a list stream => 'a stream"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
### theory "HOL-Library.Poly_Mapping"
### 1.829s elapsed time, 7.003s cpu time, 1.929s GC time
Loading theory "Polynomials.MPoly_Type" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "Polynomials.More_MPoly_Type")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Poly_Mapping.poly_mapping" found.
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Library.Stream"
### 1.358s elapsed time, 5.163s cpu time, 1.701s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "HOL-Library.Countable")
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
instantiation
  mpoly :: (zero) zero
  zero_mpoly == zero_class.zero :: 'a mpoly
### theory "HOL-Algebra.Lattice"
### 1.233s elapsed time, 4.664s cpu time, 1.604s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group")
instantiation
  mpoly :: (monoid_add) monoid_add
  plus_mpoly == plus :: 'a mpoly => 'a mpoly => 'a mpoly
instantiation
  mpoly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_mpoly == minus :: 'a mpoly => 'a mpoly => 'a mpoly
instantiation
  mpoly :: (ab_group_add) ab_group_add
  uminus_mpoly == uminus :: 'a mpoly => 'a mpoly
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  mpoly :: (zero_neq_one) zero_neq_one
  one_mpoly == one_class.one :: 'a mpoly
instantiation
  mpoly :: (semiring_0) semiring_0
  times_mpoly == times :: 'a mpoly => 'a mpoly => 'a mpoly
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### Ambiguous input (line 494 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.divide_class.divide" ("_position" x) ("_position" y))
###     ("_The" ("_position" q')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" q')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" q)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>div" ("_position" x) ("_position" y))
###     ("_The" ("_position" q')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" q')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" q)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 498 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.modulo_class.modulo" ("_position" x) ("_position" y))
###     ("_The" ("_position" r')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" r')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>mod" ("_position" x) ("_position" y))
###     ("_The" ("_position" r')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" r')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 502 of "$AFP/Polynomials/MPoly_Type.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple"
###       ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>Rings.modulo_class.modulo" ("_position" p)
###           ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple" ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>Rings.modulo_class.modulo" ("_position" p)
###           ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple"
###       ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple" ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 505 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###     ("_applC" ("_position" fst)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###     ("_applC" ("_position" fst)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 509 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.modulo_class.modulo" ("_position" p) ("_position" q))
###     ("_applC" ("_position" snd)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))
###     ("_applC" ("_position" snd)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.485s elapsed time, 1.924s cpu time, 0.310s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "HOL-Library.Cardinality")
### theory "Polynomials.MPoly_Type"
### 0.614s elapsed time, 2.444s cpu time, 0.424s GC time
Loading theory "Polynomials.More_MPoly_Type" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products")
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
Proofs for inductive predicate(s) "pw_leq"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
  Proving monotonicity ...
### theory "HOL-Algebra.Complete_Lattice"
### 0.763s elapsed time, 3.032s cpu time, 0.472s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct")
### theory "Polynomials.More_MPoly_Type"
### 0.366s elapsed time, 1.445s cpu time, 0.335s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.692s elapsed time, 2.508s cpu time, 1.711s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras" via "Nested_Multisets_Ordinals.Multiset_More")
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
### theory "HOL-Library.Phantom_Type"
### 1.107s elapsed time, 4.153s cpu time, 2.047s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field")
### Additional type variable(s) in locale specification "CARD_1": 'a
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
### theory "HOL-Library.Multiset"
### 5.008s elapsed time, 19.132s cpu time, 5.761s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
### Additional type variable(s) in locale specification "card2": 'a
consts
  prefixes :: "'a list => 'a list list"
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
consts
  suffixes :: "'a list => 'a list list"
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.946s elapsed time, 3.776s cpu time, 0.616s GC time
Loading theory "HOL-Library.Multiset_Order" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras" via "Nested_Multisets_Ordinals.Multiset_More")
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_monoid_add_imp_le
instantiation
  multiset :: (wellorder) wellorder
instantiation
  multiset :: (preorder) order_bot
  bot_multiset == bot :: 'a multiset
instantiation
  multiset :: (linorder) distrib_lattice
  inf_multiset == inf :: 'a multiset => 'a multiset => 'a multiset
  sup_multiset == sup :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Multiset_Order"
### 0.379s elapsed time, 1.509s cpu time, 0.273s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "HOL-Combinatorics.Multiset_Permutations")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
consts
  sublists :: "'a list => 'a list list"
### theory "HOL-Library.Sublist"
### 2.119s elapsed time, 8.172s cpu time, 2.862s GC time
Loading theory "Nested_Multisets_Ordinals.Multiset_More" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras")
### theory "HOL-Algebra.Group"
### 2.956s elapsed time, 11.244s cpu time, 4.640s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "Nested_Multisets_Ordinals.Multiset_More"
### 0.800s elapsed time, 3.151s cpu time, 0.594s GC time
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring")
### theory "HOL-Combinatorics.Permutations"
### 1.604s elapsed time, 6.081s cpu time, 2.567s GC time
Loading theory "Jordan_Normal_Form.Missing_Misc" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
### theory "Jordan_Normal_Form.Missing_Misc"
### 0.135s elapsed time, 0.525s cpu time, 0.136s GC time
Loading theory "Nested_Multisets_Ordinals.Duplicate_Free_Multiset" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras")
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
### theory "Nested_Multisets_Ordinals.Duplicate_Free_Multiset"
### 0.100s elapsed time, 0.399s cpu time, 0.000s GC time
Loading theory "Design_Theory.Multisets_Extras" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras")
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.521s elapsed time, 2.070s cpu time, 0.289s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
### theory "HOL-Algebra.Coset"
### 1.403s elapsed time, 5.543s cpu time, 0.931s GC time
Loading theory "HOL-Algebra.Generated_Groups" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Proofs for inductive predicate(s) "generatep"
  Proving monotonicity ...
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
class ordered_semiring = ordered_comm_monoid_add + semiring +
  assumes
    "mult_left_mono":
      "!!a b c. [| a <= b; (0::'a) <= c |] ==> c * a <= c * b"
  assumes
    "mult_right_mono":
      "!!a b c. [| a <= b; (0::'a) <= c |] ==> a * c <= b * c"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### theory "Design_Theory.Multisets_Extras"
### 0.836s elapsed time, 3.306s cpu time, 0.523s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### theory "HOL-Algebra.Generated_Groups"
### 0.799s elapsed time, 3.157s cpu time, 0.542s GC time
Loading theory "HOL-Algebra.Elementary_Groups" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale group_disjoint_sum
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and A :: "'a set"
    and B :: "'a set"
  assumes "group_disjoint_sum G A B"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
### theory "HOL-Algebra.Elementary_Groups"
### 0.584s elapsed time, 2.317s cpu time, 0.256s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.While_Combinator"
### 0.438s elapsed time, 1.741s cpu time, 0.134s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products")
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
### theory "HOL-Library.Tree"
### 2.150s elapsed time, 8.528s cpu time, 1.038s GC time
Loading theory "Draft.Templates" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.266s cpu time, 0.000s GC time
Loading theory "Polynomials.More_Modules" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class")
locale module
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "module (*s)"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
### theory "Polynomials.More_Modules"
### 0.210s elapsed time, 0.836s cpu time, 0.110s GC time
Loading theory "HOL-Combinatorics.Multiset_Permutations" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras")
### theory "HOL-Algebra.Ring"
### 3.042s elapsed time, 12.053s cpu time, 1.517s GC time
Loading theory "HOL-Algebra.AbelCoset" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal")
### theory "HOL-Library.Countable"
### 1.188s elapsed time, 4.709s cpu time, 0.471s GC time
Loading theory "HOL-Algebra.Module" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix")
Found termination order: "length <*mlex*> {}"
locale abelian_group_hom
  fixes G :: "('a, 'b) ring_scheme"  (structure)
    and H :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "abelian_group_hom G H h"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### Cannot skip proof of schematic goal statement
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Multiset_Permutations"
### 0.834s elapsed time, 3.326s cpu time, 0.266s GC time
Loading theory "Jordan_Normal_Form.Missing_Ring" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix")
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
locale additive_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "additive_subgroup H G"
locale abelian_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_subgroup H G"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 7.965s elapsed time, 31.346s cpu time, 5.731s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "HOL-Computational_Algebra.Primes")
### theory "HOL-Algebra.Module"
### 1.507s elapsed time, 5.991s cpu time, 0.550s GC time
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "Polynomial_Interpolation.Ring_Hom_Poly" via "Polynomial_Interpolation.Missing_Polynomial")
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
Found termination order: "length <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### theory "HOL-Algebra.AbelCoset"
### 2.752s elapsed time, 10.942s cpu time, 0.887s GC time
Loading theory "HOL-Algebra.Ideal" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom")
locale ideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ideal I R"
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 1.217s elapsed time, 4.837s cpu time, 0.337s GC time
Loading theory "Draft.Set_Multiset_Extras" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras")
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
locale principalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "principalideal I R"
locale maximalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "maximalideal I R"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
locale primeideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "primeideal I R"
### theory "Draft.Set_Multiset_Extras"
### 0.788s elapsed time, 3.133s cpu time, 0.280s GC time
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "Polynomial_Interpolation.Ring_Hom_Poly" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Jordan_Normal_Form.Missing_Ring"
### 3.710s elapsed time, 14.738s cpu time, 1.188s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.ExtrEqs")
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
### theory "HOL-Algebra.Ideal"
### 1.998s elapsed time, 7.928s cpu time, 0.727s GC time
Loading theory "HOL-Algebra.RingHom" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
locale ring_hom_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_ring R S h"
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.874s elapsed time, 3.468s cpu time, 0.517s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Vector_Matrix_ModMoreTemplates")
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
### theory "HOL-Algebra.RingHom"
### 0.921s elapsed time, 3.649s cpu time, 0.504s GC time
Loading theory "HOL-Algebra.UnivPoly" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
locale bound
  fixes z :: "'a"
    and n :: "nat"
    and f :: "nat => 'a"
  assumes "bound z n f"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.713s elapsed time, 2.822s cpu time, 0.323s GC time
Loading theory "HOL-Library.Complex_Order" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Conjugate")
instantiation
  complex :: order
  less_eq_complex == less_eq :: complex => complex => bool
  less_complex == less :: complex => complex => bool
### theory "HOL-Library.Complex_Order"
### 0.062s elapsed time, 0.254s cpu time, 0.000s GC time
Loading theory "Jordan_Normal_Form.Conjugate" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
### theory "Jordan_Normal_Form.Conjugate"
### 3.111s elapsed time, 12.335s cpu time, 1.356s GC time
Loading theory "Matrix.Utility" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Polynomial_Factorization.Missing_List")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "size_list size <*mlex*> {}"
### theory "Matrix.Utility"
### 0.326s elapsed time, 1.286s cpu time, 0.301s GC time
Loading theory "Polynomial_Factorization.Missing_List" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras")
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
Found termination order: "size_list length <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### theory "HOL-Computational_Algebra.Polynomial"
### 6.297s elapsed time, 24.965s cpu time, 2.763s GC time
Loading theory "Open_Induction.Restricted_Predicates" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
Found termination order: "length <*mlex*> {}"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  list_union :: "'a list => 'a list => 'a list"
Proofs for inductive predicate(s) "accessible_on"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  list_diff :: "'a list => 'a list => 'a list"
### Ignoring duplicate rewrite rule:
### set ?xs1 <= set ?ys1 == list_all (%x. x : set ?ys1) ?xs1
### theory "Open_Induction.Restricted_Predicates"
### 0.452s elapsed time, 1.784s cpu time, 0.354s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix")
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### Missing patterns in function definition:
### min_list [] = undefined
Found termination order: "length <*mlex*> {}"
consts
  permut_aux :: "'a list => (nat => nat) => 'a list => 'a list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale UP_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
    and s :: "'c"
    and Eval :: "(nat => 'a) => 'c"
  assumes "UP_univ_prop R S h s"
  defines "P == UP R"
    and "Eval == eval R S h s"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 9.721s elapsed time, 38.546s cpu time, 4.442s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "Polynomial_Interpolation.Ring_Hom_Poly" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
### theory "Polynomial_Factorization.Missing_List"
### 2.062s elapsed time, 8.164s cpu time, 1.144s GC time
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field")
locale fract_as_normalized_quot
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.556s elapsed time, 2.205s cpu time, 0.341s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "Polynomial_Interpolation.Ring_Hom_Poly" via "Polynomial_Interpolation.Missing_Polynomial")
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
### theory "HOL-Computational_Algebra.Primes"
### 0.363s elapsed time, 1.432s cpu time, 0.354s GC time
Loading theory "HOL-Number_Theory.Cong" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "HOL-Number_Theory.Residues")
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
class unique_euclidean_semiring = euclidean_semiring_cancel +
  fixes division_segment :: "'a => 'a"
  assumes
    "euclidean_size_mult":
      "!!a b. euclidean_size (a * b) = euclidean_size a * euclidean_size b"
  assumes "is_unit_division_segment": "!!a. is_unit (division_segment a)"
    and
    "division_segment_mult":
      "!!a b.
          [| a ~= (0::'a); b ~= (0::'a) |]
          ==> division_segment (a * b) =
              division_segment a * division_segment b"
    and
    "division_segment_mod":
      "!!b a.
          [| b ~= (0::'a); ~ b dvd a |]
          ==> division_segment (a mod b) = division_segment b"
  assumes
    "div_bounded":
      "!!b r q.
          [| b ~= (0::'a); division_segment r = division_segment b;
             euclidean_size r < euclidean_size b |]
          ==> (q * b + r) div b = q"
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
### Cannot skip proof of schematic goal statement
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Number_Theory.Cong"
### 0.984s elapsed time, 3.886s cpu time, 0.666s GC time
Loading theory "HOL-Number_Theory.Totient" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "HOL-Number_Theory.Residues")
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 1.238s elapsed time, 4.893s cpu time, 0.861s GC time
Loading theory "Polynomial_Interpolation.Missing_Polynomial" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "Polynomial_Interpolation.Ring_Hom_Poly")
consts
  totient_naive :: "nat => nat => nat => nat"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
### theory "HOL-Number_Theory.Totient"
### 0.550s elapsed time, 2.178s cpu time, 0.257s GC time
Loading theory "Polynomial_Factorization.Missing_Multiset" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.More_Missing_Multiset")
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
### theory "Polynomial_Factorization.Missing_Multiset"
### 0.285s elapsed time, 1.118s cpu time, 0.275s GC time
Loading theory "Berlekamp_Zassenhaus.More_Missing_Multiset" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod")
Found termination order: "size_list (%p. size (fst p)) <*mlex*> {}"
### theory "Polynomial_Interpolation.Ring_Hom"
### 3.489s elapsed time, 13.798s cpu time, 2.196s GC time
Loading theory "Jordan_Normal_Form.Matrix" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras")
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
### theory "Berlekamp_Zassenhaus.More_Missing_Multiset"
### 0.262s elapsed time, 1.032s cpu time, 0.161s GC time
Loading theory "Regular-Sets.Regular_Set" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking" via "Regular-Sets.NDerivative" via "Regular-Sets.Regular_Exp")
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
consts
  lang_pow :: "nat => 'a list set => 'a list set"
### theory "Polynomial_Interpolation.Missing_Polynomial"
### 1.154s elapsed time, 4.550s cpu time, 0.853s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom_Poly" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field")
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
### theory "Regular-Sets.Regular_Set"
### 1.738s elapsed time, 6.468s cpu time, 5.545s GC time
Loading theory "Regular-Sets.Regular_Exp" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking" via "Regular-Sets.NDerivative")
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale map_poly_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_zero_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale map_poly_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_monoid_add_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale map_poly_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_semiring_hom hom"
locale map_poly_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_ring_hom hom"
locale map_poly_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_idom_hom hom"
locale map_poly_inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_zero_hom hom"
locale map_poly_inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_monoid_add_hom hom"
locale map_poly_inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_semiring_hom hom"
locale map_poly_inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_ring_hom hom"
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
locale map_poly_inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_hom hom"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Algebra.UnivPoly"
### 11.289s elapsed time, 44.268s cpu time, 10.666s GC time
Loading theory "HOL-Algebra.Multiplicative_Group" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field" via "HOL-Number_Theory.Residues")
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
consts
  lang :: "'a rexp => 'a list set"
consts
  nullable :: "'a rexp => bool"
consts
  rexp_empty :: "'a rexp => bool"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
instantiation
  rexp :: (order) order
  less_eq_rexp == less_eq :: 'a rexp => 'a rexp => bool
  less_rexp == less :: 'a rexp => 'a rexp => bool
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
locale field_hom'
  fixes hom :: "'a => 'b"
  assumes "field_hom' hom"
locale map_poly_inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_divide_hom hom"
Found termination order: "{}"
### theory "Polynomial_Interpolation.Ring_Hom_Poly"
### 4.892s elapsed time, 18.479s cpu time, 11.471s GC time
Loading theory "Subresultants.Binary_Exponentiation" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field")
class monoid_mult = semigroup_mult + power +
  assumes "mult_1_left": "!!a. (1::'a) * a = a"
    and "mult_1_right": "!!a. a * (1::'a) = a"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
### theory "Subresultants.Binary_Exponentiation"
### 0.190s elapsed time, 0.745s cpu time, 0.059s GC time
Loading theory "Well_Quasi_Orders.Infinite_Sequences" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
### theory "Well_Quasi_Orders.Infinite_Sequences"
### 0.111s elapsed time, 0.448s cpu time, 0.000s GC time
Loading theory "Well_Quasi_Orders.Minimal_Elements" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences")
locale minimal_element
  fixes P :: "'a => 'a => bool"
    and A :: "'a set"
  assumes "minimal_element P A"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Well_Quasi_Orders.Minimal_Elements"
### 0.255s elapsed time, 1.009s cpu time, 0.091s GC time
Loading theory "Well_Quasi_Orders.Least_Enum" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
locale infinitely_many1
  fixes P :: "'a => bool"
  assumes "infinitely_many1 P"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
### Additional type variable(s) in specification of "enum_rel": 'a
### Additional type variable(s) in specification of "enum_dom": 'a
Found termination order: "size <*mlex*> {}"
locale infinitely_many2
  fixes P :: "'a => 'a => bool"
    and N :: "'a"
  assumes "infinitely_many2 P N"
### Additional type variable(s) in specification of "enumchain_rel": 'a
### Additional type variable(s) in specification of "enumchain_dom": 'a
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Well_Quasi_Orders.Least_Enum"
### 0.197s elapsed time, 0.775s cpu time, 0.099s GC time
MPoly (mapping_of ?x) = ?x
?y : UNIV ==> mapping_of (MPoly ?y) = ?y
(mapping_of ?x = mapping_of ?y) = (?x = ?y)
[| ?x : UNIV; ?y : UNIV |] ==> (MPoly ?x = MPoly ?y) = (?x = ?y)
[| ?y : UNIV; !!x. ?P (mapping_of x) |] ==> ?P ?y
(!!y. y : UNIV ==> ?P (MPoly y)) ==> ?P ?x
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
[| ?y : UNIV; !!x. ?y = mapping_of x ==> ?P |] ==> ?P
(!!y. [| ?x = MPoly y; y : UNIV |] ==> ?P) ==> ?P
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  rexp :: (linorder) linorder
### theory "Regular-Sets.Regular_Exp"
### 4.193s elapsed time, 16.261s cpu time, 6.333s GC time
Loading theory "Regular-Sets.NDerivative" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking")
"(Gcd (coeffs
        (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
         M [(1::'b) + (1::'b), 0::'b,
            (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
          6 +
         M [(1::'b) + (1::'b), 0::'b,
            (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
          8)),
  sdiv
   (Gcd (coeffs
          (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
           M [(1::'b) + (1::'b), 0::'b,
              (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
            6 +
           M [(1::'b) + (1::'b), 0::'b,
              (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
            8)))
   (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
    M [(1::'b) + (1::'b), 0::'b, (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
     6 +
    M [(1::'b) + (1::'b), 0::'b,
       (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
     8))"
  :: "'a * 'a mpoly"
Loading theory "Regular-Sets.Relation_Interpretation" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method")
consts
  rel :: "('a => ('b * 'b) set) => 'a rexp => ('b * 'b) set"
consts
  word_rel :: "('a => ('b * 'b) set) => 'a list => ('b * 'b) set"
### theory "Regular-Sets.Relation_Interpretation"
### 0.068s elapsed time, 0.270s cpu time, 0.000s GC time
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
Found termination order: "length <*mlex*> {}"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
"{[4, 3, 2, 1], [3, 4, 2, 1], [4, 2, 3, 1], [2, 4, 3, 1], [3, 2, 4, 1],
  [2, 3, 4, 1], [4, 3, 1, 2], [3, 4, 1, 2], [4, 1, 3, 2], [1, 4, 3, 2],
  [3, 1, 4, 2], [1, 3, 4, 2], [4, 2, 1, 3], [2, 4, 1, 3], [4, 1, 2, 3],
  [1, 4, 2, 3], [2, 1, 4, 3], [1, 2, 4, 3], [3, 2, 1, 4], [2, 3, 1, 4],
  [3, 1, 2, 4], [1, 3, 2, 4], [2, 1, 3, 4], [1, 2, 3, 4]}"
  :: "int list set"
[| ?M <= carrier G; ?g : carrier G; ?h : carrier G |]
==> ?M #>\<^bsub>add_monoid G\<^esub> ?g #>\<^bsub>add_monoid G\<^esub> ?h =
    ?M #>\<^bsub>add_monoid G\<^esub> ?g \<oplus> ?h
[| abelian_group ?G; ?M <= carrier ?G; ?g : carrier ?G; ?h : carrier ?G |]
==> ?M +>\<^bsub>?G\<^esub> ?g +>\<^bsub>?G\<^esub> ?h =
    ?M +>\<^bsub>?G\<^esub> ?g \<oplus>\<^bsub>?G\<^esub> ?h
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
"{''dcba'', ''cdba'', ''dbca'', ''bdca'', ''cbda'', ''bcda'', ''dcab'',
  ''cdab'', ''dacb'', ''adcb'', ''cadb'', ''acdb'', ''dbac'', ''bdac'',
  ''dabc'', ''adbc'', ''badc'', ''abdc'', ''cbad'', ''bcad'', ''cabd'',
  ''acbd'', ''bacd'', ''abcd''}"
  :: "char list set"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
### theory "Jordan_Normal_Form.Matrix"
### 7.090s elapsed time, 27.405s cpu time, 12.364s GC time
Loading theory "Jordan_Normal_Form.Gauss_Jordan_Elimination" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix")
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### theory "HOL-Algebra.Multiplicative_Group"
### 4.502s elapsed time, 17.572s cpu time, 6.493s GC time
Loading theory "HOL-Number_Theory.Residues" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Berlekamp_Zassenhaus.Finite_Field")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
### theory "Jordan_Normal_Form.Gauss_Jordan_Elimination"
### 1.218s elapsed time, 4.489s cpu time, 0.514s GC time
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
consts
  norm :: "'a rexp => 'a rexp"
consts
  nderiv :: "'a => 'a rexp => 'a rexp"
### theory "Regular-Sets.NDerivative"
### 2.809s elapsed time, 10.055s cpu time, 1.097s GC time
Loading theory "Regular-Sets.Equivalence_Checking" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method")
Proofs for coinductive predicate(s) "bisimilar"
  Proving monotonicity ...
consts
  add_atoms :: "'a rexp => 'a list => 'a list"
### theory "Regular-Sets.Equivalence_Checking"
### 0.203s elapsed time, 0.403s cpu time, 0.000s GC time
Loading theory "Regular-Sets.Regexp_Method" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
### theory "HOL-Number_Theory.Residues"
### 1.648s elapsed time, 4.906s cpu time, 0.505s GC time
Loading theory "Berlekamp_Zassenhaus.Finite_Field" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod")
consts
  rel_of_regexp :: "('a * 'a) set list => nat rexp => ('a * 'a) set"
consts
  rel_eq :: "nat rexp * nat rexp => ('a * 'a) set list => bool"
val regexp_conv = fn: Proof.context -> conv
### theory "Regular-Sets.Regexp_Method"
### 0.502s elapsed time, 1.065s cpu time, 0.000s GC time
Loading theory "Well_Quasi_Orders.Almost_Full" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences")
instantiation
  mod_ring :: (finite) equal
  equal_mod_ring == equal_class.equal :: 'a mod_ring => 'a mod_ring => bool
instantiation
  mod_ring :: (finite) comm_ring
  uminus_mod_ring == uminus :: 'a mod_ring => 'a mod_ring
  times_mod_ring == times :: 'a mod_ring => 'a mod_ring => 'a mod_ring
  zero_mod_ring == zero_class.zero :: 'a mod_ring
  minus_mod_ring == minus :: 'a mod_ring => 'a mod_ring => 'a mod_ring
  plus_mod_ring == plus :: 'a mod_ring => 'a mod_ring => 'a mod_ring
### Additional type variable(s) in locale specification "nontriv": 'a
class nontriv = type +
  assumes "nontriv": "1 < CARD('a)"
Proofs for inductive predicate(s) "af"
  Proving monotonicity ...
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  mod_ring :: (nontriv) comm_ring_1
  one_mod_ring == one_class.one :: 'a mod_ring
### theory "Well_Quasi_Orders.Almost_Full"
### 0.842s elapsed time, 1.741s cpu time, 0.123s GC time
Loading theory "Well_Quasi_Orders.Minimal_Bad_Sequences" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations")
### Additional type variable(s) in locale specification "prime_card": 'a
class prime_card = type +
  assumes "prime_card": "prime CARD('a)"
locale mbs
  fixes A :: "'a set"
### Cannot skip proof of schematic goal statement
### theory "Well_Quasi_Orders.Minimal_Bad_Sequences"
### 0.224s elapsed time, 0.448s cpu time, 0.000s GC time
Loading theory "Well_Quasi_Orders.Almost_Full_Relations" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils")
Found termination order: "{}"
instantiation
  mod_ring :: (prime_card) field
  inverse_mod_ring == inverse :: 'a mod_ring => 'a mod_ring
  divide_mod_ring == divide :: 'a mod_ring => 'a mod_ring => 'a mod_ring
instantiation
  mod_ring :: (prime_card) {normalization_euclidean_semiring,euclidean_ring}
  normalize_mod_ring == normalize :: 'a mod_ring => 'a mod_ring
  unit_factor_mod_ring == unit_factor :: 'a mod_ring => 'a mod_ring
  euclidean_size_mod_ring == euclidean_size :: 'a mod_ring => nat
  modulo_mod_ring == modulo :: 'a mod_ring => 'a mod_ring => 'a mod_ring
instantiation
  mod_ring :: (prime_card) euclidean_ring_gcd
  Gcd_mod_ring == Gcd :: 'a mod_ring set => 'a mod_ring
  Lcm_mod_ring == Lcm :: 'a mod_ring set => 'a mod_ring
  gcd_mod_ring == gcd :: 'a mod_ring => 'a mod_ring => 'a mod_ring
  lcm_mod_ring == lcm :: 'a mod_ring => 'a mod_ring => 'a mod_ring
instantiation
  mod_ring :: (prime_card) unique_euclidean_ring
  division_segment_mod_ring == division_segment ::
    'a mod_ring => 'a mod_ring
Found termination order: "{}"
### theory "Berlekamp_Zassenhaus.Finite_Field"
### 1.858s elapsed time, 3.932s cpu time, 0.317s GC time
### theory "Well_Quasi_Orders.Almost_Full_Relations"
### 0.353s elapsed time, 0.772s cpu time, 0.194s GC time
Loading theory "Polynomials.Utils" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class")
Loading theory "Well_Quasi_Orders.Well_Quasi_Orders" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products")
class wqo = preorder +
  assumes "good": "!!f. good (<=) f"
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
### theory "Well_Quasi_Orders.Well_Quasi_Orders"
### 0.212s elapsed time, 0.427s cpu time, 0.000s GC time
### theory "Polynomials.Utils"
### 0.234s elapsed time, 0.446s cpu time, 0.000s GC time
Loading theory "Groebner_Bases.General" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class")
Loading theory "Polynomials.Power_Products" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class")
### Missing patterns in function definition:
### max_list [] = undefined
Found termination order: "length <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  insort_wrt :: "('c => 'c => bool) => 'c => 'c list => 'c list"
consts
  remdups_wrt :: "('a => 'b) => 'a list => 'a list"
consts
  map_idx :: "('a => nat => 'b) => 'a list => nat => 'b list"
consts
  map_dup :: "('a => 'b) => ('a => 'b) => 'a list => 'b list"
consts
  filter_min_aux :: "'a list => 'a list => 'a list"
### theory "Groebner_Bases.General"
### 0.465s elapsed time, 0.930s cpu time, 0.000s GC time
class plus = type +
  fixes plus :: "'a => 'a => 'a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class ninv_comm_monoid_add = comm_monoid_add +
  assumes "plus_eq_zero": "!!s t. s + t = (0::'a) ==> s = (0::'a)"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class lcs_powerprod = comm_powerprod +
  fixes lcs :: "'a => 'a => 'a"
  assumes "adds_lcs": "!!s t. s adds lcs s t"
  assumes "lcs_adds": "!!s u t. [| s adds u; t adds u |] ==> lcs s t adds u"
  assumes "lcs_comm": "!!s t. lcs s t = lcs t s"
class graded_dickson_powerprod = ulcs_powerprod +
  assumes "ex_dgrad": "EX d. dickson_grading d"
class dickson_powerprod = ulcs_powerprod +
  assumes "dickson": "almost_full_on (adds) UNIV"
class semi_canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_imp_add": "!!a b. a <= b ==> EX c. b = a + c"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  ninv_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class add_linorder_min = add_linorder +
  assumes "zero_min": "!!x. (0::'a) <= x"
instantiation
  nat :: add_linorder
instantiation
  nat :: add_linorder_min
instantiation
  nat :: add_wellorder
instantiation
  int :: add_linorder_group
instantiation
  rat :: add_linorder_group
instantiation
  real :: add_linorder_group
locale ordered_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "ordered_powerprod (\<preceq>) (\<prec>)"
locale gd_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "gd_powerprod (\<preceq>) (\<prec>)"
locale od_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "od_powerprod (\<preceq>) (\<prec>)"
instantiation
  fun :: (type, add_linorder) lcs_powerprod
  lcs_fun == lcs :: ('a => 'b) => ('a => 'b) => 'a => 'b
class wellorder = linorder +
  assumes
    "less_induct": "!!P a. (!!x. (!!y. y < x ==> P y) ==> P x) ==> P a"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class wellorder = linorder +
  assumes
    "less_induct": "!!P a. (!!x. (!!y. y < x ==> P y) ==> P x) ==> P a"
instantiation
  poly_mapping :: (type, add_linorder) lcs_powerprod
  lcs_poly_mapping == lcs ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "Polynomials.Power_Products"
### 7.484s elapsed time, 8.360s cpu time, 0.560s GC time
Loading theory "Polynomials.MPoly_Type_Class" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered")
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
### Ambiguous input (line 1415 of "$AFP/Polynomials/MPoly_Type_Class.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monomial)
###       ("_cargs" ("_applC" ("_position" Sum_any) ("_position" f))
###         ("_position" a)))
###     ("\<^const>Series.suminf_binder" ("_position" c)
###       ("_applC" ("_position" monomial)
###         ("_cargs" ("_applC" ("_position" f) ("_position" c))
###           ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monomial)
###       ("_cargs" ("_applC" ("_position" Sum_any) ("_position" f))
###         ("_position" a)))
###     ("_Sum_any" ("_position" c)
###       ("_applC" ("_position" monomial)
###         ("_cargs" ("_applC" ("_position" f) ("_position" c))
###           ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
### Ambiguous input (line 1454 of "$AFP/Polynomials/MPoly_Type_Class.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monom_mult)
###       ("_cargs" ("_applC" ("_position" Sum_any) ("_position" f))
###         ("_cargs" ("_position" t) ("_position" p))))
###     ("\<^const>Series.suminf_binder" ("_position" c)
###       ("_applC" ("_position" monom_mult)
###         ("_cargs" ("_applC" ("_position" f) ("_position" c))
###           ("_cargs" ("_position" t) ("_position" p)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monom_mult)
###       ("_cargs" ("_applC" ("_position" Sum_any) ("_position" f))
###         ("_cargs" ("_position" t) ("_position" p))))
###     ("_Sum_any" ("_position" c)
###       ("_applC" ("_position" monom_mult)
###         ("_cargs" ("_applC" ("_position" f) ("_position" c))
###           ("_cargs" ("_position" t) ("_position" p)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1463 of "$AFP/Polynomials/MPoly_Type_Class.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monom_mult)
###       ("_cargs" ("_position" c)
###         ("_cargs" ("_position" t)
###           ("_applC" ("_position" Sum_any) ("_position" f)))))
###     ("\<^const>Series.suminf_binder" ("_position" p)
###       ("_applC" ("_position" monom_mult)
###         ("_cargs" ("_position" c)
###           ("_cargs" ("_position" t)
###             ("_applC" ("_position" f) ("_position" p))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monom_mult)
###       ("_cargs" ("_position" c)
###         ("_cargs" ("_position" t)
###           ("_applC" ("_position" Sum_any) ("_position" f)))))
###     ("_Sum_any" ("_position" p)
###       ("_applC" ("_position" monom_mult)
###         ("_cargs" ("_position" c)
###           ("_cargs" ("_position" t)
###             ("_applC" ("_position" f) ("_position" p))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
### theory "Polynomials.MPoly_Type_Class"
### 1.568s elapsed time, 1.769s cpu time, 0.229s GC time
Loading theory "Polynomials.MPoly_Type_Class_Ordered" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class")
class the_min = linorder +
  fixes the_min :: "'a"
  assumes "the_min_min": "!!x. the_min <= x"
instantiation
  nat :: the_min
  the_min_nat == the_min :: nat
instantiation
  unit :: the_min
  the_min_unit == the_min :: unit
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale ordered_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "ordered_powerprod (\<preceq>) (\<prec>)"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale ordered_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "ordered_powerprod (\<preceq>) (\<prec>)"
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale gd_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "gd_powerprod (\<preceq>) (\<prec>)"
locale od_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "od_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Polynomials.MPoly_Type_Class_Ordered"
### 5.508s elapsed time, 6.048s cpu time, 0.646s GC time
Loading theory "Groebner_Bases.More_MPoly_Type_Class" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix")
locale module
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "module (*s)"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Groebner_Bases.More_MPoly_Type_Class"
### 0.947s elapsed time, 0.948s cpu time, 0.000s GC time
Loading theory "Groebner_Bases.Macaulay_Matrix" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod" via "Draft.Matrix_Vector_Extras")
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
[| Keys (set ?ps) <= set ?ts; ?v : carrier_vec (length ?ps) |]
==> row_to_poly ?ts (?v \<^sub>v* polys_to_mat ?ts ?ps) =
    sum_list (map2 (\<cdot>) (list_of_vec ?v) ?ps)
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Groebner_Bases.Macaulay_Matrix"
### 1.521s elapsed time, 1.762s cpu time, 0.319s GC time
Loading theory "Draft.Matrix_Vector_Extras" (required by "Draft.Vector_Matrix_ModMoreTemplates" via "Draft.Vector_Matrix_Mod")
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale injective_lim
  fixes A :: "'a set"
    and f :: "'a => 'b"
  assumes "injective_lim A f"
locale injective_lim
  fixes A :: "'a set"
    and f :: "'a => 'b"
  assumes "injective_lim A f"
locale inj_on_01_hom
  fixes hom :: "'a => 'b"
  assumes "inj_on_01_hom hom"
class zero_neq_one = one + zero +
  assumes "zero_neq_one": "(0::'a) ~= (1::'a)"
### theory "Draft.Matrix_Vector_Extras"
### 0.987s elapsed time, 0.987s cpu time, 0.000s GC time
Loading theory "Draft.Vector_Matrix_Mod" (required by "Draft.Vector_Matrix_ModMoreTemplates")
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
### Ignoring duplicate rewrite rule:
### map_vec hom ?x1 = 0\<^sub>v ?n1 == ?x1 = 0\<^sub>v ?n1
locale mat_mod
  fixes m :: "int"
  assumes "mat_mod m"
### Ambiguous input (line 66 of "$AFP/Fishers_Inequality/Vector_Matrix_Mod.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" vec_mod) ("_position" v))
###   ("_applC" ("_position" map_vec)
###     ("_cargs"
###       ("_lambda" ("_position" x)
###         ("\<^const>Rings.modulo_class.modulo" ("_position" x)
###           ("_position" m)))
###       ("_position" v))))
### ("\<^const>Pure.eq" ("_applC" ("_position" vec_mod) ("_position" v))
###   ("_applC" ("_position" map_vec)
###     ("_cargs"
###       ("_lambda" ("_position" x)
###         ("\<^const>MPoly_Type.mod" ("_position" x) ("_position" m)))
###       ("_position" v))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/Fishers_Inequality/Vector_Matrix_Mod.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" i)
###       ("_applC" ("_position" dim_vec) ("_position" v))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Matrix.vec_index"
###         ("_applC" ("_position" vec_mod) ("_position" v)) ("_position" i))
###       ("\<^const>Rings.modulo_class.modulo"
###         ("\<^const>Matrix.vec_index" ("_position" v) ("_position" i))
###         ("_position" m)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" i)
###       ("_applC" ("_position" dim_vec) ("_position" v))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Matrix.vec_index"
###         ("_applC" ("_position" vec_mod) ("_position" v)) ("_position" i))
###       ("\<^const>MPoly_Type.mod"
###         ("\<^const>Matrix.vec_index" ("_position" v) ("_position" i))
###         ("_position" m)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 93 of "$AFP/Fishers_Inequality/Vector_Matrix_Mod.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" mat_mod) ("_position" M))
###   ("_applC" ("_position" map_mat)
###     ("_cargs"
###       ("_lambda" ("_position" x)
###         ("\<^const>Rings.modulo_class.modulo" ("_position" x)
###           ("_position" m)))
###       ("_position" M))))
### ("\<^const>Pure.eq" ("_applC" ("_position" mat_mod) ("_position" M))
###   ("_applC" ("_position" map_mat)
###     ("_cargs"
###       ("_lambda" ("_position" x)
###         ("\<^const>MPoly_Type.mod" ("_position" x) ("_position" m)))
###       ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 98 of "$AFP/Fishers_Inequality/Vector_Matrix_Mod.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" i)
###       ("_applC" ("_position" dim_row) ("_position" M))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" j)
###         ("_applC" ("_position" dim_col) ("_position" M))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Matrix.index_mat"
###           ("_applC" ("_position" mat_mod) ("_position" M))
###           ("_tuple" ("_position" i) ("_tuple_arg" ("_position" j))))
###         ("\<^const>Rings.modulo_class.modulo"
###           ("\<^const>Matrix.index_mat" ("_position" M)
###             ("_tuple" ("_position" i) ("_tuple_arg" ("_position" j))))
###           ("_position" m))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" i)
###       ("_applC" ("_position" dim_row) ("_position" M))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less" ("_position" j)
###         ("_applC" ("_position" dim_col) ("_position" M))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>Matrix.index_mat"
###           ("_applC" ("_position" mat_mod) ("_position" M))
###           ("_tuple" ("_position" i) ("_tuple_arg" ("_position" j))))
###         ("\<^const>MPoly_Type.mod"
###           ("\<^const>Matrix.index_mat" ("_position" M)
###             ("_tuple" ("_position" i) ("_tuple_arg" ("_position" j))))
###           ("_position" m))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/Fishers_Inequality/Vector_Matrix_Mod.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("\<^const>Rings.modulo_class.modulo" ("_position" x) ("_position" m))
###     ("_applC" ("_position" elements_mat)
###       ("_applC" ("_position" mat_mod) ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("\<^const>MPoly_Type.mod" ("_position" x) ("_position" m))
###     ("_applC" ("_position" elements_mat)
###       ("_applC" ("_position" mat_mod) ("_position" M)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 120 of "$AFP/Fishers_Inequality/Vector_Matrix_Mod.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" elements_mat)
###       ("_applC" ("_position" mat_mod) ("_position" M)))
###     ("\<^const>Set.image"
###       ("_lambda" ("_position" x)
###         ("\<^const>MPoly_Type.mod" ("_position" x) ("_position" m)))
###       ("_applC" ("_position" elements_mat) ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" elements_mat)
###       ("_applC" ("_position" mat_mod) ("_position" M)))
###     ("\<^const>Set.image"
###       ("_lambda" ("_position" x)
###         ("\<^const>Rings.modulo_class.modulo" ("_position" x)
###           ("_position" m)))
###       ("_applC" ("_position" elements_mat) ("_position" M)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale mod_type
  fixes m :: "int"
    and ty :: "'a itself"
  assumes "mod_type TYPE('a) m"
### Ambiguous input (line 194 of "$AFP/Fishers_Inequality/Vector_Matrix_Mod.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M) ("_position" x))
###     ("\<^const>Rings.modulo_class.modulo" ("_position" x) ("_position" m))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" M) ("_position" x))
###     ("\<^const>MPoly_Type.mod" ("_position" x) ("_position" m))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale mat_mod_type
  fixes m :: "int"
    and ty :: "'a itself"
  assumes "mat_mod_type TYPE('a) m"
### Ambiguous input (line 281 of "$AFP/Fishers_Inequality/Vector_Matrix_Mod.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" to_int_mod_ring)
###       ("\<^const>Groups.plus_class.plus"
###         ("_constrain" ("_position" x)
###           ("_tapp" ("_position_sort" 'a) ("_type_name" mod_ring)))
###         ("_position" y)))
###     ("\<^const>Rings.modulo_class.modulo"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" to_int_mod_ring) ("_position" x))
###         ("_applC" ("_position" to_int_mod_ring) ("_position" y)))
###       ("_position" m))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" to_int_mod_ring)
###       ("\<^const>Groups.plus_class.plus"
###         ("_constrain" ("_position" x)
###           ("_tapp" ("_position_sort" 'a) ("_type_name" mod_ring)))
###         ("_position" y)))
###     ("\<^const>MPoly_Type.mod"
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" to_int_mod_ring) ("_position" x))
###         ("_applC" ("_position" to_int_mod_ring) ("_position" y)))
###       ("_position" m))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 284 of "$AFP/Fishers_Inequality/Vector_Matrix_Mod.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" to_int_mod_ring)
###       ("\<^const>Groups.times_class.times"
###         ("_constrain" ("_position" x)
###           ("_tapp" ("_position_sort" 'a) ("_type_name" mod_ring)))
###         ("_position" y)))
###     ("\<^const>Rings.modulo_class.modulo"
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" to_int_mod_ring) ("_position" x))
###         ("_applC" ("_position" to_int_mod_ring) ("_position" y)))
###       ("_position" m))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" to_int_mod_ring)
###       ("\<^const>Groups.times_class.times"
###         ("_constrain" ("_position" x)
###           ("_tapp" ("_position_sort" 'a) ("_type_name" mod_ring)))
###         ("_position" y)))
###     ("\<^const>MPoly_Type.mod"
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" to_int_mod_ring) ("_position" x))
###         ("_applC" ("_position" to_int_mod_ring) ("_position" y)))
###       ("_position" m))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 340 of "$AFP/Fishers_Inequality/Vector_Matrix_Mod.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.modulo_class.modulo"
###       ("\<^const>Matrix.index_mat" ("_position" N)
###         ("_tuple" ("_position" i) ("_tuple_arg" ("_position" j))))
###       ("_position" m))
###     ("_applC" ("_position" to_int_mod_ring)
###       ("\<^const>Matrix.index_mat" ("_position" N')
###         ("_tuple" ("_position" i) ("_tuple_arg" ("_position" j)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>MPoly_Type.mod"
###       ("\<^const>Matrix.index_mat" ("_position" N)
###         ("_tuple" ("_position" i) ("_tuple_arg" ("_position" j))))
###       ("_position" m))
###     ("_applC" ("_position" to_int_mod_ring)
###       ("\<^const>Matrix.index_mat" ("_position" N')
###         ("_tuple" ("_position" i) ("_tuple_arg" ("_position" j)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 374 of "$AFP/Fishers_Inequality/Vector_Matrix_Mod.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.modulo_class.modulo"
###       ("_applC" ("_position" to_int_mod_ring)
###         ("_constrain" ("_position" x)
###           ("_tapp" ("_position_sort" 'a) ("_type_name" mod_ring))))
###       ("_position" m))
###     ("_applC" ("_position" to_int_mod_ring) ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>MPoly_Type.mod"
###       ("_applC" ("_position" to_int_mod_ring)
###         ("_constrain" ("_position" x)
###           ("_tapp" ("_position_sort" 'a) ("_type_name" mod_ring))))
###       ("_position" m))
###     ("_applC" ("_position" to_int_mod_ring) ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 399 of "$AFP/Fishers_Inequality/Vector_Matrix_Mod.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" to_int_mod_ring)
###       ("_constrain" ("_applC" ("_position" of_int) ("_position" x))
###         ("_tapp" ("_position_sort" 'a) ("_type_name" mod_ring))))
###     ("\<^const>Rings.modulo_class.modulo" ("_position" x) ("_position" m))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" to_int_mod_ring)
###       ("_constrain" ("_applC" ("_position" of_int) ("_position" x))
###         ("_tapp" ("_position_sort" 'a) ("_type_name" mod_ring))))
###     ("\<^const>MPoly_Type.mod" ("_position" x) ("_position" m))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Vector_Matrix_Mod"
### 1.085s elapsed time, 1.092s cpu time, 0.000s GC time
Loading theory "Draft.Vector_Matrix_ModMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Vector_Matrix_ModMoreTemplates"
### 1.201s elapsed time, 1.840s cpu time, 0.339s GC time
val it = (): unit
