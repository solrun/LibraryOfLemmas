Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "HOL-Combinatorics.Multiset_Permutations" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Polynomial_Factorization.Missing_List" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Fun_Lexorder" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
### theory "HOL-Library.Fun_Lexorder"
### 0.063s elapsed time, 0.281s cpu time, 0.015s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras" via "Card_Partitions.Set_Partition" via "HOL-Library.Disjoint_Sets")
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.114s elapsed time, 0.482s cpu time, 0.015s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Polynomial_Factorization.Missing_List")
### theory "HOL-Combinatorics.Transposition"
### 0.133s elapsed time, 0.557s cpu time, 0.015s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Monad_Syntax"
### 0.038s elapsed time, 0.156s cpu time, 0.000s GC time
Loading theory "HOL-Library.Groups_Big_Fun" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
locale comm_monoid_fun
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fun (\<^bold>*) \<^bold>1"
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.496s cpu time, 0.063s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "HOL-Library.Ramsey")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### Cannot skip proof of schematic goal statement
### theory "HOL-Library.Groups_Big_Fun"
### 0.265s elapsed time, 1.034s cpu time, 0.130s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
consts
  enumerate :: "'a set => nat => 'a"
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.456s elapsed time, 1.827s cpu time, 0.146s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras")
### theory "HOL-Library.FuncSet"
### 0.405s elapsed time, 1.594s cpu time, 0.130s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
### theory "HOL-Library.Infinite_Set"
### 0.280s elapsed time, 1.097s cpu time, 0.166s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras" via "Card_Partitions.Set_Partition")
### theory "HOL-Library.More_List"
### 0.166s elapsed time, 0.649s cpu time, 0.098s GC time
Loading theory "Abstract-Rewriting.Seq" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
locale infinitely_many
  fixes p :: "nat => bool"
  assumes "infinitely_many p"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Disjoint_Sets"
### 0.381s elapsed time, 1.394s cpu time, 0.546s GC time
Loading theory "Card_Partitions.Set_Partition" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Abstract-Rewriting.Seq"
### 0.461s elapsed time, 1.709s cpu time, 0.589s GC time
Loading theory "HOL-Library.Ramsey" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
### theory "Card_Partitions.Set_Partition"
### 0.144s elapsed time, 0.565s cpu time, 0.043s GC time
Loading theory "HOL-Library.Poly_Mapping" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type")
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### theory "HOL-Algebra.Congruence"
### 0.846s elapsed time, 3.220s cpu time, 0.886s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
class zero = type +
  fixes zero :: "'a"
consts
  choice :: "('a => bool) => ('a * 'a) set => nat => 'a"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
### theory "HOL-Library.Ramsey"
### 0.416s elapsed time, 1.634s cpu time, 0.313s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
instantiation
  poly_mapping :: (type, zero) zero
  zero_poly_mapping == zero_class.zero :: 'a \<Rightarrow>\<^sub>0 'b
instantiation
  poly_mapping :: (type, monoid_add) monoid_add
  plus_poly_mapping == plus ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
instantiation
  poly_mapping :: (type, cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly_mapping == minus ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
Found termination order: "size_list size <*mlex*> {}"
instantiation
  poly_mapping :: (type, ab_group_add) ab_group_add
  uminus_poly_mapping == uminus ::
    ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
instantiation
  poly_mapping :: (zero, zero_neq_one) zero_neq_one
  one_poly_mapping == one_class.one :: 'a \<Rightarrow>\<^sub>0 'b
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
instantiation
  poly_mapping :: (monoid_add, semiring_0) semiring_0
  times_poly_mapping == times ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
### theory "HOL-Library.Nat_Bijection"
### 0.306s elapsed time, 1.201s cpu time, 0.136s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.ExtrEqs")
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
instantiation
  poly_mapping :: (linorder, {zero,linorder}) linorder
  less_eq_poly_mapping == less_eq ::
    ('a \<Rightarrow>\<^sub>0 'b) => ('a \<Rightarrow>\<^sub>0 'b) => bool
  less_poly_mapping == less ::
    ('a \<Rightarrow>\<^sub>0 'b) => ('a \<Rightarrow>\<^sub>0 'b) => bool
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
consts
  mset :: "'a list => 'a multiset"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "HOL-Algebra.Order"
### 1.132s elapsed time, 4.300s cpu time, 1.307s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  poly_mapping :: (type, zero) size
  size_poly_mapping == size :: ('a \<Rightarrow>\<^sub>0 'b) => nat
consts
  snth :: "'a stream => nat => 'a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
consts
  stake :: "nat => 'a stream => 'a list"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.Poly_Mapping"
### 1.596s elapsed time, 6.119s cpu time, 1.629s GC time
Loading theory "Polynomials.MPoly_Type" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "Polynomials.More_MPoly_Type")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Poly_Mapping.poly_mapping" found.
consts
  flat :: "'a list stream => 'a stream"
instantiation
  mpoly :: (zero) zero
  zero_mpoly == zero_class.zero :: 'a mpoly
instantiation
  mpoly :: (monoid_add) monoid_add
  plus_mpoly == plus :: 'a mpoly => 'a mpoly => 'a mpoly
instantiation
  mpoly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_mpoly == minus :: 'a mpoly => 'a mpoly => 'a mpoly
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  mpoly :: (ab_group_add) ab_group_add
  uminus_mpoly == uminus :: 'a mpoly => 'a mpoly
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  mpoly :: (zero_neq_one) zero_neq_one
  one_mpoly == one_class.one :: 'a mpoly
instantiation
  mpoly :: (semiring_0) semiring_0
  times_mpoly == times :: 'a mpoly => 'a mpoly => 'a mpoly
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.101s elapsed time, 4.180s cpu time, 1.248s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "HOL-Library.Countable")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
### Ambiguous input (line 494 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.divide_class.divide" ("_position" x) ("_position" y))
###     ("_The" ("_position" q')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" q')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" q)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>div" ("_position" x) ("_position" y))
###     ("_The" ("_position" q')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" q')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" q)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 498 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.modulo_class.modulo" ("_position" x) ("_position" y))
###     ("_The" ("_position" r')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" r')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>mod" ("_position" x) ("_position" y))
###     ("_The" ("_position" r')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" r')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 502 of "$AFP/Polynomials/MPoly_Type.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple"
###       ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>Rings.modulo_class.modulo" ("_position" p)
###           ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple" ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>Rings.modulo_class.modulo" ("_position" p)
###           ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple"
###       ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple" ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 505 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###     ("_applC" ("_position" fst)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###     ("_applC" ("_position" fst)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 509 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.modulo_class.modulo" ("_position" p) ("_position" q))
###     ("_applC" ("_position" snd)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))
###     ("_applC" ("_position" snd)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Polynomials.MPoly_Type"
### 0.460s elapsed time, 1.813s cpu time, 0.201s GC time
Loading theory "Polynomials.More_MPoly_Type" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products")
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 1.047s elapsed time, 3.977s cpu time, 1.393s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.724s elapsed time, 2.709s cpu time, 1.260s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Polynomials.More_MPoly_Type"
### 0.630s elapsed time, 2.337s cpu time, 1.230s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras" via "Nested_Multisets_Ordinals.Multiset_More")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### theory "HOL-Library.Set_Algebras"
### 0.259s elapsed time, 1.016s cpu time, 0.222s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
consts
  prefixes :: "'a list => 'a list list"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
### theory "HOL-Algebra.Complete_Lattice"
### 0.791s elapsed time, 3.132s cpu time, 0.540s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
consts
  suffixes :: "'a list => 'a list list"
Proofs for inductive predicate(s) "rel_mset'"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
Proofs for inductive predicate(s) "list_emb"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Multiset"
### 4.791s elapsed time, 18.269s cpu time, 6.040s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
Found termination order: "size <*mlex*> {}"
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
Found termination order: "size <*mlex*> {}"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 2.142s elapsed time, 8.432s cpu time, 2.890s GC time
Loading theory "HOL-Library.Multiset_Order" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras" via "Nested_Multisets_Ordinals.Multiset_More")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_monoid_add_imp_le
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
instantiation
  multiset :: (wellorder) wellorder
instantiation
  multiset :: (preorder) order_bot
  bot_multiset == bot :: 'a multiset
instantiation
  multiset :: (linorder) distrib_lattice
  inf_multiset == inf :: 'a multiset => 'a multiset => 'a multiset
  sup_multiset == sup :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Multiset_Order"
### 0.302s elapsed time, 1.208s cpu time, 0.253s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "HOL-Combinatorics.Multiset_Permutations")
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
Found termination order: "size <*mlex*> {}"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
### theory "HOL-Algebra.Group"
### 1.884s elapsed time, 7.671s cpu time, 1.447s GC time
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring")
### theory "HOL-Library.Tree"
### 2.780s elapsed time, 10.996s cpu time, 3.274s GC time
Loading theory "Nested_Multisets_Ordinals.Multiset_More" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Algebra.FiniteProduct"
### 0.574s elapsed time, 2.301s cpu time, 0.495s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 1.099s elapsed time, 4.414s cpu time, 0.898s GC time
Loading theory "Jordan_Normal_Form.Missing_Misc" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
### theory "Jordan_Normal_Form.Missing_Misc"
### 0.133s elapsed time, 0.532s cpu time, 0.140s GC time
Loading theory "Draft.Templates" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.ExtrEqs")
### theory "Nested_Multisets_Ordinals.Multiset_More"
### 0.845s elapsed time, 3.394s cpu time, 0.788s GC time
Loading theory "Nested_Multisets_Ordinals.Duplicate_Free_Multiset" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.274s cpu time, 0.000s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking")
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### theory "Nested_Multisets_Ordinals.Duplicate_Free_Multiset"
### 0.102s elapsed time, 0.408s cpu time, 0.000s GC time
Loading theory "Design_Theory.Multisets_Extras" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras")
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
Found termination order: "{}"
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
Found termination order: "{}"
### Cannot skip proof of schematic goal statement
Found termination order: "{}"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
### theory "HOL-Library.While_Combinator"
### 0.516s elapsed time, 2.071s cpu time, 0.312s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products")
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
class ordered_semiring = ordered_comm_monoid_add + semiring +
  assumes
    "mult_left_mono":
      "!!a b c. [| a <= b; (0::'a) <= c |] ==> c * a <= c * b"
  assumes
    "mult_right_mono":
      "!!a b c. [| a <= b; (0::'a) <= c |] ==> a * c <= b * c"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### theory "Design_Theory.Multisets_Extras"
### 0.865s elapsed time, 3.471s cpu time, 0.548s GC time
Loading theory "Polynomials.More_Modules" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class")
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale module
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "module (*s)"
### Additional type variable(s) in locale specification "countable": 'a
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
### theory "Polynomials.More_Modules"
### 0.207s elapsed time, 0.832s cpu time, 0.132s GC time
Loading theory "HOL-Combinatorics.Multiset_Permutations" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Draft.Set_Multiset_Extras")
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
Found termination order: "length <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.235s elapsed time, 4.919s cpu time, 0.626s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.ExtrEqs")
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Multiset_Permutations"
### 0.955s elapsed time, 3.809s cpu time, 0.503s GC time
Loading theory "Draft.Set_Multiset_Extras" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras")
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Library.BigO"
### 0.859s elapsed time, 3.433s cpu time, 0.437s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Algebra.Ring"
### 3.076s elapsed time, 12.297s cpu time, 1.793s GC time
Loading theory "HOL-Algebra.Module" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix")
### theory "Draft.Set_Multiset_Extras"
### 0.815s elapsed time, 3.244s cpu time, 0.475s GC time
Loading theory "Jordan_Normal_Form.Missing_Ring" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.707s elapsed time, 2.825s cpu time, 0.322s GC time
Loading theory "HOL-Library.Complex_Order" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Conjugate")
instantiation
  complex :: order
  less_eq_complex == less_eq :: complex => complex => bool
  less_complex == less :: complex => complex => bool
### theory "HOL-Library.Complex_Order"
### 0.063s elapsed time, 0.253s cpu time, 0.000s GC time
Loading theory "Jordan_Normal_Form.Conjugate" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix")
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.503s elapsed time, 6.020s cpu time, 0.659s GC time
Loading theory "Matrix.Utility" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Polynomial_Factorization.Missing_List")
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Matrix.Utility"
### 0.260s elapsed time, 1.042s cpu time, 0.098s GC time
Loading theory "Polynomial_Factorization.Missing_List" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras")
Found termination order: "size_list length <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 7.463s elapsed time, 29.982s cpu time, 4.568s GC time
Loading theory "Open_Induction.Restricted_Predicates" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  list_union :: "'a list => 'a list => 'a list"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  list_diff :: "'a list => 'a list => 'a list"
### Ignoring duplicate rewrite rule:
### set ?xs1 <= set ?ys1 == list_all (%x. x : set ?ys1) ?xs1
Proofs for inductive predicate(s) "accessible_on"
  Proving monotonicity ...
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### theory "Open_Induction.Restricted_Predicates"
### 0.381s elapsed time, 1.521s cpu time, 0.155s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix")
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### Missing patterns in function definition:
### min_list [] = undefined
Found termination order: "length <*mlex*> {}"
consts
  permut_aux :: "'a list => (nat => nat) => 'a list => 'a list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
### theory "Polynomial_Factorization.Missing_List"
### 1.998s elapsed time, 7.984s cpu time, 1.018s GC time
Loading theory "Regular-Sets.Regular_Set" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking" via "Regular-Sets.NDerivative" via "Regular-Sets.Regular_Exp")
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
### theory "Jordan_Normal_Form.Conjugate"
### 3.143s elapsed time, 12.583s cpu time, 1.454s GC time
Loading theory "Well_Quasi_Orders.Infinite_Sequences" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
consts
  lang_pow :: "nat => 'a list set => 'a list set"
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
### theory "Well_Quasi_Orders.Infinite_Sequences"
### 0.136s elapsed time, 0.541s cpu time, 0.152s GC time
Loading theory "Well_Quasi_Orders.Minimal_Elements" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences")
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
### theory "Regular-Sets.Regular_Set"
### 0.278s elapsed time, 1.114s cpu time, 0.152s GC time
Loading theory "Regular-Sets.Regular_Exp" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking" via "Regular-Sets.NDerivative")
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
### theory "Jordan_Normal_Form.Missing_Ring"
### 3.931s elapsed time, 15.724s cpu time, 1.771s GC time
Loading theory "Well_Quasi_Orders.Least_Enum" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
locale minimal_element
  fixes P :: "'a => 'a => bool"
    and A :: "'a set"
  assumes "minimal_element P A"
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
locale infinitely_many1
  fixes P :: "'a => bool"
  assumes "infinitely_many1 P"
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
### Additional type variable(s) in specification of "enum_rel": 'a
### Additional type variable(s) in specification of "enum_dom": 'a
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale infinitely_many2
  fixes P :: "'a => 'a => bool"
    and N :: "'a"
  assumes "infinitely_many2 P N"
### Additional type variable(s) in specification of "enumchain_rel": 'a
### theory "Well_Quasi_Orders.Minimal_Elements"
### 0.295s elapsed time, 1.173s cpu time, 0.152s GC time
MPoly (mapping_of ?x) = ?x
?y : UNIV ==> mapping_of (MPoly ?y) = ?y
(mapping_of ?x = mapping_of ?y) = (?x = ?y)
[| ?x : UNIV; ?y : UNIV |] ==> (MPoly ?x = MPoly ?y) = (?x = ?y)
[| ?y : UNIV; !!x. ?P (mapping_of x) |] ==> ?P ?y
(!!y. y : UNIV ==> ?P (MPoly y)) ==> ?P ?x
[| ?y : UNIV; !!x. ?y = mapping_of x ==> ?P |] ==> ?P
(!!y. [| ?x = MPoly y; y : UNIV |] ==> ?P) ==> ?P
### Additional type variable(s) in specification of "enumchain_dom": 'a
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
Found termination order: "size <*mlex*> {}"
### theory "Well_Quasi_Orders.Least_Enum"
### 0.202s elapsed time, 0.812s cpu time, 0.152s GC time
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
"{[4, 3, 2, 1], [3, 4, 2, 1], [4, 2, 3, 1], [2, 4, 3, 1], [3, 2, 4, 1],
  [2, 3, 4, 1], [4, 3, 1, 2], [3, 4, 1, 2], [4, 1, 3, 2], [1, 4, 3, 2],
  [3, 1, 4, 2], [1, 3, 4, 2], [4, 2, 1, 3], [2, 4, 1, 3], [4, 1, 2, 3],
  [1, 4, 2, 3], [2, 1, 4, 3], [1, 2, 4, 3], [3, 2, 1, 4], [2, 3, 1, 4],
  [3, 1, 2, 4], [1, 3, 2, 4], [2, 1, 3, 4], [1, 2, 3, 4]}"
  :: "int list set"
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
"(Gcd (coeffs
        (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
         M [(1::'b) + (1::'b), 0::'b,
            (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
          6 +
         M [(1::'b) + (1::'b), 0::'b,
            (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
          8)),
  sdiv
   (Gcd (coeffs
          (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
           M [(1::'b) + (1::'b), 0::'b,
              (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
            6 +
           M [(1::'b) + (1::'b), 0::'b,
              (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
            8)))
   (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
    M [(1::'b) + (1::'b), 0::'b, (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
     6 +
    M [(1::'b) + (1::'b), 0::'b,
       (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
     8))"
  :: "'a * 'a mpoly"
"{''dcba'', ''cdba'', ''dbca'', ''bdca'', ''cbda'', ''bcda'', ''dcab'',
  ''cdab'', ''dacb'', ''adcb'', ''cadb'', ''acdb'', ''dbac'', ''bdac'',
  ''dabc'', ''adbc'', ''badc'', ''abdc'', ''cbad'', ''bcad'', ''cabd'',
  ''acbd'', ''bacd'', ''abcd''}"
  :: "char list set"
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
consts
  lang :: "'a rexp => 'a list set"
consts
  nullable :: "'a rexp => bool"
consts
  rexp_empty :: "'a rexp => bool"
instantiation
  rexp :: (order) order
  less_eq_rexp == less_eq :: 'a rexp => 'a rexp => bool
  less_rexp == less :: 'a rexp => 'a rexp => bool
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
### theory "Polynomial_Interpolation.Ring_Hom"
### 3.088s elapsed time, 10.587s cpu time, 1.339s GC time
Loading theory "Jordan_Normal_Form.Matrix" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  rexp :: (linorder) linorder
### theory "Regular-Sets.Regular_Exp"
### 2.053s elapsed time, 6.066s cpu time, 0.836s GC time
Loading theory "Regular-Sets.NDerivative" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking")
Loading theory "Regular-Sets.Relation_Interpretation" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method")
consts
  rel :: "('a => ('b * 'b) set) => 'a rexp => ('b * 'b) set"
consts
  word_rel :: "('a => ('b * 'b) set) => 'a list => ('b * 'b) set"
### theory "Regular-Sets.Relation_Interpretation"
### 0.074s elapsed time, 0.218s cpu time, 0.000s GC time
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  norm :: "'a rexp => 'a rexp"
consts
  nderiv :: "'a => 'a rexp => 'a rexp"
### theory "Regular-Sets.NDerivative"
### 2.155s elapsed time, 5.242s cpu time, 0.644s GC time
Loading theory "Regular-Sets.Equivalence_Checking" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method")
Proofs for coinductive predicate(s) "bisimilar"
  Proving monotonicity ...
consts
  add_atoms :: "'a rexp => 'a list => 'a list"
### theory "Regular-Sets.Equivalence_Checking"
### 0.232s elapsed time, 0.515s cpu time, 0.104s GC time
Loading theory "Regular-Sets.Regexp_Method" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
Found termination order: "length <*mlex*> {}"
consts
  rel_of_regexp :: "('a * 'a) set list => nat rexp => ('a * 'a) set"
consts
  rel_eq :: "nat rexp * nat rexp => ('a * 'a) set list => bool"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
val regexp_conv = fn: Proof.context -> conv
### theory "Regular-Sets.Regexp_Method"
### 0.544s elapsed time, 1.192s cpu time, 0.201s GC time
Loading theory "Well_Quasi_Orders.Almost_Full" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences")
### theory "Jordan_Normal_Form.Matrix"
### 3.168s elapsed time, 7.472s cpu time, 1.039s GC time
Loading theory "Jordan_Normal_Form.Gauss_Jordan_Elimination" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "af"
  Proving monotonicity ...
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Well_Quasi_Orders.Almost_Full"
### 0.884s elapsed time, 1.919s cpu time, 0.279s GC time
Loading theory "Well_Quasi_Orders.Minimal_Bad_Sequences" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations")
### theory "Jordan_Normal_Form.Gauss_Jordan_Elimination"
### 0.970s elapsed time, 2.145s cpu time, 0.409s GC time
locale mbs
  fixes A :: "'a set"
### Cannot skip proof of schematic goal statement
### theory "Well_Quasi_Orders.Minimal_Bad_Sequences"
### 0.262s elapsed time, 0.495s cpu time, 0.130s GC time
Loading theory "Well_Quasi_Orders.Almost_Full_Relations" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils")
Found termination order: "{}"
Found termination order: "{}"
### theory "Well_Quasi_Orders.Almost_Full_Relations"
### 0.278s elapsed time, 0.354s cpu time, 0.091s GC time
Loading theory "Polynomials.Utils" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class")
Loading theory "Well_Quasi_Orders.Well_Quasi_Orders" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products")
class wqo = preorder +
  assumes "good": "!!f. good (<=) f"
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
### theory "Well_Quasi_Orders.Well_Quasi_Orders"
### 0.221s elapsed time, 0.499s cpu time, 0.113s GC time
### theory "Polynomials.Utils"
### 0.237s elapsed time, 0.516s cpu time, 0.113s GC time
Loading theory "Groebner_Bases.General" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class")
Loading theory "Polynomials.Power_Products" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class")
### Missing patterns in function definition:
### max_list [] = undefined
Found termination order: "length <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  insort_wrt :: "('c => 'c => bool) => 'c => 'c list => 'c list"
consts
  remdups_wrt :: "('a => 'b) => 'a list => 'a list"
consts
  map_idx :: "('a => nat => 'b) => 'a list => nat => 'b list"
consts
  map_dup :: "('a => 'b) => ('a => 'b) => 'a list => 'b list"
consts
  filter_min_aux :: "'a list => 'a list => 'a list"
### theory "Groebner_Bases.General"
### 0.523s elapsed time, 1.151s cpu time, 0.211s GC time
class plus = type +
  fixes plus :: "'a => 'a => 'a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class ninv_comm_monoid_add = comm_monoid_add +
  assumes "plus_eq_zero": "!!s t. s + t = (0::'a) ==> s = (0::'a)"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class lcs_powerprod = comm_powerprod +
  fixes lcs :: "'a => 'a => 'a"
  assumes "adds_lcs": "!!s t. s adds lcs s t"
  assumes "lcs_adds": "!!s u t. [| s adds u; t adds u |] ==> lcs s t adds u"
  assumes "lcs_comm": "!!s t. lcs s t = lcs t s"
class graded_dickson_powerprod = ulcs_powerprod +
  assumes "ex_dgrad": "EX d. dickson_grading d"
class dickson_powerprod = ulcs_powerprod +
  assumes "dickson": "almost_full_on (adds) UNIV"
class semi_canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_imp_add": "!!a b. a <= b ==> EX c. b = a + c"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  ninv_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class add_linorder_min = add_linorder +
  assumes "zero_min": "!!x. (0::'a) <= x"
instantiation
  nat :: add_linorder
instantiation
  nat :: add_linorder_min
instantiation
  nat :: add_wellorder
instantiation
  int :: add_linorder_group
instantiation
  rat :: add_linorder_group
instantiation
  real :: add_linorder_group
locale ordered_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "ordered_powerprod (\<preceq>) (\<prec>)"
locale gd_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "gd_powerprod (\<preceq>) (\<prec>)"
locale od_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "od_powerprod (\<preceq>) (\<prec>)"
instantiation
  fun :: (type, add_linorder) lcs_powerprod
  lcs_fun == lcs :: ('a => 'b) => ('a => 'b) => 'a => 'b
class wellorder = linorder +
  assumes
    "less_induct": "!!P a. (!!x. (!!y. y < x ==> P y) ==> P x) ==> P a"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class wellorder = linorder +
  assumes
    "less_induct": "!!P a. (!!x. (!!y. y < x ==> P y) ==> P x) ==> P a"
instantiation
  poly_mapping :: (type, add_linorder) lcs_powerprod
  lcs_poly_mapping == lcs ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "Polynomials.Power_Products"
### 7.326s elapsed time, 8.819s cpu time, 1.351s GC time
Loading theory "Polynomials.MPoly_Type_Class" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered")
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
### Ambiguous input (line 1415 of "$AFP/Polynomials/MPoly_Type_Class.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monomial)
###       ("_cargs" ("_applC" ("_position" Sum_any) ("_position" f))
###         ("_position" a)))
###     ("\<^const>Series.suminf_binder" ("_position" c)
###       ("_applC" ("_position" monomial)
###         ("_cargs" ("_applC" ("_position" f) ("_position" c))
###           ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monomial)
###       ("_cargs" ("_applC" ("_position" Sum_any) ("_position" f))
###         ("_position" a)))
###     ("_Sum_any" ("_position" c)
###       ("_applC" ("_position" monomial)
###         ("_cargs" ("_applC" ("_position" f) ("_position" c))
###           ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
### Ambiguous input (line 1454 of "$AFP/Polynomials/MPoly_Type_Class.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monom_mult)
###       ("_cargs" ("_applC" ("_position" Sum_any) ("_position" f))
###         ("_cargs" ("_position" t) ("_position" p))))
###     ("\<^const>Series.suminf_binder" ("_position" c)
###       ("_applC" ("_position" monom_mult)
###         ("_cargs" ("_applC" ("_position" f) ("_position" c))
###           ("_cargs" ("_position" t) ("_position" p)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monom_mult)
###       ("_cargs" ("_applC" ("_position" Sum_any) ("_position" f))
###         ("_cargs" ("_position" t) ("_position" p))))
###     ("_Sum_any" ("_position" c)
###       ("_applC" ("_position" monom_mult)
###         ("_cargs" ("_applC" ("_position" f) ("_position" c))
###           ("_cargs" ("_position" t) ("_position" p)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1463 of "$AFP/Polynomials/MPoly_Type_Class.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monom_mult)
###       ("_cargs" ("_position" c)
###         ("_cargs" ("_position" t)
###           ("_applC" ("_position" Sum_any) ("_position" f)))))
###     ("\<^const>Series.suminf_binder" ("_position" p)
###       ("_applC" ("_position" monom_mult)
###         ("_cargs" ("_position" c)
###           ("_cargs" ("_position" t)
###             ("_applC" ("_position" f) ("_position" p))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monom_mult)
###       ("_cargs" ("_position" c)
###         ("_cargs" ("_position" t)
###           ("_applC" ("_position" Sum_any) ("_position" f)))))
###     ("_Sum_any" ("_position" p)
###       ("_applC" ("_position" monom_mult)
###         ("_cargs" ("_position" c)
###           ("_cargs" ("_position" t)
###             ("_applC" ("_position" f) ("_position" p))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
### theory "Polynomials.MPoly_Type_Class"
### 1.487s elapsed time, 1.792s cpu time, 0.342s GC time
Loading theory "Polynomials.MPoly_Type_Class_Ordered" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class")
class the_min = linorder +
  fixes the_min :: "'a"
  assumes "the_min_min": "!!x. the_min <= x"
instantiation
  nat :: the_min
  the_min_nat == the_min :: nat
instantiation
  unit :: the_min
  the_min_unit == the_min :: unit
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale ordered_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "ordered_powerprod (\<preceq>) (\<prec>)"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale ordered_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "ordered_powerprod (\<preceq>) (\<prec>)"
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale gd_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "gd_powerprod (\<preceq>) (\<prec>)"
locale od_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "od_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Polynomials.MPoly_Type_Class_Ordered"
### 6.609s elapsed time, 10.528s cpu time, 5.265s GC time
Loading theory "Groebner_Bases.More_MPoly_Type_Class" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix")
locale module
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "module (*s)"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Groebner_Bases.More_MPoly_Type_Class"
### 0.930s elapsed time, 1.046s cpu time, 0.160s GC time
Loading theory "Groebner_Bases.Macaulay_Matrix" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates" via "Draft.Matrix_Vector_Extras")
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
[| Keys (set ?ps) <= set ?ts; ?v : carrier_vec (length ?ps) |]
==> row_to_poly ?ts (?v \<^sub>v* polys_to_mat ?ts ?ps) =
    sum_list (map2 (\<cdot>) (list_of_vec ?v) ?ps)
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Groebner_Bases.Macaulay_Matrix"
### 1.390s elapsed time, 1.577s cpu time, 0.252s GC time
Loading theory "Draft.Matrix_Vector_Extras" (required by "Draft.Matrix_Vector_ExtrasMoreTemplates")
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale injective_lim
  fixes A :: "'a set"
    and f :: "'a => 'b"
  assumes "injective_lim A f"
locale injective_lim
  fixes A :: "'a set"
    and f :: "'a => 'b"
  assumes "injective_lim A f"
locale inj_on_01_hom
  fixes hom :: "'a => 'b"
  assumes "inj_on_01_hom hom"
class zero_neq_one = one + zero +
  assumes "zero_neq_one": "(0::'a) ~= (1::'a)"
### theory "Draft.Matrix_Vector_Extras"
### 0.977s elapsed time, 1.085s cpu time, 0.146s GC time
Loading theory "Draft.Matrix_Vector_ExtrasMoreTemplates"
val templateLemmas =
   [("Matrix_Vector_Extras.all_ones_mat_dim_col",
     "dim_col (J\<^sub>m ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Matrix_Vector_Extras.all_ones_mat_dim_row",
     "dim_row (J\<^sub>m ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Matrix_Vector_Extras.dim_vec_all_ones", "dim_vec (u\<^sub>v ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Matrix_Vector_Extras.sum_vec_list",
     "sum_list (list_of_vec ?v) = sum_vec ?v",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Matrix_Vector_Extras.mset_vec_same_size",
     "dim_vec ?v = size (vec_mset ?v)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Matrix_Vector_Extras.lift_01_mat_simp",
     "dim_col (lift_01_mat ?M) = dim_col ?M",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Matrix_Vector_Extras.lift_01_mat_simp",
     "dim_row (lift_01_mat ?M) = dim_row ?M",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Matrix_Vector_Extras.lift_01_vec_simp",
     "dim_vec (lift_01_vec ?v) = dim_vec ?v",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Matrix_Vector_Extras.transpose_mat_elems",
     "elements_mat ?A = elements_mat ?A\<^sup>T",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Matrix_Vector_Extras.vec_mset_set",
     "set\<^sub>v ?v = set_mset (vec_mset ?v)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Matrix_Vector_Extras.mset_vec_eq_mset_list",
     "vec_mset ?v = mset (list_of_vec ?v)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Matrix_Vector_Extras.dim_vec_vCons_ne_0", "0 < dim_vec (vCons ?a ?v)",
     template_inequation
      (less_than, template_hole 2,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Matrix_Vector_Extras.vec_prod_zero",
     "0\<^sub>v ?n \<bullet> 0\<^sub>v ?n = (0::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Matrix_Vector_Extras.dim_vec_mult_vec_mat",
     "dim_vec (?v \<^sub>v* ?A) = dim_col ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Matrix_Vector_Extras.vec_count_lt_dim",
     "count_vec ?v ?a <= dim_vec ?v",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Matrix_Vector_Extras.lift_01_mat_carrier",
     "lift_01_mat ?M : carrier_mat (dim_row ?M) (dim_col ?M)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Matrix_Vector_Extras.sum_vec_vCons",
     "sum_vec (vCons ?a ?v) = ?a + sum_vec ?v",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Matrix_Vector_Extras.count_vec_vNil", "count_vec vNil ?a = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_hole 0)))),
         template_var 0),
       template_hole 2)),
    ("Matrix_Vector_Extras.map_mat_elements",
     "elements_mat (map_mat ?f ?A) = ?f ` elements_mat ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Matrix_Vector_Extras.vec_mset_vCons",
     "vec_mset (vCons ?x ?v) = add_mset ?x (vec_mset ?v)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Matrix_Vector_Extras.sum_vec_mset",
     "sum_vec ?v = (SUM x:#mset (list_of_vec ?v). x)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Matrix_Vector_Extras.vec_count_eq_list_count",
     "count (mset ?xs) ?a = count_vec (vec_of_list ?xs) ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("Matrix_Vector_Extras.vec_set_mset_contains_iff",
     "(?a \<in>$ ?v) = (?a :# vec_mset ?v)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Matrix_Vector_Extras.map_vec_mat_cols",
     "map (map_vec ?f) (cols ?M) = cols (map_mat ?f ?M)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Matrix_Vector_Extras.map_vec_mat_rows",
     "map (map_vec ?f) (rows ?M) = rows (map_mat ?f ?M)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Matrix_Vector_Extras.vec_mset_img_map",
     "image_mset ?f (mset ?xs) = vec_mset (map_vec ?f (vec_of_list ?xs))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Matrix_Vector_Extras.vec_contains_count_gt1_iff",
     "(?a \<in>$ ?v) = (1 <= count_vec ?v ?a)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Matrix_Vector_Extras.map_mat_compose",
     "map_mat ?f (map_mat ?g ?A) = map_mat (?f o ?g) ?A",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Matrix_Vector_Extras.map_vec_compose",
     "map_vec ?f (map_vec ?g ?v) = map_vec (?f o ?g) ?v",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Matrix_Vector_Extras.all_ones_index",
     "?i < ?n ==> u\<^sub>v ?n $ ?i = (1::?'a)",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_hole 0))),
    ("Matrix_Vector_Extras.setv_vec_mset_not_in_iff",
     "(?a ~: set\<^sub>v ?v) = (?a ~:# vec_mset ?v)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Matrix_Vector_Extras.setv_not_in_count0_iff",
     "(?a ~: set\<^sub>v ?v) = (count_vec ?v ?a = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_app (template_hole 4, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_hole 0))),
    ("Matrix_Vector_Extras.map_vec_vCons",
     "vCons (?f ?a) (map_vec ?f ?v) = map_vec ?f (vCons ?a ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_var 2, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Matrix_Vector_Extras.count_vec_empty",
     "dim_vec ?v = 0 ==> count_vec ?v ?a = 0",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_hole 2))),
    ("Matrix_Vector_Extras.setv_col_subset_mat_elems",
     "?v : set (cols ?M) ==> set\<^sub>v ?v <= elements_mat ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Matrix_Vector_Extras.setv_row_subset_mat_elems",
     "?v : set (rows ?M) ==> set\<^sub>v ?v <= elements_mat ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Matrix_Vector_Extras.count_vec_alt_list",
     "count_vec ?v ?a = length (filter ((=) ?a) (list_of_vec ?v))",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 1))))),
    ("Matrix_Vector_Extras.all_ones_vec_smult",
     "?i < ?n ==> (?k \<cdot>\<^sub>v u\<^sub>v ?n) $ ?i = ?k",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1))),
           template_var 2),
         template_var 0))),
    ("Matrix_Vector_Extras.col_elems_subset_mat",
     "?i < dim_col ?N ==> set\<^sub>v (col ?N ?i) <= elements_mat ?N",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Matrix_Vector_Extras.row_elems_subset_mat",
     "?i < dim_row ?N ==> set\<^sub>v (row ?N ?i) <= elements_mat ?N",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Matrix_Vector_Extras.vCons_set_contains_in",
     "?a \<in>$ ?v ==> set\<^sub>v (vCons ?a ?v) = set\<^sub>v ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Matrix_Vector_Extras.vec_contains_img",
     "?a \<in>$ ?v ==> ?f ?a \<in>$ map_vec ?f ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_var 0, template_var 2)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Matrix_Vector_Extras.mset_cols_index_map",
     "image_mset (col ?M) (mset_set {0..<dim_col ?M}) = mset (cols ?M)",
     template_equation
      (template_app
        (template_app (template_hole 7, t_empty),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 0)))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Matrix_Vector_Extras.mset_rows_index_map",
     "image_mset (row ?M) (mset_set {0..<dim_row ?M}) = mset (rows ?M)",
     template_equation
      (template_app
        (template_app (template_hole 7, t_empty),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 0)))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Matrix_Vector_Extras.lift_01_vec_simp",
     "?i < dim_vec ?v ==> lift_01_vec ?v $ ?i = of_zero_neq_one (?v $ ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Matrix_Vector_Extras.vec_elem_exists_mset",
     "(EX i:{..<dim_vec ?v}. ?v $ i = ?x) = (?x :# vec_mset ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1))),
         t_empty),
       template_app
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("Matrix_Vector_Extras.sum_count_vec",
     "finite (set\<^sub>v ?v) ==>
      sum (count_vec ?v) (set\<^sub>v ?v) = dim_vec ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 5, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Matrix_Vector_Extras.row_map_mat",
     "?i < dim_row ?A ==> row (map_mat ?f ?A) ?i = map_vec ?f (row ?A ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("Matrix_Vector_Extras.index_mult_vec_mat",
     "?j < dim_col ?A ==> (?v \<^sub>v* ?A) $ ?j = ?v \<bullet> col ?A ?j",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("Matrix_Vector_Extras.count_vec_alt",
     "count_vec ?v ?x = card {i. ?v $ i = ?x & i < dim_vec ?v}",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_var 0),
       template_app
        (template_hole 6, template_app (template_hole 5, t_empty)))),
    ("Matrix_Vector_Extras.vCons_set_contains_add",
     "?a ~: set\<^sub>v ?v ==>
      set\<^sub>v (vCons ?a ?v) = set\<^sub>v ?v Un {?a}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app (template_hole 5, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("Matrix_Vector_Extras.count_vec_count_mset",
     "vec_mset ?v = image_mset ?f ?A ==>
      count_vec ?v ?a = count (image_mset ?f ?A) ?a",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 3),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 3)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Matrix_Vector_Extras.count_vec_sum_ones_alt",
     "set\<^sub>v ?v <= {0::?'a, 1::?'a} ==>
      of_nat (count_vec ?v (1::?'a)) = sum_vec ?v",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_var 0),
          template_app
           (template_app (template_hole 8, template_hole 7),
            template_app
             (template_app (template_hole 8, template_hole 6),
              template_hole 5)))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 6)),
         template_app (template_hole 0, template_var 0)))),
    ("Matrix_Vector_Extras.elem_exists_count_min",
     "EX i:{..<dim_vec ?v}. ?v $ i = ?x ==> 1 <= count_vec ?v ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 1))),
              t_empty)
            )],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Matrix_Vector_Extras.vec_contains_row_elements_mat",
     "[| ?i < dim_row ?M; ?a \<in>$ row ?M ?i |] ==> ?a : elements_mat ?M",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Matrix_Vector_Extras.vec_contains_col_elements_mat",
     "[| ?j < dim_col ?M; ?a \<in>$ col ?M ?j |] ==> ?a : elements_mat ?M",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Matrix_Vector_Extras.set_cols_carrier",
     "[| ?A : carrier_mat ?m ?n; ?v : set (cols ?A) |]
      ==> ?v : carrier_vec ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Matrix_Vector_Extras.sum_count_vec_subset",
     "[| finite ?A; set\<^sub>v ?v <= ?A |]
      ==> sum (count_vec ?v) ?A = dim_vec ?v",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 0),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Matrix_Vector_Extras.count_vec_vCons",
     "count_vec (vCons ?aa ?v) ?a =
      (if ?aa = ?a then count_vec ?v ?a + 1 else count_vec ?v ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 1)),
                     template_var 0)),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1)),
               template_var 0))
           ))),
    ("Matrix_Vector_Extras.sum_vec_one_zero",
     "(!!i. i < dim_vec ?v ==> ?v $ i <= 1) ==>
      sum_vec ?v <= int (dim_vec ?v)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 0,
           template_app (template_hole 5, template_var 0))))),
    ("Matrix_Vector_Extras.all_ones_mat_index",
     "[| ?i < dim_row (J\<^sub>m ?n); ?j < dim_col (J\<^sub>m ?n) |]
      ==> J\<^sub>m ?n $$ (?i, ?j) = (1::?'c)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 1))),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 1)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_hole 0))),
    ("Matrix_Vector_Extras.col_prop_cond",
     "[| !!j. j < dim_col ?M ==> ?P (col ?M j); ?c : set (cols ?M) |]
      ==> ?P ?c",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 2)))
            )],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Matrix_Vector_Extras.row_prop_cond",
     "[| !!i. i < dim_row ?M ==> ?P (row ?M i); ?r : set (rows ?M) |]
      ==> ?P ?r",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 2)))
            )],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Matrix_Vector_Extras.lift_01_mat_simp",
     "[| ?i < dim_row ?M; ?j < dim_col ?M |]
      ==> lift_01_mat ?M $$ (?i, ?j) = of_zero_neq_one (?M $$ (?i, ?j))",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)))))),
    ("Matrix_Vector_Extras.vec_contains_obtains_index",
     "[| ?a \<in>$ ?v; !!i. [| i < dim_vec ?v; ?v $ i = ?a |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Matrix_Vector_Extras.sum_setv_subset_eq",
     "[| finite ?A; set\<^sub>v ?v <= ?A |]
      ==> sum (count_vec ?v) (set\<^sub>v ?v) = sum (count_vec ?v) ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_app (template_hole 2, t_empty), template_var 1)))),
    ("Matrix_Vector_Extras.obtain_col_index",
     "[| ?c : set (cols ?M);
         !!j. [| col ?M j = ?c; j < dim_col ?M |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Matrix_Vector_Extras.obtain_row_index",
     "[| ?r : set (rows ?M);
         !!i. [| row ?M i = ?r; i < dim_row ?M |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Matrix_Vector_Extras.count_vec_sum_ones",
     "(!!i. i < dim_vec ?v ==> ?v $ i = (1::?'a) | ?v $ i = (0::?'a)) ==>
      of_nat (count_vec ?v (1::?'a)) = sum_vec ?v",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 5)),
         template_app (template_hole 0, template_var 0)))),
    ("Matrix_Vector_Extras.lift_01_vec_count",
     "[| set\<^sub>v ?v <= {0::?'a, 1::?'a}; ?x : {0::?'a, 1::?'a} |]
      ==> count_vec ?v ?x =
          count_vec (lift_01_vec ?v) (of_zero_neq_one ?x)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 12, template_var 1),
          template_app
           (template_app (template_hole 11, template_hole 10),
            template_app
             (template_app (template_hole 11, template_hole 9),
              template_hole 8))),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 11, template_hole 10),
                template_app
                 (template_app (template_hole 11, template_hole 9),
                  template_hole 8)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1))),
           template_app (template_hole 0, template_var 0))))),
    ("Matrix_Vector_Extras.count_vec_sum_zeros",
     "(!!i. i < dim_vec ?v ==> ?v $ i = (1::?'a) | ?v $ i = (0::?'a)) ==>
      of_nat (count_vec ?v (0::?'a)) = of_nat (dim_vec ?v) - sum_vec ?v",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_hole 5)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 4,
               template_app (template_hole 10, template_var 0))),
           template_app (template_hole 0, template_var 0))))),
    ("Matrix_Vector_Extras.count_vec_two_elems",
     "(!!i. i < dim_vec ?v ==> ?v $ i = (1::?'a) | ?v $ i = (0::?'a)) ==>
      count_vec ?v (1::?'a) + count_vec ?v (0::?'a) = dim_vec ?v",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_hole 5)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_hole 4)),
         template_app (template_hole 9, template_var 0)))),
    ("Matrix_Vector_Extras.sum_vec_vCons_lt",
     "[| !!i. i < dim_vec (vCons ?a ?v) ==> vCons ?a ?v $ i <= ?n;
         sum_vec ?v <= ?m |]
      ==> sum_vec (vCons ?a ?v) <= ?n + ?m",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Matrix_Vector_Extras.smult_scalar_prod_sum",
     "[| ?vx : carrier_vec ?n; ?vy : carrier_vec ?n |]
      ==> (SUM i = 0..<?n.
           (?x \<cdot>\<^sub>v ?vx) $ i * (?y \<cdot>\<^sub>v ?vy) $ i) =
          ?x * ?y * (?vx \<bullet> ?vy)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app (template_hole 8, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 3)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2))))),
    ("Matrix_Vector_Extras.transpose_mat_mult_entries",
     "[| ?i < dim_row ?A; ?j < dim_row ?A |]
      ==> (?A * ?A\<^sup>T) $$ (?i, ?j) =
          (SUM k = 0..<dim_col ?A. ?A $$ (?i, k) * ?A $$ (?j, k))",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 10, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 10, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_app (template_hole 6, template_var 1))),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 1)))))),
    ("Matrix_Vector_Extras.index_to_col_card_size_prop",
     "[| ?i < dim_row ?M; !!j. j < dim_col ?M ==> ?P j = ?Q (col ?M j) |]
      ==> card {j. j < dim_col ?M & ?P j} =
          size (filter_mset ?Q (mset (cols ?M)))",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 12, template_var 2)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2))))))),
    ("Matrix_Vector_Extras.index_to_row_card_size_prop",
     "[| ?j < dim_col ?M; !!i. i < dim_row ?M ==> ?P i = ?Q (row ?M i) |]
      ==> card {i. i < dim_row ?M & ?P i} =
          size (filter_mset ?Q (mset (rows ?M)))",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 12, template_var 2)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2))))))),
    ("Matrix_Vector_Extras.scalar_prod_double_sum_fn_vec",
     "(!!j. j < ?k ==> dim_vec (?f j) = ?n) ==>
      vec ?n (%i. SUM j = 0..<?k. ?c j * ?f j $ i) \<bullet>
      vec ?n (%i. SUM j = 0..<?k. ?c j * ?f j $ i) =
      (SUM j1 = 0..<?k. ?c j1 * ?c j1 * (?f j1 \<bullet> ?f j1)) +
      (SUM j1 = 0..<?k.
       SUM j2:{0..<?k} - {j1}. ?c j1 * ?c j2 * (?f j1 \<bullet> ?f j2))",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 1), t_empty)),
           template_app
            (template_app (template_hole 9, template_var 1), t_empty)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 8, t_empty),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 3))),
           template_app
            (template_app (template_hole 8, t_empty),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 3))))))]:
   (string * thm * template) list
### theory "Draft.Matrix_Vector_ExtrasMoreTemplates"
### 0.770s elapsed time, 1.152s cpu time, 0.152s GC time
val it = (): unit
