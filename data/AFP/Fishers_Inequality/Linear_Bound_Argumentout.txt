Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras" via "Draft.Set_Multiset_Extras" via "HOL-Combinatorics.Multiset_Permutations" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Polynomial_Factorization.Missing_List" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras" via "HOL-Library.Multiset")
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.110s elapsed time, 0.465s cpu time, 0.016s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Polynomial_Factorization.Missing_List")
### theory "HOL-Library.Monad_Syntax"
### 0.037s elapsed time, 0.149s cpu time, 0.000s GC time
Loading theory "HOL-Library.Fun_Lexorder" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
### theory "HOL-Combinatorics.Transposition"
### 0.164s elapsed time, 0.677s cpu time, 0.016s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras" via "Card_Partitions.Set_Partition" via "HOL-Library.Disjoint_Sets")
### theory "HOL-Library.Fun_Lexorder"
### 0.054s elapsed time, 0.215s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
### theory "HOL-Library.Function_Algebras"
### 0.088s elapsed time, 0.347s cpu time, 0.000s GC time
Loading theory "HOL-Library.Groups_Big_Fun" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
locale comm_monoid_fun
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fun (\<^bold>*) \<^bold>1"
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.419s elapsed time, 1.679s cpu time, 0.127s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### Cannot skip proof of schematic goal statement
### theory "HOL-Library.Groups_Big_Fun"
### 0.263s elapsed time, 1.033s cpu time, 0.153s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "HOL-Library.Ramsey")
### theory "HOL-Library.FuncSet"
### 0.405s elapsed time, 1.582s cpu time, 0.189s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
consts
  enumerate :: "'a set => nat => 'a"
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Computational_Algebra.Fraction_Field"
### 1.012s elapsed time, 3.817s cpu time, 0.769s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras" via "Card_Partitions.Set_Partition")
### theory "HOL-Library.Infinite_Set"
### 0.473s elapsed time, 1.677s cpu time, 0.564s GC time
Loading theory "Abstract-Rewriting.Seq" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
locale infinitely_many
  fixes p :: "nat => bool"
  assumes "infinitely_many p"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Disjoint_Sets"
### 0.307s elapsed time, 1.203s cpu time, 0.158s GC time
Loading theory "Card_Partitions.Set_Partition" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "Abstract-Rewriting.Seq"
### 0.418s elapsed time, 1.649s cpu time, 0.191s GC time
Loading theory "HOL-Library.Ramsey" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
### theory "Card_Partitions.Set_Partition"
### 0.159s elapsed time, 0.627s cpu time, 0.095s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
### theory "HOL-Algebra.Congruence"
### 1.017s elapsed time, 3.812s cpu time, 0.952s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
### theory "HOL-Library.More_List"
### 0.206s elapsed time, 0.804s cpu time, 0.134s GC time
Loading theory "HOL-Library.Poly_Mapping" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type")
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
consts
  choice :: "('a => bool) => ('a * 'a) set => nat => 'a"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### theory "HOL-Library.Ramsey"
### 0.730s elapsed time, 2.707s cpu time, 1.115s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
class zero = type +
  fixes zero :: "'a"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
consts
  mset :: "'a list => 'a multiset"
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
Found termination order: "size_list size <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  poly_mapping :: (type, zero) zero
  zero_poly_mapping == zero_class.zero :: 'a \<Rightarrow>\<^sub>0 'b
instantiation
  poly_mapping :: (type, monoid_add) monoid_add
  plus_poly_mapping == plus ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
### theory "HOL-Library.Nat_Bijection"
### 0.359s elapsed time, 1.413s cpu time, 0.185s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  poly_mapping :: (type, cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly_mapping == minus ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
instantiation
  poly_mapping :: (type, ab_group_add) ab_group_add
  uminus_poly_mapping == uminus ::
    ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
instantiation
  poly_mapping :: (zero, zero_neq_one) zero_neq_one
  one_poly_mapping == one_class.one :: 'a \<Rightarrow>\<^sub>0 'b
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
instantiation
  poly_mapping :: (monoid_add, semiring_0) semiring_0
  times_poly_mapping == times ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Algebra.Order"
### 1.217s elapsed time, 4.644s cpu time, 1.252s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
instantiation
  poly_mapping :: (linorder, {zero,linorder}) linorder
  less_eq_poly_mapping == less_eq ::
    ('a \<Rightarrow>\<^sub>0 'b) => ('a \<Rightarrow>\<^sub>0 'b) => bool
  less_poly_mapping == less ::
    ('a \<Rightarrow>\<^sub>0 'b) => ('a \<Rightarrow>\<^sub>0 'b) => bool
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
consts
  sdrop :: "nat => 'a stream => 'a stream"
instantiation
  poly_mapping :: (type, zero) size
  size_poly_mapping == size :: ('a \<Rightarrow>\<^sub>0 'b) => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.Poly_Mapping"
### 1.998s elapsed time, 7.522s cpu time, 2.580s GC time
Loading theory "Polynomials.MPoly_Type" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "Polynomials.More_MPoly_Type")
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
consts
  flat :: "'a list stream => 'a stream"
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Poly_Mapping.poly_mapping" found.
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  mpoly :: (zero) zero
  zero_mpoly == zero_class.zero :: 'a mpoly
instantiation
  mpoly :: (monoid_add) monoid_add
  plus_mpoly == plus :: 'a mpoly => 'a mpoly => 'a mpoly
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  mpoly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_mpoly == minus :: 'a mpoly => 'a mpoly => 'a mpoly
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
instantiation
  mpoly :: (ab_group_add) ab_group_add
  uminus_mpoly == uminus :: 'a mpoly => 'a mpoly
### theory "HOL-Library.Stream"
### 1.342s elapsed time, 5.099s cpu time, 1.633s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products" via "HOL-Library.Countable")
instantiation
  mpoly :: (zero_neq_one) zero_neq_one
  one_mpoly == one_class.one :: 'a mpoly
instantiation
  mpoly :: (semiring_0) semiring_0
  times_mpoly == times :: 'a mpoly => 'a mpoly => 'a mpoly
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 1.243s elapsed time, 4.705s cpu time, 1.636s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Ambiguous input (line 494 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.divide_class.divide" ("_position" x) ("_position" y))
###     ("_The" ("_position" q')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" q')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" q)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>div" ("_position" x) ("_position" y))
###     ("_The" ("_position" q')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" q')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" q)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 498 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.modulo_class.modulo" ("_position" x) ("_position" y))
###     ("_The" ("_position" r')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" r')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>mod" ("_position" x) ("_position" y))
###     ("_The" ("_position" r')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" r')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 502 of "$AFP/Polynomials/MPoly_Type.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple"
###       ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>Rings.modulo_class.modulo" ("_position" p)
###           ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple" ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>Rings.modulo_class.modulo" ("_position" p)
###           ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple"
###       ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple" ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 505 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###     ("_applC" ("_position" fst)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###     ("_applC" ("_position" fst)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 509 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.modulo_class.modulo" ("_position" p) ("_position" q))
###     ("_applC" ("_position" snd)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))
###     ("_applC" ("_position" snd)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Polynomials.MPoly_Type"
### 0.569s elapsed time, 2.267s cpu time, 0.300s GC time
Loading theory "Polynomials.More_MPoly_Type" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.472s elapsed time, 1.877s cpu time, 0.278s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
### theory "HOL-Library.Set_Algebras"
### 0.242s elapsed time, 0.964s cpu time, 0.141s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras" via "Nested_Multisets_Ordinals.Multiset_More")
### theory "Polynomials.More_MPoly_Type"
### 0.350s elapsed time, 1.392s cpu time, 0.232s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### theory "HOL-Algebra.Complete_Lattice"
### 0.762s elapsed time, 3.023s cpu time, 0.462s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
consts
  prefixes :: "'a list => 'a list list"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Multiset"
### 5.249s elapsed time, 19.928s cpu time, 6.181s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  suffixes :: "'a list => 'a list list"
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Library.Sublist"
### 2.079s elapsed time, 7.992s cpu time, 2.585s GC time
Loading theory "HOL-Library.Multiset_Order" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras" via "Nested_Multisets_Ordinals.Multiset_More")
Found termination order: "size <*mlex*> {}"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
class preorder = ord +
  assumes "less_le_not_le": "!!x y. (x < y) = (x <= y & ~ y <= x)"
    and "order_refl": "!!x. x <= x"
    and "order_trans": "!!x y z. [| x <= y; y <= z |] ==> x <= z"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_monoid_add_imp_le
instantiation
  multiset :: (wellorder) wellorder
instantiation
  multiset :: (preorder) order_bot
  bot_multiset == bot :: 'a multiset
instantiation
  multiset :: (linorder) distrib_lattice
  inf_multiset == inf :: 'a multiset => 'a multiset => 'a multiset
  sup_multiset == sup :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Multiset_Order"
### 0.300s elapsed time, 1.187s cpu time, 0.224s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras" via "Draft.Set_Multiset_Extras" via "HOL-Combinatorics.Multiset_Permutations")
### theory "HOL-Algebra.Group"
### 2.215s elapsed time, 8.524s cpu time, 2.678s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
Found termination order: "size <*mlex*> {}"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
### theory "HOL-Library.Tree"
### 2.697s elapsed time, 10.440s cpu time, 2.945s GC time
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 1.180s elapsed time, 4.427s cpu time, 2.509s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 1.752s elapsed time, 6.700s cpu time, 2.785s GC time
Loading theory "Jordan_Normal_Form.Missing_Misc" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### theory "Jordan_Normal_Form.Missing_Misc"
### 0.124s elapsed time, 0.500s cpu time, 0.115s GC time
Loading theory "Nested_Multisets_Ordinals.Multiset_More" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras")
### Cannot skip proof of schematic goal statement
### theory "HOL-Algebra.Coset"
### 1.944s elapsed time, 7.473s cpu time, 2.899s GC time
Loading theory "Draft.Templates" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.ExtrEqs")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.270s cpu time, 0.000s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
Found termination order: "{}"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
Found termination order: "{}"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
Found termination order: "{}"
### theory "HOL-Library.While_Combinator"
### 0.471s elapsed time, 1.883s cpu time, 0.286s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products")
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### theory "Nested_Multisets_Ordinals.Multiset_More"
### 0.764s elapsed time, 3.050s cpu time, 0.420s GC time
Loading theory "Nested_Multisets_Ordinals.Duplicate_Free_Multiset" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras" via "Draft.Set_Multiset_Extras" via "Design_Theory.Multisets_Extras")
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### theory "Nested_Multisets_Ordinals.Duplicate_Free_Multiset"
### 0.101s elapsed time, 0.400s cpu time, 0.000s GC time
Loading theory "Design_Theory.Multisets_Extras" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras" via "Draft.Set_Multiset_Extras")
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### Additional type variable(s) in locale specification "countable": 'a
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
class ordered_semiring = ordered_comm_monoid_add + semiring +
  assumes
    "mult_left_mono":
      "!!a b c. [| a <= b; (0::'a) <= c |] ==> c * a <= c * b"
  assumes
    "mult_right_mono":
      "!!a b c. [| a <= b; (0::'a) <= c |] ==> a * c <= b * c"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### theory "Design_Theory.Multisets_Extras"
### 0.863s elapsed time, 3.441s cpu time, 0.538s GC time
Loading theory "Design_Theory.Design_Basics" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras" via "Design_Theory.BIBD" via "Design_Theory.Block_Designs" via "Design_Theory.Design_Operations")
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
locale finite_incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "finite_incidence_system \<V> \<B>"
### theory "HOL-Library.Countable"
### 1.228s elapsed time, 4.902s cpu time, 0.672s GC time
Loading theory "Polynomials.More_Modules" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class")
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
locale design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "design \<V> \<B>"
locale module
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "module (*s)"
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
### theory "Polynomials.More_Modules"
### 0.210s elapsed time, 0.838s cpu time, 0.143s GC time
Loading theory "HOL-Combinatorics.Multiset_Permutations" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras" via "Draft.Set_Multiset_Extras")
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
locale finite_incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "finite_incidence_system \<V> \<B>"
locale design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "design \<V> \<B>"
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
locale finite_incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "finite_incidence_system \<V> \<B>"
locale design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "design \<V> \<B>"
locale simple_incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "simple_incidence_system \<V> \<B>"
locale simple_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "simple_design \<V> \<B>"
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
locale proper_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "proper_design \<V> \<B>"
locale proper_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "proper_design \<V> \<B>"
### theory "Design_Theory.Design_Basics"
### 0.782s elapsed time, 3.125s cpu time, 0.443s GC time
Loading theory "Design_Theory.Design_Operations" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras" via "Design_Theory.BIBD" via "Design_Theory.Block_Designs")
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
Found termination order: "length <*mlex*> {}"
### theory "HOL-Algebra.Ring"
### 3.073s elapsed time, 12.267s cpu time, 1.787s GC time
Loading theory "HOL-Algebra.Module" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale finite_incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "finite_incidence_system \<V> \<B>"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "design \<V> \<B>"
### theory "HOL-Combinatorics.Multiset_Permutations"
### 0.913s elapsed time, 3.639s cpu time, 0.568s GC time
Loading theory "Jordan_Normal_Form.Missing_Ring" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix")
locale proper_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "proper_design \<V> \<B>"
locale two_set_systems
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_set_systems \<V> \<B> \<V>' \<B>'"
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale two_fin_set_systems
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_fin_set_systems \<V> \<B> \<V>' \<B>'"
locale two_designs
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_designs \<V> \<B> \<V>' \<B>'"
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
locale two_designs_proper
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_designs_proper \<V> \<B> \<V>' \<B>'"
### theory "Design_Theory.Design_Operations"
### 0.888s elapsed time, 3.541s cpu time, 0.552s GC time
Loading theory "Design_Theory.Block_Designs" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras" via "Design_Theory.BIBD")
locale K_block_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and sizes :: "nat set"  (\<open>\<K>\<close>)
  assumes "K_block_design \<V> \<B> \<K>"
locale block_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "block_design \<V> \<B> \<k>"
locale block_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "block_design \<V> \<B> \<k>"
locale incomplete_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "incomplete_design \<V> \<B> \<k>"
locale incomplete_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "incomplete_design \<V> \<B> \<k>"
locale t_wise_balance
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_wise_balance \<V> \<B> \<t> \<Lambda>\<^sub>t"
locale t_wise_balance
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_wise_balance \<V> \<B> \<t> \<Lambda>\<^sub>t"
locale pairwise_balance
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "pairwise_balance \<V> \<B> \<Lambda>"
locale tBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
    and sizes :: "nat set"  (\<open>\<K>\<close>)
  assumes "tBD \<V> \<B> \<t> \<Lambda>\<^sub>t \<K>"
locale \<Lambda>_PBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
    and sizes :: "nat set"  (\<open>\<K>\<close>)
  assumes "\<Lambda>_PBD \<V> \<B> \<Lambda> \<K>"
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
locale PBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and sizes :: "nat set"  (\<open>\<K>\<close>)
  assumes "PBD \<V> \<B> \<K>"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
locale k_\<Lambda>_PBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "k_\<Lambda>_PBD \<V> \<B> \<Lambda> \<k>"
locale k_PBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
  assumes "k_PBD \<V> \<B> \<k>"
locale t_covering_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and min_index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_covering_design \<V> \<B> \<k> \<t> \<Lambda>\<^sub>t"
### theory "HOL-Algebra.Module"
### 1.546s elapsed time, 6.166s cpu time, 0.747s GC time
Loading theory "Design_Theory.Sub_Designs" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Design_Theory.Design_Isomorphisms")
locale t_packing_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and min_index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_packing_design \<V> \<B> \<k> \<t> \<Lambda>\<^sub>t"
locale sub_set_system
  fixes \<U> :: "'a set"
    and \<A> :: "'a set multiset"
    and \<V> :: "'a set"
    and \<B> :: "'a set multiset"
  assumes "sub_set_system \<U> \<A> \<V> \<B>"
locale constant_rep_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and design_rep_number :: "nat"  (\<open>\<r>\<close>)
  assumes "constant_rep_design \<V> \<B> \<r>"
locale sub_incidence_system
  fixes \<U> :: "'a set"
    and \<A> :: "'a set multiset"
    and \<V> :: "'a set"
    and \<B> :: "'a set multiset"
  assumes "sub_incidence_system \<U> \<A> \<V> \<B>"
locale sub_design
  fixes \<U> :: "'a set"
    and \<A> :: "'a set multiset"
    and \<V> :: "'a set"
    and \<B> :: "'a set multiset"
  assumes "sub_design \<U> \<A> \<V> \<B>"
locale t_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_design \<V> \<B> \<k> \<t> \<Lambda>\<^sub>t"
locale proper_sub_set_system
  fixes \<U> :: "'a set"
    and \<A> :: "'a set multiset"
    and \<V> :: "'a set"
    and \<B> :: "'a set multiset"
  assumes "proper_sub_set_system \<U> \<A> \<V> \<B>"
locale sub_set_system
  fixes \<U> :: "'a set"
    and \<A> :: "'a set multiset"
    and \<V> :: "'a set"
    and \<B> :: "'a set multiset"
  assumes "sub_set_system \<U> \<A> \<V> \<B>"
locale t_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_design \<V> \<B> \<k> \<t> \<Lambda>\<^sub>t"
locale proper_sub_incidence_system
  fixes \<U> :: "'a set"
    and \<A> :: "'a set multiset"
    and \<V> :: "'a set"
    and \<B> :: "'a set multiset"
  assumes "proper_sub_incidence_system \<U> \<A> \<V> \<B>"
locale steiner_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
  assumes "steiner_system \<V> \<B> \<k> \<t>"
locale sub_incidence_system
  fixes \<U> :: "'a set"
    and \<A> :: "'a set multiset"
    and \<V> :: "'a set"
    and \<B> :: "'a set multiset"
  assumes "sub_incidence_system \<U> \<A> \<V> \<B>"
locale proper_sub_design
  fixes \<U> :: "'a set"
    and \<A> :: "'a set multiset"
    and \<V> :: "'a set"
    and \<B> :: "'a set multiset"
  assumes "proper_sub_design \<U> \<A> \<V> \<B>"
locale sub_design
  fixes \<U> :: "'a set"
    and \<A> :: "'a set multiset"
    and \<V> :: "'a set"
    and \<B> :: "'a set multiset"
  assumes "sub_design \<U> \<A> \<V> \<B>"
locale two_t_wise_eq_points
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<t> :: "nat"
    and \<Lambda>\<^sub>t :: "nat"
    and \<B>' :: "'a set multiset"
    and \<Lambda>\<^sub>t' :: "nat"
  assumes
    "two_t_wise_eq_points \<V> \<B> \<t> \<Lambda>\<^sub>t \<B>'
      \<Lambda>\<^sub>t'"
locale sub_incidence_system
  fixes \<U> :: "'a set"
    and \<A> :: "'a set multiset"
    and \<V> :: "'a set"
    and \<B> :: "'a set multiset"
  assumes "sub_incidence_system \<U> \<A> \<V> \<B>"
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 8.053s elapsed time, 31.814s cpu time, 6.433s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
locale design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "design \<V> \<B>"
locale two_k_block_designs
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<k> :: "nat"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_k_block_designs \<V> \<B> \<k> \<V>' \<B>'"
### theory "Design_Theory.Sub_Designs"
### 0.719s elapsed time, 2.859s cpu time, 0.485s GC time
Loading theory "Design_Theory.Design_Isomorphisms" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices")
locale two_rep_designs_eq_points
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<r> :: "nat"
    and \<B>' :: "'a set multiset"
    and \<r>' :: "nat"
  assumes "two_rep_designs_eq_points \<V> \<B> \<r> \<B>' \<r>'"
locale incidence_system_isomorphism
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'b set"
    and \<B>' :: "'b set multiset"
    and bij_map :: "'a => 'b"  (\<open>\<pi>\<close>)
  assumes "incidence_system_isomorphism \<V> \<B> \<V>' \<B>' \<pi>"
locale two_incomplete_designs
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<k> :: "nat"
    and \<V>' :: "'a set"
    and \<B>' :: "'a set multiset"
  assumes "two_incomplete_designs \<V> \<B> \<k> \<V>' \<B>'"
locale design_isomorphism
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'b set"
    and \<B>' :: "'b set multiset"
    and bij_map :: "'a => 'b"  (\<open>\<pi>\<close>)
  assumes "design_isomorphism \<V> \<B> \<V>' \<B>' \<pi>"
locale design_isomorphism
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'b set"
    and \<B>' :: "'b set multiset"
    and bij_map :: "'a => 'b"  (\<open>\<pi>\<close>)
  assumes "design_isomorphism \<V> \<B> \<V>' \<B>' \<pi>"
locale design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "design \<V> \<B>"
locale design_isomorphism
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'b set"
    and \<B>' :: "'b set multiset"
    and bij_map :: "'a => 'b"  (\<open>\<pi>\<close>)
  assumes "design_isomorphism \<V> \<B> \<V>' \<B>' \<pi>"
locale two_t_designs_eq_points
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<k> :: "nat"
    and \<B>' :: "'a set multiset"
    and \<t> :: "nat"
    and \<Lambda>\<^sub>t :: "nat"
    and \<Lambda>\<^sub>t' :: "nat"
  assumes
    "two_t_designs_eq_points \<V> \<B> \<k> \<B>' \<t> \<Lambda>\<^sub>t
      \<Lambda>\<^sub>t'"
### theory "Design_Theory.Block_Designs"
### 1.927s elapsed time, 7.694s cpu time, 1.049s GC time
Loading theory "Design_Theory.BIBD" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras")
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
### theory "Design_Theory.Design_Isomorphisms"
### 0.434s elapsed time, 1.727s cpu time, 0.237s GC time
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant")
locale bibd
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "bibd \<V> \<B> \<k> \<Lambda>"
locale bibd
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "bibd \<V> \<B> \<k> \<Lambda>"
locale two_bibd_eq_points
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<k> :: "nat"
    and \<B>' :: "'a set multiset"
    and \<Lambda> :: "nat"
    and \<Lambda>' :: "nat"
  assumes "two_bibd_eq_points \<V> \<B> \<k> \<B>' \<Lambda> \<Lambda>'"
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
locale bibd_block_transformations
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
    and block :: "'a set"  (\<open>bl\<close>)
  assumes "bibd_block_transformations \<V> \<B> \<k> \<Lambda> bl"
Found termination order: "length <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale symmetric_bibd
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "symmetric_bibd \<V> \<B> \<k> \<Lambda>"
locale bibd
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "bibd \<V> \<B> \<k> \<Lambda>"
locale symmetric_bibd
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "symmetric_bibd \<V> \<B> \<k> \<Lambda>"
locale symmetric_bibd_block_transformations
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
    and block :: "'a set"  (\<open>bl\<close>)
  assumes "symmetric_bibd_block_transformations \<V> \<B> \<k> \<Lambda> bl"
locale incomplete_PBD
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "incomplete_PBD \<V> \<B> \<k> \<Lambda>"
### theory "Design_Theory.BIBD"
### 1.185s elapsed time, 4.728s cpu time, 0.754s GC time
Loading theory "Draft.Set_Multiset_Extras" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Design_Extras")
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 1.365s elapsed time, 5.457s cpu time, 0.870s GC time
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial")
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Jordan_Normal_Form.Missing_Ring"
### 4.049s elapsed time, 16.166s cpu time, 2.359s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
### theory "Draft.Set_Multiset_Extras"
### 0.811s elapsed time, 3.227s cpu time, 0.501s GC time
Loading theory "Draft.Design_Extras" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices")
locale incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "incidence_system \<V> \<B>"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
locale finite_incidence_system
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "finite_incidence_system \<V> \<B>"
locale design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "design \<V> \<B>"
### theory "HOL-Library.BigO"
### 0.824s elapsed time, 3.286s cpu time, 0.463s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Linear_Bound_ArgumentMoreTemplates")
locale proper_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "proper_design \<V> \<B>"
locale simple_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
  assumes "simple_design \<V> \<B>"
locale constant_rep_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and design_rep_number :: "nat"  (\<open>\<r>\<close>)
  assumes "constant_rep_design \<V> \<B> \<r>"
locale t_wise_balance
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
  assumes "t_wise_balance \<V> \<B> \<t> \<Lambda>\<^sub>t"
locale pairwise_balance
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "pairwise_balance \<V> \<B> \<Lambda>"
consts
  Poly :: "'a list => 'a poly"
locale bibd
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and u_block_size :: "nat"  (\<open>\<k>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "bibd \<V> \<B> \<k> \<Lambda>"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
locale regular_t_wise_balance
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and grouping :: "nat"  (\<open>\<t>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<^sub>t\<close>)
    and design_rep_number :: "nat"  (\<open>\<r>\<close>)
  assumes "regular_t_wise_balance \<V> \<B> \<t> \<Lambda>\<^sub>t \<r>"
locale regular_pairwise_balance
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<Lambda> :: "nat"
    and \<r> :: "nat"
  assumes "regular_pairwise_balance \<V> \<B> \<Lambda> \<r>"
locale const_intersect_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and \<m> :: "nat"
  assumes "const_intersect_design \<V> \<B> \<m>"
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
locale const_intersect_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and \<m> :: "nat"
  assumes "const_intersect_design \<V> \<B> \<m>"
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
locale simple_const_intersect_design
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and \<m> :: "nat"
  assumes "simple_const_intersect_design \<V> \<B> \<m>"
### theory "Draft.Design_Extras"
### 0.938s elapsed time, 3.736s cpu time, 0.602s GC time
Loading theory "HOL-Library.Complex_Order" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Conjugate")
instantiation
  complex :: order
  less_eq_complex == less_eq :: complex => complex => bool
  less_complex == less :: complex => complex => bool
### theory "HOL-Library.Complex_Order"
### 0.061s elapsed time, 0.241s cpu time, 0.000s GC time
Loading theory "Jordan_Normal_Form.Conjugate" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.799s elapsed time, 3.193s cpu time, 0.580s GC time
Loading theory "Jordan_Normal_Form.DL_Missing_List" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Jordan_Normal_Form.DL_Missing_List"
### 0.142s elapsed time, 0.562s cpu time, 0.117s GC time
Loading theory "List-Index.List_Index" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices")
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
consts
  find_index :: "('a => bool) => 'a list => nat"
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "List-Index.List_Index"
### 0.481s elapsed time, 1.915s cpu time, 0.455s GC time
Loading theory "Matrix.Utility" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Polynomial_Factorization.Missing_List")
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Matrix.Utility"
### 0.294s elapsed time, 1.178s cpu time, 0.211s GC time
Loading theory "Polynomial_Factorization.Missing_List" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras")
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order: "size_list length <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
consts
  list_union :: "'a list => 'a list => 'a list"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  list_diff :: "'a list => 'a list => 'a list"
### Ignoring duplicate rewrite rule:
### set ?xs1 <= set ?ys1 == list_all (%x. x : set ?ys1) ?xs1
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### Missing patterns in function definition:
### min_list [] = undefined
Found termination order: "length <*mlex*> {}"
consts
  permut_aux :: "'a list => (nat => nat) => 'a list => 'a list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Polynomial_Factorization.Missing_List"
### 3.252s elapsed time, 12.571s cpu time, 5.768s GC time
Loading theory "Open_Induction.Restricted_Predicates" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### theory "Jordan_Normal_Form.Conjugate"
### 4.591s elapsed time, 17.909s cpu time, 6.886s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Jordan_Normal_Form.Matrix")
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Proofs for inductive predicate(s) "accessible_on"
  Proving monotonicity ...
### theory "Open_Induction.Restricted_Predicates"
### 0.378s elapsed time, 1.493s cpu time, 0.142s GC time
Loading theory "Regular-Sets.Regular_Set" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking" via "Regular-Sets.NDerivative" via "Regular-Sets.Regular_Exp")
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
consts
  lang_pow :: "nat => 'a list set => 'a list set"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
### theory "Regular-Sets.Regular_Set"
### 0.276s elapsed time, 1.081s cpu time, 0.137s GC time
Loading theory "Regular-Sets.Regular_Exp" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking" via "Regular-Sets.NDerivative")
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
consts
  lang :: "'a rexp => 'a list set"
consts
  nullable :: "'a rexp => bool"
consts
  rexp_empty :: "'a rexp => bool"
instantiation
  rexp :: (order) order
  less_eq_rexp == less_eq :: 'a rexp => 'a rexp => bool
  less_rexp == less :: 'a rexp => 'a rexp => bool
### theory "HOL-Computational_Algebra.Polynomial"
### 8.065s elapsed time, 31.618s cpu time, 8.847s GC time
Loading theory "VectorSpace.FunctionLemmas" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace" via "VectorSpace.MonoidSums")
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
### theory "VectorSpace.FunctionLemmas"
### 0.033s elapsed time, 0.129s cpu time, 0.000s GC time
Loading theory "VectorSpace.RingModuleFacts" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
### theory "VectorSpace.RingModuleFacts"
### 0.742s elapsed time, 2.887s cpu time, 0.437s GC time
Loading theory "VectorSpace.MonoidSums" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
### theory "VectorSpace.MonoidSums"
### 0.322s elapsed time, 1.267s cpu time, 0.125s GC time
Loading theory "VectorSpace.LinearCombinations" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  rexp :: (linorder) linorder
### theory "Regular-Sets.Regular_Exp"
### 2.620s elapsed time, 10.234s cpu time, 1.378s GC time
Loading theory "Regular-Sets.NDerivative" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method" via "Regular-Sets.Equivalence_Checking")
### theory "Polynomial_Interpolation.Ring_Hom"
### 3.337s elapsed time, 13.037s cpu time, 1.713s GC time
Loading theory "Jordan_Normal_Form.Matrix" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras")
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 11.642s elapsed time, 45.755s cpu time, 10.937s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.514s elapsed time, 1.999s cpu time, 0.300s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant")
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
### Cannot skip proof of schematic goal statement
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
locale LinearCombinations.submodule
  fixes R :: "('a, 'b) ring_scheme"
    and N :: "'c set"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "LinearCombinations.submodule R N M"
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 1.240s elapsed time, 4.774s cpu time, 0.852s GC time
Loading theory "Regular-Sets.Relation_Interpretation" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method")
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
consts
  rel :: "('a => ('b * 'b) set) => 'a rexp => ('b * 'b) set"
consts
  word_rel :: "('a => ('b * 'b) set) => 'a list => ('b * 'b) set"
### theory "Regular-Sets.Relation_Interpretation"
### 0.075s elapsed time, 0.292s cpu time, 0.043s GC time
Loading theory "Well_Quasi_Orders.Infinite_Sequences" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
Found termination order: "{}"
### theory "Well_Quasi_Orders.Infinite_Sequences"
### 0.126s elapsed time, 0.480s cpu time, 0.125s GC time
Loading theory "Well_Quasi_Orders.Minimal_Elements" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences")
locale mod_hom
  fixes R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"
    and N :: "('a, 'e, 'f) module_scheme"
    and f :: "'c => 'e"
  assumes "mod_hom R M N f"
locale minimal_element
  fixes P :: "'a => 'a => bool"
    and A :: "'a set"
  assumes "minimal_element P A"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Well_Quasi_Orders.Minimal_Elements"
### 0.311s elapsed time, 1.190s cpu time, 0.256s GC time
Loading theory "Well_Quasi_Orders.Least_Enum" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
locale infinitely_many1
  fixes P :: "'a => bool"
  assumes "infinitely_many1 P"
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
### Additional type variable(s) in specification of "enum_rel": 'a
### Additional type variable(s) in specification of "enum_dom": 'a
Found termination order: "size <*mlex*> {}"
locale infinitely_many2
  fixes P :: "'a => 'a => bool"
    and N :: "'a"
  assumes "infinitely_many2 P N"
locale mod_hom
  fixes R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"
    and N :: "('a, 'e, 'f) module_scheme"
    and f :: "'c => 'e"
  assumes "mod_hom R M N f"
### Additional type variable(s) in specification of "enumchain_rel": 'a
### Additional type variable(s) in specification of "enumchain_dom": 'a
Found termination order: "size <*mlex*> {}"
### theory "Well_Quasi_Orders.Least_Enum"
### 1.586s elapsed time, 5.875s cpu time, 5.221s GC time
MPoly (mapping_of ?x) = ?x
?y : UNIV ==> mapping_of (MPoly ?y) = ?y
(mapping_of ?x = mapping_of ?y) = (?x = ?y)
[| ?x : UNIV; ?y : UNIV |] ==> (MPoly ?x = MPoly ?y) = (?x = ?y)
[| ?y : UNIV; !!x. ?P (mapping_of x) |] ==> ?P ?y
(!!y. y : UNIV ==> ?P (MPoly y)) ==> ?P ?x
[| ?y : UNIV; !!x. ?y = mapping_of x ==> ?P |] ==> ?P
(!!y. [| ?x = MPoly y; y : UNIV |] ==> ?P) ==> ?P
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
"(Gcd (coeffs
        (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
         M [(1::'b) + (1::'b), 0::'b,
            (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
          6 +
         M [(1::'b) + (1::'b), 0::'b,
            (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
          8)),
  sdiv
   (Gcd (coeffs
          (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
           M [(1::'b) + (1::'b), 0::'b,
              (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
            6 +
           M [(1::'b) + (1::'b), 0::'b,
              (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
            8)))
   (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
    M [(1::'b) + (1::'b), 0::'b, (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
     6 +
    M [(1::'b) + (1::'b), 0::'b,
       (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
     8))"
  :: "'a * 'a mpoly"
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  norm :: "'a rexp => 'a rexp"
consts
  nderiv :: "'a => 'a rexp => 'a rexp"
### theory "Regular-Sets.NDerivative"
### 4.855s elapsed time, 18.664s cpu time, 7.266s GC time
Loading theory "Regular-Sets.Equivalence_Checking" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full" via "Regular-Sets.Regexp_Method")
"{[4, 3, 2, 1], [3, 4, 2, 1], [4, 2, 3, 1], [2, 4, 3, 1], [3, 2, 4, 1],
  [2, 3, 4, 1], [4, 3, 1, 2], [3, 4, 1, 2], [4, 1, 3, 2], [1, 4, 3, 2],
  [3, 1, 4, 2], [1, 3, 4, 2], [4, 2, 1, 3], [2, 4, 1, 3], [4, 1, 2, 3],
  [1, 4, 2, 3], [2, 1, 4, 3], [1, 2, 4, 3], [3, 2, 1, 4], [2, 3, 1, 4],
  [3, 1, 2, 4], [1, 3, 2, 4], [2, 1, 3, 4], [1, 2, 3, 4]}"
  :: "int list set"
Proofs for coinductive predicate(s) "bisimilar"
  Proving monotonicity ...
Found termination order: "length <*mlex*> {}"
"{''dcba'', ''cdba'', ''dbca'', ''bdca'', ''cbda'', ''bcda'', ''dcab'',
  ''cdab'', ''dacb'', ''adcb'', ''cadb'', ''acdb'', ''dbac'', ''bdac'',
  ''dabc'', ''adbc'', ''badc'', ''abdc'', ''cbad'', ''bcad'', ''cabd'',
  ''acbd'', ''bacd'', ''abcd''}"
  :: "char list set"
consts
  add_atoms :: "'a rexp => 'a list => 'a list"
### theory "Regular-Sets.Equivalence_Checking"
### 0.282s elapsed time, 1.111s cpu time, 0.098s GC time
Loading theory "Regular-Sets.Regexp_Method" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences" via "Well_Quasi_Orders.Almost_Full")
consts
  rel_of_regexp :: "('a * 'a) set list => nat rexp => ('a * 'a) set"
consts
  rel_eq :: "nat rexp * nat rexp => ('a * 'a) set list => bool"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
### theory "VectorSpace.LinearCombinations"
### 5.776s elapsed time, 22.206s cpu time, 7.732s GC time
Loading theory "VectorSpace.SumSpaces" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
val regexp_conv = fn: Proof.context -> conv
### theory "Regular-Sets.Regexp_Method"
### 0.688s elapsed time, 2.431s cpu time, 0.343s GC time
Loading theory "Well_Quasi_Orders.Almost_Full" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations" via "Well_Quasi_Orders.Minimal_Bad_Sequences")
### theory "Jordan_Normal_Form.Matrix"
### 5.660s elapsed time, 21.533s cpu time, 7.569s GC time
Loading theory "Jordan_Normal_Form.Gauss_Jordan_Elimination" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix")
Loading theory "Jordan_Normal_Form.Ring_Hom_Matrix" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument")
locale ord_ring_hom
  fixes hom :: "'a => 'b"
  assumes "ord_ring_hom hom"
### theory "VectorSpace.SumSpaces"
### 0.438s elapsed time, 1.502s cpu time, 0.165s GC time
Loading theory "VectorSpace.VectorSpace" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace")
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
locale subspace
  fixes K :: "('a, 'b) ring_scheme"
    and W :: "'c set"
    and V :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "subspace K W V"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### carrier (vs ?y) == ?y
Proofs for inductive predicate(s) "af"
  Proving monotonicity ...
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Well_Quasi_Orders.Almost_Full"
### 1.165s elapsed time, 4.532s cpu time, 0.645s GC time
Loading theory "Well_Quasi_Orders.Minimal_Bad_Sequences" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils" via "Well_Quasi_Orders.Almost_Full_Relations")
locale mbs
  fixes A :: "'a set"
### Cannot skip proof of schematic goal statement
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
### theory "Well_Quasi_Orders.Minimal_Bad_Sequences"
### 0.340s elapsed time, 1.320s cpu time, 0.232s GC time
Loading theory "Well_Quasi_Orders.Almost_Full_Relations" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Utils")
### theory "Jordan_Normal_Form.Gauss_Jordan_Elimination"
### 1.473s elapsed time, 5.749s cpu time, 0.877s GC time
Loading theory "Jordan_Normal_Form.Column_Operations" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant")
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
Found termination order: "{}"
### Ignoring duplicate rewrite rule:
### T \<zero>\<^bsub>V\<^esub> == \<zero>\<^bsub>W\<^esub>
class real_embedding = linordered_idom +
  fixes real_of :: "'a => real"
  assumes "real_add": "!!x y. real_of (x + y) = real_of x + real_of y"
    and "real_mult": "!!x y. real_of (x * y) = real_of x * real_of y"
    and "real_zero": "real_of (0::'a) = 0"
    and "real_one": "real_of (1::'a) = 1"
    and "real_le": "!!x z. real_of x <= z ==> x <= of_int \<lceil>z\<rceil>"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
instantiation
  real :: real_embedding
  real_of_real == real_of :: real => real
instantiation
  int :: real_embedding
  real_of_int == real_of :: int => real
instantiation
  rat :: real_embedding
  real_of_rat == real_of :: rat => real
### theory "Jordan_Normal_Form.Ring_Hom_Matrix"
### 1.953s elapsed time, 7.608s cpu time, 1.194s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Well_Quasi_Orders.Almost_Full_Relations"
### 0.479s elapsed time, 1.848s cpu time, 0.317s GC time
Loading theory "Polynomials.Utils" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class")
Loading theory "Well_Quasi_Orders.Well_Quasi_Orders" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class" via "Polynomials.Power_Products")
### theory "Jordan_Normal_Form.Column_Operations"
### 0.490s elapsed time, 1.902s cpu time, 0.317s GC time
Loading theory "Jordan_Normal_Form.Determinant" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect")
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
class wqo = preorder +
  assumes "good": "!!f. good (<=) f"
### theory "Polynomials.Utils"
### 0.369s elapsed time, 1.408s cpu time, 0.327s GC time
Loading theory "Groebner_Bases.General" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class")
### theory "Well_Quasi_Orders.Well_Quasi_Orders"
### 0.375s elapsed time, 1.429s cpu time, 0.327s GC time
Loading theory "Polynomials.Power_Products" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered" via "Polynomials.MPoly_Type_Class")
### Missing patterns in function definition:
### max_list [] = undefined
Found termination order: "length <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  insort_wrt :: "('c => 'c => bool) => 'c => 'c list => 'c list"
consts
  remdups_wrt :: "('a => 'b) => 'a list => 'a list"
consts
  map_idx :: "('a => nat => 'b) => 'a list => nat => 'b list"
consts
  map_dup :: "('a => 'b) => ('a => 'b) => 'a list => 'b list"
consts
  filter_min_aux :: "'a list => 'a list => 'a list"
### theory "Groebner_Bases.General"
### 19.608s elapsed time, 65.595s cpu time, 62.978s GC time
### theory "Jordan_Normal_Form.Determinant"
### 20.555s elapsed time, 68.768s cpu time, 63.624s GC time
class plus = type +
  fixes plus :: "'a => 'a => 'a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class ninv_comm_monoid_add = comm_monoid_add +
  assumes "plus_eq_zero": "!!s t. s + t = (0::'a) ==> s = (0::'a)"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### theory "VectorSpace.VectorSpace"
### 22.962s elapsed time, 77.153s cpu time, 64.917s GC time
Loading theory "Jordan_Normal_Form.Missing_VectorSpace" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank" via "Jordan_Normal_Form.VS_Connect")
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
class lcs_powerprod = comm_powerprod +
  fixes lcs :: "'a => 'a => 'a"
  assumes "adds_lcs": "!!s t. s adds lcs s t"
  assumes "lcs_adds": "!!s u t. [| s adds u; t adds u |] ==> lcs s t adds u"
  assumes "lcs_comm": "!!s t. lcs s t = lcs t s"
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
class graded_dickson_powerprod = ulcs_powerprod +
  assumes "ex_dgrad": "EX d. dickson_grading d"
class dickson_powerprod = ulcs_powerprod +
  assumes "dickson": "almost_full_on (adds) UNIV"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
class semi_canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_imp_add": "!!a b. a <= b ==> EX c. b = a + c"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  ninv_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
### theory "Jordan_Normal_Form.Missing_VectorSpace"
### 1.722s elapsed time, 3.579s cpu time, 0.313s GC time
Loading theory "Jordan_Normal_Form.VS_Connect" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Jordan_Normal_Form.DL_Rank")
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
locale matrix_ring
  fixes n :: "nat"
    and field_type :: "'a itself"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
class add_linorder_min = add_linorder +
  assumes "zero_min": "!!x. (0::'a) <= x"
locale matrix_vs
  fixes nr :: "nat"
    and nc :: "nat"
    and field_type :: "'a itself"
### Cannot skip proof of schematic goal statement
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
instantiation
  nat :: add_linorder
instantiation
  nat :: add_linorder_min
instantiation
  nat :: add_wellorder
instantiation
  int :: add_linorder_group
instantiation
  rat :: add_linorder_group
instantiation
  real :: add_linorder_group
locale ordered_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "ordered_powerprod (\<preceq>) (\<prec>)"
locale gd_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "gd_powerprod (\<preceq>) (\<prec>)"
locale mat_space
  fixes f_ty :: "'a itself"
    and nc :: "nat"
    and nr :: "nat"
locale od_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "od_powerprod (\<preceq>) (\<prec>)"
instantiation
  fun :: (type, add_linorder) lcs_powerprod
  lcs_fun == lcs :: ('a => 'b) => ('a => 'b) => 'a => 'b
class wellorder = linorder +
  assumes
    "less_induct": "!!P a. (!!x. (!!y. y < x ==> P y) ==> P x) ==> P a"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class wellorder = linorder +
  assumes
    "less_induct": "!!P a. (!!x. (!!y. y < x ==> P y) ==> P x) ==> P a"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
instantiation
  poly_mapping :: (type, add_linorder) lcs_powerprod
  lcs_poly_mapping == lcs ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
locale idom_vec
  fixes n :: "nat"
    and f_ty :: "'a itself"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "Polynomials.Power_Products"
### 27.718s elapsed time, 83.102s cpu time, 64.637s GC time
Loading theory "Polynomials.MPoly_Type_Class" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class" via "Polynomials.MPoly_Type_Class_Ordered")
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Ambiguous input (line 1415 of "$AFP/Polynomials/MPoly_Type_Class.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monomial)
###       ("_cargs" ("_applC" ("_position" Sum_any) ("_position" f))
###         ("_position" a)))
###     ("\<^const>Series.suminf_binder" ("_position" c)
###       ("_applC" ("_position" monomial)
###         ("_cargs" ("_applC" ("_position" f) ("_position" c))
###           ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monomial)
###       ("_cargs" ("_applC" ("_position" Sum_any) ("_position" f))
###         ("_position" a)))
###     ("_Sum_any" ("_position" c)
###       ("_applC" ("_position" monomial)
###         ("_cargs" ("_applC" ("_position" f) ("_position" c))
###           ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
### Ambiguous input (line 1454 of "$AFP/Polynomials/MPoly_Type_Class.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monom_mult)
###       ("_cargs" ("_applC" ("_position" Sum_any) ("_position" f))
###         ("_cargs" ("_position" t) ("_position" p))))
###     ("\<^const>Series.suminf_binder" ("_position" c)
###       ("_applC" ("_position" monom_mult)
###         ("_cargs" ("_applC" ("_position" f) ("_position" c))
###           ("_cargs" ("_position" t) ("_position" p)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monom_mult)
###       ("_cargs" ("_applC" ("_position" Sum_any) ("_position" f))
###         ("_cargs" ("_position" t) ("_position" p))))
###     ("_Sum_any" ("_position" c)
###       ("_applC" ("_position" monom_mult)
###         ("_cargs" ("_applC" ("_position" f) ("_position" c))
###           ("_cargs" ("_position" t) ("_position" p)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1463 of "$AFP/Polynomials/MPoly_Type_Class.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monom_mult)
###       ("_cargs" ("_position" c)
###         ("_cargs" ("_position" t)
###           ("_applC" ("_position" Sum_any) ("_position" f)))))
###     ("\<^const>Series.suminf_binder" ("_position" p)
###       ("_applC" ("_position" monom_mult)
###         ("_cargs" ("_position" c)
###           ("_cargs" ("_position" t)
###             ("_applC" ("_position" f) ("_position" p))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" monom_mult)
###       ("_cargs" ("_position" c)
###         ("_cargs" ("_position" t)
###           ("_applC" ("_position" Sum_any) ("_position" f)))))
###     ("_Sum_any" ("_position" p)
###       ("_applC" ("_position" monom_mult)
###         ("_cargs" ("_position" c)
###           ("_cargs" ("_position" t)
###             ("_applC" ("_position" f) ("_position" p))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Jordan_Normal_Form.VS_Connect"
### 6.436s elapsed time, 13.380s cpu time, 1.156s GC time
Loading theory "Jordan_Normal_Form.DL_Rank" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument")
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
### theory "Polynomials.MPoly_Type_Class"
### 1.757s elapsed time, 3.844s cpu time, 0.389s GC time
Loading theory "Polynomials.MPoly_Type_Class_Ordered" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix" via "Groebner_Bases.More_MPoly_Type_Class")
class the_min = linorder +
  fixes the_min :: "'a"
  assumes "the_min_min": "!!x. the_min <= x"
instantiation
  nat :: the_min
  the_min_nat == the_min :: nat
instantiation
  unit :: the_min
  the_min_unit == the_min :: unit
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale ordered_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "ordered_powerprod (\<preceq>) (\<prec>)"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Jordan_Normal_Form.DL_Rank"
### 4.136s elapsed time, 8.950s cpu time, 1.212s GC time
locale ordered_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "ordered_powerprod (\<preceq>) (\<prec>)"
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale gd_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "gd_powerprod (\<preceq>) (\<prec>)"
locale od_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "od_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Polynomials.MPoly_Type_Class_Ordered"
### 5.938s elapsed time, 10.368s cpu time, 1.388s GC time
Loading theory "Groebner_Bases.More_MPoly_Type_Class" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras" via "Groebner_Bases.Macaulay_Matrix")
locale module
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "module (*s)"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Groebner_Bases.More_MPoly_Type_Class"
### 0.923s elapsed time, 1.038s cpu time, 0.159s GC time
Loading theory "Groebner_Bases.Macaulay_Matrix" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices" via "Draft.Matrix_Vector_Extras")
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
[| Keys (set ?ps) <= set ?ts; ?v : carrier_vec (length ?ps) |]
==> row_to_poly ?ts (?v \<^sub>v* polys_to_mat ?ts ?ps) =
    sum_list (map2 (\<cdot>) (list_of_vec ?v) ?ps)
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Groebner_Bases.Macaulay_Matrix"
### 1.387s elapsed time, 1.598s cpu time, 0.289s GC time
Loading theory "Draft.Matrix_Vector_Extras" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument" via "Draft.Incidence_Matrices")
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale injective_lim
  fixes A :: "'a set"
    and f :: "'a => 'b"
  assumes "injective_lim A f"
locale injective_lim
  fixes A :: "'a set"
    and f :: "'a => 'b"
  assumes "injective_lim A f"
locale inj_on_01_hom
  fixes hom :: "'a => 'b"
  assumes "inj_on_01_hom hom"
class zero_neq_one = one + zero +
  assumes "zero_neq_one": "(0::'a) ~= (1::'a)"
### theory "Draft.Matrix_Vector_Extras"
### 1.003s elapsed time, 1.139s cpu time, 0.188s GC time
Loading theory "Draft.Incidence_Matrices" (required by "Draft.Linear_Bound_ArgumentMoreTemplates" via "Draft.Linear_Bound_Argument")
locale zero_one_matrix
  fixes matrix :: "'b mat"  (\<open>M\<close>)
  assumes "zero_one_matrix M"
locale zero_one_matrix_ring_1
  fixes M :: "'b mat"
  assumes "zero_one_matrix_ring_1 M"
locale ordered_incidence_system
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
  assumes "ordered_incidence_system \<V>s \<B>s"
locale ordered_incidence_system
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
  assumes "ordered_incidence_system \<V>s \<B>s"
locale ordered_design
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
  assumes "ordered_design \<V>s \<B>s"
locale ordered_simple_design
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
  assumes "ordered_simple_design \<V>s \<B>s"
locale ordered_proper_design
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
  assumes "ordered_proper_design \<V>s \<B>s"
locale ordered_constant_rep
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
    and \<r> :: "nat"
  assumes "ordered_constant_rep \<V>s \<B>s \<r>"
locale ordered_block_design
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
    and \<k> :: "nat"
  assumes "ordered_block_design \<V>s \<B>s \<k>"
locale ordered_incomplete_design
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
    and \<k> :: "nat"
  assumes "ordered_incomplete_design \<V>s \<B>s \<k>"
locale ordered_t_wise_balance
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
    and \<t> :: "nat"
    and \<Lambda>\<^sub>t :: "nat"
  assumes "ordered_t_wise_balance \<V>s \<B>s \<t> \<Lambda>\<^sub>t"
locale ordered_pairwise_balance
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
    and \<Lambda> :: "nat"
  assumes "ordered_pairwise_balance \<V>s \<B>s \<Lambda>"
locale pairwise_balance
  fixes point_set :: "'a set"  (\<open>\<V>\<close>)
    and block_collection :: "'a set multiset"  (\<open>\<B>\<close>)
    and index :: "nat"  (\<open>\<Lambda>\<close>)
  assumes "pairwise_balance \<V> \<B> \<Lambda>"
locale ordered_regular_pairwise_balance
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
    and \<Lambda> :: "nat"
    and \<r> :: "nat"
  assumes "ordered_regular_pairwise_balance \<V>s \<B>s \<Lambda> \<r>"
locale ordered_regular_pairwise_balance
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
    and \<Lambda> :: "nat"
    and \<r> :: "nat"
  assumes "ordered_regular_pairwise_balance \<V>s \<B>s \<Lambda> \<r>"
locale ordered_bibd
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
    and \<k> :: "nat"
    and \<Lambda> :: "nat"
  assumes "ordered_bibd \<V>s \<B>s \<k> \<Lambda>"
locale ordered_sym_bibd
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
    and \<k> :: "nat"
    and \<Lambda> :: "nat"
  assumes "ordered_sym_bibd \<V>s \<B>s \<k> \<Lambda>"
locale ordered_const_intersect_design
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
    and \<m> :: "nat"
  assumes "ordered_const_intersect_design \<V>s \<B>s \<m>"
locale simp_ordered_const_intersect_design
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
    and \<m> :: "nat"
  assumes "simp_ordered_const_intersect_design \<V>s \<B>s \<m>"
locale zero_one_matrix
  fixes matrix :: "'b mat"  (\<open>M\<close>)
  assumes "zero_one_matrix M"
locale zero_one_matrix_ring_1
  fixes M :: "'b mat"
  assumes "zero_one_matrix_ring_1 M"
locale zero_one_matrix_int
  fixes M :: "int mat"
  assumes "zero_one_matrix_int M"
locale two_ordered_sys
  fixes \<V>s :: "'a list"
    and \<B>s :: "'a set list"
    and \<V>s' :: "'b list"
    and \<B>s' :: "'b set list"
  assumes "two_ordered_sys \<V>s \<B>s \<V>s' \<B>s'"
locale incidence_system_isomorphism
  fixes \<V> :: "'a set"
    and \<B> :: "'a set multiset"
    and \<V>' :: "'b set"
    and \<B>' :: "'b set multiset"
    and bij_map :: "'a => 'b"  (\<open>\<pi>\<close>)
  assumes "incidence_system_isomorphism \<V> \<B> \<V>' \<B>' \<pi>"
### theory "Draft.Incidence_Matrices"
### 2.568s elapsed time, 2.942s cpu time, 0.520s GC time
Loading theory "Draft.Linear_Bound_Argument" (required by "Draft.Linear_Bound_ArgumentMoreTemplates")
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Draft.Linear_Bound_Argument"
### 1.146s elapsed time, 1.291s cpu time, 0.204s GC time
Loading theory "Draft.Linear_Bound_ArgumentMoreTemplates"
val templateLemmas =
   [("Linear_Bound_Argument.lin_bound_arg_general_set",
     "[| ?A <= carrier_vec ?nr; vec_space.lin_indpt_vs ?nr ?A |]
      ==> card ?A <= ?nr",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Linear_Bound_Argument.lin_bound_arg_general_list",
     "[| distinct ?xs; set ?xs <= carrier_vec ?nr;
         vec_space.lin_indpt_vs ?nr (set ?xs) |]
      ==> length ?xs <= ?nr",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Linear_Bound_Argument.lin_bound_arg_general",
     "[| distinct (cols ?A); ?A : carrier_mat ?nr ?nc;
         vec_space.lin_indpt_vs ?nr (set (cols ?A)) |]
      ==> ?nc <= ?nr",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_hole 1,
                template_app (template_hole 5, template_var 2)))
            )],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("Linear_Bound_Argument.lin_bound_argument",
     "[| distinct (cols ?A); ?A : carrier_mat ?nr ?nc;
         !!f. ?A *\<^sub>v vec ?nc (%i. f (col ?A i)) = 0\<^sub>v ?nr ==>
              ALL v:set (cols ?A). f v = (0::?'a) |]
      ==> ?nc <= ?nr",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app
               (template_app (template_hole 11, template_var 1),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("Linear_Bound_Argument.lin_bound_argument2",
     "[| distinct (cols ?A); ?A : carrier_mat ?nr ?nc;
         !!f. vec ?nr (%i. SUM j = 0..<?nc. f (col ?A j) * col ?A j $ i) =
              0\<^sub>v ?nr ==>
              ALL v:set (cols ?A). f v = (0::?'a) |]
      ==> ?nc <= ?nr",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 18,
              template_app (template_hole 17, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2),
              template_app
               (template_app (template_hole 15, template_var 1),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_inequation (less_equals, template_var 0, template_var 1)))]:
   (string * thm * template) list
### theory "Draft.Linear_Bound_ArgumentMoreTemplates"
### 2.554s elapsed time, 7.248s cpu time, 5.899s GC time
val it = (): unit
