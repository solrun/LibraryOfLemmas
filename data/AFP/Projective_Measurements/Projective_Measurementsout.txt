Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Projective_MeasurementsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Projective_MeasurementsTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Linear_Algebra_Complements" (required by "Draft.Projective_MeasurementsTemplates" via "Draft.Projective_Measurements")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.253s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.104s elapsed time, 0.323s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Projective_MeasurementsTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.BigO"
### 0.598s elapsed time, 1.239s cpu time, 0.078s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Projective_MeasurementsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.496s elapsed time, 1.028s cpu time, 0.098s GC time
locale ab_group_add_on_with
  fixes S :: "'a set"
    and pls :: "'a => 'a => 'a"
    and z :: "'a"
    and mns :: "'a => 'a => 'a"
    and um :: "'a => 'a"
  assumes "ab_group_add_on_with S pls z mns um"
locale fixed_carrier_mat
  fixes fc_mats :: "'a Matrix.mat set"
    and dimR :: "nat"
    and dimC :: "nat"
  assumes "fixed_carrier_mat fc_mats dimR dimC"
locale cpx_sq_mat
  fixes dimR :: "nat"
    and dimC :: "nat"
    and fc_mats :: "complex Matrix.mat set"
  assumes "cpx_sq_mat dimR dimC fc_mats"
### theory "Draft.Linear_Algebra_Complements"
### 2.815s elapsed time, 4.561s cpu time, 0.854s GC time
Loading theory "Draft.Projective_Measurements" (required by "Draft.Projective_MeasurementsTemplates")
### theory "Draft.Projective_Measurements"
### 0.740s elapsed time, 0.866s cpu time, 0.188s GC time
Loading theory "Draft.Projective_MeasurementsTemplates"
val templateLemmas =
   [("Projective_Measurements.diag_elems_finite", "finite (diag_elems ?B)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Projective_Measurements.spectrum_finite", "finite (spectrum ?M)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Projective_Measurements.diag_elem_indices_finite",
     "finite (diag_elem_indices ?x ?B)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Projective_Measurements.diag_elems_set_diag_mat",
     "diag_elems ?B = set (diag_mat ?B)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Projective_Measurements.max_mix_density_carrier",
     "max_mix_density ?n : carrier_mat ?n ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))
         )),
    ("Projective_Measurements.diag_el_to_idx_bij",
     "bij_betw (diag_el_to_idx ?B) (diag_elems ?B) {..<dist_el_card ?B}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Projective_Measurements.diag_idx_to_el_bij",
     "bij_betw (diag_idx_to_el ?B) {..<dist_el_card ?B} (diag_elems ?B)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_app (template_hole 0, template_var 0))
         )),
    ("Projective_Measurements.max_mix_is_density",
     "0 < ?n ==> density_operator (max_mix_density ?n)",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Projective_Measurements.hermitian_decomp_unitary",
     "hermitian_decomp ?A ?B ?U ==> Complex_Matrix.unitary ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Projective_Measurements.hermitian_decomp_diag_mat",
     "hermitian_decomp ?A ?B ?U ==> diagonal_mat ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Projective_Measurements.hermitian_decomp_eigenvalues",
     "hermitian_decomp ?A ?B ?U ==> diag_mat ?B = eigvals ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 2)))),
    ("Projective_Measurements.diag_idx_to_el_img",
     "?k < dist_el_card ?B ==> diag_idx_to_el ?B ?k : diag_elems ?B",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Projective_Measurements.hermitian_decomp_sim",
     "hermitian_decomp ?A ?B ?U ==>
      similar_mat_wit ?A ?B ?U (Complex_Matrix.adjoint ?U)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Projective_Measurements.similar_mat_wit_dim_row",
     "similar_mat_wit ?A ?B ?Q ?R ==> dim_row ?B = dim_row ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 0, template_var 3)))),
    ("Projective_Measurements.hermitian_decomp_dim_carrier",
     "hermitian_decomp ?A ?B ?U ==>
      ?B : carrier_mat (dim_row ?A) (dim_col ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Projective_Measurements.diag_elems_mem",
     "?i < dim_row ?B ==> ?B $$ (?i, ?i) : diag_elems ?B",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 1))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Projective_Measurements.diag_elem_indices_itself",
     "?i < dim_row ?B ==> ?i : diag_elem_indices (?B $$ (?i, ?i)) ?B",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 1))),
               template_var 0))
           ))),
    ("Projective_Measurements.diag_idx_to_el_less_surj",
     "?x : diag_elems ?B ==>
      EX k:{..<dist_el_card ?B}. ?x = diag_idx_to_el ?B k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0))),
             t_empty)
           ))),
    ("Projective_Measurements.spectrum_eigenvalues",
     "[| ?A : carrier_mat ?n ?n; ?k : spectrum ?A |] ==> eigenvalue ?A ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Projective_Measurements.diag_elem_indices_elem",
     "?a : diag_elem_indices ?x ?B ==>
      ?a < dim_row ?B & ?B $$ (?a, ?a) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 2))),
               template_var 1))
           ))),
    ("Projective_Measurements.spectrum_char_poly_root",
     "[| ?A : carrier_mat ?n ?n; ?k : spectrum ?A |]
      ==> poly (char_poly ?A) ?k = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 0),
         template_hole 0))),
    ("Projective_Measurements.hermitian_decomp_real_eigvals",
     "hermitian_decomp ?A ?B ?U ==>
      ALL i<dim_row ?B. ?B $$ (i, i) : \<real>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Projective_Measurements.diag_elems_real",
     "ALL i<dim_row ?B. ?B $$ (i, i) : \<real> ==>
      diag_elems ?B <= \<real>",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_hole 2))),
    ("Projective_Measurements.diag_elem_indices_union",
     "?B : carrier_mat ?dimR ?dimC ==>
      (UN i<dist_el_card ?B. diag_elem_indices (diag_idx_to_el ?B i) ?B) =
      {..<?dimR}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))),
         template_app (template_hole 1, template_var 1)))),
    ("Projective_Measurements.diag_idx_to_el_less_inj",
     "[| ?i < dist_el_card ?B; ?j < dist_el_card ?B;
         diag_idx_to_el ?B ?i = diag_idx_to_el ?B ?j |]
      ==> ?i = ?j",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_equation (template_var 2, template_var 0))),
    ("Projective_Measurements.density_collapse_carrier",
     "[| 0 < dim_row ?R; ?P : carrier_mat ?n ?n; ?R : carrier_mat ?n ?n |]
      ==> density_collapse ?R ?P : carrier_mat ?n ?n",
     template_implication
      ([template_inequation
         (less_than, template_hole 4,
          template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 0))
           ))),
    ("Projective_Measurements.eigvals_poly_length",
     "?M : carrier_mat ?n ?n ==>
      char_poly ?M = (PROD a<-eigvals ?M. [:- a, 1:]) &
      length (eigvals ?M) = dim_row ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_app
               (template_app (template_hole 13, template_var 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_var 1)),
                 template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, t_empty),
                     template_app (template_hole 3, template_var 1))))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 3, template_var 1))),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Projective_Measurements.diag_idx_to_el_real",
     "[| ALL i<dim_row ?B. ?B $$ (i, i) : \<real>; ?i < dist_el_card ?B |]
      ==> complex_of_real (Re (diag_idx_to_el ?B ?i)) =
          diag_idx_to_el ?B ?i",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Projective_Measurements.density_collapse_operator",
     "[| projector ?P; density_operator ?R; 0 < dim_row ?R;
         ?P : carrier_mat ?n ?n; ?R : carrier_mat ?n ?n |]
      ==> density_operator (density_collapse ?R ?P)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_hole 4,
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))
           ))),
    ("Projective_Measurements.diag_elems_Re",
     "ALL i<dim_row ?B. ?B $$ (i, i) : \<real> ==>
      {complex_of_real (Re x) |x. x : diag_elems ?B} = diag_elems ?B",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty))],
       template_equation
        (template_app (template_hole 6, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Projective_Measurements.unitary_hermitian_eigenvalues",
     "[| Complex_Matrix.unitary ?U; hermitian ?U; ?U : carrier_mat ?n ?n;
         0 < ?n; ?k : spectrum ?U |]
      ==> ?k : {- 1, 1}",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 1))
            ),
        template_inequation (less_than, template_hole 6, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)),
               template_app
                (template_app (template_hole 3, template_hole 1),
                 template_hole 0)))
           ))),
    ("Projective_Measurements.diag_elem_indices_empty",
     "[| ?B : carrier_mat ?dimR ?dimC; ?i < dist_el_card ?B;
         ?j < dist_el_card ?B; ?i ~= ?j |]
      ==> diag_elem_indices (diag_idx_to_el ?B ?i) ?B Int
          diag_elem_indices (diag_idx_to_el ?B ?j) ?B =
          {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 4),
              template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2))
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 7, template_var 4)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 7, template_var 4)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 1)),
               template_var 4)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 0)),
             template_var 4)),
         template_hole 0))),
    ("Projective_Measurements.unitary_hermitian_Re_spectrum",
     "[| Complex_Matrix.unitary ?U; hermitian ?U; ?U : carrier_mat ?n ?n;
         0 < ?n |]
      ==> {Re x |x. x : spectrum ?U} <= {- 1, 1}",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 1)),
        template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_app
               (template_app (template_hole 14, template_var 0),
                template_var 0))
            ),
        template_inequation (less_than, template_hole 12, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 10, t_empty),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_app
            (template_app (template_hole 3, template_hole 1),
             template_hole 0)))))]:
   (string * thm * template) list
### theory "Draft.Projective_MeasurementsTemplates"
### 2.045s elapsed time, 2.939s cpu time, 0.993s GC time
val it = (): unit
