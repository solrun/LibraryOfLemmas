Loading theory "Draft.Var" (required by "Draft.Circus_ActionsTemplates" via "Draft.Circus_Actions" via "Draft.CSP_Processes" via "Draft.Reactive_Processes" via "Draft.Designs" via "Draft.Relations")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Circus_ActionsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Circus_ActionsTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Circus_ActionsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Var"
### 0.047s elapsed time, 0.226s cpu time, 0.000s GC time
Loading theory "Draft.Relations" (required by "Draft.Circus_ActionsTemplates" via "Draft.Circus_Actions" via "Draft.CSP_Processes" via "Draft.Reactive_Processes" via "Draft.Designs")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Ambiguous input (line 31 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>not" ("_position" P))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>not" ("_applC" ("_position" P) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^const>HOL.Not" ("_position" P))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>not" ("_applC" ("_position" P) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>not" ("_position" P))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^const>HOL.Not" ("_position" P))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 34 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>conj" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>conj" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>conj" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>conj" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 37 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.disj" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>disj" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.disj" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>disj" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>disj" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>disj" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>impl" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>impl" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>impl" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>impl" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Function_Algebras"
### 0.141s elapsed time, 0.578s cpu time, 0.049s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Circus_ActionsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Ambiguous input (line 43 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("\<^const>HOL.iff" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.iff" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>iff" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.iff" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^const>HOL.iff" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>iff" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>iff" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>iff" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/Circus/Relations.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>HOL.disj"
###     ("\<^const>Relations.conj" ("_position" b) ("_position" P))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>Relations.disj"
###     ("\<^const>Relations.conj" ("_position" b) ("_position" P))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>HOL.disj" ("\<^const>HOL.conj" ("_position" b) ("_position" P))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>Relations.disj"
###     ("\<^const>HOL.conj" ("_position" b) ("_position" P))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>HOL.disj"
###     ("\<^const>Relations.conj" ("_position" b) ("_position" P))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>Relations.disj"
###     ("\<^const>Relations.conj" ("_position" b) ("_position" P))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>HOL.disj" ("\<^const>HOL.conj" ("_position" b) ("_position" P))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>Relations.disj"
###     ("\<^const>HOL.conj" ("_position" b) ("_position" P))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>HOL.disj"
###     ("\<^const>Relations.conj" ("_position" b) ("_position" P))
###     ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>Relations.disj"
###     ("\<^const>Relations.conj" ("_position" b) ("_position" P))
###     ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" b))
###       ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 71 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_list" ("_position" P))
###   ("\<^const>HOL.All_binder" ("_position" A)
###     ("_applC" ("_position" P) ("_position" A))))
### ("\<^const>Pure.eq" ("\<^fixed>closure" ("_position" P))
###   ("\<^const>HOL.All_binder" ("_position" A)
###     ("_applC" ("_position" P) ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>ndet" ("_position" P) ("_position" Q))
###   ("\<^const>HOL.disj" ("_position" P) ("_position" Q)))
### ("\<^const>Pure.eq" ("\<^fixed>ndet" ("_position" P) ("_position" Q))
###   ("\<^const>Relations.disj" ("_position" P) ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>join" ("_position" P) ("_position" Q))
###   ("\<^const>HOL.conj" ("_position" P) ("_position" Q)))
### ("\<^const>Pure.eq" ("\<^fixed>join" ("_position" P) ("_position" Q))
###   ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" false) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.not" ("_position" P)) ("_position" x))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" false) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.Not" ("_position" P)) ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 114 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.not" ("_position" P)) ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###     ("\<^const>HOL.Trueprop" ("_position" C))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.Not" ("_position" P)) ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###     ("\<^const>HOL.Trueprop" ("_position" C))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 115 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.not" ("_position" P)) ("_position" x)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Relations.not" ("_applC" ("_position" P) ("_position" x)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.Not" ("_position" P)) ("_position" x)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Relations.not" ("_applC" ("_position" P) ("_position" x)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.not" ("_position" P)) ("_position" x)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" x)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.Not" ("_position" P)) ("_position" x)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 117 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###         ("_position" x)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 118 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" C))))
###     ("\<^const>HOL.Trueprop" ("_position" C))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" C))))
###     ("\<^const>HOL.Trueprop" ("_position" C))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 120 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not" ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("_position" x))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Relations.not" ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("_position" x))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not" ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("_position" x))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Relations.not" ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 121 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>HOL.Trueprop" ("_position" C)))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" C)))
###       ("\<^const>HOL.Trueprop" ("_position" C)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>HOL.Trueprop" ("_position" C)))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" C)))
###       ("\<^const>HOL.Trueprop" ("_position" C)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 123 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###       ("_position" x))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###       ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 124 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R)))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R)))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R)))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R)))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x))))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>HOL.iff" ("_position" P) ("_position" Q))
###         ("_position" x)))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x))))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Set_Algebras"
### 0.265s elapsed time, 1.076s cpu time, 0.049s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Circus_ActionsTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 128 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.iff" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not" ("_applC" ("_position" Q) ("_position" x))))
###           ("\<^const>HOL.Trueprop" ("_position" R))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not" ("_applC" ("_position" Q) ("_position" x))))
###           ("\<^const>HOL.Trueprop" ("_position" R))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.iff" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Relations.not"
###             ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not" ("_applC" ("_position" Q) ("_position" x))))
###           ("\<^const>HOL.Trueprop" ("_position" R))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Relations.not"
###             ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not" ("_applC" ("_position" Q) ("_position" x))))
###           ("\<^const>HOL.Trueprop" ("_position" R))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.iff" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Relations.not"
###               ("_applC" ("_position" Q) ("_position" x))))
###           ("\<^const>HOL.Trueprop" ("_position" R))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Relations.not"
###               ("_applC" ("_position" Q) ("_position" x))))
###           ("\<^const>HOL.Trueprop" ("_position" R))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.iff" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Relations.not"
###             ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Relations.not"
###               ("_applC" ("_position" Q) ("_position" x))))
###           ("\<^const>HOL.Trueprop" ("_position" R))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Relations.not"
###             ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Relations.not"
###               ("_applC" ("_position" Q) ("_position" x))))
###           ("\<^const>HOL.Trueprop" ("_position" R))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 172 of "$AFP/Circus/Relations.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.implies"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.implies"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.impl" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.implies"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.impl" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.implies"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.impl" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.impl" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/Circus/Relations.thy") produces 128 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.disj"
###         ("\<^const>Relations.conj"
###           ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.disj"
###         ("\<^const>Relations.conj"
###           ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.disj"
###         ("\<^const>Relations.conj"
###           ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.disj"
###         ("\<^const>Relations.conj"
###           ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.conj" ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.conj" ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.disj"
###         ("\<^const>HOL.conj" ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.disj"
###         ("\<^const>HOL.conj" ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.disj"
###         ("\<^const>Relations.conj"
###           ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>Relations.not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.disj"
###         ("\<^const>Relations.conj"
###           ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>Relations.not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 187 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("_position" Q))
###     ("\<^const>Relations.cond" ("_position" Q)
###       ("\<^const>HOL.Not" ("_position" b)) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("_position" Q))
###     ("\<^const>Relations.cond" ("_position" Q)
###       ("\<^const>Relations.not" ("_position" b)) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 190 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" c) ("_position" R))
###     ("\<^const>Relations.cond" ("_position" P)
###       ("\<^const>Relations.conj" ("_position" b) ("_position" c))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" c)
###         ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" c) ("_position" R))
###     ("\<^const>Relations.cond" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" b) ("_position" c))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" c)
###         ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  shift :: "'a list => 'a stream => 'a stream"
### Ambiguous input (line 205 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" c)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("_position" P)
###       ("\<^const>Relations.disj" ("_position" b) ("_position" c))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" c)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" b) ("_position" c))
###       ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 208 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>HOL.conj" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("_position" b) ("\<^const>HOL.conj" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>Relations.conj" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.conj" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>HOL.conj" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("_position" b) ("\<^const>HOL.conj" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>Relations.conj" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.conj" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for coinductive predicate(s) "streamsp"
### Ambiguous input (line 211 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>HOL.disj" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("_position" b) ("\<^const>HOL.disj" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>Relations.disj" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.disj" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>HOL.disj" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("_position" b) ("\<^const>HOL.disj" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>Relations.disj" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.disj" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 215 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.iff" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>HOL.iff" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.iff"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###       ("_position" b) ("\<^const>HOL.iff" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.iff"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.iff" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>Relations.iff" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.iff"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.iff" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.iff"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.iff" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>HOL.iff" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.iff"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###       ("_position" b) ("\<^const>HOL.iff" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.iff"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.iff" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>Relations.iff" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.iff"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.iff" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.iff"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 226 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" c)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" c)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.conj" ("_position" P)
###         ("\<^const>Relations.comp" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.comp"
###         ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###         ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" c)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" c)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.conj" ("_position" P)
###         ("\<^const>Relations.comp" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.comp"
###         ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###         ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" c)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" c)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.conj" ("_position" P)
###         ("\<^const>Relations.comp" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.comp"
###         ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###         ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" c)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" c)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.conj" ("_position" P)
###         ("\<^const>Relations.comp" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.comp"
###         ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###         ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 234 of "$AFP/Circus/Relations.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.ndet"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" 'a) ("_type_name" relation)))
###         ("_position" Q))
###       ("_position" Q))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet"
###     ("\<^const>Relations.ndet"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" 'a) ("_type_name" relation)))
###       ("\<^const>HOL.eq" ("_position" Q) ("_position" Q)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet"
###     ("_constrain" ("_position" P)
###       ("_tapp" ("_position_sort" 'a) ("_type_name" relation)))
###     ("\<^const>Relations.ndet"
###       ("\<^const>HOL.eq" ("_position" Q) ("_position" Q)) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.ndet"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" 'a) ("_type_name" relation)))
###       ("_position" Q))
###     ("\<^const>Relations.ndet" ("_position" Q) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet"
###     ("_constrain" ("_position" P)
###       ("_tapp" ("_position_sort" 'a) ("_type_name" relation)))
###     ("\<^const>HOL.eq" ("_position" Q)
###       ("\<^const>Relations.ndet" ("_position" Q) ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 237 of "$AFP/Circus/Relations.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.ndet" ("_position" P)
###         ("\<^const>Relations.ndet" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.ndet" ("_position" P) ("_position" Q)))
###     ("_position" R)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet"
###     ("\<^const>Relations.ndet" ("_position" P)
###       ("\<^const>HOL.eq"
###         ("\<^const>Relations.ndet" ("_position" Q) ("_position" R))
###         ("\<^const>Relations.ndet" ("_position" P) ("_position" Q))))
###     ("_position" R)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet" ("_position" P)
###     ("\<^const>Relations.ndet"
###       ("\<^const>HOL.eq"
###         ("\<^const>Relations.ndet" ("_position" Q) ("_position" R))
###         ("\<^const>Relations.ndet" ("_position" P) ("_position" Q)))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.ndet" ("_position" P)
###       ("\<^const>Relations.ndet" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.ndet"
###       ("\<^const>Relations.ndet" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet" ("_position" P)
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.ndet" ("_position" Q) ("_position" R))
###       ("\<^const>Relations.ndet"
###         ("\<^const>Relations.ndet" ("_position" P) ("_position" Q))
###         ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 240 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.ndet" ("_position" P) ("_position" P))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet" ("_position" P)
###     ("\<^const>HOL.eq" ("_position" P) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 243 of "$AFP/Circus/Relations.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.ndet" ("_position" P)
###         ("\<^const>Relations.ndet" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.ndet" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.ndet" ("_position" P) ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet"
###     ("\<^const>Relations.ndet" ("_position" P)
###       ("\<^const>HOL.eq"
###         ("\<^const>Relations.ndet" ("_position" Q) ("_position" R))
###         ("\<^const>Relations.ndet" ("_position" P) ("_position" Q))))
###     ("\<^const>Relations.ndet" ("_position" P) ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet" ("_position" P)
###     ("\<^const>Relations.ndet"
###       ("\<^const>HOL.eq"
###         ("\<^const>Relations.ndet" ("_position" Q) ("_position" R))
###         ("\<^const>Relations.ndet" ("_position" P) ("_position" Q)))
###       ("\<^const>Relations.ndet" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.ndet" ("_position" P)
###       ("\<^const>Relations.ndet" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.ndet"
###       ("\<^const>Relations.ndet" ("_position" P) ("_position" Q))
###       ("\<^const>Relations.ndet" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet" ("_position" P)
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.ndet" ("_position" Q) ("_position" R))
###       ("\<^const>Relations.ndet"
###         ("\<^const>Relations.ndet" ("_position" P) ("_position" Q))
###         ("\<^const>Relations.ndet" ("_position" P) ("_position" R))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 258 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" X) ("_position" S)
###     ("_list"
###       ("\<^const>Relations.impl" ("_position" X)
###         ("\<^const>Relations.ndetS" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" X) ("_position" S)
###     ("_list"
###       ("\<^const>HOL.implies" ("_position" X)
###         ("\<^const>Relations.ndetS" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" X) ("_position" S)
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.impl" ("_position" X)
###         ("\<^const>Relations.ndetS" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" X) ("_position" S)
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.implies" ("_position" X)
###         ("\<^const>Relations.ndetS" ("_position" S))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  snth :: "'a stream => nat => 'a"
### Ambiguous input (line 261 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>Relations.impl" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>Relations.impl" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("_list" ("\<^const>HOL.implies" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("_list" ("\<^const>HOL.implies" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("_list" ("\<^const>Relations.impl" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("_list" ("\<^const>Relations.impl" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>HOL.implies" ("\<^const>Relations.ndetS" ("_position" S))
###         ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>HOL.implies" ("\<^const>Relations.ndetS" ("_position" S))
###         ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 264 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_list"
###       ("\<^const>HOL.implies" ("\<^const>Relations.ndetS" ("_position" S))
###         ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("_list"
###       ("\<^const>HOL.implies" ("\<^const>Relations.ndetS" ("_position" S))
###         ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.implies" ("\<^const>Relations.ndetS" ("_position" S))
###         ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.implies" ("\<^const>Relations.ndetS" ("_position" S))
###         ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>Relations.impl" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>Relations.impl" ("_position" X) ("_position" P))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 267 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>Relations.ndetS" ("\<^const>Set.empty"))
###     ("_position" Top)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndetS"
###     ("\<^const>HOL.eq" ("\<^const>Set.empty") ("_position" Top))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  stake :: "nat => 'a stream => 'a list"
### Ambiguous input (line 270 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_list"
###       ("\<^const>Relations.impl" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("_list"
###       ("\<^const>Relations.impl" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_list"
###       ("\<^const>HOL.implies" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("_list"
###       ("\<^const>HOL.implies" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.impl" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.impl" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.implies" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.implies" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_list"
###       ("\<^const>Relations.impl" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>Relations.impl" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("_list"
###       ("\<^const>Relations.impl" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>Relations.impl" ("_position" P) ("_position" X))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 273 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>Relations.conjS" ("\<^const>Set.empty"))
###     ("_position" Bot)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.conjS"
###     ("\<^const>HOL.eq" ("\<^const>Set.empty") ("_position" Bot))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Ambiguous input (line 299 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("\<^const>Relations.not" ("_position" P))
###       ("_position" b) ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("\<^const>Relations.not" ("_position" P))
###       ("_position" b) ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("\<^const>HOL.Not" ("_position" P))
###       ("_position" b) ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("\<^const>HOL.Not" ("_position" P))
###       ("_position" b) ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("\<^const>Relations.not" ("_position" P))
###       ("_position" b) ("\<^const>HOL.Not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("\<^const>Relations.not" ("_position" P))
###       ("_position" b) ("\<^const>HOL.Not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("\<^const>HOL.Not" ("_position" P))
###       ("_position" b) ("\<^const>HOL.Not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("\<^const>HOL.Not" ("_position" P))
###       ("_position" b) ("\<^const>HOL.Not" ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### Ambiguous input (line 303 of "$AFP/Circus/Relations.thy") produces 64 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>HOL.Not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P)
###         ("\<^const>Relations.not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>HOL.Not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P)
###         ("\<^const>Relations.not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>Relations.not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P)
###         ("\<^const>Relations.not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>Relations.not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P)
###         ("\<^const>Relations.not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>HOL.Not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P)
###         ("\<^const>Relations.not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>HOL.Not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P)
###         ("\<^const>Relations.not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>Relations.not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P)
###         ("\<^const>Relations.not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>Relations.not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P)
###         ("\<^const>Relations.not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>HOL.Not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P)
###         ("\<^const>HOL.Not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>HOL.Not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P)
###         ("\<^const>HOL.Not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 306 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl" ("_position" R)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" R) ("_position" P))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies" ("_position" R)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" R) ("_position" P))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl" ("_position" R)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" R) ("_position" P))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies" ("_position" R)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" R) ("_position" P))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl" ("_position" R)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" R) ("_position" P))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies" ("_position" R)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" R) ("_position" P))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl" ("_position" R)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" R) ("_position" P))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies" ("_position" R)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" R) ("_position" P))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" R) ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 309 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 312 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)) ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)) ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)) ("_position" b)
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)) ("_position" b)
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  cycle :: "'a list => 'a stream"
### Ambiguous input (line 315 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)) ("_position" b)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)) ("_position" b)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)) ("_position" b)
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)) ("_position" b)
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 318 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("_position" b)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" b) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("_position" b)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" b) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("_position" b)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("_position" b) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("_position" b)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("_position" b) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 321 of "$AFP/Circus/Relations.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("\<^const>HOL.Not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("\<^const>HOL.Not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" b))
###       ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 324 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("_position" Q))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" b) ("_position" P)) ("_position" b)
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("_position" Q))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" b) ("_position" P))
###       ("_position" b) ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 327 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("_position" Q))
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("\<^const>HOL.conj" ("\<^const>HOL.Not" ("_position" b))
###         ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("_position" Q))
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" b))
###         ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("_position" Q))
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###         ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("_position" Q))
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###         ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 330 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>HOL.Not" ("_position" true))
###     ("_position" false)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>Relations.not" ("_position" true))
###     ("_position" false)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 333 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>HOL.Not" ("_position" false))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>Relations.not" ("_position" false))
###     ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 336 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" P))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" P))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 339 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" P))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" P))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 342 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" Q))
###     ("\<^const>Relations.conj" ("_position" Q) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" Q))
###     ("\<^const>Relations.conj" ("_position" Q) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" Q))
###     ("\<^const>HOL.conj" ("_position" Q) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" Q))
###     ("\<^const>HOL.conj" ("_position" Q) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 345 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" Q))
###     ("\<^const>Relations.disj" ("_position" Q) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" Q))
###     ("\<^const>Relations.disj" ("_position" Q) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" Q))
###     ("\<^const>HOL.disj" ("_position" Q) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" Q))
###     ("\<^const>HOL.disj" ("_position" Q) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 348 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("\<^const>Relations.conj" ("_position" R) ("_position" Q)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("\<^const>Relations.conj" ("_position" R) ("_position" Q)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" R) ("_position" Q)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" R) ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### Ambiguous input (line 351 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("\<^const>Relations.disj" ("_position" R) ("_position" Q)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("\<^const>Relations.disj" ("_position" R) ("_position" Q)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" R) ("_position" Q)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" R) ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 354 of "$AFP/Circus/Relations.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.conj" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.conj" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.conj" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.conj" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>HOL.conj" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>HOL.conj" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>HOL.conj" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>HOL.conj" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.conj" ("_position" P)
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.conj" ("_position" P)
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 357 of "$AFP/Circus/Relations.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.disj" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.disj" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.disj" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.disj" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>HOL.disj" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>HOL.disj" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>HOL.disj" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>HOL.disj" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.disj" ("_position" P)
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.disj" ("_position" P)
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 360 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q)))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 363 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 366 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.disj"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.disj"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.disj"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.disj"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### Ambiguous input (line 369 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 372 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("_position" P) ("_position" true))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("_position" P) ("_position" true))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 375 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj" ("_position" P) ("_position" true))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj" ("_position" P) ("_position" true))
###     ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 378 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("_position" P) ("_position" false))
###     ("_position" false)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("_position" P) ("_position" false))
###     ("_position" false)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 381 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj" ("_position" P) ("_position" false))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj" ("_position" P) ("_position" false))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 384 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl" ("_position" false) ("_position" u))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies" ("_position" false) ("_position" u))
###     ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 387 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("_position" P)
###       ("\<^const>HOL.Not" ("_position" P)))
###     ("_position" false)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("_position" P)
###       ("\<^const>HOL.Not" ("_position" P)))
###     ("_position" false)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("_position" P)
###       ("\<^const>Relations.not" ("_position" P)))
###     ("_position" false)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("_position" P)
###       ("\<^const>Relations.not" ("_position" P)))
###     ("_position" false)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### Ambiguous input (line 390 of "$AFP/Circus/Relations.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("\<^const>HOL.Not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("\<^const>HOL.Not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("\<^const>HOL.Not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("\<^const>HOL.Not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("\<^const>Relations.not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("\<^const>Relations.not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("\<^const>Relations.not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("\<^const>Relations.not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("\<^const>HOL.Not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("\<^const>HOL.Not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("_position" P) ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 393 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj" ("_position" P)
###       ("\<^const>HOL.Not" ("_position" P)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj" ("_position" P)
###       ("\<^const>HOL.Not" ("_position" P)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj" ("_position" P)
###       ("\<^const>Relations.not" ("_position" P)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj" ("_position" P)
###       ("\<^const>Relations.not" ("_position" P)))
###     ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 396 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.Not"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.Not"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.not"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.not"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 399 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.disj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.disj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.disj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.disj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>HOL.disj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>HOL.disj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>HOL.disj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>HOL.disj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.disj" ("\<^const>HOL.Not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.disj" ("\<^const>HOL.Not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Ambiguous input (line 402 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 405 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl" ("_position" P) ("_position" P))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies" ("_position" P) ("_position" P))
###     ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 408 of "$AFP/Circus/Relations.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.impl"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.impl"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.impl"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.impl"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Ambiguous input (line 411 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.conj"
###         ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.conj"
###         ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>HOL.conj"
###         ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###         ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###         ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 414 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.iff" ("_position" P) ("_position" P))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>HOL.iff" ("_position" P) ("_position" P))
###     ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Ambiguous input (line 417 of "$AFP/Circus/Relations.thy") produces 64 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.disj"
###         ("\<^const>Relations.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.disj"
###         ("\<^const>Relations.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.disj"
###         ("\<^const>Relations.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.disj"
###         ("\<^const>Relations.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.disj"
###         ("\<^const>HOL.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.disj"
###         ("\<^const>HOL.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.disj"
###         ("\<^const>Relations.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>HOL.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.disj"
###         ("\<^const>Relations.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>HOL.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 420 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.iff"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.iff"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.iff"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.iff"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 426 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.ex_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.ex_binder" ("_position" x)
###         ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>Relations.ex_binder" ("_position" x)
###       ("\<^const>HOL.disj" ("_applC" ("_position" P) ("_position" x))
###         ("_applC" ("_position" Q) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.ex_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.ex_binder" ("_position" x)
###         ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>Relations.ex_binder" ("_position" x)
###       ("\<^const>HOL.disj" ("_applC" ("_position" P) ("_position" x))
###         ("_applC" ("_position" Q) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.ex_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.ex_binder" ("_position" x)
###         ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>Relations.ex_binder" ("_position" x)
###       ("\<^const>Relations.disj" ("_applC" ("_position" P) ("_position" x))
###         ("_applC" ("_position" Q) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.ex_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.ex_binder" ("_position" x)
###         ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>Relations.ex_binder" ("_position" x)
###       ("\<^const>Relations.disj" ("_applC" ("_position" P) ("_position" x))
###         ("_applC" ("_position" Q) ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 429 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.all_binder" ("_position" x) ("_position" Q)))
###     ("\<^const>Relations.all_binder" ("_position" x)
###       ("\<^const>HOL.disj" ("_applC" ("_position" P) ("_position" x))
###         ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.all_binder" ("_position" x) ("_position" Q)))
###     ("\<^const>Relations.all_binder" ("_position" x)
###       ("\<^const>HOL.disj" ("_applC" ("_position" P) ("_position" x))
###         ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.all_binder" ("_position" x) ("_position" Q)))
###     ("\<^const>Relations.all_binder" ("_position" x)
###       ("\<^const>Relations.disj" ("_applC" ("_position" P) ("_position" x))
###         ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.all_binder" ("_position" x) ("_position" Q)))
###     ("\<^const>Relations.all_binder" ("_position" x)
###       ("\<^const>Relations.disj" ("_applC" ("_position" P) ("_position" x))
###         ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 432 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>Relations.all_binder" ("_position" x)
###       ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" x))
###         ("_applC" ("_position" Q) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>Relations.all_binder" ("_position" x)
###       ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" x))
###         ("_applC" ("_position" Q) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>Relations.all_binder" ("_position" x)
###       ("\<^const>Relations.conj" ("_applC" ("_position" P) ("_position" x))
###         ("_applC" ("_position" Q) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>Relations.all_binder" ("_position" x)
###       ("\<^const>Relations.conj" ("_applC" ("_position" P) ("_position" x))
###         ("_applC" ("_position" Q) ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Stream"
### 1.193s elapsed time, 4.575s cpu time, 0.769s GC time
### Ambiguous input (line 438 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop" ("_list" ("_position" true)))
### ("\<^const>HOL.Trueprop" ("\<^const>Relations.closure" ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 441 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff" ("_list" ("_position" P))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" true))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff" ("_list" ("_position" P))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" true))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff" ("\<^const>Relations.closure" ("_position" P))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" true))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff" ("\<^const>Relations.closure" ("_position" P))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" true))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 444 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_list" ("\<^const>Relations.iff" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("_list" ("\<^const>Relations.iff" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_list" ("\<^const>HOL.iff" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("_list" ("\<^const>HOL.iff" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.iff" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.iff" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.iff" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.iff" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 447 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.closure" ("_position" P))
###       ("\<^const>Relations.closure" ("_position" Q)))
###     ("_list" ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("\<^const>Relations.closure" ("_position" P))
###       ("\<^const>Relations.closure" ("_position" Q)))
###     ("_list" ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("_list" ("_position" P))
###       ("\<^const>Relations.closure" ("_position" Q)))
###     ("_list" ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("_list" ("_position" P))
###       ("\<^const>Relations.closure" ("_position" Q)))
###     ("_list" ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.closure" ("_position" P))
###       ("_list" ("_position" Q)))
###     ("_list" ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("\<^const>Relations.closure" ("_position" P))
###       ("_list" ("_position" Q)))
###     ("_list" ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))
###     ("_list" ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))
###     ("_list" ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.closure" ("_position" P))
###       ("\<^const>Relations.closure" ("_position" Q)))
###     ("_list" ("\<^const>HOL.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("\<^const>Relations.closure" ("_position" P))
###       ("\<^const>Relations.closure" ("_position" Q)))
###     ("_list" ("\<^const>HOL.conj" ("_position" P) ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 450 of "$AFP/Circus/Relations.thy") produces 64 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_list" ("\<^const>Relations.impl" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_list" ("\<^const>Relations.impl" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_list" ("\<^const>HOL.implies" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_list" ("\<^const>HOL.implies" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_list" ("\<^const>Relations.impl" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.impl" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_list" ("\<^const>Relations.impl" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.impl" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 453 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.iff" ("_position" P) ("_position" true))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>HOL.iff" ("_position" P) ("_position" true))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 456 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl" ("_position" true) ("_position" P))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies" ("_position" true) ("_position" P))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Relations"
### 1.200s elapsed time, 4.536s cpu time, 0.769s GC time
Loading theory "Draft.Designs" (required by "Draft.Circus_ActionsTemplates" via "Draft.Circus_Actions" via "Draft.CSP_Processes" via "Draft.Reactive_Processes")
### theory "HOL-Library.BigO"
### 0.977s elapsed time, 3.656s cpu time, 0.720s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 24 of "$AFP/Circus/Designs.thy") produces 8 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>design" ("_position" P) ("_position" Q))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.conj" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A')))))
###       ("\<^const>Relations.conj"
###         ("_applC" ("_position" ok) ("_position" A'))
###         ("_applC" ("_position" Q)
###           ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))))))
### ("\<^const>Pure.eq" ("\<^fixed>design" ("_position" P) ("_position" Q))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.conj" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A')))))
###       ("\<^const>Relations.conj"
###         ("_applC" ("_position" ok) ("_position" A'))
###         ("_applC" ("_position" Q)
###           ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))))))
### ("\<^const>Pure.eq" ("\<^fixed>design" ("_position" P) ("_position" Q))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A')))))
###       ("\<^const>Relations.conj"
###         ("_applC" ("_position" ok) ("_position" A'))
###         ("_applC" ("_position" Q)
###           ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))))))
### ("\<^const>Pure.eq" ("\<^fixed>design" ("_position" P) ("_position" Q))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.impl"
###       ("\<^const>HOL.conj" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A')))))
###       ("\<^const>Relations.conj"
###         ("_applC" ("_position" ok) ("_position" A'))
###         ("_applC" ("_position" Q)
###           ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))))))
### ("\<^const>Pure.eq" ("\<^fixed>design" ("_position" P) ("_position" Q))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.conj" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A')))))
###       ("\<^const>HOL.conj" ("_applC" ("_position" ok) ("_position" A'))
###         ("_applC" ("_position" Q)
###           ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))))))
### ("\<^const>Pure.eq" ("\<^fixed>design" ("_position" P) ("_position" Q))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.conj" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A')))))
###       ("\<^const>HOL.conj" ("_applC" ("_position" ok) ("_position" A'))
###         ("_applC" ("_position" Q)
###           ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))))))
### ("\<^const>Pure.eq" ("\<^fixed>design" ("_position" P) ("_position" Q))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A')))))
###       ("\<^const>HOL.conj" ("_applC" ("_position" ok) ("_position" A'))
###         ("_applC" ("_position" Q)
###           ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))))))
### ("\<^const>Pure.eq" ("\<^fixed>design" ("_position" P) ("_position" Q))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.impl"
###       ("\<^const>HOL.conj" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A')))))
###       ("\<^const>HOL.conj" ("_applC" ("_position" ok) ("_position" A'))
###         ("_applC" ("_position" Q)
###           ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/Circus/Designs.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("_position" J)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.impl" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" ok) ("_position" A')))
###       ("\<^const>HOL.eq" ("_applC" ("_position" more) ("_position" A))
###         ("_applC" ("_position" more) ("_position" A'))))))
### ("\<^const>Pure.eq" ("_position" J)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.impl" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" ok) ("_position" A')))
###       ("\<^const>HOL.eq" ("_applC" ("_position" more) ("_position" A))
###         ("_applC" ("_position" more) ("_position" A'))))))
### ("\<^const>Pure.eq" ("_position" J)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" ok) ("_position" A')))
###       ("\<^const>HOL.eq" ("_applC" ("_position" more) ("_position" A))
###         ("_applC" ("_position" more) ("_position" A'))))))
### ("\<^const>Pure.eq" ("_position" J)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" ok) ("_position" A')))
###       ("\<^const>HOL.eq" ("_applC" ("_position" more) ("_position" A))
###         ("_applC" ("_position" more) ("_position" A'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 42 of "$AFP/Circus/Designs.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" H1) ("_position" P))
###   ("\<^const>Relations.impl"
###     ("\<^const>Fun.comp" ("_position" ok) ("_position" fst))
###     ("_position" P)))
### ("\<^const>Pure.eq" ("_applC" ("_position" H1) ("_position" P))
###   ("\<^const>HOL.implies"
###     ("\<^const>Fun.comp" ("_position" ok) ("_position" fst))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 51 of "$AFP/Circus/Designs.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" H4) ("_position" P))
###   ("\<^const>Relations.iff"
###     ("\<^const>Relations.comp" ("_position" P) ("_position" true))
###     ("_position" true)))
### ("\<^const>Pure.eq" ("_applC" ("_position" H4) ("_position" P))
###   ("\<^const>HOL.iff"
###     ("\<^const>Relations.comp" ("_position" P) ("_position" true))
###     ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 85 of "$AFP/Circus/Designs.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>t)
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.conj"
###       ("_applC" ("_position" \<sigma>t) ("_position" P))
###       ("_applC" ("_position" \<sigma>t) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>t)
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.conj"
###       ("_applC" ("_position" \<sigma>t) ("_position" P))
###       ("_applC" ("_position" \<sigma>t) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>t)
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" \<sigma>t) ("_position" P))
###       ("_applC" ("_position" \<sigma>t) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>t)
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" \<sigma>t) ("_position" P))
###       ("_applC" ("_position" \<sigma>t) ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 88 of "$AFP/Circus/Designs.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>t)
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.disj"
###       ("_applC" ("_position" \<sigma>t) ("_position" P))
###       ("_applC" ("_position" \<sigma>t) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>t)
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.disj"
###       ("_applC" ("_position" \<sigma>t) ("_position" P))
###       ("_applC" ("_position" \<sigma>t) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>t)
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.disj" ("_applC" ("_position" \<sigma>t) ("_position" P))
###       ("_applC" ("_position" \<sigma>t) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>t)
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.disj" ("_applC" ("_position" \<sigma>t) ("_position" P))
###       ("_applC" ("_position" \<sigma>t) ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 91 of "$AFP/Circus/Designs.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>t)
###       ("\<^const>Relations.impl" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.impl"
###       ("_applC" ("_position" \<sigma>t) ("_position" P))
###       ("_applC" ("_position" \<sigma>t) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>t)
###       ("\<^const>HOL.implies" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.impl"
###       ("_applC" ("_position" \<sigma>t) ("_position" P))
###       ("_applC" ("_position" \<sigma>t) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>t)
###       ("\<^const>Relations.impl" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" \<sigma>t) ("_position" P))
###       ("_applC" ("_position" \<sigma>t) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>t)
###       ("\<^const>HOL.implies" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" \<sigma>t) ("_position" P))
###       ("_applC" ("_position" \<sigma>t) ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 94 of "$AFP/Circus/Designs.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>t) ("\<^const>HOL.Not" ("_position" P)))
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" \<sigma>t) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>t)
###       ("\<^const>Relations.not" ("_position" P)))
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" \<sigma>t) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>t) ("\<^const>HOL.Not" ("_position" P)))
###     ("\<^const>Relations.not"
###       ("_applC" ("_position" \<sigma>t) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>t)
###       ("\<^const>Relations.not" ("_position" P)))
###     ("\<^const>Relations.not"
###       ("_applC" ("_position" \<sigma>t) ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 97 of "$AFP/Circus/Designs.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>f)
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.conj"
###       ("_applC" ("_position" \<sigma>f) ("_position" P))
###       ("_applC" ("_position" \<sigma>f) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>f)
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.conj"
###       ("_applC" ("_position" \<sigma>f) ("_position" P))
###       ("_applC" ("_position" \<sigma>f) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>f)
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" \<sigma>f) ("_position" P))
###       ("_applC" ("_position" \<sigma>f) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>f)
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.conj" ("_applC" ("_position" \<sigma>f) ("_position" P))
###       ("_applC" ("_position" \<sigma>f) ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 100 of "$AFP/Circus/Designs.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>f)
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.disj"
###       ("_applC" ("_position" \<sigma>f) ("_position" P))
###       ("_applC" ("_position" \<sigma>f) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>f)
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.disj"
###       ("_applC" ("_position" \<sigma>f) ("_position" P))
###       ("_applC" ("_position" \<sigma>f) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>f)
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.disj" ("_applC" ("_position" \<sigma>f) ("_position" P))
###       ("_applC" ("_position" \<sigma>f) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>f)
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.disj" ("_applC" ("_position" \<sigma>f) ("_position" P))
###       ("_applC" ("_position" \<sigma>f) ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 103 of "$AFP/Circus/Designs.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>f)
###       ("\<^const>Relations.impl" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.impl"
###       ("_applC" ("_position" \<sigma>f) ("_position" P))
###       ("_applC" ("_position" \<sigma>f) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>f)
###       ("\<^const>HOL.implies" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.impl"
###       ("_applC" ("_position" \<sigma>f) ("_position" P))
###       ("_applC" ("_position" \<sigma>f) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>f)
###       ("\<^const>Relations.impl" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" \<sigma>f) ("_position" P))
###       ("_applC" ("_position" \<sigma>f) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>f)
###       ("\<^const>HOL.implies" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" \<sigma>f) ("_position" P))
###       ("_applC" ("_position" \<sigma>f) ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 106 of "$AFP/Circus/Designs.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>f) ("\<^const>HOL.Not" ("_position" P)))
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" \<sigma>f) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>f)
###       ("\<^const>Relations.not" ("_position" P)))
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" \<sigma>f) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>f) ("\<^const>HOL.Not" ("_position" P)))
###     ("\<^const>Relations.not"
###       ("_applC" ("_position" \<sigma>f) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<sigma>f)
###       ("\<^const>Relations.not" ("_position" P)))
###     ("\<^const>Relations.not"
###       ("_applC" ("_position" \<sigma>f) ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 123 of "$AFP/Circus/Designs.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_list"
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>Relations.impl"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok) ("_position" False))))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok)
###                   ("_position" True))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.closure"
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>Relations.impl"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok) ("_position" False))))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok)
###                   ("_position" True))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_list"
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok) ("_position" False))))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok)
###                   ("_position" True))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.closure"
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok) ("_position" False))))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok)
###                   ("_position" True))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/Circus/Designs.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_applC" ("_position" P)
###       ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###     ("_applC" ("\<^const>Relations.comp" ("_position" P) ("_position" J))
###       ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_applC" ("_position" P)
###       ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###     ("_applC" ("\<^const>Relations.comp" ("_position" P) ("_position" J))
###       ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 138 of "$AFP/Circus/Designs.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_list"
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>Relations.impl"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok) ("_position" False))))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok)
###                   ("_position" True))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.closure"
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>Relations.impl"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok) ("_position" False))))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok)
###                   ("_position" True))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_list"
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok) ("_position" False))))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok)
###                   ("_position" True))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.closure"
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok) ("_position" False))))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok)
###                   ("_position" True))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 154 of "$AFP/Circus/Designs.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_list"
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>Relations.impl"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok) ("_position" False))))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok)
###                   ("_position" True))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.closure"
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>Relations.impl"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok) ("_position" False))))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok)
###                   ("_position" True))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_list"
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok) ("_position" False))))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok)
###                   ("_position" True))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.closure"
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok) ("_position" False))))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" A)
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" ok)
###                   ("_position" True))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 163 of "$AFP/Circus/Designs.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.closure"
###       ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###         ("\<^const>Relations.impl"
###           ("_applC" ("_position" P)
###             ("_tuple" ("_position" A)
###               ("_tuple_arg"
###                 ("_record_update" ("_position" A')
###                   ("_field_update" ("_constify" ok) ("_position" False))))))
###           ("_applC" ("_position" P)
###             ("_tuple" ("_position" A)
###               ("_tuple_arg"
###                 ("_record_update" ("_position" A')
###                   ("_field_update" ("_constify" ok)
###                     ("_position" True)))))))))
###     ("\<^const>Designs.Healthy" ("_position" P) ("_position" H2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_list"
###       ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###         ("\<^const>Relations.impl"
###           ("_applC" ("_position" P)
###             ("_tuple" ("_position" A)
###               ("_tuple_arg"
###                 ("_record_update" ("_position" A')
###                   ("_field_update" ("_constify" ok) ("_position" False))))))
###           ("_applC" ("_position" P)
###             ("_tuple" ("_position" A)
###               ("_tuple_arg"
###                 ("_record_update" ("_position" A')
###                   ("_field_update" ("_constify" ok)
###                     ("_position" True)))))))))
###     ("\<^const>Designs.Healthy" ("_position" P) ("_position" H2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.closure"
###       ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P)
###             ("_tuple" ("_position" A)
###               ("_tuple_arg"
###                 ("_record_update" ("_position" A')
###                   ("_field_update" ("_constify" ok) ("_position" False))))))
###           ("_applC" ("_position" P)
###             ("_tuple" ("_position" A)
###               ("_tuple_arg"
###                 ("_record_update" ("_position" A')
###                   ("_field_update" ("_constify" ok)
###                     ("_position" True)))))))))
###     ("\<^const>Designs.Healthy" ("_position" P) ("_position" H2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_list"
###       ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" P)
###             ("_tuple" ("_position" A)
###               ("_tuple_arg"
###                 ("_record_update" ("_position" A')
###                   ("_field_update" ("_constify" ok) ("_position" False))))))
###           ("_applC" ("_position" P)
###             ("_tuple" ("_position" A)
###               ("_tuple_arg"
###                 ("_record_update" ("_position" A')
###                   ("_field_update" ("_constify" ok)
###                     ("_position" True)))))))))
###     ("\<^const>Designs.Healthy" ("_position" P) ("_position" H2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Designs.Healthy"
###     ("\<^const>HOL.eq"
###       ("_list"
###         ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" False))))))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True)))))))))
###       ("_position" P))
###     ("_position" H2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Designs.Healthy"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.closure"
###         ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" False))))))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True)))))))))
###       ("_position" P))
###     ("_position" H2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Designs.Healthy"
###     ("\<^const>HOL.eq"
###       ("_list"
###         ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###           ("\<^const>Relations.impl"
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" False))))))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True)))))))))
###       ("_position" P))
###     ("_position" H2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Designs.Healthy"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.closure"
###         ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###           ("\<^const>Relations.impl"
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" False))))))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True)))))))))
###       ("_position" P))
###     ("_position" H2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 166 of "$AFP/Circus/Designs.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Designs.design" ("_position" P) ("_position" Q))
###     ("\<^const>Designs.design" ("_position" P)
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Designs.design" ("_position" P) ("_position" Q))
###     ("\<^const>Designs.design" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 187 of "$AFP/Circus/Designs.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" r) ("_position" r')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" ok) ("_position" r))
###         ("_applC" ("_position" ok) ("_position" r')))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" alpha_d.more) ("_position" r))
###         ("_applC" ("_position" alpha_d.more) ("_position" r'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" r) ("_position" r')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.eq" ("_applC" ("_position" ok) ("_position" r))
###         ("_applC" ("_position" ok) ("_position" r')))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" alpha_d.more) ("_position" r))
###         ("_applC" ("_position" alpha_d.more) ("_position" r'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 194 of "$AFP/Circus/Designs.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>Relations.impl"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a)
###             ("_tuple_arg"
###               ("_record_update" ("_position" b)
###                 ("_field_update" ("_constify" ok) ("_position" True))))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a)
###             ("_tuple_arg"
###               ("_record_update" ("_position" b)
###                 ("_field_update" ("_constify" ok)
###                   ("_position" False)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Designs.Healthy"
###       ("\<^const>Designs.design" ("_position" P) ("_position" Q))
###       ("_position" H2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a)
###             ("_tuple_arg"
###               ("_record_update" ("_position" b)
###                 ("_field_update" ("_constify" ok) ("_position" True))))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a)
###             ("_tuple_arg"
###               ("_record_update" ("_position" b)
###                 ("_field_update" ("_constify" ok)
###                   ("_position" False)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Designs.Healthy"
###       ("\<^const>Designs.design" ("_position" P) ("_position" Q))
###       ("_position" H2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Designs"
### 0.407s elapsed time, 0.869s cpu time, 0.121s GC time
Loading theory "Draft.Reactive_Processes" (required by "Draft.Circus_ActionsTemplates" via "Draft.Circus_Actions" via "Draft.CSP_Processes")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  list :: (type) minus
  minus_list == minus :: 'a list => 'a list => 'a list
class ev_eq = type +
  fixes ev_eq :: "'a => 'a => bool"
  assumes "refl": "!!a. ev_eq a a"
  assumes "comm": "!!a b. ev_eq a b = ev_eq b a"
### Ambiguous input (line 74 of "$AFP/Circus/Reactive_Processes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" filter_chan_set)
###       ("_cargs" ("_position" a) ("_position" cs)))
###     ("\<^const>HOL.Not"
###       ("_Bex" ("_position" e) ("_position" cs)
###         ("_applC" ("_position" ev_eq)
###           ("_cargs" ("_position" a) ("_position" e)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" filter_chan_set)
###       ("_cargs" ("_position" a) ("_position" cs)))
###     ("\<^const>Relations.not"
###       ("_Bex" ("_position" e) ("_position" cs)
###         ("_applC" ("_position" ev_eq)
###           ("_cargs" ("_position" a) ("_position" e)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/Circus/Reactive_Processes.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x) ("_position" S)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Relations.not"
###       ("_applC" ("_position" filter_chan_set)
###         ("_cargs" ("_position" x) ("_position" S))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x) ("_position" S)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not"
###       ("_applC" ("_position" filter_chan_set)
###         ("_cargs" ("_position" x) ("_position" S))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### Ambiguous input (line 96 of "$AFP/Circus/Reactive_Processes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.append" ("_position" a) ("_position" b))
###       ("_applC" ("_position" tr_filter)
###         ("_cargs" ("\<^const>List.append" ("_position" a) ("_position" c))
###           ("_position" cs))))
###     ("\<^const>HOL.eq" ("_position" b)
###       ("_applC" ("_position" tr_filter)
###         ("_cargs" ("_position" c) ("_position" cs))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.append" ("_position" a) ("_position" b))
###       ("_applC" ("_position" tr_filter)
###         ("_cargs" ("\<^const>List.append" ("_position" a) ("_position" c))
###           ("_position" cs))))
###     ("\<^const>HOL.eq" ("_position" b)
###       ("_applC" ("_position" tr_filter)
###         ("_cargs" ("_position" c) ("_position" cs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 104 of "$AFP/Circus/Reactive_Processes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.append" ("_position" a) ("_position" b))
###       ("_applC" ("_position" tr_filter)
###         ("_cargs" ("\<^const>List.append" ("_position" a) ("_position" c))
###           ("_position" cs))))
###     ("\<^const>HOL.eq" ("_position" a)
###       ("_applC" ("_position" tr_filter)
###         ("_cargs" ("_position" a) ("_position" cs))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.append" ("_position" a) ("_position" b))
###       ("_applC" ("_position" tr_filter)
###         ("_cargs" ("\<^const>List.append" ("_position" a) ("_position" c))
###           ("_position" cs))))
###     ("\<^const>HOL.eq" ("_position" a)
###       ("_applC" ("_position" tr_filter)
###         ("_cargs" ("_position" a) ("_position" cs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  list :: (ev_eq) ev_eq
  ev_eq_list == ev_eq :: 'a list => 'a list => bool
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### Ambiguous input (line 164 of "$AFP/Circus/Reactive_Processes.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Orderings.ord_class.less_eq" ("_position" l1) ("_position" l2))
###   ("_applC" ("_position" Sublist.prefix)
###     ("_cargs" ("_position" l1) ("_position" l2))))
### ("\<^const>Pure.eq" ("\<^fixed>subl" ("_position" l1) ("_position" l2))
###   ("_applC" ("_position" Sublist.prefix)
###     ("_cargs" ("_position" l1) ("_position" l2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Tree"
### 2.028s elapsed time, 6.179s cpu time, 1.005s GC time
Loading theory "Draft.Templates" (required by "Draft.Circus_ActionsTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 166 of "$AFP/Circus/Reactive_Processes.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Groups.minus_class.minus" ("_position" l1)
###         ("_position" l2))
###       ("\<^const>List.list.Nil")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" l2)
###         ("_position" l1)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" l1) ("_position" l2)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Groups.minus_class.minus" ("_position" l1)
###         ("_position" l2))
###       ("\<^const>List.list.Nil")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Reactive_Processes.subl" ("_position" l2)
###         ("_position" l1)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" l1) ("_position" l2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Circus_ActionsTemplates")
### Ambiguous input (line 204 of "$AFP/Circus/Reactive_Processes.thy") produces 10 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" R1) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))
###       ("\<^const>Orderings.ord_class.less_eq"
###         ("_applC" ("_position" tr) ("_position" A))
###         ("_applC" ("_position" tr) ("_position" A'))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R1) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.conj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))
###       ("\<^const>Orderings.ord_class.less_eq"
###         ("_applC" ("_position" tr) ("_position" A))
###         ("_applC" ("_position" tr) ("_position" A'))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R1) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))
###       ("_applC" ("_position" tr)
###         ("\<^const>Reactive_Processes.subl" ("_position" A)
###           ("_applC" ("_position" tr) ("_position" A')))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R1) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.conj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))
###       ("_applC" ("_position" tr)
###         ("\<^const>Reactive_Processes.subl" ("_position" A)
###           ("_applC" ("_position" tr) ("_position" A')))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R1) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))
###       ("\<^const>Reactive_Processes.subl"
###         ("_applC" ("_position" tr) ("_position" A))
###         ("_applC" ("_position" tr) ("_position" A'))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R1) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.conj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))
###       ("\<^const>Reactive_Processes.subl"
###         ("_applC" ("_position" tr) ("_position" A))
###         ("_applC" ("_position" tr) ("_position" A'))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R1) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))
###       ("_applC"
###         ("\<^const>Reactive_Processes.subl"
###           ("_applC" ("_position" tr) ("_position" A)) ("_position" tr))
###         ("_position" A')))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R1) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.conj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))
###       ("_applC"
###         ("\<^const>Reactive_Processes.subl"
###           ("_applC" ("_position" tr) ("_position" A)) ("_position" tr))
###         ("_position" A')))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R1) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))
###       ("_applC" ("_position" tr)
###         ("_cargs"
###           ("\<^const>Reactive_Processes.subl" ("_position" A)
###             ("_position" tr))
###           ("_position" A'))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R1) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.conj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" A) ("_tuple_arg" ("_position" A'))))
###       ("_applC" ("_position" tr)
###         ("_cargs"
###           ("\<^const>Reactive_Processes.subl" ("_position" A)
###             ("_position" tr))
###           ("_position" A'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 207 of "$AFP/Circus/Reactive_Processes.thy") produces 18 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_applC" ("_position" R2) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.conj"
###       ("_applC" ("_position" P)
###         ("_tuple"
###           ("_record_update" ("_position" A)
###             ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###           ("_tuple_arg"
###             ("_record_update" ("_position" A')
###               ("_field_update" ("_constify" tr)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("_applC" ("_position" tr) ("_position" A'))
###                   ("_applC" ("_position" tr) ("_position" A))))))))
###       ("\<^const>Orderings.ord_class.less_eq"
###         ("_applC" ("_position" tr) ("_position" A))
###         ("_applC" ("_position" tr) ("_position" A'))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R2) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" P)
###         ("_tuple"
###           ("_record_update" ("_position" A)
###             ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###           ("_tuple_arg"
###             ("_record_update" ("_position" A')
###               ("_field_update" ("_constify" tr)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("_applC" ("_position" tr) ("_position" A'))
###                   ("_applC" ("_position" tr) ("_position" A))))))))
###       ("\<^const>Orderings.ord_class.less_eq"
###         ("_applC" ("_position" tr) ("_position" A))
###         ("_applC" ("_position" tr) ("_position" A'))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R2) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.conj"
###       ("_applC" ("_position" P)
###         ("_tuple"
###           ("_record_update" ("_position" A)
###             ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###           ("_tuple_arg"
###             ("_record_update" ("_position" A')
###               ("_field_update" ("_constify" tr)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("_applC" ("_position" tr) ("_position" A'))
###                   ("_applC" ("_position" tr) ("_position" A))))))))
###       ("_applC" ("_position" tr)
###         ("\<^const>Reactive_Processes.subl" ("_position" A)
###           ("_applC" ("_position" tr) ("_position" A')))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R2) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" P)
###         ("_tuple"
###           ("_record_update" ("_position" A)
###             ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###           ("_tuple_arg"
###             ("_record_update" ("_position" A')
###               ("_field_update" ("_constify" tr)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("_applC" ("_position" tr) ("_position" A'))
###                   ("_applC" ("_position" tr) ("_position" A))))))))
###       ("_applC" ("_position" tr)
###         ("\<^const>Reactive_Processes.subl" ("_position" A)
###           ("_applC" ("_position" tr) ("_position" A')))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R2) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("_applC" ("_position" P)
###       ("\<^const>Reactive_Processes.subl"
###         ("\<^const>Relations.conj"
###           ("_tuple"
###             ("_record_update" ("_position" A)
###               ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" tr)
###                   ("\<^const>Groups.minus_class.minus"
###                     ("_applC" ("_position" tr) ("_position" A'))
###                     ("_applC" ("_position" tr) ("_position" A)))))))
###           ("_applC" ("_position" tr) ("_position" A)))
###         ("_applC" ("_position" tr) ("_position" A'))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R2) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("_applC" ("_position" P)
###       ("\<^const>Reactive_Processes.subl"
###         ("\<^const>HOL.conj"
###           ("_tuple"
###             ("_record_update" ("_position" A)
###               ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" tr)
###                   ("\<^const>Groups.minus_class.minus"
###                     ("_applC" ("_position" tr) ("_position" A'))
###                     ("_applC" ("_position" tr) ("_position" A)))))))
###           ("_applC" ("_position" tr) ("_position" A)))
###         ("_applC" ("_position" tr) ("_position" A'))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R2) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Reactive_Processes.subl"
###       ("\<^const>Relations.conj"
###         ("_applC" ("_position" P)
###           ("_tuple"
###             ("_record_update" ("_position" A)
###               ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" tr)
###                   ("\<^const>Groups.minus_class.minus"
###                     ("_applC" ("_position" tr) ("_position" A'))
###                     ("_applC" ("_position" tr) ("_position" A))))))))
###         ("_applC" ("_position" tr) ("_position" A)))
###       ("_applC" ("_position" tr) ("_position" A')))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R2) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.conj"
###       ("_applC" ("_position" P)
###         ("_tuple"
###           ("_record_update" ("_position" A)
###             ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###           ("_tuple_arg"
###             ("_record_update" ("_position" A')
###               ("_field_update" ("_constify" tr)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("_applC" ("_position" tr) ("_position" A'))
###                   ("_applC" ("_position" tr) ("_position" A))))))))
###       ("\<^const>Reactive_Processes.subl"
###         ("_applC" ("_position" tr) ("_position" A))
###         ("_applC" ("_position" tr) ("_position" A'))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R2) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" P)
###         ("_tuple"
###           ("_record_update" ("_position" A)
###             ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###           ("_tuple_arg"
###             ("_record_update" ("_position" A')
###               ("_field_update" ("_constify" tr)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("_applC" ("_position" tr) ("_position" A'))
###                   ("_applC" ("_position" tr) ("_position" A))))))))
###       ("\<^const>Reactive_Processes.subl"
###         ("_applC" ("_position" tr) ("_position" A))
###         ("_applC" ("_position" tr) ("_position" A'))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" R2) ("_position" P))
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Reactive_Processes.subl"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" P)
###           ("_tuple"
###             ("_record_update" ("_position" A)
###               ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###             ("_tuple_arg"
###               ("_record_update" ("_position" A')
###                 ("_field_update" ("_constify" tr)
###                   ("\<^const>Groups.minus_class.minus"
###                     ("_applC" ("_position" tr) ("_position" A'))
###                     ("_applC" ("_position" tr) ("_position" A))))))))
###         ("_applC" ("_position" tr) ("_position" A)))
###       ("_applC" ("_position" tr) ("_position" A')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.786s elapsed time, 1.916s cpu time, 0.851s GC time
### Ambiguous input (line 210 of "$AFP/Circus/Reactive_Processes.thy") produces 1408 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" \<Pi>rea)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.Not" ("_applC" ("_position" ok) ("_position" A)))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A'))))
###       ("\<^const>Relations.conj"
###         ("_applC" ("_position" ok) ("_position" A'))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###             ("_applC" ("_position" tr) ("_position" A')))
###           ("\<^const>Relations.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###               ("_applC" ("_position" wait) ("_position" A')))
###             ("\<^const>Relations.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" ref) ("_position" A))
###                 ("_applC" ("_position" ref) ("_position" A')))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" more) ("_position" A))
###                 ("_applC" ("_position" more) ("_position" A'))))))))))
### ("\<^const>Pure.eq" ("_position" \<Pi>rea)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.Not" ("_applC" ("_position" ok) ("_position" A)))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A'))))
###       ("\<^const>Relations.conj"
###         ("_applC" ("_position" ok) ("_position" A'))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###             ("_applC" ("_position" tr) ("_position" A')))
###           ("\<^const>Relations.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###               ("_applC" ("_position" wait) ("_position" A')))
###             ("\<^const>Relations.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" ref) ("_position" A))
###                 ("_applC" ("_position" ref) ("_position" A')))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" more) ("_position" A))
###                 ("_applC" ("_position" more) ("_position" A'))))))))))
### ("\<^const>Pure.eq" ("_position" \<Pi>rea)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not" ("_applC" ("_position" ok) ("_position" A)))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A'))))
###       ("\<^const>Relations.conj"
###         ("_applC" ("_position" ok) ("_position" A'))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###             ("_applC" ("_position" tr) ("_position" A')))
###           ("\<^const>Relations.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###               ("_applC" ("_position" wait) ("_position" A')))
###             ("\<^const>Relations.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" ref) ("_position" A))
###                 ("_applC" ("_position" ref) ("_position" A')))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" more) ("_position" A))
###                 ("_applC" ("_position" more) ("_position" A'))))))))))
### ("\<^const>Pure.eq" ("_position" \<Pi>rea)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not" ("_applC" ("_position" ok) ("_position" A)))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A'))))
###       ("\<^const>Relations.conj"
###         ("_applC" ("_position" ok) ("_position" A'))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###             ("_applC" ("_position" tr) ("_position" A')))
###           ("\<^const>Relations.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###               ("_applC" ("_position" wait) ("_position" A')))
###             ("\<^const>Relations.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" ref) ("_position" A))
###                 ("_applC" ("_position" ref) ("_position" A')))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" more) ("_position" A))
###                 ("_applC" ("_position" more) ("_position" A'))))))))))
### ("\<^const>Pure.eq" ("_position" \<Pi>rea)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.conj"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" ok) ("_position" A)))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A'))))
###       ("\<^const>Relations.conj"
###         ("_applC" ("_position" ok) ("_position" A'))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###             ("_applC" ("_position" tr) ("_position" A')))
###           ("\<^const>Relations.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###               ("_applC" ("_position" wait) ("_position" A')))
###             ("\<^const>Relations.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" ref) ("_position" A))
###                 ("_applC" ("_position" ref) ("_position" A')))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" more) ("_position" A))
###                 ("_applC" ("_position" more) ("_position" A'))))))))))
### ("\<^const>Pure.eq" ("_position" \<Pi>rea)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.conj"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" ok) ("_position" A)))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A'))))
###       ("\<^const>Relations.conj"
###         ("_applC" ("_position" ok) ("_position" A'))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###             ("_applC" ("_position" tr) ("_position" A')))
###           ("\<^const>Relations.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###               ("_applC" ("_position" wait) ("_position" A')))
###             ("\<^const>Relations.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" ref) ("_position" A))
###                 ("_applC" ("_position" ref) ("_position" A')))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" more) ("_position" A))
###                 ("_applC" ("_position" more) ("_position" A'))))))))))
### ("\<^const>Pure.eq" ("_position" \<Pi>rea)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" ok) ("_position" A)))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A'))))
###       ("\<^const>Relations.conj"
###         ("_applC" ("_position" ok) ("_position" A'))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###             ("_applC" ("_position" tr) ("_position" A')))
###           ("\<^const>Relations.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###               ("_applC" ("_position" wait) ("_position" A')))
###             ("\<^const>Relations.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" ref) ("_position" A))
###                 ("_applC" ("_position" ref) ("_position" A')))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" more) ("_position" A))
###                 ("_applC" ("_position" more) ("_position" A'))))))))))
### ("\<^const>Pure.eq" ("_position" \<Pi>rea)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.disj"
###       ("\<^const>HOL.conj"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" ok) ("_position" A)))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A'))))
###       ("\<^const>Relations.conj"
###         ("_applC" ("_position" ok) ("_position" A'))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###             ("_applC" ("_position" tr) ("_position" A')))
###           ("\<^const>Relations.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###               ("_applC" ("_position" wait) ("_position" A')))
###             ("\<^const>Relations.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" ref) ("_position" A))
###                 ("_applC" ("_position" ref) ("_position" A')))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" more) ("_position" A))
###                 ("_applC" ("_position" more) ("_position" A'))))))))))
### ("\<^const>Pure.eq" ("_position" \<Pi>rea)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.Not" ("_applC" ("_position" ok) ("_position" A)))
###         ("_applC" ("_position" tr)
###           ("\<^const>Reactive_Processes.subl" ("_position" A)
###             ("_applC" ("_position" tr) ("_position" A')))))
###       ("\<^const>Relations.conj"
###         ("_applC" ("_position" ok) ("_position" A'))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###             ("_applC" ("_position" tr) ("_position" A')))
###           ("\<^const>Relations.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###               ("_applC" ("_position" wait) ("_position" A')))
###             ("\<^const>Relations.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" ref) ("_position" A))
###                 ("_applC" ("_position" ref) ("_position" A')))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" more) ("_position" A))
###                 ("_applC" ("_position" more) ("_position" A'))))))))))
### ("\<^const>Pure.eq" ("_position" \<Pi>rea)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.Not" ("_applC" ("_position" ok) ("_position" A)))
###         ("_applC" ("_position" tr)
###           ("\<^const>Reactive_Processes.subl" ("_position" A)
###             ("_applC" ("_position" tr) ("_position" A')))))
###       ("\<^const>Relations.conj"
###         ("_applC" ("_position" ok) ("_position" A'))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###             ("_applC" ("_position" tr) ("_position" A')))
###           ("\<^const>Relations.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###               ("_applC" ("_position" wait) ("_position" A')))
###             ("\<^const>Relations.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" ref) ("_position" A))
###                 ("_applC" ("_position" ref) ("_position" A')))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" more) ("_position" A))
###                 ("_applC" ("_position" more) ("_position" A'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 335 of "$AFP/Circus/Reactive_Processes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Designs.Healthy"
###     ("\<^const>HOL.disj" ("_position" P) ("_position" Q)) ("_position" R)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Designs.Healthy"
###     ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###     ("_position" R)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 345 of "$AFP/Circus/Reactive_Processes.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.disj" ("_applC" ("_position" R) ("_position" P))
###       ("_applC" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.disj" ("_applC" ("_position" R) ("_position" P))
###       ("_applC" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.disj" ("_applC" ("_position" R) ("_position" P))
###       ("_applC" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.disj" ("_applC" ("_position" R) ("_position" P))
###       ("_applC" ("_position" R) ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Reactive_Processes"
### 1.887s elapsed time, 4.355s cpu time, 1.231s GC time
Loading theory "Draft.CSP_Processes" (required by "Draft.Circus_ActionsTemplates" via "Draft.Circus_Actions")
### Ambiguous input (line 16 of "$AFP/Circus/CSP_Processes.thy") produces 104 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_applC" ("_position" CSP1) ("_position" P))
###   ("\<^const>HOL.disj" ("_position" P)
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.Not" ("_applC" ("_position" ok) ("_position" A)))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" CSP1) ("_position" P))
###   ("\<^const>Relations.disj" ("_position" P)
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.Not" ("_applC" ("_position" ok) ("_position" A)))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" CSP1) ("_position" P))
###   ("\<^const>HOL.disj" ("_position" P)
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not" ("_applC" ("_position" ok) ("_position" A)))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" CSP1) ("_position" P))
###   ("\<^const>Relations.disj" ("_position" P)
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.Not" ("_applC" ("_position" ok) ("_position" A)))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" CSP1) ("_position" P))
###   ("\<^const>HOL.disj" ("_position" P)
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>Relations.conj"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" ok) ("_position" A)))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" CSP1) ("_position" P))
###   ("\<^const>Relations.disj" ("_position" P)
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>Relations.conj"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" ok) ("_position" A)))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" CSP1) ("_position" P))
###   ("\<^const>HOL.disj" ("_position" P)
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>HOL.conj"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" ok) ("_position" A)))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" CSP1) ("_position" P))
###   ("\<^const>Relations.disj" ("_position" P)
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>HOL.conj"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" ok) ("_position" A)))
###         ("\<^const>Orderings.ord_class.less_eq"
###           ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" CSP1) ("_position" P))
###   ("\<^const>HOL.disj" ("_position" P)
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.Not" ("_applC" ("_position" ok) ("_position" A)))
###         ("_applC" ("_position" tr)
###           ("\<^const>Reactive_Processes.subl" ("_position" A)
###             ("_applC" ("_position" tr) ("_position" A'))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" CSP1) ("_position" P))
###   ("\<^const>Relations.disj" ("_position" P)
###     ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.Not" ("_applC" ("_position" ok) ("_position" A)))
###         ("_applC" ("_position" tr)
###           ("\<^const>Reactive_Processes.subl" ("_position" A)
###             ("_applC" ("_position" tr) ("_position" A'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 19 of "$AFP/Circus/CSP_Processes.thy") produces 32 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_position" J_csp)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.impl" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" ok) ("_position" A')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###             ("_applC" ("_position" wait) ("_position" A')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" ref) ("_position" A))
###               ("_applC" ("_position" ref) ("_position" A')))
###             ("\<^const>HOL.eq" ("_applC" ("_position" more) ("_position" A))
###               ("_applC" ("_position" more) ("_position" A')))))))))
### ("\<^const>Pure.eq" ("_position" J_csp)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.impl" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" ok) ("_position" A')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###             ("_applC" ("_position" wait) ("_position" A')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" ref) ("_position" A))
###               ("_applC" ("_position" ref) ("_position" A')))
###             ("\<^const>HOL.eq" ("_applC" ("_position" more) ("_position" A))
###               ("_applC" ("_position" more) ("_position" A')))))))))
### ("\<^const>Pure.eq" ("_position" J_csp)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" ok) ("_position" A')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###             ("_applC" ("_position" wait) ("_position" A')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" ref) ("_position" A))
###               ("_applC" ("_position" ref) ("_position" A')))
###             ("\<^const>HOL.eq" ("_applC" ("_position" more) ("_position" A))
###               ("_applC" ("_position" more) ("_position" A')))))))))
### ("\<^const>Pure.eq" ("_position" J_csp)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" ok) ("_position" A')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###             ("_applC" ("_position" wait) ("_position" A')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" ref) ("_position" A))
###               ("_applC" ("_position" ref) ("_position" A')))
###             ("\<^const>HOL.eq" ("_applC" ("_position" more) ("_position" A))
###               ("_applC" ("_position" more) ("_position" A')))))))))
### ("\<^const>Pure.eq" ("_position" J_csp)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.impl" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" ok) ("_position" A')))
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###             ("_applC" ("_position" wait) ("_position" A')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" ref) ("_position" A))
###               ("_applC" ("_position" ref) ("_position" A')))
###             ("\<^const>HOL.eq" ("_applC" ("_position" more) ("_position" A))
###               ("_applC" ("_position" more) ("_position" A')))))))))
### ("\<^const>Pure.eq" ("_position" J_csp)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.impl" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" ok) ("_position" A')))
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###             ("_applC" ("_position" wait) ("_position" A')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" ref) ("_position" A))
###               ("_applC" ("_position" ref) ("_position" A')))
###             ("\<^const>HOL.eq" ("_applC" ("_position" more) ("_position" A))
###               ("_applC" ("_position" more) ("_position" A')))))))))
### ("\<^const>Pure.eq" ("_position" J_csp)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" ok) ("_position" A')))
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###             ("_applC" ("_position" wait) ("_position" A')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" ref) ("_position" A))
###               ("_applC" ("_position" ref) ("_position" A')))
###             ("\<^const>HOL.eq" ("_applC" ("_position" more) ("_position" A))
###               ("_applC" ("_position" more) ("_position" A')))))))))
### ("\<^const>Pure.eq" ("_position" J_csp)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" ok) ("_position" A')))
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###             ("_applC" ("_position" wait) ("_position" A')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" ref) ("_position" A))
###               ("_applC" ("_position" ref) ("_position" A')))
###             ("\<^const>HOL.eq" ("_applC" ("_position" more) ("_position" A))
###               ("_applC" ("_position" more) ("_position" A')))))))))
### ("\<^const>Pure.eq" ("_position" J_csp)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.impl" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" ok) ("_position" A')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###             ("_applC" ("_position" wait) ("_position" A')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" ref) ("_position" A))
###               ("_applC" ("_position" ref) ("_position" A')))
###             ("\<^const>HOL.eq" ("_applC" ("_position" more) ("_position" A))
###               ("_applC" ("_position" more) ("_position" A')))))))))
### ("\<^const>Pure.eq" ("_position" J_csp)
###   ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.impl" ("_applC" ("_position" ok) ("_position" A))
###         ("_applC" ("_position" ok) ("_position" A')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_applC" ("_position" tr) ("_position" A))
###           ("_applC" ("_position" tr) ("_position" A')))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" wait) ("_position" A))
###             ("_applC" ("_position" wait) ("_position" A')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" ref) ("_position" A))
###               ("_applC" ("_position" ref) ("_position" A')))
###             ("\<^const>HOL.eq" ("_applC" ("_position" more) ("_position" A))
###               ("_applC" ("_position" more) ("_position" A')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/Circus/CSP_Processes.thy") produces 20 parse trees (10 displayed):
### ("\<^const>Pure.eq" ("_applC" ("_position" is_CSP_process) ("_position" P))
###   ("\<^const>Designs.Healthy"
###     ("\<^const>Relations.conj"
###       ("\<^const>Designs.Healthy"
###         ("\<^const>HOL.conj"
###           ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP1))
###           ("_position" P))
###         ("_position" CSP2))
###       ("_position" P))
###     ("_position" R)))
### ("\<^const>Pure.eq" ("_applC" ("_position" is_CSP_process) ("_position" P))
###   ("\<^const>Designs.Healthy"
###     ("\<^const>HOL.conj"
###       ("\<^const>Designs.Healthy"
###         ("\<^const>HOL.conj"
###           ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP1))
###           ("_position" P))
###         ("_position" CSP2))
###       ("_position" P))
###     ("_position" R)))
### ("\<^const>Pure.eq" ("_applC" ("_position" is_CSP_process) ("_position" P))
###   ("\<^const>Designs.Healthy"
###     ("\<^const>Relations.conj"
###       ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP1))
###       ("\<^const>Relations.conj"
###         ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP2))
###         ("_position" P)))
###     ("_position" R)))
### ("\<^const>Pure.eq" ("_applC" ("_position" is_CSP_process) ("_position" P))
###   ("\<^const>HOL.conj"
###     ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP1))
###     ("\<^const>Designs.Healthy"
###       ("\<^const>Relations.conj"
###         ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP2))
###         ("_position" P))
###       ("_position" R))))
### ("\<^const>Pure.eq" ("_applC" ("_position" is_CSP_process) ("_position" P))
###   ("\<^const>Relations.conj"
###     ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP1))
###     ("\<^const>Designs.Healthy"
###       ("\<^const>Relations.conj"
###         ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP2))
###         ("_position" P))
###       ("_position" R))))
### ("\<^const>Pure.eq" ("_applC" ("_position" is_CSP_process) ("_position" P))
###   ("\<^const>Designs.Healthy"
###     ("\<^const>HOL.conj"
###       ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP1))
###       ("\<^const>Relations.conj"
###         ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP2))
###         ("_position" P)))
###     ("_position" R)))
### ("\<^const>Pure.eq" ("_applC" ("_position" is_CSP_process) ("_position" P))
###   ("\<^const>Designs.Healthy"
###     ("\<^const>Relations.conj"
###       ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP1))
###       ("\<^const>HOL.conj"
###         ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP2))
###         ("_position" P)))
###     ("_position" R)))
### ("\<^const>Pure.eq" ("_applC" ("_position" is_CSP_process) ("_position" P))
###   ("\<^const>HOL.conj"
###     ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP1))
###     ("\<^const>Designs.Healthy"
###       ("\<^const>HOL.conj"
###         ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP2))
###         ("_position" P))
###       ("_position" R))))
### ("\<^const>Pure.eq" ("_applC" ("_position" is_CSP_process) ("_position" P))
###   ("\<^const>Relations.conj"
###     ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP1))
###     ("\<^const>Designs.Healthy"
###       ("\<^const>HOL.conj"
###         ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP2))
###         ("_position" P))
###       ("_position" R))))
### ("\<^const>Pure.eq" ("_applC" ("_position" is_CSP_process) ("_position" P))
###   ("\<^const>Designs.Healthy"
###     ("\<^const>HOL.conj"
###       ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP1))
###       ("\<^const>HOL.conj"
###         ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP2))
###         ("_position" P)))
###     ("_position" R)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 95 of "$AFP/Circus/CSP_Processes.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P)
###       ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Relations.disj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" True))))))
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" False)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" P)
###       ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" True))))))
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" False)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 101 of "$AFP/Circus/CSP_Processes.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_applC" ("_position" CSP2) ("_position" P))
###       ("_tuple" ("_position" a)
###         ("_tuple_arg"
###           ("_record_update" ("_position" b)
###             ("_field_update" ("_constify" ok) ("_position" True)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Relations.disj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" True))))))
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" False)))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_applC" ("_position" CSP2) ("_position" P))
###       ("_tuple" ("_position" a)
###         ("_tuple_arg"
###           ("_record_update" ("_position" b)
###             ("_field_update" ("_constify" ok) ("_position" True)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" True))))))
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" False)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/Circus/CSP_Processes.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Relations.disj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" True))))))
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" False))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_applC" ("_position" CSP2) ("_position" P))
###       ("_tuple" ("_position" a)
###         ("_tuple_arg"
###           ("_record_update" ("_position" b)
###             ("_field_update" ("_constify" ok) ("_position" True))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" True))))))
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" False))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_applC" ("_position" CSP2) ("_position" P))
###       ("_tuple" ("_position" a)
###         ("_tuple_arg"
###           ("_record_update" ("_position" b)
###             ("_field_update" ("_constify" ok) ("_position" True))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 114 of "$AFP/Circus/CSP_Processes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_applC" ("_position" CSP2) ("_position" P))
###       ("_tuple" ("_position" a)
###         ("_tuple_arg"
###           ("_record_update" ("_position" b)
###             ("_field_update" ("_constify" ok) ("_position" True))))))
###     ("\<^const>Relations.disj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" True))))))
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" False)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_applC" ("_position" CSP2) ("_position" P))
###       ("_tuple" ("_position" a)
###         ("_tuple_arg"
###           ("_record_update" ("_position" b)
###             ("_field_update" ("_constify" ok) ("_position" True))))))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" True))))))
###       ("_applC" ("_position" P)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" False)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 137 of "$AFP/Circus/CSP_Processes.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.disj"
###       ("_applC"
###         ("_applC" ("_position" CSP2)
###           ("_applC" ("_position" R)
###             ("\<^const>Designs.design" ("_position" r) ("_position" p))))
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" False))))))
###       ("_applC"
###         ("_applC" ("_position" CSP2)
###           ("_applC" ("_position" R)
###             ("\<^const>Designs.design" ("_position" r) ("_position" p))))
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" True))))))))
###   ("\<^const>HOL.Trueprop" ("_position" Q)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Relations.disj"
###       ("_applC"
###         ("_applC" ("_position" CSP2)
###           ("_applC" ("_position" R)
###             ("\<^const>Designs.design" ("_position" r) ("_position" p))))
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" False))))))
###       ("_applC"
###         ("_applC" ("_position" CSP2)
###           ("_applC" ("_position" R)
###             ("\<^const>Designs.design" ("_position" r) ("_position" p))))
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" True))))))))
###   ("\<^const>HOL.Trueprop" ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 149 of "$AFP/Circus/CSP_Processes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Designs.Healthy"
###     ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###     ("_position" CSP1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Designs.Healthy"
###     ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###     ("_position" CSP1)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 153 of "$AFP/Circus/CSP_Processes.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP2)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Designs.Healthy" ("_position" Q) ("_position" CSP2)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Designs.Healthy"
###         ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###         ("_position" CSP2)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Designs.Healthy" ("_position" P) ("_position" CSP2)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Designs.Healthy" ("_position" Q) ("_position" CSP2)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Designs.Healthy"
###         ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###         ("_position" CSP2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 159 of "$AFP/Circus/CSP_Processes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_CSP_process)
###     ("\<^const>Relations.disj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_CSP_process)
###     ("\<^const>HOL.disj" ("_position" P) ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 221 of "$AFP/Circus/CSP_Processes.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>Relations.not"
###           ("\<^const>Reactive_Processes.Specifff" ("_position" P)))
###         ("\<^const>Reactive_Processes.Speciftf" ("_position" P))))
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>HOL.Not"
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" False))))))))
###         ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###           ("_applC" ("_position" P)
###             ("_tuple" ("_position" A)
###               ("_tuple_arg"
###                 ("_record_update" ("_position" A')
###                   ("_field_update" ("_constify" ok)
###                     ("_position" True)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>HOL.Not"
###           ("\<^const>Reactive_Processes.Specifff" ("_position" P)))
###         ("\<^const>Reactive_Processes.Speciftf" ("_position" P))))
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>HOL.Not"
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" False))))))))
###         ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###           ("_applC" ("_position" P)
###             ("_tuple" ("_position" A)
###               ("_tuple_arg"
###                 ("_record_update" ("_position" A')
###                   ("_field_update" ("_constify" ok)
###                     ("_position" True)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>Relations.not"
###           ("\<^const>Reactive_Processes.Specifff" ("_position" P)))
###         ("\<^const>Reactive_Processes.Speciftf" ("_position" P))))
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>Relations.not"
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" False))))))))
###         ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###           ("_applC" ("_position" P)
###             ("_tuple" ("_position" A)
###               ("_tuple_arg"
###                 ("_record_update" ("_position" A')
###                   ("_field_update" ("_constify" ok)
###                     ("_position" True)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>HOL.Not"
###           ("\<^const>Reactive_Processes.Specifff" ("_position" P)))
###         ("\<^const>Reactive_Processes.Speciftf" ("_position" P))))
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>Relations.not"
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" False))))))))
###         ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###           ("_applC" ("_position" P)
###             ("_tuple" ("_position" A)
###               ("_tuple_arg"
###                 ("_record_update" ("_position" A')
###                   ("_field_update" ("_constify" ok)
###                     ("_position" True)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 233 of "$AFP/Circus/CSP_Processes.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>HOL.Not"
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" False))))))))
###         ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###           ("_applC" ("_position" P)
###             ("_tuple" ("_position" A)
###               ("_tuple_arg"
###                 ("_record_update" ("_position" A')
###                   ("_field_update" ("_constify" ok)
###                     ("_position" True)))))))))
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" H1)
###             ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###               ("_applC" ("_position" P)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_arg"
###                     ("_record_update" ("_position" A')
###                       ("_field_update" ("_constify" ok)
###                         ("_position" False)))))))))
###         ("_applC" ("_position" H1)
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>Relations.not"
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" False))))))))
###         ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###           ("_applC" ("_position" P)
###             ("_tuple" ("_position" A)
###               ("_tuple_arg"
###                 ("_record_update" ("_position" A')
###                   ("_field_update" ("_constify" ok)
###                     ("_position" True)))))))))
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" H1)
###             ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###               ("_applC" ("_position" P)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_arg"
###                     ("_record_update" ("_position" A')
###                       ("_field_update" ("_constify" ok)
###                         ("_position" False)))))))))
###         ("_applC" ("_position" H1)
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>HOL.Not"
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" False))))))))
###         ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###           ("_applC" ("_position" P)
###             ("_tuple" ("_position" A)
###               ("_tuple_arg"
###                 ("_record_update" ("_position" A')
###                   ("_field_update" ("_constify" ok)
###                     ("_position" True)))))))))
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" H1)
###             ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###               ("_applC" ("_position" P)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_arg"
###                     ("_record_update" ("_position" A')
###                       ("_field_update" ("_constify" ok)
###                         ("_position" False)))))))))
###         ("_applC" ("_position" H1)
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>Relations.not"
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" False))))))))
###         ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###           ("_applC" ("_position" P)
###             ("_tuple" ("_position" A)
###               ("_tuple_arg"
###                 ("_record_update" ("_position" A')
###                   ("_field_update" ("_constify" ok)
###                     ("_position" True)))))))))
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" H1)
###             ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###               ("_applC" ("_position" P)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_arg"
###                     ("_record_update" ("_position" A')
###                       ("_field_update" ("_constify" ok)
###                         ("_position" False)))))))))
###         ("_applC" ("_position" H1)
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 239 of "$AFP/Circus/CSP_Processes.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" H1)
###             ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###               ("_applC" ("_position" P)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_arg"
###                     ("_record_update" ("_position" A')
###                       ("_field_update" ("_constify" ok)
###                         ("_position" False)))))))))
###         ("_applC" ("_position" H1)
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True))))))))))
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>HOL.Not"
###           ("_applC" ("\<^const>Fun.comp" ("_position" H1) ("_position" H2))
###             ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###               ("_applC" ("_position" P)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_arg"
###                     ("_record_update" ("_position" A')
###                       ("_field_update" ("_constify" ok)
###                         ("_position" False)))))))))
###         ("_applC" ("\<^const>Fun.comp" ("_position" H1) ("_position" H2))
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" H1)
###             ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###               ("_applC" ("_position" P)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_arg"
###                     ("_record_update" ("_position" A')
###                       ("_field_update" ("_constify" ok)
###                         ("_position" False)))))))))
###         ("_applC" ("_position" H1)
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True))))))))))
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>HOL.Not"
###           ("_applC" ("\<^const>Fun.comp" ("_position" H1) ("_position" H2))
###             ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###               ("_applC" ("_position" P)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_arg"
###                     ("_record_update" ("_position" A')
###                       ("_field_update" ("_constify" ok)
###                         ("_position" False)))))))))
###         ("_applC" ("\<^const>Fun.comp" ("_position" H1) ("_position" H2))
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>HOL.Not"
###           ("_applC" ("_position" H1)
###             ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###               ("_applC" ("_position" P)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_arg"
###                     ("_record_update" ("_position" A')
###                       ("_field_update" ("_constify" ok)
###                         ("_position" False)))))))))
###         ("_applC" ("_position" H1)
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True))))))))))
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>Relations.not"
###           ("_applC" ("\<^const>Fun.comp" ("_position" H1) ("_position" H2))
###             ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###               ("_applC" ("_position" P)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_arg"
###                     ("_record_update" ("_position" A')
###                       ("_field_update" ("_constify" ok)
###                         ("_position" False)))))))))
###         ("_applC" ("\<^const>Fun.comp" ("_position" H1) ("_position" H2))
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" H1)
###             ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###               ("_applC" ("_position" P)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_arg"
###                     ("_record_update" ("_position" A')
###                       ("_field_update" ("_constify" ok)
###                         ("_position" False)))))))))
###         ("_applC" ("_position" H1)
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True))))))))))
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>Relations.not"
###           ("_applC" ("\<^const>Fun.comp" ("_position" H1) ("_position" H2))
###             ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###               ("_applC" ("_position" P)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_arg"
###                     ("_record_update" ("_position" A')
###                       ("_field_update" ("_constify" ok)
###                         ("_position" False)))))))))
###         ("_applC" ("\<^const>Fun.comp" ("_position" H1) ("_position" H2))
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 252 of "$AFP/Circus/CSP_Processes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>HOL.Not"
###           ("_applC" ("\<^const>Fun.comp" ("_position" H1) ("_position" H2))
###             ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###               ("_applC" ("_position" P)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_arg"
###                     ("_record_update" ("_position" A')
###                       ("_field_update" ("_constify" ok)
###                         ("_position" False)))))))))
###         ("_applC" ("\<^const>Fun.comp" ("_position" H1) ("_position" H2))
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True))))))))))
###     ("_applC"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" R) ("_position" H1))
###         ("_position" H2))
###       ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>Relations.not"
###           ("_applC" ("\<^const>Fun.comp" ("_position" H1) ("_position" H2))
###             ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###               ("_applC" ("_position" P)
###                 ("_tuple" ("_position" A)
###                   ("_tuple_arg"
###                     ("_record_update" ("_position" A')
###                       ("_field_update" ("_constify" ok)
###                         ("_position" False)))))))))
###         ("_applC" ("\<^const>Fun.comp" ("_position" H1) ("_position" H2))
###           ("_lambda" ("_pattern" ("_position" A) ("_position" A'))
###             ("_applC" ("_position" P)
###               ("_tuple" ("_position" A)
###                 ("_tuple_arg"
###                   ("_record_update" ("_position" A')
###                     ("_field_update" ("_constify" ok)
###                       ("_position" True))))))))))
###     ("_applC"
###       ("\<^const>Fun.comp"
###         ("\<^const>Fun.comp" ("_position" R) ("_position" H1))
###         ("_position" H2))
###       ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 368 of "$AFP/Circus/CSP_Processes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" r)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" True))))))
###       ("_applC" ("_position" r)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" False)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###     ("\<^const>Relations.impl"
###       ("_applC" ("_position" r)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" True))))))
###       ("_applC" ("_position" r)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" False)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 377 of "$AFP/Circus/CSP_Processes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" r)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" True))))))
###       ("_applC" ("_position" r)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" False)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###     ("\<^const>Relations.impl"
###       ("_applC" ("_position" r)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" True))))))
###       ("_applC" ("_position" r)
###         ("_tuple" ("_position" a)
###           ("_tuple_arg"
###             ("_record_update" ("_position" b)
###               ("_field_update" ("_constify" ok) ("_position" False)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 387 of "$AFP/Circus/CSP_Processes.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" P)
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>Relations.not"
###           ("\<^const>Reactive_Processes.Specifff" ("_position" P)))
###         ("\<^const>Reactive_Processes.Speciftf" ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" P)
###     ("_applC" ("_position" R)
###       ("\<^const>Designs.design"
###         ("\<^const>HOL.Not"
###           ("\<^const>Reactive_Processes.Specifff" ("_position" P)))
###         ("\<^const>Reactive_Processes.Speciftf" ("_position" P))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.CSP_Processes"
### 0.278s elapsed time, 0.325s cpu time, 0.000s GC time
Loading theory "Draft.Circus_Actions" (required by "Draft.Circus_ActionsTemplates")
### Ambiguous input (line 53 of "$AFP/Circus/Circus_Actions.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("_applC"
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" relation_of) ("_position" y))
###           ("_applC" ("_position" relation_of) ("_position" x)))
###         ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Reactive_Processes.Specifff"
###           ("_applC" ("_position" relation_of) ("_position" y)))
###         ("_tuple"
###           ("_record_update" ("_position" a)
###             ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###           ("_tuple_arg" ("_position" b)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Reactive_Processes.Specifff"
###           ("_applC" ("_position" relation_of) ("_position" x)))
###         ("_tuple"
###           ("_record_update" ("_position" a)
###             ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###           ("_tuple_arg" ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("_applC"
###         ("\<^const>Relations.impl"
###           ("_applC" ("_position" relation_of) ("_position" y))
###           ("_applC" ("_position" relation_of) ("_position" x)))
###         ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Reactive_Processes.Specifff"
###           ("_applC" ("_position" relation_of) ("_position" y)))
###         ("_tuple"
###           ("_record_update" ("_position" a)
###             ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###           ("_tuple_arg" ("_position" b)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Reactive_Processes.Specifff"
###           ("_applC" ("_position" relation_of) ("_position" x)))
###         ("_tuple"
###           ("_record_update" ("_position" a)
###             ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###           ("_tuple_arg" ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 59 of "$AFP/Circus/Circus_Actions.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("_applC"
###         ("\<^const>HOL.implies"
###           ("_applC" ("_position" relation_of) ("_position" y))
###           ("_applC" ("_position" relation_of) ("_position" x)))
###         ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Reactive_Processes.Speciftf"
###           ("_applC" ("_position" relation_of) ("_position" y)))
###         ("_tuple"
###           ("_record_update" ("_position" a)
###             ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###           ("_tuple_arg" ("_position" b)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Reactive_Processes.Speciftf"
###           ("_applC" ("_position" relation_of) ("_position" x)))
###         ("_tuple"
###           ("_record_update" ("_position" a)
###             ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###           ("_tuple_arg" ("_position" b)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" b))
###       ("_applC"
###         ("\<^const>Relations.impl"
###           ("_applC" ("_position" relation_of) ("_position" y))
###           ("_applC" ("_position" relation_of) ("_position" x)))
###         ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Reactive_Processes.Speciftf"
###           ("_applC" ("_position" relation_of) ("_position" y)))
###         ("_tuple"
###           ("_record_update" ("_position" a)
###             ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###           ("_tuple_arg" ("_position" b)))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>Reactive_Processes.Speciftf"
###           ("_applC" ("_position" relation_of) ("_position" x)))
###         ("_tuple"
###           ("_record_update" ("_position" a)
###             ("_field_update" ("_constify" tr) ("\<^const>List.list.Nil")))
###           ("_tuple_arg" ("_position" b)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  action :: (ev_eq, type) below
  below_action == below :: ('a, 'b) action => ('a, 'b) action => bool
### Ambiguous input (line 66 of "$AFP/Circus/Circus_Actions.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^const>Porder.below_class.below" ("_position" P) ("_position" Q))
###   ("_list"
###     ("\<^const>Relations.impl"
###       ("_applC" ("_position" relation_of) ("_position" Q))
###       ("_applC" ("_position" relation_of) ("_position" P)))))
### ("\<^const>Pure.eq"
###   ("\<^const>Porder.below_class.below" ("_position" P) ("_position" Q))
###   ("_list"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" relation_of) ("_position" Q))
###       ("_applC" ("_position" relation_of) ("_position" P)))))
### ("\<^const>Pure.eq"
###   ("\<^const>Porder.below_class.below" ("_position" P) ("_position" Q))
###   ("\<^const>Relations.closure"
###     ("\<^const>Relations.impl"
###       ("_applC" ("_position" relation_of) ("_position" Q))
###       ("_applC" ("_position" relation_of) ("_position" P)))))
### ("\<^const>Pure.eq"
###   ("\<^const>Porder.below_class.below" ("_position" P) ("_position" Q))
###   ("\<^const>Relations.closure"
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" relation_of) ("_position" Q))
###       ("_applC" ("_position" relation_of) ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  action :: (ev_eq, type) lattice
  inf_action == inf :: ('a, 'b) action => ('a, 'b) action => ('a, 'b) action
  sup_action == sup :: ('a, 'b) action => ('a, 'b) action => ('a, 'b) action
  less_eq_action == less_eq :: ('a, 'b) action => ('a, 'b) action => bool
  less_action == less :: ('a, 'b) action => ('a, 'b) action => bool
### Ambiguous input (line 90 of "$AFP/Circus/Circus_Actions.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" less)
###     ("_cargs"
###       ("_constrain" ("_position" P)
###         ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###           ("_type_name" action)))
###       ("_position" Q)))
###   ("\<^const>Relations.conj"
###     ("\<^const>Porder.below_class.below" ("_position" P) ("_position" Q))
###     ("\<^const>HOL.Not"
###       ("\<^const>Porder.below_class.below" ("_position" Q)
###         ("_position" P)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" less)
###     ("_cargs"
###       ("_constrain" ("_position" P)
###         ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###           ("_type_name" action)))
###       ("_position" Q)))
###   ("\<^const>HOL.conj"
###     ("\<^const>Porder.below_class.below" ("_position" P) ("_position" Q))
###     ("\<^const>HOL.Not"
###       ("\<^const>Porder.below_class.below" ("_position" Q)
###         ("_position" P)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" less)
###     ("_cargs"
###       ("_constrain" ("_position" P)
###         ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###           ("_type_name" action)))
###       ("_position" Q)))
###   ("\<^const>Relations.conj"
###     ("\<^const>Porder.below_class.below" ("_position" P) ("_position" Q))
###     ("\<^const>Relations.not"
###       ("\<^const>Porder.below_class.below" ("_position" Q)
###         ("_position" P)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" less)
###     ("_cargs"
###       ("_constrain" ("_position" P)
###         ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###           ("_type_name" action)))
###       ("_position" Q)))
###   ("\<^const>HOL.conj"
###     ("\<^const>Porder.below_class.below" ("_position" P) ("_position" Q))
###     ("\<^const>Relations.not"
###       ("\<^const>Porder.below_class.below" ("_position" Q)
###         ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  action :: (ev_eq, type) bounded_lattice
  bot_action == bot :: ('a, 'b) action
  top_action == top :: ('a, 'b) action
### Ambiguous input (line 238 of "$AFP/Circus/Circus_Actions.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Designs.Healthy"
###     ("\<^const>Relations.ndetS"
###       ("\<^const>Set.image" ("_position" relation_of) ("_position" A)))
###     ("_position" CSP1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Designs.Healthy"
###     ("\<^const>Set.image"
###       ("\<^const>Relations.ndetS" ("_position" relation_of))
###       ("_position" A))
###     ("_position" CSP1)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 263 of "$AFP/Circus/Circus_Actions.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Designs.Healthy"
###     ("\<^const>Relations.ndetS"
###       ("\<^const>Set.image" ("_position" relation_of) ("_position" A)))
###     ("_position" CSP2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Designs.Healthy"
###     ("\<^const>Set.image"
###       ("\<^const>Relations.ndetS" ("_position" relation_of))
###       ("_position" A))
###     ("_position" CSP2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 301 of "$AFP/Circus/Circus_Actions.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Designs.Healthy"
###     ("\<^const>Relations.ndetS"
###       ("\<^const>Set.image" ("_position" relation_of) ("_position" A)))
###     ("_position" R)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Designs.Healthy"
###     ("\<^const>Set.image"
###       ("\<^const>Relations.ndetS" ("_position" relation_of))
###       ("_position" A))
###     ("_position" R)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 345 of "$AFP/Circus/Circus_Actions.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_CSP_process)
###     ("\<^const>Set.image"
###       ("\<^const>Relations.ndetS" ("_position" relation_of))
###       ("_position" A))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" is_CSP_process)
###     ("\<^const>Relations.ndetS"
###       ("\<^const>Set.image" ("_position" relation_of) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 350 of "$AFP/Circus/Circus_Actions.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("\<^const>Set.image"
###         ("\<^const>Relations.ndetS" ("_position" relation_of))
###         ("_position" A))
###       ("_Coll" ("_position" p)
###         ("_applC" ("_position" is_CSP_process) ("_position" p))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Relations.ndetS"
###       ("\<^const>Set.member"
###         ("\<^const>Set.image" ("_position" relation_of) ("_position" A))
###         ("_Coll" ("_position" p)
###           ("_applC" ("_position" is_CSP_process) ("_position" p)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("\<^const>Relations.ndetS"
###         ("\<^const>Set.image" ("_position" relation_of) ("_position" A)))
###       ("_Coll" ("_position" p)
###         ("_applC" ("_position" is_CSP_process) ("_position" p))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 353 of "$AFP/Circus/Circus_Actions.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Designs.Healthy"
###       ("\<^const>Set.image"
###         ("\<^const>Relations.conjS" ("_position" relation_of))
###         ("_position" A))
###       ("_position" CSP1))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Designs.Healthy"
###       ("\<^const>Relations.conjS"
###         ("\<^const>Set.image" ("_position" relation_of) ("_position" A)))
###       ("_position" CSP1))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 359 of "$AFP/Circus/Circus_Actions.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Designs.Healthy"
###       ("\<^const>Set.image"
###         ("\<^const>Relations.conjS" ("_position" relation_of))
###         ("_position" A))
###       ("_position" CSP2))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Designs.Healthy"
###       ("\<^const>Relations.conjS"
###         ("\<^const>Set.image" ("_position" relation_of) ("_position" A)))
###       ("_position" CSP2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 385 of "$AFP/Circus/Circus_Actions.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Designs.Healthy"
###       ("\<^const>Set.image"
###         ("\<^const>Relations.conjS" ("_position" relation_of))
###         ("_position" A))
###       ("_position" R))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Designs.Healthy"
###       ("\<^const>Relations.conjS"
###         ("\<^const>Set.image" ("_position" relation_of) ("_position" A)))
###       ("_position" R))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 434 of "$AFP/Circus/Circus_Actions.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_CSP_process)
###       ("\<^const>Set.image"
###         ("\<^const>Relations.conjS" ("_position" relation_of))
###         ("_position" A)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" is_CSP_process)
###       ("\<^const>Relations.conjS"
###         ("\<^const>Set.image" ("_position" relation_of) ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 437 of "$AFP/Circus/Circus_Actions.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Relations.conjS"
###       ("\<^const>Set.member"
###         ("\<^const>Set.image" ("_position" relation_of) ("_position" A))
###         ("_Coll" ("_position" p)
###           ("_applC" ("_position" is_CSP_process) ("_position" p)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("\<^const>Relations.conjS"
###         ("\<^const>Set.image" ("_position" relation_of) ("_position" A)))
###       ("_Coll" ("_position" p)
###         ("_applC" ("_position" is_CSP_process) ("_position" p))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("\<^const>Set.image"
###         ("\<^const>Relations.conjS" ("_position" relation_of))
###         ("_position" A))
###       ("_Coll" ("_position" p)
###         ("_applC" ("_position" is_CSP_process) ("_position" p))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 441 of "$AFP/Circus/Circus_Actions.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" relation_of)
###         ("_applC" ("_position" action_of)
###           ("\<^const>Relations.conjS"
###             ("\<^const>Set.image" ("_position" relation_of)
###               ("_position" A)))))
###       ("\<^const>Relations.conjS"
###         ("\<^const>Set.image" ("_position" relation_of) ("_position" A))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" relation_of)
###         ("\<^const>Set.image"
###           ("_applC" ("_position" action_of)
###             ("\<^const>Relations.conjS" ("_position" relation_of)))
###           ("_position" A)))
###       ("\<^const>Relations.conjS"
###         ("\<^const>Set.image" ("_position" relation_of) ("_position" A))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" relation_of)
###         ("_applC" ("_position" action_of)
###           ("\<^const>Relations.conjS"
###             ("\<^const>Set.image" ("_position" relation_of)
###               ("_position" A)))))
###       ("\<^const>Set.image"
###         ("\<^const>Relations.conjS" ("_position" relation_of))
###         ("_position" A)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" A) ("\<^const>Set.empty")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" relation_of)
###         ("\<^const>Set.image"
###           ("_applC" ("_position" action_of)
###             ("\<^const>Relations.conjS" ("_position" relation_of)))
###           ("_position" A)))
###       ("\<^const>Set.image"
###         ("\<^const>Relations.conjS" ("_position" relation_of))
###         ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  action :: (ev_eq, type) complete_lattice
  Inf_action == Inf :: ('a, 'b) action set => ('a, 'b) action
  Sup_action == Sup :: ('a, 'b) action set => ('a, 'b) action
### theory "Draft.Circus_Actions"
### 0.442s elapsed time, 0.518s cpu time, 0.057s GC time
Loading theory "Draft.Circus_ActionsTemplates"
val templateLemmas =
   [("Circus_Actions.relation_of_CSP",
     "is_CSP_process (action.relation_of ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Circus_Actions.relation_of_CSP1",
     "action.relation_of ?x is CSP1 healthy",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Circus_Actions.relation_of_CSP2",
     "action.relation_of ?x is CSP2 healthy",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Circus_Actions.relation_of_R", "action.relation_of ?x is R healthy",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Circus_Actions.non_emptyE",
     "[| ?A ~= {}; !!x. x : ?A ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("Circus_Actions.CSP_Sup",
     "?A ~= {} ==>
      is_CSP_process
       (%A. A : \<Inter> {{p. P p} |P. P : action.relation_of ` ?A})",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 11))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Circus_Actions.CSP_Inf",
     "?A ~= {} ==>
      is_CSP_process
       (%A. A : \<Union> {{p. P p} |P. P : action.relation_of ` ?A})",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 11))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Circus_Actions.CSP1_Sup",
     "?A ~= {} ==>
      %A. A : \<Inter>
               {{p. P p} |P. P : action.relation_of ` ?A} is CSP1 healthy",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, t_empty), template_hole 0)
           ))),
    ("Circus_Actions.CSP2_Sup",
     "?A ~= {} ==>
      %A. A : \<Inter>
               {{p. P p} |P. P : action.relation_of ` ?A} is CSP2 healthy",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, t_empty), template_hole 0)
           ))),
    ("Circus_Actions.R_Sup",
     "?A ~= {} ==>
      %A. A : \<Inter>
               {{p. P p} |P. P : action.relation_of ` ?A} is R healthy",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, t_empty), template_hole 0)
           ))),
    ("Circus_Actions.CSP1_Inf",
     "?A ~= {} ==>
      %A. A : \<Union>
               {{p. P p} |P. P : action.relation_of ` ?A} is CSP1 healthy",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, t_empty), template_hole 0)
           ))),
    ("Circus_Actions.CSP2_Inf",
     "?A ~= {} ==>
      %A. A : \<Union>
               {{p. P p} |P. P : action.relation_of ` ?A} is CSP2 healthy",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, t_empty), template_hole 0)
           ))),
    ("Circus_Actions.R_Inf",
     "?A ~= {} ==>
      %A. A : \<Union>
               {{p. P p} |P. P : action.relation_of ` ?A} is R healthy",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, t_empty), template_hole 0)
           ))),
    ("Circus_Actions.Sup_is_action",
     "?A ~= {} ==>
      (%A. A : \<Inter> {{p. P p} |P. P : action.relation_of ` ?A})
      : {p. is_CSP_process p}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, t_empty),
             template_app (template_hole 1, t_empty))
           ))),
    ("Circus_Actions.Inf_is_action",
     "?A ~= {} ==>
      (%A. A : \<Union> {{p. P p} |P. P : action.relation_of ` ?A})
      : {p. is_CSP_process p}",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, t_empty),
             template_app (template_hole 1, t_empty))
           ))),
    ("Circus_Actions.relation_of_spec_f_f",
     "[| ALL a b.
            (action.relation_of ?y \<longrightarrow> action.relation_of ?x)
             (a, b);
         action.relation_of ?y\<^sup>f\<^sub>f (?a(| tr := [] |), ?b) |]
      ==> action.relation_of ?x\<^sup>f\<^sub>f (?a(| tr := [] |), ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_hole 2),
                template_app (template_hole 5, template_var 3)),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 1, t_empty),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 2),
               template_app (template_hole 5, template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 1)),
               template_var 0))
           ))),
    ("Circus_Actions.relation_of_spec_t_f",
     "[| ALL a b.
            (action.relation_of ?y \<longrightarrow> action.relation_of ?x)
             (a, b);
         action.relation_of ?y\<^sup>t\<^sub>f (?a(| tr := [] |), ?b) |]
      ==> action.relation_of ?x\<^sup>t\<^sub>f (?a(| tr := [] |), ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_hole 2),
                template_app (template_hole 6, template_var 3)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 1, t_empty),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_hole 2),
               template_app (template_hole 6, template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 1)),
               template_var 0))
           ))),
    ("Circus_Actions.relation_of_Sup",
     "?A ~= {} ==>
      action.relation_of
       (action_of
         (%A. A : \<Inter> {{p. P p} |P. P : action.relation_of ` ?A})) =
      (%A. A : \<Inter> {{p. P p} |P. P : action.relation_of ` ?A})",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 12))],
       template_equation
        (template_app
          (template_hole 10, template_app (template_hole 9, t_empty)),
         t_empty)))]:
   (string * thm * template) list
### theory "Draft.Circus_ActionsTemplates"
### 0.515s elapsed time, 0.686s cpu time, 0.112s GC time
val it = (): unit
