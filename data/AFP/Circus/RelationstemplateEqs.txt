   [("Relations.all_triv", "(\<^bold>\<forall>x. ?P) = ?P",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("Relations.true_conj_zero", "(?P \<and> false) = false",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Relations.true_conj_id", "(?P \<and> true) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Relations.true_dsij_id", "(?P \<or> false) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Relations.true_dsij_zero", "(?P \<or> true) = true",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Relations.p_equiv_p", "(?P \<longleftrightarrow> ?P) = true",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("Relations.true_iff", "(?P \<longleftrightarrow> true) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Relations.p_imp_p", "(?P \<longrightarrow> ?P) = true",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("Relations.imp_vacuous", "(false \<longrightarrow> ?u) = true",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Relations.true_imp", "(true \<longrightarrow> ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Relations.conj_idem", "(?P \<and> ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Relations.disj_idem", "(?P \<or> ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Relations.double_negation", "(\<not> \<not> ?P) = ?P",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Relations.ndet_idemp", "(?P \<or> ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Equiv_Relations.quotient_empty", "{} // ?r = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Equiv_Relations.equivclp_conversep", "equivclp ?r^--1 = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Equiv_Relations.equivclp_symclp",
     "equivclp (symclp ?r) = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Equiv_Relations.rtranclp_equivclp", "(equivclp ?r)^** = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relations.symclp_equivclp",
     "symclp (equivclp ?r) = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relations.tranclp_equivclp", "(equivclp ?r)^++ = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Relations.p_and_not_p", "(?P \<and> \<not> ?P) = false",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Relations.p_or_not_p", "(?P \<or> \<not> ?P) = true",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Relations.cond_unit_F",
     "(?P \<triangleleft> false \<triangleright>  ?Q) = ?Q",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_var 0)),
    ("Relations.cond_unit_T",
     "(?P \<triangleleft> true \<triangleright>  ?Q) = ?P",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_var 1)),
    ("Relations.cond_idem",
     "(?P \<triangleleft> ?b \<triangleright>  ?P) = ?P",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1),
       template_var 1)),
    ("Relations.conj_comm", "(?P \<and> ?Q) = (?Q \<and> ?P)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Relations.disj_comm", "(?P \<or> ?Q) = (?Q \<or> ?P)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Relations.conj_disj_abs", "(?P \<and> (?P \<or> ?Q)) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Relations.disj_conj_abs", "(?P \<or> ?P \<and> ?Q) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Relations.ndet_symm", "(?P \<or> ?Q) = (?Q \<or> ?P)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Equiv_Relations.proj_image",
     "Equiv_Relations.proj ?r ` ?A = ?A // ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Relations.closure_p_eq_true", "(ALL A. ?P A) = (?P = true)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Relations.equiv_eq1",
     "((?P \<longleftrightarrow> ?Q) = true) = (?P = ?Q)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 1, template_var 0))),
    ("Equiv_Relations.quotient_is_empty2", "({} = ?A // ?r) = (?A = {})",
     template_bimplication
      (template_equation
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_equation (template_var 1, template_hole 0))),
    ("Equiv_Relations.quotient_is_empty", "(?A // ?r = {}) = (?A = {})",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 1, template_hole 0))),
    ("Relations.not_conj_deMorgans",
     "(\<not> (?P \<and> ?Q)) = (\<not> ?P \<or> \<not> ?Q)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Relations.not_disj_deMorgans",
     "(\<not> (?P \<or> ?Q)) = (\<not> ?P \<and> \<not> ?Q)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Relations.conj_disj_not_abs",
     "(?P \<and> (\<not> ?P \<or> ?Q)) = (?P \<and> ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Relations.cond_symm",
     "(?P \<triangleleft> ?b \<triangleright>  ?Q) =
      (?Q \<triangleleft> \<not> ?b \<triangleright>  ?P)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1)),
         template_var 2))),
    ("Relations.cond_know_b",
     "(?b \<and> (?P \<triangleleft> ?b \<triangleright>  ?Q)) =
      (?b \<and> ?P)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2), template_var 1))),
    ("Relations.comp_unit_L", "((%(A, A'). A = A') ;; ?P) = ?P",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0),
       template_var 0)),
    ("Relations.comp_unit_R", "(?P ;; (%(A, A'). A = A')) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, t_empty)),
       template_var 0)),
    ("Relations.closure_equiv_eq",
     "(ALL A. (?P \<longleftrightarrow> ?Q) A) = (?P = ?Q)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Relations.all_idem",
     "(\<^bold>\<forall>b a. ?P a) = (\<^bold>\<forall>a. ?P a)",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 0, t_empty))),
    ("Relations.conj_assoc",
     "((?P \<and> ?Q) \<and> ?S) = (?P \<and> ?Q \<and> ?S)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Relations.disj_assoc",
     "((?P \<or> ?Q) \<or> ?S) = (?P \<or> ?Q \<or> ?S)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Relations.imp_imp",
     "(?P \<longrightarrow> ?Q \<longrightarrow> ?R) =
      (?P \<and> ?Q \<longrightarrow> ?R)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Relations.cond_ass_if",
     "(?P \<triangleleft> ?b \<triangleright>  ?Q) =
      (?b \<and> ?P \<triangleleft> ?b \<triangleright>  ?Q)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Relations.ndet_assoc",
     "(?P \<or> ?Q \<or> ?R) = ((?P \<or> ?Q) \<or> ?R)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Relations.comp_assoc", "(?P ;; ?Q ;; ?R) = ((?P ;; ?Q) ;; ?R)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Equiv_Relations.equivp_reflp_symp_transp",
     "equivp ?R = (reflp ?R & symp ?R & transp ?R)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Relations.cond_ass_else",
     "(?P \<triangleleft> ?b \<triangleright>  ?Q) =
      (?P \<triangleleft> ?b \<triangleright>  \<not> ?b \<and> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Relations.not_cond",
     "(\<not> (?P \<triangleleft> ?b \<triangleright>  ?Q)) =
      (\<not> ?P \<triangleleft> ?b \<triangleright>  \<not> ?Q)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Relations.cond_L6",
     "(?P \<triangleleft> ?b \<triangleright> 
          (?Q \<triangleleft> ?b \<triangleright>  ?R)) =
      (?P \<triangleleft> ?b \<triangleright>  ?R)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_var 0))),
    ("Relations.cond_know_nb",
     "(\<not> ?b \<and> (?P \<triangleleft> ?b \<triangleright>  ?Q)) =
      (\<not> ?b \<and> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_var 0))),
    ("Equiv_Relations.equivp_equiv",
     "equiv UNIV ?A = equivp (%x y. (x, y) : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Relations.imp_trans",
     "((?P \<longrightarrow> ?Q) \<and>
       (?Q \<longrightarrow> ?R) \<longrightarrow>
       ?P \<longrightarrow> ?R) =
      true",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 2), template_var 0)),
       template_hole 0)),
    ("Relations.conj_disj_distr",
     "(?P \<and> (?Q \<or> ?R)) = (?P \<and> ?Q \<or> ?P \<and> ?R)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Relations.disj_conj_dsitr",
     "(?P \<or> ?Q \<and> ?R) = ((?P \<or> ?Q) \<and> (?P \<or> ?R))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Relations.comp_ndet_r_distr",
     "(?P ;; ?Q \<or> ?R) = ((?P ;; ?Q) \<or> (?P ;; ?R))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Relations.comp_ndet_l_distr",
     "(?P \<or> ?Q ;; ?R) = ((?P ;; ?R) \<or> (?Q ;; ?R))",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Relations.ndet_distr",
     "(?P \<or> ?Q \<or> ?R) = ((?P \<or> ?Q) \<or> ?P \<or> ?R)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Equiv_Relations.singleton_quotient", "{?x} // ?r = {?r `` {?x}}",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_hole 3)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3))),
         template_hole 0))),
    ("Relations.cond_L7",
     "(?P \<triangleleft> ?b \<triangleright> 
          (?P \<triangleleft> ?c \<triangleright>  ?Q)) =
      (?P \<triangleleft> ?b \<or> ?c \<triangleright>  ?Q)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Equiv_Relations.part_equivp_refl_symp_transp",
     "part_equivp ?R = ((EX x. ?R x x) & symp ?R & transp ?R)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Relations.all_disj_distr",
     "((\<^bold>\<forall>x. ?P x) \<or> (\<^bold>\<forall>x. ?Q)) =
      (\<^bold>\<forall>x. ?P x \<or> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app (template_hole 0, t_empty)),
       template_app (template_hole 1, t_empty))),
    ("Relations.cond_conj_distr",
     "((?P \<triangleleft> ?b \<triangleright>  ?Q) \<and> ?R) =
      (?P \<and> ?R \<triangleleft> ?b \<triangleright>  ?Q \<and> ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Relations.ndet_cond_distr",
     "(?P \<or> (?Q \<triangleleft> ?b \<triangleright>  ?R)) =
      (?P \<or> ?Q \<triangleleft> ?b \<triangleright>  ?P \<or> ?R)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0)))),
    ("Relations.cond_disj_distr",
     "((?P \<triangleleft> ?b \<triangleright>  ?Q) \<or> ?R) =
      (?P \<or> ?R \<triangleleft> ?b \<triangleright>  ?Q \<or> ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Relations.imp_cond_distr",
     "(?R \<longrightarrow> (?P \<triangleleft> ?b \<triangleright>  ?Q)) =
      (?R \<longrightarrow> ?P \<triangleleft> ?b \<triangleright> 
          ?R \<longrightarrow> ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0)))),
    ("Relations.cond_imp_dist",
     "((?P \<triangleleft> ?b \<triangleright>  ?Q) \<longrightarrow> ?R) =
      (?P \<longrightarrow> ?R \<triangleleft> ?b \<triangleright> 
          ?Q \<longrightarrow> ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Relations.equiv_eq",
     "((?P \<and> ?Q \<or> \<not> ?P \<and> \<not> ?Q) = true) = (?P = ?Q)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_hole 0),
       template_equation (template_var 1, template_var 0))),
    ("Relations.cond_ndet_distr",
     "(?P \<triangleleft> ?b \<triangleright>  ?Q \<or> ?R) =
      ((?P \<triangleleft> ?b \<triangleright>  ?Q) \<or>
       (?P \<triangleleft> ?b \<triangleright>  ?R))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Relations.closure_conj_distr",
     "((ALL A. ?P A) & (ALL A. ?Q A)) = (ALL A. (?P \<and> ?Q) A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app (template_hole 1, t_empty)),
       template_app (template_hole 1, t_empty))),
    ("Relations.all_conj_distr",
     "((\<^bold>\<forall>x. ?P x) \<and> (\<^bold>\<forall>x. ?Q x)) =
      (\<^bold>\<forall>x. ?P x \<and> ?Q x)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, t_empty)),
         template_app (template_hole 0, t_empty)),
       template_app (template_hole 0, t_empty))),
    ("Relations.ex_disj_distr",
     "((\<^bold>\<exists>x. ?P x) \<or> (\<^bold>\<exists>x. ?Q x)) =
      (\<^bold>\<exists>x. ?P x \<or> ?Q x)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, t_empty)),
         template_app (template_hole 0, t_empty)),
       template_app (template_hole 0, t_empty))),
    ("Relations.cond_assoc",
     "(?P \<triangleleft> ?b \<triangleright> 
          ?Q \<triangleleft> ?c \<triangleright> 
          ?R) =
      (?P \<triangleleft> ?b \<and> ?c \<triangleright> 
          (?Q \<triangleleft> ?c \<triangleright>  ?R))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Relations.cond_distr",
     "(?P \<triangleleft> ?b \<triangleright> 
          (?Q \<triangleleft> ?c \<triangleright>  ?R)) =
      (?P \<triangleleft> ?b \<triangleright> 
          ?Q \<triangleleft> ?c \<triangleright> 
          (?P \<triangleleft> ?b \<triangleright>  ?R))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 3),
           template_var 0)))),
    ("Relations.cond_and_distr",
     "(?P \<and> ?Q \<triangleleft> ?b \<triangleright>  ?R \<and> ?S) =
      ((?P \<triangleleft> ?b \<triangleright>  ?R) \<and>
       (?Q \<triangleleft> ?b \<triangleright>  ?S))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Relations.cond_or_distr",
     "(?P \<or> ?Q \<triangleleft> ?b \<triangleright>  ?R \<or> ?S) =
      ((?P \<triangleleft> ?b \<triangleright>  ?R) \<or>
       (?Q \<triangleleft> ?b \<triangleright>  ?S))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Relations.cond_eq_distr",
     "(?P \<longleftrightarrow> ?Q \<triangleleft> ?b \<triangleright> 
          ?R \<longleftrightarrow> ?S) =
      ((?P \<triangleleft> ?b \<triangleright>  ?R) \<longleftrightarrow>
       (?Q \<triangleleft> ?b \<triangleright>  ?S))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Relations.cond_imp_distr",
     "(?P \<longrightarrow> ?Q \<triangleleft> ?b \<triangleright> 
          ?R \<longrightarrow> ?S) =
      ((?P \<triangleleft> ?b \<triangleright>  ?R) \<longrightarrow>
       (?Q \<triangleleft> ?b \<triangleright>  ?S))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Relations.cond_conj_not_distr",
     "((?P \<triangleleft> ?b \<triangleright>  ?Q) \<and>
       \<not> (?R \<triangleleft> ?b \<triangleright>  ?S)) =
      (?P \<and> \<not> ?R \<triangleleft> ?b \<triangleright> 
          ?Q \<and> \<not> ?S)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 4),
               template_app (template_hole 0, template_var 1))),
           template_var 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("Relations.split_cond",
     "?A ((?P \<triangleleft> ?b \<triangleright>  ?Q) ?x) =
      ((?b ?x --> ?A (?P ?x)) & (~ ?b ?x --> ?A (?Q ?x)))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 2, template_var 0)),
             template_app
              (template_var 4,
               template_app (template_var 3, template_var 0)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_var 2, template_var 0))),
           template_app
            (template_var 4,
             template_app (template_var 1, template_var 0)))))),
    ("Relations.split_cond_asm",
     "?A ((?P \<triangleleft> ?b \<triangleright>  ?Q) ?x) =
      (~ (?b ?x & ~ ?A (?P ?x) | ~ ?b ?x & ~ ?A (?Q ?x)))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 2, template_var 0)),
               template_app
                (template_hole 2,
                 template_app
                  (template_var 4,
                   template_app (template_var 3, template_var 0))))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 2,
                 template_app (template_var 2, template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_var 4,
                 template_app (template_var 1, template_var 0)))))))),
    ("Relations.l2_5_1_2",
     "(ALL A.
          (?P \<longrightarrow> (%A. A : \<Inter> {{p. P p} |P. P : ?S}))
           A) =
      (ALL X:?S. ALL A. (?P \<longrightarrow> X) A)",
     template_equation
      (template_app (template_hole 10, t_empty),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Relations.l2_5_1",
     "(ALL A.
          ((%A. A : \<Union> {{p. P p} |P. P : ?S}) \<longrightarrow> ?P)
           A) =
      (ALL X:?S. ALL A. (X \<longrightarrow> ?P) A)",
     template_equation
      (template_app (template_hole 10, t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Equiv_Relations.UN_UN_split_split_eq",
     "(UN (x1, x2):?X. UN (y1, y2):?Y. ?A x1 x2 y1 y2) =
      (UN x:?X.
          UN y:?Y.
             case x of (x1, x2) => case y of (y1, y2) => ?A x1 x2 y1 y2)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3, template_app (template_hole 2, t_empty)),
           template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)))),
    ("Relations.l2_5_5",
     "(?Q ;; (%A. A : \<Union> {{p. P p} |P. P : ?S})) =
      (%A. A : \<Union> {{p. P p} |P. P : {?Q ;; P |P. P : ?S}})",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), t_empty),
       t_empty)),
    ("Relations.l2_5_4",
     "((%A. A : \<Union> {{p. P p} |P. P : ?S}) ;; ?Q) =
      (%A. A : \<Union> {{p. P p} |P. P : {P ;; ?Q |P. P : ?S}})",
     template_equation
      (template_app
        (template_app (template_hole 9, t_empty), template_var 0),
       t_empty)),
    ("Relations.l2_5_3",
     "((%A. A : \<Union> {{p. P p} |P. P : ?S}) \<and> ?Q) =
      (%A. A : \<Union> {{p. P p} |P. P : {P \<and> ?Q |P. P : ?S}})",
     template_equation
      (template_app
        (template_app (template_hole 9, t_empty), template_var 0),
       t_empty)),
    ("Relations.l2_5_2",
     "((%A. A : \<Inter> {{p. P p} |P. P : ?S}) \<or> ?Q) =
      (%A. A : \<Inter> {{p. P p} |P. P : {P \<or> ?Q |P. P : ?S}})",
     template_equation
      (template_app
        (template_app (template_hole 9, t_empty), template_var 0),
       t_empty))]
