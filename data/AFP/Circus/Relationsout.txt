Loading theory "Draft.Var" (required by "Draft.RelationsTemplates" via "Draft.Relations")
Loading theory "HOL-Library.Stream" (required by "Draft.RelationsTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RelationsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RelationsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "Draft.Var"
### 0.047s elapsed time, 0.212s cpu time, 0.000s GC time
Loading theory "Draft.Relations" (required by "Draft.RelationsTemplates")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Ambiguous input (line 31 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>not" ("_position" P))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>not" ("_applC" ("_position" P) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^const>HOL.Not" ("_position" P))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>not" ("_applC" ("_position" P) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>not" ("_position" P))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^const>HOL.Not" ("_position" P))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 34 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>conj" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>conj" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>conj" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>conj" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 37 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.disj" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>disj" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.disj" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>disj" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>disj" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>disj" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 40 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>impl" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.implies" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>impl" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>impl" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>impl" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.eq" ("\<^const>HOL.iff" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.iff" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>iff" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^const>HOL.iff" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^const>HOL.iff" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>iff" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### ("\<^const>Pure.eq" ("\<^fixed>iff" ("_position" P) ("_position" Q))
###   ("_lambda" ("_position" A)
###     ("\<^fixed>iff" ("_applC" ("_position" P) ("_position" A))
###       ("_applC" ("_position" Q) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.545s cpu time, 0.049s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RelationsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Ambiguous input (line 56 of "$AFP/Circus/Relations.thy") produces 16 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>HOL.disj"
###     ("\<^const>Relations.conj" ("_position" b) ("_position" P))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>Relations.disj"
###     ("\<^const>Relations.conj" ("_position" b) ("_position" P))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>HOL.disj" ("\<^const>HOL.conj" ("_position" b) ("_position" P))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>Relations.disj"
###     ("\<^const>HOL.conj" ("_position" b) ("_position" P))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>HOL.disj"
###     ("\<^const>Relations.conj" ("_position" b) ("_position" P))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>Relations.disj"
###     ("\<^const>Relations.conj" ("_position" b) ("_position" P))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>HOL.disj" ("\<^const>HOL.conj" ("_position" b) ("_position" P))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>Relations.disj"
###     ("\<^const>HOL.conj" ("_position" b) ("_position" P))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>HOL.disj"
###     ("\<^const>Relations.conj" ("_position" b) ("_position" P))
###     ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>cond" ("_position" P) ("_position" b) ("_position" Q))
###   ("\<^const>Relations.disj"
###     ("\<^const>Relations.conj" ("_position" b) ("_position" P))
###     ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" b))
###       ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 71 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_list" ("_position" P))
###   ("\<^const>HOL.All_binder" ("_position" A)
###     ("_applC" ("_position" P) ("_position" A))))
### ("\<^const>Pure.eq" ("\<^fixed>closure" ("_position" P))
###   ("\<^const>HOL.All_binder" ("_position" A)
###     ("_applC" ("_position" P) ("_position" A))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>ndet" ("_position" P) ("_position" Q))
###   ("\<^const>HOL.disj" ("_position" P) ("_position" Q)))
### ("\<^const>Pure.eq" ("\<^fixed>ndet" ("_position" P) ("_position" Q))
###   ("\<^const>Relations.disj" ("_position" P) ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>join" ("_position" P) ("_position" Q))
###   ("\<^const>HOL.conj" ("_position" P) ("_position" Q)))
### ("\<^const>Pure.eq" ("\<^fixed>join" ("_position" P) ("_position" Q))
###   ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 113 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" false) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.not" ("_position" P)) ("_position" x))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" false) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.Not" ("_position" P)) ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 114 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.not" ("_position" P)) ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###     ("\<^const>HOL.Trueprop" ("_position" C))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.Not" ("_position" P)) ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###     ("\<^const>HOL.Trueprop" ("_position" C))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 115 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.not" ("_position" P)) ("_position" x)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Relations.not" ("_applC" ("_position" P) ("_position" x)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.Not" ("_position" P)) ("_position" x)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Relations.not" ("_applC" ("_position" P) ("_position" x)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.not" ("_position" P)) ("_position" x)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" x)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.Not" ("_position" P)) ("_position" x)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 117 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###         ("_position" x)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 118 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" C))))
###     ("\<^const>HOL.Trueprop" ("_position" C))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" C))))
###     ("\<^const>HOL.Trueprop" ("_position" C))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 120 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not" ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("_position" x))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Relations.not" ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("_position" x))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not" ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("_position" x))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Relations.not" ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 121 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>HOL.Trueprop" ("_position" C)))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" C)))
###       ("\<^const>HOL.Trueprop" ("_position" C)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>HOL.Trueprop" ("_position" C)))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" C)))
###       ("\<^const>HOL.Trueprop" ("_position" C)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 123 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###       ("_position" x))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###       ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Set_Algebras"
### 0.232s elapsed time, 0.925s cpu time, 0.049s GC time
### Ambiguous input (line 124 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R)))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R)))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R)))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R)))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Loading theory "HOL-Library.BigO" (required by "Draft.RelationsTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 126 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x))))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>HOL.iff" ("_position" P) ("_position" Q))
###         ("_position" x)))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x))))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###         ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 128 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.iff" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not" ("_applC" ("_position" Q) ("_position" x))))
###           ("\<^const>HOL.Trueprop" ("_position" R))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not" ("_applC" ("_position" Q) ("_position" x))))
###           ("\<^const>HOL.Trueprop" ("_position" R))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.iff" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Relations.not"
###             ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not" ("_applC" ("_position" Q) ("_position" x))))
###           ("\<^const>HOL.Trueprop" ("_position" R))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Relations.not"
###             ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.Not" ("_applC" ("_position" Q) ("_position" x))))
###           ("\<^const>HOL.Trueprop" ("_position" R))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.iff" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Relations.not"
###               ("_applC" ("_position" Q) ("_position" x))))
###           ("\<^const>HOL.Trueprop" ("_position" R))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.Not" ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Relations.not"
###               ("_applC" ("_position" Q) ("_position" x))))
###           ("\<^const>HOL.Trueprop" ("_position" R))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>HOL.iff" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Relations.not"
###             ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Relations.not"
###               ("_applC" ("_position" Q) ("_position" x))))
###           ("\<^const>HOL.Trueprop" ("_position" R))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###       ("_position" x)))
###   ("\<^const>Pure.imp"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop" ("_applC" ("_position" Q) ("_position" x)))
###         ("\<^const>HOL.Trueprop" ("_position" R))))
###     ("\<^const>Pure.imp"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Relations.not"
###             ("_applC" ("_position" P) ("_position" x))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Relations.not"
###               ("_applC" ("_position" Q) ("_position" x))))
###           ("\<^const>HOL.Trueprop" ("_position" R))))
###       ("\<^const>HOL.Trueprop" ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 172 of "$AFP/Circus/Relations.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.implies"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.implies"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.impl" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.implies"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.impl" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.implies"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.impl" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.impl" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.not"
###           ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.implies" ("_applC" ("_position" b) ("_position" x))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" P) ("_position" x))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###         ("_applC" ("_position" A)
###           ("_applC" ("_position" Q) ("_position" x)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 176 of "$AFP/Circus/Relations.thy") produces 128 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.disj"
###         ("\<^const>Relations.conj"
###           ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.disj"
###         ("\<^const>Relations.conj"
###           ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.disj"
###         ("\<^const>Relations.conj"
###           ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.disj"
###         ("\<^const>Relations.conj"
###           ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.conj" ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.conj" ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.disj"
###         ("\<^const>HOL.conj" ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.disj"
###         ("\<^const>HOL.conj" ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.disj"
###         ("\<^const>Relations.conj"
###           ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>Relations.not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" A)
###       ("_applC"
###         ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###           ("_position" Q))
###         ("_position" x)))
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.disj"
###         ("\<^const>Relations.conj"
###           ("_applC" ("_position" b) ("_position" x))
###           ("\<^const>Relations.not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" P) ("_position" x)))))
###         ("\<^const>Relations.conj"
###           ("\<^const>HOL.Not" ("_applC" ("_position" b) ("_position" x)))
###           ("\<^const>HOL.Not"
###             ("_applC" ("_position" A)
###               ("_applC" ("_position" Q) ("_position" x)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 187 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("_position" Q))
###     ("\<^const>Relations.cond" ("_position" Q)
###       ("\<^const>HOL.Not" ("_position" b)) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("_position" Q))
###     ("\<^const>Relations.cond" ("_position" Q)
###       ("\<^const>Relations.not" ("_position" b)) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 190 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" c) ("_position" R))
###     ("\<^const>Relations.cond" ("_position" P)
###       ("\<^const>Relations.conj" ("_position" b) ("_position" c))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" c)
###         ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" c) ("_position" R))
###     ("\<^const>Relations.cond" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" b) ("_position" c))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" c)
###         ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 205 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" c)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("_position" P)
###       ("\<^const>Relations.disj" ("_position" b) ("_position" c))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" c)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" b) ("_position" c))
###       ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 208 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>HOL.conj" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("_position" b) ("\<^const>HOL.conj" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>Relations.conj" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.conj" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>HOL.conj" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("_position" b) ("\<^const>HOL.conj" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>Relations.conj" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.conj" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 211 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>HOL.disj" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("_position" b) ("\<^const>HOL.disj" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>Relations.disj" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.disj" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>HOL.disj" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("_position" b) ("\<^const>HOL.disj" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>Relations.disj" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.disj" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  shift :: "'a list => 'a stream => 'a stream"
### Ambiguous input (line 215 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 219 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.iff" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>HOL.iff" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.iff"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###       ("_position" b) ("\<^const>HOL.iff" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.iff"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.iff" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>Relations.iff" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.iff"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.iff" ("_position" R) ("_position" S)))
###     ("\<^const>Relations.iff"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.iff" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>HOL.iff" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.iff"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###       ("_position" b) ("\<^const>HOL.iff" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.iff"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.iff" ("_position" P) ("_position" Q)) ("_position" b)
###       ("\<^const>Relations.iff" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.iff"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.iff" ("_position" P) ("_position" Q))
###       ("_position" b)
###       ("\<^const>Relations.iff" ("_position" R) ("_position" S)))
###     ("\<^const>HOL.iff"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" R))
###       ("\<^const>Relations.cond" ("_position" Q) ("_position" b)
###         ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Ambiguous input (line 226 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" c)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" c)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.conj" ("_position" P)
###         ("\<^const>Relations.comp" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.comp"
###         ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###         ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" c)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" c)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.conj" ("_position" P)
###         ("\<^const>Relations.comp" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.comp"
###         ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###         ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" c)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" c)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.conj" ("_position" P)
###         ("\<^const>Relations.comp" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.comp"
###         ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###         ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>Pure.all_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" b) ("_position" c)))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" b))))
###         ("_applC" ("_position" P)
###           ("_tuple" ("_position" a) ("_tuple_arg" ("_position" c)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.conj" ("_position" P)
###         ("\<^const>Relations.comp" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.comp"
###         ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###         ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 234 of "$AFP/Circus/Relations.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.ndet"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" 'a) ("_type_name" relation)))
###         ("_position" Q))
###       ("_position" Q))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet"
###     ("\<^const>Relations.ndet"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" 'a) ("_type_name" relation)))
###       ("\<^const>HOL.eq" ("_position" Q) ("_position" Q)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet"
###     ("_constrain" ("_position" P)
###       ("_tapp" ("_position_sort" 'a) ("_type_name" relation)))
###     ("\<^const>Relations.ndet"
###       ("\<^const>HOL.eq" ("_position" Q) ("_position" Q)) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.ndet"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" 'a) ("_type_name" relation)))
###       ("_position" Q))
###     ("\<^const>Relations.ndet" ("_position" Q) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet"
###     ("_constrain" ("_position" P)
###       ("_tapp" ("_position_sort" 'a) ("_type_name" relation)))
###     ("\<^const>HOL.eq" ("_position" Q)
###       ("\<^const>Relations.ndet" ("_position" Q) ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 237 of "$AFP/Circus/Relations.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.ndet" ("_position" P)
###         ("\<^const>Relations.ndet" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.ndet" ("_position" P) ("_position" Q)))
###     ("_position" R)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet"
###     ("\<^const>Relations.ndet" ("_position" P)
###       ("\<^const>HOL.eq"
###         ("\<^const>Relations.ndet" ("_position" Q) ("_position" R))
###         ("\<^const>Relations.ndet" ("_position" P) ("_position" Q))))
###     ("_position" R)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet" ("_position" P)
###     ("\<^const>Relations.ndet"
###       ("\<^const>HOL.eq"
###         ("\<^const>Relations.ndet" ("_position" Q) ("_position" R))
###         ("\<^const>Relations.ndet" ("_position" P) ("_position" Q)))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.ndet" ("_position" P)
###       ("\<^const>Relations.ndet" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.ndet"
###       ("\<^const>Relations.ndet" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet" ("_position" P)
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.ndet" ("_position" Q) ("_position" R))
###       ("\<^const>Relations.ndet"
###         ("\<^const>Relations.ndet" ("_position" P) ("_position" Q))
###         ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 240 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.ndet" ("_position" P) ("_position" P))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet" ("_position" P)
###     ("\<^const>HOL.eq" ("_position" P) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 243 of "$AFP/Circus/Relations.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.ndet" ("_position" P)
###         ("\<^const>Relations.ndet" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.ndet" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.ndet" ("_position" P) ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet"
###     ("\<^const>Relations.ndet" ("_position" P)
###       ("\<^const>HOL.eq"
###         ("\<^const>Relations.ndet" ("_position" Q) ("_position" R))
###         ("\<^const>Relations.ndet" ("_position" P) ("_position" Q))))
###     ("\<^const>Relations.ndet" ("_position" P) ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet" ("_position" P)
###     ("\<^const>Relations.ndet"
###       ("\<^const>HOL.eq"
###         ("\<^const>Relations.ndet" ("_position" Q) ("_position" R))
###         ("\<^const>Relations.ndet" ("_position" P) ("_position" Q)))
###       ("\<^const>Relations.ndet" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.ndet" ("_position" P)
###       ("\<^const>Relations.ndet" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.ndet"
###       ("\<^const>Relations.ndet" ("_position" P) ("_position" Q))
###       ("\<^const>Relations.ndet" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndet" ("_position" P)
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.ndet" ("_position" Q) ("_position" R))
###       ("\<^const>Relations.ndet"
###         ("\<^const>Relations.ndet" ("_position" P) ("_position" Q))
###         ("\<^const>Relations.ndet" ("_position" P) ("_position" R))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 258 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" X) ("_position" S)
###     ("_list"
###       ("\<^const>Relations.impl" ("_position" X)
###         ("\<^const>Relations.ndetS" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" X) ("_position" S)
###     ("_list"
###       ("\<^const>HOL.implies" ("_position" X)
###         ("\<^const>Relations.ndetS" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" X) ("_position" S)
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.impl" ("_position" X)
###         ("\<^const>Relations.ndetS" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" X) ("_position" S)
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.implies" ("_position" X)
###         ("\<^const>Relations.ndetS" ("_position" S))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 261 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>Relations.impl" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>Relations.impl" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("_list" ("\<^const>HOL.implies" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("_list" ("\<^const>HOL.implies" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("_list" ("\<^const>Relations.impl" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("_list" ("\<^const>Relations.impl" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>HOL.implies" ("\<^const>Relations.ndetS" ("_position" S))
###         ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))
###     ("_list"
###       ("\<^const>HOL.implies" ("\<^const>Relations.ndetS" ("_position" S))
###         ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 264 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_list"
###       ("\<^const>HOL.implies" ("\<^const>Relations.ndetS" ("_position" S))
###         ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("_list"
###       ("\<^const>HOL.implies" ("\<^const>Relations.ndetS" ("_position" S))
###         ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.implies" ("\<^const>Relations.ndetS" ("_position" S))
###         ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.implies" ("\<^const>Relations.ndetS" ("_position" S))
###         ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>Relations.impl" ("_position" X) ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("_list"
###       ("\<^const>Relations.impl"
###         ("\<^const>Relations.ndetS" ("_position" S)) ("_position" P)))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>Relations.impl" ("_position" X) ("_position" P))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  snth :: "'a stream => nat => 'a"
### Ambiguous input (line 267 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>Relations.ndetS" ("\<^const>Set.empty"))
###     ("_position" Top)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.ndetS"
###     ("\<^const>HOL.eq" ("\<^const>Set.empty") ("_position" Top))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 270 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_list"
###       ("\<^const>Relations.impl" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("_list"
###       ("\<^const>Relations.impl" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_list"
###       ("\<^const>HOL.implies" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("_list"
###       ("\<^const>HOL.implies" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.impl" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.impl" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.implies" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.implies" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_list"
###       ("\<^const>Relations.impl" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>Relations.impl" ("_position" P) ("_position" X))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("_list"
###       ("\<^const>Relations.impl" ("_position" P)
###         ("\<^const>Relations.conjS" ("_position" S))))
###     ("_Ball" ("_position" X) ("_position" S)
###       ("\<^const>Relations.closure"
###         ("\<^const>Relations.impl" ("_position" P) ("_position" X))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 273 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>Relations.conjS" ("\<^const>Set.empty"))
###     ("_position" Bot)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.conjS"
###     ("\<^const>HOL.eq" ("\<^const>Set.empty") ("_position" Bot))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Ambiguous input (line 299 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("\<^const>Relations.not" ("_position" P))
###       ("_position" b) ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("\<^const>Relations.not" ("_position" P))
###       ("_position" b) ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("\<^const>HOL.Not" ("_position" P))
###       ("_position" b) ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("\<^const>HOL.Not" ("_position" P))
###       ("_position" b) ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("\<^const>Relations.not" ("_position" P))
###       ("_position" b) ("\<^const>HOL.Not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("\<^const>Relations.not" ("_position" P))
###       ("_position" b) ("\<^const>HOL.Not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("\<^const>HOL.Not" ("_position" P))
###       ("_position" b) ("\<^const>HOL.Not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond" ("\<^const>HOL.Not" ("_position" P))
###       ("_position" b) ("\<^const>HOL.Not" ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 303 of "$AFP/Circus/Relations.thy") produces 64 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>HOL.Not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P)
###         ("\<^const>Relations.not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>HOL.Not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P)
###         ("\<^const>Relations.not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>Relations.not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P)
###         ("\<^const>Relations.not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>Relations.not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P)
###         ("\<^const>Relations.not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>HOL.Not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P)
###         ("\<^const>Relations.not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>HOL.Not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P)
###         ("\<^const>Relations.not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>Relations.not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P)
###         ("\<^const>Relations.not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>Relations.not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P)
###         ("\<^const>Relations.not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>HOL.Not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P)
###         ("\<^const>HOL.Not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("\<^const>HOL.Not"
###         ("\<^const>Relations.cond" ("_position" R) ("_position" b)
###           ("_position" S))))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P)
###         ("\<^const>HOL.Not" ("_position" R)))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q)
###         ("\<^const>Relations.not" ("_position" S))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 306 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl" ("_position" R)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" R) ("_position" P))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies" ("_position" R)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" R) ("_position" P))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl" ("_position" R)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" R) ("_position" P))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies" ("_position" R)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" R) ("_position" P))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl" ("_position" R)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" R) ("_position" P))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies" ("_position" R)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" R) ("_position" P))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl" ("_position" R)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" R) ("_position" P))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" R) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies" ("_position" R)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" R) ("_position" P))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" R) ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 309 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### Ambiguous input (line 312 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)) ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)) ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)) ("_position" b)
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)) ("_position" b)
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 315 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)) ("_position" b)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)) ("_position" b)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)) ("_position" b)
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)) ("_position" b)
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q))
###       ("_position" R))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" R))
###       ("_position" b)
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 318 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("_position" b)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" b) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("_position" b)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" b) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("_position" b)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("_position" b) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("_position" b)
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("_position" b) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 321 of "$AFP/Circus/Relations.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("\<^const>HOL.Not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("\<^const>HOL.Not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" b))
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###       ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" b))
###       ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  cycle :: "'a list => 'a stream"
### Ambiguous input (line 324 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("_position" Q))
###     ("\<^const>Relations.cond"
###       ("\<^const>HOL.conj" ("_position" b) ("_position" P)) ("_position" b)
###       ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("_position" Q))
###     ("\<^const>Relations.cond"
###       ("\<^const>Relations.conj" ("_position" b) ("_position" P))
###       ("_position" b) ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 327 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("_position" Q))
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("\<^const>HOL.conj" ("\<^const>HOL.Not" ("_position" b))
###         ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("_position" Q))
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" b))
###         ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("_position" Q))
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" b))
###         ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("_position" Q))
###     ("\<^const>Relations.cond" ("_position" P) ("_position" b)
###       ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" b))
###         ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 330 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>HOL.Not" ("_position" true))
###     ("_position" false)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>Relations.not" ("_position" true))
###     ("_position" false)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 333 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>HOL.Not" ("_position" false))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>Relations.not" ("_position" false))
###     ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 336 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" P))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" P))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 339 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" P))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" P))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 342 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" Q))
###     ("\<^const>Relations.conj" ("_position" Q) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" Q))
###     ("\<^const>Relations.conj" ("_position" Q) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" Q))
###     ("\<^const>HOL.conj" ("_position" Q) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" Q))
###     ("\<^const>HOL.conj" ("_position" Q) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 345 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" Q))
###     ("\<^const>Relations.disj" ("_position" Q) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" Q))
###     ("\<^const>Relations.disj" ("_position" Q) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" Q))
###     ("\<^const>HOL.disj" ("_position" Q) ("_position" P))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("_position" Q))
###     ("\<^const>HOL.disj" ("_position" Q) ("_position" P))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  left :: "'a tree => 'a tree"
### Ambiguous input (line 348 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("\<^const>Relations.conj" ("_position" R) ("_position" Q)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("\<^const>Relations.conj" ("_position" R) ("_position" Q)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" R) ("_position" Q)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" R) ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 351 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("\<^const>Relations.disj" ("_position" R) ("_position" Q)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("\<^const>Relations.disj" ("_position" R) ("_position" Q)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" R) ("_position" Q)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" P) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" R) ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  right :: "'a tree => 'a tree"
### Ambiguous input (line 354 of "$AFP/Circus/Relations.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.conj" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.conj" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.conj" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.conj" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>HOL.conj" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>HOL.conj" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>HOL.conj" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>HOL.conj" ("_position" P)
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.conj" ("_position" P)
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.conj" ("_position" P)
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### Ambiguous input (line 357 of "$AFP/Circus/Relations.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.disj" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.disj" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.disj" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.disj" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>HOL.disj" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>HOL.disj" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>HOL.disj" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>HOL.disj" ("_position" P)
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.disj" ("_position" P)
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" S)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" S))
###     ("\<^const>Relations.disj" ("_position" P)
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 360 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q)))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 363 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 366 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.disj"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.disj"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.disj"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.disj"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.conj" ("_position" P) ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 369 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.conj"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.conj" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.disj" ("_position" P) ("_position" Q))
###       ("\<^const>HOL.disj" ("_position" P) ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 372 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("_position" P) ("_position" true))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("_position" P) ("_position" true))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 375 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj" ("_position" P) ("_position" true))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj" ("_position" P) ("_position" true))
###     ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 378 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("_position" P) ("_position" false))
###     ("_position" false)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("_position" P) ("_position" false))
###     ("_position" false)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 381 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj" ("_position" P) ("_position" false))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj" ("_position" P) ("_position" false))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  flat :: "'a list stream => 'a stream"
### Ambiguous input (line 384 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl" ("_position" false) ("_position" u))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies" ("_position" false) ("_position" u))
###     ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 387 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("_position" P)
###       ("\<^const>HOL.Not" ("_position" P)))
###     ("_position" false)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("_position" P)
###       ("\<^const>HOL.Not" ("_position" P)))
###     ("_position" false)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("_position" P)
###       ("\<^const>Relations.not" ("_position" P)))
###     ("_position" false)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("_position" P)
###       ("\<^const>Relations.not" ("_position" P)))
###     ("_position" false)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 390 of "$AFP/Circus/Relations.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("\<^const>HOL.Not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("\<^const>HOL.Not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("\<^const>HOL.Not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("\<^const>HOL.Not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("\<^const>Relations.not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("\<^const>Relations.not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("\<^const>Relations.not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.disj" ("\<^const>Relations.not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("\<^const>HOL.Not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.disj" ("\<^const>HOL.Not" ("_position" P))
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("_position" P) ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 393 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj" ("_position" P)
###       ("\<^const>HOL.Not" ("_position" P)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj" ("_position" P)
###       ("\<^const>HOL.Not" ("_position" P)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj" ("_position" P)
###       ("\<^const>Relations.not" ("_position" P)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj" ("_position" P)
###       ("\<^const>Relations.not" ("_position" P)))
###     ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 396 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.Not"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.Not"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.not"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.not"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 399 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.disj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.disj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.disj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.disj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>HOL.disj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>HOL.disj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>HOL.disj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>HOL.disj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.disj" ("\<^const>HOL.Not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.conj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.disj" ("\<^const>HOL.Not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 402 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>Relations.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>HOL.conj" ("\<^const>Relations.not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.Not"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.not"
###       ("\<^const>HOL.disj"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q)))
###     ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###       ("\<^const>Relations.not" ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 405 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl" ("_position" P) ("_position" P))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies" ("_position" P) ("_position" P))
###     ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 408 of "$AFP/Circus/Relations.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.impl"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.impl"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.impl"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.impl"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("_constrain" ("_position" P)
###         ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###       ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.conj" ("_position" P) ("_position" Q))
###       ("_position" R))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 411 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.conj"
###         ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.conj"
###         ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>HOL.conj"
###         ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Relations.impl" ("_position" P) ("_position" Q))
###         ("\<^const>HOL.implies" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl"
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###         ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies"
###       ("\<^const>Relations.conj"
###         ("\<^const>HOL.implies" ("_position" P) ("_position" Q))
###         ("\<^const>Relations.impl" ("_position" Q) ("_position" R)))
###       ("\<^const>Relations.impl" ("_position" P) ("_position" R)))
###     ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 414 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.iff" ("_position" P) ("_position" P))
###     ("_position" true)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>HOL.iff" ("_position" P) ("_position" P))
###     ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Ambiguous input (line 417 of "$AFP/Circus/Relations.thy") produces 64 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.disj"
###         ("\<^const>Relations.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.disj"
###         ("\<^const>Relations.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.disj"
###         ("\<^const>Relations.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.disj"
###         ("\<^const>Relations.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.disj"
###         ("\<^const>HOL.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.disj"
###         ("\<^const>HOL.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.disj"
###         ("\<^const>HOL.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>Relations.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.disj"
###         ("\<^const>Relations.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>HOL.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.disj"
###         ("\<^const>Relations.conj"
###           ("_constrain" ("_position" P)
###             ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###           ("_position" Q))
###         ("\<^const>HOL.conj" ("\<^const>HOL.Not" ("_position" P))
###           ("\<^const>HOL.Not" ("_position" Q))))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 420 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.iff"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>HOL.iff"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.iff"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>HOL.eq"
###       ("\<^const>Relations.iff"
###         ("_constrain" ("_position" P)
###           ("_tapp" ("_position_sort" '\<alpha>) ("_type_name" predicate)))
###         ("_position" Q))
###       ("_position" true))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 426 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.ex_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.ex_binder" ("_position" x)
###         ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>Relations.ex_binder" ("_position" x)
###       ("\<^const>HOL.disj" ("_applC" ("_position" P) ("_position" x))
###         ("_applC" ("_position" Q) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.ex_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.ex_binder" ("_position" x)
###         ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>Relations.ex_binder" ("_position" x)
###       ("\<^const>HOL.disj" ("_applC" ("_position" P) ("_position" x))
###         ("_applC" ("_position" Q) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.ex_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.ex_binder" ("_position" x)
###         ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>Relations.ex_binder" ("_position" x)
###       ("\<^const>Relations.disj" ("_applC" ("_position" P) ("_position" x))
###         ("_applC" ("_position" Q) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.ex_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.ex_binder" ("_position" x)
###         ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>Relations.ex_binder" ("_position" x)
###       ("\<^const>Relations.disj" ("_applC" ("_position" P) ("_position" x))
###         ("_applC" ("_position" Q) ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Ambiguous input (line 429 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.all_binder" ("_position" x) ("_position" Q)))
###     ("\<^const>Relations.all_binder" ("_position" x)
###       ("\<^const>HOL.disj" ("_applC" ("_position" P) ("_position" x))
###         ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.all_binder" ("_position" x) ("_position" Q)))
###     ("\<^const>Relations.all_binder" ("_position" x)
###       ("\<^const>HOL.disj" ("_applC" ("_position" P) ("_position" x))
###         ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.disj"
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.all_binder" ("_position" x) ("_position" Q)))
###     ("\<^const>Relations.all_binder" ("_position" x)
###       ("\<^const>Relations.disj" ("_applC" ("_position" P) ("_position" x))
###         ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.disj"
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.all_binder" ("_position" x) ("_position" Q)))
###     ("\<^const>Relations.all_binder" ("_position" x)
###       ("\<^const>Relations.disj" ("_applC" ("_position" P) ("_position" x))
###         ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 432 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>Relations.all_binder" ("_position" x)
###       ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" x))
###         ("_applC" ("_position" Q) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>Relations.all_binder" ("_position" x)
###       ("\<^const>HOL.conj" ("_applC" ("_position" P) ("_position" x))
###         ("_applC" ("_position" Q) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>Relations.all_binder" ("_position" x)
###       ("\<^const>Relations.conj" ("_applC" ("_position" P) ("_position" x))
###         ("_applC" ("_position" Q) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj"
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" P) ("_position" x)))
###       ("\<^const>Relations.all_binder" ("_position" x)
###         ("_applC" ("_position" Q) ("_position" x))))
###     ("\<^const>Relations.all_binder" ("_position" x)
###       ("\<^const>Relations.conj" ("_applC" ("_position" P) ("_position" x))
###         ("_applC" ("_position" Q) ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 438 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop" ("_list" ("_position" true)))
### ("\<^const>HOL.Trueprop" ("\<^const>Relations.closure" ("_position" true)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 441 of "$AFP/Circus/Relations.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff" ("_list" ("_position" P))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" true))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff" ("_list" ("_position" P))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" true))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff" ("\<^const>Relations.closure" ("_position" P))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" true))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff" ("\<^const>Relations.closure" ("_position" P))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" true))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 444 of "$AFP/Circus/Relations.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_list" ("\<^const>Relations.iff" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("_list" ("\<^const>Relations.iff" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_list" ("\<^const>HOL.iff" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("_list" ("\<^const>HOL.iff" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.iff" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.iff" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.iff" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.iff"
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.iff" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.eq" ("_position" P) ("_position" Q))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Stream"
### 0.974s elapsed time, 3.835s cpu time, 0.302s GC time
### Ambiguous input (line 447 of "$AFP/Circus/Relations.thy") produces 32 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.closure" ("_position" P))
###       ("\<^const>Relations.closure" ("_position" Q)))
###     ("_list" ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("\<^const>Relations.closure" ("_position" P))
###       ("\<^const>Relations.closure" ("_position" Q)))
###     ("_list" ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("_list" ("_position" P))
###       ("\<^const>Relations.closure" ("_position" Q)))
###     ("_list" ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("_list" ("_position" P))
###       ("\<^const>Relations.closure" ("_position" Q)))
###     ("_list" ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.closure" ("_position" P))
###       ("_list" ("_position" Q)))
###     ("_list" ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("\<^const>Relations.closure" ("_position" P))
###       ("_list" ("_position" Q)))
###     ("_list" ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))
###     ("_list" ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))
###     ("_list" ("\<^const>Relations.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.conj"
###       ("\<^const>Relations.closure" ("_position" P))
###       ("\<^const>Relations.closure" ("_position" Q)))
###     ("_list" ("\<^const>HOL.conj" ("_position" P) ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.conj" ("\<^const>Relations.closure" ("_position" P))
###       ("\<^const>Relations.closure" ("_position" Q)))
###     ("_list" ("\<^const>HOL.conj" ("_position" P) ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 450 of "$AFP/Circus/Relations.thy") produces 64 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_list" ("\<^const>Relations.impl" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_list" ("\<^const>Relations.impl" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_list" ("\<^const>HOL.implies" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_list" ("\<^const>HOL.implies" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("\<^const>Relations.closure"
###       ("\<^const>Relations.impl" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("\<^const>Relations.closure"
###       ("\<^const>HOL.implies" ("_position" P) ("_position" Q)))
###     ("\<^const>HOL.implies" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("_list" ("\<^const>Relations.impl" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.impl" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Relations.impl"
###     ("_list" ("\<^const>Relations.impl" ("_position" P) ("_position" Q)))
###     ("\<^const>Relations.impl" ("_list" ("_position" P))
###       ("_list" ("_position" Q)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 453 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.iff" ("_position" P) ("_position" true))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>HOL.iff" ("_position" P) ("_position" true))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 456 of "$AFP/Circus/Relations.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relations.impl" ("_position" true) ("_position" P))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>HOL.implies" ("_position" true) ("_position" P))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Relations"
### 0.957s elapsed time, 3.741s cpu time, 0.302s GC time
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.097s elapsed time, 3.837s cpu time, 0.792s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.971s elapsed time, 5.117s cpu time, 0.899s GC time
Loading theory "Draft.Templates" (required by "Draft.RelationsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RelationsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.487s elapsed time, 0.526s cpu time, 0.048s GC time
Loading theory "Draft.RelationsTemplates"
val templateLemmas =
   [("Relations.true_intro", "true ?x",
     template_predicate (template_app (template_hole 0, template_var 0))),
    ("Equiv_Relations.equivp_evquivclp", "equivp (equivclp ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Equiv_Relations.reflp_equivclp", "reflp (equivclp ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Equiv_Relations.symp_equivclp", "symp (equivclp ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Equiv_Relations.transp_equivclp", "transp (equivclp ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Equiv_Relations.equivclp_refl", "equivclp ?r ?x ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Equiv_Relations.equivp_rtranclp_symclp", "equivp (symclp ?r)^**",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Relations.all_triv", "(\<^bold>\<forall>x. ?P) = ?P",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("Relations.true_conj_zero", "(?P \<and> false) = false",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Relations.true_conj_id", "(?P \<and> true) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Relations.true_dsij_id", "(?P \<or> false) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Relations.true_dsij_zero", "(?P \<or> true) = true",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Relations.p_equiv_p", "(?P \<longleftrightarrow> ?P) = true",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("Relations.true_iff", "(?P \<longleftrightarrow> true) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Relations.p_imp_p", "(?P \<longrightarrow> ?P) = true",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("Relations.imp_vacuous", "(false \<longrightarrow> ?u) = true",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Relations.true_imp", "(true \<longrightarrow> ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Relations.conj_idem", "(?P \<and> ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Relations.disj_idem", "(?P \<or> ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Relations.double_negation", "(\<not> \<not> ?P) = ?P",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Relations.ndet_idemp", "(?P \<or> ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Equiv_Relations.quotient_empty", "{} // ?r = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Equiv_Relations.rtranlcp_le_equivclp", "?r^** <= equivclp ?r",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Relations.false_elim", "false ?x ==> ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.equivclp_conversep", "equivclp ?r^--1 = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Equiv_Relations.equivclp_symclp",
     "equivclp (symclp ?r) = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Equiv_Relations.rtranclp_equivclp", "(equivclp ?r)^** = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relations.symclp_equivclp",
     "symclp (equivclp ?r) = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relations.tranclp_equivclp", "(equivclp ?r)^++ = equivclp ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Relations.p_and_not_p", "(?P \<and> \<not> ?P) = false",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Relations.p_or_not_p", "(?P \<or> \<not> ?P) = true",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Relations.cond_unit_F",
     "(?P \<triangleleft> false \<triangleright>  ?Q) = ?Q",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_var 0)),
    ("Relations.cond_unit_T",
     "(?P \<triangleleft> true \<triangleright>  ?Q) = ?P",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_var 1)),
    ("Relations.cond_idem",
     "(?P \<triangleleft> ?b \<triangleright>  ?P) = ?P",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 1),
       template_var 1)),
    ("Equiv_Relations.rtranclp_conversep_le_equivclp",
     "?r^--1^** <= equivclp ?r",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relations.symclp_rtranclp_le_equivclp",
     "symclp ?r^** <= equivclp ?r",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relations.equivp_implies_part_equivp",
     "equivp ?R ==> part_equivp ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Equiv_Relations.equivp_imp_transp", "equivp ?R ==> transp ?R",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Relations.conj_comm", "(?P \<and> ?Q) = (?Q \<and> ?P)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Relations.disj_comm", "(?P \<or> ?Q) = (?Q \<or> ?P)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Relations.conj_disj_abs", "(?P \<and> (?P \<or> ?Q)) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Relations.disj_conj_abs", "(?P \<or> ?P \<and> ?Q) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Relations.ndet_symm", "(?P \<or> ?Q) = (?Q \<or> ?P)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Equiv_Relations.equivp_reflp", "equivp ?R ==> ?R ?x ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_var 1, template_var 0), template_var 0)
           ))),
    ("Equiv_Relations.equivp_rtranclp", "symp ?r ==> equivp ?r^**",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Equiv_Relations.proj_image",
     "Equiv_Relations.proj ?r ` ?A = ?A // ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Relations.closure_p_eq_true", "(ALL A. ?P A) = (?P = true)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Equiv_Relations.equivclp_OO_equivclp_le_equivclp",
     "equivclp ?r OO equivclp ?r <= equivclp ?r",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Relations.not_dest", "(\<not> ?P) ?x ==> ~ ?P ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (template_app (template_var 1, template_var 0))
           ))),
    ("Relations.true_elim", "[| true ?x; ?C |] ==> ?C",
     template_implication
      ([template_predicate (template_app (template_hole 0, template_var 1)),
        template_predicate (template_var 0)],
       template_predicate (template_var 0))),
    ("Relations.equiv_eq1",
     "((?P \<longleftrightarrow> ?Q) = true) = (?P = ?Q)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 1, template_var 0))),
    ("Equiv_Relations.quotient_is_empty2", "({} = ?A // ?r) = (?A = {})",
     template_bimplication
      (template_equation
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_equation (template_var 1, template_hole 0))),
    ("Equiv_Relations.quotient_is_empty", "(?A // ?r = {}) = (?A = {})",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 1, template_hole 0))),
    ("Equiv_Relations.r_OO_conversep_into_equivclp",
     "?r^** OO ?r^--1^** <= equivclp ?r",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Equiv_Relations.equivp_vimage2p",
     "equivp ?R ==> equivp (BNF_Def.vimage2p ?f ?f ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 0),
               template_var 1))
           ))),
    ("Equiv_Relations.r_into_equivclp", "?r ?x ?y ==> equivclp ?r ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Equiv_Relations.converse_r_into_equivclp",
     "?r ?y ?x ==> equivclp ?r ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Relations.not_conj_deMorgans",
     "(\<not> (?P \<and> ?Q)) = (\<not> ?P \<or> \<not> ?Q)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Relations.not_disj_deMorgans",
     "(\<not> (?P \<or> ?Q)) = (\<not> ?P \<and> \<not> ?Q)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Relations.conj_disj_not_abs",
     "(?P \<and> (\<not> ?P \<or> ?Q)) = (?P \<and> ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Relations.cond_symm",
     "(?P \<triangleleft> ?b \<triangleright>  ?Q) =
      (?Q \<triangleleft> \<not> ?b \<triangleright>  ?P)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1)),
         template_var 2))),
    ("Relations.cond_know_b",
     "(?b \<and> (?P \<triangleleft> ?b \<triangleright>  ?Q)) =
      (?b \<and> ?P)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2), template_var 1))),
    ("Relations.comp_unit_L", "((%(A, A'). A = A') ;; ?P) = ?P",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0),
       template_var 0)),
    ("Relations.comp_unit_R", "(?P ;; (%(A, A'). A = A')) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, t_empty)),
       template_var 0)),
    ("Relations.closure_equiv_eq",
     "(ALL A. (?P \<longleftrightarrow> ?Q) A) = (?P = ?Q)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Relations.ex_intro", "?P ?a ?x ==> (\<^bold>\<exists>a. ?P a) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, t_empty), template_var 0)
           ))),
    ("Equiv_Relations.equivclp_sym",
     "equivclp ?r ?x ?y ==> equivclp ?r ?y ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Equiv_Relations.rtranclp_into_equivclp",
     "?r^** ?x ?y ==> equivclp ?r ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Equiv_Relations.converse_rtranclp_into_equivclp",
     "?r^** ?y ?x ==> equivclp ?r ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Relations.not_elim", "[| (\<not> ?P) ?x; ?P ?x |] ==> ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 2, template_var 1))],
       template_predicate (template_var 0))),
    ("Relations.all_idem",
     "(\<^bold>\<forall>b a. ?P a) = (\<^bold>\<forall>a. ?P a)",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 0, t_empty))),
    ("Relations.conj_assoc",
     "((?P \<and> ?Q) \<and> ?S) = (?P \<and> ?Q \<and> ?S)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Relations.disj_assoc",
     "((?P \<or> ?Q) \<or> ?S) = (?P \<or> ?Q \<or> ?S)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Relations.imp_imp",
     "(?P \<longrightarrow> ?Q \<longrightarrow> ?R) =
      (?P \<and> ?Q \<longrightarrow> ?R)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Relations.cond_ass_if",
     "(?P \<triangleleft> ?b \<triangleright>  ?Q) =
      (?b \<and> ?P \<triangleleft> ?b \<triangleright>  ?Q)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("Relations.ndet_assoc",
     "(?P \<or> ?Q \<or> ?R) = ((?P \<or> ?Q) \<or> ?R)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Relations.comp_assoc", "(?P ;; ?Q ;; ?R) = ((?P ;; ?Q) ;; ?R)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Equiv_Relations.equivp_reflp_symp_transp",
     "equivp ?R = (reflp ?R & symp ?R & transp ?R)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Equiv_Relations.Union_quotient",
     "equiv ?A ?r ==> \<Union> (?A // ?r) = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 1))),
    ("Equiv_Relations.equiv_comp_eq", "equiv ?A ?r ==> ?r^-1 O ?r = ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0),
         template_var 0))),
    ("Equiv_Relations.equiv_type", "equiv ?A ?r ==> ?r <= ?A \<times> ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Equiv_Relations.refl_on_comp_subset",
     "refl_on ?A ?r ==> ?r <= ?r^-1 O ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)))),
    ("Relations.not_intro", "(?P ?x ==> false ?x) ==> (\<not> ?P) ?x",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_var 1, template_var 0))],
          template_predicate
           (template_app (template_hole 1, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Relations.cond_ass_else",
     "(?P \<triangleleft> ?b \<triangleright>  ?Q) =
      (?P \<triangleleft> ?b \<triangleright>  \<not> ?b \<and> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Relations.not_cond",
     "(\<not> (?P \<triangleleft> ?b \<triangleright>  ?Q)) =
      (\<not> ?P \<triangleleft> ?b \<triangleright>  \<not> ?Q)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Relations.cond_L6",
     "(?P \<triangleleft> ?b \<triangleright> 
          (?Q \<triangleleft> ?b \<triangleright>  ?R)) =
      (?P \<triangleleft> ?b \<triangleright>  ?R)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_var 0))),
    ("Relations.cond_know_nb",
     "(\<not> ?b \<and> (?P \<triangleleft> ?b \<triangleright>  ?Q)) =
      (\<not> ?b \<and> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_var 0))),
    ("Equiv_Relations.equivp_equiv",
     "equiv UNIV ?A = equivp (%x y. (x, y) : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Relations.conj_subst", "?P = ?R ==> (?P \<and> ?Q) = (?R \<and> ?Q)",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Relations.disj_subst", "?P = ?R ==> (?P \<or> ?Q) = (?R \<or> ?Q)",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Equiv_Relations.proj_preserves",
     "?x : ?A ==> Equiv_Relations.proj ?r ?x : ?A // ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Relations.all_intro",
     "(!!a. ?P a ?x) ==> (\<^bold>\<forall>a. ?P a) ?x",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, t_empty), template_var 0)
           ))),
    ("Relations.impl_intro",
     "(?P ?x ==> ?Q ?x) ==> (?P \<longrightarrow> ?Q) ?x",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_var 2, template_var 1))],
          template_predicate
           (template_app (template_var 0, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Equiv_Relations.equivp_symp",
     "[| equivp ?R; ?R ?x ?y |] ==> ?R ?y ?x",
     template_implication
      ([template_predicate (template_app (template_hole 0, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 0), template_var 1)
           ))),
    ("Equiv_Relations.part_equivp_symp",
     "[| part_equivp ?R; ?R ?x ?y |] ==> ?R ?y ?x",
     template_implication
      ([template_predicate (template_app (template_hole 0, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 0), template_var 1)
           ))),
    ("Relations.conj_intro", "[| ?P ?x; ?Q ?x |] ==> (?P \<and> ?Q) ?x",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1)),
        template_predicate (template_app (template_var 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Relations.imp_trans",
     "((?P \<longrightarrow> ?Q) \<and>
       (?Q \<longrightarrow> ?R) \<longrightarrow>
       ?P \<longrightarrow> ?R) =
      true",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 2), template_var 0)),
       template_hole 0)),
    ("Relations.conj_disj_distr",
     "(?P \<and> (?Q \<or> ?R)) = (?P \<and> ?Q \<or> ?P \<and> ?R)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Relations.disj_conj_dsitr",
     "(?P \<or> ?Q \<and> ?R) = ((?P \<or> ?Q) \<and> (?P \<or> ?R))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Relations.comp_ndet_r_distr",
     "(?P ;; ?Q \<or> ?R) = ((?P ;; ?Q) \<or> (?P ;; ?R))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Relations.comp_ndet_l_distr",
     "(?P \<or> ?Q ;; ?R) = ((?P ;; ?R) \<or> (?Q ;; ?R))",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Relations.ndet_distr",
     "(?P \<or> ?Q \<or> ?R) = ((?P \<or> ?Q) \<or> ?P \<or> ?R)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Equiv_Relations.singleton_quotient", "{?x} // ?r = {?r `` {?x}}",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_hole 3)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3))),
         template_hole 0))),
    ("Relations.disj_introC", "(~ ?Q ?x ==> ?P ?x) ==> (?P \<or> ?Q) ?x",
     template_implication
      ([template_implication
         ([template_negation
            (
               template_predicate
                (template_app (template_var 2, template_var 1))
               )],
          template_predicate
           (template_app (template_var 0, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Relations.cond_L7",
     "(?P \<triangleleft> ?b \<triangleright> 
          (?P \<triangleleft> ?c \<triangleright>  ?Q)) =
      (?P \<triangleleft> ?b \<or> ?c \<triangleright>  ?Q)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Equiv_Relations.part_equivp_refl_symp_transp",
     "part_equivp ?R = ((EX x. ?R x x) & symp ?R & transp ?R)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Relations.cond_subst",
     "?b = ?c ==>
      (?P \<triangleleft> ?b \<triangleright>  ?Q) =
      (?P \<triangleleft> ?c \<triangleright>  ?Q)",
     template_implication
      ([template_equation (template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("Equiv_Relations.quotientI", "?x : ?A ==> ?r `` {?x} : ?A // ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Equiv_Relations.sym_trans_comp_subset",
     "[| sym ?r; trans ?r |] ==> ?r^-1 O ?r <= ?r",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0),
         template_var 0))),
    ("Equiv_Relations.equivpI",
     "[| reflp ?R; symp ?R; transp ?R |] ==> equivp ?R",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Relations.all_disj_distr",
     "((\<^bold>\<forall>x. ?P x) \<or> (\<^bold>\<forall>x. ?Q)) =
      (\<^bold>\<forall>x. ?P x \<or> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app (template_hole 0, t_empty)),
       template_app (template_hole 1, t_empty))),
    ("Relations.cond_conj_distr",
     "((?P \<triangleleft> ?b \<triangleright>  ?Q) \<and> ?R) =
      (?P \<and> ?R \<triangleleft> ?b \<triangleright>  ?Q \<and> ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Relations.ndet_cond_distr",
     "(?P \<or> (?Q \<triangleleft> ?b \<triangleright>  ?R)) =
      (?P \<or> ?Q \<triangleleft> ?b \<triangleright>  ?P \<or> ?R)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0)))),
    ("Relations.cond_disj_distr",
     "((?P \<triangleleft> ?b \<triangleright>  ?Q) \<or> ?R) =
      (?P \<or> ?R \<triangleleft> ?b \<triangleright>  ?Q \<or> ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Relations.imp_cond_distr",
     "(?R \<longrightarrow> (?P \<triangleleft> ?b \<triangleright>  ?Q)) =
      (?R \<longrightarrow> ?P \<triangleleft> ?b \<triangleright> 
          ?R \<longrightarrow> ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0)))),
    ("Relations.cond_imp_dist",
     "((?P \<triangleleft> ?b \<triangleright>  ?Q) \<longrightarrow> ?R) =
      (?P \<longrightarrow> ?R \<triangleleft> ?b \<triangleright> 
          ?Q \<longrightarrow> ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Relations.equiv_eq",
     "((?P \<and> ?Q \<or> \<not> ?P \<and> \<not> ?Q) = true) = (?P = ?Q)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_hole 0),
       template_equation (template_var 1, template_var 0))),
    ("Equiv_Relations.in_quotient_imp_subset",
     "[| equiv ?A ?r; ?X : ?A // ?r |] ==> ?X <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_inequation (less_equals, template_var 0, template_var 2))),
    ("Relations.cond_ndet_distr",
     "(?P \<triangleleft> ?b \<triangleright>  ?Q \<or> ?R) =
      ((?P \<triangleleft> ?b \<triangleright>  ?Q) \<or>
       (?P \<triangleleft> ?b \<triangleright>  ?R))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Relations.closure_conj_distr",
     "((ALL A. ?P A) & (ALL A. ?Q A)) = (ALL A. (?P \<and> ?Q) A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app (template_hole 1, t_empty)),
       template_app (template_hole 1, t_empty))),
    ("Relations.closure_imp_distr",
     "(ALL A. (?P \<longrightarrow> ?Q) A) -->
      (ALL A. ?P A) --> (ALL A. ?Q A)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_app (template_hole 1, t_empty)))
         )),
    ("Equiv_Relations.proj_in_iff",
     "equiv ?A ?r ==> (Equiv_Relations.proj ?r ?x : ?A // ?r) = (?x : ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Equiv_Relations.finite_quotient",
     "[| finite ?A; ?r <= ?A \<times> ?A |] ==> finite (?A // ?r)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 2, template_var 1), t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Equiv_Relations.in_quotient_imp_non_empty",
     "[| equiv ?A ?r; ?X : ?A // ?r |] ==> ?X ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Equiv_Relations.equivclp_trans",
     "[| equivclp ?r ?a ?b; equivclp ?r ?b ?c |] ==> equivclp ?r ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Relations.all_elim",
     "[| (\<^bold>\<forall>a. ?P a) ?x; ?P ?a ?x ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, t_empty), template_var 2)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_var 3, template_var 1),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.equivI",
     "[| refl_on ?A ?r; sym ?r; trans ?r |] ==> equiv ?A ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Relations.all_conj_distr",
     "((\<^bold>\<forall>x. ?P x) \<and> (\<^bold>\<forall>x. ?Q x)) =
      (\<^bold>\<forall>x. ?P x \<and> ?Q x)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, t_empty)),
         template_app (template_hole 0, t_empty)),
       template_app (template_hole 0, t_empty))),
    ("Relations.ex_disj_distr",
     "((\<^bold>\<exists>x. ?P x) \<or> (\<^bold>\<exists>x. ?Q x)) =
      (\<^bold>\<exists>x. ?P x \<or> ?Q x)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, t_empty)),
         template_app (template_hole 0, t_empty)),
       template_app (template_hole 0, t_empty))),
    ("Relations.cond_assoc",
     "(?P \<triangleleft> ?b \<triangleright> 
          ?Q \<triangleleft> ?c \<triangleright> 
          ?R) =
      (?P \<triangleleft> ?b \<and> ?c \<triangleright> 
          (?Q \<triangleleft> ?c \<triangleright>  ?R))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Equiv_Relations.congruentD",
     "[| ?f respects ?r; (?y, ?z) : ?r |] ==> ?f ?y = ?f ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_var 3)
            )],
       template_equation
        (template_app (template_var 2, template_var 1),
         template_app (template_var 2, template_var 0)))),
    ("Equiv_Relations.equiv_class_self",
     "[| equiv ?A ?r; ?a : ?A |] ==> ?a : ?r `` {?a}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("Equiv_Relations.comp_equivI",
     "[| ?r^-1 O ?r = ?r; Domain ?r = ?A |] ==> equiv ?A ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1)),
            template_var 1),
          template_var 1),
        template_equation
         (template_app (template_hole 1, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Equiv_Relations.equivp_transp",
     "[| equivp ?R; ?R ?x ?y; ?R ?y ?z |] ==> ?R ?x ?z",
     template_implication
      ([template_predicate (template_app (template_hole 0, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 3, template_var 2), template_var 0)
           ))),
    ("Equiv_Relations.part_equivp_transp",
     "[| part_equivp ?R; ?R ?x ?y; ?R ?y ?z |] ==> ?R ?x ?z",
     template_implication
      ([template_predicate (template_app (template_hole 0, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_var 3, template_var 2), template_var 0)
           ))),
    ("Equiv_Relations.part_equivpI",
     "[| EX x. ?R x x; symp ?R; transp ?R |] ==> part_equivp ?R",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Relations.cond_distr",
     "(?P \<triangleleft> ?b \<triangleright> 
          (?Q \<triangleleft> ?c \<triangleright>  ?R)) =
      (?P \<triangleleft> ?b \<triangleright> 
          ?Q \<triangleleft> ?c \<triangleright> 
          (?P \<triangleleft> ?b \<triangleright>  ?R))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 3),
           template_var 0)))),
    ("Relations.cond_and_distr",
     "(?P \<and> ?Q \<triangleleft> ?b \<triangleright>  ?R \<and> ?S) =
      ((?P \<triangleleft> ?b \<triangleright>  ?R) \<and>
       (?Q \<triangleleft> ?b \<triangleright>  ?S))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Relations.cond_or_distr",
     "(?P \<or> ?Q \<triangleleft> ?b \<triangleright>  ?R \<or> ?S) =
      ((?P \<triangleleft> ?b \<triangleright>  ?R) \<or>
       (?Q \<triangleleft> ?b \<triangleright>  ?S))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Relations.cond_eq_distr",
     "(?P \<longleftrightarrow> ?Q \<triangleleft> ?b \<triangleright> 
          ?R \<longleftrightarrow> ?S) =
      ((?P \<triangleleft> ?b \<triangleright>  ?R) \<longleftrightarrow>
       (?Q \<triangleleft> ?b \<triangleright>  ?S))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Relations.cond_imp_distr",
     "(?P \<longrightarrow> ?Q \<triangleleft> ?b \<triangleright> 
          ?R \<longrightarrow> ?S) =
      ((?P \<triangleleft> ?b \<triangleright>  ?R) \<longrightarrow>
       (?Q \<triangleleft> ?b \<triangleright>  ?S))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Relations.comp_intro",
     "[| ?P (?a, ?b); ?Q (?b, ?c) |] ==> (?P ;; ?Q) (?a, ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 4,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_var 1,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("Relations.conj_elim",
     "[| (?P \<and> ?Q) ?x; [| ?P ?x; ?Q ?x |] ==> ?C |] ==> ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 3, template_var 1))],
          template_implication
           ([template_predicate
              (template_app (template_var 2, template_var 1))],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Relations.ex_elim",
     "[| (\<^bold>\<exists>a. ?P a) ?x; !!a. ?P a ?x ==> ?Q |] ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.equivclp_into_equivclp",
     "[| equivclp ?r ?a ?b; ?r ?b ?c | ?r ?c ?b |] ==> equivclp ?r ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 0,
                template_app
                 (template_app (template_var 3, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_var 3, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Equiv_Relations.equivpE",
     "[| equivp ?R; [| reflp ?R; symp ?R; transp ?R |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_implication
         ([template_predicate
            (template_app (template_hole 2, template_var 1))],
          template_implication
           ([template_predicate
              (template_app (template_hole 1, template_var 1))],
            template_implication
             ([template_predicate
                (template_app (template_hole 0, template_var 1))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Relations.iff_intro",
     "[| ?P ?x ==> ?Q ?x; ?Q ?x ==> ?P ?x |]
      ==> (?P \<longleftrightarrow> ?Q) ?x",
     template_implication
      ([template_implication
         ([template_predicate
            (template_app (template_var 2, template_var 1))],
          template_predicate
           (template_app (template_var 0, template_var 1))),
        template_implication
         ([template_predicate
            (template_app (template_var 0, template_var 1))],
          template_predicate
           (template_app (template_var 2, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Equiv_Relations.congruent2_implies_congruent",
     "[| equiv ?A ?r1.0; congruent2 ?r1.0 ?r2.0 ?f; ?a : ?A |]
      ==> ?f ?a respects ?r2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app (template_var 1, template_var 0))
           ))),
    ("Relations.cond_conj_not_distr",
     "((?P \<triangleleft> ?b \<triangleright>  ?Q) \<and>
       \<not> (?R \<triangleleft> ?b \<triangleright>  ?S)) =
      (?P \<and> \<not> ?R \<triangleleft> ?b \<triangleright> 
          ?Q \<and> \<not> ?S)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 4),
               template_app (template_hole 0, template_var 1))),
           template_var 3),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("Relations.split_cond",
     "?A ((?P \<triangleleft> ?b \<triangleright>  ?Q) ?x) =
      ((?b ?x --> ?A (?P ?x)) & (~ ?b ?x --> ?A (?Q ?x)))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 2, template_var 0)),
             template_app
              (template_var 4,
               template_app (template_var 3, template_var 0)))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_var 2, template_var 0))),
           template_app
            (template_var 4,
             template_app (template_var 1, template_var 0)))))),
    ("Equiv_Relations.part_equivp_typedef",
     "part_equivp ?R ==> EX d. d : {c. EX x. ?R x x & c = Collect (?R x)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Equiv_Relations.congruentI",
     "(!!y z. (y, z) : ?r ==> ?f y = ?f z) ==> ?f respects ?r",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Equiv_Relations.card_quotient_disjoint",
     "[| finite ?A; inj_on (%x. {x} // ?r) ?A |]
      ==> card (?A // ?r) = card ?A",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty), template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Equiv_Relations.finite_equiv_class",
     "[| finite ?A; ?r <= ?A \<times> ?A; ?X : ?A // ?r |] ==> finite ?X",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 2, template_var 2), t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            )],
       template_predicate
        (template_app (template_hole 4, template_var 0)))),
    ("Relations.disj_elim",
     "[| (?P \<or> ?Q) ?x; ?P ?x ==> ?C; ?Q ?x ==> ?C |] ==> ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 3, template_var 1))],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (template_app (template_var 2, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.equivE",
     "[| equiv ?A ?r; [| refl_on ?A ?r; sym ?r; trans ?r |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (template_app (template_hole 1, template_var 1))],
            template_implication
             ([template_predicate
                (template_app (template_hole 0, template_var 1))],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.UN_constant_eq",
     "[| ?a : ?A; ALL y:?A. ?f y = ?c |] ==> \<Union> (?f ` ?A) = ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2)),
         template_var 0))),
    ("Relations.impl_elimC",
     "[| (?P \<longrightarrow> ?Q) ?x; ~ ?P ?x ==> ?R; ?Q ?x ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_negation
            (
               template_predicate
                (template_app (template_var 3, template_var 1))
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (template_app (template_var 2, template_var 1))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.disjnt_equiv_class",
     "equiv ?A ?r ==> disjnt (?r `` {?a}) (?r `` {?b}) = ((?a, ?b) ~: ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 3))),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3))),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2))))),
    ("Equiv_Relations.part_equivpE",
     "[| part_equivp ?R;
         !!x. [| ?R x x; symp ?R; transp ?R |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.equiv_class_eq",
     "[| equiv ?A ?r; (?a, ?b) : ?r |] ==> ?r `` {?a} = ?r `` {?b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Equiv_Relations.equiv_class_subset",
     "[| equiv ?A ?r; (?a, ?b) : ?r |] ==> ?r `` {?a} <= ?r `` {?b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Relations.split_cond_asm",
     "?A ((?P \<triangleleft> ?b \<triangleright>  ?Q) ?x) =
      (~ (?b ?x & ~ ?A (?P ?x) | ~ ?b ?x & ~ ?A (?Q ?x)))",
     template_equation
      (template_app
        (template_var 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 2, template_var 0)),
               template_app
                (template_hole 2,
                 template_app
                  (template_var 4,
                   template_app (template_var 3, template_var 0))))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 2,
                 template_app (template_var 2, template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_var 4,
                 template_app (template_var 1, template_var 0)))))))),
    ("Equiv_Relations.equiv_class_nondisjoint",
     "[| equiv ?A ?r; ?x : ?r `` {?a} Int ?r `` {?b} |] ==> (?a, ?b) : ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_app
                     (template_app (template_hole 3, template_var 1),
                      template_hole 2))),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_hole 2))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 3)
           ))),
    ("Equiv_Relations.finite_refines_finite",
     "[| finite (?A // ?R); ?R <= ?S; equiv ?A ?R; equiv ?A ?S |]
      ==> finite (?A // ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))
           ))),
    ("Relations.l2_5_1_A",
     "ALL X:?S.
         ALL A.
            (X \<longrightarrow> (%A. A : \<Union> {{p. P p} |P. P : ?S}))
             A",
     template_predicate
      (
         template_app
          (template_app (template_hole 10, template_var 0), t_empty)
         )),
    ("Equiv_Relations.in_quotient_imp_in_rel",
     "[| equiv ?A ?r; ?X : ?A // ?r; {?x, ?y} <= ?X |] ==> (?x, ?y) : ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 3)
           ))),
    ("Equiv_Relations.proj_iff",
     "[| equiv ?A ?r; {?x, ?y} <= ?A |]
      ==> (Equiv_Relations.proj ?r ?x = Equiv_Relations.proj ?r ?y) =
          ((?x, ?y) : ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_var 1),
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)),
          template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("Equiv_Relations.quotientE",
     "[| ?X : ?A // ?r; !!x. [| ?X = ?r `` {x}; x : ?A |] ==> ?P |] ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.refines_equiv_image_eq",
     "[| ?R <= ?S; equiv ?A ?R; equiv ?A ?S |]
      ==> (``) ?S ` ?A // ?R = ?A // ?S",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Equiv_Relations.congruent2D",
     "[| congruent2 ?r1.0 ?r2.0 ?f; (?y1.0, ?z1.0) : ?r1.0;
         (?y2.0, ?z2.0) : ?r2.0 |]
      ==> ?f ?y1.0 ?y2.0 = ?f ?z1.0 ?z2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_var 5)
            )],
       template_equation
        (template_app
          (template_app (template_var 4, template_var 3), template_var 1),
         template_app
          (template_app (template_var 4, template_var 2),
           template_var 0)))),
    ("Equiv_Relations.in_quotient_imp_closed",
     "[| equiv ?A ?r; ?X : ?A // ?r; ?x : ?X; (?x, ?y) : ?r |] ==> ?y : ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), template_var 2)
           ))),
    ("Relations.conj_comp",
     "(!!a b c. ?P (a, b) = ?P (a, c)) ==>
      (?P \<and> (?Q ;; ?R)) = (?P \<and> ?Q ;; ?R)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Equiv_Relations.equiv_imp_dvd_card",
     "[| finite ?A; equiv ?A ?r; !!X. X : ?A // ?r ==> ?k dvd card X |]
      ==> ?k dvd card ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Equiv_Relations.UN_equiv_class",
     "[| equiv ?A ?r; ?f respects ?r; ?a : ?A |]
      ==> \<Union> (?f ` ?r `` {?a}) = ?f ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))),
         template_app (template_var 1, template_var 0)))),
    ("Equiv_Relations.quotient_disj",
     "[| equiv ?A ?r; ?X : ?A // ?r; ?Y : ?A // ?r |]
      ==> ?X = ?Y | ?X Int ?Y = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_hole 0))
           ))),
    ("Equiv_Relations.subset_equiv_class",
     "[| equiv ?A ?r; ?r `` {?b} <= ?r `` {?a}; ?b : ?A |]
      ==> (?a, ?b) : ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)),
          template_app
           (template_app (template_hole 5, template_var 2),
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3))),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 2)
           ))),
    ("Equiv_Relations.refines_equiv_class_eq",
     "[| ?R <= ?S; equiv ?A ?R; equiv ?A ?S |]
      ==> ?R `` ?S `` {?a} = ?S `` {?a}",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Equiv_Relations.refines_equiv_class_eq2",
     "[| ?R <= ?S; equiv ?A ?R; equiv ?A ?S |]
      ==> ?S `` ?R `` {?a} = ?S `` {?a}",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Equiv_Relations.eq_equiv_class",
     "[| ?r `` {?a} = ?r `` {?b}; equiv ?A ?r; ?b : ?A |]
      ==> (?a, ?b) : ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 3),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_hole 4)),
          template_app
           (template_app (template_hole 6, template_var 3),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4))),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 3)
           ))),
    ("Equiv_Relations.equiv_class_eq_iff",
     "equiv ?A ?r ==>
      ((?x, ?y) : ?r) = (?r `` {?x} = ?r `` {?y} & ?x : ?A & ?y : ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0)),
                template_var 2)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 2),
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_hole 1))),
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_hole 1)))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)))
             )))),
    ("Equiv_Relations.finite_refines_card_le",
     "[| finite (?A // ?R); ?R <= ?S; equiv ?A ?R; equiv ?A ?S |]
      ==> card (?A // ?S) <= card (?A // ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1))))),
    ("Relations.iff_elimC",
     "[| (?P \<longleftrightarrow> ?Q) ?x; [| ?P ?x; ?Q ?x |] ==> ?R;
         [| ~ ?P ?x; ~ ?Q ?x |] ==> ?R |]
      ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate
            (template_app (template_var 3, template_var 1))],
          template_implication
           ([template_predicate
              (template_app (template_var 2, template_var 1))],
            template_predicate (template_var 0))),
        template_implication
         ([template_negation
            (
               template_predicate
                (template_app (template_var 3, template_var 1))
               )],
          template_implication
           ([template_negation
              (
                 template_predicate
                  (template_app (template_var 2, template_var 1))
                 )],
            template_predicate (template_var 0)))],
       template_predicate (template_var 0))),
    ("Relations.comp_cond_left_distr",
     "(!!x y z. ?b (x, y) = ?b (x, z)) ==>
      ((?P \<triangleleft> ?b \<triangleright>  ?Q) ;; ?R) =
      (?P ;; ?R \<triangleleft> ?b \<triangleright>  ?Q ;; ?R)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_var 3),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Equiv_Relations.quotient_diff1",
     "[| inj_on (%a. {a} // ?r) ?A; ?a : ?A |]
      ==> (?A - {?a}) // ?r = ?A // ?r - {?a} // ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty), template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4))),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4)),
             template_var 2))))),
    ("Equiv_Relations.eq_equiv_class_iff",
     "[| equiv ?A ?r; ?x : ?A; ?y : ?A |]
      ==> (?r `` {?x} = ?r `` {?y}) = ((?x, ?y) : ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2))),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("Equiv_Relations.eq_equiv_class_iff2",
     "[| equiv ?A ?r; ?x : ?A; ?y : ?A |]
      ==> ({?x} // ?r = {?y} // ?r) = ((?x, ?y) : ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2)),
               template_var 2)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("Relations.l2_5_1_2",
     "(ALL A.
          (?P \<longrightarrow> (%A. A : \<Inter> {{p. P p} |P. P : ?S}))
           A) =
      (ALL X:?S. ALL A. (?P \<longrightarrow> X) A)",
     template_equation
      (template_app (template_hole 10, t_empty),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Relations.l2_5_1",
     "(ALL A.
          ((%A. A : \<Union> {{p. P p} |P. P : ?S}) \<longrightarrow> ?P)
           A) =
      (ALL X:?S. ALL A. (X \<longrightarrow> ?P) A)",
     template_equation
      (template_app (template_hole 10, t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("Relations.l2_5_1_B",
     "(ALL X:?S. ALL A. (X \<longrightarrow> ?P) A) -->
      (ALL A.
          ((%A. A : \<Union> {{p. P p} |P. P : ?S}) \<longrightarrow> ?P)
           A)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 1), t_empty)),
           template_app (template_hole 9, t_empty))
         )),
    ("Equiv_Relations.congruent2I'",
     "(!!y1 z1 y2 z2.
          [| (y1, z1) : ?r1.0; (y2, z2) : ?r2.0 |]
          ==> ?f y1 y2 = ?f z1 z2) ==>
      congruent2 ?r1.0 ?r2.0 ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Relations.comp_elim",
     "[| (?P ;; ?Q) ?ac;
         !!a b c. [| ?ac = (a, c); ?P (a, b); ?Q (b, c) |] ==> ?C |]
      ==> ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Equiv_Relations.congruent2_implies_congruent_UN",
     "[| equiv ?A1.0 ?r1.0; equiv ?A2.0 ?r2.0; congruent2 ?r1.0 ?r2.0 ?f;
         ?a : ?A2.0 |]
      ==> (%x1. \<Union> (?f x1 ` ?r2.0 `` {?a})) respects ?r1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 4), t_empty)
           ))),
    ("Equiv_Relations.UN_equiv_class_type",
     "[| equiv ?A ?r; ?f respects ?r; ?X : ?A // ?r;
         !!x. x : ?A ==> ?f x : ?B |]
      ==> \<Union> (?f ` ?X) : ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 1))),
             template_var 0)
           ))),
    ("Equiv_Relations.quotient_eq_iff",
     "[| equiv ?A ?r; ?X : ?A // ?r; ?Y : ?A // ?r; ?x : ?X; ?y : ?Y |]
      ==> (?X = ?Y) = ((?x, ?y) : ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 4)))),
    ("Equiv_Relations.UN_UN_split_split_eq",
     "(UN (x1, x2):?X. UN (y1, y2):?Y. ?A x1 x2 y1 y2) =
      (UN x:?X.
          UN y:?Y.
             case x of (x1, x2) => case y of (y1, y2) => ?A x1 x2 y1 y2)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3, template_app (template_hole 2, t_empty)),
           template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)))),
    ("Equiv_Relations.equivclp_induct",
     "[| equivclp ?r ?a ?b; ?P ?a;
         !!y z. [| equivclp ?r ?a y; ?r y z | ?r z y; ?P y |] ==> ?P z |]
      ==> ?P ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 0, template_var 2)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Equiv_Relations.converse_equivclp_induct",
     "[| equivclp ?r ?a ?b; ?P ?b;
         !!y z. [| ?r y z | ?r z y; equivclp ?r z ?b; ?P z |] ==> ?P y |]
      ==> ?P ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_var 0, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("Equiv_Relations.quotient_eqI",
     "[| equiv ?A ?r; ?X : ?A // ?r; ?Y : ?A // ?r; ?x : ?X; ?y : ?Y;
         (?x, ?y) : ?r |]
      ==> ?X = ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_var 4)
            )],
       template_equation (template_var 3, template_var 2))),
    ("Equiv_Relations.sum_fun_comp",
     "[| finite ?S; finite ?R; ?g ` ?S <= ?R |]
      ==> (SUM x:?S. ?f (?g x)) =
          (SUM y:?R. of_nat (card {x: ?S. ?g x = y}) * ?f y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 3)),
        template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 10, template_var 1),
            template_var 3),
          template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 8, t_empty), template_var 3),
         template_app
          (template_app (template_hole 7, t_empty), template_var 2)))),
    ("Equiv_Relations.UN_equiv_class2",
     "[| equiv ?A1.0 ?r1.0; equiv ?A2.0 ?r2.0; congruent2 ?r1.0 ?r2.0 ?f;
         ?a1.0 : ?A1.0; ?a2.0 : ?A2.0 |]
      ==> (UN x1:?r1.0 `` {?a1.0}. \<Union> (?f x1 ` ?r2.0 `` {?a2.0})) =
          ?f ?a1.0 ?a2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 5),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_app (template_hole 2, template_var 5),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)))),
         template_app
          (template_app (template_var 2, template_var 1),
           template_var 0)))),
    ("Relations.l2_5_5",
     "(?Q ;; (%A. A : \<Union> {{p. P p} |P. P : ?S})) =
      (%A. A : \<Union> {{p. P p} |P. P : {?Q ;; P |P. P : ?S}})",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), t_empty),
       t_empty)),
    ("Relations.l2_5_4",
     "((%A. A : \<Union> {{p. P p} |P. P : ?S}) ;; ?Q) =
      (%A. A : \<Union> {{p. P p} |P. P : {P ;; ?Q |P. P : ?S}})",
     template_equation
      (template_app
        (template_app (template_hole 9, t_empty), template_var 0),
       t_empty)),
    ("Relations.l2_5_3",
     "((%A. A : \<Union> {{p. P p} |P. P : ?S}) \<and> ?Q) =
      (%A. A : \<Union> {{p. P p} |P. P : {P \<and> ?Q |P. P : ?S}})",
     template_equation
      (template_app
        (template_app (template_hole 9, t_empty), template_var 0),
       t_empty)),
    ("Relations.l2_5_2",
     "((%A. A : \<Inter> {{p. P p} |P. P : ?S}) \<or> ?Q) =
      (%A. A : \<Inter> {{p. P p} |P. P : {P \<or> ?Q |P. P : ?S}})",
     template_equation
      (template_app
        (template_app (template_hole 9, t_empty), template_var 0),
       t_empty)),
    ("Equiv_Relations.congruent2_commuteI",
     "[| equiv ?A ?r; !!y z. [| y : ?A; z : ?A |] ==> ?f y z = ?f z y;
         !!y z w. [| w : ?A; (y, z) : ?r |] ==> ?f w y = ?f w z |]
      ==> ?f respects2 ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1),
             template_var 0)
           ))),
    ("Equiv_Relations.UN_equiv_class_type2",
     "[| equiv ?A1.0 ?r1.0; equiv ?A2.0 ?r2.0; congruent2 ?r1.0 ?r2.0 ?f;
         ?X1.0 : ?A1.0 // ?r1.0; ?X2.0 : ?A2.0 // ?r2.0;
         !!x1 x2. [| x1 : ?A1.0; x2 : ?A2.0 |] ==> ?f x1 x2 : ?B |]
      ==> (UN x1:?X1.0. \<Union> (?f x1 ` ?X2.0)) : ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 6),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 7),
                template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_app (template_hole 8, template_var 5),
                template_var 4))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 2))),
             template_var 0)
           ))),
    ("Equiv_Relations.congruent2I",
     "[| equiv ?A1.0 ?r1.0; equiv ?A2.0 ?r2.0;
         !!y z w. [| w : ?A2.0; (y, z) : ?r1.0 |] ==> ?f y w = ?f z w;
         !!y z w. [| w : ?A1.0; (y, z) : ?r2.0 |] ==> ?f w y = ?f w z |]
      ==> congruent2 ?r1.0 ?r2.0 ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Equiv_Relations.UN_equiv_class_inject",
     "[| equiv ?A ?r; ?f respects ?r;
         \<Union> (?f ` ?X) = \<Union> (?f ` ?Y); ?X : ?A // ?r;
         ?Y : ?A // ?r;
         !!x y. [| x : ?A; y : ?A; ?f x = ?f y |] ==> (x, y) : ?r |]
      ==> ?X = ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, t_empty), template_var 1)),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, t_empty), template_var 0))),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.RelationsTemplates"
### 0.406s elapsed time, 0.530s cpu time, 0.068s GC time
val it = (): unit
