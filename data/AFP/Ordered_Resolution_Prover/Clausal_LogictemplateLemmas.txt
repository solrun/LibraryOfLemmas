   [("Clausal_Logic.finite_atms_of", "finite (atms_of ?C)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Clausal_Logic.uminus_not_id", "?x ~= - ?x",
     template_negation
      (
         template_equation
          (template_var 0, template_app (template_hole 0, template_var 0))
         )),
    ("Clausal_Logic.uminus_not_id'", "- ?x ~= ?x",
     template_negation
      (
         template_equation
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Clausal_Logic.uminus_of_uminus_id", "- (- ?x) = ?x",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Clausal_Logic.pos_less_neg", "Pos ?A < Neg ?A",
     template_inequation
      (less_than, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Clausal_Logic.pos_le_neg", "Pos ?A <= Neg ?A",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Clausal_Logic.atm_of_uminus", "atm_of (- ?L) = atm_of ?L",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Clausal_Logic.uminus_Neg", "- Neg ?A = Pos ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Clausal_Logic.uminus_Pos", "- Pos ?A = Neg ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Clausal_Logic.set_literal_atm_of", "set_literal ?L = {atm_of ?L}",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Clausal_Logic.is_pos_neg_not_is_pos", "is_pos (- ?L) = is_neg ?L",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Clausal_Logic.atms_empty_iff_empty", "(atms_of ?C = {}) = (?C = {#})",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Clausal_Logic.Pos_atm_of_iff", "(Pos (atm_of ?L) = ?L) = is_pos ?L",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Clausal_Logic.atms_of_singleton", "atms_of {#?L#} = {atm_of ?L}",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Clausal_Logic.atms_of_negs", "atms_of (negs ?AA) = set_mset ?AA",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Clausal_Logic.atms_of_poss", "atms_of (poss ?AA) = set_mset ?AA",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Clausal_Logic.uminus_lit_swap", "(?a = - ?b) = (- ?a = ?b)",
     template_bimplication
      (template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)),
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.Neg_atm_of_iff", "(Neg (atm_of ?L) = ?L) = is_neg ?L",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Clausal_Logic.uminus_eq_inj", "(- ?a = - ?b) = (?a = ?b)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Clausal_Logic.neg_less_neg_iff", "(Neg ?A < Neg ?B) = (?A < ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.neg_less_pos_iff", "(Neg ?A < Pos ?B) = (?A < ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.pos_less_neg_iff", "(Pos ?A < Neg ?B) = (?A <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.pos_less_pos_iff", "(Pos ?A < Pos ?B) = (?A < ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.neg_le_neg_iff", "(Neg ?A <= Neg ?B) = (?A <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.neg_le_pos_iff", "(Neg ?A <= Pos ?B) = (?A < ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.pos_le_neg_iff", "(Pos ?A <= Neg ?B) = (?A <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.pos_le_pos_iff", "(Pos ?A <= Pos ?B) = (?A <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.atms_of_plus",
     "atms_of (?C + ?D) = atms_of ?C Un atms_of ?D",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Clausal_Logic.atms_of_add_mset",
     "atms_of (add_mset ?a ?A) = insert (atm_of ?a) (atms_of ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Clausal_Logic.atms_of_union_mset",
     "atms_of (?A \<union># ?B) = atms_of ?A Un atms_of ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Clausal_Logic.leq_imp_less_eq_atm_of",
     "?L <= ?M ==> atm_of ?L <= atm_of ?M",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Clausal_Logic.atm_of_lit_in_atms_of",
     "?L :# ?C ==> atm_of ?L : atms_of ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Clausal_Logic.neg_lit_in_atms_of", "Neg ?A :# ?C ==> ?A : atms_of ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Clausal_Logic.pos_lit_in_atms_of", "Pos ?A :# ?C ==> ?A : atms_of ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Clausal_Logic.Max_in_lits", "?C ~= {#} ==> Max_mset ?C :# ?C",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Clausal_Logic.lits_subseteq_imp_atms_subseteq",
     "set_mset ?C <= set_mset ?D ==> atms_of ?C <= atms_of ?D",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Clausal_Logic.in_atms_of_minusD",
     "?x : atms_of (?A - ?B) ==> ?x : atms_of ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Clausal_Logic.ex_lit_cases",
     "(EX L. ?P L) = (EX A. ?P (Pos A) | ?P (Neg A))",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_hole 3, t_empty))),
    ("Clausal_Logic.atm_of_eq_atm_of",
     "(atm_of ?L = atm_of ?L') = (?L = ?L' | ?L = - ?L')",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Clausal_Logic.atm_of_Max_lit",
     "?C ~= {#} ==> atm_of (Max_mset ?C) = Max (atms_of ?C)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Clausal_Logic.pos_Max_imp_neg_notin",
     "Max_mset ?C = Pos ?A ==> Neg ?A ~:# ?C",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app (template_hole 4, template_var 1)),
          template_app (template_hole 3, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_app (template_hole 4, template_var 1))
               )
           ))),
    ("Clausal_Logic.atm_of_in_atm_of_set_iff_in_set_or_uminus_in_set",
     "(atm_of ?L : atm_of ` ?I) = (?L : ?I | - ?L : ?I)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 4),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Clausal_Logic.atm_iff_pos_or_neg_lit",
     "(?A : atms_of ?L) = (Pos ?A :# ?L | Neg ?A :# ?L)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("Clausal_Logic.Max_atm_of_set_mset_commute",
     "?C ~= {#} ==> Max (atm_of ` set_mset ?C) = atm_of (Max_mset ?C)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))))),
    ("Clausal_Logic.atm_imp_pos_or_neg_lit",
     "?A : atms_of ?C ==> Pos ?A :# ?C | Neg ?A :# ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Clausal_Logic.less_eq_Max_lit",
     "[| ?C ~= {#}; ?C <= ?D |] ==> Max_mset ?C <= Max_mset ?D",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Clausal_Logic.less_eq_Max_atms_of",
     "[| ?C ~= {#}; ?C <= ?D |] ==> Max (atms_of ?C) <= Max (atms_of ?D)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Clausal_Logic.Max_pos_neg_less_multiset",
     "[| Max_mset ?C = Pos ?A; Neg ?A :# ?D |] ==> ?C < ?D",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app (template_hole 4, template_var 2)),
          template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_inequation (less_than, template_var 2, template_var 0))),
    ("Clausal_Logic.Max_lit_eq_pos_or_neg_Max_atm",
     "?C ~= {#} ==>
      Max_mset ?C = Pos (Max (atms_of ?C)) |
      Max_mset ?C = Neg (Max (atms_of ?C))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 0))),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0))))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0))),
               template_app
                (template_hole 0,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)))))
           ))),
    ("Clausal_Logic.atms_less_imp_lit_less_pos",
     "[| !!B. B : atms_of ?C ==> B < ?A; ?L :# ?C |] ==> ?L < Pos ?A",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 2))
            )],
       template_inequation
        (less_than, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("Clausal_Logic.atms_less_eq_imp_lit_less_eq_neg",
     "[| !!B. B : atms_of ?C ==> B <= ?A; ?L :# ?C |] ==> ?L <= Neg ?A",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 2))
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("Clausal_Logic.le_multiset_Max_in_imp_Max",
     "[| Max (atms_of ?D) = ?A; ?C <= ?D; ?A : atms_of ?C |]
      ==> Max (atms_of ?C) = ?A",
     template_implication
      ([template_equation
         (template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 2)),
          template_var 1),
        template_inequation (less_equals, template_var 0, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_var 1)))]
