   [("Clausal_Logic.uminus_of_uminus_id", "- (- ?x) = ?x",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Clausal_Logic.atm_of_uminus", "atm_of (- ?L) = atm_of ?L",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Clausal_Logic.uminus_Neg", "- Neg ?A = Pos ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Clausal_Logic.uminus_Pos", "- Pos ?A = Neg ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Clausal_Logic.set_literal_atm_of", "set_literal ?L = {atm_of ?L}",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Clausal_Logic.is_pos_neg_not_is_pos", "is_pos (- ?L) = is_neg ?L",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Clausal_Logic.atms_empty_iff_empty", "(atms_of ?C = {}) = (?C = {#})",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Clausal_Logic.Pos_atm_of_iff", "(Pos (atm_of ?L) = ?L) = is_pos ?L",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Clausal_Logic.atms_of_singleton", "atms_of {#?L#} = {atm_of ?L}",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 0),
           template_hole 3)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Clausal_Logic.atms_of_negs", "atms_of (negs ?AA) = set_mset ?AA",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Clausal_Logic.atms_of_poss", "atms_of (poss ?AA) = set_mset ?AA",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Clausal_Logic.uminus_lit_swap", "(?a = - ?b) = (- ?a = ?b)",
     template_bimplication
      (template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)),
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.Neg_atm_of_iff", "(Neg (atm_of ?L) = ?L) = is_neg ?L",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Clausal_Logic.uminus_eq_inj", "(- ?a = - ?b) = (?a = ?b)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Clausal_Logic.neg_less_neg_iff", "(Neg ?A < Neg ?B) = (?A < ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.neg_less_pos_iff", "(Neg ?A < Pos ?B) = (?A < ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.pos_less_neg_iff", "(Pos ?A < Neg ?B) = (?A <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.pos_less_pos_iff", "(Pos ?A < Pos ?B) = (?A < ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.neg_le_neg_iff", "(Neg ?A <= Neg ?B) = (?A <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.neg_le_pos_iff", "(Neg ?A <= Pos ?B) = (?A < ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.pos_le_neg_iff", "(Pos ?A <= Neg ?B) = (?A <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.pos_le_pos_iff", "(Pos ?A <= Pos ?B) = (?A <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Clausal_Logic.atms_of_plus",
     "atms_of (?C + ?D) = atms_of ?C Un atms_of ?D",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Clausal_Logic.atms_of_add_mset",
     "atms_of (add_mset ?a ?A) = insert (atm_of ?a) (atms_of ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Clausal_Logic.atms_of_union_mset",
     "atms_of (?A \<union># ?B) = atms_of ?A Un atms_of ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Clausal_Logic.ex_lit_cases",
     "(EX L. ?P L) = (EX A. ?P (Pos A) | ?P (Neg A))",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_hole 3, t_empty))),
    ("Clausal_Logic.atm_of_eq_atm_of",
     "(atm_of ?L = atm_of ?L') = (?L = ?L' | ?L = - ?L')",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_dunno)),
    ("Clausal_Logic.atm_of_in_atm_of_set_iff_in_set_or_uminus_in_set",
     "(atm_of ?L : atm_of ` ?I) = (?L : ?I | - ?L : ?I)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 4),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Clausal_Logic.atm_iff_pos_or_neg_lit",
     "(?A : atms_of ?L) = (Pos ?A :# ?L | Neg ?A :# ?L)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 1, template_var 0)))))]
