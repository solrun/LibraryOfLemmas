   [("Conjugate.conjugate_square_smaller_0",
     "~ ?x * conjugate ?x < (0::?'a)",
     template_negation
      (
         template_inequation
          (less_than,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Conjugate.conjugate_square_eq_0",
     "(?x * conjugate ?x = (0::?'a)) = (?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Conjugate.conjugate_square_eq_0",
     "(conjugate ?x * ?x = (0::?'a)) = (?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Conjugate.conjugate_square_greater_0",
     "((0::?'a) < ?x * conjugate ?x) = (?x ~= (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_app (template_hole 2, template_var 0)))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 4)))),
    ("Conjugate.conjugate_square_0",
     "?a * conjugate ?a = (0::?'a) ==> ?a = (0::?'a)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 0),
            template_app (template_hole 1, template_var 0)),
          template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("Conjugate.sum_conjugate",
     "finite ?X ==> conjugate (sum ?f ?X) = (SUM x:?X. conjugate (?f x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1))))]
