Loading theory "Draft.Missing_Misc" (required by "Draft.Complexity_CarrierTemplates" via "Draft.Complexity_Carrier" via "Draft.Ring_Hom_Matrix" via "Draft.Matrix" via "Draft.Missing_Ring")
Loading theory "Draft.Conjugate" (required by "Draft.Complexity_CarrierTemplates" via "Draft.Complexity_Carrier" via "Draft.Ring_Hom_Matrix" via "Draft.Matrix")
Loading theory "Draft.Derivation_Bound" (required by "Draft.Complexity_CarrierTemplates" via "Draft.Complexity_Carrier")
Loading theory "Draft.Templates" (required by "Draft.Complexity_CarrierTemplates" via "Draft.ExtrEqs")
### theory "Draft.Derivation_Bound"
### 0.064s elapsed time, 0.297s cpu time, 0.000s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.312s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Complexity_CarrierTemplates")
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
### theory "Draft.Missing_Misc"
### 0.139s elapsed time, 0.477s cpu time, 0.042s GC time
Loading theory "Draft.Missing_Ring" (required by "Draft.Complexity_CarrierTemplates" via "Draft.Complexity_Carrier" via "Draft.Ring_Hom_Matrix" via "Draft.Matrix")
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.622s elapsed time, 1.779s cpu time, 0.193s GC time
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### theory "Draft.Conjugate"
### 2.663s elapsed time, 6.063s cpu time, 0.824s GC time
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Draft.Missing_Ring"
### 3.041s elapsed time, 6.092s cpu time, 0.810s GC time
Loading theory "Draft.Matrix" (required by "Draft.Complexity_CarrierTemplates" via "Draft.Complexity_Carrier" via "Draft.Ring_Hom_Matrix")
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
Found termination order: "{}"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
### theory "Draft.Matrix"
### 2.979s elapsed time, 3.488s cpu time, 0.814s GC time
Loading theory "Draft.Ring_Hom_Matrix" (required by "Draft.Complexity_CarrierTemplates" via "Draft.Complexity_Carrier")
locale ord_ring_hom
  fixes hom :: "'a => 'b"
  assumes "ord_ring_hom hom"
class real_embedding = linordered_idom +
  fixes real_of :: "'a => real"
  assumes "real_add": "!!x y. real_of (x + y) = real_of x + real_of y"
    and "real_mult": "!!x y. real_of (x * y) = real_of x * real_of y"
    and "real_zero": "real_of (0::'a) = 0"
    and "real_one": "real_of (1::'a) = 1"
    and "real_le": "!!x z. real_of x <= z ==> x <= of_int \<lceil>z\<rceil>"
instantiation
  real :: real_embedding
  real_of_real == real_of :: real => real
instantiation
  int :: real_embedding
  real_of_int == real_of :: int => real
instantiation
  rat :: real_embedding
  real_of_rat == real_of :: rat => real
### theory "Draft.Ring_Hom_Matrix"
### 1.527s elapsed time, 2.041s cpu time, 0.792s GC time
Loading theory "Draft.Complexity_Carrier" (required by "Draft.Complexity_CarrierTemplates")
locale complexity_one_mono_ordered_semiring_1
  fixes gt :: "'a => 'a => bool"  (infix \<open>\<succ>\<close> 50)
    and default :: "'a"
    and bound :: "'a => nat"
  assumes "complexity_one_mono_ordered_semiring_1 (\<succ>) default bound"
### theory "Draft.Complexity_Carrier"
### 1.875s elapsed time, 2.005s cpu time, 0.233s GC time
Loading theory "Draft.Complexity_CarrierTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Complexity_CarrierTemplates"
### 0.628s elapsed time, 0.804s cpu time, 0.102s GC time
val it = (): unit
