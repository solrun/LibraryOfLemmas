Loading theory "Draft.Missing_Misc" (required by "Draft.Strassen_AlgorithmTemplates" via "Draft.Strassen_Algorithm" via "Draft.Matrix" via "Draft.Missing_Ring")
Loading theory "Draft.Templates" (required by "Draft.Strassen_AlgorithmTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Conjugate" (required by "Draft.Strassen_AlgorithmTemplates" via "Draft.Strassen_Algorithm" via "Draft.Matrix")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.268s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Strassen_AlgorithmTemplates")
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
### theory "Draft.Missing_Misc"
### 0.138s elapsed time, 0.417s cpu time, 0.042s GC time
Loading theory "Draft.Missing_Ring" (required by "Draft.Strassen_AlgorithmTemplates" via "Draft.Strassen_Algorithm" via "Draft.Matrix")
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.619s elapsed time, 1.758s cpu time, 0.160s GC time
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### theory "Draft.Conjugate"
### 2.631s elapsed time, 5.904s cpu time, 0.702s GC time
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Draft.Missing_Ring"
### 3.000s elapsed time, 5.992s cpu time, 0.690s GC time
Loading theory "Draft.Matrix" (required by "Draft.Strassen_AlgorithmTemplates" via "Draft.Strassen_Algorithm")
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
Found termination order: "{}"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
### theory "Draft.Matrix"
### 2.948s elapsed time, 3.441s cpu time, 0.787s GC time
Loading theory "Draft.Strassen_Algorithm" (required by "Draft.Strassen_AlgorithmTemplates")
### theory "Draft.Strassen_Algorithm"
### 1.516s elapsed time, 2.047s cpu time, 0.799s GC time
Loading theory "Draft.Strassen_AlgorithmTemplates"
val templateLemmas =
   [("Strassen_Algorithm.strassen_measure_add",
     "strassen_measure (?A, - ?B) = strassen_measure (?A, ?B)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Strassen_Algorithm.strassen_measure_add",
     "strassen_measure (- ?A, ?B) = strassen_measure (?A, ?B)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Strassen_Algorithm.strassen_measure_add",
     "strassen_measure (?A, ?B - ?C) = strassen_measure (?A, ?C)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Strassen_Algorithm.strassen_measure_add",
     "strassen_measure (?A, ?B + ?C) = strassen_measure (?A, ?C)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Strassen_Algorithm.strassen_measure_add",
     "strassen_measure (?A - ?B, ?C) = strassen_measure (?B, ?C)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Strassen_Algorithm.strassen_measure_add",
     "strassen_measure (?A + ?B, ?C) = strassen_measure (?B, ?C)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Strassen_Algorithm.strassen_mat_mult",
     "dim_col ?A = dim_row ?B ==> strassen_mat_mult ?A ?B = ?A * ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Strassen_Algorithm.strassen_measure_div_2",
     "[| (?A1.0, ?A2.0, ?A3.0, ?A4.0) =
         split_block ?A (dim_row ?A div 2) (dim_col ?A div 2);
         (?B1.0, ?B2.0, ?B3.0, ?B4.0) =
         split_block ?B (dim_col ?A div 2) (dim_col ?B div 2);
         ~ strassen_too_small ?A ?B |]
      ==> strassen_measure (?A1.0, ?B2.0) < strassen_measure (?A, ?B)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 20, template_var 9),
            template_app
             (template_app (template_hole 19, template_var 8),
              template_app
               (template_app (template_hole 18, template_var 7),
                template_var 6))),
          template_app
           (template_app
             (template_app (template_hole 17, template_var 5),
              template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 5)),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 11, template_var 5)),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))))),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 4),
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))),
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 11, template_var 5)),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 5, template_var 0)),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 0)
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 9),
             template_var 3)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 5),
             template_var 0))))),
    ("Strassen_Algorithm.strassen_measure_div_2",
     "[| (?A1.0, ?A2.0, ?A3.0, ?A4.0) =
         split_block ?A (dim_row ?A div 2) (dim_col ?A div 2);
         (?B1.0, ?B2.0, ?B3.0, ?B4.0) =
         split_block ?B (dim_col ?A div 2) (dim_col ?B div 2);
         ~ strassen_too_small ?A ?B |]
      ==> strassen_measure (?A1.0, ?B4.0) < strassen_measure (?A, ?B)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 20, template_var 9),
            template_app
             (template_app (template_hole 19, template_var 8),
              template_app
               (template_app (template_hole 18, template_var 7),
                template_var 6))),
          template_app
           (template_app
             (template_app (template_hole 17, template_var 5),
              template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 5)),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 11, template_var 5)),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))))),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 4),
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))),
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 11, template_var 5)),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 5, template_var 0)),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 0)
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 9),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 5),
             template_var 0))))),
    ("Strassen_Algorithm.strassen_measure_div_2",
     "[| (?A1.0, ?A2.0, ?A3.0, ?A4.0) =
         split_block ?A (dim_row ?A div 2) (dim_col ?A div 2);
         (?B1.0, ?B2.0, ?B3.0, ?B4.0) =
         split_block ?B (dim_col ?A div 2) (dim_col ?B div 2);
         ~ strassen_too_small ?A ?B |]
      ==> strassen_measure (?A2.0, ?B4.0) < strassen_measure (?A, ?B)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 20, template_var 9),
            template_app
             (template_app (template_hole 19, template_var 8),
              template_app
               (template_app (template_hole 18, template_var 7),
                template_var 6))),
          template_app
           (template_app
             (template_app (template_hole 17, template_var 5),
              template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 5)),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 11, template_var 5)),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))))),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 4),
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))),
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 11, template_var 5)),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 5, template_var 0)),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 0)
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 8),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 5),
             template_var 0))))),
    ("Strassen_Algorithm.strassen_measure_div_2",
     "[| (?A1.0, ?A2.0, ?A3.0, ?A4.0) =
         split_block ?A (dim_row ?A div 2) (dim_col ?A div 2);
         (?B1.0, ?B2.0, ?B3.0, ?B4.0) =
         split_block ?B (dim_col ?A div 2) (dim_col ?B div 2);
         ~ strassen_too_small ?A ?B |]
      ==> strassen_measure (?A3.0, ?B2.0) < strassen_measure (?A, ?B)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 20, template_var 9),
            template_app
             (template_app (template_hole 19, template_var 8),
              template_app
               (template_app (template_hole 18, template_var 7),
                template_var 6))),
          template_app
           (template_app
             (template_app (template_hole 17, template_var 5),
              template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 5)),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 11, template_var 5)),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))))),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 4),
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))),
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 11, template_var 5)),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 5, template_var 0)),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 0)
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 7),
             template_var 3)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 5),
             template_var 0))))),
    ("Strassen_Algorithm.strassen_measure_div_2",
     "[| (?A1.0, ?A2.0, ?A3.0, ?A4.0) =
         split_block ?A (dim_row ?A div 2) (dim_col ?A div 2);
         (?B1.0, ?B2.0, ?B3.0, ?B4.0) =
         split_block ?B (dim_col ?A div 2) (dim_col ?B div 2);
         ~ strassen_too_small ?A ?B |]
      ==> strassen_measure (?A4.0, ?B1.0) < strassen_measure (?A, ?B)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 20, template_var 9),
            template_app
             (template_app (template_hole 19, template_var 8),
              template_app
               (template_app (template_hole 18, template_var 7),
                template_var 6))),
          template_app
           (template_app
             (template_app (template_hole 17, template_var 5),
              template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 5)),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 11, template_var 5)),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))))),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 4),
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))),
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 11, template_var 5)),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 5, template_var 0)),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 0)
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 6),
             template_var 4)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 5),
             template_var 0))))),
    ("Strassen_Algorithm.strassen_measure_div_2",
     "[| (?A1.0, ?A2.0, ?A3.0, ?A4.0) =
         split_block ?A (dim_row ?A div 2) (dim_col ?A div 2);
         (?B1.0, ?B2.0, ?B3.0, ?B4.0) =
         split_block ?B (dim_col ?A div 2) (dim_col ?B div 2);
         ~ strassen_too_small ?A ?B |]
      ==> strassen_measure (?A4.0, ?B3.0) < strassen_measure (?A, ?B)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 20, template_var 9),
            template_app
             (template_app (template_hole 19, template_var 8),
              template_app
               (template_app (template_hole 18, template_var 7),
                template_var 6))),
          template_app
           (template_app
             (template_app (template_hole 17, template_var 5),
              template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 5)),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 11, template_var 5)),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))))),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 4),
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))),
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 11, template_var 5)),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 5, template_var 0)),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 0)
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 6),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 5),
             template_var 0))))),
    ("Strassen_Algorithm.strassen_measure_div_2",
     "[| (?A1.0, ?A2.0, ?A3.0, ?A4.0) =
         split_block ?A (dim_row ?A div 2) (dim_col ?A div 2);
         (?B1.0, ?B2.0, ?B3.0, ?B4.0) =
         split_block ?B (dim_col ?A div 2) (dim_col ?B div 2);
         ~ strassen_too_small ?A ?B |]
      ==> strassen_measure (?A4.0, ?B4.0) < strassen_measure (?A, ?B)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 20, template_var 9),
            template_app
             (template_app (template_hole 19, template_var 8),
              template_app
               (template_app (template_hole 18, template_var 7),
                template_var 6))),
          template_app
           (template_app
             (template_app (template_hole 17, template_var 5),
              template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 15, template_var 5)),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 11, template_var 5)),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))))),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 4),
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))),
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 11, template_var 5)),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 5, template_var 0)),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 0)
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 6),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 5),
             template_var 0))))),
    ("Strassen_Algorithm.strassen_measure_odd",
     "[| (?A1.0, ?A2.0, ?A3.0, ?A4.0) =
         split_block ?A (dim_row ?A div 2 * 2) (dim_col ?A div 2 * 2);
         (?B1.0, ?B2.0, ?B3.0, ?B4.0) =
         split_block ?B (dim_col ?A div 2 * 2) (dim_col ?B div 2 * 2);
         ~ strassen_even ?A ?B |]
      ==> strassen_measure (?A1.0, ?B1.0) < strassen_measure (?A, ?B)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 21, template_var 9),
            template_app
             (template_app (template_hole 20, template_var 8),
              template_app
               (template_app (template_hole 19, template_var 7),
                template_var 6))),
          template_app
           (template_app
             (template_app (template_hole 18, template_var 5),
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app
                     (template_hole 16,
                      template_app (template_hole 15, template_var 5)),
                    template_app
                     (template_hole 14,
                      template_app (template_hole 13, template_hole 12)))),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_hole 16,
                    template_app (template_hole 11, template_var 5)),
                  template_app
                   (template_hole 14,
                    template_app (template_hole 13, template_hole 12)))),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))))),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 4),
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))),
          template_app
           (template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app
                     (template_hole 16,
                      template_app (template_hole 11, template_var 5)),
                    template_app
                     (template_hole 14,
                      template_app (template_hole 13, template_hole 12)))),
                template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_hole 12)))),
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_hole 16,
                    template_app (template_hole 5, template_var 0)),
                  template_app
                   (template_hole 14,
                    template_app (template_hole 13, template_hole 12)))),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_hole 12))))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 0)
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 9),
             template_var 4)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 5),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.Strassen_AlgorithmTemplates"
### 0.525s elapsed time, 0.684s cpu time, 0.110s GC time
val it = (): unit
