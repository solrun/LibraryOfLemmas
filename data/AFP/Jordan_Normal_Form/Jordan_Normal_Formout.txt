Loading theory "Draft.Missing_Misc" (required by "Draft.Jordan_Normal_FormTemplates" via "Draft.Jordan_Normal_Form" via "Draft.Matrix" via "Draft.Missing_Ring")
Loading theory "Draft.Conjugate" (required by "Draft.Jordan_Normal_FormTemplates" via "Draft.Jordan_Normal_Form" via "Draft.Matrix")
Loading theory "Draft.Templates" (required by "Draft.Jordan_Normal_FormTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.233s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Jordan_Normal_FormTemplates")
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
### theory "Draft.Missing_Misc"
### 0.131s elapsed time, 0.387s cpu time, 0.041s GC time
Loading theory "Draft.Missing_Ring" (required by "Draft.Jordan_Normal_FormTemplates" via "Draft.Jordan_Normal_Form" via "Draft.Matrix")
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.581s elapsed time, 1.648s cpu time, 0.152s GC time
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### theory "Draft.Conjugate"
### 2.589s elapsed time, 5.760s cpu time, 0.697s GC time
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Draft.Missing_Ring"
### 2.967s elapsed time, 5.879s cpu time, 0.689s GC time
Loading theory "Draft.Matrix" (required by "Draft.Jordan_Normal_FormTemplates" via "Draft.Jordan_Normal_Form")
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
Found termination order: "{}"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
### theory "Draft.Matrix"
### 2.958s elapsed time, 3.460s cpu time, 0.812s GC time
Loading theory "Draft.Gauss_Jordan_Elimination" (required by "Draft.Jordan_Normal_FormTemplates" via "Draft.Jordan_Normal_Form" via "Draft.Char_Poly" via "Draft.Determinant" via "Draft.Column_Operations")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
### theory "Draft.Gauss_Jordan_Elimination"
### 1.112s elapsed time, 1.688s cpu time, 0.838s GC time
Loading theory "Draft.Column_Operations" (required by "Draft.Jordan_Normal_FormTemplates" via "Draft.Jordan_Normal_Form" via "Draft.Char_Poly" via "Draft.Determinant")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Column_Operations"
### 0.364s elapsed time, 0.407s cpu time, 0.072s GC time
Loading theory "Draft.Determinant" (required by "Draft.Jordan_Normal_FormTemplates" via "Draft.Jordan_Normal_Form" via "Draft.Char_Poly")
### theory "Draft.Determinant"
### 1.114s elapsed time, 1.261s cpu time, 0.232s GC time
Loading theory "Draft.Char_Poly" (required by "Draft.Jordan_Normal_FormTemplates" via "Draft.Jordan_Normal_Form")
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
### theory "Draft.Char_Poly"
### 0.716s elapsed time, 0.799s cpu time, 0.129s GC time
Loading theory "Draft.Jordan_Normal_Form" (required by "Draft.Jordan_Normal_FormTemplates")
### theory "Draft.Jordan_Normal_Form"
### 0.499s elapsed time, 1.214s cpu time, 1.008s GC time
Loading theory "Draft.Jordan_Normal_FormTemplates"
val templateLemmas =
   [("Jordan_Normal_Form.jordan_block_index",
     "dim_col (jordan_block ?n ?k) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Jordan_Normal_Form.jordan_block_index",
     "dim_row (jordan_block ?n ?k) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Jordan_Normal_Form.jordan_block_carrier",
     "jordan_block ?n ?k : carrier_mat ?n ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 1))
         )),
    ("Jordan_Normal_Form.jordan_matrix_dim",
     "dim_col (jordan_matrix ?n_as) = sum_list (map fst ?n_as)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Jordan_Normal_Form.jordan_matrix_dim",
     "dim_row (jordan_matrix ?n_as) = sum_list (map fst ?n_as)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Jordan_Normal_Form.jordan_block_pow_dim",
     "dim_col (jordan_block ?n ?a ^\<^sub>m ?r) = ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_var 2)),
    ("Jordan_Normal_Form.jordan_block_pow_dim",
     "dim_row (jordan_block ?n ?a ^\<^sub>m ?r) = ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_var 2)),
    ("Jordan_Normal_Form.jordan_matrix_concat_diag_block_mat",
     "jordan_matrix (concat ?jbs) =
      diag_block_mat (map jordan_matrix ?jbs)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 3),
           template_var 0)))),
    ("Jordan_Normal_Form.jordan_block_pow_carrier",
     "jordan_block ?n ?a ^\<^sub>m ?r : carrier_mat ?n ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 2))
         )),
    ("Jordan_Normal_Form.char_matrix_jordan_block",
     "char_matrix (jordan_block ?n ?a) ?b = jordan_block ?n (?a - ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Jordan_Normal_Form.diag_jordan_block_pow",
     "diag_mat (jordan_block ?n ?a ^\<^sub>m ?k) = replicate ?n (?a ^ ?k)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Jordan_Normal_Form.jordan_matrix_carrier",
     "jordan_matrix ?n_as
      : carrier_mat (sum_list (map fst ?n_as)) (sum_list (map fst ?n_as))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))))
         )),
    ("Jordan_Normal_Form.jordan_block_char_poly",
     "char_poly (jordan_block ?n ?a) = [:- ?a, 1::?'a:] ^ ?n",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 3, template_hole 1),
               template_hole 0))),
         template_var 1))),
    ("Jordan_Normal_Form.norm_bound_bridge",
     "ALL e:elements_mat ?A. norm e <= ?b ==> norm_bound ?A ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Jordan_Normal_Form.choose_poly_bound",
     "?i <= ?d ==> ?r choose ?i <= max 1 (?r ^ ?d)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Jordan_Normal_Form.jordan_matrix_pow",
     "jordan_matrix ?n_as ^\<^sub>m ?r =
      diag_block_mat (map (%(n, a). jordan_block n a ^\<^sub>m ?r) ?n_as)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 1)))),
    ("Jordan_Normal_Form.jordan_matrix_char_poly",
     "char_poly (jordan_matrix ?n_as) =
      (PROD (n, a)<-?n_as. [:- a, 1::?'a:] ^ n)",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, template_var 0)),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_var 0)))),
    ("Jordan_Normal_Form.jordan_nf_block_size_order_bound",
     "[| jordan_nf ?A ?n_as; (?n, ?a) : set ?n_as |]
      ==> ?n <= order ?a (char_poly ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app (template_hole 3, template_var 2))
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 3))))),
    ("Jordan_Normal_Form.jordan_nf_order",
     "jordan_nf ?A ?n_as ==>
      order ?a (char_poly ?A) =
      sum_list (map fst (filter (%na. snd na = ?a) ?n_as))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0),
           template_app (template_hole 6, template_var 2)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, t_empty),
               template_var 1)))))),
    ("Jordan_Normal_Form.jordan_matrix_upper_triangular",
     "[| ?i < sum_list (map fst ?n_as); ?j < ?i |]
      ==> jordan_matrix ?n_as $$ (?i, ?j) = (0::?'a)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 1))),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_hole 0))),
    ("Jordan_Normal_Form.jordan_nf_char_poly",
     "jordan_nf ?A ?n_as ==>
      char_poly ?A = (PROD (n, a)<-?n_as. [:- a, 1::?'a:] ^ n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 8, template_var 1),
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_var 0))))),
    ("Jordan_Normal_Form.similar_mat_jordan_matrix_smult",
     "?k ~= (0::?'a) ==>
      similar_mat (?k \<cdot>\<^sub>m jordan_matrix ?n_as)
       (jordan_matrix (map (%(n, a). (n, ?k * a)) ?n_as))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app (template_hole 4, template_var 0))),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, t_empty)),
                 template_var 0)))
           ))),
    ("Jordan_Normal_Form.similar_mat_jordan_block_smult",
     "[| similar_mat ?A (jordan_block ?n ?a); ?k ~= (0::?'a) |]
      ==> similar_mat (?k \<cdot>\<^sub>m ?A) (jordan_block ?n (?k * ?a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 3)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Jordan_Normal_Form.jordan_block_zero_pow",
     "jordan_block ?n (0::?'a) ^\<^sub>m ?k =
      mat ?n ?n
       (%(i, j). if i <= j & j - i = ?k then 1::?'a else (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 1),
             template_hole 8)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 7, template_var 1), template_var 1),
         template_app (template_hole 6, t_empty)))),
    ("Jordan_Normal_Form.jordan_matrix_Cons",
     "jordan_matrix ((?n, ?a) # ?n_as) =
      four_block_mat (jordan_block ?n ?a)
       (0\<^sub>m ?n (sum_list (map fst ?n_as)))
       (0\<^sub>m (sum_list (map fst ?n_as)) ?n) (jordan_matrix ?n_as)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0))),
             template_var 2)),
         template_app (template_hole 8, template_var 0)))),
    ("Jordan_Normal_Form.jordan_nf_smult",
     "[| jordan_nf ?A ?n_as; ?k ~= (0::?'a) |]
      ==> jordan_nf (?k \<cdot>\<^sub>m ?A)
           (map (%(n, a). (n, ?k * a)) ?n_as)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_var 1))
           ))),
    ("Jordan_Normal_Form.jordan_nf_diag_block_mat",
     "(!!A jbs. (A, jbs) : set ?Ms ==> jordan_nf A jbs) ==>
      jordan_nf (diag_block_mat (map fst ?Ms)) (concat (map snd ?Ms))",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)))
           ))),
    ("Jordan_Normal_Form.poly_exp_constant_bound",
     "[| (0::?'a) < ?b; ?b < (1::?'a) |]
      ==> EX p. ALL x. ?c * ?b ^ x * of_nat x ^ ?deg <= p",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2),
        template_inequation (less_than, template_var 2, template_hole 6)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Jordan_Normal_Form.norm_bound_max",
     "norm_bound ?A
       (Max {norm (?A $$ (i, j)) |i j. i < dim_row ?A & j < dim_col ?A})",
     template_predicate
      (
         template_app
          (template_app (template_hole 11, template_var 0),
           template_app
            (template_hole 10, template_app (template_hole 9, t_empty)))
         )),
    ("Jordan_Normal_Form.poly_exp_max_constant_bound",
     "[| (0::?'a) < ?b; ?b < (1::?'a) |]
      ==> EX p. ALL x. ?c * ?b ^ x * max (1::?'a) (of_nat x ^ ?deg) <= p",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2),
        template_inequation (less_than, template_var 2, template_hole 7)],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Jordan_Normal_Form.norm_boundI",
     "(!!i j.
          [| i < dim_row ?A; j < dim_col ?A |]
          ==> norm (?A $$ (i, j)) <= ?b) ==>
      norm_bound ?A ?b",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Jordan_Normal_Form.jordan_block_index",
     "[| ?i < ?n; ?j < ?n |]
      ==> jordan_block ?n ?a $$ (?i, ?j) =
          (if ?i = ?j then ?a
           else if Suc ?i = ?j then 1::?'a else (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 0)),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 1))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 1)),
                 template_var 0),
               template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 3)),
                       template_var 1)),
                   template_hole 1),
                 template_hole 0))
             )))),
    ("Jordan_Normal_Form.jordan_block_pow",
     "jordan_block ?n ?a ^\<^sub>m ?r =
      mat ?n ?n
       (%(i, j).
           if i <= j then of_nat (?r choose (j - i)) * ?a ^ (?r + i - j)
           else (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 10, template_var 2), template_var 2),
         template_app (template_hole 9, t_empty)))),
    ("Jordan_Normal_Form.jordan_block_constant_bound2",
     "EX p. norm ?a < 1 -->
            (ALL i j k.
                i < ?n -->
                j < ?n -->
                norm ((jordan_block ?n ?a ^\<^sub>m k) $$ (i, j)) <= p)",
     template_predicate (template_app (template_hole 11, t_empty))),
    ("Jordan_Normal_Form.jordan_block_constant_bound",
     "norm ?a < 1 ==>
      EX p. ALL i j k.
               i < ?n -->
               j < ?n -->
               norm ((jordan_block ?n ?a ^\<^sub>m k) $$ (i, j)) <= p",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 10, template_var 1),
          template_hole 9)],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Jordan_Normal_Form.norm_bound_mult",
     "[| ?A1.0 : carrier_mat ?nr ?n; ?A2.0 : carrier_mat ?n ?nc;
         norm_bound ?A1.0 ?b1.0; norm_bound ?A2.0 ?b2.0 |]
      ==> norm_bound (?A1.0 * ?A2.0) (?b1.0 * ?b2.0 * real ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 6),
              template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 4),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 6),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_app (template_hole 0, template_var 4)))
           ))),
    ("Jordan_Normal_Form.jordan_block_poly_bound",
     "[| ?i < ?n; ?j < ?n; norm ?a = 1 |]
      ==> norm ((jordan_block ?n ?a ^\<^sub>m ?k) $$ (?i, ?j))
          <= max 1 (real ?k ^ (?n - 1))",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_inequation (less_than, template_var 2, template_var 3),
        template_equation
         (template_app (template_hole 11, template_var 1),
          template_hole 10)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 1)),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_var 2))),
         template_app
          (template_app (template_hole 4, template_hole 10),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_hole 0)))))),
    ("Jordan_Normal_Form.jordan_block_bound",
     "[| ?i < ?n; ?j < ?n |]
      ==> norm ((jordan_block ?n ?a ^\<^sub>m ?k) $$ (?i, ?j))
          <= norm ?a ^ (?k + ?i - ?j) * max 1 (real ?k ^ (?n - 1))",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_inequation (less_than, template_var 2, template_var 3)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 12,
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 3),
                     template_var 1)),
                 template_var 0)),
             template_app
              (template_app (template_hole 8, template_var 4),
               template_var 2))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 12, template_var 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 4)),
                 template_var 2))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 0)),
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_hole 0))))))),
    ("Jordan_Normal_Form.jordan_matrix_poly_bound",
     "[| !!n a. [| (n, a) : set ?n_as; 0 < n |] ==> norm a <= 1;
         !!n a. [| (n, a) : set ?n_as; norm a = 1 |] ==> n <= ?N |]
      ==> EX c1.
             ALL k.
                norm_bound (jordan_matrix ?n_as ^\<^sub>m k)
                 (c1 + real k ^ (?N - 1))",
     template_implication
      ([template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Jordan_Normal_Form.jordan_matrix_poly_bound2",
     "[| !!n a. [| (n, a) : set ?n_as; 0 < n |] ==> norm a <= 1;
         !!n a. [| (n, a) : set ?n_as; norm a = 1 |] ==> n <= ?N |]
      ==> EX c1.
             ALL k.
                ALL e:elements_mat (jordan_matrix ?n_as ^\<^sub>m k).
                   norm e <= c1 + real k ^ (?N - 1)",
     template_implication
      ([template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate (template_app (template_hole 23, t_empty))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Jordan_Normal_Form.jordan_nf_powE",
     "[| ?A : carrier_mat ?n ?n; jordan_nf ?A ?n_as;
         !!P Q.
            [| P : carrier_mat ?n ?n; Q : carrier_mat ?n ?n;
               char_poly ?A = (PROD (na, a)<-?n_as. [:- a, 1::?'a:] ^ na);
               !!k. ?A ^\<^sub>m k =
                    P * jordan_matrix ?n_as ^\<^sub>m k * Q |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 3),
              template_app
               (template_app (template_hole 17, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 3),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate (template_var 0))),
    ("Jordan_Normal_Form.jordan_nf_matrix_poly_bound",
     "[| ?A : carrier_mat ?n ?n;
         !!n a. [| (n, a) : set ?n_as; 0 < n |] ==> norm a <= 1;
         !!n a. [| (n, a) : set ?n_as; norm a = 1 |] ==> n <= ?N;
         jordan_nf ?A ?n_as |]
      ==> EX c1 c2.
             ALL k.
                norm_bound (?A ^\<^sub>m k) (c1 + c2 * real k ^ (?N - 1))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 3),
              template_app
               (template_app (template_hole 23, template_var 2),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Jordan_Normal_Form.factored_char_poly_norm_bound",
     "[| ?A : carrier_mat ?n ?n;
         char_poly ?A = (PROD a<-?as. [:- a, 1::?'a:]);
         EX n_as. jordan_nf ?A n_as; !!a. a : set ?as ==> norm a <= 1;
         !!a. [| a : set ?as; norm a = 1 |]
              ==> length (filter ((=) a) ?as) <= ?N |]
      ==> EX c1 c2.
             ALL k.
                norm_bound (?A ^\<^sub>m k) (c1 + c2 * real k ^ (?N - 1))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 32, template_var 3),
              template_app
               (template_app (template_hole 31, template_var 2),
                template_var 2))
            ),
        template_equation
         (template_app (template_hole 29, template_var 3),
          template_app
           (template_hole 28,
            template_app
             (template_app (template_hole 27, t_empty), template_var 1))),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_predicate (template_app (template_hole 9, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Jordan_Normal_FormTemplates"
### 0.773s elapsed time, 1.012s cpu time, 0.182s GC time
val it = (): unit
