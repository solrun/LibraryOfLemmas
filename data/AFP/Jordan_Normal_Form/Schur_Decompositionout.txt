Loading theory "Draft.Conjugate" (required by "Draft.Schur_DecompositionTemplates" via "Draft.Schur_Decomposition" via "Draft.Gram_Schmidt" via "Draft.VS_Connect" via "Draft.Matrix")
Loading theory "Draft.Missing_Misc" (required by "Draft.Schur_DecompositionTemplates" via "Draft.Schur_Decomposition" via "Draft.Gram_Schmidt" via "Draft.VS_Connect" via "Draft.Matrix" via "Draft.Missing_Ring")
Loading theory "Draft.Templates" (required by "Draft.Schur_DecompositionTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.187s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Schur_DecompositionTemplates")
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
### theory "Draft.Missing_Misc"
### 0.122s elapsed time, 0.396s cpu time, 0.000s GC time
Loading theory "Draft.Missing_Ring" (required by "Draft.Schur_DecompositionTemplates" via "Draft.Schur_Decomposition" via "Draft.Gram_Schmidt" via "Draft.VS_Connect" via "Draft.Matrix")
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.630s elapsed time, 1.784s cpu time, 0.170s GC time
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### theory "Draft.Conjugate"
### 2.634s elapsed time, 5.888s cpu time, 0.713s GC time
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Draft.Missing_Ring"
### 2.976s elapsed time, 5.961s cpu time, 0.752s GC time
Loading theory "Draft.Matrix" (required by "Draft.Schur_DecompositionTemplates" via "Draft.Schur_Decomposition" via "Draft.Gram_Schmidt" via "Draft.VS_Connect")
Loading theory "Draft.Missing_VectorSpace" (required by "Draft.Schur_DecompositionTemplates" via "Draft.Schur_Decomposition" via "Draft.Gram_Schmidt" via "Draft.VS_Connect")
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
Found termination order: "{}"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
### theory "Draft.Missing_VectorSpace"
### 1.922s elapsed time, 4.034s cpu time, 0.910s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
### theory "Draft.Matrix"
### 3.267s elapsed time, 5.946s cpu time, 1.758s GC time
Loading theory "Draft.Gauss_Jordan_Elimination" (required by "Draft.Schur_DecompositionTemplates" via "Draft.Schur_Decomposition" via "Draft.Gram_Schmidt" via "Draft.VS_Connect" via "Draft.Determinant" via "Draft.Column_Operations")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
### theory "Draft.Gauss_Jordan_Elimination"
### 0.848s elapsed time, 0.965s cpu time, 0.188s GC time
Loading theory "Draft.Column_Operations" (required by "Draft.Schur_DecompositionTemplates" via "Draft.Schur_Decomposition" via "Draft.Gram_Schmidt" via "Draft.VS_Connect" via "Draft.Determinant")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Column_Operations"
### 0.322s elapsed time, 0.406s cpu time, 0.129s GC time
Loading theory "Draft.Determinant" (required by "Draft.Schur_DecompositionTemplates" via "Draft.Schur_Decomposition" via "Draft.Gram_Schmidt" via "Draft.VS_Connect")
### theory "Draft.Determinant"
### 1.069s elapsed time, 1.224s cpu time, 0.245s GC time
Loading theory "Draft.VS_Connect" (required by "Draft.Schur_DecompositionTemplates" via "Draft.Schur_Decomposition" via "Draft.Gram_Schmidt")
Loading theory "Draft.Char_Poly" (required by "Draft.Schur_DecompositionTemplates" via "Draft.Schur_Decomposition")
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
### Cannot skip proof of schematic goal statement
### theory "Draft.Char_Poly"
### 1.123s elapsed time, 2.788s cpu time, 1.312s GC time
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
locale matrix_ring
  fixes n :: "nat"
    and field_type :: "'a itself"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
locale matrix_vs
  fixes nr :: "nat"
    and nc :: "nat"
    and field_type :: "'a itself"
### Cannot skip proof of schematic goal statement
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
locale mat_space
  fixes f_ty :: "'a itself"
    and nc :: "nat"
    and nr :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale idom_vec
  fixes n :: "nat"
    and f_ty :: "'a itself"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Draft.VS_Connect"
### 6.203s elapsed time, 8.434s cpu time, 2.289s GC time
Loading theory "Draft.Gram_Schmidt" (required by "Draft.Schur_DecompositionTemplates" via "Draft.Schur_Decomposition")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale cof_vec_space
  fixes n :: "nat"
    and f_ty :: "'a itself"
### theory "Draft.Gram_Schmidt"
### 0.899s elapsed time, 1.145s cpu time, 0.186s GC time
Loading theory "Draft.Schur_Decomposition" (required by "Draft.Schur_DecompositionTemplates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Schur_Decomposition"
### 1.640s elapsed time, 1.988s cpu time, 0.225s GC time
Loading theory "Draft.Schur_DecompositionTemplates"
val templateLemmas =
   [("Schur_Decomposition.vec_inv_dim", "dim_vec (vec_inv ?v) = dim_vec ?v",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Schur_Decomposition.corthogonal_inv_result",
     "corthogonal_mat ?A ==> inverts_mat (corthogonal_inv ?A) ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Schur_Decomposition.vec_inv_closed",
     "?v : carrier_vec ?n ==> vec_inv ?v : carrier_vec ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Schur_Decomposition.vec_inv",
     "[| ?v : carrier_vec ?n; ?v ~= 0\<^sub>v ?n |]
      ==> vec_inv ?v \<bullet> ?v = (1::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 1),
         template_hole 0))),
    ("Schur_Decomposition.corthogonal_inv",
     "[| corthogonal ?vs; set ?vs <= carrier_vec ?n |]
      ==> inverts_mat (mat_of_rows ?n (map vec_inv ?vs))
           (mat_of_cols ?n ?vs)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Schur_Decomposition.orthogonal_mat_of_cols",
     "[| set ?ws <= carrier_vec ?n; corthogonal ?ws; length ?ws = ?n |]
      ==> corthogonal_mat (mat_of_cols ?n ?ws)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_equation
         (template_app (template_hole 2, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Schur_Decomposition.schur_upper_triangular",
     "[| ?A : carrier_mat ?n ?n;
         char_poly ?A = (PROD a<-?es. [:- a, 1::?'a:]) |]
      ==> upper_triangular (schur_upper_triangular ?A ?es)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 1))
            ),
        template_equation
         (template_app (template_hole 8, template_var 2),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, t_empty), template_var 0)))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Schur_Decomposition.schur_upper_triangular",
     "[| ?A : carrier_mat ?n ?n;
         char_poly ?A = (PROD a<-?es. [:- a, 1::?'a:]) |]
      ==> similar_mat ?A (schur_upper_triangular ?A ?es)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 1))
            ),
        template_equation
         (template_app (template_hole 8, template_var 2),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, t_empty), template_var 0)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Schur_Decomposition.schur_upper_triangular",
     "[| ?A : carrier_mat ?n ?n;
         char_poly ?A = (PROD a<-?es. [:- a, 1::?'a:]) |]
      ==> schur_upper_triangular ?A ?es : carrier_mat ?n ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 1))
            ),
        template_equation
         (template_app (template_hole 7, template_var 2),
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, t_empty), template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 9, template_var 1),
               template_var 1))
           ))),
    ("Schur_Decomposition.corthogonal_matD",
     "[| corthogonal_mat ?A; ?i < dim_col ?A; ?j < dim_col ?A |]
      ==> (col ?A ?i \<bullet>c col ?A ?j = (0::?'a)) = (?i ~= ?j)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 8, template_var 2)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 8, template_var 2))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0))),
           template_hole 2),
         template_negation
          (template_equation (template_var 1, template_var 0))))),
    ("Schur_Decomposition.schur_decomposition_exists",
     "[| ?A : carrier_mat ?n ?n;
         char_poly ?A = (PROD a<-?es. [:- a, 1::?'a:]) |]
      ==> EX B:carrier_mat ?n ?n. upper_triangular B & similar_mat ?A B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app (template_hole 12, template_var 1),
                template_var 1))
            ),
        template_equation
         (template_app (template_hole 10, template_var 2),
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, t_empty), template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 12, template_var 1),
                 template_var 1)),
             t_empty)
           ))),
    ("Schur_Decomposition.corthogonal_matI",
     "(!!i j.
          [| i < dim_col ?A; j < dim_col ?A |]
          ==> (col ?A i \<bullet>c col ?A j = (0::?'a)) = (i ~= j)) ==>
      corthogonal_mat ?A",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Schur_Decomposition.schur_decomposition",
     "[| ?A : carrier_mat ?n ?n;
         char_poly ?A = (PROD e<-?es. [:- e, 1::?'a:]);
         schur_decomposition ?A ?es = (?B, ?P, ?Q) |]
      ==> similar_mat_wit ?A ?B ?P ?Q &
          upper_triangular ?B & diag_mat ?B = ?es",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 5),
              template_app
               (template_app (template_hole 17, template_var 4),
                template_var 4))
            ),
        template_equation
         (template_app (template_hole 15, template_var 5),
          template_app
           (template_hole 14,
            template_app
             (template_app (template_hole 13, t_empty), template_var 3))),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 5), template_var 3),
          template_app
           (template_app (template_hole 6, template_var 2),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 3)))
           ))),
    ("Schur_Decomposition.char_poly_0_block",
     "[| ?A = four_block_mat ?B ?C (0\<^sub>m ?m ?n) ?D;
         EX es. char_poly ?B = (PROD a<-es. [:- a, 1::?'a:]);
         EX es. char_poly ?D = (PROD a<-es. [:- a, 1::?'a:]);
         ?B : carrier_mat ?n ?n; ?C : carrier_mat ?n ?m;
         ?D : carrier_mat ?m ?m |]
      ==> char_poly ?A = char_poly ?B * char_poly ?D",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 13, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 12, template_var 2),
                template_var 1)),
            template_var 0)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 2))
            )],
       template_equation
        (template_app (template_hole 9, template_var 5),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 9, template_var 4)),
           template_app (template_hole 9, template_var 0))))),
    ("Schur_Decomposition.char_poly_0_block'",
     "[| ?A = four_block_mat ?B (0\<^sub>m ?n ?m) ?C ?D;
         EX es. char_poly ?B = (PROD a<-es. [:- a, 1::?'a:]);
         EX es. char_poly ?D = (PROD a<-es. [:- a, 1::?'a:]);
         ?B : carrier_mat ?n ?n; ?C : carrier_mat ?m ?n;
         ?D : carrier_mat ?m ?m |]
      ==> char_poly ?A = char_poly ?B * char_poly ?D",
     template_implication
      ([template_equation
         (template_var 5,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 13, template_var 4),
                template_app
                 (template_app (template_hole 12, template_var 3),
                  template_var 2)),
              template_var 1),
            template_var 0)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app (template_hole 1, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 2))
            )],
       template_equation
        (template_app (template_hole 9, template_var 5),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 9, template_var 4)),
           template_app (template_hole 9, template_var 0))))),
    ("Schur_Decomposition.corthogonal_col_ev_0",
     "[| ?A : carrier_mat ?n ?n; ?v : carrier_vec ?n; ?v ~= 0\<^sub>v ?n;
         ?A *\<^sub>v ?v = ?e \<cdot>\<^sub>v ?v; ?n ~= 0; hd ?ws = ?v;
         set ?ws <= carrier_vec ?n; corthogonal ?ws; length ?ws = ?n |]
      ==> col (corthogonal_inv (mat_of_cols ?n ?ws) * ?A *
               mat_of_cols ?n ?ws)
           0 =
          vec ?n (%i. if i = 0 then ?e else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 4),
              template_app
               (template_app (template_hole 21, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 2),
              template_app (template_hole 19, template_var 3))
            ),
        template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 16, template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 15, template_var 4),
            template_var 2),
          template_app
           (template_app (template_hole 14, template_var 1),
            template_var 2)),
        template_negation
         (template_equation (template_var 3, template_hole 12)),
        template_equation
         (template_app (template_hole 11, template_var 0), template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 0),
          template_app (template_hole 19, template_var 3)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_equation
         (template_app (template_hole 7, template_var 0), template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_var 3),
                         template_var 0))),
                   template_var 4)),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 0))),
           template_hole 12),
         template_app
          (template_app (template_hole 2, template_var 3), t_empty))))]:
   (string * thm * template) list
### theory "Draft.Schur_DecompositionTemplates"
### 0.684s elapsed time, 0.917s cpu time, 0.137s GC time
val it = (): unit
