Loading theory "Draft.Missing_Misc" (required by "Draft.Char_PolyTemplates" via "Draft.Char_Poly" via "Draft.Determinant")
Loading theory "Draft.Conjugate" (required by "Draft.Char_PolyTemplates" via "Draft.Char_Poly" via "Draft.Determinant" via "Draft.Column_Operations" via "Draft.Gauss_Jordan_Elimination" via "Draft.Matrix")
Loading theory "Draft.Templates" (required by "Draft.Char_PolyTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.066s elapsed time, 0.242s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Char_PolyTemplates")
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
### theory "Draft.Missing_Misc"
### 0.138s elapsed time, 0.425s cpu time, 0.046s GC time
Loading theory "Draft.Missing_Ring" (required by "Draft.Char_PolyTemplates" via "Draft.Char_Poly" via "Draft.Determinant" via "Draft.Column_Operations" via "Draft.Gauss_Jordan_Elimination" via "Draft.Matrix")
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.614s elapsed time, 1.747s cpu time, 0.153s GC time
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### theory "Draft.Conjugate"
### 2.804s elapsed time, 6.228s cpu time, 0.712s GC time
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Draft.Missing_Ring"
### 3.196s elapsed time, 6.332s cpu time, 0.697s GC time
Loading theory "Draft.Matrix" (required by "Draft.Char_PolyTemplates" via "Draft.Char_Poly" via "Draft.Determinant" via "Draft.Column_Operations" via "Draft.Gauss_Jordan_Elimination")
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
Found termination order: "{}"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
### theory "Draft.Matrix"
### 2.936s elapsed time, 3.464s cpu time, 0.836s GC time
Loading theory "Draft.Gauss_Jordan_Elimination" (required by "Draft.Char_PolyTemplates" via "Draft.Char_Poly" via "Draft.Determinant" via "Draft.Column_Operations")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
### theory "Draft.Gauss_Jordan_Elimination"
### 1.138s elapsed time, 1.699s cpu time, 0.845s GC time
Loading theory "Draft.Column_Operations" (required by "Draft.Char_PolyTemplates" via "Draft.Char_Poly" via "Draft.Determinant")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Column_Operations"
### 0.367s elapsed time, 0.419s cpu time, 0.084s GC time
Loading theory "Draft.Determinant" (required by "Draft.Char_PolyTemplates" via "Draft.Char_Poly")
### theory "Draft.Determinant"
### 1.126s elapsed time, 1.302s cpu time, 0.272s GC time
Loading theory "Draft.Char_Poly" (required by "Draft.Char_PolyTemplates")
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
### theory "Draft.Char_Poly"
### 0.702s elapsed time, 0.805s cpu time, 0.154s GC time
Loading theory "Draft.Char_PolyTemplates"
val templateLemmas =
   [("Char_Poly.degree_signof_mult",
     "degree (of_int (sign ?p) * ?q) = degree ?q",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_var 0)),
       template_app (template_hole 3, template_var 0))),
    ("Char_Poly.char_poly_similar",
     "similar_mat ?A ?B ==> char_poly ?A = char_poly ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Char_Poly.char_poly_transpose_mat",
     "?A : carrier_mat ?n ?n ==> char_poly ?A\<^sup>T = char_poly ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("Char_Poly.char_poly_matrix_closed",
     "?A : carrier_mat ?n ?n ==> char_poly_matrix ?A : carrier_mat ?n ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 0))
           ))),
    ("Char_Poly.mat_erase_carrier",
     "(mat_erase ?A ?i ?j : carrier_mat ?nr ?nc) =
      (?A : carrier_mat ?nr ?nc)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 4),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Char_Poly.char_matrix_closed",
     "?A : carrier_mat ?n ?n ==> char_matrix ?A ?e : carrier_mat ?n ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 1))
           ))),
    ("Char_Poly.char_poly_matrix_upper_triangular",
     "[| ?A : carrier_mat ?n ?n; upper_triangular ?A |]
      ==> upper_triangular (char_poly_matrix ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))
           ))),
    ("Char_Poly.eigenvalue_imp_nonzero_dim",
     "[| ?A : carrier_mat ?n ?n; eigenvalue ?A ?ev |] ==> 0 < ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_inequation (less_than, template_hole 0, template_var 1))),
    ("Char_Poly.char_poly_matrix",
     "?A : carrier_mat ?n ?n ==>
      poly (char_poly ?A) ?k = det (- char_matrix ?A ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))))),
    ("Char_Poly.eigenvalue_det",
     "?A : carrier_mat ?n ?n ==>
      eigenvalue ?A ?e = (det (char_matrix ?A ?e) = (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 1))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 0)
              )],
         template_equation
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_hole 0)))),
    ("Char_Poly.eigenvalue_root_char_poly",
     "?A : carrier_mat ?n ?n ==>
      eigenvalue ?A ?k = (poly (char_poly ?A) ?k = (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 1))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 0)
              )],
         template_equation
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 0),
           template_hole 0)))),
    ("Char_Poly.find_eigenvector",
     "[| ?A : carrier_mat ?n ?n; eigenvalue ?A ?e |]
      ==> eigenvector ?A (find_eigenvector ?A ?e) ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 0)
           ))),
    ("Char_Poly.degree_monic_char_poly",
     "?A : carrier_mat ?n ?n ==>
      degree (char_poly ?A) = ?n & coeff (char_poly ?A) ?n = (1::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 7, template_var 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1))),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 3, template_var 1)),
                   template_var 0)),
               template_hole 0))
           ))),
    ("Char_Poly.pderiv_char_poly",
     "?A : carrier_mat ?n ?n ==>
      pderiv (char_poly ?A) = (SUM i<?n. char_poly (mat_delete ?A i i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 0),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Char_Poly.pderiv_char_poly_mat_erase",
     "?A : carrier_mat ?n ?n ==>
      monom (1::?'a) 1 * pderiv (char_poly ?A) =
      (SUM i<?n. char_poly (mat_erase ?A i i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 10, template_var 0),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_hole 5)),
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Char_Poly.eigenvector_pow",
     "[| ?A : carrier_mat ?n ?n; eigenvector ?A ?v ?k |]
      ==> ?A ^\<^sub>m ?i *\<^sub>v ?v = ?k ^ ?i \<cdot>\<^sub>v ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 4),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("Char_Poly.char_poly_upper_triangular",
     "[| ?A : carrier_mat ?n ?n; upper_triangular ?A |]
      ==> char_poly ?A = (PROD a<-diag_mat ?A. [:- a, 1::?'a:])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 10, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 9, template_var 1))],
       template_equation
        (template_app (template_hole 7, template_var 1),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 0, template_var 1)))))),
    ("Char_Poly.char_poly_factorized",
     "?A : carrier_mat ?n ?n ==>
      EX as. char_poly ?A = (PROD a<-as. [:- a, 1:]) & length as = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_app (template_hole 12, template_var 0),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Char_Poly.eigenvector_char_matrix",
     "?A : carrier_mat ?n ?n ==>
      eigenvector ?A ?v ?e =
      (?v : carrier_vec ?n &
       ?v ~= 0\<^sub>v ?n & char_matrix ?A ?e *\<^sub>v ?v = 0\<^sub>v ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_var 2))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 1),
                template_var 0)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app (template_hole 5, template_var 2))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 1),
                       template_app (template_hole 2, template_var 2)))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 0, template_var 3),
                           template_var 0)),
                       template_var 1)),
                   template_app (template_hole 2, template_var 2))))
             )))),
    ("Char_Poly.eigenvalue_char_matrix",
     "?A : carrier_mat ?n ?n ==>
      eigenvalue ?A ?e =
      (EX v. v : carrier_vec ?n &
             v ~= 0\<^sub>v ?n &
             char_matrix ?A ?e *\<^sub>v v = 0\<^sub>v ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app
               (template_app (template_hole 11, template_var 1),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 9, template_var 2), template_var 0),
         template_app (template_hole 8, t_empty)))),
    ("Char_Poly.char_poly_four_block_zeros_col",
     "[| ?A1.0 : carrier_mat 1 1; ?A2.0 : carrier_mat 1 ?n;
         ?A3.0 : carrier_mat ?n ?n |]
      ==> char_poly (four_block_mat ?A1.0 ?A2.0 (0\<^sub>m ?n 1) ?A3.0) =
          char_poly ?A1.0 * char_poly ?A3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_hole 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 5)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 3)),
           template_app (template_hole 3, template_var 0))))),
    ("Char_Poly.map_poly_mult",
     "[| ?A : carrier_mat ?nr ?n; ?B : carrier_mat ?n ?nc |]
      ==> map_mat (%a. [:a:]) (?A * ?B) =
          map_mat (%a. [:a:]) ?A * map_mat (%a. [:a:]) ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, t_empty), template_var 4)),
           template_app
            (template_app (template_hole 4, t_empty), template_var 1))))),
    ("Char_Poly.map_poly_mult",
     "[| ?A : carrier_mat ?nr ?n; ?B : carrier_mat ?n ?nc |]
      ==> map_mat (%a. [:a:] * ?p) (?A * ?B) =
          map_mat (%a. [:a:]) ?A * map_mat (%a. [:a:] * ?p) ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 3),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app (template_hole 1, template_var 5),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, t_empty), template_var 5)),
           template_app
            (template_app (template_hole 5, t_empty), template_var 2))))),
    ("Char_Poly.map_poly_mult",
     "[| ?A : carrier_mat ?nr ?n; ?B : carrier_mat ?n ?nc |]
      ==> map_mat (%a. [:a:] * ?p) (?A * ?B) =
          map_mat (%a. [:a:] * ?p) ?A * map_mat (%a. [:a:]) ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 3),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app (template_hole 1, template_var 5),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, t_empty), template_var 5)),
           template_app
            (template_app (template_hole 5, t_empty), template_var 2))))),
    ("Char_Poly.char_poly_0_column",
     "[| !!j. j < ?n ==> ?A $$ (j, ?i) = (0::?'a); ?A : carrier_mat ?n ?n;
         ?i < ?n |]
      ==> char_poly ?A =
          monom (1::?'a) 1 * char_poly (mat_delete ?A ?i ?i)",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 2))
            ),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_equation
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1)),
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 0)))))),
    ("Char_Poly.poly_det_cong",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         !!i j.
            [| i < ?n; j < ?n |]
            ==> poly (?B $$ (i, j)) ?k = ?A $$ (i, j) |]
      ==> poly (det ?B) ?k = det ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_app
               (template_app (template_hole 11, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app (template_hole 0, template_var 3))))]:
   (string * thm * template) list
### theory "Draft.Char_PolyTemplates"
### 1.002s elapsed time, 1.946s cpu time, 1.150s GC time
val it = (): unit
