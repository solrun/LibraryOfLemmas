Loading theory "Draft.Missing_Misc" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl" via "Draft.Matrix_IArray_Impl" via "Draft.Matrix" via "Draft.Missing_Ring")
Loading theory "Draft.Conjugate" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl" via "Draft.Matrix_IArray_Impl" via "Draft.Matrix")
Loading theory "Draft.Templates" (required by "Draft.Matrix_ImplTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.225s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Matrix_ImplTemplates")
### theory "Draft.Missing_Misc"
### 0.086s elapsed time, 0.292s cpu time, 0.000s GC time
Loading theory "Draft.Missing_Ring" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl" via "Draft.Matrix_IArray_Impl" via "Draft.Matrix")
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.598s elapsed time, 1.711s cpu time, 0.175s GC time
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### theory "Draft.Conjugate"
### 2.668s elapsed time, 5.939s cpu time, 0.752s GC time
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Draft.Missing_Ring"
### 3.005s elapsed time, 6.080s cpu time, 0.795s GC time
Loading theory "Draft.Matrix" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl" via "Draft.Matrix_IArray_Impl")
Loading theory "Draft.Missing_VectorSpace" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl" via "Draft.Jordan_Normal_Form_Existence" via "Draft.Schur_Decomposition" via "Draft.Gram_Schmidt" via "Draft.VS_Connect")
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
Found termination order: "{}"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
### theory "Draft.Missing_VectorSpace"
### 2.061s elapsed time, 4.341s cpu time, 0.939s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
### theory "Draft.Matrix"
### 3.472s elapsed time, 6.283s cpu time, 1.761s GC time
Loading theory "Draft.Gauss_Jordan_Elimination" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl" via "Draft.Gauss_Jordan_IArray_Impl")
Loading theory "Draft.Matrix_IArray_Impl" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl")
Loading theory "Draft.Show_Matrix" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
instantiation
  vec :: (show) show
  shows_prec_vec == shows_prec :: nat => 'a vec => char list => char list
  shows_list_vec == shows_list :: 'a vec list => char list => char list
instantiation
  mat :: (show) show
  shows_prec_mat == shows_prec :: nat => 'a mat => char list => char list
  shows_list_mat == shows_list :: 'a mat list => char list => char list
### theory "Draft.Show_Matrix"
### 0.599s elapsed time, 1.774s cpu time, 0.207s GC time
### theory "Draft.Gauss_Jordan_Elimination"
### 1.032s elapsed time, 2.658s cpu time, 0.418s GC time
Loading theory "Draft.Column_Operations" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl" via "Draft.Determinant_Impl" via "Draft.Determinant")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Column_Operations"
### 0.638s elapsed time, 1.793s cpu time, 1.160s GC time
Loading theory "Draft.Determinant" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl" via "Draft.Determinant_Impl")
instantiation
  vec :: (type) equal
  equal_vec == equal_class.equal :: 'a vec => 'a vec => bool
instantiation
  mat :: (type) equal
  equal_mat == equal_class.equal :: 'a mat => 'a mat => bool
deriving "ceq" instance for type "Matrix.mat" via "="
derived is_ceq_mat-lemma
deriving "ceq" instance for type "Matrix.vec" via "="
derived is_ceq_vec-lemma
use None as trivial implementation of ccompare for type mat
registered mat in class ccompare
use None as trivial implementation of ccompare for type vec
registered vec in class ccompare
use dlist as set_impl for type mat
registered mat in class set_impl
use dlist as set_impl for type vec
registered vec in class set_impl
use None as trivial implementation of cenum for type mat
registered mat in class cenum
use None as trivial implementation of cenum for type vec
registered vec in class cenum
### theory "Draft.Matrix_IArray_Impl"
### 2.004s elapsed time, 5.165s cpu time, 1.671s GC time
Loading theory "Draft.Gauss_Jordan_IArray_Impl" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl")
### theory "Draft.Determinant"
### 1.320s elapsed time, 2.755s cpu time, 0.409s GC time
Loading theory "Draft.Determinant_Impl" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl")
Loading theory "Draft.Char_Poly" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl" via "Draft.Jordan_Normal_Form_Existence" via "Draft.Jordan_Normal_Form")
Loading theory "Draft.VS_Connect" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl" via "Draft.Jordan_Normal_Form_Existence" via "Draft.Schur_Decomposition" via "Draft.Gram_Schmidt")
### theory "Draft.Gauss_Jordan_IArray_Impl"
### 1.239s elapsed time, 2.889s cpu time, 0.570s GC time
Found termination order: "{}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
### Cannot skip proof of schematic goal statement
### theory "Draft.Char_Poly"
### 0.984s elapsed time, 3.039s cpu time, 0.439s GC time
Loading theory "Draft.Jordan_Normal_Form" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl" via "Draft.Jordan_Normal_Form_Existence")
Found termination order: "{}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### Cannot skip proof of schematic goal statement
### theory "Draft.Jordan_Normal_Form"
### 0.357s elapsed time, 1.042s cpu time, 0.281s GC time
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Determinant_Impl"
### 1.595s elapsed time, 4.632s cpu time, 0.822s GC time
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
locale matrix_ring
  fixes n :: "nat"
    and field_type :: "'a itself"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
locale matrix_vs
  fixes nr :: "nat"
    and nc :: "nat"
    and field_type :: "'a itself"
### Cannot skip proof of schematic goal statement
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
locale mat_space
  fixes f_ty :: "'a itself"
    and nc :: "nat"
    and nr :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale idom_vec
  fixes n :: "nat"
    and f_ty :: "'a itself"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Draft.VS_Connect"
### 6.280s elapsed time, 9.754s cpu time, 1.665s GC time
Loading theory "Draft.Gram_Schmidt" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl" via "Draft.Jordan_Normal_Form_Existence" via "Draft.Schur_Decomposition")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale cof_vec_space
  fixes n :: "nat"
    and f_ty :: "'a itself"
### theory "Draft.Gram_Schmidt"
### 0.916s elapsed time, 1.172s cpu time, 0.214s GC time
Loading theory "Draft.Schur_Decomposition" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl" via "Draft.Jordan_Normal_Form_Existence")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Schur_Decomposition"
### 1.674s elapsed time, 2.045s cpu time, 0.301s GC time
Loading theory "Draft.Jordan_Normal_Form_Existence" (required by "Draft.Matrix_ImplTemplates" via "Draft.Matrix_Impl")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd (snd (snd p))))) <*mlex*> {}"
### theory "Draft.Jordan_Normal_Form_Existence"
### 2.156s elapsed time, 2.455s cpu time, 0.469s GC time
Loading theory "Draft.Matrix_Impl" (required by "Draft.Matrix_ImplTemplates")
### theory "Draft.Matrix_Impl"
### 1.084s elapsed time, 1.141s cpu time, 0.084s GC time
Loading theory "Draft.Matrix_ImplTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Matrix_ImplTemplates"
### 1.561s elapsed time, 5.637s cpu time, 0.689s GC time
"- 3208"
  :: "int"
"- 3208"
  :: "rat"
"''[[14, 34, 54, 74], [22, 56, 90, 124]]''"
  :: "char list"
"[:- 3208, - 10, - 1, - 7, 1:]"
  :: "real poly"
"[(3, 3), (1, 3), (2, 5)]"
  :: "(nat * rat) list"
"''Some [[55/1604, -169/1604, 241/3208, 35/802], [25/1604, 69/1604, 547/3208, -57/802], [73/802, 9/802, -103/1604, 10/401], [-135/1604, 269/1604, 575/3208, -13/802]]''"
  :: "char list"
"''None''"
  :: "char list"
val it = (): unit
