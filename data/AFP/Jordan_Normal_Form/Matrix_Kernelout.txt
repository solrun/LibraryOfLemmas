Loading theory "Draft.Missing_Misc" (required by "Draft.Matrix_KernelTemplates" via "Draft.Matrix_Kernel" via "Draft.VS_Connect" via "Draft.Matrix" via "Draft.Missing_Ring")
Loading theory "Draft.Conjugate" (required by "Draft.Matrix_KernelTemplates" via "Draft.Matrix_Kernel" via "Draft.VS_Connect" via "Draft.Matrix")
Loading theory "Draft.Templates" (required by "Draft.Matrix_KernelTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.243s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Matrix_KernelTemplates")
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
### theory "Draft.Missing_Misc"
### 0.149s elapsed time, 0.440s cpu time, 0.050s GC time
Loading theory "Draft.Missing_Ring" (required by "Draft.Matrix_KernelTemplates" via "Draft.Matrix_Kernel" via "Draft.VS_Connect" via "Draft.Matrix")
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.635s elapsed time, 1.795s cpu time, 0.176s GC time
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### theory "Draft.Conjugate"
### 2.683s elapsed time, 5.993s cpu time, 0.755s GC time
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Draft.Missing_Ring"
### 3.026s elapsed time, 6.049s cpu time, 0.735s GC time
Loading theory "Draft.Matrix" (required by "Draft.Matrix_KernelTemplates" via "Draft.Matrix_Kernel" via "Draft.VS_Connect")
Loading theory "Draft.Missing_VectorSpace" (required by "Draft.Matrix_KernelTemplates" via "Draft.Matrix_Kernel" via "Draft.VS_Connect")
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
Found termination order: "{}"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
### theory "Draft.Missing_VectorSpace"
### 1.918s elapsed time, 4.019s cpu time, 0.851s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
### theory "Draft.Matrix"
### 3.277s elapsed time, 5.966s cpu time, 1.755s GC time
Loading theory "Draft.Gauss_Jordan_Elimination" (required by "Draft.Matrix_KernelTemplates" via "Draft.Matrix_Kernel" via "Draft.VS_Connect" via "Draft.Determinant" via "Draft.Column_Operations")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
### theory "Draft.Gauss_Jordan_Elimination"
### 0.939s elapsed time, 1.044s cpu time, 0.175s GC time
Loading theory "Draft.Column_Operations" (required by "Draft.Matrix_KernelTemplates" via "Draft.Matrix_Kernel" via "Draft.VS_Connect" via "Draft.Determinant")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Column_Operations"
### 0.317s elapsed time, 0.363s cpu time, 0.077s GC time
Loading theory "Draft.Determinant" (required by "Draft.Matrix_KernelTemplates" via "Draft.Matrix_Kernel" via "Draft.VS_Connect")
### theory "Draft.Determinant"
### 1.407s elapsed time, 2.258s cpu time, 1.193s GC time
Loading theory "Draft.VS_Connect" (required by "Draft.Matrix_KernelTemplates" via "Draft.Matrix_Kernel")
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
locale matrix_ring
  fixes n :: "nat"
    and field_type :: "'a itself"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
locale matrix_vs
  fixes nr :: "nat"
    and nc :: "nat"
    and field_type :: "'a itself"
### Cannot skip proof of schematic goal statement
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
locale mat_space
  fixes f_ty :: "'a itself"
    and nc :: "nat"
    and nr :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale idom_vec
  fixes n :: "nat"
    and f_ty :: "'a itself"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Draft.VS_Connect"
### 6.192s elapsed time, 6.762s cpu time, 1.043s GC time
Loading theory "Draft.Matrix_Kernel" (required by "Draft.Matrix_KernelTemplates")
locale kernel
  fixes nr :: "nat"
    and nc :: "nat"
    and A :: "'a mat"
  assumes "Matrix_Kernel.kernel nr nc A"
### Cannot skip proof of schematic goal statement
locale vardim
  fixes f_ty :: "'a itself"
### theory "Draft.Matrix_Kernel"
### 1.608s elapsed time, 1.905s cpu time, 0.289s GC time
Loading theory "Draft.Matrix_KernelTemplates"
val templateLemmas =
   [("Matrix_Kernel.kernel_dim_code",
     "kernel_dim ?A =
      dim_col ?A - length (pivot_positions (gauss_jordan_single ?A))",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))))),
    ("Matrix_Kernel.mat_kernel_carrier",
     "?A : carrier_mat ?nr ?nc ==> mat_kernel ?A <= carrier_vec ?nc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Matrix_Kernel.mat_kernelD",
     "[| ?A : carrier_mat ?nr ?nc; ?v : mat_kernel ?A |]
      ==> ?v : carrier_vec ?nc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Matrix_Kernel.kernel_one_mat",
     "vectorspace.basis class_ring
       (module_vec TYPE(?'a) ?n(| carrier := mat_kernel (1\<^sub>m ?n) |))
       {}",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, template_hole 13),
                 template_app
                  (template_app
                    (template_app (template_hole 12, template_hole 11),
                     template_hole 10),
                   template_app
                    (template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_hole 7),
                     template_hole 6)))),
             template_app
              (template_app (template_hole 5, t_empty),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0))),
           template_hole 0)
         )),
    ("Matrix_Kernel.mat_kernelD",
     "[| ?A : carrier_mat ?nr ?nc; ?v : mat_kernel ?A |]
      ==> ?A *\<^sub>v ?v = 0\<^sub>v ?nr",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("Matrix_Kernel.mat_kernel_smult",
     "[| ?A : carrier_mat ?nr ?nc; ?v : mat_kernel ?A |]
      ==> ?a \<cdot>\<^sub>v ?v : mat_kernel ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_app (template_hole 1, template_var 4))
           ))),
    ("Matrix_Kernel.kernel_one_mat",
     "vectorspace.dim class_ring
       (module_vec TYPE(?'a) ?n(| carrier := mat_kernel (1\<^sub>m ?n) |)) =
      0",
     template_equation
      (template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app (template_hole 14, template_hole 13),
             template_app
              (template_app
                (template_app (template_hole 12, template_hole 11),
                 template_hole 10),
               template_app
                (template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_hole 7),
                 template_hole 6)))),
         template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))),
       template_hole 0)),
    ("Matrix_Kernel.find_base_vectors",
     "[| row_echelon_form ?A; ?A : carrier_mat ?nr ?nc |]
      ==> set (find_base_vectors ?A) <= mat_kernel ?A",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_hole 2),
               template_hole 1),
             template_var 2)),
         template_app (template_hole 0, template_var 2)))),
    ("Matrix_Kernel.find_base_vectors",
     "[| row_echelon_form ?A; ?A : carrier_mat ?nr ?nc |]
      ==> 0\<^sub>v ?nc ~: set (find_base_vectors ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 3, template_hole 2),
                         template_hole 1),
                       template_hole 0),
                     template_var 2)))
               )
           ))),
    ("Matrix_Kernel.mat_kernel_mult_subset",
     "[| ?A : carrier_mat ?nr ?nc; ?B : carrier_mat ?n ?nr |]
      ==> mat_kernel ?A <= mat_kernel (?B * ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 3))
            )],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 4),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 4))))),
    ("Matrix_Kernel.mat_kernel",
     "?A : carrier_mat ?nr ?nc ==>
      mat_kernel ?A = {v: carrier_vec ?nc. ?A *\<^sub>v v = 0\<^sub>v ?nr}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 7, template_var 2),
         template_app (template_hole 6, t_empty)))),
    ("Matrix_Kernel.mat_kernelI",
     "[| ?A : carrier_mat ?nr ?nc; ?v : carrier_vec ?nc;
         ?A *\<^sub>v ?v = 0\<^sub>v ?nr |]
      ==> ?v : mat_kernel ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 3), template_var 0),
          template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Matrix_Kernel.kernel_basis_exists",
     "?A : carrier_mat ?nr ?nc ==>
      EX B. finite B &
            vectorspace.basis class_ring
             (module_vec TYPE(?'a) ?nc(| carrier := mat_kernel ?A |)) B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 2),
              template_app
               (template_app (template_hole 17, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 16, t_empty)))),
    ("Matrix_Kernel.find_base_vectors",
     "[| row_echelon_form ?A; ?A : carrier_mat ?nr ?nc |]
      ==> length (pivot_positions ?A) =
          card {i. i < ?nr & row ?A i ~= 0\<^sub>v ?nc}",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app (template_hole 12, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_var 2)),
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))))),
    ("Matrix_Kernel.find_base_vectors",
     "[| row_echelon_form ?A; ?A : carrier_mat ?nr ?nc |]
      ==> vectorspace.basis class_ring
           (module_vec TYPE(?'a) ?nc(| carrier := mat_kernel ?A |))
           (set (find_base_vectors ?A))",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 2),
              template_app
               (template_app (template_hole 17, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 16,
                 template_app
                  (template_app (template_hole 15, template_hole 14),
                   template_app
                    (template_app
                      (template_app (template_hole 13, template_hole 12),
                       template_hole 11),
                     template_app
                      (template_app
                        (template_app (template_hole 10, template_hole 9),
                         template_hole 8),
                       template_hole 7)))),
               template_app
                (template_app (template_hole 6, t_empty),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_hole 9),
                   template_hole 11),
                 template_var 2)))
           ))),
    ("Matrix_Kernel.find_base_vectors",
     "[| row_echelon_form ?A; ?A : carrier_mat ?nr ?nc |]
      ==> card (set (find_base_vectors ?A)) =
          ?nc - card {i. i < ?nr & row ?A i ~= 0\<^sub>v ?nc}",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 2),
              template_app
               (template_app (template_hole 16, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 14,
           template_app
            (template_hole 13,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 12, template_hole 11),
                   template_hole 10),
                 template_hole 9),
               template_var 2))),
         template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty)))))),
    ("Matrix_Kernel.mat_kernel_mult_eq",
     "[| ?A : carrier_mat ?nr ?nc; ?B : carrier_mat ?nr ?nr;
         ?C : carrier_mat ?nr ?nr; ?C * ?B = 1\<^sub>m ?nr |]
      ==> mat_kernel (?B * ?A) = mat_kernel ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0), template_var 1),
          template_app (template_hole 2, template_var 3))],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 4)),
         template_app (template_hole 0, template_var 4)))),
    ("Matrix_Kernel.kernel_upper_triangular",
     "[| ?A : carrier_mat ?n ?n; upper_triangular ?A;
         (0::?'a) ~: set (diag_mat ?A) |]
      ==> vectorspace.basis class_ring
           (module_vec TYPE(?'a) ?n(| carrier := mat_kernel ?A |)) {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 1),
              template_app
               (template_app (template_hole 20, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 19, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 17, template_hole 16),
                  template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_var 1)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_hole 11),
                   template_app
                    (template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_hole 8),
                     template_app
                      (template_app
                        (template_app (template_hole 7, template_hole 16),
                         template_hole 6),
                       template_hole 5)))),
               template_app
                (template_app (template_hole 4, t_empty),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 0))),
             template_hole 0)
           ))),
    ("Matrix_Kernel.kernel_upper_triangular",
     "[| ?A : carrier_mat ?n ?n; upper_triangular ?A;
         (0::?'a) ~: set (diag_mat ?A) |]
      ==> vectorspace.dim class_ring
           (module_vec TYPE(?'a) ?n(| carrier := mat_kernel ?A |)) =
          0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 1),
              template_app
               (template_app (template_hole 21, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 20, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 18, template_hole 17),
                  template_app
                   (template_hole 16,
                    template_app (template_hole 15, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app (template_hole 12, template_hole 11),
               template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_hole 8),
                 template_app
                  (template_app
                    (template_app (template_hole 7, template_hole 17),
                     template_hole 6),
                   template_hole 5)))),
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0))),
         template_hole 0))),
    ("Matrix_Kernel.find_base_vectors",
     "[| row_echelon_form ?A; ?A : carrier_mat ?nr ?nc |]
      ==> vectorspace.dim class_ring
           (module_vec TYPE(?'a) ?nc(| carrier := mat_kernel ?A |)) =
          ?nc - card {i. i < ?nr & row ?A i ~= 0\<^sub>v ?nc}",
     template_implication
      ([template_predicate
         (template_app (template_hole 26, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 2),
              template_app
               (template_app (template_hole 24, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 22,
             template_app
              (template_app (template_hole 21, template_hole 20),
               template_app
                (template_app
                  (template_app (template_hole 19, template_hole 18),
                   template_hole 17),
                 template_app
                  (template_app
                    (template_app (template_hole 16, template_hole 15),
                     template_hole 14),
                   template_hole 13)))),
           template_app
            (template_app (template_hole 12, t_empty),
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_var 0))),
         template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty)))))),
    ("Matrix_Kernel.similar_mat_wit_kernel_dim",
     "[| ?A : carrier_mat ?n ?n; similar_mat_wit ?A ?B ?P ?Q |]
      ==> vectorspace.dim class_ring
           (module_vec TYPE(?'a) ?n(| carrier := mat_kernel ?A |)) =
          vectorspace.dim class_ring
           (module_vec TYPE(?'a) ?n(| carrier := mat_kernel ?B |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 4),
              template_app
               (template_app (template_hole 16, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 4),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app (template_hole 12, template_hole 11),
               template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_hole 8),
                 template_app
                  (template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_hole 5),
                   template_hole 4)))),
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 3))),
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app (template_hole 12, template_hole 11),
               template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_hole 8),
                 template_app
                  (template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_hole 5),
                   template_hole 4)))),
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 3)))))),
    ("Matrix_Kernel.mat_kernel_mult_right_basis",
     "[| ?A : carrier_mat ?nr ?nc; ?B : carrier_mat ?nc ?nc;
         ?C : carrier_mat ?nc ?nc; ?B * ?C = 1\<^sub>m ?nc; finite ?gen;
         vectorspace.basis class_ring
          (module_vec TYPE(?'a) ?nc(| carrier := mat_kernel (?A * ?B) |))
          ?gen |]
      ==> card ((*\<^sub>v) ?B ` ?gen) = card ?gen",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 23, template_var 5),
              template_app
               (template_app (template_hole 22, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 23, template_var 2),
              template_app
               (template_app (template_hole 22, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 23, template_var 1),
              template_app
               (template_app (template_hole 22, template_var 3),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 20, template_var 2),
            template_var 1),
          template_app (template_hole 19, template_var 3)),
        template_predicate
         (template_app (template_hole 18, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app (template_hole 16, template_hole 15),
                    template_app
                     (template_app
                       (template_app (template_hole 14, template_hole 13),
                        template_hole 12),
                      template_app
                       (template_app
                         (template_app (template_hole 11, template_hole 10),
                          template_hole 9),
                        template_hole 8)))),
                template_app
                 (template_app (template_hole 7, t_empty),
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_var 3))),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Matrix_Kernel.mat_kernel_dim_mult_eq_right",
     "[| ?A : carrier_mat ?nr ?nc; ?B : carrier_mat ?nc ?nc;
         ?C : carrier_mat ?nc ?nc; ?B * ?C = 1\<^sub>m ?nc |]
      ==> vectorspace.dim class_ring
           (module_vec TYPE(?'a) ?nc(| carrier := mat_kernel (?A * ?B) |)) =
          vectorspace.dim class_ring
           (module_vec TYPE(?'a) ?nc(| carrier := mat_kernel ?A |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 4),
              template_app
               (template_app (template_hole 18, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 1),
              template_app
               (template_app (template_hole 18, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 0),
              template_app
               (template_app (template_hole 18, template_var 2),
                template_var 2))
            ),
        template_equation
         (template_app
           (template_app (template_hole 16, template_var 1),
            template_var 0),
          template_app (template_hole 15, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app (template_hole 12, template_hole 11),
               template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_hole 8),
                 template_app
                  (template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_hole 5),
                   template_hole 4)))),
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2))),
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app (template_hole 12, template_hole 11),
               template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_hole 8),
                 template_app
                  (template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_hole 5),
                   template_hole 4)))),
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2)))))),
    ("Matrix_Kernel.mat_kernel_mult_right_basis",
     "[| ?A : carrier_mat ?nr ?nc; ?B : carrier_mat ?nc ?nc;
         ?C : carrier_mat ?nc ?nc; ?B * ?C = 1\<^sub>m ?nc; finite ?gen;
         vectorspace.basis class_ring
          (module_vec TYPE(?'a) ?nc(| carrier := mat_kernel (?A * ?B) |))
          ?gen |]
      ==> vectorspace.basis class_ring
           (module_vec TYPE(?'a) ?nc(| carrier := mat_kernel ?A |))
           ((*\<^sub>v) ?B ` ?gen)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 5),
              template_app
               (template_app (template_hole 20, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 2),
              template_app
               (template_app (template_hole 20, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 1),
              template_app
               (template_app (template_hole 20, template_var 3),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 2),
            template_var 1),
          template_app (template_hole 17, template_var 3)),
        template_predicate
         (template_app (template_hole 16, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app (template_hole 14, template_hole 13),
                    template_app
                     (template_app
                       (template_app (template_hole 12, template_hole 11),
                        template_hole 10),
                      template_app
                       (template_app
                         (template_app (template_hole 9, template_hole 8),
                          template_hole 7),
                        template_hole 6)))),
                template_app
                 (template_app (template_hole 5, t_empty),
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_var 3))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app (template_hole 14, template_hole 13),
                   template_app
                    (template_app
                      (template_app (template_hole 12, template_hole 11),
                       template_hole 10),
                     template_app
                      (template_app
                        (template_app (template_hole 9, template_hole 8),
                         template_hole 7),
                       template_hole 6)))),
               template_app
                (template_app (template_hole 5, t_empty),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))
           ))),
    ("Matrix_Kernel.mat_kernel_mult_right_gen_set",
     "[| ?A : carrier_mat ?nr ?nc; ?B : carrier_mat ?nc ?nc;
         ?C : carrier_mat ?nc ?nc; ?B * ?C = 1\<^sub>m ?nc;
         LinearCombinations.module.span class_ring
          (module_vec TYPE(?'a) ?nc(| carrier := mat_kernel (?A * ?B) |))
          ?gen =
         carrier
          (module_vec TYPE(?'a) ?nc(| carrier := mat_kernel (?A * ?B) |));
         ?gen <= mat_kernel (?A * ?B) |]
      ==> (*\<^sub>v) ?B ` ?gen <= mat_kernel ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 23, template_var 5),
              template_app
               (template_app (template_hole 22, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 23, template_var 2),
              template_app
               (template_app (template_hole 22, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 23, template_var 1),
              template_app
               (template_app (template_hole 22, template_var 3),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 20, template_var 2),
            template_var 1),
          template_app (template_hole 19, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_hole 15),
                  template_app
                   (template_app
                     (template_app (template_hole 14, template_hole 13),
                      template_hole 12),
                    template_app
                     (template_app
                       (template_app (template_hole 11, template_hole 10),
                        template_hole 9),
                      template_hole 8)))),
              template_app
               (template_app (template_hole 7, t_empty),
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 3))),
            template_var 0),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 7, t_empty),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 3)))),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 20, template_var 5),
              template_var 2)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0),
         template_app (template_hole 6, template_var 5)))),
    ("Matrix_Kernel.mat_kernel_mult_right_gen_set",
     "[| ?A : carrier_mat ?nr ?nc; ?B : carrier_mat ?nc ?nc;
         ?C : carrier_mat ?nc ?nc; ?B * ?C = 1\<^sub>m ?nc;
         LinearCombinations.module.span class_ring
          (module_vec TYPE(?'a) ?nc(| carrier := mat_kernel (?A * ?B) |))
          ?gen =
         carrier
          (module_vec TYPE(?'a) ?nc(| carrier := mat_kernel (?A * ?B) |));
         ?gen <= mat_kernel (?A * ?B) |]
      ==> card ((*\<^sub>v) ?B ` ?gen) = card ?gen",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 5),
              template_app
               (template_app (template_hole 24, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 2),
              template_app
               (template_app (template_hole 24, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 1),
              template_app
               (template_app (template_hole 24, template_var 3),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 22, template_var 2),
            template_var 1),
          template_app (template_hole 21, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_hole 17),
                  template_app
                   (template_app
                     (template_app (template_hole 16, template_hole 15),
                      template_hole 14),
                    template_app
                     (template_app
                       (template_app (template_hole 13, template_hole 12),
                        template_hole 11),
                      template_hole 10)))),
              template_app
               (template_app (template_hole 9, t_empty),
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 3))),
            template_var 0),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 9, t_empty),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 3)))),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 22, template_var 5),
              template_var 2)))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Matrix_Kernel.kernel_four_block_0_mat",
     "[| ?A = four_block_mat ?B (0\<^sub>m ?n ?m) (0\<^sub>m ?m ?n) ?D;
         ?B : carrier_mat ?n ?n; ?D : carrier_mat ?m ?m |]
      ==> vectorspace.dim class_ring
           (module_vec TYPE(?'a) (?n + ?m)(| carrier := mat_kernel ?A |)) =
          vectorspace.dim class_ring
           (module_vec TYPE(?'a) ?n(| carrier := mat_kernel ?B |)) +
          vectorspace.dim class_ring
           (module_vec TYPE(?'a) ?m(| carrier := mat_kernel ?D |))",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 19, template_var 3),
                template_app
                 (template_app (template_hole 18, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 18, template_var 1),
                template_var 2)),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 3),
              template_app
               (template_app (template_hole 16, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 0),
              template_app
               (template_app (template_hole 16, template_var 1),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 13, template_hole 12),
               template_app
                (template_app
                  (template_app (template_hole 11, template_hole 10),
                   template_hole 9),
                 template_app
                  (template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_hole 6),
                   template_hole 5)))),
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app (template_hole 13, template_hole 12),
                   template_app
                    (template_app
                      (template_app (template_hole 11, template_hole 10),
                       template_hole 9),
                     template_app
                      (template_app
                        (template_app (template_hole 8, template_hole 7),
                         template_hole 6),
                       template_hole 5)))),
               template_app
                (template_app (template_hole 4, t_empty),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2)))),
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 13, template_hole 12),
                 template_app
                  (template_app
                    (template_app (template_hole 11, template_hole 10),
                     template_hole 9),
                   template_app
                    (template_app
                      (template_app (template_hole 8, template_hole 7),
                       template_hole 6),
                     template_hole 5)))),
             template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1))))))),
    ("Matrix_Kernel.mat_kernel_mult_right_gen_set",
     "[| ?A : carrier_mat ?nr ?nc; ?B : carrier_mat ?nc ?nc;
         ?C : carrier_mat ?nc ?nc; ?B * ?C = 1\<^sub>m ?nc;
         LinearCombinations.module.span class_ring
          (module_vec TYPE(?'a) ?nc(| carrier := mat_kernel (?A * ?B) |))
          ?gen =
         carrier
          (module_vec TYPE(?'a) ?nc(| carrier := mat_kernel (?A * ?B) |));
         ?gen <= mat_kernel (?A * ?B) |]
      ==> LinearCombinations.module.span class_ring
           (module_vec TYPE(?'a) ?nc(| carrier := mat_kernel ?A |))
           ((*\<^sub>v) ?B ` ?gen) =
          carrier (module_vec TYPE(?'a) ?nc(| carrier := mat_kernel ?A |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 23, template_var 5),
              template_app
               (template_app (template_hole 22, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 23, template_var 2),
              template_app
               (template_app (template_hole 22, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 23, template_var 1),
              template_app
               (template_app (template_hole 22, template_var 3),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 20, template_var 2),
            template_var 1),
          template_app (template_hole 19, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_hole 15),
                  template_app
                   (template_app
                     (template_app (template_hole 14, template_hole 13),
                      template_hole 12),
                    template_app
                     (template_app
                       (template_app (template_hole 11, template_hole 10),
                        template_hole 9),
                      template_hole 8)))),
              template_app
               (template_app (template_hole 7, t_empty),
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 3))),
            template_var 0),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 7, t_empty),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 3)))),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 20, template_var 5),
              template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app (template_hole 16, template_hole 15),
                 template_app
                  (template_app
                    (template_app (template_hole 14, template_hole 13),
                     template_hole 12),
                   template_app
                    (template_app
                      (template_app (template_hole 11, template_hole 10),
                       template_hole 9),
                     template_hole 8)))),
             template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 3))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 3))))))]:
   (string * thm * template) list
### theory "Draft.Matrix_KernelTemplates"
### 0.697s elapsed time, 0.928s cpu time, 0.133s GC time
val it = (): unit
