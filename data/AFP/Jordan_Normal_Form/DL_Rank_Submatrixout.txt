Loading theory "Draft.DL_Missing_List" (required by "Draft.DL_Rank_SubmatrixTemplates" via "Draft.DL_Rank_Submatrix" via "Draft.DL_Rank")
Loading theory "Draft.Templates" (required by "Draft.DL_Rank_SubmatrixTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Missing_Misc" (required by "Draft.DL_Rank_SubmatrixTemplates" via "Draft.DL_Rank_Submatrix" via "Draft.DL_Rank" via "Draft.VS_Connect" via "Draft.Matrix" via "Draft.Missing_Ring")
Loading theory "Draft.DL_Missing_Sublist" (required by "Draft.DL_Rank_SubmatrixTemplates" via "Draft.DL_Rank_Submatrix" via "Draft.DL_Submatrix")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.120s elapsed time, 0.436s cpu time, 0.050s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DL_Rank_SubmatrixTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.DL_Missing_List"
### 0.129s elapsed time, 0.470s cpu time, 0.050s GC time
Loading theory "Draft.Conjugate" (required by "Draft.DL_Rank_SubmatrixTemplates" via "Draft.DL_Rank_Submatrix" via "Draft.DL_Rank" via "Draft.VS_Connect" via "Draft.Matrix")
### theory "Draft.Missing_Misc"
### 0.156s elapsed time, 0.581s cpu time, 0.050s GC time
Loading theory "Draft.Missing_Ring" (required by "Draft.DL_Rank_SubmatrixTemplates" via "Draft.DL_Rank_Submatrix" via "Draft.DL_Rank" via "Draft.VS_Connect" via "Draft.Matrix")
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
### theory "Draft.DL_Missing_Sublist"
### 0.314s elapsed time, 1.128s cpu time, 0.175s GC time
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.624s elapsed time, 1.948s cpu time, 0.233s GC time
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### theory "Draft.Conjugate"
### 2.685s elapsed time, 6.079s cpu time, 0.874s GC time
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Draft.Missing_Ring"
### 3.105s elapsed time, 6.410s cpu time, 0.918s GC time
Loading theory "Draft.Matrix" (required by "Draft.DL_Rank_SubmatrixTemplates" via "Draft.DL_Rank_Submatrix" via "Draft.DL_Rank" via "Draft.VS_Connect")
Loading theory "Draft.Missing_VectorSpace" (required by "Draft.DL_Rank_SubmatrixTemplates" via "Draft.DL_Rank_Submatrix" via "Draft.DL_Rank" via "Draft.VS_Connect")
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
Found termination order: "{}"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
### theory "Draft.Missing_VectorSpace"
### 1.923s elapsed time, 4.060s cpu time, 0.854s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
### theory "Draft.Matrix"
### 3.348s elapsed time, 6.028s cpu time, 1.714s GC time
Loading theory "Draft.DL_Submatrix" (required by "Draft.DL_Rank_SubmatrixTemplates" via "Draft.DL_Rank_Submatrix")
Loading theory "Draft.Gauss_Jordan_Elimination" (required by "Draft.DL_Rank_SubmatrixTemplates" via "Draft.DL_Rank_Submatrix" via "Draft.DL_Rank" via "Draft.VS_Connect" via "Draft.Determinant" via "Draft.Column_Operations")
### theory "Draft.DL_Submatrix"
### 0.256s elapsed time, 0.547s cpu time, 0.102s GC time
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
### theory "Draft.Gauss_Jordan_Elimination"
### 0.865s elapsed time, 1.243s cpu time, 0.288s GC time
Loading theory "Draft.Column_Operations" (required by "Draft.DL_Rank_SubmatrixTemplates" via "Draft.DL_Rank_Submatrix" via "Draft.DL_Rank" via "Draft.VS_Connect" via "Draft.Determinant")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Column_Operations"
### 0.266s elapsed time, 0.268s cpu time, 0.000s GC time
Loading theory "Draft.Determinant" (required by "Draft.DL_Rank_SubmatrixTemplates" via "Draft.DL_Rank_Submatrix" via "Draft.DL_Rank" via "Draft.VS_Connect")
### theory "Draft.Determinant"
### 1.052s elapsed time, 1.203s cpu time, 0.237s GC time
Loading theory "Draft.VS_Connect" (required by "Draft.DL_Rank_SubmatrixTemplates" via "Draft.DL_Rank_Submatrix" via "Draft.DL_Rank")
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
locale matrix_ring
  fixes n :: "nat"
    and field_type :: "'a itself"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
locale matrix_vs
  fixes nr :: "nat"
    and nc :: "nat"
    and field_type :: "'a itself"
### Cannot skip proof of schematic goal statement
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
locale mat_space
  fixes f_ty :: "'a itself"
    and nc :: "nat"
    and nr :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale idom_vec
  fixes n :: "nat"
    and f_ty :: "'a itself"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Draft.VS_Connect"
### 6.094s elapsed time, 7.482s cpu time, 2.114s GC time
Loading theory "Draft.DL_Rank" (required by "Draft.DL_Rank_SubmatrixTemplates" via "Draft.DL_Rank_Submatrix")
### theory "Draft.DL_Rank"
### 3.368s elapsed time, 3.642s cpu time, 0.300s GC time
Loading theory "Draft.DL_Rank_Submatrix" (required by "Draft.DL_Rank_SubmatrixTemplates")
### theory "Draft.DL_Rank_Submatrix"
### 0.555s elapsed time, 0.584s cpu time, 0.055s GC time
Loading theory "Draft.DL_Rank_SubmatrixTemplates"
val templateLemmas =
   [("DL_Rank_Submatrix.cols_submatrix_subset",
     "set (cols (submatrix ?A UNIV ?J)) <= set (cols ?A)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0),
             template_var 0))),
       template_app
        (template_hole 3, template_app (template_hole 2, template_var 1)))),
    ("DL_Rank_Submatrix.distinct_cols_submatrix_UNIV",
     "distinct (cols (submatrix ?A ?I UNIV)) ==> distinct (cols ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 0),
                  template_hole 0)))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))
           ))),
    ("DL_Rank_Submatrix.row_submatrix_UNIV",
     "?i < card {i. i < dim_row ?A & i : ?I} ==>
      row (submatrix ?A ?I UNIV) ?i = row ?A (pick ?I ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 9, template_app (template_hole 8, t_empty)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0),
               template_hole 1)),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)))))]:
   (string * thm * template) list
### theory "Draft.DL_Rank_SubmatrixTemplates"
### 0.605s elapsed time, 0.754s cpu time, 0.000s GC time
val it = (): unit
