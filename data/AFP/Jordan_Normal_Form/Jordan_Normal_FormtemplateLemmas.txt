   [("Jordan_Normal_Form.jordan_block_index",
     "dim_col (jordan_block ?n ?k) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Jordan_Normal_Form.jordan_block_index",
     "dim_row (jordan_block ?n ?k) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Jordan_Normal_Form.jordan_block_carrier",
     "jordan_block ?n ?k : carrier_mat ?n ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 1))
         )),
    ("Jordan_Normal_Form.jordan_matrix_dim",
     "dim_col (jordan_matrix ?n_as) = sum_list (map fst ?n_as)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Jordan_Normal_Form.jordan_matrix_dim",
     "dim_row (jordan_matrix ?n_as) = sum_list (map fst ?n_as)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Jordan_Normal_Form.jordan_block_pow_dim",
     "dim_col (jordan_block ?n ?a ^\<^sub>m ?r) = ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_var 2)),
    ("Jordan_Normal_Form.jordan_block_pow_dim",
     "dim_row (jordan_block ?n ?a ^\<^sub>m ?r) = ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_var 2)),
    ("Jordan_Normal_Form.jordan_matrix_concat_diag_block_mat",
     "jordan_matrix (concat ?jbs) =
      diag_block_mat (map jordan_matrix ?jbs)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 3),
           template_var 0)))),
    ("Jordan_Normal_Form.jordan_block_pow_carrier",
     "jordan_block ?n ?a ^\<^sub>m ?r : carrier_mat ?n ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 2))
         )),
    ("Jordan_Normal_Form.char_matrix_jordan_block",
     "char_matrix (jordan_block ?n ?a) ?b = jordan_block ?n (?a - ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Jordan_Normal_Form.diag_jordan_block_pow",
     "diag_mat (jordan_block ?n ?a ^\<^sub>m ?k) = replicate ?n (?a ^ ?k)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Jordan_Normal_Form.jordan_matrix_carrier",
     "jordan_matrix ?n_as
      : carrier_mat (sum_list (map fst ?n_as)) (sum_list (map fst ?n_as))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))))
         )),
    ("Jordan_Normal_Form.jordan_block_char_poly",
     "char_poly (jordan_block ?n ?a) = [:- ?a, 1::?'a:] ^ ?n",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 3, template_hole 1),
               template_hole 0))),
         template_var 1))),
    ("Jordan_Normal_Form.norm_bound_bridge",
     "ALL e:elements_mat ?A. norm e <= ?b ==> norm_bound ?A ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Jordan_Normal_Form.choose_poly_bound",
     "?i <= ?d ==> ?r choose ?i <= max 1 (?r ^ ?d)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Jordan_Normal_Form.jordan_matrix_pow",
     "jordan_matrix ?n_as ^\<^sub>m ?r =
      diag_block_mat (map (%(n, a). jordan_block n a ^\<^sub>m ?r) ?n_as)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 1)))),
    ("Jordan_Normal_Form.jordan_matrix_char_poly",
     "char_poly (jordan_matrix ?n_as) =
      (PROD (n, a)<-?n_as. [:- a, 1::?'a:] ^ n)",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, template_var 0)),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_var 0)))),
    ("Jordan_Normal_Form.jordan_nf_block_size_order_bound",
     "[| jordan_nf ?A ?n_as; (?n, ?a) : set ?n_as |]
      ==> ?n <= order ?a (char_poly ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app (template_hole 3, template_var 2))
            )],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 3))))),
    ("Jordan_Normal_Form.jordan_nf_order",
     "jordan_nf ?A ?n_as ==>
      order ?a (char_poly ?A) =
      sum_list (map fst (filter (%na. snd na = ?a) ?n_as))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0),
           template_app (template_hole 6, template_var 2)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, t_empty),
               template_var 1)))))),
    ("Jordan_Normal_Form.jordan_matrix_upper_triangular",
     "[| ?i < sum_list (map fst ?n_as); ?j < ?i |]
      ==> jordan_matrix ?n_as $$ (?i, ?j) = (0::?'a)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 1))),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_hole 0))),
    ("Jordan_Normal_Form.jordan_nf_char_poly",
     "jordan_nf ?A ?n_as ==>
      char_poly ?A = (PROD (n, a)<-?n_as. [:- a, 1::?'a:] ^ n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 8, template_var 1),
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_var 0))))),
    ("Jordan_Normal_Form.similar_mat_jordan_matrix_smult",
     "?k ~= (0::?'a) ==>
      similar_mat (?k \<cdot>\<^sub>m jordan_matrix ?n_as)
       (jordan_matrix (map (%(n, a). (n, ?k * a)) ?n_as))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app (template_hole 4, template_var 0))),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, t_empty)),
                 template_var 0)))
           ))),
    ("Jordan_Normal_Form.similar_mat_jordan_block_smult",
     "[| similar_mat ?A (jordan_block ?n ?a); ?k ~= (0::?'a) |]
      ==> similar_mat (?k \<cdot>\<^sub>m ?A) (jordan_block ?n (?k * ?a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 3)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Jordan_Normal_Form.jordan_block_zero_pow",
     "jordan_block ?n (0::?'a) ^\<^sub>m ?k =
      mat ?n ?n
       (%(i, j). if i <= j & j - i = ?k then 1::?'a else (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 1),
             template_hole 8)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 7, template_var 1), template_var 1),
         template_app (template_hole 6, t_empty)))),
    ("Jordan_Normal_Form.jordan_matrix_Cons",
     "jordan_matrix ((?n, ?a) # ?n_as) =
      four_block_mat (jordan_block ?n ?a)
       (0\<^sub>m ?n (sum_list (map fst ?n_as)))
       (0\<^sub>m (sum_list (map fst ?n_as)) ?n) (jordan_matrix ?n_as)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0))),
             template_var 2)),
         template_app (template_hole 8, template_var 0)))),
    ("Jordan_Normal_Form.jordan_nf_smult",
     "[| jordan_nf ?A ?n_as; ?k ~= (0::?'a) |]
      ==> jordan_nf (?k \<cdot>\<^sub>m ?A)
           (map (%(n, a). (n, ?k * a)) ?n_as)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_var 1))
           ))),
    ("Jordan_Normal_Form.jordan_nf_diag_block_mat",
     "(!!A jbs. (A, jbs) : set ?Ms ==> jordan_nf A jbs) ==>
      jordan_nf (diag_block_mat (map fst ?Ms)) (concat (map snd ?Ms))",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)))
           ))),
    ("Jordan_Normal_Form.poly_exp_constant_bound",
     "[| (0::?'a) < ?b; ?b < (1::?'a) |]
      ==> EX p. ALL x. ?c * ?b ^ x * of_nat x ^ ?deg <= p",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2),
        template_inequation (less_than, template_var 2, template_hole 6)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Jordan_Normal_Form.norm_bound_max",
     "norm_bound ?A
       (Max {norm (?A $$ (i, j)) |i j. i < dim_row ?A & j < dim_col ?A})",
     template_predicate
      (
         template_app
          (template_app (template_hole 11, template_var 0),
           template_app
            (template_hole 10, template_app (template_hole 9, t_empty)))
         )),
    ("Jordan_Normal_Form.poly_exp_max_constant_bound",
     "[| (0::?'a) < ?b; ?b < (1::?'a) |]
      ==> EX p. ALL x. ?c * ?b ^ x * max (1::?'a) (of_nat x ^ ?deg) <= p",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2),
        template_inequation (less_than, template_var 2, template_hole 7)],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Jordan_Normal_Form.norm_boundI",
     "(!!i j.
          [| i < dim_row ?A; j < dim_col ?A |]
          ==> norm (?A $$ (i, j)) <= ?b) ==>
      norm_bound ?A ?b",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Jordan_Normal_Form.jordan_block_index",
     "[| ?i < ?n; ?j < ?n |]
      ==> jordan_block ?n ?a $$ (?i, ?j) =
          (if ?i = ?j then ?a
           else if Suc ?i = ?j then 1::?'a else (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 0)),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 1))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 1)),
                 template_var 0),
               template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 3)),
                       template_var 1)),
                   template_hole 1),
                 template_hole 0))
             )))),
    ("Jordan_Normal_Form.jordan_block_pow",
     "jordan_block ?n ?a ^\<^sub>m ?r =
      mat ?n ?n
       (%(i, j).
           if i <= j then of_nat (?r choose (j - i)) * ?a ^ (?r + i - j)
           else (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 10, template_var 2), template_var 2),
         template_app (template_hole 9, t_empty)))),
    ("Jordan_Normal_Form.jordan_block_constant_bound2",
     "EX p. norm ?a < 1 -->
            (ALL i j k.
                i < ?n -->
                j < ?n -->
                norm ((jordan_block ?n ?a ^\<^sub>m k) $$ (i, j)) <= p)",
     template_predicate (template_app (template_hole 11, t_empty))),
    ("Jordan_Normal_Form.jordan_block_constant_bound",
     "norm ?a < 1 ==>
      EX p. ALL i j k.
               i < ?n -->
               j < ?n -->
               norm ((jordan_block ?n ?a ^\<^sub>m k) $$ (i, j)) <= p",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 10, template_var 1),
          template_hole 9)],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Jordan_Normal_Form.norm_bound_mult",
     "[| ?A1.0 : carrier_mat ?nr ?n; ?A2.0 : carrier_mat ?n ?nc;
         norm_bound ?A1.0 ?b1.0; norm_bound ?A2.0 ?b2.0 |]
      ==> norm_bound (?A1.0 * ?A2.0) (?b1.0 * ?b2.0 * real ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 6),
              template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 4),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 6),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 6),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_app (template_hole 0, template_var 4)))
           ))),
    ("Jordan_Normal_Form.jordan_block_poly_bound",
     "[| ?i < ?n; ?j < ?n; norm ?a = 1 |]
      ==> norm ((jordan_block ?n ?a ^\<^sub>m ?k) $$ (?i, ?j))
          <= max 1 (real ?k ^ (?n - 1))",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_inequation (less_than, template_var 2, template_var 3),
        template_equation
         (template_app (template_hole 11, template_var 1),
          template_hole 10)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 1)),
                 template_var 0)),
             template_app
              (template_app (template_hole 5, template_var 4),
               template_var 2))),
         template_app
          (template_app (template_hole 4, template_hole 10),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_hole 0)))))),
    ("Jordan_Normal_Form.jordan_block_bound",
     "[| ?i < ?n; ?j < ?n |]
      ==> norm ((jordan_block ?n ?a ^\<^sub>m ?k) $$ (?i, ?j))
          <= norm ?a ^ (?k + ?i - ?j) * max 1 (real ?k ^ (?n - 1))",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_inequation (less_than, template_var 2, template_var 3)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 12,
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 3),
                     template_var 1)),
                 template_var 0)),
             template_app
              (template_app (template_hole 8, template_var 4),
               template_var 2))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 12, template_var 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 4)),
                 template_var 2))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 0)),
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_hole 0))))))),
    ("Jordan_Normal_Form.jordan_matrix_poly_bound",
     "[| !!n a. [| (n, a) : set ?n_as; 0 < n |] ==> norm a <= 1;
         !!n a. [| (n, a) : set ?n_as; norm a = 1 |] ==> n <= ?N |]
      ==> EX c1.
             ALL k.
                norm_bound (jordan_matrix ?n_as ^\<^sub>m k)
                 (c1 + real k ^ (?N - 1))",
     template_implication
      ([template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Jordan_Normal_Form.jordan_matrix_poly_bound2",
     "[| !!n a. [| (n, a) : set ?n_as; 0 < n |] ==> norm a <= 1;
         !!n a. [| (n, a) : set ?n_as; norm a = 1 |] ==> n <= ?N |]
      ==> EX c1.
             ALL k.
                ALL e:elements_mat (jordan_matrix ?n_as ^\<^sub>m k).
                   norm e <= c1 + real k ^ (?N - 1)",
     template_implication
      ([template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate (template_app (template_hole 23, t_empty))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Jordan_Normal_Form.jordan_nf_powE",
     "[| ?A : carrier_mat ?n ?n; jordan_nf ?A ?n_as;
         !!P Q.
            [| P : carrier_mat ?n ?n; Q : carrier_mat ?n ?n;
               char_poly ?A = (PROD (na, a)<-?n_as. [:- a, 1::?'a:] ^ na);
               !!k. ?A ^\<^sub>m k =
                    P * jordan_matrix ?n_as ^\<^sub>m k * Q |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 3),
              template_app
               (template_app (template_hole 17, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 3),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate (template_var 0))),
    ("Jordan_Normal_Form.jordan_nf_matrix_poly_bound",
     "[| ?A : carrier_mat ?n ?n;
         !!n a. [| (n, a) : set ?n_as; 0 < n |] ==> norm a <= 1;
         !!n a. [| (n, a) : set ?n_as; norm a = 1 |] ==> n <= ?N;
         jordan_nf ?A ?n_as |]
      ==> EX c1 c2.
             ALL k.
                norm_bound (?A ^\<^sub>m k) (c1 + c2 * real k ^ (?N - 1))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 3),
              template_app
               (template_app (template_hole 23, template_var 2),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Jordan_Normal_Form.factored_char_poly_norm_bound",
     "[| ?A : carrier_mat ?n ?n;
         char_poly ?A = (PROD a<-?as. [:- a, 1::?'a:]);
         EX n_as. jordan_nf ?A n_as; !!a. a : set ?as ==> norm a <= 1;
         !!a. [| a : set ?as; norm a = 1 |]
              ==> length (filter ((=) a) ?as) <= ?N |]
      ==> EX c1 c2.
             ALL k.
                norm_bound (?A ^\<^sub>m k) (c1 + c2 * real k ^ (?N - 1))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 32, template_var 3),
              template_app
               (template_app (template_hole 31, template_var 2),
                template_var 2))
            ),
        template_equation
         (template_app (template_hole 29, template_var 3),
          template_app
           (template_hole 28,
            template_app
             (template_app (template_hole 27, t_empty), template_var 1))),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_predicate (template_app (template_hole 9, t_empty))))]
