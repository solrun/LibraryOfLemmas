Loading theory "Draft.NetworkCore" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.NetworkModels" via "Draft.DatatypeAddress")
Loading theory "Draft.LTL_alike" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.StatefulFW" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore")
Loading theory "Draft.Ports" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.PacketFilter")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DMZIntegerTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Ports"
### 0.039s elapsed time, 0.179s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DMZIntegerTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.508s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DMZIntegerTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "{}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.186s elapsed time, 0.727s cpu time, 0.096s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.DMZIntegerTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.297s elapsed time, 1.172s cpu time, 0.173s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DMZIntegerTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.LTL_alike"
### 0.694s elapsed time, 2.629s cpu time, 0.618s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DMZIntegerTemplates" via "Draft.ExtrEqs")
### theory "Draft.NetworkCore"
### 0.786s elapsed time, 2.993s cpu time, 0.669s GC time
Loading theory "Draft.DatatypeAddress" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.NetworkModels")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "Draft.DatatypeAddress"
### 0.414s elapsed time, 1.631s cpu time, 0.130s GC time
Loading theory "Draft.DatatypePort" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.NetworkModels")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.959s elapsed time, 3.649s cpu time, 0.708s GC time
Loading theory "Draft.IPv4" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.NetworkModels")
Found termination order: "size <*mlex*> {}"
overloading
  src_port_ipv4 \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_ipv4 \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_ipv4 \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
### theory "Draft.IPv4"
### 0.053s elapsed time, 0.207s cpu time, 0.000s GC time
Loading theory "Draft.IPv4_TCPUDP" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.NetworkModels")
Found termination order: "size <*mlex*> {}"
overloading
  src_port_ipv4_TCPUDP \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_ipv4_TCPUDP \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_ipv4_TCPUDP \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
overloading
  dest_protocol_ipv4_TCPUDP \<equiv> dest_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
### theory "Draft.IPv4_TCPUDP"
### 0.065s elapsed time, 0.258s cpu time, 0.000s GC time
Loading theory "Draft.IntegerAddress" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.NetworkModels")
### theory "HOL-Library.BigO"
### 0.726s elapsed time, 2.854s cpu time, 0.263s GC time
Loading theory "Draft.IntegerPort" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.NetworkModels")
Found termination order: "size <*mlex*> {}"
### theory "Draft.IntegerAddress"
### 0.046s elapsed time, 0.180s cpu time, 0.071s GC time
Loading theory "Draft.IntegerPort_TCPUDP" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.NetworkModels")
overloading
  src_port_int \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_int \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_int \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
### theory "Draft.IntegerPort"
### 0.065s elapsed time, 0.250s cpu time, 0.071s GC time
Loading theory "Draft.PolicyCore" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators" via "Draft.PortCombinators" via "Draft.PolicyCombinators")
overloading
  src_port_int_TCPUDP \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_int_TCPUDP \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_int_TCPUDP \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
overloading
  src_protocol_int_TCPUDP \<equiv> src_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
Found termination order: "size <*mlex*> {}"
overloading
  dest_protocol_int_TCPUDP \<equiv> dest_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
### theory "Draft.IntegerPort_TCPUDP"
### 0.074s elapsed time, 0.289s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
overloading
  src_port_datatype \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_datatype \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_datatype \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
Found termination order: "size <*mlex*> {}"
### theory "Draft.DatatypePort"
### 0.422s elapsed time, 1.603s cpu time, 0.153s GC time
Loading theory "Draft.NetworkModels" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.PacketFilter")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.PolicyCore"
### 0.431s elapsed time, 1.403s cpu time, 0.635s GC time
Loading theory "Draft.PolicyCombinators" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators" via "Draft.PortCombinators")
Found termination order: "size <*mlex*> {}"
### theory "Draft.PolicyCombinators"
### 0.074s elapsed time, 0.223s cpu time, 0.000s GC time
Loading theory "Draft.PortCombinators" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.PortCombinators"
### 0.173s elapsed time, 0.525s cpu time, 0.031s GC time
Loading theory "Draft.ProtocolPortCombinators" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.PacketFilter")
Found termination order: "size <*mlex*> {}"
### theory "Draft.NetworkModels"
### 0.741s elapsed time, 2.281s cpu time, 0.718s GC time
### theory "Draft.ProtocolPortCombinators"
### 0.202s elapsed time, 0.607s cpu time, 0.052s GC time
Loading theory "Draft.PacketFilter" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall")
### theory "HOL-Library.Tree"
### 2.141s elapsed time, 7.395s cpu time, 1.498s GC time
Loading theory "Draft.Templates" (required by "Draft.DMZIntegerTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.151s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DMZIntegerTemplates")
### theory "Draft.PacketFilter"
### 0.269s elapsed time, 0.569s cpu time, 0.000s GC time
Loading theory "Draft.FWNormalisationCore" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs")
Loading theory "Draft.NAT" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall")
Loading theory "Draft.StatefulCore" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.StatefulFW" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP")
### theory "Draft.NAT"
### 0.304s elapsed time, 1.194s cpu time, 0.148s GC time
Found termination order:
  "(%p. size_list (%p. size (snd (snd p))) (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd p))) (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd p))) (snd p)) <*mlex*> {}"
### theory "Draft.StatefulCore"
### 0.559s elapsed time, 1.979s cpu time, 0.229s GC time
Loading theory "Draft.FTP" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.StatefulFW" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy")
Loading theory "Draft.VOIP" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.StatefulFW" via "Draft.FTPVOIP")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.704s elapsed time, 2.346s cpu time, 0.229s GC time
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd (snd p))) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p))))
         (snd (snd (snd (snd (snd p)))))) <*mlex*>
   {}"
### theory "Draft.FTP"
### 2.007s elapsed time, 6.273s cpu time, 0.565s GC time
Loading theory "Draft.FTP_WithPolicy" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.StatefulFW" via "Draft.FTPVOIP")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.FTP_WithPolicy"
### 0.453s elapsed time, 1.433s cpu time, 0.149s GC time
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p))))
         (snd (snd (snd (snd (snd (snd (snd p)))))))) <*mlex*>
   {}"
### theory "Draft.VOIP"
### 3.150s elapsed time, 9.179s cpu time, 0.867s GC time
Loading theory "Draft.FTPVOIP" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.StatefulFW")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> length <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.FWNormalisationCore"
### 7.776s elapsed time, 21.131s cpu time, 3.794s GC time
Loading theory "Draft.ElementaryRules" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.FWNormalisation")
Loading theory "Draft.NormalisationGenericProofs" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof")
### theory "Draft.ElementaryRules"
### 0.040s elapsed time, 0.157s cpu time, 0.000s GC time
### theory "Draft.NormalisationGenericProofs"
### 0.813s elapsed time, 1.743s cpu time, 0.218s GC time
Loading theory "Draft.NormalisationIntegerPortProof" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs")
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p))))
         (snd (snd (snd (snd (snd (snd (snd p)))))))) <*mlex*>
   {}"
### Ambiguous input (line 1767 of "$AFP/UPF_Firewall/FWNormalisation/NormalisationIntegerPortProof.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" N) ("\<^const>List.list.Nil")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" F)
###         ("_applC" ("_position" C)
###           ("_applC" ("_position" list2policyR) ("_position" N)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_policy_range_comp"
###           ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###             ("_position" x))
###           ("\<^const>ParallelComposition.prod_2" ("_position" NAT)
###             ("\<^const>Fun.comp" ("_position" F)
###               ("_lambda" ("_position" x)
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" x)))))))
###         ("_applC" ("_position" list2policy)
###           ("_applC"
###             ("\<^const>Normalisation.prod_list" ("_position" NAT)
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" C) ("_position" N))))
###             ("_cargs" ("\<^const>ParallelComposition.prod_2")
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                   ("_position" x))
###                 ("_lambda" ("_position" x)
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" x))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" N) ("\<^const>List.list.Nil")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" F)
###         ("_applC" ("_position" C)
###           ("_applC" ("_position" list2policyR) ("_position" N)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_policy_range_comp"
###           ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###             ("_position" x))
###           ("\<^const>Fun.comp"
###             ("\<^const>ParallelComposition.prod_2" ("_position" NAT)
###               ("_position" F))
###             ("_lambda" ("_position" x)
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" x))))))
###         ("_applC" ("_position" list2policy)
###           ("_applC"
###             ("\<^const>Normalisation.prod_list" ("_position" NAT)
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" C) ("_position" N))))
###             ("_cargs" ("\<^const>ParallelComposition.prod_2")
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                   ("_position" x))
###                 ("_lambda" ("_position" x)
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" x))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1806 of "$AFP/UPF_Firewall/FWNormalisation/NormalisationIntegerPortProof.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" DenyAll)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" policy2list) ("_position" Filter)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" allNetsDistinct)
###         ("_applC" ("_position" policy2list) ("_position" Filter))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" all_in_list)
###           ("_cargs"
###             ("_applC" ("_position" policy2list) ("_position" Filter))
###             ("_applC" ("_position" Nets_List) ("_position" Filter)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_policy_range_comp"
###             ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###               ("_position" x))
###             ("\<^const>ParallelComposition.prod_2" ("_position" NAT)
###               ("\<^const>Fun.comp"
###                 ("_applC" ("_position" C) ("_position" Filter))
###                 ("_lambda" ("_position" x)
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" x)))))))
###           ("_applC" ("_position" list2policy)
###             ("_applC"
###               ("\<^const>Normalisation.prod_list" ("_position" NAT)
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" C)
###                     ("_applC" ("_position" rev)
###                       ("_applC" ("_position" FWNormalisationCore.normalize)
###                         ("_position" Filter))))))
###               ("_cargs" ("\<^const>ParallelComposition.prod_2")
###                 ("_cargs"
###                   ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                     ("_position" x))
###                   ("_lambda" ("_position" x)
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" x)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" DenyAll)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" policy2list) ("_position" Filter)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" allNetsDistinct)
###         ("_applC" ("_position" policy2list) ("_position" Filter))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" all_in_list)
###           ("_cargs"
###             ("_applC" ("_position" policy2list) ("_position" Filter))
###             ("_applC" ("_position" Nets_List) ("_position" Filter)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_policy_range_comp"
###             ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###               ("_position" x))
###             ("\<^const>Fun.comp"
###               ("\<^const>ParallelComposition.prod_2" ("_position" NAT)
###                 ("_applC" ("_position" C) ("_position" Filter)))
###               ("_lambda" ("_position" x)
###                 ("_tuple" ("_position" x) ("_tuple_arg" ("_position" x))))))
###           ("_applC" ("_position" list2policy)
###             ("_applC"
###               ("\<^const>Normalisation.prod_list" ("_position" NAT)
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" C)
###                     ("_applC" ("_position" rev)
###                       ("_applC" ("_position" FWNormalisationCore.normalize)
###                         ("_position" Filter))))))
###               ("_cargs" ("\<^const>ParallelComposition.prod_2")
###                 ("_cargs"
###                   ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                     ("_position" x))
###                   ("_lambda" ("_position" x)
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" x)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.NormalisationIntegerPortProof"
### 0.862s elapsed time, 1.834s cpu time, 0.221s GC time
Loading theory "Draft.NormalisationIPPProofs" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall" via "Draft.FWNormalisation")
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p))))
         (snd (snd (snd (snd (snd p)))))) <*mlex*>
   {}"
### theory "Draft.FTPVOIP"
### 5.932s elapsed time, 14.033s cpu time, 3.205s GC time
Loading theory "Draft.StatefulFW" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall")
### theory "Draft.StatefulFW"
### 0.022s elapsed time, 0.046s cpu time, 0.000s GC time
### theory "Draft.NormalisationIPPProofs"
### 0.883s elapsed time, 1.161s cpu time, 0.195s GC time
Loading theory "Draft.FWNormalisation" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger" via "Draft.UPF-Firewall")
### theory "Draft.FWNormalisation"
### 0.089s elapsed time, 0.090s cpu time, 0.000s GC time
Loading theory "Draft.UPF-Firewall" (required by "Draft.DMZIntegerTemplates" via "Draft.DMZInteger")
### theory "Draft.UPF-Firewall"
### 0.379s elapsed time, 0.418s cpu time, 0.000s GC time
Loading theory "Draft.DMZInteger" (required by "Draft.DMZIntegerTemplates")
### theory "Draft.DMZInteger"
### 0.080s elapsed time, 0.080s cpu time, 0.000s GC time
Loading theory "Draft.DMZIntegerTemplates"
val templateLemmas =
   [("DMZInteger.PolicyLemmas", "?a \<sqsubset> ?S = (EX s:?S. ?a : s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), t_empty))),
    ("DMZInteger.PolicyLemmas", "dest_port (?a, ?d, ?x, ?e) = snd ?x",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app (template_hole 0, template_var 1))),
    ("DMZInteger.PolicyLemmas", "src_port (?a, ?x, ?d, ?e) = snd ?x",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app (template_hole 0, template_var 2)))]:
   (string * thm * template) list
### theory "Draft.DMZIntegerTemplates"
### 0.592s elapsed time, 0.800s cpu time, 0.113s GC time
val it = (): unit
