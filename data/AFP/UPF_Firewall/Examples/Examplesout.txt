Loading theory "Draft.NetworkCore" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.NetworkModels" via "Draft.DatatypeAddress")
Loading theory "Draft.LTL_alike" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.StatefulFW" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore")
Loading theory "Draft.Ports" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.PacketFilter")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ExamplesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Ports"
### 0.044s elapsed time, 0.193s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ExamplesTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.590s cpu time, 0.055s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ExamplesTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.299s elapsed time, 1.174s cpu time, 0.142s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ExamplesTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.248s elapsed time, 0.981s cpu time, 0.087s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ExamplesTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.LTL_alike"
### 0.645s elapsed time, 2.447s cpu time, 0.526s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ExamplesTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
### theory "Draft.NetworkCore"
### 0.849s elapsed time, 3.249s cpu time, 0.581s GC time
Loading theory "Draft.DatatypeAddress" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.NetworkModels")
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "Draft.DatatypeAddress"
### 0.408s elapsed time, 1.612s cpu time, 0.148s GC time
Loading theory "Draft.DatatypePort" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.NetworkModels")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 0.942s elapsed time, 3.600s cpu time, 0.678s GC time
Loading theory "Draft.IPv4" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.NetworkModels")
overloading
  src_port_ipv4 \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_ipv4 \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_ipv4 \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
Found termination order: "size <*mlex*> {}"
### theory "Draft.IPv4"
### 0.056s elapsed time, 0.223s cpu time, 0.000s GC time
Loading theory "Draft.IPv4_TCPUDP" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.NetworkModels")
overloading
  src_port_ipv4_TCPUDP \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_ipv4_TCPUDP \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_ipv4_TCPUDP \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
Found termination order: "size <*mlex*> {}"
overloading
  dest_protocol_ipv4_TCPUDP \<equiv> dest_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
### theory "HOL-Library.BigO"
### 0.753s elapsed time, 2.968s cpu time, 0.294s GC time
Loading theory "Draft.IntegerAddress" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.NetworkModels")
### theory "Draft.IPv4_TCPUDP"
### 0.067s elapsed time, 0.269s cpu time, 0.000s GC time
Loading theory "Draft.IntegerPort" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.NetworkModels")
### theory "Draft.IntegerAddress"
### 0.026s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.IntegerPort_TCPUDP" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.NetworkModels")
overloading
  src_port_int \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_int \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_int \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
Found termination order: "size <*mlex*> {}"
overloading
  src_port_int_TCPUDP \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
### theory "Draft.IntegerPort"
### 0.072s elapsed time, 0.277s cpu time, 0.079s GC time
Loading theory "Draft.PolicyCore" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators" via "Draft.PortCombinators" via "Draft.PolicyCombinators")
overloading
  dest_port_int_TCPUDP \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_int_TCPUDP \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
overloading
  src_protocol_int_TCPUDP \<equiv> src_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
overloading
  dest_protocol_int_TCPUDP \<equiv> dest_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
### theory "Draft.IntegerPort_TCPUDP"
### 0.102s elapsed time, 0.392s cpu time, 0.079s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
overloading
  src_port_datatype \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_datatype \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_datatype \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
Found termination order: "size <*mlex*> {}"
### theory "Draft.DatatypePort"
### 0.716s elapsed time, 2.480s cpu time, 0.939s GC time
Loading theory "Draft.NetworkModels" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.PacketFilter")
### theory "Draft.PolicyCore"
### 0.499s elapsed time, 1.611s cpu time, 0.770s GC time
Loading theory "Draft.PolicyCombinators" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators" via "Draft.PortCombinators")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.PolicyCombinators"
### 0.074s elapsed time, 0.220s cpu time, 0.000s GC time
Loading theory "Draft.PortCombinators" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.PortCombinators"
### 0.178s elapsed time, 0.542s cpu time, 0.040s GC time
Loading theory "Draft.ProtocolPortCombinators" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.PacketFilter")
### theory "Draft.ProtocolPortCombinators"
### 0.208s elapsed time, 0.633s cpu time, 0.066s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.NetworkModels"
### 0.543s elapsed time, 1.584s cpu time, 0.106s GC time
Loading theory "Draft.PacketFilter" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall")
### theory "HOL-Library.Tree"
### 2.227s elapsed time, 7.551s cpu time, 1.633s GC time
Loading theory "Draft.Templates" (required by "Draft.ExamplesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.138s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ExamplesTemplates")
### theory "Draft.PacketFilter"
### 0.286s elapsed time, 0.638s cpu time, 0.075s GC time
Loading theory "Draft.FWNormalisationCore" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs")
Loading theory "Draft.NAT" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall")
Loading theory "Draft.StatefulCore" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.StatefulFW" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP")
### theory "Draft.NAT"
### 0.257s elapsed time, 1.016s cpu time, 0.080s GC time
Found termination order:
  "(%p. size_list (%p. size (snd (snd p))) (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd p))) (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.642s elapsed time, 2.115s cpu time, 0.241s GC time
Found termination order:
  "(%p. size_list (%p. size (snd (snd p))) (snd p)) <*mlex*> {}"
### theory "Draft.StatefulCore"
### 0.554s elapsed time, 1.910s cpu time, 0.166s GC time
Loading theory "Draft.FTP" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.StatefulFW" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy")
Loading theory "Draft.VOIP" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.StatefulFW" via "Draft.FTPVOIP")
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p))))
         (snd (snd (snd (snd (snd p)))))) <*mlex*>
   {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.FTP"
### 2.018s elapsed time, 6.298s cpu time, 0.637s GC time
Loading theory "Draft.FTP_WithPolicy" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.StatefulFW" via "Draft.FTPVOIP")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.FTP_WithPolicy"
### 0.432s elapsed time, 1.353s cpu time, 0.071s GC time
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p))))
         (snd (snd (snd (snd (snd (snd (snd p)))))))) <*mlex*>
   {}"
### theory "Draft.VOIP"
### 3.140s elapsed time, 9.119s cpu time, 0.857s GC time
Loading theory "Draft.FTPVOIP" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.StatefulFW")
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> length <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.FWNormalisationCore"
### 7.063s elapsed time, 18.677s cpu time, 1.754s GC time
Loading theory "Draft.ElementaryRules" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.FWNormalisation")
Loading theory "Draft.NormalisationGenericProofs" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof")
### theory "Draft.ElementaryRules"
### 0.043s elapsed time, 0.173s cpu time, 0.000s GC time
### theory "Draft.NormalisationGenericProofs"
### 0.819s elapsed time, 1.761s cpu time, 0.195s GC time
Loading theory "Draft.NormalisationIntegerPortProof" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs")
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p))))
         (snd (snd (snd (snd (snd (snd (snd p)))))))) <*mlex*>
   {}"
### Ambiguous input (line 1767 of "$AFP/UPF_Firewall/FWNormalisation/NormalisationIntegerPortProof.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" N) ("\<^const>List.list.Nil")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" F)
###         ("_applC" ("_position" C)
###           ("_applC" ("_position" list2policyR) ("_position" N)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_policy_range_comp"
###           ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###             ("_position" x))
###           ("\<^const>ParallelComposition.prod_2" ("_position" NAT)
###             ("\<^const>Fun.comp" ("_position" F)
###               ("_lambda" ("_position" x)
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" x)))))))
###         ("_applC" ("_position" list2policy)
###           ("_applC"
###             ("\<^const>Normalisation.prod_list" ("_position" NAT)
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" C) ("_position" N))))
###             ("_cargs" ("\<^const>ParallelComposition.prod_2")
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                   ("_position" x))
###                 ("_lambda" ("_position" x)
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" x))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" N) ("\<^const>List.list.Nil")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" F)
###         ("_applC" ("_position" C)
###           ("_applC" ("_position" list2policyR) ("_position" N)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_policy_range_comp"
###           ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###             ("_position" x))
###           ("\<^const>Fun.comp"
###             ("\<^const>ParallelComposition.prod_2" ("_position" NAT)
###               ("_position" F))
###             ("_lambda" ("_position" x)
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" x))))))
###         ("_applC" ("_position" list2policy)
###           ("_applC"
###             ("\<^const>Normalisation.prod_list" ("_position" NAT)
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" C) ("_position" N))))
###             ("_cargs" ("\<^const>ParallelComposition.prod_2")
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                   ("_position" x))
###                 ("_lambda" ("_position" x)
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" x))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1806 of "$AFP/UPF_Firewall/FWNormalisation/NormalisationIntegerPortProof.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" DenyAll)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" policy2list) ("_position" Filter)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" allNetsDistinct)
###         ("_applC" ("_position" policy2list) ("_position" Filter))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" all_in_list)
###           ("_cargs"
###             ("_applC" ("_position" policy2list) ("_position" Filter))
###             ("_applC" ("_position" Nets_List) ("_position" Filter)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_policy_range_comp"
###             ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###               ("_position" x))
###             ("\<^const>ParallelComposition.prod_2" ("_position" NAT)
###               ("\<^const>Fun.comp"
###                 ("_applC" ("_position" C) ("_position" Filter))
###                 ("_lambda" ("_position" x)
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" x)))))))
###           ("_applC" ("_position" list2policy)
###             ("_applC"
###               ("\<^const>Normalisation.prod_list" ("_position" NAT)
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" C)
###                     ("_applC" ("_position" rev)
###                       ("_applC" ("_position" FWNormalisationCore.normalize)
###                         ("_position" Filter))))))
###               ("_cargs" ("\<^const>ParallelComposition.prod_2")
###                 ("_cargs"
###                   ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                     ("_position" x))
###                   ("_lambda" ("_position" x)
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" x)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" DenyAll)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" policy2list) ("_position" Filter)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" allNetsDistinct)
###         ("_applC" ("_position" policy2list) ("_position" Filter))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" all_in_list)
###           ("_cargs"
###             ("_applC" ("_position" policy2list) ("_position" Filter))
###             ("_applC" ("_position" Nets_List) ("_position" Filter)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_policy_range_comp"
###             ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###               ("_position" x))
###             ("\<^const>Fun.comp"
###               ("\<^const>ParallelComposition.prod_2" ("_position" NAT)
###                 ("_applC" ("_position" C) ("_position" Filter)))
###               ("_lambda" ("_position" x)
###                 ("_tuple" ("_position" x) ("_tuple_arg" ("_position" x))))))
###           ("_applC" ("_position" list2policy)
###             ("_applC"
###               ("\<^const>Normalisation.prod_list" ("_position" NAT)
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" C)
###                     ("_applC" ("_position" rev)
###                       ("_applC" ("_position" FWNormalisationCore.normalize)
###                         ("_position" Filter))))))
###               ("_cargs" ("\<^const>ParallelComposition.prod_2")
###                 ("_cargs"
###                   ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                     ("_position" x))
###                   ("_lambda" ("_position" x)
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" x)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.NormalisationIntegerPortProof"
### 1.559s elapsed time, 4.191s cpu time, 2.423s GC time
Loading theory "Draft.NormalisationIPPProofs" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall" via "Draft.FWNormalisation")
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p))))
         (snd (snd (snd (snd (snd p)))))) <*mlex*>
   {}"
### theory "Draft.FTPVOIP"
### 5.946s elapsed time, 14.065s cpu time, 3.349s GC time
Loading theory "Draft.StatefulFW" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall")
### theory "Draft.StatefulFW"
### 0.023s elapsed time, 0.046s cpu time, 0.000s GC time
### theory "Draft.NormalisationIPPProofs"
### 0.939s elapsed time, 1.163s cpu time, 0.074s GC time
Loading theory "Draft.FWNormalisation" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype" via "Draft.UPF-Firewall")
### theory "Draft.FWNormalisation"
### 0.088s elapsed time, 0.090s cpu time, 0.000s GC time
Loading theory "Draft.UPF-Firewall" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ" via "Draft.DMZDatatype")
### theory "Draft.UPF-Firewall"
### 0.403s elapsed time, 0.504s cpu time, 0.081s GC time
Loading theory "Draft.DMZDatatype" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ")
Loading theory "Draft.DMZInteger" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.DMZ")
Loading theory "Draft.NAT-FW" (required by "Draft.ExamplesTemplates" via "Draft.Examples")
Loading theory "Draft.PersonalFirewallDatatype" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.PersonalFirewall")
### theory "Draft.DMZInteger"
### 0.120s elapsed time, 0.474s cpu time, 0.000s GC time
Loading theory "Draft.PersonalFirewallInt" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.PersonalFirewall")
### theory "Draft.PersonalFirewallInt"
### 0.090s elapsed time, 0.356s cpu time, 0.086s GC time
Loading theory "Draft.PersonalFirewallIpv4" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.PersonalFirewall")
### theory "Draft.PersonalFirewallIpv4"
### 0.078s elapsed time, 0.307s cpu time, 0.000s GC time
Loading theory "Draft.Transformation01" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.Transformation")
### theory "Draft.PersonalFirewallDatatype"
### 0.362s elapsed time, 1.428s cpu time, 0.086s GC time
Loading theory "Draft.PersonalFirewall" (required by "Draft.ExamplesTemplates" via "Draft.Examples")
### theory "Draft.NAT-FW"
### 0.476s elapsed time, 1.877s cpu time, 0.158s GC time
Loading theory "Draft.Transformation02" (required by "Draft.ExamplesTemplates" via "Draft.Examples" via "Draft.Transformation")
### theory "Draft.DMZDatatype"
### 0.503s elapsed time, 1.988s cpu time, 0.158s GC time
Loading theory "Draft.DMZ" (required by "Draft.ExamplesTemplates" via "Draft.Examples")
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Transformation01"
### 0.282s elapsed time, 1.114s cpu time, 0.072s GC time
Loading theory "Draft.Voice_over_IP" (required by "Draft.ExamplesTemplates" via "Draft.Examples")
### theory "Draft.PersonalFirewall"
### 0.273s elapsed time, 1.078s cpu time, 0.072s GC time
### theory "Draft.DMZ"
### 0.135s elapsed time, 0.541s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Transformation02"
### 0.277s elapsed time, 0.921s cpu time, 0.074s GC time
Loading theory "Draft.Transformation" (required by "Draft.ExamplesTemplates" via "Draft.Examples")
Found termination order:
  "(%p. size_list (%p. size (snd (snd p))) (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd p))) (snd p)) <*mlex*> {}"
### theory "Draft.Voice_over_IP"
### 0.293s elapsed time, 0.774s cpu time, 0.074s GC time
### theory "Draft.Transformation"
### 0.167s elapsed time, 0.283s cpu time, 0.000s GC time
Loading theory "Draft.Examples" (required by "Draft.ExamplesTemplates")
### theory "Draft.Examples"
### 0.520s elapsed time, 0.523s cpu time, 0.000s GC time
Loading theory "Draft.ExamplesTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.ExamplesTemplates"
### 0.584s elapsed time, 0.742s cpu time, 0.072s GC time
val it = (): unit
