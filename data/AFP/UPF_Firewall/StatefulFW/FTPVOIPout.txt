Loading theory "Draft.Ports" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore" via "Draft.PacketFilter")
Loading theory "Draft.LTL_alike" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FTPVOIPTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.NetworkCore" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore" via "Draft.PacketFilter" via "Draft.NetworkModels" via "Draft.DatatypeAddress")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Ports"
### 0.045s elapsed time, 0.215s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FTPVOIPTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "{}"
### theory "HOL-Library.Function_Algebras"
### 0.145s elapsed time, 0.595s cpu time, 0.029s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FTPVOIPTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.885s cpu time, 0.092s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FTPVOIPTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.330s elapsed time, 1.295s cpu time, 0.122s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FTPVOIPTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.LTL_alike"
### 0.609s elapsed time, 2.428s cpu time, 0.229s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FTPVOIPTemplates" via "Draft.ExtrEqs")
### theory "Draft.NetworkCore"
### 0.753s elapsed time, 2.991s cpu time, 0.311s GC time
Loading theory "Draft.DatatypeAddress" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "Draft.DatatypeAddress"
### 0.633s elapsed time, 2.365s cpu time, 0.608s GC time
Loading theory "Draft.DatatypePort" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.152s elapsed time, 4.395s cpu time, 0.901s GC time
Loading theory "Draft.IPv4" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
Found termination order: "size <*mlex*> {}"
overloading
  src_port_ipv4 \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_ipv4 \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_ipv4 \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
### theory "Draft.IPv4"
### 0.060s elapsed time, 0.241s cpu time, 0.000s GC time
Loading theory "Draft.IPv4_TCPUDP" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
Found termination order: "size <*mlex*> {}"
overloading
  src_port_ipv4_TCPUDP \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_ipv4_TCPUDP \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_ipv4_TCPUDP \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
overloading
  dest_protocol_ipv4_TCPUDP \<equiv> dest_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
### theory "HOL-Library.BigO"
### 1.073s elapsed time, 4.078s cpu time, 0.876s GC time
Loading theory "Draft.IntegerAddress" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
### theory "Draft.IPv4_TCPUDP"
### 0.101s elapsed time, 0.398s cpu time, 0.083s GC time
Loading theory "Draft.IntegerPort" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
Found termination order: "size <*mlex*> {}"
### theory "Draft.IntegerAddress"
### 0.030s elapsed time, 0.112s cpu time, 0.000s GC time
Loading theory "Draft.IntegerPort_TCPUDP" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
overloading
  src_port_int \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_int \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_int \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
overloading
  src_port_int_TCPUDP \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
### theory "Draft.IntegerPort"
### 0.057s elapsed time, 0.225s cpu time, 0.000s GC time
Loading theory "Draft.PolicyCore" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators" via "Draft.PortCombinators" via "Draft.PolicyCombinators")
overloading
  dest_port_int_TCPUDP \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_int_TCPUDP \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
overloading
  src_protocol_int_TCPUDP \<equiv> src_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
overloading
  dest_protocol_int_TCPUDP \<equiv> dest_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
Found termination order: "size <*mlex*> {}"
### theory "Draft.IntegerPort_TCPUDP"
### 0.087s elapsed time, 0.339s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
overloading
  src_port_datatype \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_datatype \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_datatype \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
### theory "Draft.DatatypePort"
### 0.540s elapsed time, 2.035s cpu time, 0.258s GC time
Loading theory "Draft.NetworkModels" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore" via "Draft.PacketFilter")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.PolicyCore"
### 0.280s elapsed time, 0.916s cpu time, 0.072s GC time
Loading theory "Draft.PolicyCombinators" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators" via "Draft.PortCombinators")
Found termination order: "size <*mlex*> {}"
### theory "Draft.PolicyCombinators"
### 0.067s elapsed time, 0.204s cpu time, 0.000s GC time
Loading theory "Draft.PortCombinators" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.PortCombinators"
### 0.159s elapsed time, 0.478s cpu time, 0.000s GC time
Loading theory "Draft.ProtocolPortCombinators" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore" via "Draft.PacketFilter")
Found termination order: "size <*mlex*> {}"
### theory "Draft.ProtocolPortCombinators"
### 0.175s elapsed time, 0.536s cpu time, 0.058s GC time
### theory "Draft.NetworkModels"
### 0.551s elapsed time, 1.664s cpu time, 0.133s GC time
Loading theory "Draft.PacketFilter" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP" via "Draft.StatefulCore")
### theory "HOL-Library.Tree"
### 2.197s elapsed time, 7.763s cpu time, 1.255s GC time
Loading theory "Draft.Templates" (required by "Draft.FTPVOIPTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.058s elapsed time, 0.131s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FTPVOIPTemplates")
### theory "Draft.PacketFilter"
### 0.290s elapsed time, 0.638s cpu time, 0.066s GC time
Loading theory "Draft.StatefulCore" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy" via "Draft.FTP")
Found termination order:
  "(%p. size_list (%p. size (snd (snd p))) (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd p))) (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.557s elapsed time, 1.176s cpu time, 0.118s GC time
Found termination order:
  "(%p. size_list (%p. size (snd (snd p))) (snd p)) <*mlex*> {}"
### theory "Draft.StatefulCore"
### 0.468s elapsed time, 0.948s cpu time, 0.118s GC time
Loading theory "Draft.FTP" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP" via "Draft.FTP_WithPolicy")
Loading theory "Draft.VOIP" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP")
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p))))
         (snd (snd (snd (snd (snd p)))))) <*mlex*>
   {}"
### theory "Draft.FTP"
### 2.039s elapsed time, 4.773s cpu time, 1.348s GC time
Loading theory "Draft.FTP_WithPolicy" (required by "Draft.FTPVOIPTemplates" via "Draft.FTPVOIP")
Found termination order: "{}"
### theory "Draft.FTP_WithPolicy"
### 0.665s elapsed time, 1.883s cpu time, 1.110s GC time
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p))))
         (snd (snd (snd (snd (snd (snd (snd p)))))))) <*mlex*>
   {}"
### theory "Draft.VOIP"
### 3.406s elapsed time, 7.429s cpu time, 2.533s GC time
Loading theory "Draft.FTPVOIP" (required by "Draft.FTPVOIPTemplates")
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p))))
         (snd (snd (snd (snd (snd (snd (snd p)))))))) <*mlex*>
   {}"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p))))
         (snd (snd (snd (snd (snd p)))))) <*mlex*>
   {}"
### theory "Draft.FTPVOIP"
### 4.316s elapsed time, 5.022s cpu time, 0.474s GC time
Loading theory "Draft.FTPVOIPTemplates"
val templateLemmas =
   [("FTPVOIP.FTPVOIP_ST_simps",
     "A\<^sub>U ?p = \<lfloor>allow ()\<rfloor>",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("FTPVOIP.FTPVOIP_ST_simps", "D\<^sub>U ?p = \<lfloor>deny ()\<rfloor>",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("FTPVOIP.FTPVOIP_ST_simps", "A\<^sub>f ?f = A\<^sub>p (Some o ?f)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("FTPVOIP.FTPVOIP_ST_simps", "?P ?x ==> EX x. ?P x",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("FTPVOIP.FTPVOIP_ST_simps", "?a \<sqsubset> ?S = (EX s:?S. ?a : s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), t_empty))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "p_accept ?p ?pol = (?pol ?p = \<lfloor>allow ()\<rfloor>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_var 0, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "allow_all_from ?src_net =
      {pa. src pa \<sqsubset> ?src_net} \<triangleleft> A\<^sub>U",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_hole 0))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "allow_all_to ?dest_net =
      {pa. dest pa \<sqsubset> ?dest_net} \<triangleleft> A\<^sub>U",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_hole 0))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "deny_all_from ?src_net =
      {pa. src pa \<sqsubset> ?src_net} \<triangleleft> D\<^sub>U",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_hole 0))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "deny_all_to ?dest_net =
      {pa. dest pa \<sqsubset> ?dest_net} \<triangleleft> D\<^sub>U",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_hole 0))),
    ("FTPVOIP.FTPVOIP_ST_simps", "dest_port (?a, ?d, ?x, ?e) = snd ?x",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app (template_hole 0, template_var 1))),
    ("FTPVOIP.FTPVOIP_ST_simps", "src_port (?a, ?x, ?d, ?e) = snd ?x",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))),
       template_app (template_hole 0, template_var 2))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "?m |` ?A = (%x. if x : ?A then ?m x else \<bottom>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       t_empty)),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "?m2.0 \<Oplus> ?m1.0 =
      (%x. case ?m2.0 x of \<bottom> => ?m1.0 x
           | \<lfloor>y\<rfloor> => \<lfloor>y\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       t_empty)),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "allow_all_from_port ?src_net ?s_port =
      {pa. src_port pa = ?s_port} \<triangleleft> allow_all_from ?src_net",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 0, template_var 1)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "allow_all_to_port ?dest_net ?d_port =
      {pa. dest_port pa = ?d_port} \<triangleleft> allow_all_to ?dest_net",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 0, template_var 1)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "deny_all_from_port ?src_net ?s_port =
      {pa. src_port pa = ?s_port} \<triangleleft> deny_all_from ?src_net",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 0, template_var 1)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "deny_all_to_port ?dest_net ?d_port =
      {pa. dest_port pa = ?d_port} \<triangleleft> deny_all_to ?dest_net",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 0, template_var 1)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "allow_all_from_port_to ?src_net ?s_port ?dest_net =
      {pa. src_port pa = ?s_port} \<triangleleft>
      allow_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "allow_all_from_port_tos ?src_net ?s_port ?dest_net =
      {pa. dest_port pa : ?s_port} \<triangleleft>
      allow_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "allow_all_from_to_port ?src_net ?dest_net ?d_port =
      {pa. dest_port pa = ?d_port} \<triangleleft>
      allow_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "allow_from_port_to ?port ?src_net ?dest_net =
      {pa. src_port pa = ?port} \<triangleleft>
      allow_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "allow_from_ports_to ?ports ?src_net ?dest_net =
      {pa. src_port pa : ?ports} \<triangleleft>
      allow_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "allow_from_to_port ?port ?src_net ?dest_net =
      {pa. dest_port pa = ?port} \<triangleleft>
      allow_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "allow_from_to_ports ?ports ?src_net ?dest_net =
      {pa. dest_port pa : ?ports} \<triangleleft>
      allow_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "deny_all_from_port_to ?src_net ?s_port ?dest_net =
      {pa. src_port pa = ?s_port} \<triangleleft>
      deny_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "deny_all_from_to_port ?src_net ?dest_net ?d_port =
      {pa. dest_port pa = ?d_port} \<triangleleft>
      deny_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "deny_from_port_to ?port ?src_net ?dest_net =
      {pa. src_port pa = ?port} \<triangleleft>
      deny_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "deny_from_ports_to ?ports ?src_net ?dest_net =
      {pa. src_port pa : ?ports} \<triangleleft>
      deny_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "deny_from_to_port ?port ?src_net ?dest_net =
      {pa. dest_port pa = ?port} \<triangleleft>
      deny_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "deny_from_to_ports ?ports ?src_net ?dest_net =
      {pa. dest_port pa : ?ports} \<triangleleft>
      deny_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "allow_all_from_to ?src_net ?dest_net =
      {pa.
       src pa \<sqsubset> ?src_net &
       dest pa \<sqsubset> ?dest_net} \<triangleleft>
      A\<^sub>U",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_hole 0))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "deny_all_from_to ?src_net ?dest_net =
      {pa.
       src pa \<sqsubset> ?src_net &
       dest pa \<sqsubset> ?dest_net} \<triangleleft>
      D\<^sub>U",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_hole 0))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "?p1.0 \<Otimes>\<^sub>S ?p2.0 =
      ?p1.0 \<Otimes>\<^sub>M ?p2.0 o (%(a, b, c). ((a, b), a, c))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app (template_hole 4, t_empty)))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "?p1.0 \<Otimes>\<^sub>M ?p2.0 =
      (%(x, y).
          case ?p1.0 x of \<bottom> => \<bottom>
          | \<lfloor>d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>d2\<rfloor> => \<lfloor>(d1, d2)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "?f o\<^sub>f ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow y\<rfloor> => \<lfloor>allow (?f y)\<rfloor>
           | \<lfloor>deny y\<rfloor> => \<lfloor>deny (?f y)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       t_empty)),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "?P \<Delta> ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow y\<rfloor> => \<lfloor>allow (fst ?P x)\<rfloor>
           | \<lfloor>deny y\<rfloor> =>
               \<lfloor>deny (snd ?P x)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       t_empty)),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "?P \<nabla> ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow y\<rfloor> => \<lfloor>allow (fst ?P y)\<rfloor>
           | \<lfloor>deny y\<rfloor> =>
               \<lfloor>deny (snd ?P y)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       t_empty)),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "?m2.0 \<Oplus>\<^sub>A ?m1.0 =
      (%x. case ?m1.0 x of \<bottom> => ?m2.0 x
           | \<lfloor>allow a\<rfloor> => \<lfloor>allow a\<rfloor>
           | \<lfloor>deny a\<rfloor> =>
               case ?m2.0 x of \<bottom> => \<lfloor>deny a\<rfloor>
               | \<lfloor>allow b\<rfloor> => \<lfloor>allow b\<rfloor>
               | \<lfloor>deny \<alpha>\<rfloor> =>
                   \<lfloor>deny a\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       t_empty)),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "?m1.0 \<Oplus>\<^sub>D ?m2.0 =
      (%x. case ?m2.0 x of \<bottom> => ?m1.0 x
           | \<lfloor>allow a\<rfloor> =>
               case ?m1.0 x of \<bottom> => \<lfloor>allow a\<rfloor>
               | \<lfloor>allow \<alpha>\<rfloor> =>
                   \<lfloor>allow a\<rfloor>
               | \<lfloor>deny b\<rfloor> => \<lfloor>deny b\<rfloor>
           | \<lfloor>deny a\<rfloor> => \<lfloor>deny a\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       t_empty)),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "?p1.0 \<Otimes>\<^sub>\<or>\<^sub>A ?p2.0 =
      (%(x, y).
          case ?p1.0 x of \<bottom> => \<bottom>
          | \<lfloor>allow d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>allow d2\<rfloor> =>
                  \<lfloor>allow (d1, d2)\<rfloor>
              | \<lfloor>deny d2\<rfloor> =>
                  \<lfloor>allow (d1, d2)\<rfloor>
          | \<lfloor>deny d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>allow d2\<rfloor> =>
                  \<lfloor>allow (d1, d2)\<rfloor>
              | \<lfloor>deny d2\<rfloor> =>
                  \<lfloor>deny (d1, d2)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app (template_hole 9, t_empty))),
    ("FTPVOIP.FTPVOIP_ST_simps",
     "?p1.0 \<Otimes>\<^sub>\<or>\<^sub>D ?p2.0 =
      (%(x, y).
          case ?p1.0 x of \<bottom> => \<bottom>
          | \<lfloor>allow d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>allow d2\<rfloor> =>
                  \<lfloor>allow (d1, d2)\<rfloor>
              | \<lfloor>deny d2\<rfloor> => \<lfloor>deny (d1, d2)\<rfloor>
          | \<lfloor>deny d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>allow d2\<rfloor> =>
                  \<lfloor>deny (d1, d2)\<rfloor>
              | \<lfloor>deny d2\<rfloor> =>
                  \<lfloor>deny (d1, d2)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app (template_hole 9, t_empty)))]:
   (string * thm * template) list
### theory "Draft.FTPVOIPTemplates"
### 0.505s elapsed time, 0.699s cpu time, 0.066s GC time
val it = (): unit
