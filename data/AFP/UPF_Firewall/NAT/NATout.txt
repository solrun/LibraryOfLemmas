Loading theory "Draft.NetworkCore" (required by "Draft.NATTemplates" via "Draft.NAT" via "Draft.PacketFilter" via "Draft.NetworkModels" via "Draft.DatatypeAddress")
Loading theory "Draft.Ports" (required by "Draft.NATTemplates" via "Draft.NAT" via "Draft.PacketFilter")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.NATTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.NATTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Ports"
### 0.052s elapsed time, 0.248s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.NATTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "HOL-Library.Function_Algebras"
### 0.119s elapsed time, 0.500s cpu time, 0.035s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.NATTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.289s elapsed time, 1.124s cpu time, 0.104s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.NATTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.397s elapsed time, 1.600s cpu time, 0.104s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.NATTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.NetworkCore"
### 0.635s elapsed time, 2.528s cpu time, 0.180s GC time
Loading theory "Draft.DatatypeAddress" (required by "Draft.NATTemplates" via "Draft.NAT" via "Draft.PacketFilter" via "Draft.NetworkModels")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "Draft.DatatypeAddress"
### 0.461s elapsed time, 1.806s cpu time, 0.173s GC time
Loading theory "Draft.DatatypePort" (required by "Draft.NATTemplates" via "Draft.NAT" via "Draft.PacketFilter" via "Draft.NetworkModels")
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.053s elapsed time, 4.020s cpu time, 0.786s GC time
Loading theory "Draft.IPv4" (required by "Draft.NATTemplates" via "Draft.NAT" via "Draft.PacketFilter" via "Draft.NetworkModels")
Found termination order: "size <*mlex*> {}"
overloading
  src_port_ipv4 \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
overloading
  dest_port_ipv4 \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_ipv4 \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "Draft.IPv4"
### 0.077s elapsed time, 0.296s cpu time, 0.044s GC time
Loading theory "Draft.IPv4_TCPUDP" (required by "Draft.NATTemplates" via "Draft.NAT" via "Draft.PacketFilter" via "Draft.NetworkModels")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
overloading
  src_port_ipv4_TCPUDP \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_ipv4_TCPUDP \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
Found termination order: "size <*mlex*> {}"
overloading
  subnet_of_ipv4_TCPUDP \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
overloading
  dest_protocol_ipv4_TCPUDP \<equiv> dest_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
### theory "HOL-Library.Stream"
### 1.134s elapsed time, 4.335s cpu time, 0.829s GC time
Loading theory "Draft.IntegerAddress" (required by "Draft.NATTemplates" via "Draft.NAT" via "Draft.PacketFilter" via "Draft.NetworkModels")
### theory "Draft.IPv4_TCPUDP"
### 0.079s elapsed time, 0.317s cpu time, 0.000s GC time
Loading theory "Draft.IntegerPort" (required by "Draft.NATTemplates" via "Draft.NAT" via "Draft.PacketFilter" via "Draft.NetworkModels")
### theory "Draft.IntegerAddress"
### 0.031s elapsed time, 0.120s cpu time, 0.000s GC time
Loading theory "Draft.IntegerPort_TCPUDP" (required by "Draft.NATTemplates" via "Draft.NAT" via "Draft.PacketFilter" via "Draft.NetworkModels")
overloading
  src_port_int \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  src_port_int_TCPUDP \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_int \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_int_TCPUDP \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_int \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
overloading
  subnet_of_int_TCPUDP \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
overloading
  src_protocol_int_TCPUDP \<equiv> src_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
### theory "Draft.IntegerPort"
### 0.070s elapsed time, 0.277s cpu time, 0.000s GC time
Loading theory "Draft.PolicyCore" (required by "Draft.NATTemplates" via "Draft.NAT" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators" via "Draft.PortCombinators" via "Draft.PolicyCombinators")
overloading
  dest_protocol_int_TCPUDP \<equiv> dest_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.IntegerPort_TCPUDP"
### 0.110s elapsed time, 0.422s cpu time, 0.069s GC time
Found termination order: "size <*mlex*> {}"
overloading
  src_port_datatype \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_datatype \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_datatype \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
### theory "Draft.DatatypePort"
### 0.715s elapsed time, 2.571s cpu time, 0.650s GC time
Loading theory "Draft.NetworkModels" (required by "Draft.NATTemplates" via "Draft.NAT" via "Draft.PacketFilter")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.PolicyCore"
### 0.298s elapsed time, 0.940s cpu time, 0.130s GC time
Loading theory "Draft.PolicyCombinators" (required by "Draft.NATTemplates" via "Draft.NAT" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators" via "Draft.PortCombinators")
### theory "Draft.PolicyCombinators"
### 0.063s elapsed time, 0.191s cpu time, 0.000s GC time
Loading theory "Draft.PortCombinators" (required by "Draft.NATTemplates" via "Draft.NAT" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators")
Found termination order: "size <*mlex*> {}"
### theory "Draft.PortCombinators"
### 0.169s elapsed time, 0.519s cpu time, 0.038s GC time
Loading theory "Draft.ProtocolPortCombinators" (required by "Draft.NATTemplates" via "Draft.NAT" via "Draft.PacketFilter")
### theory "HOL-Library.Tree"
### 2.102s elapsed time, 7.653s cpu time, 1.067s GC time
Loading theory "Draft.Templates" (required by "Draft.NATTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.238s cpu time, 0.052s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.NATTemplates")
### theory "Draft.ProtocolPortCombinators"
### 0.179s elapsed time, 0.542s cpu time, 0.052s GC time
### theory "Draft.NetworkModels"
### 0.546s elapsed time, 1.654s cpu time, 0.152s GC time
Loading theory "Draft.PacketFilter" (required by "Draft.NATTemplates" via "Draft.NAT")
### theory "Draft.PacketFilter"
### 0.264s elapsed time, 0.558s cpu time, 0.000s GC time
Loading theory "Draft.NAT" (required by "Draft.NATTemplates")
### theory "Draft.NAT"
### 0.208s elapsed time, 0.439s cpu time, 0.057s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.550s elapsed time, 1.185s cpu time, 0.057s GC time
Loading theory "Draft.NATTemplates"
val templateLemmas =
   [("NAT.NATLemmas", "src2poolAP ?t = A\<^sub>f (src2pool ?t)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("NAT.NATLemmas",
     "srcNat2pool ?srcs ?transl =
      {x. src x : ?srcs} \<triangleleft> src2poolAP ?transl",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("NAT.NATLemmas",
     "srcNat2pool_IntPort ?srcs ?transl =
      {x. fst (src x) : ?srcs} \<triangleleft>
      A\<^sub>f (src2poolPort ?transl)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("NAT.NATLemmas",
     "srcPat2pool_IntPort ?srcs ?transl =
      {x. fst (src x) : ?srcs} \<triangleleft>
      A\<^sub>f (srcPat2poolPort_t ?transl)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("NAT.NATLemmas",
     "srcNat2pool_IntProtocolPort ?srcs ?transl =
      {x. fst (src x) : ?srcs} \<triangleleft>
      A\<^sub>f (src2poolPort_Protocol ?transl)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("NAT.NATLemmas",
     "srcPat2pool_IntProtocol ?srcs ?transl =
      {x. fst (src x) : ?srcs} \<triangleleft>
      A\<^sub>f (srcPat2poolPort_Protocol_t ?transl)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("NAT.NATLemmas",
     "src2pool ?t =
      (%p. {(i, s, d, da).
            i = NetworkCore.id p & s : ?t & d = dest p & da = content p})",
     template_equation
      (template_app (template_hole 12, template_var 0), t_empty)),
    ("NAT.NATLemmas",
     "srcPat2poolPort_t ?t =
      (%p. {(i, (s1, s2), (d1, d2), da).
            i = NetworkCore.id p &
            s1 : ?t &
            d1 = fst (dest p) & d2 = snd (dest p) & da = content p})",
     template_equation
      (template_app (template_hole 15, template_var 0), t_empty)),
    ("NAT.NATLemmas",
     "src2poolPort ?t =
      (%p. {(i, (s1, s2), (d1, d2), da).
            i = NetworkCore.id p &
            s1 : ?t &
            s2 = snd (src p) &
            d1 = fst (dest p) & d2 = snd (dest p) & da = content p})",
     template_equation
      (template_app (template_hole 16, template_var 0), t_empty)),
    ("NAT.NATLemmas",
     "srcPat2poolPort_Protocol_t ?t =
      (%p. {(i, (s1, s2, s3), (d1, d2, d3), da).
            i = NetworkCore.id p &
            s1 : ?t &
            s3 = src_protocol p & (d1, d2, d3) = dest p & da = content p})",
     template_equation
      (template_app (template_hole 20, template_var 0), t_empty)),
    ("NAT.NATLemmas",
     "src2poolPort_Protocol ?t =
      (%p. {(i, (s1, s2, s3), (d1, d2, d3), da).
            i = NetworkCore.id p &
            s1 : ?t &
            s2 = fst (snd (src p)) &
            s3 = snd (snd (src p)) &
            (d1, d2, d3) = dest p & da = content p})",
     template_equation
      (template_app (template_hole 23, template_var 0), t_empty)),
    ("NAT.datasimp5",
     "{(i, (s1, s2, s3), aba).
       i = ?i1.0 &
       s1 = ?i101.0 &
       s3 = ?iudp &
       (case aba of
        (x, xa) =>
          (case x of
           (a, aa, b) =>
             %ba. a = ?i110.0 & aa = ?X606X3.0 & b = ?X607X4.0 & ba = data)
           xa)} =
      {(i, (s1, s2, s3), (a, aa, b), ba).
       i = ?i1.0 &
       s1 = ?i101.0 &
       s3 = ?iudp &
       a = ?i110.0 & aa = ?X606X3.0 & b = ?X607X4.0 & ba = data}",
     template_equation
      (template_app
        (template_hole 16, template_app (template_hole 15, t_empty)),
       template_app
        (template_hole 16, template_app (template_hole 15, t_empty)))),
    ("NAT.datasimp6",
     "{(i, (s1, s2, s3), aba).
       i = ?i1.0 &
       s1 = ?i132.0 &
       s3 = ?iudp &
       s2 = ?i1.0 &
       (case aba of
        (x, xa) =>
          (case x of
           (a, aa, b) =>
             %ba. a = ?i110.0 & aa = ?i4.0 & b = ?iudp & ba = data)
           xa)} =
      {(i, (s1, s2, s3), (a, aa, b), ba).
       i = ?i1.0 &
       s1 = ?i132.0 &
       s3 = ?iudp &
       s2 = ?i1.0 & a = ?i110.0 & aa = ?i4.0 & b = ?iudp & ba = data}",
     template_equation
      (template_app
        (template_hole 15, template_app (template_hole 14, t_empty)),
       template_app
        (template_hole 15, template_app (template_hole 14, t_empty)))),
    ("NAT.datasimp8",
     "{(i, (s1, s2, s3), aba).
       i = ?i1.0 &
       s1 = ?i132.0 &
       s3 = ?iudp &
       s2 = ?ii1.0 &
       (case aba of
        (x, xa) =>
          (case x of
           (a, aa, b) =>
             %ba. a = ?i110.0 & aa = ?i7.0 & b = ?itcp & ba = data)
           xa)} =
      {(i, (s1, s2, s3), (a, aa, b), ba).
       i = ?i1.0 &
       s1 = ?i132.0 &
       s3 = ?iudp &
       s2 = ?ii1.0 & a = ?i110.0 & aa = ?i7.0 & b = ?itcp & ba = data}",
     template_equation
      (template_app
        (template_hole 17, template_app (template_hole 16, t_empty)),
       template_app
        (template_hole 17, template_app (template_hole 16, t_empty)))),
    ("NAT.datasimp",
     "{(i, (s1, s2, s3), aba).
       ALL a aa b ba.
          aba = ((a, aa, b), ba) -->
          i = ?i1.0 &
          s1 = ?i101.0 &
          s3 = ?iudp &
          a = ?i110.0 & aa = ?X606X3.0 & b = ?X607X4.0 & ba = data} =
      {(i, (s1, s2, s3), aba).
       i = ?i1.0 &
       s1 = ?i101.0 &
       s3 = ?iudp &
       (case aba of
        (x, xa) =>
          (case x of
           (a, aa, b) =>
             %ba. a = ?i110.0 & aa = ?X606X3.0 & b = ?X607X4.0 & ba = data)
           xa)}",
     template_equation
      (template_app
        (template_hole 25, template_app (template_hole 24, t_empty)),
       template_app
        (template_hole 25, template_app (template_hole 24, t_empty)))),
    ("NAT.datasimp7",
     "{(i, (s1, s2, s3), aba).
       i = ?i1.0 &
       ?i115.0 < s1 &
       s1 < ?i124.0 &
       s3 = ?iudp &
       s2 = ?ii1.0 &
       (case aba of
        (x, xa) =>
          (case x of
           (a, aa, b) =>
             %ba. a = ?i110.0 & aa = ?i3.0 & b = ?itcp & ba = data)
           xa)} =
      {(i, (s1, s2, s3), (a, aa, b), ba).
       i = ?i1.0 &
       ?i115.0 < s1 &
       s1 < ?i124.0 &
       s3 = ?iudp &
       s2 = ?ii1.0 & a = ?i110.0 & aa = ?i3.0 & b = ?itcp & ba = data}",
     template_equation
      (template_app
        (template_hole 17, template_app (template_hole 16, t_empty)),
       template_app
        (template_hole 17, template_app (template_hole 16, t_empty)))),
    ("NAT.datasimp2",
     "{(i, (s1, s2, s3), aba).
       ALL a aa b ba.
          aba = ((a, aa, b), ba) -->
          i = ?i1.0 &
          s1 = ?i132.0 &
          s3 = ?iudp &
          s2 = ?i1.0 & a = ?i110.0 & aa = ?i4.0 & b = ?iudp & ba = data} =
      {(i, (s1, s2, s3), aba).
       i = ?i1.0 &
       s1 = ?i132.0 &
       s3 = ?iudp &
       s2 = ?i1.0 &
       (case aba of
        (x, xa) =>
          (case x of
           (a, aa, b) =>
             %ba. a = ?i110.0 & aa = ?i4.0 & b = ?iudp & ba = data)
           xa)}",
     template_equation
      (template_app
        (template_hole 24, template_app (template_hole 23, t_empty)),
       template_app
        (template_hole 24, template_app (template_hole 23, t_empty)))),
    ("NAT.datasimp4",
     "{(i, (s1, s2, s3), aba).
       ALL a aa b ba.
          aba = ((a, aa, b), ba) -->
          i = ?i1.0 &
          s1 = ?i132.0 &
          s3 = ?iudp &
          s2 = ?ii1.0 & a = ?i110.0 & aa = ?i7.0 & b = ?itcp & ba = data} =
      {(i, (s1, s2, s3), aba).
       i = ?i1.0 &
       s1 = ?i132.0 &
       s3 = ?iudp &
       s2 = ?ii1.0 &
       (case aba of
        (x, xa) =>
          (case x of
           (a, aa, b) =>
             %ba. a = ?i110.0 & aa = ?i7.0 & b = ?itcp & ba = data)
           xa)}",
     template_equation
      (template_app
        (template_hole 26, template_app (template_hole 25, t_empty)),
       template_app
        (template_hole 26, template_app (template_hole 25, t_empty)))),
    ("NAT.datasimp3",
     "{(i, (s1, s2, s3), aba).
       ALL a aa b ba.
          aba = ((a, aa, b), ba) -->
          i = ?i1.0 &
          ?i115.0 < s1 &
          s1 < ?i124.0 &
          s3 = ?iudp &
          s2 = ?ii1.0 & a = ?i110.0 & aa = ?i3.0 & b = ?itcp & ba = data} =
      {(i, (s1, s2, s3), aba).
       i = ?i1.0 &
       ?i115.0 < s1 &
       s1 < ?i124.0 &
       s3 = ?iudp &
       s2 = ?ii1.0 &
       (case aba of
        (x, xa) =>
          (case x of
           (a, aa, b) =>
             %ba. a = ?i110.0 & aa = ?i3.0 & b = ?itcp & ba = data)
           xa)}",
     template_equation
      (template_app
        (template_hole 26, template_app (template_hole 25, t_empty)),
       template_app
        (template_hole 26, template_app (template_hole 25, t_empty))))]:
   (string * thm * template) list
### theory "Draft.NATTemplates"
### 0.402s elapsed time, 0.526s cpu time, 0.043s GC time
val it = (): unit
