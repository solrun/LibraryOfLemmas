   [("NormalisationIntegerPortProof.CLemmas",
     "singleCombinators (policy2list ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("NormalisationIntegerPortProof.CLemmas",
     "wellformed_policy1_strong (insertDeny (removeShadowRules1 ?p))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("NormalisationIntegerPortProof.NMPiD", "not_MT C (insertDeny ?p)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("NormalisationIntegerPortProof.C_eq_Lemmas", "policy2list ?p ~= []",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("NormalisationIntegerPortProof.DAAux", "?x : dom (C DenyAll)",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))
         )),
    ("NormalisationIntegerPortProof.CRotate_eq_rotateC",
     "CRotate ?p = C (rotatePolicy ?p)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("NormalisationIntegerPortProof.mrMTNone",
     "applied_rule_rev C ?x [] = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), template_var 0),
         template_hole 1),
       template_hole 0)),
    ("NormalisationIntegerPortProof.CLemmas",
     "singleCombinators ?p ==> OnlyTwoNets ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("NormalisationIntegerPortProof.CLemmas",
     "wellformed_policy1_strong ?p ==> wellformed_policy1 ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("NormalisationIntegerPortProof.list2FWpolicy2list",
     "C (list2FWpolicy (policy2list ?p)) = C ?p",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("NormalisationIntegerPortProof.DAUniv",
     "dom (CRotate (?P \<oplus> DenyAll)) = UNIV",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))),
       template_hole 0)),
    ("NormalisationIntegerPortProof.RS3subset",
     "set (rm_MT_rules C ?p) <= set ?p",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("NormalisationIntegerPortProof.CLemmas",
     "allNetsDistinct ?p ==> allNetsDistinct (separate ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationIntegerPortProof.C_eqLemmas_id",
     "noDenyAll1 ?p ==> NetsCollected2 (separate ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationIntegerPortProof.CLemmas",
     "noDenyAll1 ?p ==> noDenyAll1 (separate ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationIntegerPortProof.CLemmas",
     "wellformed_policy1_strong ?p ==>
      wellformed_policy1_strong (removeShadowRules2 ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationIntegerPortProof.CLemmas",
     "wellformed_policy1_strong ?p ==>
      wellformed_policy1_strong (separate ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationIntegerPortProof.wp3tl",
     "wellformed_policy3 ?p ==> wellformed_policy3 (tl ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationIntegerPortProof.C_eq_RS1n",
     "C (list2FWpolicy (removeShadowRules1_alternative ?p)) =
      C (list2FWpolicy ?p)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("NormalisationIntegerPortProof.C_eq_RD_aux",
     "C ?p ?x = C (removeDuplicates ?p) ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("NormalisationIntegerPortProof.noDAsortQ",
     "noDenyAll1 ?p ==> noDenyAll1 (qsort ?p ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationIntegerPortProof.CLemmas",
     "noDenyAll1 ?p ==> noDenyAll1 (FWNormalisationCore.sort ?p ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationIntegerPortProof.SCRS3",
     "singleCombinators ?p ==> singleCombinators (rm_MT_rules C ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("NormalisationIntegerPortProof.CLemmas",
     "wellformed_policy1_strong ?p ==>
      wellformed_policy1_strong (FWNormalisationCore.sort ?p ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationIntegerPortProof.wp1n_RS3",
     "wellformed_policy1_strong ?p ==>
      wellformed_policy1_strong (rm_MT_rules C ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("NormalisationIntegerPortProof.wp2Conc",
     "wellformed_policy2 (?x # ?xs) ==> wellformed_policy2 ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("NormalisationIntegerPortProof.wp3Conc",
     "wellformed_policy3 (?a # ?p) ==> wellformed_policy3 ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("NormalisationIntegerPortProof.domSimpl",
     "dom (C (?A \<oplus> DenyAll)) = dom (C DenyAll)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))),
       template_app
        (template_hole 3,
         template_app (template_hole 2, template_hole 0)))),
    ("NormalisationIntegerPortProof.domDA",
     "dom (C (DenyAll \<oplus> ?x)) = dom (C DenyAll)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app (template_hole 2, template_hole 0)))),
    ("NormalisationIntegerPortProof.none_MT_rulesRS2",
     "none_MT_rules C ?p ==> none_MT_rules C (removeShadowRules2 ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationIntegerPortProof.none_MT_rulessep",
     "none_MT_rules C ?p ==> none_MT_rules C (separate ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationIntegerPortProof.none_MT_rulesrd",
     "none_MT_rules C ?p ==> none_MT_rules C (remdups ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationIntegerPortProof.C_eq_Lemmas_sep",
     "not_MT ?C ?p ==> ?p ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("NormalisationIntegerPortProof.NMPrd",
     "not_MT C ?p ==> not_MT C (remdups ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationIntegerPortProof.C_eq_Lemmas",
     "DenyAll : set ?p ==>
      wellformed_policy1_strong (removeShadowRules1 ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationIntegerPortProof.NMPDA",
     "DenyAll : set ?p ==> not_MT C ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0)
           ))),
    ("NormalisationIntegerPortProof.C_eq_Lemmas",
     "DenyAll ~: set ?xs ==> wellformed_policy1 ?xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("NormalisationIntegerPortProof.sepDom",
     "dom (C (list2FWpolicy ?p)) = dom (C (list2FWpolicy (separate ?p)))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("NormalisationIntegerPortProof.C_eq_RS2_mr",
     "applied_rule_rev C ?x (removeShadowRules2 ?p) =
      applied_rule_rev C ?x ?p",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0))),
    ("NormalisationIntegerPortProof.CLemmas",
     "DenyAll : set ?p -->
      wellformed_policy1 ?p = wellformed_policy1_strong ?p",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0)))
         )),
    ("NormalisationIntegerPortProof.AILRS3",
     "all_in_list ?p ?l ==> all_in_list (rm_MT_rules C ?p) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0)
           ))),
    ("NormalisationIntegerPortProof.nMTSortQ",
     "none_MT_rules C ?p ==> none_MT_rules C (qsort ?p ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationIntegerPortProof.nMTSort",
     "none_MT_rules C ?p ==>
      none_MT_rules C (FWNormalisationCore.sort ?p ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationIntegerPortProof.wp2_aux",
     "wellformed_policy2 (?xs @ [?x]) ==> wellformed_policy2 ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_hole 0)))
            )],
       template_predicate
        (template_app (template_hole 3, template_var 1)))),
    ("NormalisationIntegerPortProof.foo25",
     "wellformed_policy3 (?p @ [?x]) ==> wellformed_policy3 ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_hole 0)))
            )],
       template_predicate
        (template_app (template_hole 3, template_var 1)))),
    ("NormalisationIntegerPortProof.CLemmas",
     "[| wellformed_policy1 ?p; singleCombinators ?p |] ==> noDenyAll1 ?p",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("NormalisationIntegerPortProof.domain_reasoning",
     "?r o\<^sub>f ?P o ?d = ?r o\<^sub>f (?P o ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("NormalisationIntegerPortProof.C_eq_Lemmas_sep",
     "?p ~= [] ==> removeShadowRules2 ?p ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("NormalisationIntegerPortProof.C_eqLemmas_id",
     "[| noDenyAll1 ?p; NetsCollected ?p |]
      ==> NetsCollected (separate ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationIntegerPortProof.CLemmas",
     "[| noDenyAll1 ?p; OnlyTwoNets ?p |] ==> OnlyTwoNets (separate ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationIntegerPortProof.C_DenyAll",
     "C (list2FWpolicy (?xs @ [DenyAll])) ?x = \<lfloor>deny ()\<rfloor>",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_hole 3)))),
         template_var 0),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("NormalisationIntegerPortProof.allow_deny_dom",
     "dom (C (AllowPortFromTo ?a ?b ?po)) <= dom (C (DenyAllFromTo ?a ?b))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("NormalisationIntegerPortProof.C_eq_id",
     "wellformed_policy1_strong ?p ==>
      C (list2FWpolicy (insertDeny ?p)) = C (list2FWpolicy ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("NormalisationIntegerPortProof.C_eq_RS2",
     "wellformed_policy1_strong ?p ==>
      C (list2FWpolicy (removeShadowRules2 ?p)) = C (list2FWpolicy ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("NormalisationIntegerPortProof.list2listNMT",
     "?x ~= [] ==> map ?sem ?x ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_hole 0)
           ))),
    ("NormalisationIntegerPortProof.sortnMTQ",
     "?p ~= [] ==> qsort ?p ?l ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 1)
           ))),
    ("NormalisationIntegerPortProof.C_eq_Lemmas_sep",
     "?p ~= [] ==> FWNormalisationCore.sort ?p ?l ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 1)
           ))),
    ("NormalisationIntegerPortProof.RS3_NMT",
     "DenyAll : set ?p ==> rm_MT_rules C ?p ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app (template_hole 5, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0),
             template_hole 0)
           ))),
    ("NormalisationIntegerPortProof.norm_notMT",
     "DenyAll : set (policy2list ?p) ==>
      FWNormalisationCore.normalize ?p ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("NormalisationIntegerPortProof.norm_notMTQ",
     "DenyAll : set (policy2list ?p) ==> normalizeQ ?p ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("NormalisationIntegerPortProof.ANDRS3",
     "[| singleCombinators ?p; allNetsDistinct ?p |]
      ==> allNetsDistinct (rm_MT_rules C ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("NormalisationIntegerPortProof.ConcAssoc",
     "C ((?A \<oplus> ?B) \<oplus> ?D) = C (?A \<oplus> ?B \<oplus> ?D)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("NormalisationIntegerPortProof.wp1_auxa",
     "wellformed_policy1_strong ?p ==>
      EX r. applied_rule_rev C ?x ?p = \<lfloor>r\<rfloor>",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("NormalisationIntegerPortProof.DAimplieMR",
     "DenyAll : set ?p ==> applied_rule_rev C ?x ?p ~= \<bottom>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app (template_hole 5, template_var 1))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0),
               template_var 1),
             template_hole 0)
           ))),
    ("NormalisationIntegerPortProof.foo28a",
     "?x : dom (C ?a) ==> dom (C ?a) ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_hole 0)
           ))),
    ("NormalisationIntegerPortProof.DAinRotate",
     "DenyAll : set (policy2list ?p) ==>
      DenyAll : set (policy2list (rotatePolicy ?p))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("NormalisationIntegerPortProof.norm_notMT_manual",
     "DenyAll : set (policy2list ?p) ==>
      normalize_manual_order ?p ?l ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("NormalisationIntegerPortProof.norm_notMT_manualQ",
     "DenyAll : set (policy2list ?p) ==>
      normalize_manual_orderQ ?p ?l ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("NormalisationIntegerPortProof.mrNnt",
     "applied_rule_rev C ?x ?p = \<lfloor>?a\<rfloor> ==> ?p ~= []",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 2),
            template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("NormalisationIntegerPortProof.mrSet",
     "applied_rule_rev C ?x ?p = \<lfloor>?r\<rfloor> ==> ?r : set ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("NormalisationIntegerPortProof.mr_not_Conc",
     "singleCombinators ?p ==>
      applied_rule_rev C ?x ?p ~= \<lfloor>?a \<oplus> ?b\<rfloor>",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 3))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 2),
               template_var 3),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("NormalisationIntegerPortProof.C_eq_RS3",
     "not_MT C ?p ==>
      C (list2FWpolicy (rm_MT_rules C ?p)) = C (list2FWpolicy ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 3),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app (template_hole 1, template_var 0))))),
    ("NormalisationIntegerPortProof.list2FWpolicys_eq",
     "?Filter ~= [] ==>
      C (list2policyR ?Filter) = C (list2FWpolicy (rev ?Filter))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("NormalisationIntegerPortProof.list2FWpolicys_eq_sym",
     "?Filter ~= [] ==>
      C (list2policyR (rev ?Filter)) = C (list2FWpolicy ?Filter)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 3,
           template_app (template_hole 0, template_var 0))))),
    ("NormalisationIntegerPortProof.l2polR_eq",
     "?N ~= [] ==> C (list2policyR ?N) = list2policy (map C ?N)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 3),
             template_var 0))))),
    ("NormalisationIntegerPortProof.C_eq_RAD",
     "?p ~= [] ==>
      C (list2FWpolicy ?p) = C (list2FWpolicy (removeAllDuplicates ?p))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("NormalisationIntegerPortProof.C_eq_RS1",
     "?p ~= [] ==>
      C (list2FWpolicy (removeShadowRules1 ?p)) = C (list2FWpolicy ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("NormalisationIntegerPortProof.C_eq_s",
     "?p ~= [] ==> C (list2FWpolicy (separate ?p)) = C (list2FWpolicy ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("NormalisationIntegerPortProof.C_eq_rd",
     "?p ~= [] ==> C (list2FWpolicy (remdups ?p)) = C (list2FWpolicy ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("NormalisationIntegerPortProof.DARS3",
     "DenyAll ~: set ?p ==> DenyAll ~: set (rm_MT_rules C ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_app (template_hole 2, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 0)))
               )
           ))),
    ("NormalisationIntegerPortProof.mr_in_dom",
     "applied_rule_rev C ?x ?p = \<lfloor>?a\<rfloor> ==> ?x : dom (C ?a)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 0)))
           ))),
    ("NormalisationIntegerPortProof.p_eq",
     "?p ~= [] ==> list2policy (map C (rev ?p)) = C (list2FWpolicy ?p)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))))),
    ("NormalisationIntegerPortProof.DAimpliesMR_E",
     "DenyAll : set ?p ==>
      EX r. applied_rule_rev C ?x ?p = \<lfloor>r\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app (template_hole 5, template_var 1))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("NormalisationIntegerPortProof.CConcStartA",
     "?x : dom (C ?a) ==> ?x : dom (C (list2FWpolicy (?a # ?b)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))))
           ))),
    ("NormalisationIntegerPortProof.dom_sep",
     "?x : dom (C (list2FWpolicy ?p)) ==>
      ?x : dom (C (list2FWpolicy (separate ?p)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))))
           ))),
    ("NormalisationIntegerPortProof.sep_dom2",
     "?x : dom (C (list2FWpolicy (separate ?p))) ==>
      ?x : dom (C (list2FWpolicy ?p))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_hole 1,
                    template_app (template_hole 0, template_var 0)))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))))
           ))),
    ("NormalisationIntegerPortProof.none_MT_rulessubset",
     "[| none_MT_rules C ?a; set ?b <= set ?a |] ==> none_MT_rules C ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 0),
          template_app (template_hole 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)
           ))),
    ("NormalisationIntegerPortProof.WP2RS2",
     "[| singleCombinators ?p; distinct ?p; allNetsDistinct ?p |]
      ==> wellformed_policy2 (removeShadowRules2 ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationIntegerPortProof.Norm_Distr2",
     "?r o\<^sub>f (?P \<Otimes>\<^sub>2 list2policy ?Q o ?d) =
      list2policy ((?P \<Otimes>\<^sub>L ?Q) (\<Otimes>\<^sub>2) ?r ?d)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 3),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app (template_hole 2, template_var 1))),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_hole 3),
             template_var 3),
           template_var 0)))),
    ("NormalisationIntegerPortProof.C_eq_RS3_aux",
     "not_MT C ?p ==>
      C (list2FWpolicy ?p) ?x = C (list2FWpolicy (rm_MT_rules C ?p)) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_hole 3),
                 template_var 1))),
           template_var 0)))),
    ("NormalisationIntegerPortProof.list2FWpolicys_eq_el",
     "?Filter ~= [] ==>
      C (list2policyR ?Filter) ?p = C (list2FWpolicy (rev ?Filter)) ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_var 0)))),
    ("NormalisationIntegerPortProof.l2polR_eq_el",
     "?N ~= [] ==> C (list2policyR ?N) ?p = list2policy (map C ?N) ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 3),
               template_var 1)),
           template_var 0)))),
    ("NormalisationIntegerPortProof.C_eq_RAD_aux",
     "?p ~= [] ==>
      C (list2FWpolicy ?p) ?x =
      C (list2FWpolicy (removeAllDuplicates ?p)) ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_var 0)))),
    ("NormalisationIntegerPortProof.C_eq_s_ext",
     "?p ~= [] ==>
      C (list2FWpolicy (separate ?p)) ?a = C (list2FWpolicy ?p) ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("NormalisationIntegerPortProof.Cdom2",
     "?x : dom (C ?b) ==> C (?a \<oplus> ?b) ?x = C ?b ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 2)))),
    ("NormalisationIntegerPortProof.ConcAssoc3",
     "C (?X \<oplus> (?Y \<oplus> ?A) \<oplus> ?D) =
      C (?X \<oplus> ?Y \<oplus> ?A \<oplus> ?D)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("NormalisationIntegerPortProof.CConcStartaux",
     "C ?a ?x = \<bottom> ==> (C ?a \<Oplus> C ?aa) ?x = C ?aa ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("NormalisationIntegerPortProof.list2policyR_Start",
     "?p : dom (C ?a) ==> C (list2policyR (?a # ?list)) ?p = C ?a ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 2)))),
    ("NormalisationIntegerPortProof.nlpaux",
     "?x ~: dom (C ?b) ==> C (?a \<oplus> ?b) ?x = C ?a ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 2)))),
    ("NormalisationIntegerPortProof.mr_is_C",
     "applied_rule_rev C ?x ?p = \<lfloor>?a\<rfloor> ==>
      C (list2FWpolicy ?p) ?x = C ?a ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_var 2)))),
    ("NormalisationIntegerPortProof.MRList1",
     "?x : dom (C ?a) ==>
      applied_rule_rev C ?x (?b @ [?a]) = \<lfloor>?a\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 6),
             template_var 2),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_app (template_hole 0, template_var 1)))),
    ("NormalisationIntegerPortProof.CConcEnd2",
     "?x : dom (C ?a) ==> C (list2FWpolicy (?xs @ [?a])) ?x = C ?a ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)))),
           template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_var 2)))),
    ("NormalisationIntegerPortProof.CConcEnd",
     "C ?a ?x = \<lfloor>?y\<rfloor> ==>
      C (list2FWpolicy (?xs @ [?a])) ?x = \<lfloor>?y\<rfloor>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0)))),
           template_var 2),
         template_app (template_hole 4, template_var 1)))),
    ("NormalisationIntegerPortProof.not_in_member",
     "[| member ?a ?b; ?x ~: dom (C ?b) |] ==> ?x ~: dom (C ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app
                   (template_hole 1,
                    template_app (template_hole 0, template_var 1)))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)))
               )
           ))),
    ("NormalisationIntegerPortProof.nMT_domMT",
     "[| ~ not_MT C ?p; ?p ~= [] |] ==> ?r ~: dom (C (list2FWpolicy ?p))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 1)
                )
            ),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 0, template_var 1))))
               )
           ))),
    ("NormalisationIntegerPortProof.deny_dom",
     "twoNetsDistinct ?a ?b ?c ?d ==>
      dom (C (DenyAllFromTo ?a ?b)) Int dom (C (DenyAllFromTo ?c ?d)) = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2)))),
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)))),
         template_hole 0))),
    ("NormalisationIntegerPortProof.MRList2",
     "?x : dom (C ?a) ==>
      applied_rule_rev C ?x (?c @ ?b @ [?a]) = \<lfloor>?a\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 6),
             template_var 3),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_hole 1)))),
         template_app (template_hole 0, template_var 2)))),
    ("NormalisationIntegerPortProof.domID",
     "?p ~= [] & ?x : dom (C (list2FWpolicy ?p)) ==>
      ?x : dom (C (list2FWpolicy (insertDenies ?p)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_hole 5))),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)))))
           ))),
    ("NormalisationIntegerPortProof.notmatching_notdom",
     "applied_rule_rev C ?x (?p @ [?a]) ~= \<lfloor>?a\<rfloor> ==>
      ?x ~: dom (C ?a)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 2),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_hole 3))),
              template_app (template_hole 2, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 6, template_var 0)))
               )
           ))),
    ("NormalisationIntegerPortProof.domsMT_notND_DD",
     "dom (C (DenyAllFromTo ?a ?b)) Int dom (C (DenyAllFromTo ?c ?d)) ~=
      {} ==>
      ~ netsDistinct ?a ?c",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_var 2)))),
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 1),
                      template_var 0)))),
              template_hole 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)
               )
           ))),
    ("NormalisationIntegerPortProof.domsMT_notND_DD2",
     "dom (C (DenyAllFromTo ?a ?b)) Int dom (C (DenyAllFromTo ?c ?d)) ~=
      {} ==>
      ~ netsDistinct ?b ?d",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_var 2)))),
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 1),
                      template_var 0)))),
              template_hole 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)
               )
           ))),
    ("NormalisationIntegerPortProof.C_eq_None",
     "[| ?p ~= []; applied_rule_rev C ?x ?p = \<bottom> |]
      ==> C (list2FWpolicy ?p) ?x = \<bottom>",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0),
            template_var 1),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0))),
    ("NormalisationIntegerPortProof.mrDA_tl",
     "[| applied_rule_rev C ?x ?p = \<lfloor>DenyAll\<rfloor>;
         wellformed_policy1_strong ?p |]
      ==> applied_rule_rev C ?x (tl ?p) = \<bottom>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 1),
            template_var 0),
          template_app (template_hole 4, template_hole 3)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("NormalisationIntegerPortProof.C_eq_iD",
     "[| separated ?p; noDenyAll1 ?p; wellformed_policy1_strong ?p |]
      ==> C (list2FWpolicy (insertDenies ?p)) = C (list2FWpolicy ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))))),
    ("NormalisationIntegerPortProof.ConcAssoc2",
     "C (?X \<oplus> ?Y \<oplus> (?A \<oplus> ?B) \<oplus> ?D) =
      C (?X \<oplus> ?Y \<oplus> ?A \<oplus> ?B \<oplus> ?D)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 4),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0)))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 4),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))))),
    ("NormalisationIntegerPortProof.DomInterAllowsMT_Ports",
     "?p ~= ?po ==>
      dom (C (AllowPortFromTo ?a ?b ?p)) Int
      dom (C (AllowPortFromTo ?c ?d ?po)) =
      {}",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2),
                   template_var 5)))),
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0),
                 template_var 4)))),
         template_hole 0))),
    ("NormalisationIntegerPortProof.aux26",
     "twoNetsDistinct ?a ?b ?c ?d ==>
      dom (C (AllowPortFromTo ?a ?b ?p)) Int dom (C (DenyAllFromTo ?c ?d)) =
      {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 3),
                   template_var 0)))),
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)))),
         template_hole 0))),
    ("NormalisationIntegerPortProof.EX_MR_aux",
     "applied_rule_rev C ?x (DenyAll # ?p) ~= \<lfloor>DenyAll\<rfloor> ==>
      EX y. applied_rule_rev C ?x ?p = \<lfloor>y\<rfloor>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 1),
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 0)),
              template_app (template_hole 1, template_hole 2))
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("NormalisationIntegerPortProof.notindom",
     "[| ?a : set ?p; ?x ~: dom (C (list2FWpolicy ?p)) |]
      ==> ?x ~: dom (C ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 1,
                      template_app (template_hole 0, template_var 1))))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)))
               )
           ))),
    ("NormalisationIntegerPortProof.NetsCollectedSortQ",
     "[| distinct ?p; noDenyAll1 ?p; all_in_list ?p ?l;
         singleCombinators ?p |]
      ==> NetsCollected (qsort ?p ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationIntegerPortProof.C_eqLemmas_id",
     "[| distinct ?p; noDenyAll1 ?p; all_in_list ?p ?l;
         singleCombinators ?p |]
      ==> NetsCollected (FWNormalisationCore.sort ?p ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationIntegerPortProof.wellformed2_sortedQ",
     "[| all_in_list ?p ?l; distinct ?p; allNetsDistinct ?p;
         singleCombinators ?p |]
      ==> wellformed_policy2 (qsort ?p ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationIntegerPortProof.wellformed2_sorted",
     "[| all_in_list ?p ?l; distinct ?p; allNetsDistinct ?p;
         singleCombinators ?p |]
      ==> wellformed_policy2 (FWNormalisationCore.sort ?p ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationIntegerPortProof.DomInterAllowsMT",
     "twoNetsDistinct ?a ?b ?c ?d ==>
      dom (C (AllowPortFromTo ?a ?b ?p)) Int
      dom (C (AllowPortFromTo ?c ?d ?po)) =
      {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4),
                   template_var 1)))),
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 2),
                 template_var 0)))),
         template_hole 0))),
    ("NormalisationIntegerPortProof.sep_dom2_aux",
     "?x : dom (C (list2FWpolicy (?a \<oplus> ?y # ?z))) ==>
      ?x : dom (C (?a \<oplus> list2FWpolicy (?y # ?z)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_app
                       (template_hole 1,
                        template_app
                         (template_app (template_hole 0, template_var 2),
                          template_var 1)),
                      template_var 0)))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 0))))))
           ))),
    ("NormalisationIntegerPortProof.InDomConc",
     "[| ?p ~= []; ?x : dom (C (list2FWpolicy ?p)) |]
      ==> ?x : dom (C (list2FWpolicy (?a # ?p)))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2)))))
           ))),
    ("NormalisationIntegerPortProof.domConc",
     "[| ?x : dom (C (list2FWpolicy ?b)); ?b ~= [] |]
      ==> ?x : dom (C (list2FWpolicy (?a @ ?b)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 1))))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)))))
           ))),
    ("NormalisationIntegerPortProof.domsMT_notND_DD3",
     "[| ?x : dom (C (DenyAllFromTo ?a ?b));
         ?x : dom (C (DenyAllFromTo ?c ?d)) |]
      ==> ~ netsDistinct ?a ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)
               )
           ))),
    ("NormalisationIntegerPortProof.domsMT_notND_DD4",
     "[| ?x : dom (C (DenyAllFromTo ?a ?b));
         ?x : dom (C (DenyAllFromTo ?c ?d)) |]
      ==> ~ netsDistinct ?b ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)
               )
           ))),
    ("NormalisationIntegerPortProof.C_eqLemmas_id",
     "[| OnlyTwoNets ?p; NetsCollected2 ?p; NetsCollected ?p; noDenyAll1 ?p;
         allNetsDistinct ?p |]
      ==> separated ?p",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("NormalisationIntegerPortProof.wellformed_policy3_charn",
     "[| singleCombinators ?p; distinct ?p; allNetsDistinct ?p;
         wellformed_policy1 ?p; wellformed_policy2 ?p |]
      ==> wellformed_policy3 ?p",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("NormalisationIntegerPortProof.list2FWpolicy_eq",
     "?zs ~= [] ==>
      C (list2FWpolicy (?x \<oplus> ?y # ?z)) ?p =
      C (?x \<oplus> list2FWpolicy (?y # ?z)) ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)))),
           template_var 0)))),
    ("NormalisationIntegerPortProof.domain_reasoning",
     "dom ?A = UNIV ==>
      dom ((%(x, y). x) o\<^sub>f (?A \<Otimes>\<^sub>1 ?B) o
           (%x. (x, x))) =
      dom ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1), template_hole 6)],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("NormalisationIntegerPortProof.domain_reasoning",
     "dom ?A = UNIV ==>
      dom ((%(x, y). x) o\<^sub>f (?A \<Otimes>\<^sub>2 ?B) o
           (%x. (x, x))) =
      dom ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1), template_hole 6)],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("NormalisationIntegerPortProof.domain_reasoning",
     "dom ?A = UNIV ==>
      dom ((%(x, y). x) o\<^sub>f (?A \<Otimes>\<^sub>\<or>\<^sub>A ?B) o
           (%x. (x, x))) =
      dom ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1), template_hole 6)],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("NormalisationIntegerPortProof.domain_reasoning",
     "dom ?A = UNIV ==>
      dom ((%(x, y). x) o\<^sub>f (?A \<Otimes>\<^sub>\<or>\<^sub>D ?B) o
           (%x. (x, x))) =
      dom ?B",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1), template_hole 6)],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0))),
             t_empty)),
         template_app (template_hole 0, template_var 0)))),
    ("NormalisationIntegerPortProof.list2policyR_End",
     "?p ~: dom (C ?a) ==>
      C (list2policyR (?a # ?list)) ?p =
      (C ?a \<Oplus> list2policy (map C ?list)) ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_hole 6),
                   template_var 0))),
             template_app (template_hole 6, template_var 1)),
           template_var 2)))),
    ("NormalisationIntegerPortProof.dest_in_sdnets",
     "[| ~ member DenyAll ?x; ?p : dom (C ?x) |]
      ==> subnetsOfAdr (dest ?p) Int snd_set (sdnets ?x) ~= {}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_hole 10),
                  template_var 1)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             template_hole 0)
           ))),
    ("NormalisationIntegerPortProof.src_in_sdnets",
     "[| ~ member DenyAll ?x; ?p : dom (C ?x) |]
      ==> subnetsOfAdr (src ?p) Int fst_set (sdnets ?x) ~= {}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_hole 10),
                  template_var 1)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             template_hole 0)
           ))),
    ("NormalisationIntegerPortProof.domTrans",
     "[| dom ?a <= dom ?b; dom ?b Int dom ?c = {} |]
      ==> dom ?a Int dom ?c = {}",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 4, template_var 1)),
            template_app (template_hole 1, template_var 0)),
          template_hole 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 5, template_var 2)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("NormalisationIntegerPortProof.foo29",
     "[| dom (C ?a) ~= {}; dom (C ?a) Int dom (C ?b) = {} |] ==> ?a ~= ?b",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_hole 2)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 1,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1))),
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))),
          template_hole 2)],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("NormalisationIntegerPortProof.domSubset4",
     "dom (C (DenyAllFromTo ?x ?y \<oplus>
              DenyAllFromTo ?y ?x \<oplus> AllowPortFromTo ?x ?y ?dn)) =
      dom (C (DenyAllFromTo ?x ?y \<oplus> DenyAllFromTo ?y ?x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0))))),
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)))))),
    ("NormalisationIntegerPortProof.domSubset5",
     "dom (C (DenyAllFromTo ?x ?y \<oplus>
              DenyAllFromTo ?y ?x \<oplus> AllowPortFromTo ?y ?x ?dn)) =
      dom (C (DenyAllFromTo ?x ?y \<oplus> DenyAllFromTo ?y ?x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2)),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0))))),
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)))))),
    ("NormalisationIntegerPortProof.bar3",
     "?x : dom (C (list2FWpolicy (?xs @ [?xa]))) ==>
      ?x : dom (C (list2FWpolicy ?xs)) | ?x : dom (C ?xa)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 1),
                      template_app
                       (template_app (template_hole 2, template_var 0),
                        template_hole 1))))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1))))),
             template_app
              (template_app (template_hole 7, template_var 2),
               template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 0))))
           ))),
    ("NormalisationIntegerPortProof.CconcNone",
     "[| dom (C ?a) = {}; ?p ~= [] |]
      ==> C (list2FWpolicy (?a # ?p)) ?x = C (list2FWpolicy ?p) ?x",
     template_implication
      ([template_equation
         (template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 2)),
          template_hole 6),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 1, template_var 1)),
           template_var 0)))),
    ("NormalisationIntegerPortProof.domdConcStart",
     "[| ?x : dom (C (list2FWpolicy (?a # ?b)));
         ?x ~: dom (C (list2FWpolicy ?b)) |]
      ==> ?x : dom (C ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 1),
                      template_var 0)))))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 0))))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)))
           ))),
    ("NormalisationIntegerPortProof.aux4",
     "[| applied_rule_rev C ?x (?a # ?p) = \<lfloor>?a\<rfloor>;
         ?a ~: set ?p |]
      ==> applied_rule_rev C ?x ?p = \<bottom>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 2),
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)),
          template_app (template_hole 4, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 7, template_hole 6),
             template_var 2),
           template_var 0),
         template_hole 0))),
    ("NormalisationIntegerPortProof.mrConcEnd",
     "[| applied_rule_rev C ?x (?b # ?p) = \<lfloor>?a\<rfloor>; ?a ~= ?b |]
      ==> applied_rule_rev C ?x ?p = \<lfloor>?a\<rfloor>",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 3),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)),
          template_app (template_hole 2, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 3),
           template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("NormalisationIntegerPortProof.sorted_WP2",
     "[| FWNormalisationCore.sorted ?p ?l; all_in_list ?p ?l; distinct ?p;
         allNetsDistinct ?p; singleCombinators ?p |]
      ==> wellformed_policy2 ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("NormalisationIntegerPortProof.CeqEnd",
     "[| ?a ~= []; ?x : dom (C (list2FWpolicy ?a)) |]
      ==> C (list2FWpolicy (?b @ ?a)) ?x = C (list2FWpolicy ?a) ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 2))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2))),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 1)))),
    ("NormalisationIntegerPortProof.p_eq2",
     "[| FWNormalisationCore.normalize ?x ~= [];
         C (list2FWpolicy (FWNormalisationCore.normalize ?x)) = C ?x |]
      ==> list2policy (map C (rev (FWNormalisationCore.normalize ?x))) =
          C ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_hole 3,
              template_app (template_hole 7, template_var 0))),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 4),
             template_app
              (template_hole 0,
               template_app (template_hole 7, template_var 0)))),
         template_app (template_hole 4, template_var 0)))),
    ("NormalisationIntegerPortProof.p_eq2Q",
     "[| normalizeQ ?x ~= []; C (list2FWpolicy (normalizeQ ?x)) = C ?x |]
      ==> list2policy (map C (rev (normalizeQ ?x))) = C ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 0),
              template_hole 6)
            ),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_hole 3,
              template_app (template_hole 7, template_var 0))),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 4),
             template_app
              (template_hole 0,
               template_app (template_hole 7, template_var 0)))),
         template_app (template_hole 4, template_var 0)))),
    ("NormalisationIntegerPortProof.DenyAllowDisj",
     "dom (C (AllowPortFromTo ?a ?b ?p)) ~= {} ==>
      dom (C (DenyAllFromTo ?a ?b)) Int
      dom (C (AllowPortFromTo ?a ?b ?p)) ~=
      {}",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 1),
                    template_var 0))),
              template_hole 2)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1)))),
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 2),
                       template_var 1),
                     template_var 0)))),
             template_hole 2)
           ))),
    ("NormalisationIntegerPortProof.iD_isD",
     "[| ?p ~= []; ?x ~: dom (C (list2FWpolicy ?p)) |]
      ==> C (DenyAll \<oplus> list2FWpolicy (insertDenies ?p)) ?x =
          C DenyAll ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 8)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1))))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_hole 4,
                 template_app (template_hole 0, template_var 1)))),
           template_var 0),
         template_app
          (template_app (template_hole 5, template_hole 1),
           template_var 0)))),
    ("NormalisationIntegerPortProof.CConcStart",
     "[| ?xs ~= []; C ?a ?x = \<bottom> |]
      ==> C (list2FWpolicy (?xs @ [?a])) ?x = C (list2FWpolicy ?xs) ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_hole 6)))),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 2, template_var 2)),
           template_var 0)))),
    ("NormalisationIntegerPortProof.inDomConc",
     "[| ?x ~: dom (C ?a); ?x ~: dom (C (list2FWpolicy ?p)) |]
      ==> ?x ~: dom (C (list2FWpolicy (?a # ?p)))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 1)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_hole 3,
                    template_app
                     (template_hole 2,
                      template_app (template_hole 1, template_var 0))))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 1),
                         template_var 0)))))
               )
           ))),
    ("NormalisationIntegerPortProof.EX_MR",
     "[| applied_rule_rev C ?x ?p ~= \<lfloor>DenyAll\<rfloor>;
         ?p = DenyAll # ?ps |]
      ==> applied_rule_rev C ?x ?p = applied_rule_rev C ?x ?ps",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 2),
                template_var 1),
              template_app (template_hole 3, template_hole 2))
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 0, template_hole 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 2),
           template_var 0)))),
    ("NormalisationIntegerPortProof.mrDenyAll_is_unique",
     "[| wellformed_policy1_strong ?p;
         applied_rule_rev C ?x ?p = \<lfloor>DenyAll\<rfloor>;
         ?r : set (tl ?p) |]
      ==> ?x ~: dom (C ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 9, template_hole 8),
              template_var 1),
            template_var 2),
          template_app (template_hole 7, template_hole 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 8, template_var 0)))
               )
           ))),
    ("NormalisationIntegerPortProof.C_eq_normalize_manual",
     "[| DenyAll : set (policy2list ?p); allNetsDistinct (policy2list ?p);
         all_in_list (policy2list ?p) ?l |]
      ==> C (list2FWpolicy (normalize_manual_order ?p ?l)) = C ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app (template_hole 2, template_var 1)))),
    ("NormalisationIntegerPortProof.C_eq_normalize_manualQ",
     "[| DenyAll : set (policy2list ?p); allNetsDistinct (policy2list ?p);
         all_in_list (policy2list ?p) ?l |]
      ==> C (list2FWpolicy (normalize_manual_orderQ ?p ?l)) = C ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app (template_hole 2, template_var 1)))),
    ("NormalisationIntegerPortProof.C_eq_normalize",
     "[| DenyAll : set (policy2list ?p); allNetsDistinct (policy2list ?p);
         all_in_list (policy2list ?p) (Nets_List ?p) |]
      ==> C (list2FWpolicy (FWNormalisationCore.normalize ?p)) = C ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 7, template_var 0)),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app (template_hole 2, template_var 0)))),
    ("NormalisationIntegerPortProof.C_eq_normalizeQ",
     "[| DenyAll : set (policy2list ?p); allNetsDistinct (policy2list ?p);
         all_in_list (policy2list ?p) (Nets_List ?p) |]
      ==> C (list2FWpolicy (normalizeQ ?p)) = C ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 7, template_var 0)),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))),
         template_app (template_hole 2, template_var 0)))),
    ("NormalisationIntegerPortProof.CConcStart2",
     "[| ?p ~= []; ?x ~: dom (C ?a) |]
      ==> C (list2FWpolicy (?p @ [?a])) ?x = C (list2FWpolicy ?p) ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 0)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_hole 7)))),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 2, template_var 2)),
           template_var 1)))),
    ("NormalisationIntegerPortProof.domSubset1",
     "dom (C (DenyAllFromTo ?one ?two \<oplus>
              DenyAllFromTo ?two ?one \<oplus>
              AllowPortFromTo ?one ?two ?dn \<oplus> ?x)) =
      dom (C (DenyAllFromTo ?one ?two \<oplus>
              DenyAllFromTo ?two ?one \<oplus> ?x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2),
                     template_var 1)),
                 template_var 0))))),
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3)),
               template_var 0)))))),
    ("NormalisationIntegerPortProof.domSubset2",
     "dom (C (DenyAllFromTo ?one ?two \<oplus>
              DenyAllFromTo ?two ?one \<oplus>
              AllowPortFromTo ?two ?one ?dn \<oplus> ?x)) =
      dom (C (DenyAllFromTo ?one ?two \<oplus>
              DenyAllFromTo ?two ?one \<oplus> ?x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 3),
                     template_var 1)),
                 template_var 0))))),
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3)),
               template_var 0)))))),
    ("NormalisationIntegerPortProof.p_eq2R",
     "[| FWNormalisationCore.normalize (rotatePolicy ?x) ~= [];
         C (list2FWpolicy
             (FWNormalisationCore.normalize (rotatePolicy ?x))) =
         CRotate ?x |]
      ==> list2policy
           (map C (rev (FWNormalisationCore.normalize (rotatePolicy ?x)))) =
          CRotate ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)),
              template_hole 7)
            ),
        template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_hole 4,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)))),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 5),
             template_app
              (template_hole 0,
               template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 0))))),
         template_app (template_hole 3, template_var 0)))),
    ("NormalisationIntegerPortProof.p_eq2_manual",
     "[| normalize_manual_order ?x ?l ~= [];
         C (list2FWpolicy (normalize_manual_order ?x ?l)) = C ?x |]
      ==> list2policy (map C (rev (normalize_manual_order ?x ?l))) = C ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0),
              template_hole 6)
            ),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 4),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_var 0)))),
         template_app (template_hole 4, template_var 1)))),
    ("NormalisationIntegerPortProof.p_eq2_manualQ",
     "[| normalize_manual_orderQ ?x ?l ~= [];
         C (list2FWpolicy (normalize_manual_orderQ ?x ?l)) = C ?x |]
      ==> list2policy (map C (rev (normalize_manual_orderQ ?x ?l))) = C ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0),
              template_hole 6)
            ),
        template_equation
         (template_app
           (template_hole 4,
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 4),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_var 0)))),
         template_app (template_hole 4, template_var 1)))),
    ("NormalisationIntegerPortProof.foo98",
     "[| applied_rule_rev C ?x (?aa # ?p) = \<lfloor>?a\<rfloor>;
         ?x : dom (C ?r); ?r : set ?p |]
      ==> ?a : set ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 4),
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)),
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_hole 2,
                template_app (template_hole 6, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2))
           ))),
    ("NormalisationIntegerPortProof.MRList3",
     "?x ~: dom (C ?xa) ==>
      applied_rule_rev C ?x (?a @ ?b # ?xs @ [?xa]) =
      applied_rule_rev C ?x (?a @ ?b # ?xs)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 3)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0))))),
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 5),
             template_var 4),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))))),
    ("NormalisationIntegerPortProof.wp3EndMT",
     "[| wellformed_policy3 (?p @ [?xs]);
         AllowPortFromTo ?a ?b ?po : set ?p |]
      ==> dom (C (AllowPortFromTo ?a ?b ?po)) Int dom (C ?xs) = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 4),
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_hole 8)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 1),
                  template_var 0)),
              template_app (template_hole 5, template_var 4))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 1),
                   template_var 0)))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 3))),
         template_hole 0))),
    ("NormalisationIntegerPortProof.wp3charn",
     "[| dom (C (AllowPortFromTo ?a ?b ?po)) ~= {};
         wellformed_policy3 (?xs @ [DenyAllFromTo ?a ?b]) |]
      ==> AllowPortFromTo ?a ?b ?po ~: set ?xs",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_app (template_hole 8, template_var 3),
                      template_var 2),
                    template_var 1))),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 0),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 2)),
                  template_hole 2)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 8, template_var 3),
                       template_var 2),
                     template_var 1)),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("NormalisationIntegerPortProof.sdnets_in_subnets",
     "[| ?p : dom (C ?x); ~ member DenyAll ?x |]
      ==> EX (a, b):sdnets ?x.
             a : subnetsOfAdr (src ?p) & b : subnetsOfAdr (dest ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 0)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 0)),
             template_app (template_hole 5, t_empty))
           ))),
    ("NormalisationIntegerPortProof.mr_not_DA",
     "[| wellformed_policy1_strong ?s;
         applied_rule_rev C ?x ?p = \<lfloor>DenyAllFromTo ?a ?ab\<rfloor>;
         set ?p = set ?s |]
      ==> applied_rule_rev C ?x ?s ~= \<lfloor>DenyAll\<rfloor>",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 3),
            template_var 2),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0))),
        template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 2, template_var 4))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 3),
               template_var 4),
             template_app (template_hole 5, template_hole 0))
           ))),
    ("NormalisationIntegerPortProof.C_eq_normalizeRotate2",
     "[| DenyAll : set (policy2list ?p);
         allNetsDistinct (policy2list (rotatePolicy ?p));
         all_in_list (policy2list (rotatePolicy ?p))
          (Nets_List (rotatePolicy ?p)) |]
      ==> C (list2FWpolicy
              (FWNormalisationCore.normalize (rotatePolicy ?p))) =
          CRotate ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_hole 9,
                template_app (template_hole 7, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 9,
                  template_app (template_hole 7, template_var 0))),
              template_app
               (template_hole 5,
                template_app (template_hole 7, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 7, template_var 0)))),
         template_app (template_hole 0, template_var 0)))),
    ("NormalisationIntegerPortProof.wp3char",
     "none_MT_rules C ?xs &
      C (AllowPortFromTo ?a ?b ?po) = \<emptyset> &
      wellformed_policy3 (?xs @ [DenyAllFromTo ?a ?b]) ==>
      AllowPortFromTo ?a ?b ?po ~: set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_hole 11),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_hole 11,
                        template_app
                         (template_app
                           (template_app (template_hole 9, template_var 2),
                            template_var 1),
                          template_var 0))),
                    t_empty)),
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 2),
                          template_var 1)),
                      template_hole 3)))))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 9, template_var 2),
                       template_var 1),
                     template_var 0)),
                 template_app (template_hole 0, template_var 3))
               )
           ))),
    ("NormalisationIntegerPortProof.foo5b",
     "[| ?x : dom (C ?b); !!r. r : set ?c ==> ?x ~: dom (C r) |]
      ==> applied_rule_rev C ?x (?b # ?c) = \<lfloor>?b\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_hole 8),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("NormalisationIntegerPortProof.CeqStart",
     "[| ?x ~: dom (C (list2FWpolicy ?a)); ?a ~= []; ?b ~= [] |]
      ==> C (list2FWpolicy (?b @ ?a)) ?x = C (list2FWpolicy ?b) ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 1))))
                )
            ),
        template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))),
           template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_var 2)))),
    ("NormalisationIntegerPortProof.C_eq_if_mr_eq",
     "[| applied_rule_rev C ?x ?b = applied_rule_rev C ?x ?a; ?a ~= [];
         ?b ~= [] |]
      ==> C (list2FWpolicy ?a) ?x = C (list2FWpolicy ?b) ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 2),
            template_var 1),
          template_app
           (template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 2),
            template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 2)),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 0, template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 0, template_var 1)),
           template_var 2)))),
    ("NormalisationIntegerPortProof.C_eq_iD_aux2",
     "[| noDenyAll1 ?p; separated ?p; ?p ~= [];
         ?x : dom (C (list2FWpolicy ?p)) |]
      ==> C (list2FWpolicy (insertDenies ?p)) ?x = C (list2FWpolicy ?p) ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("NormalisationIntegerPortProof.foo3D",
     "[| wellformed_policy1 ?p; ?p = DenyAll # ?ps;
         applied_rule_rev C ?x ?p = \<lfloor>DenyAll\<rfloor>;
         ?r : set ?ps |]
      ==> ?x ~: dom (C ?r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 10, template_hole 9),
            template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 1),
            template_var 3),
          template_app (template_hole 5, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 2))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 6, template_var 0)))
               )
           ))),
    ("NormalisationIntegerPortProof.disjSD_no_p_in_both",
     "[| disjSD_2 ?x ?y; ~ member DenyAll ?x; ~ member DenyAll ?y;
         ?p : dom (C ?x); ?p : dom (C ?y) |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 2)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 1)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate (template_hole 0))),
    ("NormalisationIntegerPortProof.CConcEnd1",
     "[| ?q @ ?p ~= []; ?x ~: dom (C ?a) |]
      ==> C (list2FWpolicy (?q @ ?p @ [?a])) ?x =
          C (list2FWpolicy (?q @ ?p)) ?x",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_hole 6)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 0)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_hole 6))))),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_var 3),
                 template_var 2))),
           template_var 1)))),
    ("NormalisationIntegerPortProof.foo4",
     "[| set ?p = set ?s & (ALL r. r : set ?p --> ?x ~: dom (C r));
         ?r : set ?s |]
      ==> ?x ~: dom (C ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 3)),
                  template_app (template_hole 7, template_var 2))),
              template_app (template_hole 6, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 7, template_var 2))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("NormalisationIntegerPortProof.iDdomAux",
     "[| ?p ~= []; ?x ~: dom (C (list2FWpolicy ?p));
         ?x : dom (C (list2FWpolicy (insertDenies ?p))) |]
      ==> C (list2FWpolicy (insertDenies ?p)) ?x =
          \<lfloor>deny ()\<rfloor>",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_app
                   (template_hole 7,
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 1))))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 1)))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1))),
           template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("NormalisationIntegerPortProof.C_eq_All_untilSortedQ",
     "[| DenyAll : set (policy2list ?p); all_in_list (policy2list ?p) ?l;
         allNetsDistinct (policy2list ?p) |]
      ==> C (list2FWpolicy
              (qsort
                (removeShadowRules2
                  (remdups
                    (rm_MT_rules C
                      (insertDeny (removeShadowRules1 (policy2list ?p))))))
                ?l)) =
          C ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 11, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 11, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 7),
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 0,
                           template_app
                            (template_hole 11, template_var 1))))))),
               template_var 0))),
         template_app (template_hole 7, template_var 1)))),
    ("NormalisationIntegerPortProof.C_eq_All_untilSorted",
     "[| DenyAll : set (policy2list ?p); all_in_list (policy2list ?p) ?l;
         allNetsDistinct (policy2list ?p) |]
      ==> C (list2FWpolicy
              (FWNormalisationCore.sort
                (removeShadowRules2
                  (remdups
                    (rm_MT_rules C
                      (insertDeny (removeShadowRules1 (policy2list ?p))))))
                ?l)) =
          C ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 11, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 11, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 7),
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 0,
                           template_app
                            (template_hole 11, template_var 1))))))),
               template_var 0))),
         template_app (template_hole 7, template_var 1)))),
    ("NormalisationIntegerPortProof.DA_is_deny",
     "?x : dom (C (DenyAllFromTo ?a ?b \<oplus>
                   DenyAllFromTo ?b ?a \<oplus> DenyAllFromTo ?a ?b)) ==>
      C (DenyAllFromTo ?a ?b \<oplus>
         DenyAllFromTo ?b ?a \<oplus> DenyAllFromTo ?a ?b)
       ?x =
      \<lfloor>deny ()\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 4, template_var 1),
                        template_var 0)),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, template_var 0),
                          template_var 1)),
                      template_app
                       (template_app (template_hole 4, template_var 1),
                        template_var 0))))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)))),
           template_var 2),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("NormalisationIntegerPortProof.C_eq_until_separatedQ",
     "[| DenyAll : set (policy2list ?p); all_in_list (policy2list ?p) ?l;
         allNetsDistinct (policy2list ?p) |]
      ==> C (list2FWpolicy
              (separate
                (qsort
                  (removeShadowRules2
                    (remdups
                      (rm_MT_rules C
                        (insertDeny
                          (removeShadowRules1 (policy2list ?p))))))
                  ?l))) =
          C ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 12, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 12, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_hole 8),
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 0,
                             template_app
                              (template_hole 12, template_var 1))))))),
                 template_var 0)))),
         template_app (template_hole 8, template_var 1)))),
    ("NormalisationIntegerPortProof.C_eq_until_separated",
     "[| DenyAll : set (policy2list ?p); all_in_list (policy2list ?p) ?l;
         allNetsDistinct (policy2list ?p) |]
      ==> C (list2FWpolicy
              (separate
                (FWNormalisationCore.sort
                  (removeShadowRules2
                    (remdups
                      (rm_MT_rules C
                        (insertDeny
                          (removeShadowRules1 (policy2list ?p))))))
                  ?l))) =
          C ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_hole 14),
              template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 12, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 12, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_hole 8),
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 0,
                             template_app
                              (template_hole 12, template_var 1))))))),
                 template_var 0)))),
         template_app (template_hole 8, template_var 1)))),
    ("NormalisationIntegerPortProof.foo3a",
     "[| applied_rule_rev C ?x (?a @ [?b] @ ?c) = \<lfloor>?b\<rfloor>;
         ?r : set ?c; ?b ~: set ?c |]
      ==> ?x ~: dom (C ?r)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_hole 9),
              template_var 4),
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_hole 6)),
                template_var 1))),
          template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 9, template_var 0)))
               )
           ))),
    ("NormalisationIntegerPortProof.C_eq_sortedQ",
     "[| distinct ?p; all_in_list ?p ?l; singleCombinators ?p;
         wellformed_policy1_strong ?p; wellformed_policy3 ?p;
         allNetsDistinct ?p |]
      ==> C (list2FWpolicy (qsort ?p ?l)) = C (list2FWpolicy ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 1))))),
    ("NormalisationIntegerPortProof.C_eq_sorted",
     "[| distinct ?p; all_in_list ?p ?l; singleCombinators ?p;
         wellformed_policy1_strong ?p; wellformed_policy3 ?p;
         allNetsDistinct ?p |]
      ==> C (list2FWpolicy (FWNormalisationCore.sort ?p ?l)) =
          C (list2FWpolicy ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 1))))),
    ("NormalisationIntegerPortProof.C_eq_Until_InsertDeniesQ",
     "[| DenyAll : set (policy2list ?p); all_in_list (policy2list ?p) ?l;
         allNetsDistinct (policy2list ?p) |]
      ==> C (list2FWpolicy
              (insertDenies
                (separate
                  (qsort
                    (removeShadowRules2
                      (remdups
                        (rm_MT_rules C
                          (insertDeny
                            (removeShadowRules1 (policy2list ?p))))))
                    ?l)))) =
          C ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_hole 15),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 13, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 13, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_hole 9),
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 0,
                               template_app
                                (template_hole 13, template_var 1))))))),
                   template_var 0))))),
         template_app (template_hole 9, template_var 1)))),
    ("NormalisationIntegerPortProof.C_eq_Until_InsertDenies",
     "[| DenyAll : set (policy2list ?p); all_in_list (policy2list ?p) ?l;
         allNetsDistinct (policy2list ?p) |]
      ==> C (list2FWpolicy
              (insertDenies
                (separate
                  (FWNormalisationCore.sort
                    (removeShadowRules2
                      (remdups
                        (rm_MT_rules C
                          (insertDeny
                            (removeShadowRules1 (policy2list ?p))))))
                    ?l)))) =
          C ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_hole 15),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 13, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 13, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_hole 9),
                           template_app
                            (template_hole 1,
                             template_app
                              (template_hole 0,
                               template_app
                                (template_hole 13, template_var 1))))))),
                   template_var 0))))),
         template_app (template_hole 9, template_var 1)))),
    ("NormalisationIntegerPortProof.foo28",
     "[| AllowPortFromTo ?a ?b ?po : set ?p;
         dom (C (AllowPortFromTo ?a ?b ?po)) ~= {};
         wellformed_policy3 (?p @ [?x]) |]
      ==> ?x ~= AllowPortFromTo ?a ?b ?po",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_app (template_hole 11, template_var 4),
                    template_var 3),
                  template_var 2)),
              template_app (template_hole 10, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_app (template_hole 11, template_var 4),
                      template_var 3),
                    template_var 2))),
              template_hole 5)
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1)))
            )],
       template_negation
        (
           template_equation
            (template_var 0,
             template_app
              (template_app
                (template_app (template_hole 11, template_var 4),
                 template_var 3),
               template_var 2))
           ))),
    ("NormalisationIntegerPortProof.mr_first",
     "[| ?x : dom (C ?b); ALL r. r : set ?c --> ?x ~: dom (C r);
         ?s = ?b # ?c |]
      ==> applied_rule_rev C ?x ?s = \<lfloor>?b\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 2)))
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 10),
             template_var 3),
           template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("NormalisationIntegerPortProof.C_eq_compileQ",
     "[| DenyAll : set (policy2list ?p); all_in_list (policy2list ?p) ?l;
         allNetsDistinct (policy2list ?p) |]
      ==> C (list2FWpolicy
              (removeAllDuplicates
                (insertDenies
                  (separate
                    (qsort
                      (removeShadowRules2
                        (remdups
                          (rm_MT_rules C
                            (insertDeny
                              (removeShadowRules1 (policy2list ?p))))))
                      ?l))))) =
          C ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_hole 16),
              template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 14, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 14, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_app
                              (template_hole 2, template_hole 10),
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 0,
                                 template_app
                                  (template_hole 14, template_var 1))))))),
                     template_var 0)))))),
         template_app (template_hole 10, template_var 1)))),
    ("NormalisationIntegerPortProof.C_eq_compile",
     "[| DenyAll : set (policy2list ?p); all_in_list (policy2list ?p) ?l;
         allNetsDistinct (policy2list ?p) |]
      ==> C (list2FWpolicy
              (removeAllDuplicates
                (insertDenies
                  (separate
                    (FWNormalisationCore.sort
                      (removeShadowRules2
                        (remdups
                          (rm_MT_rules C
                            (insertDeny
                              (removeShadowRules1 (policy2list ?p))))))
                      ?l))))) =
          C ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_hole 16),
              template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 14, template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 14, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_app
                              (template_hole 2, template_hole 10),
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 0,
                                 template_app
                                  (template_hole 14, template_var 1))))))),
                     template_var 0)))))),
         template_app (template_hole 10, template_var 1)))),
    ("NormalisationIntegerPortProof.C_eq_None2",
     "[| ?a ~= []; ?b ~= []; applied_rule_rev C ?x ?a = \<bottom>;
         applied_rule_rev C ?x ?b = \<bottom> |]
      ==> C (list2FWpolicy ?a) ?x = C (list2FWpolicy ?b) ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0),
            template_var 2),
          template_hole 2),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0),
            template_var 1),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("NormalisationIntegerPortProof.mr_charn",
     "[| ?a : set ?p; ?x : dom (C ?a);
         !!r. r : set ?p & ?x : dom (C r) ==> r = ?a |]
      ==> applied_rule_rev C ?x ?p = \<lfloor>?a\<rfloor>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 2)))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 6),
             template_var 0),
           template_var 1),
         template_app (template_hole 0, template_var 2)))),
    ("NormalisationIntegerPortProof.C_eq_if_mr_eq2",
     "[| applied_rule_rev C ?x ?a = \<lfloor>?r\<rfloor>;
         applied_rule_rev C ?x ?b = \<lfloor>?r\<rfloor>; ?a ~= [];
         ?b ~= [] |]
      ==> C (list2FWpolicy ?a) ?x = C (list2FWpolicy ?b) ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 3),
            template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 3),
            template_var 0),
          template_app (template_hole 5, template_var 1)),
        template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 0, template_var 2)),
           template_var 3),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 0, template_var 0)),
           template_var 3)))),
    ("NormalisationIntegerPortProof.C_eq_Sets",
     "[| singleCombinators ?p; wellformed_policy1_strong ?p;
         wellformed_policy1_strong ?s; wellformed_policy3 ?p;
         wellformed_policy3 ?s; allNetsDistinct ?p; set ?p = set ?s |]
      ==> C (list2FWpolicy ?p) ?x = C (list2FWpolicy ?s) ?x",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("NormalisationIntegerPortProof.C_eq_Sets_mr",
     "[| set ?p = set ?s; singleCombinators ?p;
         wellformed_policy1_strong ?p; wellformed_policy1_strong ?s;
         wellformed_policy3 ?p; wellformed_policy3 ?s; allNetsDistinct ?p |]
      ==> applied_rule_rev C ?x ?p = applied_rule_rev C ?x ?s",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2),
          template_app (template_hole 7, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0),
           template_var 1)))),
    ("NormalisationIntegerPortProof.foo8",
     "[| ALL r. r : set ?p & ?x : dom (C r) --> r = ?a; set ?p = set ?s |]
      ==> ALL r. r : set ?s & ?x : dom (C r) --> r = ?a",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_equation
         (template_app (template_hole 5, template_var 3),
          template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("NormalisationIntegerPortProof.NATDistr",
     "[| ?N ~= []; ?F = C (list2policyR ?N) |]
      ==> (%(x, y). x) o\<^sub>f
          (?NAT \<Otimes>\<^sub>2 ?F o (%x. (x, x))) =
          list2policy
           ((?NAT \<Otimes>\<^sub>L map C ?N) (\<Otimes>\<^sub>2)
             (%(x, y). x) (%x. (x, x)))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 12)),
        template_equation
         (template_var 1,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1)),
             t_empty)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_app (template_hole 0, template_hole 10),
                     template_var 2)),
                 template_hole 4),
               template_app (template_hole 6, t_empty)),
             t_empty))))),
    ("NormalisationIntegerPortProof.dom_id",
     "[| noDenyAll (?a # ?p); separated (?a # ?p); ?p ~= [];
         ?x ~: dom (C (list2FWpolicy ?p)); ?x : dom (C ?a) |]
      ==> ?x ~: dom (C (list2FWpolicy (insertDenies ?p)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_app
                   (template_hole 3,
                    template_app
                     (template_hole 2,
                      template_app (template_hole 1, template_var 1))))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 1)))))
               )
           ))),
    ("NormalisationIntegerPortProof.sep_dom2_aux2",
     "[| ?x : dom (C (list2FWpolicy (separate (?y # ?z)))) -->
         ?x : dom (C (list2FWpolicy (?y # ?z)));
         ?x : dom (C (list2FWpolicy (?a # separate (?y # ?z)))) |]
      ==> ?x : dom (C (list2FWpolicy (?a \<oplus> ?y # ?z)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app
                       (template_hole 3,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_app (template_hole 1, template_var 2),
                            template_var 1))))))),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 1, template_var 2),
                        template_var 1))))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 1, template_var 0),
                      template_app
                       (template_hole 2,
                        template_app
                         (template_app (template_hole 1, template_var 2),
                          template_var 1)))))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 3),
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 0),
                         template_var 2)),
                     template_var 1)))))
           ))),
    ("NormalisationIntegerPortProof.C_eq_normalizeRotate",
     "[| DenyAll : set (policy2list ?p);
         allNetsDistinct (policy2list (rotatePolicy ?p));
         all_in_list (policy2list (rotatePolicy ?p))
          (Nets_List (rotatePolicy ?p)) |]
      ==> C (list2FWpolicy
              (removeAllDuplicates
                (insertDenies
                  (separate
                    (FWNormalisationCore.sort
                      (removeShadowRules2
                        (remdups
                          (rm_MT_rules C
                            (insertDeny
                              (removeShadowRules1
                                (policy2list (rotatePolicy ?p)))))))
                      (Nets_List (rotatePolicy ?p))))))) =
          CRotate ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 20, template_hole 19),
              template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_hole 17,
                template_app (template_hole 15, template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_hole 17,
                  template_app (template_hole 15, template_var 0))),
              template_app
               (template_hole 13,
                template_app (template_hole 15, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 11,
           template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_hole 3, template_hole 11),
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 17,
                                   template_app
                                    (template_hole 15,
                                     template_var 0)))))))),
                     template_app
                      (template_hole 13,
                       template_app
                        (template_hole 15, template_var 0)))))))),
         template_app (template_hole 0, template_var 0)))),
    ("NormalisationIntegerPortProof.domsdisj",
     "[| ?p ~= []; !!x s. s : set ?p & x : dom (C ?A) ==> x ~: dom (C s);
         ?y : dom (C ?A) |]
      ==> ?y ~: dom (C (list2FWpolicy ?p))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 2))))
               )
           ))),
    ("NormalisationIntegerPortProof.isSepaux",
     "[| ?p ~= []; noDenyAll (?a # ?p); separated (?a # ?p);
         ?x : dom (C (DenyAllFromTo (first_srcNet ?a)
                       (first_destNet ?a) \<oplus>
                      DenyAllFromTo (first_destNet ?a)
                       (first_srcNet ?a) \<oplus>
                      ?a)) |]
      ==> ?x ~: dom (C (list2FWpolicy ?p))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 11)),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 9, template_var 1),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app
                         (template_hole 3,
                          template_app (template_hole 2, template_var 1)),
                        template_app (template_hole 1, template_var 1))),
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app
                         (template_app
                           (template_hole 3,
                            template_app (template_hole 1, template_var 1)),
                          template_app (template_hole 2, template_var 1))),
                      template_var 1)))))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 0, template_var 2))))
               )
           ))),
    ("NormalisationIntegerPortProof.DistinctNetsDenyAllow",
     "[| DenyAllFromTo ?b ?c : set ?p; AllowPortFromTo ?a ?d ?po : set ?p;
         allNetsDistinct ?p;
         dom (C (DenyAllFromTo ?b ?c)) Int
         dom (C (AllowPortFromTo ?a ?d ?po)) ~=
         {} |]
      ==> ?b = ?a & ?c = ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_var 4)),
              template_app (template_hole 10, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_app (template_hole 9, template_var 2),
                    template_var 1),
                  template_var 0)),
              template_app (template_hole 10, template_var 3))
            ),
        template_predicate (template_app (template_hole 8, template_var 3)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 11, template_var 5),
                        template_var 4)))),
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_app (template_hole 9, template_var 2),
                        template_var 1),
                      template_var 0)))),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1))
           ))),
    ("NormalisationIntegerPortProof.rule_charn2",
     "[| allNetsDistinct ?p; wellformed_policy1 ?p; singleCombinators ?p;
         wellformed_policy3 ?p; AllowPortFromTo ?c ?d ?po : set ?p;
         ?x : dom (C (AllowPortFromTo ?c ?d ?po)) |]
      ==> applied_rule_rev C ?x ?p =
          \<lfloor>AllowPortFromTo ?c ?d ?po\<rfloor>",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_predicate
         (template_app (template_hole 10, template_var 4)),
        template_predicate (template_app (template_hole 9, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app (template_hole 6, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_app (template_hole 7, template_var 3),
                      template_var 2),
                    template_var 1))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 3),
             template_var 0),
           template_var 4),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1))))),
    ("NormalisationIntegerPortProof.rule_charn3",
     "[| wellformed_policy1 ?p; allNetsDistinct ?p; singleCombinators ?p;
         wellformed_policy3 ?p;
         applied_rule_rev C ?x ?p = \<lfloor>DenyAllFromTo ?c ?d\<rfloor>;
         AllowPortFromTo ?a ?b ?po : set ?p |]
      ==> ?x ~: dom (C (AllowPortFromTo ?a ?b ?po))",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 6)),
        template_predicate
         (template_app (template_hole 13, template_var 6)),
        template_predicate
         (template_app (template_hole 12, template_var 6)),
        template_predicate
         (template_app (template_hole 11, template_var 6)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 9, template_hole 8),
              template_var 5),
            template_var 6),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1),
                  template_var 0)),
              template_app (template_hole 3, template_var 6))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_app (template_hole 4, template_var 2),
                         template_var 1),
                       template_var 0))))
               )
           ))),
    ("NormalisationIntegerPortProof.rule_charnDAFT",
     "[| wellformed_policy1_strong ?p; allNetsDistinct ?p;
         singleCombinators ?p; wellformed_policy3 ?p;
         applied_rule_rev C ?x ?p = \<lfloor>DenyAllFromTo ?a ?b\<rfloor>;
         ?r : set (tl ?p); ?x : dom (C ?r) |]
      ==> ?r = DenyAllFromTo ?a ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 4)),
        template_predicate
         (template_app (template_hole 13, template_var 4)),
        template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_predicate
         (template_app (template_hole 11, template_var 4)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 9, template_hole 8),
              template_var 3),
            template_var 4),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_hole 1,
                template_app (template_hole 8, template_var 0)))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 6, template_var 2),
           template_var 1)))),
    ("NormalisationIntegerPortProof.rule_charn1",
     "[| allNetsDistinct ?p;
         applied_rule_rev C ?x ?p =
         \<lfloor>AllowPortFromTo ?a ?b ?po\<rfloor>;
         singleCombinators ?p; ?r : set ?p; ?x : dom (C ?r) |]
      ==> ?r = AllowPortFromTo ?a ?b ?po |
          ?r = DenyAllFromTo ?a ?b | ?r = DenyAll",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 5)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 12, template_hole 11),
              template_var 4),
            template_var 5),
          template_app
           (template_hole 10,
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2),
              template_var 1))),
        template_predicate (template_app (template_hole 8, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_hole 4,
                template_app (template_hole 11, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app
                    (template_app (template_hole 9, template_var 3),
                     template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2))),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 0)))
           ))),
    ("NormalisationIntegerPortProof.AD_aux",
     "[| AllowPortFromTo ?a ?b ?po : set ?p; DenyAllFromTo ?c ?d : set ?p;
         allNetsDistinct ?p; singleCombinators ?p; ?a ~= ?c | ?b ~= ?d |]
      ==> dom (C (AllowPortFromTo ?a ?b ?po)) Int
          dom (C (DenyAllFromTo ?c ?d)) =
          {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_app (template_hole 12, template_var 5),
                    template_var 4),
                  template_var 3)),
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 0)),
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 5),
                    template_var 1))),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 12, template_var 5),
                     template_var 4),
                   template_var 3)))),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_var 0)))),
         template_hole 0))),
    ("NormalisationIntegerPortProof.normalizeNAT",
     "[| DenyAll : set (policy2list ?Filter);
         allNetsDistinct (policy2list ?Filter);
         all_in_list (policy2list ?Filter) (Nets_List ?Filter) |]
      ==> (%(x, y). x) o\<^sub>f
          (?NAT \<Otimes>\<^sub>2 C ?Filter o (%x. (x, x))) =
          list2policy
           ((?NAT \<Otimes>\<^sub>L
             map C (rev (FWNormalisationCore.normalize ?Filter)))
             (\<Otimes>\<^sub>2) (%(x, y). x) (%x. (x, x)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_hole 17),
              template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_hole 14,
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 15, template_var 1)),
              template_app (template_hole 12, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 10, template_app (template_hole 9, t_empty)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_app (template_hole 6, template_var 1))),
             t_empty)),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app (template_hole 2, template_hole 6),
                     template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 1)))),
                 template_hole 7),
               template_app (template_hole 9, t_empty)),
             t_empty))))),
    ("NormalisationIntegerPortProof.DistinctNetsAllowAllow",
     "[| AllowPortFromTo ?b ?c ?poo : set ?p;
         AllowPortFromTo ?a ?d ?po : set ?p; allNetsDistinct ?p;
         dom (C (AllowPortFromTo ?b ?c ?poo)) Int
         dom (C (AllowPortFromTo ?a ?d ?po)) ~=
         {} |]
      ==> ?b = ?a & ?c = ?d & ?poo = ?po",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_app (template_hole 11, template_var 6),
                    template_var 5),
                  template_var 4)),
              template_app (template_hole 10, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_app (template_hole 11, template_var 2),
                    template_var 1),
                  template_var 0)),
              template_app (template_hole 10, template_var 3))
            ),
        template_predicate (template_app (template_hole 9, template_var 3)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app
                       (template_app
                         (template_app (template_hole 11, template_var 6),
                          template_var 5),
                        template_var 4)))),
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_app (template_hole 11, template_var 2),
                        template_var 1),
                      template_var 0)))),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0)))
           ))),
    ("NormalisationIntegerPortProof.NetsEq_if_sameP_DD",
     "[| allNetsDistinct ?p; ?u : set ?p; ?v : set ?p;
         ?u = DenyAllFromTo ?a ?b; ?v = DenyAllFromTo ?c ?d;
         ?x : dom (C ?u); ?x : dom (C ?v) |]
      ==> ?a = ?c & ?b = ?d",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 6),
              template_app (template_hole 7, template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app (template_hole 7, template_var 7))
            ),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 5, template_var 4),
            template_var 3)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 6)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 5)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))
           ))),
    ("NormalisationIntegerPortProof.rule_charn4",
     "[| wellformed_policy1 ?p; allNetsDistinct ?p; singleCombinators ?p;
         wellformed_policy3 ?p; DenyAll ~: set ?p;
         applied_rule_rev C ?x ?p = \<lfloor>DenyAllFromTo ?a ?b\<rfloor>;
         ?r : set ?p; ?x : dom (C ?r) |]
      ==> ?r = DenyAllFromTo ?a ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 4)),
        template_predicate
         (template_app (template_hole 14, template_var 4)),
        template_predicate
         (template_app (template_hole 13, template_var 4)),
        template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_hole 9),
                  template_app (template_hole 8, template_var 4))
                )
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 3),
            template_var 4),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 8, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_hole 1,
                template_app (template_hole 5, template_var 0)))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 1)))),
    ("NormalisationIntegerPortProof.foo31",
     "[| ALL r.
            r : set ?p & ?x : dom (C r) -->
            r = AllowPortFromTo ?a ?b ?po |
            r = DenyAllFromTo ?a ?b | r = DenyAll;
         set ?p = set ?s |]
      ==> ALL r.
             r : set ?s & ?x : dom (C r) -->
             r = AllowPortFromTo ?a ?b ?po |
             r = DenyAllFromTo ?a ?b | r = DenyAll",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_equation
         (template_app (template_hole 9, template_var 5),
          template_app (template_hole 9, template_var 0))],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("NormalisationIntegerPortProof.foo31a",
     "[| ALL r.
            r : set ?p & ?x : dom (C r) -->
            r = AllowPortFromTo ?a ?b ?po |
            r = DenyAllFromTo ?a ?b | r = DenyAll;
         set ?p = set ?s; ?r : set ?s; ?x : dom (C ?r) |]
      ==> ?r = AllowPortFromTo ?a ?b ?po |
          ?r = DenyAllFromTo ?a ?b | ?r = DenyAll",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_equation
         (template_app (template_hole 9, template_var 6),
          template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 4),
                     template_var 3),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 3))),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 1)))
           )))]
