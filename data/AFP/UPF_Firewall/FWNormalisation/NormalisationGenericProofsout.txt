Loading theory "Draft.NetworkCore" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.NetworkModels" via "Draft.DatatypeAddress")
Loading theory "Draft.Ports" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Ports"
### 0.057s elapsed time, 0.242s cpu time, 0.009s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.526s cpu time, 0.009s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.839s cpu time, 0.091s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.309s elapsed time, 1.242s cpu time, 0.099s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
### theory "Draft.NetworkCore"
### 0.754s elapsed time, 2.892s cpu time, 0.510s GC time
Loading theory "Draft.DatatypeAddress" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.867s elapsed time, 3.314s cpu time, 0.644s GC time
Loading theory "Draft.DatatypePort" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Draft.DatatypeAddress"
### 0.465s elapsed time, 1.826s cpu time, 0.233s GC time
Loading theory "Draft.IPv4" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
overloading
  src_port_ipv4 \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_ipv4 \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_ipv4 \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.IPv4"
### 0.063s elapsed time, 0.254s cpu time, 0.000s GC time
Loading theory "Draft.IPv4_TCPUDP" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
### theory "HOL-Library.Stream"
### 1.008s elapsed time, 3.874s cpu time, 0.731s GC time
Loading theory "Draft.IntegerAddress" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
overloading
  src_port_ipv4_TCPUDP \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_ipv4_TCPUDP \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_ipv4_TCPUDP \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
### theory "Draft.IntegerAddress"
### 0.031s elapsed time, 0.115s cpu time, 0.000s GC time
Loading theory "Draft.IntegerPort" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
overloading
  dest_protocol_ipv4_TCPUDP \<equiv> dest_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
Found termination order: "size <*mlex*> {}"
### theory "Draft.IPv4_TCPUDP"
### 0.100s elapsed time, 0.387s cpu time, 0.087s GC time
Loading theory "Draft.IntegerPort_TCPUDP" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
overloading
  src_port_int \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_int \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_int \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
### theory "Draft.IntegerPort"
### 0.054s elapsed time, 0.213s cpu time, 0.000s GC time
Loading theory "Draft.PolicyCore" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators" via "Draft.PortCombinators" via "Draft.PolicyCombinators")
overloading
  src_port_int_TCPUDP \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_int_TCPUDP \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_int_TCPUDP \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
overloading
  src_protocol_int_TCPUDP \<equiv> src_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
Found termination order: "size <*mlex*> {}"
overloading
  dest_protocol_int_TCPUDP \<equiv> dest_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
### theory "Draft.IntegerPort_TCPUDP"
### 0.086s elapsed time, 0.350s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
overloading
  src_port_datatype \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_datatype \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_datatype \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
### theory "Draft.DatatypePort"
### 0.690s elapsed time, 2.419s cpu time, 0.712s GC time
Loading theory "Draft.NetworkModels" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter")
Found termination order: "size <*mlex*> {}"
### theory "Draft.PolicyCore"
### 0.479s elapsed time, 1.537s cpu time, 0.667s GC time
Loading theory "Draft.PolicyCombinators" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators" via "Draft.PortCombinators")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.PolicyCombinators"
### 0.064s elapsed time, 0.194s cpu time, 0.000s GC time
Loading theory "Draft.PortCombinators" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators")
### theory "Draft.PortCombinators"
### 0.198s elapsed time, 0.594s cpu time, 0.059s GC time
Loading theory "Draft.ProtocolPortCombinators" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter")
Found termination order: "size <*mlex*> {}"
### theory "Draft.ProtocolPortCombinators"
### 0.177s elapsed time, 0.538s cpu time, 0.055s GC time
### theory "HOL-Library.Tree"
### 2.242s elapsed time, 7.906s cpu time, 1.603s GC time
Loading theory "Draft.Templates" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.ExtrEqs")
### theory "Draft.NetworkModels"
### 0.552s elapsed time, 1.622s cpu time, 0.156s GC time
Loading theory "Draft.PacketFilter" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.059s elapsed time, 0.151s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.NormalisationGenericProofsTemplates")
### theory "Draft.PacketFilter"
### 0.264s elapsed time, 0.566s cpu time, 0.000s GC time
Loading theory "Draft.FWNormalisationCore" (required by "Draft.NormalisationGenericProofsTemplates" via "Draft.NormalisationGenericProofs")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.534s elapsed time, 1.108s cpu time, 0.072s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> length <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.FWNormalisationCore"
### 6.536s elapsed time, 9.118s cpu time, 2.648s GC time
Loading theory "Draft.NormalisationGenericProofs" (required by "Draft.NormalisationGenericProofsTemplates")
### theory "Draft.NormalisationGenericProofs"
### 0.700s elapsed time, 0.761s cpu time, 0.080s GC time
Loading theory "Draft.NormalisationGenericProofsTemplates"
val templateLemmas =
   [("NormalisationGenericProofs.SCp2l",
     "singleCombinators (policy2list ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("NormalisationGenericProofs.dRD", "distinct (remdups ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("NormalisationGenericProofs.wp1ID",
     "wellformed_policy1_strong (insertDeny (removeShadowRules1 ?p))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("NormalisationGenericProofs.denyAllDom", "?x : dom D\<^sub>U",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_hole 0))
         )),
    ("NormalisationGenericProofs.p2lNmt", "policy2list ?p ~= []",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("NormalisationGenericProofs.DAiniD", "DenyAll : set (insertDeny ?p)",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("NormalisationGenericProofs.fl2",
     "firstList (separate ?p) = firstList ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("NormalisationGenericProofs.netlistalternativeSeparate",
     "net_list_aux ?p = net_list_aux (separate ?p)",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("NormalisationGenericProofs.SR1Subset",
     "set (removeShadowRules1 ?p) <= set ?p",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("NormalisationGenericProofs.RS2Set",
     "set (removeShadowRules2 ?p) <= set ?p",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("NormalisationGenericProofs.noDA1eq", "noDenyAll ?p ==> noDenyAll1 ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("NormalisationGenericProofs.OTNSC",
     "singleCombinators ?p ==> OnlyTwoNets ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("NormalisationGenericProofs.wp1_eq",
     "wellformed_policy1_strong ?p ==> wellformed_policy1 ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("NormalisationGenericProofs.set_sortQ", "set (qsort ?xs ?l) = set ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("NormalisationGenericProofs.set_sort",
     "set (FWNormalisationCore.sort ?xs ?l) = set ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("NormalisationGenericProofs.noDAAll",
     "noDenyAll ?p = (~ memberP DenyAll ?p)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("NormalisationGenericProofs.NDComm",
     "netsDistinct ?a ?b = netsDistinct ?b ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("NormalisationGenericProofs.distinct_sort",
     "distinct (FWNormalisationCore.sort ?xs ?l) = distinct ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("NormalisationGenericProofs.setInsert",
     "set ?list <= insert ?a (set ?list)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 1),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app (template_hole 1, template_var 1)))),
    ("NormalisationGenericProofs.ANDiD",
     "allNetsDistinct ?p ==> allNetsDistinct (insertDeny ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.ANDSep",
     "allNetsDistinct ?p ==> allNetsDistinct (separate ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.AND_tl",
     "allNetsDistinct ?p ==> allNetsDistinct (tl ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.noDAID",
     "noDenyAll ?p ==> noDenyAll (insertDenies ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.noDAsep",
     "noDenyAll ?p ==> noDenyAll (separate ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.NC2Sep",
     "noDenyAll1 ?p ==> NetsCollected2 (separate ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.noDA1sep",
     "noDenyAll1 ?p ==> noDenyAll1 (separate ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.SCRiD",
     "singleCombinators ?p ==> singleCombinators (insertDeny ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.SC1",
     "singleCombinators ?p ==> singleCombinators (removeShadowRules1 ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.SC2",
     "singleCombinators ?p ==> singleCombinators (removeShadowRules2 ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.SC_tl",
     "singleCombinators ?p ==> singleCombinators (tl ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.SCrd",
     "singleCombinators ?p ==> singleCombinators (remdups ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.WP1iD",
     "wellformed_policy1_strong ?p ==>
      wellformed_policy1_strong (insertDeny ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.wp1n_RS2",
     "wellformed_policy1_strong ?p ==>
      wellformed_policy1_strong (removeShadowRules2 ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.wp1_alternativesep",
     "wellformed_policy1_strong ?p ==>
      wellformed_policy1_strong (separate ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.WP1rd",
     "wellformed_policy1_strong ?p ==>
      wellformed_policy1_strong (remdups ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.distinct_tl",
     "distinct ?p ==> distinct (tl ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.distinct_RS2",
     "distinct ?p ==> distinct (removeShadowRules2 ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.memberPsep",
     "memberP ?x (separate ?p) = memberP ?x ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("NormalisationGenericProofs.saux",
     "FWNormalisationCore.insort DenyAll ?p ?l = DenyAll # ?p",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_hole 1), template_var 1))),
    ("NormalisationGenericProofs.auxx8",
     "removeShadowRules1_alternative_rev [?x] = [?x]",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("NormalisationGenericProofs.aNDDA",
     "allNetsDistinct ?p ==> allNetsDistinct (DenyAll # ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.noDAsort",
     "noDenyAll1 ?p ==> noDenyAll1 (FWNormalisationCore.sort ?p ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.SC3Q",
     "singleCombinators ?p ==> singleCombinators (qsort ?p ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.SC3",
     "singleCombinators ?p ==>
      singleCombinators (FWNormalisationCore.sort ?p ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.SC_sublist2",
     "singleCombinators ?xs ==> singleCombinators (filter ?P ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("NormalisationGenericProofs.wellformed1_sortedQ",
     "wellformed_policy1 ?p ==> wellformed_policy1 (qsort ?p ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.wellformed1_sorted",
     "wellformed_policy1 ?p ==>
      wellformed_policy1 (FWNormalisationCore.sort ?p ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.wellformed1_alternative_sorted",
     "wellformed_policy1_strong ?p ==>
      wellformed_policy1_strong (FWNormalisationCore.sort ?p ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.wp1_alternative_not_mt",
     "wellformed_policy1_strong ?p ==> ?p ~= []",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("NormalisationGenericProofs.wp1_aux1aa",
     "wellformed_policy1_strong ?p ==> DenyAll : set ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.disjComm",
     "disjSD_2 ?a ?b ==> disjSD_2 ?b ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("NormalisationGenericProofs.ba",
     "netsDistinct ?a ?b ==> netsDistinct ?b ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("NormalisationGenericProofs.OTNConc",
     "OnlyTwoNets (?y # ?z) ==> OnlyTwoNets ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("NormalisationGenericProofs.ANDConc",
     "allNetsDistinct (?a # ?p) ==> allNetsDistinct ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("NormalisationGenericProofs.noDA1C",
     "noDenyAll1 (?a # ?p) ==> noDenyAll1 ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("NormalisationGenericProofs.singleCombinatorsConc",
     "singleCombinators (?x # ?xs) ==> singleCombinators ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("NormalisationGenericProofs.AILiD",
     "all_in_list ?p ?l ==> all_in_list (insertDeny ?p) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("NormalisationGenericProofs.AIL1",
     "all_in_list ?p ?l ==> all_in_list (removeShadowRules1 ?p) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("NormalisationGenericProofs.AIL2",
     "all_in_list ?p ?l ==> all_in_list (removeShadowRules2 ?p) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("NormalisationGenericProofs.AILrd",
     "all_in_list ?p ?l ==> all_in_list (remdups ?p) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("NormalisationGenericProofs.wp1alternative_RS1",
     "DenyAll : set ?p ==>
      wellformed_policy1_strong (removeShadowRules1 ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.waux2",
     "DenyAll ~: set ?xs ==> wellformed_policy1 ?xs",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("NormalisationGenericProofs.set_insort",
     "set (FWNormalisationCore.insort ?x ?xs ?l) = insert ?x (set ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 2, template_var 1)))),
    ("NormalisationGenericProofs.RS1_DA",
     "removeShadowRules1 (?xs @ [DenyAll]) = [DenyAll]",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_hole 0))),
    ("NormalisationGenericProofs.RS1N_DA",
     "removeShadowRules1_alternative (?a @ [DenyAll]) = [DenyAll]",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_hole 0))),
    ("NormalisationGenericProofs.wellformed_eq",
     "DenyAll : set ?p -->
      wellformed_policy1 ?p = wellformed_policy1_strong ?p",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app (template_hole 3, template_var 0))),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0)))
         )),
    ("NormalisationGenericProofs.set_insort_insert",
     "set (FWNormalisationCore.insort ?x ?xs ?l) <= insert ?x (set ?xs)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 2, template_var 1)))),
    ("NormalisationGenericProofs.WP1n_DA_notinSet",
     "wellformed_policy1_strong ?p ==> DenyAll ~: set (tl ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("NormalisationGenericProofs.wp1n_tl",
     "wellformed_policy1_strong ?p ==> ?p = DenyAll # tl ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("NormalisationGenericProofs.singleCombinatorsStart",
     "singleCombinators (?x # ?xs) ==> singleCombinators [?x]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("NormalisationGenericProofs.inSet_not_MT", "?a : set ?p ==> ?p ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("NormalisationGenericProofs.sortedConc",
     "FWNormalisationCore.sorted (?a # ?p) ?l ==>
      FWNormalisationCore.sorted ?p ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("NormalisationGenericProofs.SCConcEnd",
     "singleCombinators (?xs @ [?xa]) ==> singleCombinators ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_hole 0)))
            )],
       template_predicate
        (template_app (template_hole 3, template_var 1)))),
    ("NormalisationGenericProofs.WP1ConcEnd",
     "wellformed_policy1 (?xs @ [?xa]) ==> wellformed_policy1 ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_hole 0)))
            )],
       template_predicate
        (template_app (template_hole 3, template_var 1)))),
    ("NormalisationGenericProofs.nDASC",
     "[| wellformed_policy1 ?p; singleCombinators ?p |] ==> noDenyAll1 ?p",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("NormalisationGenericProofs.domComm",
     "dom ?a Int dom ?b = dom ?b Int dom ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 1, template_var 1)))),
    ("NormalisationGenericProofs.nDAcharn",
     "noDenyAll ?p = (ALL r:set ?p. ~ member DenyAll r)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         t_empty))),
    ("NormalisationGenericProofs.l2p_aux2",
     "?list = [] ==> list2FWpolicy (?a # ?list) = ?a",
     template_implication
      ([template_equation (template_var 1, template_hole 3)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("NormalisationGenericProofs.wellformed1_sorted_aux",
     "wellformed_policy1 (?x # ?p) ==>
      wellformed_policy1 (FWNormalisationCore.insort ?x ?p ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.fMTaux",
     "~ member DenyAll ?x ==> first_bothNet ?x ~= {}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("NormalisationGenericProofs.remDupsNMT",
     "?p ~= [] ==> remdups ?p ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("NormalisationGenericProofs.idNMT",
     "?p ~= [] ==> insertDenies ?p ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("NormalisationGenericProofs.rADnMT",
     "?p ~= [] ==> removeAllDuplicates ?p ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("NormalisationGenericProofs.RS1n_nMT",
     "?p ~= [] ==> removeShadowRules1_alternative ?p ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("NormalisationGenericProofs.RS2_NMT",
     "?p ~= [] ==> removeShadowRules2 ?p ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("NormalisationGenericProofs.sepnMT", "?p ~= [] ==> separate ?p ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("NormalisationGenericProofs.position_positive",
     "?a : set ?l ==> 0 < position ?a ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("NormalisationGenericProofs.smaller_sym",
     "all_in_list [?a] ?l ==> smaller ?a ?a ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1),
             template_var 0)
           ))),
    ("NormalisationGenericProofs.WP1Conca",
     "DenyAll ~: set ?p ==> wellformed_policy1 (?a # ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_app (template_hole 2, template_var 1))
                )
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("NormalisationGenericProofs.Conc_not_MT", "?p = ?x # ?xs ==> ?p ~= []",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_negation
        (template_equation (template_var 2, template_hole 0)))),
    ("NormalisationGenericProofs.aux",
     "?a : set (removeShadowRules2 ?p) ==> ?a : set ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))
           ))),
    ("NormalisationGenericProofs.NetsCollectedSep",
     "[| noDenyAll1 ?p; NetsCollected ?p |]
      ==> NetsCollected (separate ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.OTNSEp",
     "[| noDenyAll1 ?p; OnlyTwoNets ?p |] ==> OnlyTwoNets (separate ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.sepNetsID",
     "[| noDenyAll1 ?p; separated ?p |] ==> separated (insertDenies ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.aND_RS1",
     "[| singleCombinators ?p; allNetsDistinct ?p |]
      ==> allNetsDistinct (removeShadowRules1 ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.aND_RS2",
     "[| singleCombinators ?p; allNetsDistinct ?p |]
      ==> allNetsDistinct (removeShadowRules2 ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.ANDrd",
     "[| singleCombinators ?p; allNetsDistinct ?p |]
      ==> allNetsDistinct (remdups ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.SC_RS1",
     "[| singleCombinators ?p; allNetsDistinct ?p |]
      ==> singleCombinators (removeShadowRules1 ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.netlistalternativeSeparateaux",
     "net_list_aux [?y] @ net_list_aux ?z = net_list_aux (?y # ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("NormalisationGenericProofs.SC_sublist",
     "singleCombinators ?xs ==>
      singleCombinators (qsort (filter ?P ?xs) ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, t_empty),
                   template_var 2)),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.mr_iD",
     "wellformed_policy1_strong ?p ==>
      ?matching_rule ?x ?p = ?matching_rule ?x (insertDeny ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_app (template_var 1, template_var 0), template_var 2),
         template_app
          (template_app (template_var 1, template_var 0),
           template_app (template_hole 0, template_var 2))))),
    ("NormalisationGenericProofs.sortnMT",
     "?p ~= [] ==> FWNormalisationCore.sort ?p ?l ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 1)
           ))),
    ("NormalisationGenericProofs.tNDComm",
     "twoNetsDistinct ?a ?b ?c ?d ==> twoNetsDistinct ?c ?d ?a ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("NormalisationGenericProofs.domNMT",
     "dom ?X ~= {} ==> ?X ~= \<emptyset>",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_negation (template_equation (template_var 0, t_empty)))),
    ("NormalisationGenericProofs.nDAeqSet",
     "set ?p = set ?s ==> noDenyAll ?p = noDenyAll ?s",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("NormalisationGenericProofs.aux10",
     "?a : set (net_list ?p) ==> ?a : set (net_list_aux ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("NormalisationGenericProofs.not_member",
     "~ member ?a (?x \<oplus> ?y) ==> ~ member ?a ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_app
                   (template_app (template_hole 0, template_var 1),
                    template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)
               )
           ))),
    ("NormalisationGenericProofs.wp1_tl",
     "?p ~= [] & wellformed_policy1 ?p ==> wellformed_policy1 (tl ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_hole 2))),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.SCConc",
     "[| singleCombinators ?x; singleCombinators ?y |]
      ==> singleCombinators (?x @ ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.singleCombinatorsAppend",
     "[| singleCombinators ?xs; singleCombinators ?ys |]
      ==> singleCombinators (?xs @ ?ys)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.aND_sortQ",
     "[| singleCombinators ?p; allNetsDistinct ?p |]
      ==> allNetsDistinct (qsort ?p ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.aND_sort",
     "[| singleCombinators ?p; allNetsDistinct ?p |]
      ==> allNetsDistinct (FWNormalisationCore.sort ?p ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.OTNIDaux4", "{?x, ?y, ?x} = {?y, ?x}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("NormalisationGenericProofs.mauxa",
     "(EX r. ?a ?b = \<lfloor>r\<rfloor>) = (?a ?b ~= \<bottom>)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_negation
        (
           template_equation
            (template_app (template_var 1, template_var 0), template_hole 0)
           ))),
    ("NormalisationGenericProofs.lCdom2",
     "list2FWpolicy (?a @ ?b @ ?c) = list2FWpolicy ((?a @ ?b) @ ?c)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("NormalisationGenericProofs.is_in_insort",
     "?y : set ?xs ==> ?y : set (FWNormalisationCore.insort ?x ?xs ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0)))
           ))),
    ("NormalisationGenericProofs.sepDA",
     "DenyAll ~: set ?p ==> DenyAll ~: set (separate ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("NormalisationGenericProofs.WP1",
     "?a ~: set ?list ==> ?a ~: set (removeShadowRules2 ?list)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("NormalisationGenericProofs.inRS2",
     "?x ~: set ?p ==> ?x ~: set (removeShadowRules2 ?p)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))
               )
           ))),
    ("NormalisationGenericProofs.aux5",
     "DenyAllFromTo ?a ?b : set ?p ==> ?a : set (net_list ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("NormalisationGenericProofs.aux5a",
     "DenyAllFromTo ?b ?a : set ?p ==> ?a : set (net_list ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("NormalisationGenericProofs.ND0aux1",
     "DenyAllFromTo ?x ?y : set ?b ==> ?x : set (net_list_aux ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("NormalisationGenericProofs.ND0aux2",
     "DenyAllFromTo ?x ?y : set ?b ==> ?y : set (net_list_aux ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("NormalisationGenericProofs.posaux",
     "position ?a ?l < position ?b ?l ==> ?a ~= ?b",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 1))],
       template_negation
        (template_equation (template_var 2, template_var 0)))),
    ("NormalisationGenericProofs.SCSubset",
     "[| singleCombinators ?b; set ?a <= set ?b |]
      ==> singleCombinators ?a",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 0),
          template_app (template_hole 0, template_var 1))],
       template_predicate
        (template_app (template_hole 2, template_var 0)))),
    ("NormalisationGenericProofs.SCnotConc",
     "[| ?a \<oplus> ?b : set ?p; singleCombinators ?p |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_hole 0))),
    ("NormalisationGenericProofs.distinct_insort",
     "distinct (FWNormalisationCore.insort ?x ?xs ?l) =
      (?x ~: set ?xs & distinct ?xs)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1)))),
         template_app (template_hole 5, template_var 1)))),
    ("NormalisationGenericProofs.firstInNet",
     "~ member DenyAll ?a ==>
      first_destNet ?a : set (net_list_aux (?a # ?p))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 1)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))))
           ))),
    ("NormalisationGenericProofs.firstInNeta",
     "~ member DenyAll ?a ==>
      first_srcNet ?a : set (net_list_aux (?a # ?p))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 1)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))))
           ))),
    ("NormalisationGenericProofs.first_isIn",
     "~ member DenyAll ?x ==>
      (first_srcNet ?x, first_destNet ?x) : sdnets ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app (template_hole 1, template_var 0))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.isInAlternativeListb",
     "?aa : set (net_list_aux ?p) ==> ?aa : set (net_list_aux (?a # ?p))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))))
           ))),
    ("NormalisationGenericProofs.ANDSepaux",
     "allNetsDistinct (?x # ?y # ?z) ==>
      allNetsDistinct (?x \<oplus> ?y # ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.aux5c",
     "AllowPortFromTo ?a ?b ?po : set ?p ==> ?a : set (net_list ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("NormalisationGenericProofs.aux5d",
     "AllowPortFromTo ?b ?a ?po : set ?p ==> ?a : set (net_list ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("NormalisationGenericProofs.ND0aux3",
     "AllowPortFromTo ?x ?y ?p : set ?b ==> ?x : set (net_list_aux ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("NormalisationGenericProofs.ND0aux4",
     "AllowPortFromTo ?x ?y ?p : set ?b ==> ?y : set (net_list_aux ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("NormalisationGenericProofs.noDA",
     "[| noDenyAll ?xs; ?s : set ?xs |] ==> ~ member DenyAll ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)
               )
           ))),
    ("NormalisationGenericProofs.SCConca",
     "[| singleCombinators ?p; singleCombinators [?a] |]
      ==> singleCombinators (?a # ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 0),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))
           ))),
    ("NormalisationGenericProofs.all_in_list_sublist2",
     "[| singleCombinators ?xs; all_in_list ?xs ?l |]
      ==> all_in_list (filter ?P ?xs) ?l",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("NormalisationGenericProofs.aux0_1",
     "[| singleCombinators ?xs; singleCombinators [?x] |]
      ==> singleCombinators (?x # ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 0),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))
           ))),
    ("NormalisationGenericProofs.sort_is_sortedQ",
     "[| all_in_list ?p ?l; singleCombinators ?p |]
      ==> FWNormalisationCore.sorted (qsort ?p ?l) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0)
           ))),
    ("NormalisationGenericProofs.nda",
     "[| singleCombinators (?a # ?p); noDenyAll ?p |]
      ==> noDenyAll1 (?a # ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.in_set_in_list",
     "[| ?a : set ?p; all_in_list ?p ?l |] ==> in_list ?a ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("NormalisationGenericProofs.ANDConcEnd",
     "[| allNetsDistinct (?xs @ [?xa]); singleCombinators ?xs |]
      ==> allNetsDistinct ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1)))
            ),
        template_predicate
         (template_app (template_hole 0, template_var 1))],
       template_predicate
        (template_app (template_hole 4, template_var 1)))),
    ("NormalisationGenericProofs.otnaux1", "{?x, ?y, ?x, ?y} = {?x, ?y}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("NormalisationGenericProofs.aux0_0",
     "singleCombinators ?x ==> \<nexists>a b. a \<oplus> b : set ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_negation
        (template_predicate (template_app (template_hole 3, t_empty))))),
    ("NormalisationGenericProofs.list2FWpolicyconc",
     "?a ~= [] ==>
      list2FWpolicy (?xa # ?a) = ?xa \<oplus> list2FWpolicy ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("NormalisationGenericProofs.l2p_aux",
     "?list ~= [] ==>
      list2FWpolicy (?a # ?list) = ?a \<oplus> list2FWpolicy ?list",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("NormalisationGenericProofs.aux114",
     "?x ~= DenyAll ==>
      removeShadowRules1_alternative_rev (?x # ?xs) =
      ?x # removeShadowRules1_alternative_rev ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("NormalisationGenericProofs.aux0_5",
     "\<nexists>a b. a \<oplus> b : set ?x ==> singleCombinators ?x",
     template_implication
      ([template_negation
         (template_predicate (template_app (template_hole 4, t_empty)))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("NormalisationGenericProofs.all_in_listAppend",
     "[| all_in_list ?xs ?l; all_in_list ?ys ?l |]
      ==> all_in_list (?xs @ ?ys) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("NormalisationGenericProofs.aux12",
     "[| ?a : ?x; ?b ~: ?x |] ==> ?a ~= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 1)
                )
            )],
       template_negation
        (template_equation (template_var 2, template_var 0)))),
    ("NormalisationGenericProofs.singleCombinators_insort",
     "[| singleCombinators [?x]; singleCombinators ?xs |]
      ==> singleCombinators (FWNormalisationCore.insort ?x ?xs ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.DAnotTL",
     "[| ?xs ~= []; wellformed_policy1 (?xs @ [DenyAll]) |] ==> False",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 0),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_hole 5)))
            )],
       template_predicate (template_hole 0))),
    ("NormalisationGenericProofs.aux0_4",
     "(?a : set ?x | ?a : set ?y) = (?a : set (?x @ ?y))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("NormalisationGenericProofs.first_bothNet_charn",
     "~ member DenyAll ?a ==>
      first_bothNet ?a = {first_srcNet ?a, first_destNet ?a}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 0)
                )
            )],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 1, template_var 0)),
             template_hole 0))))),
    ("NormalisationGenericProofs.first_bothNetsd",
     "~ member DenyAll ?x ==>
      first_bothNet ?x = {first_srcNet ?x, first_destNet ?x}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 0)
                )
            )],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 1, template_var 0)),
             template_hole 0))))),
    ("NormalisationGenericProofs.mt_sym",
     "dom ?a Int dom ?b = {} ==> dom ?b Int dom ?a = {}",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1)),
            template_app (template_hole 1, template_var 0)),
          template_hole 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 2, template_var 1)),
         template_hole 0))),
    ("NormalisationGenericProofs.isInAlternativeLista",
     "?aa : set (net_list_aux [?a]) ==> ?aa : set (net_list_aux (?a # ?p))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_hole 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))))
           ))),
    ("NormalisationGenericProofs.setPair",
     "{?a, ?b} = {?a, ?d} ==> ?b = ?d",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)),
          template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)))],
       template_equation (template_var 1, template_var 0))),
    ("NormalisationGenericProofs.setPair1",
     "{?a, ?b} = {?d, ?a} ==> ?b = ?d",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_app
             (template_app (template_hole 2, template_var 2),
              template_hole 1)))],
       template_equation (template_var 1, template_var 0))),
    ("NormalisationGenericProofs.all_in_list_sublist",
     "[| singleCombinators ?xs; all_in_list ?xs ?l |]
      ==> all_in_list (qsort (filter ?P ?xs) ?l) ?l",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2)),
                 template_var 1)),
             template_var 1)
           ))),
    ("NormalisationGenericProofs.wp1_aux1a",
     "[| ?xs ~= []; wellformed_policy1_strong (?xs @ [?x]) |]
      ==> wellformed_policy1_strong ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_app
                 (template_app (template_hole 0, template_var 0),
                  template_hole 3)))
            )],
       template_predicate
        (template_app (template_hole 2, template_var 1)))),
    ("NormalisationGenericProofs.soadisj",
     "[| ?x : subnetsOfAdr ?a; ?y : subnetsOfAdr ?a |]
      ==> ~ netsDistinct ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)
               )
           ))),
    ("NormalisationGenericProofs.setnMT",
     "[| set ?a = set ?b; ?a ~= [] |] ==> ?b ~= []",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 0))],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("NormalisationGenericProofs.distinct_sortQ",
     "[| singleCombinators ?xs; all_in_list ?xs ?l; distinct ?xs |]
      ==> distinct (qsort ?xs ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.aNDSubset",
     "[| singleCombinators ?a; set ?a <= set ?b; allNetsDistinct ?b |]
      ==> allNetsDistinct ?a",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("NormalisationGenericProofs.aux6",
     "twoNetsDistinct ?a1.0 ?a2.0 ?a ?b ==>
      dom (deny_all_from_to ?a1.0 ?a2.0) Int dom (deny_all_from_to ?a ?b) =
      {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_hole 0))),
    ("NormalisationGenericProofs.alternativelistconc1",
     "?a : set (net_list_aux [?x]) ==> ?a : set (net_list_aux [?x, ?y])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_hole 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 0)))))
           ))),
    ("NormalisationGenericProofs.alternativelistconc2",
     "?a : set (net_list_aux [?x]) ==> ?a : set (net_list_aux [?y, ?x])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_hole 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_hole 0)))))
           ))),
    ("NormalisationGenericProofs.aNDSubsetaux",
     "[| singleCombinators ?a; set ?a <= set ?b |]
      ==> set (net_list_aux ?a) <= set (net_list_aux ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("NormalisationGenericProofs.ANDaux2",
     "[| allNetsDistinct (?x # ?xs); ?y : set ?xs |]
      ==> allNetsDistinct [?x, ?y]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 0)))
           ))),
    ("NormalisationGenericProofs.OTNoTN",
     "[| OnlyTwoNets ?p; ?x ~= DenyAll; ?x : set ?p |] ==> onlyTwoNets ?x",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("NormalisationGenericProofs.sort_is_sorted",
     "[| all_in_list ?p ?l; distinct ?p; singleCombinators ?p |]
      ==> FWNormalisationCore.sorted (FWNormalisationCore.sort ?p ?l) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0)
           ))),
    ("NormalisationGenericProofs.RS1End",
     "?x ~= DenyAll ==>
      removeShadowRules1 (?xs @ [?x]) = removeShadowRules1 ?xs @ [?x]",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("NormalisationGenericProofs.aux115",
     "?x ~= DenyAll ==>
      removeShadowRules1_alternative (?xs @ [?x]) =
      removeShadowRules1_alternative ?xs @ [?x]",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("NormalisationGenericProofs.RS1n_assoc",
     "?x ~= DenyAll ==>
      removeShadowRules1_alternative ?xs @ [?x] =
      removeShadowRules1_alternative (?xs @ [?x])",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)))))),
    ("NormalisationGenericProofs.subnetAux",
     "[| ?Dd Int ?A ~= {}; ?A <= ?B |] ==> ?Dd Int ?B ~= {}",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_hole 1)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0),
             template_hole 1)
           ))),
    ("NormalisationGenericProofs.aux79",
     "[| ?y : set (FWNormalisationCore.insort ?x ?a ?l); ?y ~= ?x |]
      ==> ?y : set ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1),
                  template_var 0)))
            ),
        template_negation
         (template_equation (template_var 3, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app (template_hole 3, template_var 1))
           ))),
    ("NormalisationGenericProofs.all_in_listSubset",
     "[| all_in_list ?b ?l; singleCombinators ?a; set ?a <= set ?b |]
      ==> all_in_list ?a ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 0),
          template_app (template_hole 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0), template_var 1)
           ))),
    ("NormalisationGenericProofs.aux0_6",
     "[| singleCombinators ?xs; \<nexists>a b. ?x = a \<oplus> b |]
      ==> singleCombinators (?x # ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (template_predicate (template_app (template_hole 3, t_empty)))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("NormalisationGenericProofs.ANDaux3",
     "[| ?y : set ?xs; ?a : set (net_list_aux [?y]) |]
      ==> ?a : set (net_list_aux ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_hole 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)))
           ))),
    ("NormalisationGenericProofs.domInterMT",
     "[| dom ?a Int dom ?b = {}; ?x : dom ?a |] ==> ?x ~: dom ?b",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2)),
            template_app (template_hole 3, template_var 1)),
          template_hole 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app (template_hole 4, template_var 2))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 3, template_var 1))
               )
           ))),
    ("NormalisationGenericProofs.NetsCollectedSorted",
     "[| noDenyAll1 ?p; all_in_list ?p ?l; singleCombinators ?p;
         FWNormalisationCore.sorted ?p ?l |]
      ==> NetsCollected ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("NormalisationGenericProofs.sets_distinct6",
     "?m < ?n ==> {(a, b). a = ?n} ~= {(a, b). a = ?m}",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty)))
           ))),
    ("NormalisationGenericProofs.sets_distinct5",
     "?n < ?m ==> {(a, b). a = ?n} ~= {(a, b). a = ?m}",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_app
              (template_hole 2, template_app (template_hole 1, t_empty)))
           ))),
    ("NormalisationGenericProofs.waux3",
     "[| ?x ~= ?a; ?x ~: set ?p |]
      ==> ?x ~: set (FWNormalisationCore.insort ?a ?p ?l)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_app (template_hole 1, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 2),
                       template_var 1),
                     template_var 0)))
               )
           ))),
    ("NormalisationGenericProofs.r_not_DA_in_tl",
     "[| wellformed_policy1_strong ?p; ?a : set ?p; ?a ~= DenyAll |]
      ==> ?a : set (tl ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_hole 4,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("NormalisationGenericProofs.nDASCaux",
     "[| DenyAll ~: set ?p; singleCombinators ?p; ?r : set ?p |]
      ==> ~ member DenyAll ?r",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_app (template_hole 2, template_var 1))
                )
            ),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_hole 3),
                 template_var 0)
               )
           ))),
    ("NormalisationGenericProofs.aNDSetsEq",
     "[| singleCombinators ?a; singleCombinators ?b; set ?a = set ?b;
         allNetsDistinct ?b |]
      ==> allNetsDistinct ?a",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0)),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("NormalisationGenericProofs.NetsCollectedSort",
     "[| distinct ?p; noDenyAll1 ?p; all_in_list ?p ?l;
         singleCombinators ?p |]
      ==> NetsCollected (FWNormalisationCore.sort ?p ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.sets_distinct2",
     "?m ~= ?n ==> {(a, b). a = ?n} ~= {(a, b). a = ?m}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 1, template_app (template_hole 0, t_empty)),
             template_app
              (template_hole 1, template_app (template_hole 0, t_empty)))
           ))),
    ("NormalisationGenericProofs.sets_distinct1",
     "?n ~= ?m ==> {(a, b). a = ?n} ~= {(a, b). a = ?m}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 1, template_app (template_hole 0, t_empty)),
             template_app
              (template_hole 1, template_app (template_hole 0, t_empty)))
           ))),
    ("NormalisationGenericProofs.netlistaux",
     "?x : set (net_list_aux (?a # ?p)) ==>
      ?x : set (net_list_aux [?a]) | ?x : set (net_list_aux ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_hole 0))))),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0))))
           ))),
    ("NormalisationGenericProofs.setPair_noteq",
     "{?a, ?b} ~= {?c, ?d} ==> ~ (?a = ?c & ?b = ?d)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_hole 2)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))
               )
           ))),
    ("NormalisationGenericProofs.isInAlternativeList",
     "?aa : set (net_list_aux [?a]) | ?aa : set (net_list_aux ?p) ==>
      ?aa : set (net_list_aux (?a # ?p))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_hole 3,
                    template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 1),
                        template_hole 0))))),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))))
           ))),
    ("NormalisationGenericProofs.ANDSepaux2",
     "[| allNetsDistinct (?x # ?y # ?z);
         allNetsDistinct (separate (?y # ?z)) |]
      ==> allNetsDistinct (?x # separate (?y # ?z))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_hole 0,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))))
           ))),
    ("NormalisationGenericProofs.setPair4",
     "[| {?a, ?b} = {?c, ?d}; ?a ~= ?c |] ==> ?a = ?d",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app (template_hole 3, template_var 2),
              template_hole 2)),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2))),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_equation (template_var 3, template_var 0))),
    ("NormalisationGenericProofs.aNDSetsEqaux",
     "[| singleCombinators ?a; singleCombinators ?b; set ?a = set ?b |]
      ==> set (net_list_aux ?a) = set (net_list_aux ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("NormalisationGenericProofs.aux3",
     "[| singleCombinators ?p; singleCombinators [?a];
         allNetsDistinct (?a # ?p) |]
      ==> allNetsDistinct (?a # ?a # ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 0,
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)))
           ))),
    ("NormalisationGenericProofs.all_in_list_insort",
     "[| all_in_list ?xs ?l; singleCombinators (?x # ?xs); in_list ?x ?l |]
      ==> all_in_list (FWNormalisationCore.insort ?x ?xs ?l) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 1)),
             template_var 1)
           ))),
    ("NormalisationGenericProofs.separatedNC",
     "[| OnlyTwoNets ?p; NetsCollected2 ?p; NetsCollected ?p; noDenyAll1 ?p;
         allNetsDistinct ?p |]
      ==> separated ?p",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("NormalisationGenericProofs.id_aux1",
     "DenyAllFromTo (first_srcNet ?s) (first_destNet ?s) \<oplus>
      DenyAllFromTo (first_destNet ?s) (first_srcNet ?s) \<oplus> ?s
      : set (insertDenies ?p) ==>
      ?s : set ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_var 1)),
                      template_app (template_hole 2, template_var 1))),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app (template_hole 2, template_var 1)),
                        template_app (template_hole 3, template_var 1))),
                    template_var 1))),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app (template_hole 1, template_var 0))
           ))),
    ("NormalisationGenericProofs.wellformed_policy1_charn",
     "[| wellformed_policy1 ?p; DenyAll : set ?p |]
      ==> EX p'. ?p = DenyAll # p' & DenyAll ~: set p'",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("NormalisationGenericProofs.aux80",
     "[| ?y ~: set ?p; ?y ~= ?x |]
      ==> ?y ~: set (FWNormalisationCore.insort ?x
                      (FWNormalisationCore.sort ?p ?l) ?l)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app (template_hole 3, template_var 2))
                )
            ),
        template_negation
         (template_equation (template_var 3, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 1),
                       template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 0)),
                     template_var 0)))
               )
           ))),
    ("NormalisationGenericProofs.separatedSep",
     "[| OnlyTwoNets ?p; NetsCollected2 ?p; NetsCollected ?p; noDenyAll1 ?p;
         allNetsDistinct ?p |]
      ==> separated (separate ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.setPair_noteq_allow",
     "{?a, ?b} ~= {?c, ?d} ==> ~ (?a = ?c & ?b = ?d & ?P)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_hole 2)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 1)),
                   template_var 0))
               )
           ))),
    ("NormalisationGenericProofs.destInNetListaux",
     "[| ?x : set ?p; singleCombinators [?x]; ?x ~= DenyAll |]
      ==> destNet ?x : set (net_list_aux ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app (template_hole 10, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 1),
                template_hole 7))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("NormalisationGenericProofs.srcInNetListaux",
     "[| ?x : set ?p; singleCombinators [?x]; ?x ~= DenyAll |]
      ==> srcNet ?x : set (net_list_aux ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app (template_hole 10, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 1),
                template_hole 7))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("NormalisationGenericProofs.saux3",
     "[| DenyAllFromTo ?a ?b : set ?list;
         DenyAllFromTo ?c ?d ~: set ?list |]
      ==> ?a ~= ?c | ?b ~= ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)),
              template_app (template_hole 3, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 1),
                      template_var 0)),
                  template_app (template_hole 3, template_var 2))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)))
           ))),
    ("NormalisationGenericProofs.posaux3",
     "[| ?a : set ?l; ?b : set ?l; ?a ~= ?b |]
      ==> position ?a ?l ~= position ?b ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            ),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("NormalisationGenericProofs.setPaireq",
     "{?x, ?y} = {?a, ?b} ==> ?x = ?a & ?y = ?b | ?x = ?b & ?y = ?a",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)))
           ))),
    ("NormalisationGenericProofs.fBNsep1",
     "[| !!a. a : set ?z ==> first_bothNet ?x ~= first_bothNet a;
         ?a : set (separate ?z) |]
      ==> first_bothNet ?x ~= first_bothNet ?a",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 0, template_var 2)))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))
           ))),
    ("NormalisationGenericProofs.sortedConcEnd",
     "[| FWNormalisationCore.sorted (?a # ?p) ?l; in_list ?a ?l;
         all_in_list ?p ?l; singleCombinators [?a]; singleCombinators ?p |]
      ==> FWNormalisationCore.sorted ?p ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_hole 0))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1), template_var 0)
           ))),
    ("NormalisationGenericProofs.sorted_ConsA",
     "[| all_in_list (?x # ?xs) ?l; singleCombinators (?x # ?xs) |]
      ==> FWNormalisationCore.sorted (?x # ?xs) ?l =
          (FWNormalisationCore.sorted ?xs ?l &
           (ALL y:set ?xs. smaller ?x y ?l))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty))))),
    ("NormalisationGenericProofs.sorted_Cons",
     "[| all_in_list (?x # ?xs) ?l; singleCombinators (?x # ?xs) |]
      ==> (FWNormalisationCore.sorted ?xs ?l &
           (ALL y:set ?xs. smaller ?x y ?l)) =
          FWNormalisationCore.sorted (?x # ?xs) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             t_empty)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("NormalisationGenericProofs.otnaux",
     "[| first_bothNet ?x = first_bothNet ?y; ~ member DenyAll ?x;
         ~ member DenyAll ?y; onlyTwoNets ?y; onlyTwoNets ?x |]
      ==> onlyTwoNets (?x \<oplus> ?y)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 5, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 0)
                )
            ),
        template_predicate (template_app (template_hole 1, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NormalisationGenericProofs.fl3",
     "[| NetsCollected ?p;
         !!a. [| first_bothNet ?x ~= firstList ?p; a : set ?p |]
              ==> first_bothNet ?x ~= first_bothNet a |]
      ==> NetsCollected (?x # ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("NormalisationGenericProofs.disjSD2aux",
     "[| disjSD_2 ?a ?b; ~ member DenyAll ?a; ~ member DenyAll ?b |]
      ==> disjSD_2
           (DenyAllFromTo (first_srcNet ?a) (first_destNet ?a) \<oplus>
            DenyAllFromTo (first_destNet ?a) (first_srcNet ?a) \<oplus> ?a)
           ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 1)),
                     template_app (template_hole 0, template_var 1))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 0, template_var 1)),
                       template_app (template_hole 1, template_var 1))),
                   template_var 1))),
             template_var 0)
           ))),
    ("NormalisationGenericProofs.sorted_Consb",
     "[| all_in_list (?x # ?xs) ?l; singleCombinators (?x # ?xs);
         FWNormalisationCore.sorted ?xs ?l &
         (ALL y:set ?xs. smaller ?x y ?l) |]
      ==> FWNormalisationCore.sorted (?x # ?xs) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 1)),
                t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("NormalisationGenericProofs.aux7",
     "[| DenyAllFromTo ?a ?b : set ?p;
         allNetsDistinct (DenyAllFromTo ?c ?d # ?p); ?a ~= ?c | ?b ~= ?d |]
      ==> twoNetsDistinct ?a ?b ?c ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3)),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_var 0)),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 4),
                    template_var 1))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("NormalisationGenericProofs.isInIDo",
     "[| noDenyAll ?p; ?s : set (insertDenies ?p) |]
      ==> EX! a.
             ?s =
             DenyAllFromTo (first_srcNet a) (first_destNet a) \<oplus>
             DenyAllFromTo (first_destNet a) (first_srcNet a) \<oplus> a &
             a : set ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("NormalisationGenericProofs.aux7a",
     "[| DenyAllFromTo ?a ?b : set ?p;
         allNetsDistinct (AllowPortFromTo ?c ?d ?po # ?p);
         ?a ~= ?c | ?b ~= ?d |]
      ==> twoNetsDistinct ?a ?b ?c ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4)),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1),
                    template_var 0)),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 2),
             template_var 1)
           ))),
    ("NormalisationGenericProofs.id_aux4",
     "[| noDenyAll ?p; !!s. s : set ?p ==> disjSD_2 ?a s;
         ?s : set (insertDenies ?p); ~ member DenyAll ?a |]
      ==> disjSD_2 ?a ?s",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app (template_hole 3, template_var 2)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_hole 0),
                  template_var 1)
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1), template_var 0)
           ))),
    ("NormalisationGenericProofs.sorted_insort",
     "[| all_in_list (?x # ?xs) ?l; distinct (?x # ?xs);
         singleCombinators [?x]; singleCombinators ?xs |]
      ==> FWNormalisationCore.sorted (FWNormalisationCore.insort ?x ?xs ?l)
           ?l =
          FWNormalisationCore.sorted ?xs ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 6, template_var 2),
                template_hole 3))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("NormalisationGenericProofs.smaller_antisym",
     "[| ~ smaller ?a ?b ?l; in_list ?a ?l; in_list ?b ?l;
         singleCombinators [?a]; singleCombinators [?b] |]
      ==> smaller ?b ?a ?l",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1),
                  template_var 0)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_hole 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("NormalisationGenericProofs.bNaux",
     "[| ~ member DenyAll ?x; ~ member DenyAll ?y;
         first_bothNet ?x = first_bothNet ?y |]
      ==> {first_srcNet ?x, first_destNet ?x} =
          {first_srcNet ?y, first_destNet ?y}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 12, template_hole 11),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_hole 9),
                  template_var 0)
                )
            ),
        template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 3, template_var 1)),
             template_hole 2)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 0)),
             template_hole 2))))),
    ("NormalisationGenericProofs.aux7aa",
     "[| AllowPortFromTo ?a ?b ?poo : set ?p;
         allNetsDistinct (AllowPortFromTo ?c ?d ?po # ?p);
         ?a ~= ?c | ?b ~= ?d |]
      ==> twoNetsDistinct ?a ?b ?c ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 6),
                    template_var 5),
                  template_var 4)),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_app (template_hole 7, template_var 2),
                      template_var 1),
                    template_var 0)),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 6),
                    template_var 2))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 6),
                 template_var 5),
               template_var 2),
             template_var 1)
           ))),
    ("NormalisationGenericProofs.sdnets_noteq",
     "[| onlyTwoNets ?a; onlyTwoNets ?aa;
         first_bothNet ?a ~= first_bothNet ?aa; ~ member DenyAll ?a;
         ~ member DenyAll ?aa |]
      ==> sdnets ?a ~= sdnets ?aa",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("NormalisationGenericProofs.sorted_insortb",
     "[| FWNormalisationCore.sorted ?xs ?l; all_in_list (?x # ?xs) ?l;
         distinct (?x # ?xs); singleCombinators [?x];
         singleCombinators ?xs |]
      ==> FWNormalisationCore.sorted (FWNormalisationCore.insort ?x ?xs ?l)
           ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 4, template_var 0),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 1))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 1)),
             template_var 1)
           ))),
    ("NormalisationGenericProofs.fBNsep",
     "[| !!a. a : set ?z ==> {?b, ?c} ~= first_bothNet a;
         ?a : set (separate ?z) |]
      ==> {?b, ?c} ~= first_bothNet ?a",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app (template_hole 0, template_var 3)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("NormalisationGenericProofs.sdnets_charn",
     "[| onlyTwoNets ?a; ~ member DenyAll ?a |]
      ==> sdnets ?a = {(first_srcNet ?a, first_destNet ?a)} |
          sdnets ?a =
          {(first_srcNet ?a, first_destNet ?a),
           (first_destNet ?a, first_srcNet ?a)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 2, template_var 0)),
                       template_app (template_hole 1, template_var 0))),
                   template_hole 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_app (template_hole 1, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app (template_hole 1, template_var 0)),
                       template_app (template_hole 2, template_var 0))),
                   template_hole 0))))
           ))),
    ("NormalisationGenericProofs.OTNaux",
     "[| onlyTwoNets ?a; ~ member DenyAll ?a; (?x, ?y) : sdnets ?a |]
      ==> ?x = first_srcNet ?a & ?y = first_destNet ?a |
          ?x = first_destNet ?a & ?y = first_srcNet ?a",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_app (template_hole 5, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app (template_hole 1, template_var 2))),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app (template_hole 0, template_var 2)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app (template_hole 0, template_var 2))),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 1, template_var 2))))
           ))),
    ("NormalisationGenericProofs.NCisSD2aux",
     "[| onlyTwoNets ?a; onlyTwoNets ?aa;
         first_bothNet ?a ~= first_bothNet ?aa; ~ member DenyAll ?a;
         ~ member DenyAll ?aa; allNetsDistinct [?a, ?aa] |]
      ==> disjSD_2 ?a ?aa",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 6, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 0)
                )
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("NormalisationGenericProofs.sdnets2",
     "[| EX a b. sdnets ?x = {(a, b), (b, a)}; ~ member DenyAll ?x |]
      ==> sdnets ?x =
          {(first_srcNet ?x, first_destNet ?x),
           (first_destNet ?x, first_srcNet ?x)}",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 0)
                )
            )],
       template_equation
        (template_app (template_hole 8, template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 0)),
               template_app (template_hole 0, template_var 0))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 0, template_var 0)),
                 template_app (template_hole 1, template_var 0))),
             template_hole 5))))),
    ("NormalisationGenericProofs.disjSD_2IDa",
     "[| disjSD_2 ?x ?y; ~ member DenyAll ?x; ~ member DenyAll ?y;
         ?a = first_srcNet ?x; ?b = first_destNet ?x |]
      ==> disjSD_2
           (DenyAllFromTo ?a ?b \<oplus> DenyAllFromTo ?b ?a \<oplus> ?x)
           ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 3)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2)
                )
            ),
        template_equation
         (template_var 1, template_app (template_hole 3, template_var 3)),
        template_equation
         (template_var 0, template_app (template_hole 2, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_var 1)),
                   template_var 3))),
             template_var 2)
           ))),
    ("NormalisationGenericProofs.foo2",
     "[| ?a ~: set ?ps; ?a ~: set ?ss; set ?p = set ?s; ?p = ?a # ?ps;
         ?s = ?a # ?ss |]
      ==> set ?ps = set ?ss",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app (template_hole 3, template_var 3))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app (template_hole 3, template_var 2))
                )
            ),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 0, template_var 4),
            template_var 3)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 0, template_var 4),
            template_var 2))],
       template_equation
        (template_app (template_hole 3, template_var 3),
         template_app (template_hole 3, template_var 2)))),
    ("NormalisationGenericProofs.sorted_insorta",
     "[| FWNormalisationCore.sorted (FWNormalisationCore.insort ?x ?xs ?l)
          ?l;
         all_in_list (?x # ?xs) ?l; all_in_list (?x # ?xs) ?l;
         distinct (?x # ?xs); singleCombinators [?x];
         singleCombinators ?xs |]
      ==> FWNormalisationCore.sorted ?xs ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1),
                  template_var 0)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_hole 0))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1), template_var 0)
           ))),
    ("NormalisationGenericProofs.sorted_is_smaller",
     "[| FWNormalisationCore.sorted (?a # ?p) ?l; in_list ?a ?l;
         in_list ?b ?l; all_in_list ?p ?l; singleCombinators [?a];
         singleCombinators ?p; ?b : set ?p |]
      ==> smaller ?a ?b ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 7, template_var 3),
                template_hole 3))
            ),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0),
             template_var 1)
           ))),
    ("NormalisationGenericProofs.NCisSD2",
     "[| ~ member DenyAll ?a; OnlyTwoNets (?a # ?p);
         NetsCollected2 (?a # ?p); NetsCollected (?a # ?p); noDenyAll ?p;
         allNetsDistinct (?a # ?p); ?s : set ?p |]
      ==> disjSD_2 ?a ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_hole 9),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("NormalisationGenericProofs.sorted_append",
     "[| all_in_list ?xs ?l; singleCombinators ?xs; all_in_list ?ys ?l;
         singleCombinators ?ys |]
      ==> FWNormalisationCore.sorted (?xs @ ?ys) ?l =
          (FWNormalisationCore.sorted ?xs ?l &
           FWNormalisationCore.sorted ?ys ?l &
           (ALL x:set ?xs. ALL y:set ?ys. smaller x y ?l))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               t_empty)))))),
    ("NormalisationGenericProofs.sorted_append1",
     "[| all_in_list ?xs ?l; singleCombinators ?xs; all_in_list ?ys ?l;
         singleCombinators ?ys; FWNormalisationCore.sorted (?xs @ ?ys) ?l |]
      ==> FWNormalisationCore.sorted ?xs ?l &
          FWNormalisationCore.sorted ?ys ?l &
          (ALL x:set ?xs. ALL y:set ?ys. smaller x y ?l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 0)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 2)),
                 t_empty)))
           ))),
    ("NormalisationGenericProofs.sorted_append2",
     "[| all_in_list ?xs ?l; singleCombinators ?xs; all_in_list ?ys ?l;
         singleCombinators ?ys;
         FWNormalisationCore.sorted ?xs ?l &
         FWNormalisationCore.sorted ?ys ?l &
         (ALL x:set ?xs. ALL y:set ?ys. smaller x y ?l) |]
      ==> FWNormalisationCore.sorted (?xs @ ?ys) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 2)),
                  t_empty)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("NormalisationGenericProofs.sortedConcStart",
     "[| FWNormalisationCore.sorted (?a # ?aa # ?p) ?l; in_list ?a ?l;
         in_list ?aa ?l; all_in_list ?p ?l; singleCombinators [?a];
         singleCombinators [?aa]; singleCombinators ?p |]
      ==> FWNormalisationCore.sorted (?a # ?p) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1))),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 4, template_var 3),
                template_hole 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_hole 0))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1)),
             template_var 0)
           ))),
    ("NormalisationGenericProofs.pos_noteq",
     "[| ?a : set ?l; ?b : set ?l; ?c : set ?l; ?a ~= ?b;
         position ?a ?l <= position ?b ?l;
         position ?b ?l <= position ?c ?l |]
      ==> ?a ~= ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 2))
            ),
        template_negation
         (template_equation (template_var 3, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 1), template_var 2),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 2))],
       template_negation
        (template_equation (template_var 3, template_var 0)))),
    ("NormalisationGenericProofs.ndFalse2",
     "[| ALL a b c d. (a, b) : ?A & (c, d) : ?B --> netsDistinct b d;
         EX (a, b):?A. b : subnetsOfAdr ?D;
         EX (a, b):?B. b : subnetsOfAdr ?D |]
      ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, t_empty))
            )],
       template_predicate (template_hole 0))),
    ("NormalisationGenericProofs.ndFalse1",
     "[| ALL a b c d. (a, b) : ?A & (c, d) : ?B --> netsDistinct a c;
         EX (a, b):?A. a : subnetsOfAdr ?D;
         EX (a, b):?B. a : subnetsOfAdr ?D |]
      ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, t_empty))
            )],
       template_predicate (template_hole 0))),
    ("NormalisationGenericProofs.order_trans",
     "[| in_list ?x ?l; in_list ?y ?l; in_list ?z ?l;
         singleCombinators [?x]; singleCombinators [?y];
         singleCombinators [?z]; smaller ?x ?y ?l; smaller ?y ?z ?l |]
      ==> smaller ?x ?z ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 3),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0),
             template_var 2)
           ))),
    ("NormalisationGenericProofs.smalleraux2",
     "[| {?a, ?b} : set ?l; {?c, ?d} : set ?l; {?a, ?b} ~= {?c, ?d};
         smaller (DenyAllFromTo ?a ?b) (DenyAllFromTo ?c ?d) ?l |]
      ==> ~ smaller (DenyAllFromTo ?c ?d) (DenyAllFromTo ?a ?b) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_hole 7))),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_app
                   (template_app (template_hole 8, template_var 0),
                    template_hole 7))),
              template_app (template_hole 6, template_var 2))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_hole 7)),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_hole 7)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 4),
                    template_var 3)),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3)),
                 template_var 2)
               )
           ))),
    ("NormalisationGenericProofs.posaux4",
     "[| singleCombinators [?a]; ?a ~= DenyAll; ?b ~= DenyAll;
         in_list ?a ?l; in_list ?b ?l; smaller ?a ?b ?l; ?x = bothNet ?a;
         ?y = bothNet ?b |]
      ==> position ?x ?l <= position ?y ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 4),
                template_hole 9))
            ),
        template_negation
         (template_equation (template_var 4, template_hole 6)),
        template_negation
         (template_equation (template_var 3, template_hole 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_var 1, template_app (template_hole 2, template_var 4)),
        template_equation
         (template_var 0, template_app (template_hole 2, template_var 3))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("NormalisationGenericProofs.smalleraux3a",
     "[| ?a ~= DenyAll; ?b ~= DenyAll; in_list ?b ?l; in_list ?a ?l;
         bothNet ?a ~= bothNet ?b; smaller ?a ?b ?l; singleCombinators [?a];
         singleCombinators [?b] |]
      ==> ~ smaller ?b ?a ?l",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_hole 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_hole 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 2),
                 template_var 0)
               )
           ))),
    ("NormalisationGenericProofs.smalleraux3",
     "[| ?x : set ?l; ?y : set ?l; ?x ~= ?y; ?x = bothNet ?a;
         ?y = bothNet ?b; smaller ?a ?b ?l; singleCombinators [?a];
         singleCombinators [?b] |]
      ==> ~ smaller ?b ?a ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app (template_hole 7, template_var 3))
            ),
        template_negation
         (template_equation (template_var 4, template_var 2)),
        template_equation
         (template_var 4, template_app (template_hole 4, template_var 1)),
        template_equation
         (template_var 2, template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_hole 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 0),
                template_hole 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 1),
                 template_var 3)
               )
           ))),
    ("NormalisationGenericProofs.smalleraux2a",
     "[| {?a, ?b} : set ?l; {?c, ?d} : set ?l; {?a, ?b} ~= {?c, ?d};
         smaller (DenyAllFromTo ?a ?b) (AllowPortFromTo ?c ?d ?p) ?l |]
      ==> ~ smaller (AllowPortFromTo ?c ?d ?p) (DenyAllFromTo ?a ?b) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 5),
                  template_app
                   (template_app (template_hole 7, template_var 4),
                    template_hole 6))),
              template_app (template_hole 5, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_hole 6))),
              template_app (template_hole 5, template_var 3))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_hole 6)),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_hole 6)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 4)),
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1),
                  template_var 0)),
              template_var 3)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 1),
                       template_var 0)),
                   template_app
                    (template_app (template_hole 1, template_var 5),
                     template_var 4)),
                 template_var 3)
               )
           ))),
    ("NormalisationGenericProofs.id_aux2",
     "[| noDenyAll ?p; ALL s. s : set ?p --> disjSD_2 ?a s;
         ~ member DenyAll ?a;
         DenyAllFromTo (first_srcNet ?s) (first_destNet ?s) \<oplus>
         DenyAllFromTo (first_destNet ?s) (first_srcNet ?s) \<oplus> ?s
         : set (insertDenies ?p) |]
      ==> disjSD_2 ?a
           (DenyAllFromTo (first_srcNet ?s) (first_destNet ?s) \<oplus>
            DenyAllFromTo (first_destNet ?s) (first_srcNet ?s) \<oplus>
            ?s)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 1)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app (template_hole 2, template_var 0)),
                      template_app (template_hole 1, template_var 0))),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app
                         (template_hole 3,
                          template_app (template_hole 1, template_var 0)),
                        template_app (template_hole 2, template_var 0))),
                    template_var 0))),
              template_app
               (template_hole 9,
                template_app (template_hole 0, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)),
                   template_app (template_hole 1, template_var 0))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 1, template_var 0)),
                     template_app (template_hole 2, template_var 0))),
                 template_var 0)))
           ))),
    ("NormalisationGenericProofs.notSmallerTrans",
     "[| ?x ~= DenyAll; ?r ~= DenyAll; singleCombinators (?x # ?y # ?z);
         ~ smaller ?y ?x ?l; FWNormalisationCore.sorted (?x # ?y # ?z) ?l;
         ?r : set ?z; all_in_list (?x # ?y # ?z) ?l |]
      ==> ~ smaller ?r ?x ?l",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_hole 7)),
        template_negation
         (template_equation (template_var 3, template_hole 7)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 4),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 4),
                  template_var 0)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 0,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 4),
                 template_var 0)
               )
           ))),
    ("NormalisationGenericProofs.OTNSepaux",
     "[| onlyTwoNets (?a \<oplus> ?y) & OnlyTwoNets ?z -->
         OnlyTwoNets (separate (?a \<oplus> ?y # ?z));
         ~ member DenyAll ?a; ~ member DenyAll ?y; noDenyAll ?z;
         onlyTwoNets ?a; OnlyTwoNets (?y # ?z);
         first_bothNet ?a = first_bothNet ?y |]
      ==> OnlyTwoNets (separate (?a \<oplus> ?y # ?z))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 2),
                        template_var 1))),
                  template_app (template_hole 8, template_var 0))),
              template_app
               (template_hole 8,
                template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 9, template_var 2),
                        template_var 1)),
                    template_var 0))))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 2)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 1)
                )
            ),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            ),
        template_equation
         (template_app (template_hole 0, template_var 2),
          template_app (template_hole 0, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 9, template_var 2),
                     template_var 1)),
                 template_var 0)))
           ))),
    ("NormalisationGenericProofs.smalleraux2b",
     "[| {?a, ?b} : set ?l; {?c, ?d} : set ?l; {?a, ?b} ~= {?c, ?d};
         ?y = DenyAllFromTo ?a ?b;
         smaller (AllowPortFromTo ?c ?d ?p) ?y ?l |]
      ==> ~ smaller ?y (AllowPortFromTo ?c ?d ?p) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 6),
                  template_app
                   (template_app (template_hole 8, template_var 5),
                    template_hole 7))),
              template_app (template_hole 6, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_app
                   (template_app (template_hole 8, template_var 2),
                    template_hole 7))),
              template_app (template_hole 6, template_var 4))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 8, template_var 6),
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_hole 7)),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_hole 7)))
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 2, template_var 6),
            template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app
                     (template_app (template_hole 0, template_var 3),
                      template_var 2),
                    template_var 0)),
                template_var 1),
              template_var 4)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 2),
                     template_var 0)),
                 template_var 4)
               )
           ))),
    ("NormalisationGenericProofs.smalleraux2c",
     "[| {?a, ?b} : set ?l; {?c, ?d} : set ?l; {?a, ?b} ~= {?c, ?d};
         ?y = AllowPortFromTo ?a ?b ?q;
         smaller (AllowPortFromTo ?c ?d ?p) ?y ?l |]
      ==> ~ smaller ?y (AllowPortFromTo ?c ?d ?p) ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 7),
                  template_app
                   (template_app (template_hole 7, template_var 6),
                    template_hole 6))),
              template_app (template_hole 5, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_hole 6))),
              template_app (template_hole 5, template_var 5))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 7),
                template_app
                 (template_app (template_hole 7, template_var 6),
                  template_hole 6)),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_hole 6)))
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 7),
              template_var 6),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 0,
                  template_app
                   (template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 3),
                    template_var 0)),
                template_var 2),
              template_var 5)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_var 0)),
                 template_var 5)
               )
           ))),
    ("NormalisationGenericProofs.tndFalse",
     "[| ALL a b c d. (a, b) : ?A & (c, d) : ?B --> twoNetsDistinct a b c d;
         EX (a, b):?A. a : subnetsOfAdr ?D & b : subnetsOfAdr ?F;
         EX (a, b):?B. a : subnetsOfAdr ?D & b : subnetsOfAdr ?F |]
      ==> False",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, t_empty))
            )],
       template_predicate (template_hole 0))),
    ("NormalisationGenericProofs.fbn_noteq",
     "[| onlyTwoNets ?a; onlyTwoNets ?aa;
         first_bothNet ?a ~= first_bothNet ?aa; ~ member DenyAll ?a;
         ~ member DenyAll ?aa; allNetsDistinct [?a, ?aa] |]
      ==> first_srcNet ?a ~= first_srcNet ?aa |
          first_srcNet ?a ~= first_destNet ?aa |
          first_destNet ?a ~= first_srcNet ?aa |
          first_destNet ?a ~= first_destNet ?aa",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 9, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 1)
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 0)
                )
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_hole 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 1)),
                   template_app (template_hole 1, template_var 0)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 1)),
                     template_app (template_hole 0, template_var 0)))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 11,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app (template_hole 0, template_var 1)),
                       template_app (template_hole 1, template_var 0)))),
                 template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 0, template_var 1)),
                     template_app (template_hole 0, template_var 0))))))
           ))),
    ("NormalisationGenericProofs.NCSaux1",
     "[| noDenyAll ?p; {?x, ?y} : set ?l; all_in_list ?p ?l;
         singleCombinators ?p;
         FWNormalisationCore.sorted (DenyAllFromTo ?x ?y # ?p) ?l;
         {?x, ?y} ~= firstList ?p; DenyAllFromTo ?u ?v : set ?p |]
      ==> {?x, ?y} ~= {?u, ?v}",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 4),
                  template_app
                   (template_app (template_hole 12, template_var 3),
                    template_hole 11))),
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 8, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 3)),
                  template_var 5)),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 12, template_var 4),
                template_app
                 (template_app (template_hole 12, template_var 3),
                  template_hole 11)),
              template_app (template_hole 2, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_app (template_hole 0, template_var 5))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 12, template_var 4),
               template_app
                (template_app (template_hole 12, template_var 3),
                 template_hole 11)),
             template_app
              (template_app (template_hole 12, template_var 1),
               template_app
                (template_app (template_hole 12, template_var 0),
                 template_hole 11)))
           ))),
    ("NormalisationGenericProofs.NCSaux2",
     "[| noDenyAll ?p; {?a, ?b} : set ?l; all_in_list ?p ?l;
         singleCombinators ?p;
         FWNormalisationCore.sorted (DenyAllFromTo ?a ?b # ?p) ?l;
         {?a, ?b} ~= firstList ?p; AllowPortFromTo ?u ?v ?w : set ?p |]
      ==> {?a, ?b} ~= {?u, ?v}",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 5),
                  template_app
                   (template_app (template_hole 13, template_var 4),
                    template_hole 12))),
              template_app (template_hole 11, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 6),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 9, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 5),
                      template_var 4)),
                  template_var 6)),
              template_var 3)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 13, template_var 5),
                template_app
                 (template_app (template_hole 13, template_var 4),
                  template_hole 12)),
              template_app (template_hole 3, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)),
              template_app (template_hole 0, template_var 6))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 13, template_var 5),
               template_app
                (template_app (template_hole 13, template_var 4),
                 template_hole 12)),
             template_app
              (template_app (template_hole 13, template_var 2),
               template_app
                (template_app (template_hole 13, template_var 1),
                 template_hole 12)))
           ))),
    ("NormalisationGenericProofs.NCSaux3",
     "[| noDenyAll ?p; {?a, ?b} : set ?l; all_in_list ?p ?l;
         singleCombinators ?p;
         FWNormalisationCore.sorted (AllowPortFromTo ?a ?b ?w # ?p) ?l;
         {?a, ?b} ~= firstList ?p; DenyAllFromTo ?u ?v : set ?p |]
      ==> {?a, ?b} ~= {?u, ?v}",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 5),
                  template_app
                   (template_app (template_hole 13, template_var 4),
                    template_hole 12))),
              template_app (template_hole 11, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 6),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 9, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_app (template_hole 6, template_var 5),
                        template_var 4),
                      template_var 2)),
                  template_var 6)),
              template_var 3)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 13, template_var 5),
                template_app
                 (template_app (template_hole 13, template_var 4),
                  template_hole 12)),
              template_app (template_hole 3, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_app (template_hole 0, template_var 6))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 13, template_var 5),
               template_app
                (template_app (template_hole 13, template_var 4),
                 template_hole 12)),
             template_app
              (template_app (template_hole 13, template_var 1),
               template_app
                (template_app (template_hole 13, template_var 0),
                 template_hole 12)))
           ))),
    ("NormalisationGenericProofs.NCSaux4",
     "[| noDenyAll ?p; {?a, ?b} : set ?l; all_in_list ?p ?l;
         singleCombinators ?p;
         FWNormalisationCore.sorted (AllowPortFromTo ?a ?b ?c # ?p) ?l;
         {?a, ?b} ~= firstList ?p; AllowPortFromTo ?u ?v ?w : set ?p |]
      ==> {?a, ?b} ~= {?u, ?v}",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 6),
                  template_app
                   (template_app (template_hole 12, template_var 5),
                    template_hole 11))),
              template_app (template_hole 10, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 7),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 8, template_var 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_app (template_hole 5, template_var 6),
                        template_var 5),
                      template_var 3)),
                  template_var 7)),
              template_var 4)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 12, template_var 6),
                template_app
                 (template_app (template_hole 12, template_var 5),
                  template_hole 11)),
              template_app (template_hole 2, template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1),
                  template_var 0)),
              template_app (template_hole 0, template_var 7))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 12, template_var 6),
               template_app
                (template_app (template_hole 12, template_var 5),
                 template_hole 11)),
             template_app
              (template_app (template_hole 12, template_var 2),
               template_app
                (template_app (template_hole 12, template_var 1),
                 template_hole 11)))
           ))),
    ("NormalisationGenericProofs.NetsCollectedSepaux",
     "[| first_bothNet ?x ~= first_bothNet ?y;
         ~ member DenyAll ?y & noDenyAll ?z;
         (ALL a:set ?z. first_bothNet ?x ~= first_bothNet a) &
         NetsCollected (?y # ?z);
         NetsCollected (separate (?y # ?z));
         first_bothNet ?x ~= firstList (separate (?y # ?z));
         ?a : set (separate (?y # ?z)) |]
      ==> first_bothNet ?x ~= first_bothNet ?a",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 11, template_var 3),
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_hole 13,
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_var 2))),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 1)),
                  t_empty)),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_hole 1,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_app
               (template_hole 5,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1))))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 11, template_var 3),
             template_app (template_hole 11, template_var 0))
           ))),
    ("NormalisationGenericProofs.NetsCollectedSepauxa",
     "[| {?b, ?c} ~= firstList ?z; noDenyAll1 ?z;
         ALL a:set ?z. {?b, ?c} ~= first_bothNet a; NetsCollected ?z;
         NetsCollected (separate ?z); {?b, ?c} ~= firstList (separate ?z);
         ?a : set (separate ?z) |]
      ==> {?b, ?c} ~= first_bothNet ?a",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_hole 8)),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_hole 8)),
              template_app
               (template_hole 7,
                template_app (template_hole 1, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_app
               (template_hole 4,
                template_app (template_hole 1, template_var 1)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_hole 8)),
             template_app (template_hole 3, template_var 0))
           ))),
    ("NormalisationGenericProofs.tND1",
     "[| allNetsDistinct ?p; ?x : set ?p; ?y : set ?p; ?a = srcNet ?x;
         ?b = destNet ?x; ?c = srcNet ?y; ?d = destNet ?y; ?a ~= ?c;
         singleCombinators [?x]; ?x ~= DenyAll; singleCombinators [?y];
         ?y ~= DenyAll |]
      ==> twoNetsDistinct ?a ?b ?c ?d",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 5),
              template_app (template_hole 10, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_app (template_hole 10, template_var 6))
            ),
        template_equation
         (template_var 3, template_app (template_hole 8, template_var 5)),
        template_equation
         (template_var 2, template_app (template_hole 7, template_var 5)),
        template_equation
         (template_var 1, template_app (template_hole 8, template_var 4)),
        template_equation
         (template_var 0, template_app (template_hole 7, template_var 4)),
        template_negation
         (template_equation (template_var 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 5),
                template_hole 3))
            ),
        template_negation
         (template_equation (template_var 5, template_hole 1)),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 4),
                template_hole 3))
            ),
        template_negation
         (template_equation (template_var 4, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("NormalisationGenericProofs.tND2",
     "[| allNetsDistinct ?p; ?x : set ?p; ?y : set ?p; ?a = srcNet ?x;
         ?b = destNet ?x; ?c = srcNet ?y; ?d = destNet ?y; ?b ~= ?d;
         singleCombinators [?x]; ?x ~= DenyAll; singleCombinators [?y];
         ?y ~= DenyAll |]
      ==> twoNetsDistinct ?a ?b ?c ?d",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 5),
              template_app (template_hole 10, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 4),
              template_app (template_hole 10, template_var 6))
            ),
        template_equation
         (template_var 3, template_app (template_hole 8, template_var 5)),
        template_equation
         (template_var 2, template_app (template_hole 7, template_var 5)),
        template_equation
         (template_var 1, template_app (template_hole 8, template_var 4)),
        template_equation
         (template_var 0, template_app (template_hole 7, template_var 4)),
        template_negation
         (template_equation (template_var 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 5),
                template_hole 3))
            ),
        template_negation
         (template_equation (template_var 5, template_hole 1)),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 4),
                template_hole 3))
            ),
        template_negation
         (template_equation (template_var 4, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("NormalisationGenericProofs.notSmallerTransaux",
     "[| ?x ~= DenyAll; ?r ~= DenyAll; singleCombinators [?x];
         singleCombinators [?y]; singleCombinators [?r]; ~ smaller ?y ?x ?l;
         smaller ?x ?y ?l; smaller ?x ?r ?l; smaller ?y ?r ?l;
         in_list ?x ?l; in_list ?y ?l; in_list ?r ?l |]
      ==> ~ smaller ?r ?x ?l",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 5)),
        template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 2),
                template_hole 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 3),
                  template_var 0)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3),
                 template_var 0)
               )
           ))),
    ("NormalisationGenericProofs.tND",
     "[| allNetsDistinct ?p; ?x : set ?p; ?y : set ?p; ?a = srcNet ?x;
         ?b = destNet ?x; ?c = srcNet ?y; ?d = destNet ?y;
         ?a ~= ?c | ?b ~= ?d; singleCombinators [?x]; ?x ~= DenyAll;
         singleCombinators [?y]; ?y ~= DenyAll |]
      ==> twoNetsDistinct ?a ?b ?c ?d",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 5),
              template_app (template_hole 11, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_app (template_hole 11, template_var 6))
            ),
        template_equation
         (template_var 3, template_app (template_hole 9, template_var 5)),
        template_equation
         (template_var 2, template_app (template_hole 8, template_var 5)),
        template_equation
         (template_var 1, template_app (template_hole 9, template_var 4)),
        template_equation
         (template_var 0, template_app (template_hole 8, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 10, template_var 3),
                    template_var 1))),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 5),
                template_hole 3))
            ),
        template_negation
         (template_equation (template_var 5, template_hole 1)),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 4),
                template_hole 3))
            ),
        template_negation
         (template_equation (template_var 4, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.NormalisationGenericProofsTemplates"
### 0.548s elapsed time, 0.681s cpu time, 0.096s GC time
val it = (): unit
