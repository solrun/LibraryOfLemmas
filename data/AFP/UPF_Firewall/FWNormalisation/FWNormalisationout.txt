Loading theory "Draft.NetworkCore" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.NetworkModels" via "Draft.DatatypeAddress")
Loading theory "Draft.Ports" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FWNormalisationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FWNormalisationTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Ports"
### 0.044s elapsed time, 0.208s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FWNormalisationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.116s elapsed time, 0.498s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FWNormalisationTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.186s elapsed time, 0.725s cpu time, 0.070s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FWNormalisationTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.321s elapsed time, 1.286s cpu time, 0.159s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FWNormalisationTemplates" via "Draft.ExtrEqs")
### theory "Draft.NetworkCore"
### 0.746s elapsed time, 2.822s cpu time, 0.560s GC time
Loading theory "Draft.DatatypeAddress" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.880s elapsed time, 3.304s cpu time, 0.677s GC time
Loading theory "Draft.DatatypePort" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Draft.DatatypeAddress"
### 0.440s elapsed time, 1.725s cpu time, 0.186s GC time
Loading theory "Draft.IPv4" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
overloading
  src_port_ipv4 \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_ipv4 \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_ipv4 \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "Draft.IPv4"
### 0.053s elapsed time, 0.211s cpu time, 0.000s GC time
Loading theory "Draft.IPv4_TCPUDP" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.956s elapsed time, 3.608s cpu time, 0.672s GC time
Loading theory "Draft.IntegerAddress" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
overloading
  src_port_ipv4_TCPUDP \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_ipv4_TCPUDP \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_ipv4_TCPUDP \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
### theory "Draft.IntegerAddress"
### 0.029s elapsed time, 0.113s cpu time, 0.000s GC time
Loading theory "Draft.IntegerPort" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
overloading
  dest_protocol_ipv4_TCPUDP \<equiv> dest_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
Found termination order: "size <*mlex*> {}"
### theory "Draft.IPv4_TCPUDP"
### 0.095s elapsed time, 0.369s cpu time, 0.083s GC time
Loading theory "Draft.IntegerPort_TCPUDP" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.NetworkModels")
overloading
  src_port_int \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_int \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_int \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
overloading
  src_port_int_TCPUDP \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
### theory "Draft.IntegerPort"
### 0.053s elapsed time, 0.210s cpu time, 0.000s GC time
Loading theory "Draft.PolicyCore" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators" via "Draft.PortCombinators" via "Draft.PolicyCombinators")
overloading
  dest_port_int_TCPUDP \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_int_TCPUDP \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
overloading
  src_protocol_int_TCPUDP \<equiv> src_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
overloading
  dest_protocol_int_TCPUDP \<equiv> dest_protocol ::
    int * '\<alpha> * '\<alpha> * '\<beta> => protocol
Found termination order: "size <*mlex*> {}"
### theory "Draft.IntegerPort_TCPUDP"
### 0.086s elapsed time, 0.350s cpu time, 0.000s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
overloading
  src_port_datatype \<equiv> src_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  dest_port_datatype \<equiv> dest_port ::
    int * '\<alpha> * '\<alpha> * '\<beta> => '\<gamma>
overloading
  subnet_of_datatype \<equiv> subnet_of :: '\<alpha> => '\<alpha> set set
### theory "Draft.DatatypePort"
### 0.465s elapsed time, 1.703s cpu time, 0.150s GC time
Loading theory "Draft.NetworkModels" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter")
Found termination order: "size <*mlex*> {}"
### theory "Draft.PolicyCore"
### 0.274s elapsed time, 0.897s cpu time, 0.067s GC time
Loading theory "Draft.PolicyCombinators" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators" via "Draft.PortCombinators")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.PolicyCombinators"
### 0.087s elapsed time, 0.274s cpu time, 0.070s GC time
Loading theory "Draft.PortCombinators" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter" via "Draft.ProtocolPortCombinators")
### theory "Draft.PortCombinators"
### 0.159s elapsed time, 0.479s cpu time, 0.000s GC time
Loading theory "Draft.ProtocolPortCombinators" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore" via "Draft.PacketFilter")
Found termination order: "size <*mlex*> {}"
### theory "Draft.ProtocolPortCombinators"
### 0.175s elapsed time, 0.531s cpu time, 0.044s GC time
### theory "HOL-Library.Tree"
### 1.980s elapsed time, 7.000s cpu time, 1.012s GC time
Loading theory "Draft.Templates" (required by "Draft.FWNormalisationTemplates" via "Draft.ExtrEqs")
### theory "Draft.NetworkModels"
### 0.544s elapsed time, 1.589s cpu time, 0.115s GC time
Loading theory "Draft.PacketFilter" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs" via "Draft.FWNormalisationCore")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.078s elapsed time, 0.204s cpu time, 0.055s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FWNormalisationTemplates")
### theory "Draft.PacketFilter"
### 0.281s elapsed time, 0.614s cpu time, 0.055s GC time
Loading theory "Draft.FWNormalisationCore" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof" via "Draft.NormalisationGenericProofs")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.546s elapsed time, 1.130s cpu time, 0.078s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> length <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.FWNormalisationCore"
### 5.770s elapsed time, 7.173s cpu time, 0.911s GC time
Loading theory "Draft.ElementaryRules" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation")
Loading theory "Draft.NormalisationGenericProofs" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs" via "Draft.NormalisationIntegerPortProof")
### theory "Draft.ElementaryRules"
### 0.050s elapsed time, 0.154s cpu time, 0.039s GC time
### theory "Draft.NormalisationGenericProofs"
### 1.063s elapsed time, 1.993s cpu time, 1.261s GC time
Loading theory "Draft.NormalisationIntegerPortProof" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation" via "Draft.NormalisationIPPProofs")
### Ambiguous input (line 1767 of "$AFP/UPF_Firewall/FWNormalisation/NormalisationIntegerPortProof.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" N) ("\<^const>List.list.Nil")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" F)
###         ("_applC" ("_position" C)
###           ("_applC" ("_position" list2policyR) ("_position" N)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_policy_range_comp"
###           ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###             ("_position" x))
###           ("\<^const>ParallelComposition.prod_2" ("_position" NAT)
###             ("\<^const>Fun.comp" ("_position" F)
###               ("_lambda" ("_position" x)
###                 ("_tuple" ("_position" x)
###                   ("_tuple_arg" ("_position" x)))))))
###         ("_applC" ("_position" list2policy)
###           ("_applC"
###             ("\<^const>Normalisation.prod_list" ("_position" NAT)
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" C) ("_position" N))))
###             ("_cargs" ("\<^const>ParallelComposition.prod_2")
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                   ("_position" x))
###                 ("_lambda" ("_position" x)
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" x))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal" ("_position" N) ("\<^const>List.list.Nil")))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_position" F)
###         ("_applC" ("_position" C)
###           ("_applC" ("_position" list2policyR) ("_position" N)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_policy_range_comp"
###           ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###             ("_position" x))
###           ("\<^const>Fun.comp"
###             ("\<^const>ParallelComposition.prod_2" ("_position" NAT)
###               ("_position" F))
###             ("_lambda" ("_position" x)
###               ("_tuple" ("_position" x) ("_tuple_arg" ("_position" x))))))
###         ("_applC" ("_position" list2policy)
###           ("_applC"
###             ("\<^const>Normalisation.prod_list" ("_position" NAT)
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" C) ("_position" N))))
###             ("_cargs" ("\<^const>ParallelComposition.prod_2")
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                   ("_position" x))
###                 ("_lambda" ("_position" x)
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" x))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1806 of "$AFP/UPF_Firewall/FWNormalisation/NormalisationIntegerPortProof.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" DenyAll)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" policy2list) ("_position" Filter)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" allNetsDistinct)
###         ("_applC" ("_position" policy2list) ("_position" Filter))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" all_in_list)
###           ("_cargs"
###             ("_applC" ("_position" policy2list) ("_position" Filter))
###             ("_applC" ("_position" Nets_List) ("_position" Filter)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_policy_range_comp"
###             ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###               ("_position" x))
###             ("\<^const>ParallelComposition.prod_2" ("_position" NAT)
###               ("\<^const>Fun.comp"
###                 ("_applC" ("_position" C) ("_position" Filter))
###                 ("_lambda" ("_position" x)
###                   ("_tuple" ("_position" x)
###                     ("_tuple_arg" ("_position" x)))))))
###           ("_applC" ("_position" list2policy)
###             ("_applC"
###               ("\<^const>Normalisation.prod_list" ("_position" NAT)
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" C)
###                     ("_applC" ("_position" rev)
###                       ("_applC" ("_position" FWNormalisationCore.normalize)
###                         ("_position" Filter))))))
###               ("_cargs" ("\<^const>ParallelComposition.prod_2")
###                 ("_cargs"
###                   ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                     ("_position" x))
###                   ("_lambda" ("_position" x)
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" x)))))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" DenyAll)
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" policy2list) ("_position" Filter)))))
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" allNetsDistinct)
###         ("_applC" ("_position" policy2list) ("_position" Filter))))
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" all_in_list)
###           ("_cargs"
###             ("_applC" ("_position" policy2list) ("_position" Filter))
###             ("_applC" ("_position" Nets_List) ("_position" Filter)))))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_policy_range_comp"
###             ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###               ("_position" x))
###             ("\<^const>Fun.comp"
###               ("\<^const>ParallelComposition.prod_2" ("_position" NAT)
###                 ("_applC" ("_position" C) ("_position" Filter)))
###               ("_lambda" ("_position" x)
###                 ("_tuple" ("_position" x) ("_tuple_arg" ("_position" x))))))
###           ("_applC" ("_position" list2policy)
###             ("_applC"
###               ("\<^const>Normalisation.prod_list" ("_position" NAT)
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" C)
###                     ("_applC" ("_position" rev)
###                       ("_applC" ("_position" FWNormalisationCore.normalize)
###                         ("_position" Filter))))))
###               ("_cargs" ("\<^const>ParallelComposition.prod_2")
###                 ("_cargs"
###                   ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                     ("_position" x))
###                   ("_lambda" ("_position" x)
###                     ("_tuple" ("_position" x)
###                       ("_tuple_arg" ("_position" x)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.NormalisationIntegerPortProof"
### 0.800s elapsed time, 0.895s cpu time, 0.133s GC time
Loading theory "Draft.NormalisationIPPProofs" (required by "Draft.FWNormalisationTemplates" via "Draft.FWNormalisation")
### theory "Draft.NormalisationIPPProofs"
### 0.836s elapsed time, 0.938s cpu time, 0.146s GC time
Loading theory "Draft.FWNormalisation" (required by "Draft.FWNormalisationTemplates")
### theory "Draft.FWNormalisation"
### 0.087s elapsed time, 0.089s cpu time, 0.000s GC time
Loading theory "Draft.FWNormalisationTemplates"
val templateLemmas =
   [("FWNormalisationCore.PLemmas",
     "A\<^sub>U ?p = \<lfloor>allow ()\<rfloor>",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("FWNormalisationCore.PLemmas",
     "D\<^sub>U ?p = \<lfloor>deny ()\<rfloor>",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("FWNormalisationCore.PLemmas", "A\<^sub>f ?f = A\<^sub>p (Some o ?f)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("FWNormalisationCore.set_qsort", "set (qsort ?xs ?l) = set ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("FWNormalisationCore.check",
     "rev (policy2list (rotatePolicy ?p)) = policy2list ?p",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 1, template_var 0))),
    ("FWNormalisationCore.PLemmas",
     "C (DenyAllFromTo ?x ?y) = deny_all_from_to ?x ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("FWNormalisationCore.PLemmas",
     "Cp (DenyAllFromTo ?x ?y) = deny_all_from_to ?x ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("FWNormalisationCore.PLemmas",
     "C (?x \<oplus> ?y) = C ?y \<Oplus> C ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "C (AllowPortFromTo ?x ?y ?p) = allow_from_to_port ?p ?x ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("FWNormalisationCore.PLemmas",
     "Cp (?x \<oplus> ?y) = Cp ?y \<Oplus> Cp ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("FWNormalisationCore.PLemmas", "dom ?m = {a. ?m a ~= \<bottom>}",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("FWNormalisationCore.PLemmas", "?a \<sqsubset> ?S = (EX s:?S. ?a : s)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), t_empty))),
    ("FWNormalisationCore.PLemmas",
     "allow_all_from ?src_net =
      {pa. src pa \<sqsubset> ?src_net} \<triangleleft> A\<^sub>U",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_hole 0))),
    ("FWNormalisationCore.PLemmas",
     "allow_all_to ?dest_net =
      {pa. dest pa \<sqsubset> ?dest_net} \<triangleleft> A\<^sub>U",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_hole 0))),
    ("FWNormalisationCore.PLemmas",
     "deny_all_from ?src_net =
      {pa. src pa \<sqsubset> ?src_net} \<triangleleft> D\<^sub>U",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_hole 0))),
    ("FWNormalisationCore.PLemmas",
     "deny_all_to ?dest_net =
      {pa. dest pa \<sqsubset> ?dest_net} \<triangleleft> D\<^sub>U",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_hole 0))),
    ("FWNormalisationCore.aux2", "{?a, ?b} = {?b, ?a}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("FWNormalisationCore.PLemmas",
     "(\<bottom> ~= ?b) = (EX y. ?b = \<lfloor>y\<rfloor>)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app (template_hole 1, t_empty))),
    ("FWNormalisationCore.PLemmas",
     "?m |` ?A = (%x. if x : ?A then ?m x else \<bottom>)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       t_empty)),
    ("FWNormalisationCore.PLemmas",
     "dest_port (?a, ?d, ?x, ?e) = fst (snd ?x)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 1)))),
    ("FWNormalisationCore.PLemmas",
     "src_port (?a, ?x, ?d, ?e) = fst (snd ?x)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 2)))),
    ("FWNormalisationCore.PLemmas",
     "?m2.0 \<Oplus> ?m1.0 =
      (%x. case ?m2.0 x of \<bottom> => ?m1.0 x
           | \<lfloor>y\<rfloor> => \<lfloor>y\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       t_empty)),
    ("FWNormalisationCore.PLemmas",
     "allow_all_from_port ?src_net ?s_port =
      {pa. src_port pa = ?s_port} \<triangleleft> allow_all_from ?src_net",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 0, template_var 1)))),
    ("FWNormalisationCore.PLemmas",
     "allow_all_to_port ?dest_net ?d_port =
      {pa. dest_port pa = ?d_port} \<triangleleft> allow_all_to ?dest_net",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 0, template_var 1)))),
    ("FWNormalisationCore.PLemmas",
     "deny_all_from_port ?src_net ?s_port =
      {pa. src_port pa = ?s_port} \<triangleleft> deny_all_from ?src_net",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 0, template_var 1)))),
    ("FWNormalisationCore.PLemmas",
     "deny_all_to_port ?dest_net ?d_port =
      {pa. dest_port pa = ?d_port} \<triangleleft> deny_all_to ?dest_net",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 0, template_var 1)))),
    ("FWNormalisationCore.PLemmas",
     "Cp (AllowPortFromTo ?x ?y ?p) =
      allow_from_to_port_prot (fst ?p) (snd ?p) ?x ?y",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0)),
           template_var 2),
         template_var 1))),
    ("FWNormalisationCore.PLemmas",
     "allow_all_from_port_to ?src_net ?s_port ?dest_net =
      {pa. src_port pa = ?s_port} \<triangleleft>
      allow_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "allow_all_from_port_tos ?src_net ?s_port ?dest_net =
      {pa. dest_port pa : ?s_port} \<triangleleft>
      allow_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "allow_all_from_to_port ?src_net ?dest_net ?d_port =
      {pa. dest_port pa = ?d_port} \<triangleleft>
      allow_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("FWNormalisationCore.PLemmas",
     "allow_from_port_to ?port ?src_net ?dest_net =
      {pa. src_port pa = ?port} \<triangleleft>
      allow_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "allow_from_ports_to ?ports ?src_net ?dest_net =
      {pa. src_port pa : ?ports} \<triangleleft>
      allow_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "allow_from_to_port ?port ?src_net ?dest_net =
      {pa. dest_port pa = ?port} \<triangleleft>
      allow_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "allow_from_to_ports ?ports ?src_net ?dest_net =
      {pa. dest_port pa : ?ports} \<triangleleft>
      allow_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "deny_all_from_port_to ?src_net ?s_port ?dest_net =
      {pa. src_port pa = ?s_port} \<triangleleft>
      deny_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "deny_all_from_to_port ?src_net ?dest_net ?d_port =
      {pa. dest_port pa = ?d_port} \<triangleleft>
      deny_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("FWNormalisationCore.PLemmas",
     "deny_from_port_to ?port ?src_net ?dest_net =
      {pa. src_port pa = ?port} \<triangleleft>
      deny_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "deny_from_ports_to ?ports ?src_net ?dest_net =
      {pa. src_port pa : ?ports} \<triangleleft>
      deny_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "deny_from_to_port ?port ?src_net ?dest_net =
      {pa. dest_port pa = ?port} \<triangleleft>
      deny_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "deny_from_to_ports ?ports ?src_net ?dest_net =
      {pa. dest_port pa : ?ports} \<triangleleft>
      deny_all_from_to ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "allow_all_from_port_prot ?p ?src_net ?s_port =
      {pa. dest_protocol pa = ?p} \<triangleleft>
      allow_all_from_port ?src_net ?s_port",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "allow_all_to_port_prot ?p ?dest_net ?d_port =
      {pa. dest_protocol pa = ?p} \<triangleleft>
      allow_all_to_port ?dest_net ?d_port",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "deny_all_from_port_prot ?p ?src_net ?s_port =
      {pa. dest_protocol pa = ?p} \<triangleleft>
      deny_all_from_port ?src_net ?s_port",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "deny_all_to_port_prot ?p ?dest_net ?d_port =
      {pa. dest_protocol pa = ?p} \<triangleleft>
      deny_all_to_port ?dest_net ?d_port",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "allow_all_from_to ?src_net ?dest_net =
      {pa.
       src pa \<sqsubset> ?src_net &
       dest pa \<sqsubset> ?dest_net} \<triangleleft>
      A\<^sub>U",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_hole 0))),
    ("FWNormalisationCore.PLemmas",
     "deny_all_from_to ?src_net ?dest_net =
      {pa.
       src pa \<sqsubset> ?src_net &
       dest pa \<sqsubset> ?dest_net} \<triangleleft>
      D\<^sub>U",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_hole 0))),
    ("FWNormalisationCore.PLemmas",
     "allow_all_from_port_to_prot ?p ?src_net ?s_port ?dest_net =
      {pa. dest_protocol pa = ?p} \<triangleleft>
      allow_all_from_port_to ?src_net ?s_port ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "allow_all_from_to_port_prot ?p ?src_net ?dest_net ?d_port =
      {pa. dest_protocol pa = ?p} \<triangleleft>
      allow_all_from_to_port ?src_net ?dest_net ?d_port",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "allow_from_port_to_prot ?p ?port ?src_net ?dest_net =
      {pa. dest_protocol pa = ?p} \<triangleleft>
      allow_from_port_to ?port ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "allow_from_ports_to_prot ?p ?ports ?src_net ?dest_net =
      {pa. dest_protocol pa = ?p} \<triangleleft>
      allow_from_ports_to ?ports ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "allow_from_to_port_prot ?p ?port ?src_net ?dest_net =
      {pa. dest_protocol pa = ?p} \<triangleleft>
      allow_from_to_port ?port ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "allow_from_to_ports_prot ?p ?ports ?src_net ?dest_net =
      {pa. dest_protocol pa = ?p} \<triangleleft>
      allow_from_to_ports ?ports ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "deny_all_from_port_to_prot ?p ?src_net ?s_port ?dest_net =
      {pa. dest_protocol pa = ?p} \<triangleleft>
      deny_all_from_port_to ?src_net ?s_port ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "deny_all_from_to_port_prot ?p ?src_net ?dest_net ?d_port =
      {pa. dest_protocol pa = ?p} \<triangleleft>
      deny_all_from_to_port ?src_net ?dest_net ?d_port",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "deny_from_port_to_prot ?p ?port ?src_net ?dest_net =
      {pa. dest_protocol pa = ?p} \<triangleleft>
      deny_from_port_to ?port ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "deny_from_ports_to_prot ?p ?ports ?src_net ?dest_net =
      {pa. dest_protocol pa = ?p} \<triangleleft>
      deny_from_ports_to ?ports ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "deny_from_to_port_prot ?p ?port ?src_net ?dest_net =
      {pa. dest_protocol pa = ?p} \<triangleleft>
      deny_from_to_port ?port ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "deny_from_to_ports_prot ?p ?ports ?src_net ?dest_net =
      {pa. dest_protocol pa = ?p} \<triangleleft>
      deny_from_to_ports ?ports ?src_net ?dest_net",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("FWNormalisationCore.PLemmas",
     "?p1.0 \<Otimes>\<^sub>S ?p2.0 =
      ?p1.0 \<Otimes>\<^sub>M ?p2.0 o (%(a, b, c). ((a, b), a, c))",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app (template_hole 4, t_empty)))),
    ("FWNormalisationCore.PLemmas",
     "?p1.0 \<Otimes>\<^sub>M ?p2.0 =
      (%(x, y).
          case ?p1.0 x of \<bottom> => \<bottom>
          | \<lfloor>d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>d2\<rfloor> => \<lfloor>(d1, d2)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("FWNormalisationCore.PLemmas",
     "?f o\<^sub>f ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow y\<rfloor> => \<lfloor>allow (?f y)\<rfloor>
           | \<lfloor>deny y\<rfloor> => \<lfloor>deny (?f y)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       t_empty)),
    ("FWNormalisationCore.PLemmas",
     "?P \<Delta> ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow y\<rfloor> => \<lfloor>allow (fst ?P x)\<rfloor>
           | \<lfloor>deny y\<rfloor> =>
               \<lfloor>deny (snd ?P x)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       t_empty)),
    ("FWNormalisationCore.PLemmas",
     "?P \<nabla> ?p =
      (%x. case ?p x of \<bottom> => \<bottom>
           | \<lfloor>allow y\<rfloor> => \<lfloor>allow (fst ?P y)\<rfloor>
           | \<lfloor>deny y\<rfloor> =>
               \<lfloor>deny (snd ?P y)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       t_empty)),
    ("FWNormalisationCore.PLemmas",
     "?m2.0 \<Oplus>\<^sub>A ?m1.0 =
      (%x. case ?m1.0 x of \<bottom> => ?m2.0 x
           | \<lfloor>allow a\<rfloor> => \<lfloor>allow a\<rfloor>
           | \<lfloor>deny a\<rfloor> =>
               case ?m2.0 x of \<bottom> => \<lfloor>deny a\<rfloor>
               | \<lfloor>allow b\<rfloor> => \<lfloor>allow b\<rfloor>
               | \<lfloor>deny \<alpha>\<rfloor> =>
                   \<lfloor>deny a\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       t_empty)),
    ("FWNormalisationCore.PLemmas",
     "?m1.0 \<Oplus>\<^sub>D ?m2.0 =
      (%x. case ?m2.0 x of \<bottom> => ?m1.0 x
           | \<lfloor>allow a\<rfloor> =>
               case ?m1.0 x of \<bottom> => \<lfloor>allow a\<rfloor>
               | \<lfloor>allow \<alpha>\<rfloor> =>
                   \<lfloor>allow a\<rfloor>
               | \<lfloor>deny b\<rfloor> => \<lfloor>deny b\<rfloor>
           | \<lfloor>deny a\<rfloor> => \<lfloor>deny a\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       t_empty)),
    ("FWNormalisationCore.aux",
     "[| ?x ~= ?a; ?y ~= ?b; ?x ~= ?y & ?x ~= ?b | ?a ~= ?b & ?a ~= ?y |]
      ==> {?x, ?a} ~= {?y, ?b}",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_negation
         (template_equation (template_var 1, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_hole 6,
                      template_app
                       (template_app (template_hole 5, template_var 3),
                        template_var 1))),
                  template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 0)))),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 0))),
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("FWNormalisationCore.PLemmas",
     "?p1.0 \<Otimes>\<^sub>\<or>\<^sub>A ?p2.0 =
      (%(x, y).
          case ?p1.0 x of \<bottom> => \<bottom>
          | \<lfloor>allow d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>allow d2\<rfloor> =>
                  \<lfloor>allow (d1, d2)\<rfloor>
              | \<lfloor>deny d2\<rfloor> =>
                  \<lfloor>allow (d1, d2)\<rfloor>
          | \<lfloor>deny d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>allow d2\<rfloor> =>
                  \<lfloor>allow (d1, d2)\<rfloor>
              | \<lfloor>deny d2\<rfloor> =>
                  \<lfloor>deny (d1, d2)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app (template_hole 9, t_empty))),
    ("FWNormalisationCore.PLemmas",
     "?p1.0 \<Otimes>\<^sub>\<or>\<^sub>D ?p2.0 =
      (%(x, y).
          case ?p1.0 x of \<bottom> => \<bottom>
          | \<lfloor>allow d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>allow d2\<rfloor> =>
                  \<lfloor>allow (d1, d2)\<rfloor>
              | \<lfloor>deny d2\<rfloor> => \<lfloor>deny (d1, d2)\<rfloor>
          | \<lfloor>deny d1\<rfloor> =>
              case ?p2.0 y of \<bottom> => \<bottom>
              | \<lfloor>allow d2\<rfloor> =>
                  \<lfloor>deny (d1, d2)\<rfloor>
              | \<lfloor>deny d2\<rfloor> =>
                  \<lfloor>deny (d1, d2)\<rfloor>)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_app (template_hole 9, t_empty)))]:
   (string * thm * template) list
### theory "Draft.FWNormalisationTemplates"
### 0.479s elapsed time, 0.655s cpu time, 0.086s GC time
val it = (): unit
