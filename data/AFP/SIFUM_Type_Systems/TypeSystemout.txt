Loading theory "Draft.Preliminaries" (required by "Draft.TypeSystemMoreTemplates" via "Draft.TypeSystem")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TypeSystemMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TypeSystemMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TypeSystemMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.122s elapsed time, 0.508s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TypeSystemMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.200s elapsed time, 0.820s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TypeSystemMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.315s elapsed time, 1.270s cpu time, 0.115s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TypeSystemMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  Sec :: complete_lattice
  Inf_Sec == Inf :: Sec set => Sec
  Sup_Sec == Sup :: Sec set => Sec
  bot_Sec == bot :: Sec
  sup_Sec == sup :: Sec => Sec => Sec
  top_Sec == top :: Sec
  inf_Sec == inf :: Sec => Sec => Sec
  less_eq_Sec == less_eq :: Sec => Sec => bool
  less_Sec == less :: Sec => Sec => bool
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale sifum_security
  fixes dma :: "'Var => Sec"
    and stop :: "'Com"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and some_val' :: "'Val"
  assumes "sifum_security stop eval some_val some_val'"
### theory "Draft.Preliminaries"
### 0.752s elapsed time, 2.997s cpu time, 0.244s GC time
Loading theory "Draft.Language" (required by "Draft.TypeSystemMoreTemplates" via "Draft.TypeSystem")
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.971s elapsed time, 3.669s cpu time, 0.806s GC time
Loading theory "Draft.Security" (required by "Draft.TypeSystemMoreTemplates" via "Draft.TypeSystem")
Found termination order: "size <*mlex*> {}"
locale sifum_security
  fixes dma :: "'Var => Sec"
    and stop :: "'Com"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and some_val' :: "'Val"
  assumes "sifum_security stop eval some_val some_val'"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "mevalp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.077s elapsed time, 4.082s cpu time, 0.847s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "mm_equivp"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "loc_reachp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sound_mode_use ::
    "('Com * (Mode => 'Var set)) list * ('Var => 'Val) => bool"
### theory "HOL-Library.Tree"
### 2.056s elapsed time, 7.253s cpu time, 1.166s GC time
Loading theory "Draft.Templates" (required by "Draft.TypeSystemMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Security"
### 1.002s elapsed time, 3.241s cpu time, 0.360s GC time
Loading theory "Draft.Compositionality" (required by "Draft.TypeSystemMoreTemplates" via "Draft.TypeSystem")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.179s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TypeSystemMoreTemplates")
locale sifum_security
  fixes dma :: "'Var => Sec"
    and stop :: "'Com"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and some_val' :: "'Val"
  assumes "sifum_security stop eval some_val some_val'"
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.639s elapsed time, 1.955s cpu time, 0.246s GC time
locale sifum_lang
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "'Var => Sec"
  assumes "sifum_lang eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
locale sifum_lang
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "'Var => Sec"
  assumes "sifum_lang eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
consts
  update_modes :: "'Var ModeUpd => (Mode => 'Var set) => Mode => 'Var set"
### Ambiguous input (line 866 of "$AFP/SIFUM_Type_Systems/Compositionality.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_k_abv_indexed"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("_indexdefault")
###     ("_tuple" ("_position" cms\<^sub>1')
###       ("_tuple_arg" ("_position" mem\<^sub>1')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_abv"
###     ("_tuple" ("_position" cms\<^sub>1)
###       ("_tuple_arg" ("_position" mem\<^sub>1)))
###     ("_tuple" ("_position" cms\<^sub>1')
###       ("_tuple_arg" ("_position" mem\<^sub>1')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 868 of "$AFP/SIFUM_Type_Systems/Compositionality.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_k_abv_indexed"
###         ("_tuple" ("_position" cms\<^sub>2)
###           ("_tuple_arg" ("_position" mem\<^sub>2)))
###         ("_indexdefault")
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2'))))
###       ("_applC" ("_position" makes_compatible)
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_position" mems')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>1')))
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" snd) ("_position" cms\<^sub>2'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>local.meval_abv"
###         ("_tuple" ("_position" cms\<^sub>2)
###           ("_tuple_arg" ("_position" mem\<^sub>2)))
###         ("_tuple" ("_position" cms\<^sub>2')
###           ("_tuple_arg" ("_position" mem\<^sub>2'))))
###       ("_applC" ("_position" makes_compatible)
###         ("_cargs"
###           ("_tuple" ("_position" cms\<^sub>1')
###             ("_tuple_arg" ("_position" mem\<^sub>1')))
###           ("_cargs"
###             ("_tuple" ("_position" cms\<^sub>2')
###               ("_tuple_arg" ("_position" mem\<^sub>2')))
###             ("_position" mems')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 1808 of "$AFP/SIFUM_Type_Systems/Compositionality.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_k_abv_indexed"
###     ("_tuple" ("_position" cms) ("_tuple_arg" ("_position" mem)))
###     ("_indexdefault")
###     ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_abv"
###     ("_tuple" ("_position" cms) ("_tuple_arg" ("_position" mem)))
###     ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1821 of "$AFP/SIFUM_Type_Systems/Compositionality.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_k_abv_indexed"
###     ("_tuple" ("_position" cms) ("_tuple_arg" ("_position" mem)))
###     ("_indexdefault")
###     ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_abv"
###     ("_tuple" ("_position" cms) ("_tuple_arg" ("_position" mem)))
###     ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1857 of "$AFP/SIFUM_Type_Systems/Compositionality.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_k_abv_indexed"
###     ("_tuple" ("_position" cms) ("_tuple_arg" ("_position" mem)))
###     ("_indexdefault")
###     ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.meval_abv"
###     ("_tuple" ("_position" cms) ("_tuple_arg" ("_position" mem)))
###     ("_tuple" ("_position" cms') ("_tuple_arg" ("_position" mem')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### theory "Draft.Compositionality"
### 0.946s elapsed time, 2.618s cpu time, 0.276s GC time
Proofs for inductive predicate(s) "eval\<^sub>w_simplep"
  Proving monotonicity ...
consts
  cxt_to_stmt ::
    "('Var, 'AExp, 'BExp) Stmt list
     => ('Var, 'AExp, 'BExp) Stmt => ('Var, 'AExp, 'BExp) Stmt"
Proofs for inductive predicate(s) "eval\<^sub>wp"
  Proving monotonicity ...
### theory "Draft.Language"
### 2.882s elapsed time, 7.993s cpu time, 1.301s GC time
Loading theory "Draft.TypeSystem" (required by "Draft.TypeSystemMoreTemplates")
locale sifum_types
  fixes aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "'Var => Sec"
    and some_val :: "'Val"
    and some_val' :: "'Val"
    and ev\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and ev\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
  assumes
    "sifum_types aexp_vars bexp_vars some_val some_val' ev\<^sub>A
      ev\<^sub>B"
locale sifum_types
  fixes aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "'Var => Sec"
    and some_val :: "'Val"
    and some_val' :: "'Val"
    and ev\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and ev\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
  assumes
    "sifum_types aexp_vars bexp_vars some_val some_val' ev\<^sub>A
      ev\<^sub>B"
### Ambiguous input (line 51 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_aexpr" ("_position" \<Gamma>) ("_position" e)
###     ("_applC" ("_position" max_dom)
###       ("_applC" ("_position" image)
###         ("_cargs"
###           ("_lambda" ("_position" x)
###             ("_applC" ("_position" to_total)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x))))
###           ("_applC" ("_position" aexp_vars) ("_position" e)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>type_aexpr" ("_position" \<Gamma>) ("_position" e)
###       ("_position" max_dom))
###     ("_applC" ("_position" image)
###       ("_cargs"
###         ("_lambda" ("_position" x)
###           ("_applC" ("_position" to_total)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x))))
###         ("_applC" ("_position" aexp_vars) ("_position" e))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "type_aexpr"
  Proving monotonicity ...
### Ambiguous input (line 57 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>type_bexpr" ("_position" \<Gamma>) ("_position" e)
###     ("_applC" ("_position" max_dom)
###       ("_applC" ("_position" image)
###         ("_cargs"
###           ("_lambda" ("_position" x)
###             ("_applC" ("_position" to_total)
###               ("_cargs" ("_position" \<Gamma>) ("_position" x))))
###           ("_applC" ("_position" bexp_vars) ("_position" e)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>type_bexpr" ("_position" \<Gamma>) ("_position" e)
###       ("_position" max_dom))
###     ("_applC" ("_position" image)
###       ("_cargs"
###         ("_lambda" ("_position" x)
###           ("_applC" ("_position" to_total)
###             ("_cargs" ("_position" \<Gamma>) ("_position" x))))
###         ("_applC" ("_position" bexp_vars) ("_position" e))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "type_bexpr"
  Proving monotonicity ...
Found termination order: "{}"
Proofs for inductive predicate(s) "has_type"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 121 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>tyenv_eq_indexed" ("_position" mem\<^sub>1)
###     ("_index" ("_position" \<Gamma>)) ("_position" mem\<^sub>2))
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^fixed>tyenv_eq_indexed"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_indexdefault") ("_position" Low))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>tyenv_eq_indexed" ("_position" mem\<^sub>1)
###     ("_index" ("_position" \<Gamma>)) ("_position" mem\<^sub>2))
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_position" Low))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>tyenv_eq_indexed" ("_position" mem\<^sub>1)
###     ("_index" ("_position" \<Gamma>)) ("_position" mem\<^sub>2))
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^fixed>tyenv_eq_indexed"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_indexdefault") ("_position" Low))
###       ("\<^fixed>tyenv_eq_indexed"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_indexdefault")
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>tyenv_eq_indexed" ("_position" mem\<^sub>1)
###     ("_index" ("_position" \<Gamma>)) ("_position" mem\<^sub>2))
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_position" Low))
###       ("\<^fixed>tyenv_eq_indexed"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_indexdefault")
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "\<R>\<^sub>1p"
  Proving monotonicity ...
### Ambiguous input (line 146 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.mm_equiv_abv2"
###         ("\<^const>local.conf_abv" ("_position" c\<^sub>1) ("_position" mds)
###           ("_position" mem\<^sub>1))
###         ("\<^const>local.conf_abv" ("_position" c\<^sub>2) ("_position" mds)
###           ("_position" mem\<^sub>2))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" x)
###           ("_applC" ("_position" dom) ("_position" \<Gamma>'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" \<Gamma>') ("_position" x))
###             ("_applC" ("_position" Some) ("_position" High)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.has_type" ("_position" \<Gamma>\<^sub>1)
###             ("_position" c\<^sub>1) ("_position" \<Gamma>')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>local.has_type" ("_position" \<Gamma>\<^sub>2)
###               ("_position" c\<^sub>2) ("_position" \<Gamma>')))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mds_consistent)
###                 ("_cargs" ("_position" mds)
###                   ("_position" \<Gamma>\<^sub>1))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" mds_consistent)
###                   ("_cargs" ("_position" mds)
###                     ("_position" \<Gamma>\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>\<R>\<^sub>2_abv_indexed"
###       ("\<^const>local.conf_abv" ("_position" c\<^sub>1) ("_position" mds)
###         ("_position" mem\<^sub>1))
###       ("_index" ("_position" \<Gamma>'))
###       ("\<^const>local.conf_abv" ("_position" c\<^sub>2) ("_position" mds)
###         ("_position" mem\<^sub>2)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.mm_equiv_abv2"
###         ("\<^const>local.conf_abv" ("_position" c\<^sub>1) ("_position" mds)
###           ("_position" mem\<^sub>1))
###         ("\<^const>local.conf_abv" ("_position" c\<^sub>2) ("_position" mds)
###           ("_position" mem\<^sub>2))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" x)
###           ("_applC" ("_position" dom) ("_position" \<Gamma>'))
###           ("\<^const>local.tyenv_eq_indexed"
###             ("_applC" ("_position" \<Gamma>') ("_position" x))
###             ("_indexdefault")
###             ("_applC" ("_position" Some) ("_position" High)))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.has_type" ("_position" \<Gamma>\<^sub>1)
###             ("_position" c\<^sub>1) ("_position" \<Gamma>')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>local.has_type" ("_position" \<Gamma>\<^sub>2)
###               ("_position" c\<^sub>2) ("_position" \<Gamma>')))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" mds_consistent)
###                 ("_cargs" ("_position" mds)
###                   ("_position" \<Gamma>\<^sub>1))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" mds_consistent)
###                   ("_cargs" ("_position" mds)
###                     ("_position" \<Gamma>\<^sub>2))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>\<R>\<^sub>2_abv_indexed"
###       ("\<^const>local.conf_abv" ("_position" c\<^sub>1) ("_position" mds)
###         ("_position" mem\<^sub>1))
###       ("_index" ("_position" \<Gamma>'))
###       ("\<^const>local.conf_abv" ("_position" c\<^sub>2) ("_position" mds)
###         ("_position" mem\<^sub>2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "\<R>\<^sub>2p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "\<R>\<^sub>3_aux"
  Proving monotonicity ...
Proofs for inductive predicate(s) "\<R>p"
  Proving monotonicity ...
### Ambiguous input (line 225 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.\<R>_abv_indexed"
###       ("\<^const>local.conf_abv" ("_position" c\<^sub>1) ("_position" mds)
###         ("_position" mem\<^sub>1))
###       ("_index" ("_position" \<Gamma>))
###       ("\<^const>local.conf_abv" ("_position" c\<^sub>2) ("_position" mds')
###         ("_position" mem\<^sub>2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" mds) ("_position" mds'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.\<R>_abv_indexed"
###       ("\<^const>local.conf_abv" ("_position" c\<^sub>1) ("_position" mds)
###         ("_position" mem\<^sub>1))
###       ("_index" ("_position" \<Gamma>))
###       ("\<^const>local.conf_abv" ("_position" c\<^sub>2) ("_position" mds')
###         ("_position" mem\<^sub>2))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.tyenv_eq_indexed" ("_position" mds) ("_indexdefault")
###       ("_position" mds'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 312 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" closed_glob_helper)
###       ("_cargs" ("_position" \<Gamma>')
###         ("_cargs"
###           ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###             ("_position" mds) ("_position" mem\<^sub>1))
###           ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###             ("_position" mds\<^sub>2) ("_position" mem\<^sub>2)))))
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>local.tyenv_eq_indexed"
###               ("_applC" ("_position" dma) ("_position" x)) ("_indexdefault")
###               ("_position" High))
###             ("\<^const>Set.not_member" ("_position" x)
###               ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" v\<^sub>1) ("_position" v\<^sub>2))
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>1)
###                     ("_updbind" ("_position" x) ("_position" v\<^sub>1))))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                     ("_position" mds)
###                     ("_Update" ("_position" mem\<^sub>2)
###                       ("_updbind" ("_position" x)
###                         ("_position" v\<^sub>2))))))
###               ("_applC" ("_position" \<R>\<^sub>3)
###                 ("_position" \<Gamma>')))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>local.tyenv_eq_indexed"
###               ("_applC" ("_position" dma) ("_position" x)) ("_indexdefault")
###               ("_position" Low))
###             ("\<^const>Set.not_member" ("_position" x)
###               ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###           ("\<^const>HOL.All_binder" ("_position" v)
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>1)
###                     ("_updbind" ("_position" x) ("_position" v))))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                     ("_position" mds)
###                     ("_Update" ("_position" mem\<^sub>2)
###                       ("_updbind" ("_position" x) ("_position" v))))))
###               ("_applC" ("_position" \<R>\<^sub>3)
###                 ("_position" \<Gamma>')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" closed_glob_helper)
###       ("_cargs" ("_position" \<Gamma>')
###         ("_cargs"
###           ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###             ("_position" mds) ("_position" mem\<^sub>1))
###           ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###             ("_position" mds\<^sub>2) ("_position" mem\<^sub>2)))))
###     ("_indexdefault")
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>local.tyenv_eq_indexed"
###               ("_applC" ("_position" dma) ("_position" x)) ("_indexdefault")
###               ("_position" High))
###             ("\<^const>Set.not_member" ("_position" x)
###               ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" v\<^sub>1) ("_position" v\<^sub>2))
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>1)
###                     ("_updbind" ("_position" x) ("_position" v\<^sub>1))))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                     ("_position" mds)
###                     ("_Update" ("_position" mem\<^sub>2)
###                       ("_updbind" ("_position" x)
###                         ("_position" v\<^sub>2))))))
###               ("_applC" ("_position" \<R>\<^sub>3)
###                 ("_position" \<Gamma>')))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>local.tyenv_eq_indexed"
###               ("_applC" ("_position" dma) ("_position" x)) ("_indexdefault")
###               ("_position" Low))
###             ("\<^const>Set.not_member" ("_position" x)
###               ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###           ("\<^const>HOL.All_binder" ("_position" v)
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>1)
###                     ("_updbind" ("_position" x) ("_position" v))))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                     ("_position" mds)
###                     ("_Update" ("_position" mem\<^sub>2)
###                       ("_updbind" ("_position" x) ("_position" v))))))
###               ("_applC" ("_position" \<R>\<^sub>3)
###                 ("_position" \<Gamma>')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" closed_glob_helper)
###       ("_cargs" ("_position" \<Gamma>')
###         ("_cargs"
###           ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###             ("_position" mds) ("_position" mem\<^sub>1))
###           ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###             ("_position" mds\<^sub>2) ("_position" mem\<^sub>2)))))
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" dma) ("_position" x))
###               ("_position" High))
###             ("\<^const>Set.not_member" ("_position" x)
###               ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" v\<^sub>1) ("_position" v\<^sub>2))
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>1)
###                     ("_updbind" ("_position" x) ("_position" v\<^sub>1))))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                     ("_position" mds)
###                     ("_Update" ("_position" mem\<^sub>2)
###                       ("_updbind" ("_position" x)
###                         ("_position" v\<^sub>2))))))
###               ("_applC" ("_position" \<R>\<^sub>3)
###                 ("_position" \<Gamma>')))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>local.tyenv_eq_indexed"
###               ("_applC" ("_position" dma) ("_position" x)) ("_indexdefault")
###               ("_position" Low))
###             ("\<^const>Set.not_member" ("_position" x)
###               ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###           ("\<^const>HOL.All_binder" ("_position" v)
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>1)
###                     ("_updbind" ("_position" x) ("_position" v))))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                     ("_position" mds)
###                     ("_Update" ("_position" mem\<^sub>2)
###                       ("_updbind" ("_position" x) ("_position" v))))))
###               ("_applC" ("_position" \<R>\<^sub>3)
###                 ("_position" \<Gamma>')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" closed_glob_helper)
###       ("_cargs" ("_position" \<Gamma>')
###         ("_cargs"
###           ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###             ("_position" mds) ("_position" mem\<^sub>1))
###           ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###             ("_position" mds\<^sub>2) ("_position" mem\<^sub>2)))))
###     ("_indexdefault")
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" dma) ("_position" x))
###               ("_position" High))
###             ("\<^const>Set.not_member" ("_position" x)
###               ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" v\<^sub>1) ("_position" v\<^sub>2))
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>1)
###                     ("_updbind" ("_position" x) ("_position" v\<^sub>1))))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                     ("_position" mds)
###                     ("_Update" ("_position" mem\<^sub>2)
###                       ("_updbind" ("_position" x)
###                         ("_position" v\<^sub>2))))))
###               ("_applC" ("_position" \<R>\<^sub>3)
###                 ("_position" \<Gamma>')))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>local.tyenv_eq_indexed"
###               ("_applC" ("_position" dma) ("_position" x)) ("_indexdefault")
###               ("_position" Low))
###             ("\<^const>Set.not_member" ("_position" x)
###               ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###           ("\<^const>HOL.All_binder" ("_position" v)
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>1)
###                     ("_updbind" ("_position" x) ("_position" v))))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                     ("_position" mds)
###                     ("_Update" ("_position" mem\<^sub>2)
###                       ("_updbind" ("_position" x) ("_position" v))))))
###               ("_applC" ("_position" \<R>\<^sub>3)
###                 ("_position" \<Gamma>')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" closed_glob_helper)
###       ("_cargs" ("_position" \<Gamma>')
###         ("_cargs"
###           ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###             ("_position" mds) ("_position" mem\<^sub>1))
###           ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###             ("_position" mds\<^sub>2) ("_position" mem\<^sub>2)))))
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>local.tyenv_eq_indexed"
###               ("_applC" ("_position" dma) ("_position" x)) ("_indexdefault")
###               ("_position" High))
###             ("\<^const>Set.not_member" ("_position" x)
###               ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" v\<^sub>1) ("_position" v\<^sub>2))
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>1)
###                     ("_updbind" ("_position" x) ("_position" v\<^sub>1))))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                     ("_position" mds)
###                     ("_Update" ("_position" mem\<^sub>2)
###                       ("_updbind" ("_position" x)
###                         ("_position" v\<^sub>2))))))
###               ("_applC" ("_position" \<R>\<^sub>3)
###                 ("_position" \<Gamma>')))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" dma) ("_position" x))
###               ("_position" Low))
###             ("\<^const>Set.not_member" ("_position" x)
###               ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###           ("\<^const>HOL.All_binder" ("_position" v)
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>1)
###                     ("_updbind" ("_position" x) ("_position" v))))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                     ("_position" mds)
###                     ("_Update" ("_position" mem\<^sub>2)
###                       ("_updbind" ("_position" x) ("_position" v))))))
###               ("_applC" ("_position" \<R>\<^sub>3)
###                 ("_position" \<Gamma>')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" closed_glob_helper)
###       ("_cargs" ("_position" \<Gamma>')
###         ("_cargs"
###           ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###             ("_position" mds) ("_position" mem\<^sub>1))
###           ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###             ("_position" mds\<^sub>2) ("_position" mem\<^sub>2)))))
###     ("_indexdefault")
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>local.tyenv_eq_indexed"
###               ("_applC" ("_position" dma) ("_position" x)) ("_indexdefault")
###               ("_position" High))
###             ("\<^const>Set.not_member" ("_position" x)
###               ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" v\<^sub>1) ("_position" v\<^sub>2))
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>1)
###                     ("_updbind" ("_position" x) ("_position" v\<^sub>1))))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                     ("_position" mds)
###                     ("_Update" ("_position" mem\<^sub>2)
###                       ("_updbind" ("_position" x)
###                         ("_position" v\<^sub>2))))))
###               ("_applC" ("_position" \<R>\<^sub>3)
###                 ("_position" \<Gamma>')))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" dma) ("_position" x))
###               ("_position" Low))
###             ("\<^const>Set.not_member" ("_position" x)
###               ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###           ("\<^const>HOL.All_binder" ("_position" v)
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>1)
###                     ("_updbind" ("_position" x) ("_position" v))))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                     ("_position" mds)
###                     ("_Update" ("_position" mem\<^sub>2)
###                       ("_updbind" ("_position" x) ("_position" v))))))
###               ("_applC" ("_position" \<R>\<^sub>3)
###                 ("_position" \<Gamma>')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" closed_glob_helper)
###       ("_cargs" ("_position" \<Gamma>')
###         ("_cargs"
###           ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###             ("_position" mds) ("_position" mem\<^sub>1))
###           ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###             ("_position" mds\<^sub>2) ("_position" mem\<^sub>2)))))
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" dma) ("_position" x))
###               ("_position" High))
###             ("\<^const>Set.not_member" ("_position" x)
###               ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" v\<^sub>1) ("_position" v\<^sub>2))
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>1)
###                     ("_updbind" ("_position" x) ("_position" v\<^sub>1))))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                     ("_position" mds)
###                     ("_Update" ("_position" mem\<^sub>2)
###                       ("_updbind" ("_position" x)
###                         ("_position" v\<^sub>2))))))
###               ("_applC" ("_position" \<R>\<^sub>3)
###                 ("_position" \<Gamma>')))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" dma) ("_position" x))
###               ("_position" Low))
###             ("\<^const>Set.not_member" ("_position" x)
###               ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###           ("\<^const>HOL.All_binder" ("_position" v)
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>1)
###                     ("_updbind" ("_position" x) ("_position" v))))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                     ("_position" mds)
###                     ("_Update" ("_position" mem\<^sub>2)
###                       ("_updbind" ("_position" x) ("_position" v))))))
###               ("_applC" ("_position" \<R>\<^sub>3)
###                 ("_position" \<Gamma>')))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" closed_glob_helper)
###       ("_cargs" ("_position" \<Gamma>')
###         ("_cargs"
###           ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###             ("_position" mds) ("_position" mem\<^sub>1))
###           ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###             ("_position" mds\<^sub>2) ("_position" mem\<^sub>2)))))
###     ("_indexdefault")
###     ("\<^const>HOL.All_binder" ("_position" x)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" dma) ("_position" x))
###               ("_position" High))
###             ("\<^const>Set.not_member" ("_position" x)
###               ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" v\<^sub>1) ("_position" v\<^sub>2))
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>1)
###                     ("_updbind" ("_position" x) ("_position" v\<^sub>1))))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                     ("_position" mds)
###                     ("_Update" ("_position" mem\<^sub>2)
###                       ("_updbind" ("_position" x)
###                         ("_position" v\<^sub>2))))))
###               ("_applC" ("_position" \<R>\<^sub>3)
###                 ("_position" \<Gamma>')))))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" dma) ("_position" x))
###               ("_position" Low))
###             ("\<^const>Set.not_member" ("_position" x)
###               ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###           ("\<^const>HOL.All_binder" ("_position" v)
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>1)
###                     ("_updbind" ("_position" x) ("_position" v))))
###                 ("_tuple_arg"
###                   ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                     ("_position" mds)
###                     ("_Update" ("_position" mem\<^sub>2)
###                       ("_updbind" ("_position" x) ("_position" v))))))
###               ("_applC" ("_position" \<R>\<^sub>3)
###                 ("_position" \<Gamma>')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 320 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>local.tyenv_eq_indexed"
###             ("_applC" ("_position" dma) ("_position" x)) ("_indexdefault")
###             ("_position" High))
###           ("\<^const>Set.not_member" ("_position" x)
###             ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v\<^sub>1) ("_position" v\<^sub>2))
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                 ("_position" mds)
###                 ("_Update" ("_position" mem\<^sub>1)
###                   ("_updbind" ("_position" x) ("_position" v\<^sub>1))))
###               ("_tuple_arg"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>2)
###                     ("_updbind" ("_position" x) ("_position" v\<^sub>2))))))
###             ("_applC" ("_position" \<R>\<^sub>3) ("_position" \<Gamma>')))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>local.tyenv_eq_indexed"
###             ("_applC" ("_position" dma) ("_position" x)) ("_indexdefault")
###             ("_position" Low))
###           ("\<^const>Set.not_member" ("_position" x)
###             ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###         ("\<^const>HOL.All_binder" ("_position" v)
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                 ("_position" mds)
###                 ("_Update" ("_position" mem\<^sub>1)
###                   ("_updbind" ("_position" x) ("_position" v))))
###               ("_tuple_arg"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>2)
###                     ("_updbind" ("_position" x) ("_position" v))))))
###             ("_applC" ("_position" \<R>\<^sub>3)
###               ("_position" \<Gamma>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" dma) ("_position" x))
###             ("_position" High))
###           ("\<^const>Set.not_member" ("_position" x)
###             ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v\<^sub>1) ("_position" v\<^sub>2))
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                 ("_position" mds)
###                 ("_Update" ("_position" mem\<^sub>1)
###                   ("_updbind" ("_position" x) ("_position" v\<^sub>1))))
###               ("_tuple_arg"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>2)
###                     ("_updbind" ("_position" x) ("_position" v\<^sub>2))))))
###             ("_applC" ("_position" \<R>\<^sub>3) ("_position" \<Gamma>')))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>local.tyenv_eq_indexed"
###             ("_applC" ("_position" dma) ("_position" x)) ("_indexdefault")
###             ("_position" Low))
###           ("\<^const>Set.not_member" ("_position" x)
###             ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###         ("\<^const>HOL.All_binder" ("_position" v)
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                 ("_position" mds)
###                 ("_Update" ("_position" mem\<^sub>1)
###                   ("_updbind" ("_position" x) ("_position" v))))
###               ("_tuple_arg"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>2)
###                     ("_updbind" ("_position" x) ("_position" v))))))
###             ("_applC" ("_position" \<R>\<^sub>3)
###               ("_position" \<Gamma>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>local.tyenv_eq_indexed"
###             ("_applC" ("_position" dma) ("_position" x)) ("_indexdefault")
###             ("_position" High))
###           ("\<^const>Set.not_member" ("_position" x)
###             ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v\<^sub>1) ("_position" v\<^sub>2))
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                 ("_position" mds)
###                 ("_Update" ("_position" mem\<^sub>1)
###                   ("_updbind" ("_position" x) ("_position" v\<^sub>1))))
###               ("_tuple_arg"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>2)
###                     ("_updbind" ("_position" x) ("_position" v\<^sub>2))))))
###             ("_applC" ("_position" \<R>\<^sub>3) ("_position" \<Gamma>')))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" dma) ("_position" x))
###             ("_position" Low))
###           ("\<^const>Set.not_member" ("_position" x)
###             ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###         ("\<^const>HOL.All_binder" ("_position" v)
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                 ("_position" mds)
###                 ("_Update" ("_position" mem\<^sub>1)
###                   ("_updbind" ("_position" x) ("_position" v))))
###               ("_tuple_arg"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>2)
###                     ("_updbind" ("_position" x) ("_position" v))))))
###             ("_applC" ("_position" \<R>\<^sub>3)
###               ("_position" \<Gamma>'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" dma) ("_position" x))
###             ("_position" High))
###           ("\<^const>Set.not_member" ("_position" x)
###             ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###         ("\<^const>HOL.All_binder"
###           ("_idts" ("_position" v\<^sub>1) ("_position" v\<^sub>2))
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                 ("_position" mds)
###                 ("_Update" ("_position" mem\<^sub>1)
###                   ("_updbind" ("_position" x) ("_position" v\<^sub>1))))
###               ("_tuple_arg"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>2)
###                     ("_updbind" ("_position" x) ("_position" v\<^sub>2))))))
###             ("_applC" ("_position" \<R>\<^sub>3) ("_position" \<Gamma>')))))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" dma) ("_position" x))
###             ("_position" Low))
###           ("\<^const>Set.not_member" ("_position" x)
###             ("_applC" ("_position" mds) ("_position" AsmNoWrite))))
###         ("\<^const>HOL.All_binder" ("_position" v)
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("\<^const>local.conf_abv" ("_position" c\<^sub>1)
###                 ("_position" mds)
###                 ("_Update" ("_position" mem\<^sub>1)
###                   ("_updbind" ("_position" x) ("_position" v))))
###               ("_tuple_arg"
###                 ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###                   ("_position" mds)
###                   ("_Update" ("_position" mem\<^sub>2)
###                     ("_updbind" ("_position" x) ("_position" v))))))
###             ("_applC" ("_position" \<R>\<^sub>3)
###               ("_position" \<Gamma>'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 397 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" to_total)
###       ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###     ("_position" Low)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" to_total)
###       ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###     ("_indexdefault") ("_position" Low)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 405 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" to_total)
###       ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###     ("_position" Low)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" to_total)
###       ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###     ("_indexdefault") ("_position" Low)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 423 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.has_type" ("_position" \<Gamma>) ("_position" c)
###         ("_position" \<Gamma>')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.tyenv_eq_indexed" ("_position" c) ("_indexdefault")
###           ("_position" Stop)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.context_le" ("_position" \<Gamma>)
###       ("_position" \<Gamma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.has_type" ("_position" \<Gamma>) ("_position" c)
###         ("_position" \<Gamma>')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" Stop)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.context_le" ("_position" \<Gamma>)
###       ("_position" \<Gamma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 540 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" bisim_helper)
###       ("_cargs"
###         ("\<^const>local.conf_abv" ("_position" c\<^sub>1) ("_position" mds)
###           ("_position" mem\<^sub>1))
###         ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###           ("_position" mds\<^sub>2) ("_position" mem\<^sub>2))))
###     ("_indexdefault")
###     ("\<^const>local.low_mds_eq_indexed" ("_position" mem\<^sub>1)
###       ("_index" ("_position" mds)) ("_position" mem\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" bisim_helper)
###       ("_cargs"
###         ("\<^const>local.conf_abv" ("_position" c\<^sub>1) ("_position" mds)
###           ("_position" mem\<^sub>1))
###         ("\<^const>local.conf_abv" ("_position" c\<^sub>2)
###           ("_position" mds\<^sub>2) ("_position" mem\<^sub>2))))
###     ("\<^const>local.low_mds_eq_indexed" ("_position" mem\<^sub>1)
###       ("_index" ("_position" mds)) ("_position" mem\<^sub>2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 656 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" c) ("_position" Stop)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed" ("_position" c) ("_indexdefault")
###     ("_position" Stop)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1212 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_position" Low))
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_indexdefault")
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_indexdefault") ("_position" Low))
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_indexdefault")
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_position" Low))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_indexdefault") ("_position" Low))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1224 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_position" Low))
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_indexdefault")
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_indexdefault") ("_position" Low))
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_indexdefault")
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_position" Low))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" x)
###     ("\<^const>HOL.implies"
###       ("\<^const>local.tyenv_eq_indexed"
###         ("_applC" ("_position" to_total)
###           ("_cargs" ("_position" \<Gamma>) ("_position" x)))
###         ("_indexdefault") ("_position" Low))
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" mem\<^sub>1) ("_position" x))
###         ("_applC" ("_position" mem\<^sub>2) ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1230 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" \<Gamma>\<^sub>0) ("_position" x))
###     ("_position" None)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.tyenv_eq_indexed"
###     ("_applC" ("_position" \<Gamma>\<^sub>0) ("_position" x))
###     ("_indexdefault") ("_position" None)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1236 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" list_all)
###         ("_cargs"
###           ("_lambda" ("_position" c)
###             ("_applC"
###               ("\<^fixed>type_global"
###                 ("_applC" ("_position" \<Gamma>\<^sub>0)
###                   ("_Finset" ("_position" c))))
###               ("_position" \<Gamma>\<^sub>0)))
###           ("_position" cs))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_position" mem)
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple"
###               ("_applC" ("_position" add_initial_modes) ("_position" cs))
###               ("_tuple_arg" ("_position" mem))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" type_global) ("_position" cs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" list_all)
###         ("_cargs"
###           ("_lambda" ("_position" c)
###             ("\<^fixed>type_global"
###               ("_applC" ("_position" \<Gamma>\<^sub>0)
###                 ("_cargs" ("_Finset" ("_position" c))
###                   ("_position" \<Gamma>\<^sub>0)))))
###           ("_position" cs))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_position" mem)
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple"
###               ("_applC" ("_position" add_initial_modes) ("_position" cs))
###               ("_tuple_arg" ("_position" mem))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" type_global) ("_position" cs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" list_all)
###         ("_cargs"
###           ("_lambda" ("_position" c)
###             ("_applC"
###               ("\<^fixed>type_global" ("_position" \<Gamma>\<^sub>0))
###               ("_cargs" ("_Finset" ("_position" c))
###                 ("_position" \<Gamma>\<^sub>0))))
###           ("_position" cs))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_position" mem)
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple"
###               ("_applC" ("_position" add_initial_modes) ("_position" cs))
###               ("_tuple_arg" ("_position" mem))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" type_global) ("_position" cs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" list_all)
###         ("_cargs"
###           ("_lambda" ("_position" c)
###             ("\<^const>local.has_type" ("_position" \<Gamma>\<^sub>0)
###               ("_position" c) ("_position" \<Gamma>\<^sub>0)))
###           ("_position" cs))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.All_binder" ("_position" mem)
###           ("_applC" ("_position" sound_mode_use)
###             ("_tuple"
###               ("_applC" ("_position" add_initial_modes) ("_position" cs))
###               ("_tuple_arg" ("_position" mem))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" type_global) ("_position" cs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "type_global"
  Proving monotonicity ...
### Ambiguous input (line 1246 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>local.type_global"
###           ("_applC" ("_position" \<Gamma>\<^sub>0)
###             ("_Finset" ("_position" c))))
###         ("_position" \<Gamma>\<^sub>0))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" com_sifum_secure) ("_position" c))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.type_global"
###         ("_applC" ("_position" \<Gamma>\<^sub>0)
###           ("_cargs" ("_Finset" ("_position" c))
###             ("_position" \<Gamma>\<^sub>0))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" com_sifum_secure) ("_position" c))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>local.type_global" ("_position" \<Gamma>\<^sub>0))
###         ("_cargs" ("_Finset" ("_position" c))
###           ("_position" \<Gamma>\<^sub>0)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" com_sifum_secure) ("_position" c))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.has_type" ("_position" \<Gamma>\<^sub>0)
###         ("_position" c) ("_position" \<Gamma>\<^sub>0))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" com_sifum_secure) ("_position" c))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1253 of "$AFP/SIFUM_Type_Systems/TypeSystem.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mds_consistent)
###         ("_cargs" ("_position" mds) ("_position" \<Gamma>\<^sub>0))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.tyenv_eq_indexed"
###           ("_applC" ("_position" dma) ("_position" x)) ("_indexdefault")
###           ("_position" Low)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.not_member" ("_position" x)
###       ("_applC" ("_position" mds) ("_position" AsmNoRead)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" mds_consistent)
###         ("_cargs" ("_position" mds) ("_position" \<Gamma>\<^sub>0))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" dma) ("_position" x))
###           ("_position" Low)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.not_member" ("_position" x)
###       ("_applC" ("_position" mds) ("_position" AsmNoRead)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.TypeSystem"
### 2.320s elapsed time, 2.522s cpu time, 0.236s GC time
Loading theory "Draft.TypeSystemMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.TypeSystemMoreTemplates"
### 0.363s elapsed time, 0.533s cpu time, 0.029s GC time
val it = (): unit
