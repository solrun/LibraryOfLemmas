Loading theory "Draft.Preliminaries" (required by "Draft.LocallySoundModeUseMoreTemplates" via "Draft.LocallySoundModeUse" via "Draft.Security")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LocallySoundModeUseMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.LocallySoundModeUseMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LocallySoundModeUseMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.572s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LocallySoundModeUseMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.201s elapsed time, 0.818s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LocallySoundModeUseMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.334s elapsed time, 1.328s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.LocallySoundModeUseMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  Sec :: complete_lattice
  Inf_Sec == Inf :: Sec set => Sec
  Sup_Sec == Sup :: Sec set => Sec
  bot_Sec == bot :: Sec
  sup_Sec == sup :: Sec => Sec => Sec
  top_Sec == top :: Sec
  inf_Sec == inf :: Sec => Sec => Sec
  less_eq_Sec == less_eq :: Sec => Sec => bool
  less_Sec == less :: Sec => Sec => bool
Found termination order: "size <*mlex*> {}"
locale sifum_security
  fixes dma :: "'Var => Sec"
    and stop :: "'Com"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and some_val' :: "'Val"
  assumes "sifum_security stop eval some_val some_val'"
### theory "Draft.Preliminaries"
### 0.741s elapsed time, 2.948s cpu time, 0.250s GC time
Loading theory "Draft.Language" (required by "Draft.LocallySoundModeUseMoreTemplates" via "Draft.LocallySoundModeUse")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.950s elapsed time, 3.595s cpu time, 0.829s GC time
Loading theory "Draft.Security" (required by "Draft.LocallySoundModeUseMoreTemplates" via "Draft.LocallySoundModeUse")
locale sifum_security
  fixes dma :: "'Var => Sec"
    and stop :: "'Com"
    and
    eval ::
      "((('Com * (Mode => 'Var set)) * ('Var => 'Val)) *
        ('Com * (Mode => 'Var set)) * ('Var => 'Val)) set"
    and some_val :: "'Val"
    and some_val' :: "'Val"
  assumes "sifum_security stop eval some_val some_val'"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "mevalp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Stream"
### 1.104s elapsed time, 4.198s cpu time, 0.885s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "mm_equivp"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "loc_reachp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sound_mode_use ::
    "('Com * (Mode => 'Var set)) list * ('Var => 'Val) => bool"
### theory "Draft.Security"
### 1.027s elapsed time, 3.392s cpu time, 0.439s GC time
### theory "HOL-Library.Tree"
### 2.103s elapsed time, 7.392s cpu time, 1.268s GC time
Loading theory "Draft.Templates" (required by "Draft.LocallySoundModeUseMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.113s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LocallySoundModeUseMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.794s elapsed time, 1.936s cpu time, 0.887s GC time
locale sifum_lang
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "'Var => Sec"
  assumes "sifum_lang eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
locale sifum_lang
  fixes eval\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and eval\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
    and aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "'Var => Sec"
  assumes "sifum_lang eval\<^sub>A eval\<^sub>B aexp_vars bexp_vars"
consts
  update_modes :: "'Var ModeUpd => (Mode => 'Var set) => Mode => 'Var set"
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "eval\<^sub>w_simplep"
  Proving monotonicity ...
consts
  cxt_to_stmt ::
    "('Var, 'AExp, 'BExp) Stmt list
     => ('Var, 'AExp, 'BExp) Stmt => ('Var, 'AExp, 'BExp) Stmt"
Proofs for inductive predicate(s) "eval\<^sub>wp"
  Proving monotonicity ...
### theory "Draft.Language"
### 3.073s elapsed time, 7.836s cpu time, 2.005s GC time
Loading theory "Draft.LocallySoundModeUse" (required by "Draft.LocallySoundModeUseMoreTemplates")
locale sifum_modes
  fixes aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "'Var => Sec"
    and some_val :: "'Val"
    and some_val' :: "'Val"
    and ev\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and ev\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
  assumes
    "sifum_modes aexp_vars bexp_vars some_val some_val' ev\<^sub>A
      ev\<^sub>B"
locale sifum_modes
  fixes aexp_vars :: "'AExp => 'Var set"
    and bexp_vars :: "'BExp => 'Var set"
    and dma :: "'Var => Sec"
    and some_val :: "'Val"
    and some_val' :: "'Val"
    and ev\<^sub>A :: "('Var => 'Val) => 'AExp => 'Val"
    and ev\<^sub>B :: "('Var => 'Val) => 'BExp => bool"
  assumes
    "sifum_modes aexp_vars bexp_vars some_val some_val' ev\<^sub>A
      ev\<^sub>B"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### Ambiguous input (line 36 of "$AFP/SIFUM_Type_Systems/LocallySoundModeUse.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annotate)
###       ("_cargs" ("_position" c)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("\<^const>Language.Stmt.ModeDecl"
###       ("_applC" ("_position" annotate)
###         ("_cargs" ("_position" c) ("_position" as)))
###       ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Language.Stmt.ModeDecl"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" annotate)
###         ("_cargs" ("_position" c)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###       ("_applC" ("_position" annotate)
###         ("_cargs" ("_position" c) ("_position" as))))
###     ("_position" a)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "mode_type"
  Proving monotonicity ...
### theory "Draft.LocallySoundModeUse"
### 0.824s elapsed time, 0.888s cpu time, 0.079s GC time
Loading theory "Draft.LocallySoundModeUseMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.LocallySoundModeUseMoreTemplates"
### 0.344s elapsed time, 0.460s cpu time, 0.000s GC time
val it = (): unit
