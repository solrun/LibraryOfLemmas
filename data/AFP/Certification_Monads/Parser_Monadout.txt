Loading theory "Deriving.Derive_Manager" (required by "Draft.Parser_MonadMoreTemplates" via "Draft.Parser_Monad" via "Show.Show")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Parser_MonadMoreTemplates" via "Draft.Parser_Monad" via "Draft.Error_Monad" via "HOL-Library.Monad_Syntax")
Loading theory "Deriving.Generator_Aux" (required by "Draft.Parser_MonadMoreTemplates" via "Draft.Parser_Monad" via "Show.Show")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Parser_MonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
signature BNF_ACCESS =
  sig
    val bnf_types: Proof.context -> string list -> typ list
    val case_consts: Proof.context -> string list -> term list
    val case_simps: Proof.context -> string list -> thm list list
    val case_thms: Proof.context -> string list -> thm list
    val constr_argument_types:
       Proof.context -> string list -> typ list list list
    val constr_terms: Proof.context -> string -> term list
    val distinct_thms: Proof.context -> string list -> thm list list
    val induct_thms: Proof.context -> string list -> thm list
    val inject_thms: Proof.context -> string list -> thm list list
    val map_comps: Proof.context -> string list -> thm list
    val map_simps: Proof.context -> string list -> thm list list
    val map_terms: Proof.context -> string list -> term list
    val set_simps: Proof.context -> string list -> thm list list
    val set_terms: Proof.context -> string list -> term list list
  end
structure Bnf_Access: BNF_ACCESS
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
signature DERIVE_MANAGER =
  sig
    val derive: string -> string -> string -> theory -> theory
    val derive_cmd: string -> string -> string -> theory -> theory
    val print_info: theory -> unit
    val register_derive:
       string ->
         string ->
           (string -> string -> theory -> theory) -> theory -> theory
  end
structure Derive_Manager: DERIVE_MANAGER
### theory "Deriving.Derive_Manager"
### 0.062s elapsed time, 0.284s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Parser_MonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.107s elapsed time, 0.443s cpu time, 0.036s GC time
Loading theory "Draft.Error_Syntax" (required by "Draft.Parser_MonadMoreTemplates" via "Draft.Parser_Monad" via "Draft.Error_Monad")
### theory "Draft.Error_Syntax"
### 0.026s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Parser_MonadMoreTemplates" via "Draft.Parser_Monad" via "Draft.Error_Monad")
signature GENERATOR_AUX =
  sig
    val OF_option: thm -> thm option list -> thm
    val add_used_tycos:
       Proof.context -> string -> string list -> string list
    val alist_to_string: (string * 'a) list -> string
    val conjI_tac:
       thm list ->
         Proof.context ->
           'a list -> (Proof.context -> int -> tactic) -> tactic
    val create_map:
       (typ -> term) ->
         (string * typ -> 'a -> term) ->
           'a ->
             (typ -> bool) ->
               (local_theory -> string -> bool list) ->
                 (local_theory -> string -> term) ->
                   (local_theory -> string -> 'a -> term) ->
                     string list ->
                       (local_theory -> string -> 'a) ->
                         typ -> local_theory -> term
    val create_partial:
       'a ->
         (typ -> bool) ->
           (local_theory -> string -> bool list) ->
             (local_theory -> string -> term) ->
               (local_theory -> string -> 'a -> term) ->
                 string list ->
                   (local_theory -> string -> 'a) ->
                     typ -> local_theory -> term
    val define_overloaded:
       string * term -> local_theory -> thm * local_theory
    val define_overloaded_generic:
       Attrib.binding * term -> local_theory -> thm * local_theory
    val drop_last: 'a list -> 'a list
    val freeify_tvars: typ -> typ
    val ind_case_to_idxs: 'a list list -> int -> int * int
    val infer_type: Proof.context -> term -> term
    val ints_to_subscript: int list -> string
    val is_class_instance: theory -> string -> sort -> bool
    val lambdas: term list -> term -> term
    val mk_case_tac:
       Proof.context ->
         term option list list ->
           thm ->
             (int ->
                Proof.context * thm list * (string * cterm) list -> tactic)
               -> tactic
    val mk_def: typ -> string -> term -> term
    val mk_id: typ -> term
    val mk_infer_const: string -> Proof.context -> term -> term
    val mutual_recursive_types:
       string -> Proof.context -> string list * typ list
    val prove_multi_future:
       Proof.context ->
         string list ->
           term list ->
             term list ->
               ({context: Proof.context, prems: thm list} -> tactic) ->
                 thm list
    val recursor:
       (string -> 'a) * ('a -> bool list) * string list ->
         bool ->
           (typ -> 'b) ->
             (typ -> 'b) ->
               (typ -> 'b) ->
                 ((typ * 'b option) list * 'a -> 'b) -> typ -> 'b
    val rename_types: (typ * typ) list -> term -> term
    val split_IHs:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list -> thm list -> thm list list
    val std_recursor_tac:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list ->
           ('a -> thm) ->
             thm list -> typ -> thm list -> Proof.context -> tactic
    val sub: string -> string
    val subT: string -> typ -> string
    val typ_and_vs_of_typname:
       theory -> string -> sort -> typ * (string * sort) list
    val typ_and_vs_of_used_typname:
       string ->
         bool list -> string list -> typ * (string * string list) list
    val type_parameters:
       typ -> Proof.context -> (string * sort) list * typ list
  end
structure Generator_Aux: GENERATOR_AUX
### theory "Deriving.Generator_Aux"
### 0.153s elapsed time, 0.631s cpu time, 0.036s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Parser_MonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Function_Algebras"
### 0.156s elapsed time, 0.642s cpu time, 0.036s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Parser_MonadMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Monad_Syntax"
### 0.036s elapsed time, 0.144s cpu time, 0.000s GC time
Loading theory "Draft.Error_Monad" (required by "Draft.Parser_MonadMoreTemplates" via "Draft.Parser_Monad")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.216s elapsed time, 0.848s cpu time, 0.089s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Parser_MonadMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.356s elapsed time, 1.396s cpu time, 0.125s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Parser_MonadMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size_list size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size_list size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "Draft.Error_Monad"
### 1.224s elapsed time, 4.619s cpu time, 0.941s GC time
Loading theory "Show.Show" (required by "Draft.Parser_MonadMoreTemplates" via "Draft.Parser_Monad")
### theory "HOL-Library.BigO"
### 1.030s elapsed time, 3.851s cpu time, 0.851s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.137s elapsed time, 4.146s cpu time, 0.940s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class show = type +
  fixes shows_prec :: "nat => 'a => char list => char list"
    and shows_list :: "'a list => char list => char list"
  assumes
    "shows_prec_append":
      "!!p x r s. shows_prec p x (r @ s) = shows_prec p x r @ s"
    and
    "shows_list_append":
      "!!xs r s. shows_list xs (r @ s) = shows_list xs r @ s"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  char :: show
  shows_prec_char == shows_prec :: nat => char => char list => char list
  shows_list_char == shows_list :: char list => char list => char list
signature SHOW_GENERATOR =
  sig
    val generate_showsp: string -> local_theory -> local_theory
    val register_foreign_partial_and_full_showsp:
       string ->
         int ->
           term ->
             term ->
               thm option ->
                 term ->
                   thm option ->
                     bool list -> thm -> local_theory -> local_theory
    val register_foreign_showsp:
       typ -> term -> thm -> local_theory -> local_theory
    val show_instance: string -> theory -> theory
  end
structure Show_Generator: SHOW_GENERATOR
Found termination order: "size <*mlex*> {}"
instantiation
  list :: (show) show
  shows_prec_list == shows_prec :: nat => 'a list => char list => char list
  shows_list_list == shows_list :: 'a list list => char list => char list
instantiation
  String.literal :: show
  shows_prec_literal == shows_prec ::
    nat => String.literal => char list => char list
  shows_list_literal == shows_list ::
    String.literal list => char list => char list
### theory "Show.Show"
### 0.752s elapsed time, 1.778s cpu time, 0.217s GC time
Loading theory "Draft.Parser_Monad" (required by "Draft.Parser_MonadMoreTemplates")
### theory "HOL-Library.Tree"
### 2.060s elapsed time, 6.584s cpu time, 1.157s GC time
Loading theory "Draft.Templates" (required by "Draft.Parser_MonadMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.168s cpu time, 0.044s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Parser_MonadMoreTemplates")
Found termination order: "{}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (size_list size) (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.549s elapsed time, 1.162s cpu time, 0.118s GC time
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Parser_Monad"
### 0.751s elapsed time, 1.546s cpu time, 0.162s GC time
Loading theory "Draft.Parser_MonadMoreTemplates"
val templateLemmas =
   [("Parser_Monad.is_parser_error", "is_parser (Parser_Monad.error ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Parser_Monad.is_parser_return", "is_parser (Parser_Monad.return ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Parser_Monad.is_parser_exactly", "is_parser (exactly ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Parser_Monad.is_parser_many", "is_parser (many ?P)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Parser_Monad.is_parser_manyof", "is_parser (manyof ?cs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Parser_Monad.is_parser_oneof", "is_parser (oneof ?ts)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Parser_Monad.is_parser_scan_upto", "is_parser (scan_upto ?end)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Parser_Monad.is_cparser_scan_upto",
     "is_cparser (scan_upto (?e # ?end))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("Parser_Monad.trim", "EX w. ?s = w @ trim ?s",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Parser_Monad.is_cparser_exactly",
     "1 <= length ?xs ==> is_cparser (exactly ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_hole 3,
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Parser_Monad.is_parser_Let",
     "is_parser (?f ?y) ==> is_parser (Let ?y ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_var 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0), t_empty))
           ))),
    ("Parser_Monad.is_cparser_oneof",
     "ALL x:set ?ts. 1 <= length x ==> is_cparser (oneof ?ts)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Parser_Monad.is_parser_If",
     "[| is_parser ?p; is_parser ?q |]
      ==> is_parser (if ?b then ?p else ?q)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("Parser_Monad.is_parser_bind",
     "[| is_parser ?p; !!x. is_parser (?q x) |] ==> is_parser (?p >>= ?q)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Parser_Monad.exactly_length",
     "exactly ?x ?s = Inr (?y, ?r) ==> length ?x + length ?r <= length ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 2)))),
    ("Parser_Monad.scan_upto_length",
     "scan_upto ?end ?s = Inr (?y, ?r) ==>
      length ?end + length ?r <= length ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 2)))),
    ("Parser_Monad.is_cparser_length",
     "[| is_cparser ?p; ?p ?s = Inr (?x, ?r) |] ==> length ?r < length ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_equation
         (template_app (template_var 3, template_var 2),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("Parser_Monad.is_parser_length",
     "[| is_parser ?p; ?p ?s = Inr (?x, ?r) |] ==> length ?r <= length ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_equation
         (template_app (template_var 3, template_var 2),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("Parser_Monad.exactly_result",
     "exactly ?x ?s = Inr (?y, ?r) ==> EX w. ?s = ?x @ w @ ?r & ?y = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 3), template_var 2),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Parser_Monad.oneof_length",
     "oneof ?xs ?s = Inr (?y, ?r) ==>
      length ?y + length ?r <= length ?s & ?y : set ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 3), template_var 2),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 1)),
                     template_app (template_hole 2, template_var 0))),
                 template_app (template_hole 2, template_var 2))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 3)))
           ))),
    ("Parser_Monad.oneof_result",
     "oneof ?xs ?s = Inr (?y, ?r) ==>
      EX w. ?s = ?y @ w @ ?r & ?y : set ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 3), template_var 2),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Parser_Monad.is_cparserI",
     "(!!s r x. ?p s = Inr (x, r) ==> length r < length s) ==>
      is_cparser ?p",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Parser_Monad.is_parserI",
     "(!!s r x. ?p s = Inr (x, r) ==> length r <= length s) ==>
      is_parser ?p",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Parser_Monad.is_cparserE",
     "[| is_cparser ?p;
         (!!s r x. ?p s = Inr (x, r) ==> length r < length s) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_implication
         ([template_predicate (template_app (template_hole 6, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Parser_Monad.is_parserE",
     "[| is_parser ?p;
         (!!s r x. ?p s = Inr (x, r) ==> length r <= length s) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_implication
         ([template_predicate (template_app (template_hole 6, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Parser_Monad.bind_cong",
     "[| ?m1.0 ?ts2.0 = ?m2.0 ?ts2.0;
         !!y ts. ?m2.0 ?ts2.0 = Inr (y, ts) ==> ?f1.0 y ts = ?f2.0 y ts;
         ?ts1.0 = ?ts2.0 |]
      ==> (?m1.0 >>= ?f1.0) ?ts1.0 = (?m2.0 >>= ?f2.0) ?ts2.0",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_var 3, template_var 4)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_equation (template_var 0, template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 4))))]:
   (string * thm * template) list
### theory "Draft.Parser_MonadMoreTemplates"
### 0.329s elapsed time, 0.472s cpu time, 0.068s GC time
val it = (): unit
