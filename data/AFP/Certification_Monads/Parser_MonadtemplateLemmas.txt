   [("Parser_Monad.is_parser_error", "is_parser (Parser_Monad.error ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Parser_Monad.is_parser_return", "is_parser (Parser_Monad.return ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Parser_Monad.is_parser_exactly", "is_parser (exactly ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Parser_Monad.is_parser_many", "is_parser (many ?P)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Parser_Monad.is_parser_manyof", "is_parser (manyof ?cs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Parser_Monad.is_parser_oneof", "is_parser (oneof ?ts)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Parser_Monad.is_parser_scan_upto", "is_parser (scan_upto ?end)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Parser_Monad.is_cparser_scan_upto",
     "is_cparser (scan_upto (?e # ?end))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("Parser_Monad.trim", "EX w. ?s = w @ trim ?s",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Parser_Monad.is_cparser_exactly",
     "1 <= length ?xs ==> is_cparser (exactly ?xs)",
     template_implication
      ([template_inequation
         (less_equals, template_hole 3,
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Parser_Monad.is_parser_Let",
     "is_parser (?f ?y) ==> is_parser (Let ?y ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_var 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0), t_empty))
           ))),
    ("Parser_Monad.is_cparser_oneof",
     "ALL x:set ?ts. 1 <= length x ==> is_cparser (oneof ?ts)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Parser_Monad.is_parser_If",
     "[| is_parser ?p; is_parser ?q |]
      ==> is_parser (if ?b then ?p else ?q)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("Parser_Monad.is_parser_bind",
     "[| is_parser ?p; !!x. is_parser (?q x) |] ==> is_parser (?p >>= ?q)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Parser_Monad.exactly_length",
     "exactly ?x ?s = Inr (?y, ?r) ==> length ?x + length ?r <= length ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 2)))),
    ("Parser_Monad.scan_upto_length",
     "scan_upto ?end ?s = Inr (?y, ?r) ==>
      length ?end + length ?r <= length ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 3)),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 2)))),
    ("Parser_Monad.is_cparser_length",
     "[| is_cparser ?p; ?p ?s = Inr (?x, ?r) |] ==> length ?r < length ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_equation
         (template_app (template_var 3, template_var 2),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_inequation
        (less_than, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("Parser_Monad.is_parser_length",
     "[| is_parser ?p; ?p ?s = Inr (?x, ?r) |] ==> length ?r <= length ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_equation
         (template_app (template_var 3, template_var 2),
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 2)))),
    ("Parser_Monad.exactly_result",
     "exactly ?x ?s = Inr (?y, ?r) ==> EX w. ?s = ?x @ w @ ?r & ?y = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 3), template_var 2),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Parser_Monad.oneof_length",
     "oneof ?xs ?s = Inr (?y, ?r) ==>
      length ?y + length ?r <= length ?s & ?y : set ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 3), template_var 2),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 1)),
                     template_app (template_hole 2, template_var 0))),
                 template_app (template_hole 2, template_var 2))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 3)))
           ))),
    ("Parser_Monad.oneof_result",
     "oneof ?xs ?s = Inr (?y, ?r) ==>
      EX w. ?s = ?y @ w @ ?r & ?y : set ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 3), template_var 2),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Parser_Monad.is_cparserI",
     "(!!s r x. ?p s = Inr (x, r) ==> length r < length s) ==>
      is_cparser ?p",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Parser_Monad.is_parserI",
     "(!!s r x. ?p s = Inr (x, r) ==> length r <= length s) ==>
      is_parser ?p",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Parser_Monad.is_cparserE",
     "[| is_cparser ?p;
         (!!s r x. ?p s = Inr (x, r) ==> length r < length s) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_implication
         ([template_predicate (template_app (template_hole 6, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Parser_Monad.is_parserE",
     "[| is_parser ?p;
         (!!s r x. ?p s = Inr (x, r) ==> length r <= length s) ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_implication
         ([template_predicate (template_app (template_hole 6, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Parser_Monad.bind_cong",
     "[| ?m1.0 ?ts2.0 = ?m2.0 ?ts2.0;
         !!y ts. ?m2.0 ?ts2.0 = Inr (y, ts) ==> ?f1.0 y ts = ?f2.0 y ts;
         ?ts1.0 = ?ts2.0 |]
      ==> (?m1.0 >>= ?f1.0) ?ts1.0 = (?m2.0 >>= ?f2.0) ?ts2.0",
     template_implication
      ([template_equation
         (template_app (template_var 5, template_var 4),
          template_app (template_var 3, template_var 4)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_equation (template_var 0, template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 4))))]
