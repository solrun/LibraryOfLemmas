Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Check_MonadMoreTemplates" via "Draft.Check_Monad" via "Draft.Error_Monad" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Check_MonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Check_MonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Check_MonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.094s elapsed time, 0.408s cpu time, 0.000s GC time
Loading theory "Draft.Error_Syntax" (required by "Draft.Check_MonadMoreTemplates" via "Draft.Check_Monad" via "Draft.Error_Monad")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Error_Syntax"
### 0.036s elapsed time, 0.130s cpu time, 0.042s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Check_MonadMoreTemplates" via "Draft.Check_Monad" via "Draft.Error_Monad")
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.597s cpu time, 0.042s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Check_MonadMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Monad_Syntax"
### 0.029s elapsed time, 0.115s cpu time, 0.000s GC time
Loading theory "Draft.Error_Monad" (required by "Draft.Check_MonadMoreTemplates" via "Draft.Check_Monad")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.235s elapsed time, 0.960s cpu time, 0.042s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Check_MonadMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.328s elapsed time, 1.312s cpu time, 0.138s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Check_MonadMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.032s elapsed time, 3.903s cpu time, 1.009s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "Draft.Error_Monad"
### 1.162s elapsed time, 4.384s cpu time, 1.009s GC time
Loading theory "Draft.Check_Monad" (required by "Draft.Check_MonadMoreTemplates")
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.079s elapsed time, 3.979s cpu time, 0.913s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Check_Monad"
### 0.300s elapsed time, 0.743s cpu time, 0.089s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.933s elapsed time, 5.705s cpu time, 1.176s GC time
Loading theory "Draft.Templates" (required by "Draft.Check_MonadMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.111s cpu time, 0.048s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Check_MonadMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.430s elapsed time, 0.435s cpu time, 0.000s GC time
Loading theory "Draft.Check_MonadMoreTemplates"
val templateLemmas =
   [("Check_Monad.isOK_check", "isOK (check ?b ?e) = ?b",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Check_Monad.or_is_or", "isOK (or_ok ?a ?b) = isOK ?a | isOK ?b",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0))),
               template_app (template_hole 1, template_var 1))),
           template_app (template_hole 1, template_var 0))
         )),
    ("Check_Monad.isOK_check_same_set",
     "isOK (check_same_set ?xs ?ys) = (set ?xs = set ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Check_Monad.isOK_check_subseteq",
     "isOK (check_subseteq ?xs ?ys) = (set ?xs <= set ?ys)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Check_Monad.isOK_check_disjoint",
     "isOK (check_disjoint ?xs ?ys) = (set ?xs Int set ?ys = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Check_Monad.isOK_choice",
     "isOK (choice (?x # ?xs)) = (isOK ?x | isOK (choice ?xs))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))))),
    ("Check_Monad.isOK_check_catch",
     "isOK (try check ?b ?e catch ?f) = (?b | isOK (?f ?e))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_hole 3,
           template_app (template_var 0, template_var 1))))),
    ("Check_Monad.check_return",
     "(check_return ?chk ?res = Inr ?res') = (isOK ?chk & ?res' = ?res)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Check_Monad.isOK_check_all_combinations",
     "isOK (check_all_combinations ?c ?xs) =
      (ALL x:set ?xs. ALL y:set ?xs. isOK (?c x y))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Check_Monad.isOK_check_allm",
     "isOK (try forallM ?f ?xs catch (%x. Inl (snd x))) =
      (ALL x:set ?xs. isOK (?f x))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           t_empty)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Check_Monad.isOK_check_allm_gen_index",
     "isOK (check_allm_gen_index ?g ?f ?n ?xs) ==>
      ALL x:set ?xs. EX i. isOK (?f x i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             t_empty)
           ))),
    ("Check_Monad.foldl_error",
     "snd (foldl (%(i, m) x. (?g x i, m >>= (%_. ?f x i))) (?n, Inl ?e)
            ?xs) =
      Inl ?e",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 0, template_var 1))),
           template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Check_Monad.isOK_check_pairwise",
     "isOK (check_pairwise ?c ?xs) =
      (ALL j<length ?xs. ALL i<j. isOK (?c (?xs ! i) (?xs ! j)))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Check_Monad.isOK_check_all_index",
     "isOK
       (try forallM_index (%x i. if ?f x i then Inr () else Inl (x, i)) ?xs
        catch (%x. Inl (snd x))) =
      (ALL i<length ?xs. ?f (?xs ! i) i)",
     template_equation
      (template_app
        (template_hole 13,
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 11, t_empty), template_var 0)),
           t_empty)),
       template_app (template_hole 4, t_empty))),
    ("Check_Monad.check_allm_gen_index",
     "[| !!x n. x : set ?xs ==> ?g x n = ?g' x n;
         !!x n. x : set ?xs ==> ?f x n = ?f' x n |]
      ==> check_allm_gen_index ?g ?f ?n ?xs =
          check_allm_gen_index ?g' ?f' ?n ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             template_var 0),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0),
           template_var 5)))),
    ("Check_Monad.pairwise_aux",
     "(ALL j<length (?x # ?xs).
          ALL i<j. ?P ((?x # ?xs) ! i) ((?x # ?xs) ! j)) =
      ((ALL j<length ?xs. ?P ?x (?xs ! j)) &
       (ALL j<length ?xs. ALL i<j. ?P (?xs ! i) (?xs ! j)))",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 6, t_empty)),
         template_app (template_hole 6, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Check_MonadMoreTemplates"
### 0.313s elapsed time, 0.432s cpu time, 0.058s GC time
val it = (): unit
