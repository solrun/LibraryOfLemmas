Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Strict_SumMoreTemplates" via "Draft.Strict_Sum" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Strict_SumMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Strict_SumMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Strict_SumMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.109s elapsed time, 0.448s cpu time, 0.035s GC time
Loading theory "Draft.Error_Syntax" (required by "Draft.Strict_SumMoreTemplates" via "Draft.Strict_Sum")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.529s cpu time, 0.035s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Strict_SumMoreTemplates" via "Draft.Strict_Sum")
### theory "Draft.Error_Syntax"
### 0.027s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Strict_SumMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Monad_Syntax"
### 0.031s elapsed time, 0.126s cpu time, 0.000s GC time
Loading theory "Partial_Function_MR.Partial_Function_MR" (required by "Draft.Strict_SumMoreTemplates" via "Draft.Strict_Sum")
### theory "HOL-Library.Set_Algebras"
### 0.202s elapsed time, 0.822s cpu time, 0.035s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Strict_SumMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
signature PARTIAL_FUNCTION_MR =
  sig
    val add_partial_function_mr:
       string ->
         (binding * typ option * mixfix) list ->
           Specification.multi_specs ->
             local_theory -> thm list * local_theory
    val add_partial_function_mr_cmd:
       string ->
         (binding * string option * mixfix) list ->
           Specification.multi_specs_cmd ->
             local_theory -> thm list * local_theory
    val init:
       string ->
         (term * term list * typ * typ * typ list -> term) ->
           (typ list * typ list -> typ) ->
             (typ -> typ list * typ list) ->
               thm list -> thm list -> declaration
  end
structure Partial_Function_MR: PARTIAL_FUNCTION_MR
### theory "Partial_Function_MR.Partial_Function_MR"
### 0.159s elapsed time, 0.622s cpu time, 0.081s GC time
Loading theory "Draft.Strict_Sum" (required by "Draft.Strict_SumMoreTemplates")
### theory "HOL-Library.Nat_Bijection"
### 0.333s elapsed time, 1.323s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Strict_SumMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.014s elapsed time, 3.827s cpu time, 0.847s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "{}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.066s elapsed time, 3.889s cpu time, 0.809s GC time
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Strict_Sum"
### 1.317s elapsed time, 4.478s cpu time, 0.883s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.978s elapsed time, 5.733s cpu time, 1.034s GC time
Loading theory "Draft.Templates" (required by "Draft.Strict_SumMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.105s cpu time, 0.042s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Strict_SumMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.430s elapsed time, 0.435s cpu time, 0.000s GC time
Loading theory "Draft.Strict_SumMoreTemplates"
val templateLemmas =
   [("Strict_Sum.sum_bot_const_mono",
     "monotone sum_bot.le_fun sum_bot_ord (%f. ?c)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app (template_hole 1, template_hole 0)),
           t_empty)
         )),
    ("Strict_Sum.sum_bot_map_mono",
     "monotone sum_bot.le_fun sum_bot_ord ?B ==>
      monotone sum_bot.le_fun sum_bot_ord (%f. sum_bot_map ?h (?B f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_hole 6))),
                template_app (template_hole 5, template_hole 4)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_app (template_hole 2, template_hole 1)),
             t_empty)
           ))),
    ("Strict_Sum.map_sum_bot_cong",
     "[| ?xs = ?ys; !!x. x : set ?ys ==> ?f x = ?g x |]
      ==> map_sum_bot ?f ?xs = map_sum_bot ?g ?ys",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Strict_Sum.bind_cong",
     "[| ?xs = ?ys; !!x. ?ys = sum_bot.Right x ==> ?f x = ?g x |]
      ==> ?xs >>= ?f = ?ys >>= ?g",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Strict_Sum.map_sum_bot_mono",
     "(!!y. y : set ?B ==> monotone sum_bot.le_fun sum_bot_ord (?C y)) ==>
      monotone sum_bot.le_fun sum_bot_ord
       (%f. map_sum_bot (%y. ?C y f) ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_app (template_hole 2, template_hole 1)),
             t_empty)
           ))),
    ("Strict_Sum.catch_mono",
     "[| monotone sum_bot.le_fun sum_bot_ord ?B;
         !!y. monotone sum_bot.le_fun sum_bot_ord (?C y) |]
      ==> monotone sum_bot.le_fun sum_bot_ord
           (%f. try ?B f catch (%y. ?C y f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_hole 7))),
                template_app (template_hole 6, template_hole 5)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_hole 7))),
               template_app (template_hole 2, template_hole 1)),
             t_empty)
           ))),
    ("Strict_Sum.bind_mono",
     "[| monotone sum_bot.le_fun sum_bot_ord ?B;
         !!y. monotone sum_bot.le_fun sum_bot_ord (?C y) |]
      ==> monotone sum_bot.le_fun sum_bot_ord (%f. ?B f >>= (%y. ?C y f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_hole 7))),
                template_app (template_hole 6, template_hole 5)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_hole 7))),
               template_app (template_hole 2, template_hole 1)),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.Strict_SumMoreTemplates"
### 0.327s elapsed time, 0.471s cpu time, 0.058s GC time
val it = (): unit
