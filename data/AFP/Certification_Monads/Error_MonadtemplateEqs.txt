   [("Error_Monad.isOK_error", "isOK (Inl ?x) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Error_Monad.bind_return", "?m >>= Inr = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Error_Monad.error_bind", "Inl ?e >>= ?f = Inl ?e",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Error_Monad.return_bind", "Inr ?x >>= ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Error_Monad.catch_error", "(try Inl ?e catch ?f) = ?f ?e",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Error_Monad.catch_return", "(try Inr ?x catch ?f) = Inr ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Error_Monad.isOK_Let", "isOK (Let ?s ?f) = isOK (?f ?s)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_hole 1, template_app (template_var 0, template_var 1)))),
    ("Error_Monad.isOK_iff", "isOK ?m = (EX x. ?m = Inr x)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Error_Monad.isOK_update_error",
     "isOK (try ?m catch (%x. Inl (?f x))) = isOK ?m",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), t_empty)),
       template_app (template_hole 0, template_var 1))),
    ("Error_Monad.isOK_if_error",
     "isOK (if ?b then ?m else Inl ?e) = (?b & isOK ?m)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 3, template_var 1)))),
    ("Error_Monad.is_OK_if_return",
     "isOK (if ?b then Inr ?x else ?m) = (?b | isOK ?m)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 3, template_var 0)))),
    ("Error_Monad.isOK_bind",
     "isOK (?m >>= ?f) = (isOK ?m & isOK (?f (projr ?m)))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_var 0,
             template_app (template_hole 0, template_var 1)))))),
    ("Error_Monad.firstM",
     "isOK (firstM ?f ?xs) = (EX x:set ?xs. isOK (?f x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Error_Monad.isOK_existsM",
     "isOK (existsM ?f ?xs) = (EX x:set ?xs. isOK (?f x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Error_Monad.isOK_forallM",
     "isOK (forallM ?f ?xs) = (ALL x:set ?xs. isOK (?f x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Error_Monad.is_OK_if_return",
     "isOK (if ?b then ?m else Inr ?x) = (~ ?b | isOK ?m)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app (template_hole 4, template_var 1)))),
    ("Error_Monad.isOK_if_error",
     "isOK (if ?b then Inl ?e else ?m) = (~ ?b & isOK ?m)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app (template_hole 4, template_var 0)))),
    ("Error_Monad.bind_assoc",
     "?m >>= ?f >>= ?g = ?m >>= (%x. ?f x >>= ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Error_Monad.update_error_return",
     "((try ?m catch (%x. Inl (?c x))) = Inr ?x) = (?m = Inr ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), t_empty),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_var 2, template_app (template_hole 0, template_var 0)))),
    ("Error_Monad.then_return_eq",
     "(?p >>= (%_. ?q) = Inr ?f) = (isOK ?p & ?q = Inr ?f)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), t_empty),
         template_app (template_hole 2, template_var 0)),
       template_dunno)),
    ("Error_Monad.isOK_if",
     "isOK (if ?b then ?x else ?y) = (?b & isOK ?x | ~ ?b & isOK ?y)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app (template_hole 4, template_var 0))))),
    ("Error_Monad.isOK_case_option",
     "isOK (case ?x of None => ?P | Some v => ?Q v) =
      (case ?x of None => isOK ?P | Some v => isOK (?Q v))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2), t_empty),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 2)),
           t_empty),
         template_var 0))),
    ("Error_Monad.isOK_case_prod",
     "isOK (case ?lr of (l, r) => ?P l r) =
      (case ?lr of (l, r) => isOK (?P l r))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Error_Monad.isOK_forallM_index",
     "isOK (forallM_index ?P ?xs) =
      (ALL i<length ?xs. isOK (?P (?xs ! i) i))",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Error_Monad.mapM_error",
     "(EX e. mapM ?f ?xs = Inl e) = (EX x:set ?xs. EX e. ?f x = Inl e)",
     template_equation
      (template_app (template_hole 7, t_empty),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         t_empty))),
    ("Error_Monad.isOK_forallM_index_aux",
     "isOK (??.Error_Monad.forallM_index_aux ?P ?n ?xs) =
      (ALL i<length ?xs. isOK (?P (?xs ! i) (i + ?n)))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Error_Monad.catch_splits",
     "?P (try ?m catch ?f) =
      ((ALL e. ?m = Inl e --> ?P (?f e)) &
       (ALL x. ?m = Inr x --> ?P (Inr x)))",
     template_equation
      (template_app
        (template_var 2,
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Error_Monad.catch_splits",
     "?P (try ?m catch ?f) =
      (~ ((EX e. ?m = Inl e & ~ ?P (?f e)) |
          (EX x. ?m = Inr x & ~ ?P (Inr x))))",
     template_equation
      (template_app
        (template_var 2,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app (template_hole 2, t_empty)))))]
