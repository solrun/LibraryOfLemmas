   [("Check_Monad.isOK_check", "isOK (check ?b ?e) = ?b",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Check_Monad.isOK_check_same_set",
     "isOK (check_same_set ?xs ?ys) = (set ?xs = set ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Check_Monad.isOK_check_subseteq",
     "isOK (check_subseteq ?xs ?ys) = (set ?xs <= set ?ys)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Check_Monad.isOK_check_disjoint",
     "isOK (check_disjoint ?xs ?ys) = (set ?xs Int set ?ys = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Check_Monad.isOK_choice",
     "isOK (choice (?x # ?xs)) = (isOK ?x | isOK (choice ?xs))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))))),
    ("Check_Monad.isOK_check_catch",
     "isOK (try check ?b ?e catch ?f) = (?b | isOK (?f ?e))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_hole 3,
           template_app (template_var 0, template_var 1))))),
    ("Check_Monad.check_return",
     "(check_return ?chk ?res = Inr ?res') = (isOK ?chk & ?res' = ?res)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_dunno)),
    ("Check_Monad.isOK_check_all_combinations",
     "isOK (check_all_combinations ?c ?xs) =
      (ALL x:set ?xs. ALL y:set ?xs. isOK (?c x y))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Check_Monad.isOK_check_allm",
     "isOK (try forallM ?f ?xs catch (%x. Inl (snd x))) =
      (ALL x:set ?xs. isOK (?f x))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           t_empty)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Check_Monad.foldl_error",
     "snd (foldl (%(i, m) x. (?g x i, m >>= (%_. ?f x i))) (?n, Inl ?e)
            ?xs) =
      Inl ?e",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app (template_hole 0, template_var 1))),
           template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Check_Monad.isOK_check_pairwise",
     "isOK (check_pairwise ?c ?xs) =
      (ALL j<length ?xs. ALL i<j. isOK (?c (?xs ! i) (?xs ! j)))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Check_Monad.isOK_check_all_index",
     "isOK
       (try forallM_index (%x i. if ?f x i then Inr () else Inl (x, i)) ?xs
        catch (%x. Inl (snd x))) =
      (ALL i<length ?xs. ?f (?xs ! i) i)",
     template_equation
      (template_app
        (template_hole 13,
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 11, t_empty), template_var 0)),
           t_empty)),
       template_app (template_hole 4, t_empty))),
    ("Check_Monad.pairwise_aux",
     "(ALL j<length (?x # ?xs).
          ALL i<j. ?P ((?x # ?xs) ! i) ((?x # ?xs) ! j)) =
      ((ALL j<length ?xs. ?P ?x (?xs ! j)) &
       (ALL j<length ?xs. ALL i<j. ?P (?xs ! i) (?xs ! j)))",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 6, t_empty)),
         template_app (template_hole 6, t_empty))))]
