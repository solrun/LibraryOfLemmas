Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Error_MonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Error_MonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Error_MonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.126s elapsed time, 0.521s cpu time, 0.036s GC time
Loading theory "Draft.Error_Syntax" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.606s cpu time, 0.036s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad")
### theory "Draft.Error_Syntax"
### 0.031s elapsed time, 0.127s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Error_MonadMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Monad_Syntax"
### 0.042s elapsed time, 0.163s cpu time, 0.000s GC time
Loading theory "Draft.Error_Monad" (required by "Draft.Error_MonadMoreTemplates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.263s elapsed time, 1.063s cpu time, 0.036s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Error_MonadMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.414s elapsed time, 1.655s cpu time, 0.109s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Error_MonadMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size_list size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.023s elapsed time, 3.852s cpu time, 0.857s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Error_Monad"
### 1.141s elapsed time, 4.301s cpu time, 0.857s GC time
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.080s elapsed time, 3.738s cpu time, 0.784s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.919s elapsed time, 5.451s cpu time, 0.970s GC time
Loading theory "Draft.Templates" (required by "Draft.Error_MonadMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Error_MonadMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.469s elapsed time, 0.523s cpu time, 0.067s GC time
Loading theory "Draft.Error_MonadMoreTemplates"
val templateLemmas =
   [("Error_Monad.isOK_error", "isOK (Inl ?x) = False",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Error_Monad.bind_return", "?m >>= Inr = ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Error_Monad.error_bind", "Inl ?e >>= ?f = Inl ?e",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Error_Monad.return_bind", "Inr ?x >>= ?f = ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Error_Monad.catch_error", "(try Inl ?e catch ?f) = ?f ?e",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app (template_var 0, template_var 1))),
    ("Error_Monad.catch_return", "(try Inr ?x catch ?f) = Inr ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Error_Monad.isOK_Let", "isOK (Let ?s ?f) = isOK (?f ?s)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_hole 1, template_app (template_var 0, template_var 1)))),
    ("Error_Monad.isOK_I", "?m = Inr ?x ==> isOK ?m",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Error_Monad.isOK_iff", "isOK ?m = (EX x. ?m = Inr x)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Error_Monad.isOK_update_error",
     "isOK (try ?m catch (%x. Inl (?f x))) = isOK ?m",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), t_empty)),
       template_app (template_hole 0, template_var 1))),
    ("Error_Monad.isOK_if_error",
     "isOK (if ?b then ?m else Inl ?e) = (?b & isOK ?m)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 3, template_var 1)))),
    ("Error_Monad.is_OK_if_return",
     "isOK (if ?b then Inr ?x else ?m) = (?b | isOK ?m)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 3, template_var 0)))),
    ("Error_Monad.run_catch",
     "isOK ?m ==> projr (try ?m catch ?f) = projr ?m",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Error_Monad.isOK_bind",
     "isOK (?m >>= ?f) = (isOK ?m & isOK (?f (projr ?m)))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_var 0,
             template_app (template_hole 0, template_var 1)))))),
    ("Error_Monad.firstM",
     "isOK (firstM ?f ?xs) = (EX x:set ?xs. isOK (?f x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Error_Monad.isOK_existsM",
     "isOK (existsM ?f ?xs) = (EX x:set ?xs. isOK (?f x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Error_Monad.isOK_forallM",
     "isOK (forallM ?f ?xs) = (ALL x:set ?xs. isOK (?f x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         t_empty))),
    ("Error_Monad.is_OK_if_return",
     "isOK (if ?b then ?m else Inr ?x) = (~ ?b | isOK ?m)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app (template_hole 4, template_var 1)))),
    ("Error_Monad.isOK_if_error",
     "isOK (if ?b then Inl ?e else ?m) = (~ ?b & isOK ?m)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app (template_hole 4, template_var 0)))),
    ("Error_Monad.bind_assoc",
     "?m >>= ?f >>= ?g = ?m >>= (%x. ?f x >>= ?g)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("Error_Monad.run_bind",
     "isOK ?m ==> projr (?m >>= ?f) = projr (?f (projr ?m))",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_var 0,
             template_app (template_hole 0, template_var 1)))))),
    ("Error_Monad.update_error_return",
     "((try ?m catch (%x. Inl (?c x))) = Inr ?x) = (?m = Inr ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2), t_empty),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_var 2, template_app (template_hole 0, template_var 0)))),
    ("Error_Monad.then_return_eq",
     "(?p >>= (%_. ?q) = Inr ?f) = (isOK ?p & ?q = Inr ?f)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), t_empty),
         template_app (template_hole 2, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app (template_hole 2, template_var 0)))
           ))),
    ("Error_Monad.isOK_if",
     "isOK (if ?b then ?x else ?y) = (?b & isOK ?x | ~ ?b & isOK ?y)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app (template_hole 4, template_var 0))))),
    ("Error_Monad.isOK_case_option",
     "isOK (case ?x of None => ?P | Some v => ?Q v) =
      (case ?x of None => isOK ?P | Some v => isOK (?Q v))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2), t_empty),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 2)),
           t_empty),
         template_var 0))),
    ("Error_Monad.firstM_return",
     "firstM ?f ?xs = Inr ?y ==> isOK (?f ?y) & ?y : set ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_var 2, template_var 0))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Error_Monad.isOK_E",
     "[| isOK ?m; !!x. ?m = Inr x ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Error_Monad.isOK_case_prod",
     "isOK (case ?lr of (l, r) => ?P l r) =
      (case ?lr of (l, r) => isOK (?P l r))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Error_Monad.isOK_forallM_index",
     "isOK (forallM_index ?P ?xs) =
      (ALL i<length ?xs. isOK (?P (?xs ! i) i))",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Error_Monad.mapM_error",
     "(EX e. mapM ?f ?xs = Inl e) = (EX x:set ?xs. EX e. ?f x = Inl e)",
     template_equation
      (template_app (template_hole 7, t_empty),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         t_empty))),
    ("Error_Monad.isOK_forallM_index_aux",
     "isOK (??.Error_Monad.forallM_index_aux ?P ?n ?xs) =
      (ALL i<length ?xs. isOK (?P (?xs ! i) (i + ?n)))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Error_Monad.catch_splits",
     "?P (try ?m catch ?f) =
      ((ALL e. ?m = Inl e --> ?P (?f e)) &
       (ALL x. ?m = Inr x --> ?P (Inr x)))",
     template_equation
      (template_app
        (template_var 2,
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Error_Monad.forallM_index",
     "(!!x i. x : set ?xs ==> ?c x i = ?d x i) ==>
      forallM_index ?c ?xs = forallM_index ?d ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Error_Monad.mapM_cong",
     "[| ?xs = ?ys; !!x. x : set ?ys ==> ?f x = ?g x |]
      ==> mapM ?f ?xs = mapM ?g ?ys",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Error_Monad.bind_cong",
     "[| ?m1.0 = ?m2.0; !!y. ?m2.0 = Inr y ==> ?f1.0 y = ?f2.0 y |]
      ==> ?m1.0 >>= ?f1.0 = ?m2.0 >>= ?f2.0",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Error_Monad.bindE",
     "[| ?p >>= ?f = Inr ?x;
         !!y. [| ?p = Inr y; ?f y = Inr ?x |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Error_Monad.isOK_mapM",
     "isOK (mapM ?f ?xs) ==>
      (ALL x. x : set ?xs --> isOK (?f x)) &
      projr (mapM ?f ?xs) = map (%x. projr (?f x)) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9, template_app (template_hole 8, t_empty)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 10, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 1, t_empty), template_var 0)))
           ))),
    ("Error_Monad.mapM_return",
     "mapM ?f ?xs = Inr ?ys ==>
      ?ys = map (projr o ?f) ?xs & (ALL x:set ?xs. ALL e. ?f x ~= Inl e)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 12, template_var 2),
            template_var 1),
          template_app (template_hole 11, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 0),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_var 2)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               t_empty))
           ))),
    ("Error_Monad.catch_splits",
     "?P (try ?m catch ?f) =
      (~ ((EX e. ?m = Inl e & ~ ?P (?f e)) |
          (EX x. ?m = Inr x & ~ ?P (Inr x))))",
     template_equation
      (template_app
        (template_var 2,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app (template_hole 2, t_empty))))),
    ("Error_Monad.mapM_return_idx",
     "[| mapM ?f ?xs = Inr ?ys; ?i < length ?xs |]
      ==> EX y. ?f (?xs ! ?i) = Inr y & ?ys ! ?i = y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 3),
            template_var 2),
          template_app (template_hole 9, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 7, template_var 2))],
       template_predicate (template_app (template_hole 6, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Error_MonadMoreTemplates"
### 0.319s elapsed time, 0.438s cpu time, 0.038s GC time
val it = (): unit
