Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Bit_StringsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Bit_Strings" (required by "Draft.Bit_StringsTemplates")
Loading theory "Draft.Templates" (required by "Draft.Bit_StringsTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.087s elapsed time, 0.288s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.106s elapsed time, 0.327s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Bit_StringsTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Bit_Strings"
### 0.161s elapsed time, 0.448s cpu time, 0.042s GC time
### theory "HOL-Library.BigO"
### 0.610s elapsed time, 0.720s cpu time, 0.113s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Bit_StringsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.434s elapsed time, 0.435s cpu time, 0.000s GC time
Loading theory "Draft.Bit_StringsTemplates"
val templateLemmas =
   [("Bit_Strings.witness_length", "length (witness ?X ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Bit_Strings.bitstrings_finite", "finite {xs. length xs = ?m}",
     template_predicate
      (
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))
         )),
    ("Bit_Strings.iswitness", "?r < ?n ==> witness ?X ?n ! ?r = (?r : ?X)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Bit_Strings.fbool",
     "finite
       {xs.
        (ALL i:?X. xs ! i) &
        (ALL i:?Y. ~ xs ! i) & length xs = ?m & ?f (xs ! ?e)}",
     template_predicate
      (
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))
         )),
    ("Bit_Strings.card2",
     "[| finite ?X; finite ?Y; ?X Int ?Y = {}; ?X Un ?Y <= {0..<?m} |]
      ==> card
           {xs.
            (ALL i:?X. xs ! i) & (ALL i:?Y. ~ xs ! i) & length xs = ?m} =
          2 ^ (?m - card ?X - card ?Y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 2)),
        template_predicate
         (template_app (template_hole 21, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 19, template_var 2),
            template_var 1),
          template_hole 18),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 16, template_var 2),
            template_var 1),
          template_app
           (template_app (template_hole 15, template_hole 14),
            template_var 0))],
       template_equation
        (template_app
          (template_hole 12, template_app (template_hole 11, t_empty)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 2))),
             template_app (template_hole 0, template_var 1)))))),
    ("Bit_Strings.card1",
     "[| finite ?S; finite ?X; finite ?Y; ?X Int ?Y = {};
         ?S Int (?X Un ?Y) = {}; ?S Un ?X Un ?Y = {0..<?m} |]
      ==> card
           {xs.
            (ALL i:?X. xs ! i) & (ALL i:?Y. ~ xs ! i) & length xs = ?m} =
          2 ^ (?m - card ?X - card ?Y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 3)),
        template_predicate
         (template_app (template_hole 20, template_var 2)),
        template_predicate
         (template_app (template_hole 20, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 2),
            template_var 1),
          template_hole 17),
        template_equation
         (template_app
           (template_app (template_hole 18, template_var 3),
            template_app
             (template_app (template_hole 16, template_var 2),
              template_var 1)),
          template_hole 17),
        template_equation
         (template_app
           (template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 16, template_var 3),
                template_var 2)),
            template_var 1),
          template_app
           (template_app (template_hole 15, template_hole 14),
            template_var 0))],
       template_equation
        (template_app
          (template_hole 12, template_app (template_hole 11, t_empty)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 2))),
             template_app (template_hole 0, template_var 1)))))),
    ("Bit_Strings.Expactation2or1",
     "[| finite ?S; finite ?Tr; finite ?Fa;
         card ?Tr + card ?Fa + card ?S <= ?l; ?S Int (?Tr Un ?Fa) = {};
         ?Tr Int ?Fa = {}; ?S Un ?Tr Un ?Fa <= {0..<?l} |]
      ==> (SUM x:{xs.
                  (ALL i:?Tr. xs ! i) &
                  (ALL i:?Fa. ~ xs ! i) & length xs = ?l}.
              SUM j:?S. if x ! j then 2 else 1) =
          3 / 2 * real (card ?S) * 2 ^ (?l - card ?Tr - card ?Fa)",
     template_implication
      ([template_predicate
         (template_app (template_hole 31, template_var 3)),
        template_predicate
         (template_app (template_hole 31, template_var 2)),
        template_predicate
         (template_app (template_hole 31, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 29,
              template_app
               (template_app
                 (template_hole 29,
                  template_app (template_hole 28, template_var 2)),
                template_app (template_hole 28, template_var 1))),
            template_app (template_hole 28, template_var 3)),
          template_var 0),
        template_equation
         (template_app
           (template_app (template_hole 26, template_var 3),
            template_app
             (template_app (template_hole 25, template_var 2),
              template_var 1)),
          template_hole 24),
        template_equation
         (template_app
           (template_app (template_hole 26, template_var 2),
            template_var 1),
          template_hole 24),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 25,
              template_app
               (template_app (template_hole 25, template_var 3),
                template_var 2)),
            template_var 1),
          template_app
           (template_app (template_hole 22, template_hole 21),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 19, t_empty),
           template_app (template_hole 11, t_empty)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 15,
                       template_app (template_hole 3, template_hole 13))),
                   template_app
                    (template_hole 15,
                     template_app (template_hole 14, template_hole 13)))),
               template_app
                (template_hole 2,
                 template_app (template_hole 28, template_var 3)))),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 15,
                 template_app (template_hole 14, template_hole 13))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app (template_hole 28, template_var 2))),
               template_app (template_hole 28, template_var 1)))))))]:
   (string * thm * template) list
### theory "Draft.Bit_StringsTemplates"
### 0.302s elapsed time, 0.441s cpu time, 0.069s GC time
val it = (): unit
