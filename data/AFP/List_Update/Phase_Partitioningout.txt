Loading theory "Draft.On_Off" (required by "Draft.Phase_PartitioningTemplates" via "Draft.Phase_Partitioning" via "Draft.OPT2" via "Draft.Partial_Cost_Model" via "Draft.Move_to_Front")
Loading theory "Draft.Prob_Theory" (required by "Draft.Phase_PartitioningTemplates" via "Draft.Phase_Partitioning" via "Draft.OPT2" via "Draft.Partial_Cost_Model" via "Draft.Move_to_Front" via "Draft.Competitive_Analysis")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Phase_PartitioningTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Phase_PartitioningTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
locale On_Off
  fixes step :: "'state => 'request => 'answer => 'state"
    and t :: "'state => 'request => 'answer => nat"
    and wf :: "'state => 'request list => bool"
### Missing patterns in function definition:
### !!a v va. T a (v # va) [] = undefined
### !!a v va. T a [] (v # va) = undefined
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.085s elapsed time, 0.377s cpu time, 0.000s GC time
Loading theory "Draft.Inversion" (required by "Draft.Phase_PartitioningTemplates" via "Draft.Phase_Partitioning" via "Draft.OPT2" via "Draft.Partial_Cost_Model" via "Draft.Move_to_Front" via "Draft.Swaps")
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.524s cpu time, 0.036s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Phase_PartitioningTemplates" via "Draft.ExtrEqs")
### theory "Draft.Inversion"
### 0.068s elapsed time, 0.259s cpu time, 0.036s GC time
Loading theory "Draft.Swaps" (required by "Draft.Phase_PartitioningTemplates" via "Draft.Phase_Partitioning" via "Draft.OPT2" via "Draft.Partial_Cost_Model" via "Draft.Move_to_Front")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Swaps"
### 0.095s elapsed time, 0.385s cpu time, 0.000s GC time
Loading theory "Draft.RExp_Var" (required by "Draft.Phase_PartitioningTemplates" via "Draft.Phase_Partitioning" via "Draft.OPT2")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Prob_Theory"
### 0.530s elapsed time, 2.086s cpu time, 0.178s GC time
[| finite ?A; !!a. [| a : set_pmf ?M; ?f a ~= (0::?'b) |] ==> a : ?A |]
==> measure_pmf.expectation ?M ?f = (SUM a:?A. pmf ?M a *\<^sub>R ?f a)
set_pmf ?p Int ?s ~= {} ==>
pmf (cond_pmf ?p ?s) ?x =
(if ?x : ?s then pmf ?p ?x / measure_pmf.prob ?p ?s else 0)
[| 0 < ?p1; ?p1 < 1 |]
==> pmf (cond_pmf
          (bernoulli_pmf ?p1 >>=
           (%b. if b then map_pmf Inl ?Da1 else map_pmf Inr ?Db1))
          {f. EX e. Inl e = f})
     ?x =
    (if ?x : {f. EX e. Inl e = f}
     then pmf (bernoulli_pmf ?p1 >>=
               (%b. if b then map_pmf Inl ?Da1 else map_pmf Inr ?Db1))
           ?x /
          measure_pmf.prob
           (bernoulli_pmf ?p1 >>=
            (%b. if b then map_pmf Inl ?Da1 else map_pmf Inr ?Db1))
           {f. EX e. Inl e = f}
     else 0)
"%a. case a of Inl e => Inl (fa e) | Inr e => Inr (fb e)"
  :: "'a + 'b => 'c + 'd"
"(>>=)"
  :: "'a pmf => ('a => 'b pmf) => 'b pmf"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### theory "Draft.On_Off"
### 0.662s elapsed time, 2.509s cpu time, 0.235s GC time
Loading theory "Draft.Competitive_Analysis" (required by "Draft.Phase_PartitioningTemplates" via "Draft.Phase_Partitioning" via "Draft.OPT2" via "Draft.Partial_Cost_Model" via "Draft.Move_to_Front")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.BigO"
### 0.719s elapsed time, 2.547s cpu time, 0.260s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Phase_PartitioningTemplates")
Found termination order: "size_list size <*mlex*> {}"
L (set ?rs) = lang (verund ?rs)
lang (subst (w2rexp (?xs @ ?ys)) ?\<sigma>) =
lang (subst (w2rexp ?xs) ?\<sigma>) @@ lang (subst (w2rexp ?ys) ?\<sigma>)
L (concS ?M1.0 ?M2.0) = L ?M1.0 @@ L ?M2.0
L (substL (lang ?E) ?\<sigma>) = lang (subst ?E ?\<sigma>)
check_eqv ?r ?s ==> lang ?r = lang ?s
Found termination order: "size_list size <*mlex*> {}"
check_eqv ?r ?s ==> lang ?r = lang ?s
check_eqv ?r ?s ==> lang ?r = lang ?s
locale On_Off
  fixes step :: "'state => 'request => 'answer => 'state"
    and t :: "'state => 'request => 'answer => nat"
    and wf :: "'state => 'request list => bool"
### Missing patterns in function definition:
### !!a v va. steps a (v # va) [] = undefined
### !!a v va. steps a [] (v # va) = undefined
check_eqv ?r ?s ==> lang ?r = lang ?s
check_eqv ?r ?s ==> lang ?r = lang ?s
### theory "Draft.RExp_Var"
### 0.990s elapsed time, 3.257s cpu time, 0.735s GC time
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.690s elapsed time, 1.823s cpu time, 0.516s GC time
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Competitive_Analysis"
### 1.207s elapsed time, 2.804s cpu time, 0.632s GC time
Loading theory "Draft.Move_to_Front" (required by "Draft.Phase_PartitioningTemplates" via "Draft.Phase_Partitioning" via "Draft.OPT2" via "Draft.Partial_Cost_Model")
?A Int set ?xs = set (filter (%x. x : ?A) ?xs)
locale MTF_Off
  fixes as :: "(nat * nat list) list"
    and rs :: "'a list"
    and s0 :: "'a list"
  assumes "MTF_Off as rs s0"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Move_to_Front"
### 2.833s elapsed time, 3.497s cpu time, 0.949s GC time
Loading theory "Draft.Partial_Cost_Model" (required by "Draft.Phase_PartitioningTemplates" via "Draft.Phase_Partitioning" via "Draft.OPT2")
### theory "Draft.Partial_Cost_Model"
### 0.599s elapsed time, 0.695s cpu time, 0.108s GC time
Loading theory "Draft.OPT2" (required by "Draft.Phase_PartitioningTemplates" via "Draft.Phase_Partitioning")
### Missing patterns in function definition:
### !!v vb vc. OPT2 (v # vb # vc) [] = undefined
### !!v vb vc va. OPT2 (v # vb # vc) [va] = undefined
### !!v vb vc va ve vg vh. OPT2 (v # vb # vc) (va # ve # vg # vh) = undefined
### (6 more)
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.OPT2"
### 0.925s elapsed time, 1.126s cpu time, 0.194s GC time
Loading theory "Draft.Phase_Partitioning" (required by "Draft.Phase_PartitioningTemplates")
Found termination order: "{}"
[| ?c : ?A Un ?B; ?c : ?A ==> ?P; ?c : ?B ==> ?P |] ==> ?P
[| ?c : ?A Un ?B; ?c : ?A ==> ?P; ?c : ?B ==> ?P |] ==> ?P
[| ?qs : Lxx ?x ?y; ?qs : lang (seq [Atom ?x, Atom ?x]) ==> ?P ?x ?y ?qs;
   ?qs
   : lang
      (seq [question (Atom ?x), Atom ?y, Atom ?x,
            Star (Times (Atom ?y) (Atom ?x)), Atom ?y, Atom ?y]) ==>
   ?P ?x ?y ?qs;
   ?qs
   : lang
      (seq [question (Atom ?x), Atom ?y, Atom ?x,
            Star (Times (Atom ?y) (Atom ?x)), Atom ?x]) ==>
   ?P ?x ?y ?qs;
   ?qs : lang (seq [question (Atom ?x), Atom ?y, Atom ?y]) ==>
   ?P ?x ?y ?qs |]
==> ?P ?x ?y ?qs
"A"
  :: "(nat list => 'is) * (nat list * 'is => nat => (nat * nat list) * 'is)"
real (T\<^sub>p ?s0.0 ?qs (Partial_Cost_Model.off2 ?A (?s0.0, ?x) ?qs)) =
T\<^sub>p_on_rand' (Partial_Cost_Model.embed ?A) (return_pmf (?s0.0, ?x))
 ?qs
"Partial_Cost_Model.T_on'"
  :: "('a list => 'b) * ('a list * 'b => 'a => (nat * nat list) * 'b)
      => 'a list * 'b => 'a list => nat"
"Partial_Cost_Model.embed"
  :: "('a list => 'b) * ('a list * 'b => 'a => (nat * nat list) * 'b)
      => ('a list => 'b pmf) *
         ('a list * 'b => 'a => ((nat * nat list) * 'b) pmf)"
### theory "Draft.Phase_Partitioning"
### 0.303s elapsed time, 0.311s cpu time, 0.000s GC time
Loading theory "Draft.Phase_PartitioningTemplates"
[| ?x0.0 ~= ?y0.0; 0 <= ?c; set ?\<sigma> <= {?x0.0, ?y0.0};
   ?P (map_pmf (Pair [?x0.0, ?y0.0]) (fst ?A [?x0.0, ?y0.0])) ?x0.0
    [?x0.0, ?y0.0];
   !!a b \<sigma> s.
      [| \<sigma> : Lxx a b; a ~= b; {a, b} = {?x0.0, ?y0.0};
         ?P s a [?x0.0, ?y0.0]; set \<sigma> <= {a, b} |]
      ==> T\<^sub>p_on_rand' ?A s \<sigma>
          <= ?c * real (T\<^sub>p [a, b] \<sigma> (OPT2 \<sigma> [a, b])) &
          ?P (Partial_Cost_Model.config'_rand ?A s \<sigma>) (last \<sigma>)
           [?x0.0, ?y0.0] |]
==> T\<^sub>p_on_rand' ?A
     (fst ?A [?x0.0, ?y0.0] >>= (%is. return_pmf ([?x0.0, ?y0.0], is)))
     ?\<sigma>
    <= ?c * real (T\<^sub>p_opt [?x0.0, ?y0.0] ?\<sigma>) + ?c
val templateLemmas =
   [("Phase_Partitioning.Lxx_not_nullable", "[] ~: Lxx ?x ?y",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))
             )
         )),
    ("Phase_Partitioning.Lxx1", "?xs : Lxx ?x ?y ==> 2 <= length ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_app (template_hole 0, template_var 2)))),
    ("Phase_Partitioning.Lxx_ends_in_two_equal",
     "?xs : Lxx ?x ?y ==> EX pref e. ?xs = pref @ [e, e]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Phase_Partitioning.nodouble_padded",
     "[| ?qs ~= []; ?qs : lang (nodouble ?x ?y) |]
      ==> pad ?qs ?x ?y : Lxx ?x ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Phase_Partitioning.pad_adds2",
     "[| ?qs ~= []; set ?qs <= {?x, ?y} |]
      ==> pad ?qs ?x ?y = ?qs @ [last ?qs]",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 8)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_hole 8))))),
    ("Phase_Partitioning.Lxx_othercase",
     "[| set ?qs <= {?x, ?y};
         \<nexists>xs ys. ?qs = xs @ ys & xs : Lxx ?x ?y |]
      ==> ?qs : lang (hideit ?x ?y)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 11, template_var 2),
          template_app
           (template_app (template_hole 10, template_var 1),
            template_app
             (template_app (template_hole 10, template_var 0),
              template_hole 9))),
        template_negation
         (template_predicate (template_app (template_hole 7, t_empty)))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Phase_Partitioning.T\<^sub>p_split",
     "length ?qs1.0 = length ?as1.0 ==>
      T\<^sub>p ?s (?qs1.0 @ ?qs2.0) (?as1.0 @ ?as2.0) =
      T\<^sub>p ?s ?qs1.0 ?as1.0 +
      T\<^sub>p (Partial_Cost_Model.steps ?s ?qs1.0 ?as1.0) ?qs2.0 ?as2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 4),
          template_app (template_hole 7, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_hole 5),
                 template_hole 4),
               template_var 2),
             template_app
              (template_app (template_hole 3, template_var 4),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_hole 4),
                   template_var 2),
                 template_var 4),
               template_var 3)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_hole 4),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_hole 5),
                       template_var 2),
                     template_var 4),
                   template_var 3)),
               template_var 1),
             template_var 0))))),
    ("Phase_Partitioning.ayay",
     "length ?qs = length ?as ==>
      T\<^sub>p ?s (?qs @ [?q]) (?as @ [?a]) =
      T\<^sub>p ?s ?qs ?as +
      t\<^sub>p (Partial_Cost_Model.steps ?s ?qs ?as) ?q ?a",
     template_implication
      ([template_equation
         (template_app (template_hole 12, template_var 4),
          template_app (template_hole 11, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 10, template_hole 9),
                 template_hole 8),
               template_var 2),
             template_app
              (template_app (template_hole 7, template_var 4),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_hole 5))),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_hole 8),
                   template_var 2),
                 template_var 4),
               template_var 3)),
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_hole 9),
                       template_var 2),
                     template_var 4),
                   template_var 3)),
               template_var 1),
             template_var 0))))),
    ("Phase_Partitioning.tlofOPT2",
     "[| ?Q : {?x, ?y}; set ?QS <= {?x, ?y}; ?R : {[?x, ?y], [?y, ?x]} |]
      ==> tl (OPT2 ((?Q # ?QS) @ [?x, ?x]) ?R) =
          OPT2 (?QS @ [?x, ?x])
           (step ?R ?Q (hd (OPT2 ((?Q # ?QS) @ [?x, ?x]) ?R)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 4),
              template_app
               (template_app (template_hole 14, template_var 3),
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_hole 13)))
            ),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 1),
          template_app
           (template_app (template_hole 14, template_var 3),
            template_app
             (template_app (template_hole 14, template_var 2),
              template_hole 13))),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 3),
                    template_app
                     (template_app (template_hole 8, template_var 2),
                      template_hole 7))),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 2),
                      template_app
                       (template_app (template_hole 8, template_var 3),
                        template_hole 7))),
                  template_hole 6)))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 8, template_var 4),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 8, template_var 3),
                   template_app
                    (template_app (template_hole 8, template_var 3),
                     template_hole 7)))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 8, template_var 3),
                 template_app
                  (template_app (template_hole 8, template_var 3),
                   template_hole 7)))),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 4),
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 8, template_var 4),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 8, template_var 3),
                       template_app
                        (template_app (template_hole 8, template_var 3),
                         template_hole 7)))),
                 template_var 0))))))),
    ("Phase_Partitioning.T\<^sub>p_spliting",
     "[| ?x ~= ?y; set ?xs <= {?x, ?y}; set ?ys <= {?x, ?y};
         ?R : {[?x, ?y], [?y, ?x]} |]
      ==> T\<^sub>p ?R (?xs @ [?x, ?x]) (OPT2 (?xs @ [?x, ?x]) ?R) +
          T\<^sub>p [?x, ?y] ?ys (OPT2 ?ys [?x, ?y]) =
          T\<^sub>p ?R (?xs @ [?x, ?x] @ ?ys)
           (OPT2 (?xs @ [?x, ?x] @ ?ys) ?R)",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 14, template_var 2),
          template_app
           (template_app (template_hole 13, template_var 4),
            template_app
             (template_app (template_hole 13, template_var 3),
              template_hole 12))),
        template_inequation
         (less_equals, template_app (template_hole 14, template_var 1),
          template_app
           (template_app (template_hole 13, template_var 4),
            template_app
             (template_app (template_hole 13, template_var 3),
              template_hole 12))),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 4),
                    template_app
                     (template_app (template_hole 9, template_var 3),
                      template_hole 8))),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 3),
                      template_app
                       (template_app (template_hole 9, template_var 4),
                        template_hole 8))),
                  template_hole 7)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_hole 2),
                   template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 9, template_var 4),
                     template_app
                      (template_app (template_hole 9, template_var 4),
                       template_hole 8)))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_app
                      (template_app (template_hole 9, template_var 4),
                       template_app
                        (template_app (template_hole 9, template_var 4),
                         template_hole 8)))),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 2),
                 template_app
                  (template_app (template_hole 9, template_var 4),
                   template_app
                    (template_app (template_hole 9, template_var 3),
                     template_hole 8))),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 9, template_var 4),
                 template_app
                  (template_app (template_hole 9, template_var 3),
                   template_hole 8))))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_hole 2),
               template_var 0),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 9, template_var 4),
                     template_app
                      (template_app (template_hole 9, template_var 4),
                       template_hole 8))),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 9, template_var 4),
                       template_app
                        (template_app (template_hole 9, template_var 4),
                         template_hole 8))),
                   template_var 1))),
             template_var 0))))),
    ("Phase_Partitioning.OPTauseinander",
     "[| ?x ~= ?y; set ?xs <= {?x, ?y}; set ?ys <= {?x, ?y};
         ?LTS : {[?x, ?y], [?y, ?x]}; hd ?LTS = last ?xs;
         ?xs = ?pref @ [hd ?LTS, hd ?LTS] |]
      ==> T\<^sub>p [?x, ?y] ?xs (OPT2 ?xs [?x, ?y]) +
          T\<^sub>p ?LTS ?ys (OPT2 ?ys ?LTS) =
          T\<^sub>p [?x, ?y] (?xs @ ?ys) (OPT2 (?xs @ ?ys) [?x, ?y])",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_var 4)),
        template_inequation
         (less_equals, template_app (template_hole 17, template_var 3),
          template_app
           (template_app (template_hole 16, template_var 5),
            template_app
             (template_app (template_hole 16, template_var 4),
              template_hole 15))),
        template_inequation
         (less_equals, template_app (template_hole 17, template_var 2),
          template_app
           (template_app (template_hole 16, template_var 5),
            template_app
             (template_app (template_hole 16, template_var 4),
              template_hole 15))),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app (template_hole 12, template_var 5),
                    template_app
                     (template_app (template_hole 12, template_var 4),
                      template_hole 11))),
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_var 4),
                      template_app
                       (template_app (template_hole 12, template_var 5),
                        template_hole 11))),
                  template_hole 10)))
            ),
        template_equation
         (template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 3)),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 6, template_var 0),
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 9, template_var 1)),
              template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 9, template_var 1)),
                template_hole 11))))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_hole 1),
                   template_app
                    (template_app (template_hole 12, template_var 5),
                     template_app
                      (template_app (template_hole 12, template_var 4),
                       template_hole 11))),
                 template_var 3),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app
                  (template_app (template_hole 12, template_var 5),
                   template_app
                    (template_app (template_hole 12, template_var 4),
                     template_hole 11))))),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_hole 1),
                 template_var 1),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1),
               template_app
                (template_app (template_hole 12, template_var 5),
                 template_app
                  (template_app (template_hole 12, template_var 4),
                   template_hole 11))),
             template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 12, template_var 5),
               template_app
                (template_app (template_hole 12, template_var 4),
                 template_hole 11))))))),
    ("Phase_Partitioning.LxxE",
     "[| ?qs : Lxx ?x ?y;
         ?qs : lang (seq [Atom ?x, Atom ?x]) ==> ?P ?x ?y ?qs;
         ?qs
         : lang
            (seq [question (Atom ?x), Atom ?y, Atom ?x,
                  Star (Times (Atom ?y) (Atom ?x)), Atom ?y, Atom ?y]) ==>
         ?P ?x ?y ?qs;
         ?qs
         : lang
            (seq [question (Atom ?x), Atom ?y, Atom ?x,
                  Star (Times (Atom ?y) (Atom ?x)), Atom ?x]) ==>
         ?P ?x ?y ?qs;
         ?qs : lang (seq [question (Atom ?x), Atom ?y, Atom ?y]) ==>
         ?P ?x ?y ?qs |]
      ==> ?P ?x ?y ?qs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_var 2)),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app (template_hole 5, template_var 2)),
                         template_hole 4)))))
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_app (template_var 0, template_var 2),
                  template_var 1),
                template_var 3)
              )),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 5, template_var 2)),
                           template_hole 2)),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app (template_hole 5, template_var 1)),
                         template_app
                          (template_app
                            (template_hole 6,
                             template_app
                              (template_hole 5, template_var 2)),
                           template_app
                            (template_app
                              (template_hole 6,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_app
                                    (template_hole 0,
                                     template_app
(template_hole 5, template_var 1)),
                                   template_app
                                    (template_hole 5, template_var 2)))),
                             template_app
                              (template_app
                                (template_hole 6,
                                 template_app
                                  (template_hole 5, template_var 1)),
                               template_app
                                (template_app
                                  (template_hole 6,
                                   template_app
                                    (template_hole 5, template_var 1)),
                                 template_hole 4)))))))))
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_app (template_var 0, template_var 2),
                  template_var 1),
                template_var 3)
              )),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 5, template_var 2)),
                           template_hole 2)),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app (template_hole 5, template_var 1)),
                         template_app
                          (template_app
                            (template_hole 6,
                             template_app
                              (template_hole 5, template_var 2)),
                           template_app
                            (template_app
                              (template_hole 6,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_app
                                    (template_hole 0,
                                     template_app
(template_hole 5, template_var 1)),
                                   template_app
                                    (template_hole 5, template_var 2)))),
                             template_app
                              (template_app
                                (template_hole 6,
                                 template_app
                                  (template_hole 5, template_var 2)),
                               template_hole 4))))))))
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_app (template_var 0, template_var 2),
                  template_var 1),
                template_var 3)
              )),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_hole 5, template_var 2)),
                           template_hole 2)),
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app (template_hole 5, template_var 1)),
                         template_app
                          (template_app
                            (template_hole 6,
                             template_app
                              (template_hole 5, template_var 1)),
                           template_hole 4))))))
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_app (template_var 0, template_var 2),
                  template_var 1),
                template_var 3)
              ))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 0, template_var 2),
               template_var 1),
             template_var 3)
           ))),
    ("Phase_Partitioning.LxxI",
     "[| ?qs : lang (seq [Atom ?x, Atom ?x]) ==> ?P ?x ?y ?qs;
         ?qs
         : lang
            (seq [question (Atom ?x), Atom ?y, Atom ?x,
                  Star (Times (Atom ?y) (Atom ?x)), Atom ?y, Atom ?y]) ==>
         ?P ?x ?y ?qs;
         ?qs
         : lang
            (seq [question (Atom ?x), Atom ?y, Atom ?x,
                  Star (Times (Atom ?y) (Atom ?x)), Atom ?x]) ==>
         ?P ?x ?y ?qs;
         ?qs : lang (seq [question (Atom ?x), Atom ?y, Atom ?y]) ==>
         ?P ?x ?y ?qs;
         ?qs : Lxx ?x ?y |]
      ==> ?P ?x ?y ?qs",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_var 2)),
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app (template_hole 6, template_var 2)),
                         template_hole 5)))))
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_app (template_var 1, template_var 2),
                  template_var 0),
                template_var 3)
              )),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 6, template_var 2)),
                           template_hole 3)),
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app (template_hole 6, template_var 0)),
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_hole 6, template_var 2)),
                           template_app
                            (template_app
                              (template_hole 7,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_app
                                    (template_hole 1,
                                     template_app
(template_hole 6, template_var 0)),
                                   template_app
                                    (template_hole 6, template_var 2)))),
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app
                                  (template_hole 6, template_var 0)),
                               template_app
                                (template_app
                                  (template_hole 7,
                                   template_app
                                    (template_hole 6, template_var 0)),
                                 template_hole 5)))))))))
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_app (template_var 1, template_var 2),
                  template_var 0),
                template_var 3)
              )),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 6, template_var 2)),
                           template_hole 3)),
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app (template_hole 6, template_var 0)),
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_hole 6, template_var 2)),
                           template_app
                            (template_app
                              (template_hole 7,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_app
                                    (template_hole 1,
                                     template_app
(template_hole 6, template_var 0)),
                                   template_app
                                    (template_hole 6, template_var 2)))),
                             template_app
                              (template_app
                                (template_hole 7,
                                 template_app
                                  (template_hole 6, template_var 2)),
                               template_hole 5))))))))
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_app (template_var 1, template_var 2),
                  template_var 0),
                template_var 3)
              )),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_hole 6, template_var 2)),
                           template_hole 3)),
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app (template_hole 6, template_var 0)),
                         template_app
                          (template_app
                            (template_hole 7,
                             template_app
                              (template_hole 6, template_var 0)),
                           template_hole 5))))))
               )],
          template_predicate
           (
              template_app
               (template_app
                 (template_app (template_var 1, template_var 2),
                  template_var 0),
                template_var 3)
              )),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 1, template_var 2),
               template_var 0),
             template_var 3)
           ))),
    ("Phase_Partitioning.Phase_partitioning_general",
     "[| ?x0.0 ~= ?y0.0; 0 <= ?c; set ?\<sigma> <= {?x0.0, ?y0.0};
         ?P (map_pmf (Pair [?x0.0, ?y0.0]) (fst ?A [?x0.0, ?y0.0])) ?x0.0
          [?x0.0, ?y0.0];
         !!a b \<sigma> s.
            [| \<sigma> : Lxx a b; a ~= b; {a, b} = {?x0.0, ?y0.0};
               ?P s a [?x0.0, ?y0.0]; set \<sigma> <= {a, b} |]
            ==> T\<^sub>p_on_rand' ?A s \<sigma>
                <= ?c *
                   real (T\<^sub>p [a, b] \<sigma> (OPT2 \<sigma> [a, b])) &
                ?P (Partial_Cost_Model.config'_rand ?A s \<sigma>)
                 (last \<sigma>) [?x0.0, ?y0.0] |]
      ==> T\<^sub>p_on_rand' ?A
           (fst ?A [?x0.0, ?y0.0] >>=
            (%is. return_pmf ([?x0.0, ?y0.0], is)))
           ?\<sigma>
          <= ?c * real (T\<^sub>p_opt [?x0.0, ?y0.0] ?\<sigma>) + ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_var 4)),
        template_inequation (less_equals, template_hole 29, template_var 3),
        template_inequation
         (less_equals, template_app (template_hole 27, template_var 2),
          template_app
           (template_app (template_hole 26, template_var 5),
            template_app
             (template_app (template_hole 26, template_var 4),
              template_hole 25))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_var 1,
                  template_app
                   (template_app (template_hole 24, t_empty),
                    template_app
                     (template_app (template_hole 20, template_var 0),
                      template_app
                       (template_app (template_hole 22, template_var 5),
                        template_app
                         (template_app (template_hole 22, template_var 4),
                          template_hole 21))))),
                template_var 5),
              template_app
               (template_app (template_hole 22, template_var 5),
                template_app
                 (template_app (template_hole 22, template_var 4),
                  template_hole 21)))
            ),
        template_predicate (template_app (template_hole 19, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 12, template_hole 11),
                 template_hole 10),
               template_var 0),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 20, template_var 0),
                   template_app
                    (template_app (template_hole 22, template_var 5),
                     template_app
                      (template_app (template_hole 22, template_var 4),
                       template_hole 21)))),
               t_empty)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 9, template_var 3),
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_hole 11),
                       template_hole 10),
                     template_app
                      (template_app (template_hole 22, template_var 5),
                       template_app
                        (template_app (template_hole 22, template_var 4),
                         template_hole 21))),
                   template_var 2)))),
           template_var 3))))]:
   (string * thm * template) list
### theory "Draft.Phase_PartitioningTemplates"
### 1.710s elapsed time, 2.793s cpu time, 1.208s GC time
val it = (): unit
