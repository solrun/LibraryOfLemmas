Loading theory "Draft.Bit_Strings" (required by "Draft.BITTemplates" via "Draft.BIT")
Loading theory "Draft.On_Off" (required by "Draft.BITTemplates" via "Draft.BIT" via "Draft.MTF2_Effects" via "Draft.Move_to_Front")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BITTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.BITTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
locale On_Off
  fixes step :: "'state => 'request => 'answer => 'state"
    and t :: "'state => 'request => 'answer => nat"
    and wf :: "'state => 'request list => bool"
### Missing patterns in function definition:
### !!a v va. T a (v # va) [] = undefined
### !!a v va. T a [] (v # va) = undefined
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.082s elapsed time, 0.355s cpu time, 0.000s GC time
Loading theory "Draft.Prob_Theory" (required by "Draft.BITTemplates" via "Draft.BIT" via "Draft.MTF2_Effects" via "Draft.Move_to_Front" via "Draft.Competitive_Analysis")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.135s elapsed time, 0.533s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BITTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### theory "Draft.Bit_Strings"
### 0.194s elapsed time, 0.793s cpu time, 0.039s GC time
Loading theory "Draft.Inversion" (required by "Draft.BITTemplates" via "Draft.BIT" via "Draft.MTF2_Effects" via "Draft.Move_to_Front" via "Draft.Swaps")
### theory "Draft.Inversion"
### 0.062s elapsed time, 0.245s cpu time, 0.000s GC time
Loading theory "Draft.Swaps" (required by "Draft.BITTemplates" via "Draft.BIT" via "Draft.MTF2_Effects" via "Draft.Move_to_Front")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Swaps"
### 0.109s elapsed time, 0.408s cpu time, 0.080s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
[| finite ?A; !!a. [| a : set_pmf ?M; ?f a ~= (0::?'b) |] ==> a : ?A |]
==> measure_pmf.expectation ?M ?f = (SUM a:?A. pmf ?M a *\<^sub>R ?f a)
set_pmf ?p Int ?s ~= {} ==>
pmf (cond_pmf ?p ?s) ?x =
(if ?x : ?s then pmf ?p ?x / measure_pmf.prob ?p ?s else 0)
[| 0 < ?p1; ?p1 < 1 |]
==> pmf (cond_pmf
          (bernoulli_pmf ?p1 >>=
           (%b. if b then map_pmf Inl ?Da1 else map_pmf Inr ?Db1))
          {f. EX e. Inl e = f})
     ?x =
    (if ?x : {f. EX e. Inl e = f}
     then pmf (bernoulli_pmf ?p1 >>=
               (%b. if b then map_pmf Inl ?Da1 else map_pmf Inr ?Db1))
           ?x /
          measure_pmf.prob
           (bernoulli_pmf ?p1 >>=
            (%b. if b then map_pmf Inl ?Da1 else map_pmf Inr ?Db1))
           {f. EX e. Inl e = f}
     else 0)
"%a. case a of Inl e => Inl (fa e) | Inr e => Inr (fb e)"
  :: "'a + 'b => 'c + 'd"
"(>>=)"
  :: "'a pmf => ('a => 'b pmf) => 'b pmf"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### theory "Draft.Prob_Theory"
### 0.495s elapsed time, 1.764s cpu time, 0.145s GC time
### theory "Draft.On_Off"
### 0.645s elapsed time, 2.273s cpu time, 0.184s GC time
Loading theory "Draft.Competitive_Analysis" (required by "Draft.BITTemplates" via "Draft.BIT" via "Draft.MTF2_Effects" via "Draft.Move_to_Front")
### theory "HOL-Library.BigO"
### 0.715s elapsed time, 2.147s cpu time, 0.207s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BITTemplates")
locale On_Off
  fixes step :: "'state => 'request => 'answer => 'state"
    and t :: "'state => 'request => 'answer => nat"
    and wf :: "'state => 'request list => bool"
### Missing patterns in function definition:
### !!a v va. steps a (v # va) [] = undefined
### !!a v va. steps a [] (v # va) = undefined
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.634s elapsed time, 1.456s cpu time, 0.491s GC time
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.Competitive_Analysis"
### 1.158s elapsed time, 2.264s cpu time, 0.585s GC time
Loading theory "Draft.Move_to_Front" (required by "Draft.BITTemplates" via "Draft.BIT" via "Draft.MTF2_Effects")
?A Int set ?xs = set (filter (%x. x : ?A) ?xs)
locale MTF_Off
  fixes as :: "(nat * nat list) list"
    and rs :: "'a list"
    and s0 :: "'a list"
  assumes "MTF_Off as rs s0"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Move_to_Front"
### 2.528s elapsed time, 2.767s cpu time, 0.337s GC time
Loading theory "Draft.MTF2_Effects" (required by "Draft.BITTemplates" via "Draft.BIT")
"mtf2"
  :: "nat => 'a => 'a list => 'a list"
### theory "Draft.MTF2_Effects"
### 0.235s elapsed time, 0.300s cpu time, 0.072s GC time
Loading theory "Draft.BIT" (required by "Draft.BITTemplates")
"config'_rand BIT s0 qs"
  :: "('a list * bool list * 'a list) pmf"
locale BIT_Off
  fixes acts :: "(nat * nat list) list"
    and qs :: "'a list"
    and init :: "'a list"
  assumes "BIT_Off acts qs init"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### distinct init == True
Found termination order: "{}"
"Inv"
  :: "'b list => 'b list => ('b * 'b) set"
### theory "Draft.BIT"
### 1.891s elapsed time, 2.620s cpu time, 1.006s GC time
Loading theory "Draft.BITTemplates"
val templateLemmas =
   [("BIT.setdi", "set ?xs = {0..<length ?xs} ==> distinct ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0),
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_app (template_hole 1, template_var 0)))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("BIT.BIT_no_paid",
     "ALL ((free, paid), uu_):set_pmf (BIT_step ?s ?q). paid = []",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0))),
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty)))
         )),
    ("BIT.fperms",
     "finite {x. length x = length ?init & distinct x & set x = set ?init}",
     template_predicate
      (
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))
         )),
    ("BIT.config'_n_init",
     "map_pmf (snd o snd) (config'_rand BIT ?init ?qs) =
      map_pmf (snd o snd) ?init",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_hole 5)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_hole 5)),
         template_var 1))),
    ("BIT.sum_my2", "ALL x:?A. ?f x = ?g x ==> sum ?f ?A = sum ?g ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, t_empty), template_var 2),
         template_app
          (template_app (template_hole 0, t_empty), template_var 2)))),
    ("BIT.finite_config_BIT",
     "distinct ?init ==>
      finite
       (set_pmf
         (config'_rand BIT (fst BIT ?init >>= (%is. return_pmf (?init, is)))
           ?qs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_app
                      (template_app (template_hole 6, template_hole 5),
                       template_hole 4)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_hole 2,
                           template_app
                            (template_app
                              (template_hole 6, template_hole 5),
                             template_hole 4)),
                         template_var 1)),
                     t_empty)),
                 template_var 0)))
           ))),
    ("BIT.config_n_init",
     "map_pmf (snd o snd)
       (config'_rand BIT (fst BIT ?s0.0 >>= (%is. return_pmf (?s0.0, is)))
         ?qs) =
      return_pmf ?s0.0",
     template_equation
      (template_app
        (template_app
          (template_hole 13,
           template_app
            (template_app (template_hole 12, template_hole 11),
             template_hole 10)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_hole 5)),
                   template_var 1)),
               t_empty)),
           template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("BIT.config_n_bv",
     "map_pmf (fst o snd)
       (config'_rand BIT (fst BIT ?s0.0 >>= (%is. return_pmf (?s0.0, is)))
         ?qs) =
      bv (length ?s0.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, template_hole 12),
             template_hole 11)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_hole 9),
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_hole 6)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 8, template_hole 7),
                       template_hole 6)),
                   template_var 1)),
               t_empty)),
           template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 1)))),
    ("BIT.config_n_init3",
     "ALL x:set_pmf
             (config'_rand BIT
               (fst BIT ?init >>= (%is. return_pmf (?init, is))) ?qs).
         snd (snd x) = ?init",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 11, template_hole 10),
                     template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_hole 7)),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_hole 9, template_hole 8),
                             template_hole 7)),
                         template_var 1)),
                     t_empty)),
                 template_var 0))),
           t_empty)
         )),
    ("BIT.config_n_init2",
     "ALL (uu_, uu_, x)
          :set_pmf
            (config'_rand BIT
              (fst BIT ?init >>= (%is. return_pmf (?init, is))) ?qs).
         x = ?init",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 11, template_hole 10),
                     template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_hole 7)),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_hole 9, template_hole 8),
                             template_hole 7)),
                         template_var 1)),
                     t_empty)),
                 template_var 0))),
           template_app (template_hole 2, t_empty))
         )),
    ("BIT.config_n_fst_init_length2",
     "ALL x:set_pmf
             (config'_rand BIT
               (fst BIT ?s0.0 >>= (%is. return_pmf (?s0.0, is))) ?qs).
         length (fst (snd x)) = length ?s0.0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 13, template_hole 12),
                     template_app
                      (template_app (template_hole 11, template_hole 10),
                       template_hole 9)),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app
                              (template_hole 11, template_hole 10),
                             template_hole 9)),
                         template_var 1)),
                     t_empty)),
                 template_var 0))),
           t_empty)
         )),
    ("BIT.config_n_fst_init_length",
     "ALL (uu_, x, uu_)
          :set_pmf
            (config'_rand BIT
              (fst BIT ?s0.0 >>= (%is. return_pmf (?s0.0, is))) ?qs).
         length x = length ?s0.0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 13, template_hole 12),
                     template_app
                      (template_app (template_hole 11, template_hole 10),
                       template_hole 9)),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app
                              (template_hole 11, template_hole 10),
                             template_hole 9)),
                         template_var 1)),
                     t_empty)),
                 template_var 0))),
           template_app (template_hole 4, t_empty))
         )),
    ("BIT.compet_BIT4",
     "[| ?init ~= []; distinct ?init |]
      ==> T_on_rand' BIT (fst BIT ?init >>= (%is. return_pmf (?init, is)))
           ?qs
          <= 7 / 4 * real (T_opt ?init ?qs)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 20)),
        template_predicate
         (template_app (template_hole 19, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 17, template_hole 16),
                 template_hole 15),
               template_app
                (template_app (template_hole 14, template_hole 13),
                 template_hole 12)),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 14, template_hole 13),
                       template_hole 12)),
                   template_var 1)),
               t_empty)),
           template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 4, template_hole 3)))),
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 2, template_hole 3))))),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_hole 16),
                   template_hole 15),
                 template_var 1),
               template_var 0)))))),
    ("BIT.sum_my",
     "[| finite ?A; finite ?B |]
      ==> sum ?f ?A - sum ?g ?B =
          (SUM x:?A Int ?B. ?f x - ?g x) + sum ?f (?A - ?B) -
          sum ?g (?B - ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_var 3)),
           template_app
            (template_app (template_hole 3, t_empty), template_var 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 3, t_empty),
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 2))),
               template_app
                (template_app (template_hole 3, t_empty),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2)))),
           template_app
            (template_app (template_hole 3, t_empty),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 3)))))),
    ("BIT.config_n_bv_2",
     "map_pmf (snd o snd)
       (config'_rand BIT (fst BIT ?s0.0 >>= (%is. return_pmf (?s0.0, is)))
         ?qs) =
      return_pmf ?s0.0 &
      map_pmf (fst o snd)
       (config'_rand BIT (fst BIT ?s0.0 >>= (%is. return_pmf (?s0.0, is)))
         ?qs) =
      bv (length ?s0.0)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 21,
             template_app
              (template_app
                (template_hole 20,
                 template_app
                  (template_app
                    (template_hole 19,
                     template_app
                      (template_app (template_hole 18, template_hole 17),
                       template_hole 16)),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 15, template_hole 14),
                         template_app
                          (template_app
                            (template_hole 13, template_hole 12),
                           template_hole 11)),
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_app
                              (template_hole 9,
                               template_app
                                (template_app
                                  (template_hole 13, template_hole 12),
                                 template_hole 11)),
                             template_var 1)),
                         t_empty)),
                     template_var 0))),
               template_app (template_hole 6, template_var 1))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_hole 16)),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 15, template_hole 14),
                       template_app
                        (template_app (template_hole 13, template_hole 12),
                         template_hole 11)),
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_app
                            (template_hole 9,
                             template_app
                              (template_app
                                (template_hole 13, template_hole 12),
                               template_hole 11)),
                           template_var 1)),
                       t_empty)),
                   template_var 0))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))))
         )),
    ("BIT.config'_n_bv",
     "[| map_pmf (snd o snd) ?init = return_pmf ?s0.0;
         map_pmf (fst o snd) ?init = bv (length ?s0.0) |]
      ==> map_pmf (snd o snd) (config'_rand BIT ?init ?qs) =
          return_pmf ?s0.0 &
          map_pmf (fst o snd) (config'_rand BIT ?init ?qs) =
          bv (length ?s0.0)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_hole 13)),
            template_var 2),
          template_app (template_hole 12, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_hole 13)),
            template_var 2),
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 17,
                   template_app
                    (template_app
                      (template_hole 16,
                       template_app
                        (template_app (template_hole 15, template_hole 14),
                         template_hole 13)),
                     template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 4, template_hole 3),
                           template_app
                            (template_app
                              (template_hole 2, template_hole 1),
                             template_hole 0)),
                         template_var 2),
                       template_var 0))),
                 template_app (template_hole 12, template_var 1))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_hole 13)),
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_app
                          (template_app (template_hole 2, template_hole 1),
                           template_hole 0)),
                       template_var 2),
                     template_var 0))),
               template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 1))))
           ))),
    ("BIT.compet_BIT",
     "[| ?init ~= []; distinct ?init; set ?qs <= set ?init |]
      ==> T_on_rand' BIT (fst BIT ?init >>= (%is. return_pmf (?init, is)))
           ?qs
          <= (7 / 4 - 3 / real (4 * length ?init)) *
             real (T_opt ?init ?qs)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 26)),
        template_predicate
         (template_app (template_hole 25, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 23, template_var 0),
          template_app (template_hole 23, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 21, template_hole 20),
                 template_hole 19),
               template_app
                (template_app (template_hole 18, template_hole 17),
                 template_hole 16)),
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_hole 14,
                     template_app
                      (template_app (template_hole 18, template_hole 17),
                       template_hole 16)),
                   template_var 1)),
               t_empty)),
           template_var 0),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app (template_hole 7, template_hole 6)))),
                   template_app
                    (template_hole 8,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 5, template_hole 6))))),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_hole 6))),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 5, template_hole 6)))),
                     template_app (template_hole 1, template_var 1)))))),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_hole 20),
                   template_hole 19),
                 template_var 1),
               template_var 0))))))]:
   (string * thm * template) list
### theory "Draft.BITTemplates"
### 1.210s elapsed time, 1.588s cpu time, 0.231s GC time
val it = (): unit
