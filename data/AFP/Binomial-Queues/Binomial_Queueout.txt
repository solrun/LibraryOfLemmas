Loading theory "Draft.PQ" (required by "Draft.Binomial_QueueMoreTemplates" via "Draft.Binomial_Queue")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Binomial_QueueMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Binomial_QueueMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Binomial_QueueMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.535s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Binomial_QueueMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.214s elapsed time, 0.871s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Binomial_QueueMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.PQ"
### 0.290s elapsed time, 1.167s cpu time, 0.112s GC time
Loading theory "Draft.Binomial_Queue" (required by "Draft.Binomial_QueueMoreTemplates")
### theory "HOL-Library.Nat_Bijection"
### 0.324s elapsed time, 1.303s cpu time, 0.112s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Binomial_QueueMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  priority :: "('a, 'b) bintree => 'a"
consts
  snth :: "'a stream => nat => 'a"
consts
  val :: "('a, 'b) bintree => 'b"
consts
  children :: "('a, 'b) bintree => ('a, 'b) bintree list"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "is_bintree_list"
consts
  stake :: "nat => 'a stream => 'a list"
  Proving monotonicity ...
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for inductive predicate(s) "is_heap_list"
  Proving monotonicity ...
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Proofs for inductive predicate(s) "is_binqueue"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Proofs for inductive predicate(s) "normalized"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 1.003s elapsed time, 3.748s cpu time, 0.967s GC time
consts
  normalize' ::
    "('a, 'b) bintree option list => ('a, 'b) bintree option list"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order:
  "(%p. size_list (size_option size) (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.112s elapsed time, 4.004s cpu time, 0.975s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  find :: "'a => ('a, 'b) bintree option list => ('a, 'b) bintree option"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  match :: "'a => ('a, 'b) bintree option => ('a, 'b) bintree option"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Binomial_Queue"
### 1.484s elapsed time, 4.855s cpu time, 1.053s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.958s elapsed time, 5.867s cpu time, 1.179s GC time
Loading theory "Draft.Templates" (required by "Draft.Binomial_QueueMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.071s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Binomial_QueueMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.477s elapsed time, 0.541s cpu time, 0.080s GC time
Loading theory "Draft.Binomial_QueueMoreTemplates"
val templateLemmas =
   [("Binomial_Queue.normalized_normalize",
     "normalized (Binomial_Queue.normalize ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Binomial_Queue.normalized_delete_min", "normalized (delete_min ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Binomial_Queue.normalized_map_Some", "normalized (map Some ?xs)",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("Binomial_Queue.is_binqueue_simp", "is_binqueue ?l [] = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Binomial_Queue.is_heap_list_simps", "is_heap_list ?h [] = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Binomial_Queue.least_simps", "least None ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Binomial_Queue.least_simps", "least ?x None = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Binomial_Queue.find_simps", "Binomial_Queue.find ?a [] = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Binomial_Queue.find_min_single", "find_min [?x] = ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 0)),
    ("Binomial_Queue.add_Some_not_Nil", "add (Some ?t) ?xs ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0),
           template_hole 0)
         )),
    ("Binomial_Queue.is_bintree_list_triv",
     "is_bintree_list 0 ?ts = (?ts = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Binomial_Queue.is_bintree_list_triv",
     "is_bintree_list ?l [] = (?l = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Binomial_Queue.min_simps",
     "Binomial_Queue.min (None # ?xs) = Binomial_Queue.min ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Binomial_Queue.find_min_simps",
     "find_min (None # ?xs) = find_min ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Binomial_Queue.min_Some_not_None",
     "Binomial_Queue.min (Some ?t # ?xs) ~= None",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0)),
           template_hole 0)
         )),
    ("Binomial_Queue.normalized_simps",
     "normalized (Some ?t # ?xs) = normalized ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Binomial_Queue.normalized_add",
     "normalized ?xs ==> normalized (add ?x ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Binomial_Queue.normalized_Cons",
     "normalized (?x # ?xs) ==> normalized ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Binomial_Queue.min_eq_find_min_None",
     "(Binomial_Queue.min ?xs = None) = (find_min ?xs = None)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Binomial_Queue.find_simps",
     "Binomial_Queue.find ?a (None # ?xs) = Binomial_Queue.find ?a ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Binomial_Queue.normalized_insert",
     "normalized ?xs ==> normalized (Binomial_Queue.insert ?a ?v ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Binomial_Queue.is_binqueue_delete_min",
     "is_binqueue 0 ?xs ==> is_binqueue 0 (delete_min ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Binomial_Queue.is_binqueue_normalize",
     "is_binqueue ?l ?xs ==> is_binqueue ?l (Binomial_Queue.normalize ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Binomial_Queue.is_bintree_list_length",
     "is_bintree_list ?l ?ts ==> length ?ts = ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Binomial_Queue.is_heap_list_rev",
     "is_heap_list ?l ?ts ==> is_heap_list ?l (rev ?ts)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Binomial_Queue.is_binqueue_simp",
     "is_binqueue ?l (None # ?xs) = is_binqueue (Suc ?l) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Binomial_Queue.is_binqueue_add_None",
     "is_binqueue ?l ?xs ==> is_binqueue ?l (add None ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Binomial_Queue.is_binqueue_append_dest",
     "is_binqueue ?l (?xs @ ?ys) ==> is_binqueue ?l ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 1)
           ))),
    ("Binomial_Queue.is_heap_list_append_dest",
     "is_heap_list ?l (?ts @ ?rs) ==> is_heap_list ?l ?rs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Binomial_Queue.is_heap_list_append_dest",
     "is_heap_list ?l (?ts @ ?rs) ==> is_heap_list ?l ?ts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 1)
           ))),
    ("Binomial_Queue.meld_singleton_add",
     "meld [Some ?t] ?xs = add (Some ?t) ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Binomial_Queue.normalized_not_None",
     "normalized ?xs ==> set ?xs ~= {None}",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0))
           ))),
    ("Binomial_Queue.is_binqueue_insert",
     "is_binqueue 0 ?xs ==>
      is_binqueue 0 (Binomial_Queue.insert ?a ?v ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Binomial_Queue.is_binqueue_trans",
     "is_binqueue ?l (?x # ?xs) ==> is_binqueue (Suc ?l) ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           ))),
    ("Binomial_Queue.min_single",
     "Binomial_Queue.min [?x] = None ==> ?x = None",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)),
          template_hole 2)],
       template_equation (template_var 0, template_hole 0))),
    ("Binomial_Queue.normalized_last_not_None",
     "normalized ?xs = (?xs = [] | last ?xs ~= None)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4)),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_hole 0)))
           ))),
    ("Binomial_Queue.normalized_simps",
     "normalized (None # ?xs) = (?xs ~= [] & normalized ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))),
             template_app (template_hole 6, template_var 0))
           ))),
    ("Binomial_Queue.insert_simps",
     "Binomial_Queue.insert ?a ?v [] = [Some (bintree.Node ?a ?v [])]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_hole 0))),
         template_hole 4))),
    ("Binomial_Queue.min_simps",
     "Binomial_Queue.min (Some ?t # ?xs) =
      least (Some (priority ?t)) (Binomial_Queue.min ?xs)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 5, template_var 0)))),
    ("Binomial_Queue.nonempty_meld", "?xs ~= [] ==> meld ?xs ?ys ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 1)
           ))),
    ("Binomial_Queue.nonempty_meld", "?ys ~= [] ==> meld ?xs ?ys ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_hole 1)
           ))),
    ("Binomial_Queue.is_binqueue_head",
     "is_binqueue ?l (?x # ?xs) ==> is_binqueue ?l [?x]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Binomial_Queue.find_min_exist",
     "find_min ?xs = Some ?t ==> Some ?t : set ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Binomial_Queue.min_None_trans",
     "Binomial_Queue.min (?x # ?xs) = None ==>
      Binomial_Queue.min ?xs = None",
     template_implication
      ([template_equation
         (template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)),
          template_hole 0)],
       template_equation
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Binomial_Queue.normalized_append",
     "[| normalized ?xs; normalized ?ys |] ==> normalized (?xs @ ?ys)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Binomial_Queue.normalized_meld",
     "[| normalized ?xs; normalized ?ys |] ==> normalized (meld ?xs ?ys)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Binomial_Queue.find_exist",
     "Binomial_Queue.find ?a ?xs = Some ?t ==> Some ?t : set ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Binomial_Queue.insert_simps",
     "Binomial_Queue.insert ?a ?v (None # ?xs) =
      Some (bintree.Node ?a ?v []) # ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_hole 0))),
         template_var 0))),
    ("Binomial_Queue.least_simps",
     "least (Some ?x') (Some ?y') =
      (if ?x' <= ?y' then Some ?x' else Some ?y')",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Binomial_Queue.nonempty_meld_commute",
     "meld ?xs ?ys ~= [] ==> meld ?xs ?ys ~= []",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_hole 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Binomial_Queue.min_single",
     "Binomial_Queue.min [?x] = Some ?a ==> priority (the ?x) = ?a",
     template_implication
      ([template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Binomial_Queue.min_None_None",
     "(Binomial_Queue.min ?xs = None) = (?xs = [] | set ?xs = {None})",
     template_bimplication
      (template_equation
        (template_app (template_hole 9, template_var 0), template_hole 8),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)))
           ))),
    ("Binomial_Queue.is_bintree_list_simp",
     "is_bintree_list (Suc ?l) (?t # ?ts) =
      (is_bintree_list ?l (children ?t) & is_bintree_list ?l ?ts)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 0)))),
    ("Binomial_Queue.is_bintree_children_length_desc",
     "is_bintree_list ?l ?ts ==>
      map (length o children) ?ts = rev [0..<?l]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_hole 3)),
           template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1))))),
    ("Binomial_Queue.min_exists",
     "Binomial_Queue.min ?xs = Some ?a ==>
      Some ?a : map_option priority ` set ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Binomial_Queue.normalized_min_not_None",
     "[| normalized ?xs; ?xs ~= [] |] ==> Binomial_Queue.min ?xs ~= None",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Binomial_Queue.normalized_meld_weak",
     "[| normalized ?xs; length ?ys <= length ?xs |]
      ==> normalized (meld ?xs ?ys)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 0),
          template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Binomial_Queue.is_binqueue_meld",
     "[| is_binqueue ?l ?xs; is_binqueue ?l ?ys |]
      ==> is_binqueue ?l (meld ?xs ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Binomial_Queue.find_None",
     "Binomial_Queue.find ?a ?xs = None ==>
      Some ?a ~: set (map (map_option priority) ?xs)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 1), template_var 0),
          template_hole 7)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 1)),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0)),
                     template_var 0)))
               )
           ))),
    ("Binomial_Queue.find_works_not_None",
     "Some ?a : set (map (map_option priority) ?xs) ==>
      Binomial_Queue.find ?a ?xs ~= None",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_hole 4)),
                  template_var 0)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Binomial_Queue.is_bintree_list_children_last",
     "[| is_bintree_list ?l ?ts; ?ts ~= [] |] ==> children (last ?ts) = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_hole 2))),
    ("Binomial_Queue.is_binqueue_children",
     "[| is_bintree_list ?l ?ts; is_heap_list ?t ?ts |]
      ==> is_binqueue 0 (map Some (rev ?ts))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Binomial_Queue.find_simps",
     "Binomial_Queue.find ?a (Some ?t # ?xs) =
      (if priority ?t = ?a then Some ?t else Binomial_Queue.find ?a ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1)),
                   template_var 2)),
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0))
           ))),
    ("Binomial_Queue.is_heap_children_larger",
     "is_heap_list (priority ?t) (children ?t) ==>
      ALL x:set (children ?t). priority ?t <= priority x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 0))),
             t_empty)
           ))),
    ("Binomial_Queue.least_split",
     "least ?x ?y = Some ?z ==> ?x = Some ?z | ?y = Some ?z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Binomial_Queue.normalized_find_min_exists",
     "[| normalized ?xs; ?xs ~= [] |] ==> EX t. find_min ?xs = Some t",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Binomial_Queue.min_eq_find_min_Some",
     "(Binomial_Queue.min ?xs = Some ?a) =
      (EX t. find_min ?xs = Some t & priority t = ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 1)),
         template_app (template_hole 7, template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Binomial_Queue.is_binqueue_append",
     "[| is_binqueue ?l ?xs; is_binqueue (length ?xs + ?l) ?ys |]
      ==> is_binqueue ?l (?xs @ ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)),
                  template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Binomial_Queue.insert_simps",
     "Binomial_Queue.insert ?a ?v (Some ?t # ?xs) =
      None # add (Some (merge (bintree.Node ?a ?v []) ?t)) ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 3), template_var 2),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 6, template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 2),
                     template_hole 0)),
                 template_var 1))),
           template_var 0)))),
    ("Binomial_Queue.is_bintree_list_merge",
     "[| is_bintree_list ?l (children ?t1.0);
         is_bintree_list ?l (children ?t2.0) |]
      ==> is_bintree_list (Suc ?l) (children (merge ?t1.0 ?t2.0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 1, template_var 2)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Binomial_Queue.is_heap_list_simps",
     "is_heap_list ?h (?t # ?ts) =
      (is_heap_list ?h ?ts &
       is_heap_list (priority ?t) (children ?t) & ?h <= priority ?t)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 1, template_var 1))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app (template_hole 2, template_var 1)))))),
    ("Binomial_Queue.is_binqueue_simp",
     "is_binqueue ?l (Some ?t # ?xs) =
      (is_bintree_list ?l (children ?t) &
       is_heap_list (priority ?t) (children ?t) &
       is_binqueue (Suc ?l) ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 3, template_var 1))),
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Binomial_Queue.find_works",
     "Some ?a : set (map (map_option priority) ?xs) ==>
      EX t. Binomial_Queue.find ?a ?xs = Some t & priority t = ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_hole 6)),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Binomial_Queue.is_heap_Min_children_larger",
     "[| is_heap_list (priority ?t) (children ?t); children ?t ~= [] |]
      ==> priority ?t <= Min (priority ` set (children ?t))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 0)),
              template_app (template_hole 7, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 0),
              template_hole 4)
            )],
       template_inequation
        (less_equals, template_app (template_hole 8, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 8),
             template_app
              (template_hole 0,
               template_app (template_hole 7, template_var 0))))))),
    ("Binomial_Queue.is_heap_merge",
     "[| is_heap_list (priority ?t1.0) (children ?t1.0);
         is_heap_list (priority ?t2.0) (children ?t2.0) |]
      ==> is_heap_list (priority (merge ?t1.0 ?t2.0))
           (children (merge ?t1.0 ?t2.0))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Binomial_Queue.is_binqueue_select",
     "[| is_binqueue ?l ?xs; Some ?t : set ?xs |]
      ==> EX k. is_bintree_list k (children ?t) &
                is_heap_list (priority ?t) (children ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Binomial_Queue.is_binqueue_add_Some",
     "[| is_binqueue ?l ?xs; is_bintree_list ?l (children ?t);
         is_heap_list (priority ?t) (children ?t) |]
      ==> is_binqueue ?l (add (Some ?t) ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("Binomial_Queue.pop_code",
     "pop ?xs =
      (case find_min ?xs of None => (None, ?xs)
       | Some t =>
           (Some (val t, priority t),
            Binomial_Queue.normalize
             (meld (map Some (rev (children t)))
               (map (match (priority t)) ?xs))))",
     template_equation
      (template_app (template_hole 16, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app (template_hole 14, template_hole 13),
               template_var 0)),
           t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Binomial_Queue.min_is_min",
     "[| normalized ?xs; ?xs ~= []; Binomial_Queue.min ?xs = Some ?a |]
      ==> ALL x:set ?xs. x = None | ?a <= priority (the x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 11)),
        template_equation
         (template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 1)),
             t_empty)
           ))),
    ("Binomial_Queue.find_min_is_min",
     "[| normalized ?xs; ?xs ~= []; find_min ?xs = Some ?t |]
      ==> ALL x:set ?xs. x = None | priority ?t <= priority (the x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 10)),
        template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)),
             t_empty)
           ))),
    ("Binomial_Queue.delete_min_nonempty",
     "[| normalized ?xs; ?xs ~= []; find_min ?xs = Some ?t |]
      ==> delete_min ?xs =
          Binomial_Queue.normalize
           (meld (map Some (rev (children ?t)))
             (map (match (priority ?t)) ?xs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 12)),
        template_equation
         (template_app (template_hole 10, template_var 1),
          template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app (template_hole 8, template_var 1),
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_hole 9),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))),
               template_var 1)))))),
    ("Binomial_Queue.binqueue_induct",
     "[| ?P []; !!xs. ?P xs ==> ?P (None # xs);
         !!x xs. ?P xs ==> ?P (Some x # xs) |]
      ==> ?P ?xs",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 5)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Binomial_Queue.pop_nonempty",
     "[| normalized ?xs; ?xs ~= []; find_min ?xs = Some ?t |]
      ==> pop ?xs =
          (Some (val ?t, priority ?t),
           Binomial_Queue.normalize
            (meld (map Some (rev (children ?t)))
              (map (match (priority ?t)) ?xs)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 17)),
        template_equation
         (template_app (template_hole 15, template_var 1),
          template_app (template_hole 14, template_var 0))],
       template_equation
        (template_app (template_hole 12, template_var 1),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 0)),
                 template_app (template_hole 7, template_var 0)))),
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 14),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 0)))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 7, template_var 0))),
                 template_var 1)))))))]:
   (string * thm * template) list
### theory "Draft.Binomial_QueueMoreTemplates"
### 0.283s elapsed time, 0.361s cpu time, 0.000s GC time
val it = (): unit
