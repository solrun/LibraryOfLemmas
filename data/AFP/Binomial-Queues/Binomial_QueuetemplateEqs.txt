   [("Binomial_Queue.is_binqueue_simp", "is_binqueue ?l [] = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Binomial_Queue.is_heap_list_simps", "is_heap_list ?h [] = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Binomial_Queue.least_simps", "least None ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Binomial_Queue.least_simps", "least ?x None = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Binomial_Queue.find_simps", "Binomial_Queue.find ?a [] = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Binomial_Queue.find_min_single", "find_min [?x] = ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 0)),
    ("Binomial_Queue.is_bintree_list_triv",
     "is_bintree_list 0 ?ts = (?ts = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Binomial_Queue.is_bintree_list_triv",
     "is_bintree_list ?l [] = (?l = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Binomial_Queue.min_simps",
     "Binomial_Queue.min (None # ?xs) = Binomial_Queue.min ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Binomial_Queue.find_min_simps",
     "find_min (None # ?xs) = find_min ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Binomial_Queue.normalized_simps",
     "normalized (Some ?t # ?xs) = normalized ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Binomial_Queue.min_eq_find_min_None",
     "(Binomial_Queue.min ?xs = None) = (find_min ?xs = None)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Binomial_Queue.find_simps",
     "Binomial_Queue.find ?a (None # ?xs) = Binomial_Queue.find ?a ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Binomial_Queue.is_binqueue_simp",
     "is_binqueue ?l (None # ?xs) = is_binqueue (Suc ?l) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Binomial_Queue.meld_singleton_add",
     "meld [Some ?t] ?xs = add (Some ?t) ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Binomial_Queue.normalized_last_not_None",
     "normalized ?xs = (?xs = [] | last ?xs ~= None)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_dunno)),
    ("Binomial_Queue.normalized_simps",
     "normalized (None # ?xs) = (?xs ~= [] & normalized ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            )],
       template_dunno)),
    ("Binomial_Queue.insert_simps",
     "Binomial_Queue.insert ?a ?v [] = [Some (bintree.Node ?a ?v [])]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 4),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_hole 0))),
         template_hole 4))),
    ("Binomial_Queue.min_simps",
     "Binomial_Queue.min (Some ?t # ?xs) =
      least (Some (priority ?t)) (Binomial_Queue.min ?xs)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app (template_hole 5, template_var 0)))),
    ("Binomial_Queue.insert_simps",
     "Binomial_Queue.insert ?a ?v (None # ?xs) =
      Some (bintree.Node ?a ?v []) # ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_hole 0))),
         template_var 0))),
    ("Binomial_Queue.least_simps",
     "least (Some ?x') (Some ?y') =
      (if ?x' <= ?y' then Some ?x' else Some ?y')",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Binomial_Queue.min_None_None",
     "(Binomial_Queue.min ?xs = None) = (?xs = [] | set ?xs = {None})",
     template_bimplication
      (template_equation
        (template_app (template_hole 9, template_var 0), template_hole 8),
       template_dunno)),
    ("Binomial_Queue.is_bintree_list_simp",
     "is_bintree_list (Suc ?l) (?t # ?ts) =
      (is_bintree_list ?l (children ?t) & is_bintree_list ?l ?ts)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 0)))),
    ("Binomial_Queue.find_simps",
     "Binomial_Queue.find ?a (Some ?t # ?xs) =
      (if priority ?t = ?a then Some ?t else Binomial_Queue.find ?a ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                template_var 0))
            )],
       template_dunno)),
    ("Binomial_Queue.min_eq_find_min_Some",
     "(Binomial_Queue.min ?xs = Some ?a) =
      (EX t. find_min ?xs = Some t & priority t = ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 1)),
         template_app (template_hole 7, template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("Binomial_Queue.insert_simps",
     "Binomial_Queue.insert ?a ?v (Some ?t # ?xs) =
      None # add (Some (merge (bintree.Node ?a ?v []) ?t)) ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 3), template_var 2),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 6, template_hole 4),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 2),
                     template_hole 0)),
                 template_var 1))),
           template_var 0)))),
    ("Binomial_Queue.is_heap_list_simps",
     "is_heap_list ?h (?t # ?ts) =
      (is_heap_list ?h ?ts &
       is_heap_list (priority ?t) (children ?t) & ?h <= priority ?t)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 1, template_var 1))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app (template_hole 2, template_var 1)))))),
    ("Binomial_Queue.is_binqueue_simp",
     "is_binqueue ?l (Some ?t # ?xs) =
      (is_bintree_list ?l (children ?t) &
       is_heap_list (priority ?t) (children ?t) &
       is_binqueue (Suc ?l) ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 3, template_var 1))),
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Binomial_Queue.pop_code",
     "pop ?xs =
      (case find_min ?xs of None => (None, ?xs)
       | Some t =>
           (Some (val t, priority t),
            Binomial_Queue.normalize
             (meld (map Some (rev (children t)))
               (map (match (priority t)) ?xs))))",
     template_equation
      (template_app (template_hole 16, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app (template_hole 14, template_hole 13),
               template_var 0)),
           t_empty),
         template_app (template_hole 0, template_var 0))))]
