Loading theory "Draft.PQ" (required by "Draft.PQMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PQMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PQMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PQMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.612s cpu time, 0.038s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PQMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.242s elapsed time, 0.977s cpu time, 0.038s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PQMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.PQ"
### 0.316s elapsed time, 1.258s cpu time, 0.120s GC time
### theory "HOL-Library.Nat_Bijection"
### 0.325s elapsed time, 1.286s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PQMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.758s elapsed time, 2.359s cpu time, 0.311s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.785s elapsed time, 2.290s cpu time, 0.229s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.888s elapsed time, 4.326s cpu time, 0.909s GC time
Loading theory "Draft.Templates" (required by "Draft.PQMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PQMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.481s elapsed time, 0.539s cpu time, 0.071s GC time
Loading theory "Draft.PQMoreTemplates"
val templateLemmas =
   [("PQ.distinct_alist_of", "distinct (pq.alist_of ?q)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("PQ.distinct_fst_alist_of", "distinct (map fst (pq.alist_of ?q))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("PQ.not_is_empty_push", "~ PQ.is_empty (PQ.push ?k ?p ?q)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0))
             )
         )),
    ("PQ.is_empty_empty", "PQ.is_empty ?q = (?q = PQ.empty)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation (template_var 0, template_hole 0))),
    ("PQ.sorted_snd_alist_of", "sorted (map snd (pq.alist_of ?q))",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("PQ.remove_min_empty", "PQ.is_empty ?q ==> remove_min ?q = PQ.empty",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("PQ.is_empty_alist_of", "PQ.is_empty ?q ==> pq.alist_of ?q = []",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("PQ.pop_simps", "PQ.is_empty ?q ==> PQ.pop ?q = None",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("PQ.values_set", "set (PQ.values ?q) = fst ` set (pq.alist_of ?q)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("PQ.priorities_set",
     "set (priorities ?q) = snd ` set (pq.alist_of ?q)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("PQ.not_is_empty_alist_of",
     "~ PQ.is_empty ?q ==> pq.alist_of ?q ~= []",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("PQ.alist_of_eqI", "pq.alist_of ?p = pq.alist_of ?q ==> ?p = ?q",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("PQ.alift_of_remove_min_if",
     "pq.alist_of (remove_min ?q) =
      (if PQ.is_empty ?q then [] else tl (pq.alist_of ?q))",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1),
         template_app
          (template_hole 0,
           template_app (template_hole 5, template_var 0))))),
    ("PQ.map_snd_alist_of",
     "map (the o PQ.priority ?q) (PQ.values ?q) = map snd (pq.alist_of ?q)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app (template_hole 4, template_var 0))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("PQ.values_remove_min",
     "~ PQ.is_empty ?q ==> PQ.values (remove_min ?q) = tl (PQ.values ?q)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("PQ.alist_of_remove_min",
     "~ PQ.is_empty ?q ==>
      pq.alist_of (remove_min ?q) = tl (pq.alist_of ?q)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("PQ.push_values",
     "set (PQ.values (PQ.push ?k ?p ?q)) = set (PQ.values ?q) Un {?k}",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("PQ.image_snd_alist_of",
     "the ` PQ.priority ?q ` set (PQ.values ?q) =
      snd ` set (pq.alist_of ?q)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_hole 8),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)))),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("PQ.pop_simps",
     "~ PQ.is_empty ?q ==> PQ.pop ?q = Some (PQ.min ?q, remove_min ?q)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 0))
            )],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0)))))),
    ("PQ.not_in_first_image", "?x ~: fst ` ?s ==> (?x, ?p) ~: ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 1)
               )
           ))),
    ("PQ.tl_set", "distinct ?q ==> set (tl ?q) = set ?q - {hd ?q}",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0))))),
    ("PQ.priority_Min_priorities",
     "~ PQ.is_empty ?q ==>
      PQ.priority ?q (PQ.min ?q) = Some (Min (set (priorities ?q)))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))))))),
    ("PQ.priority_fst",
     "?xp : set (pq.alist_of ?q) ==>
      PQ.priority ?q (fst ?xp) = Some (snd ?xp)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("PQ.Min_snd_alist_of",
     "~ PQ.is_empty ?q ==>
      Min (snd ` set (pq.alist_of ?q)) = snd (hd (pq.alist_of ?q))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_hole 3,
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))))),
    ("PQ.hd_construct",
     "~ PQ.is_empty ?q ==>
      hd (pq.alist_of ?q) = (PQ.min ?q, the (PQ.priority ?q (PQ.min ?q)))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 2, template_var 0))))))),
    ("PQ.push_priorities",
     "?k : set (PQ.values ?q) ==>
      set (priorities (PQ.push ?k ?p ?q)) = set (priorities ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 1))))),
    ("PQ.alist_of_Abs_pq",
     "[| distinct (map fst ?xs); sorted (map snd ?xs) |]
      ==> pq.alist_of (pq.Abs_pq ?xs) = ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("PQ.priority_Min",
     "~ PQ.is_empty ?q ==>
      PQ.priority ?q (PQ.min ?q) =
      Some (Min (the ` PQ.priority ?q ` set (PQ.values ?q)))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 0),
           template_app (template_hole 7, template_var 0)),
         template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 8, template_var 0)),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))))))))),
    ("PQ.alist_of_push",
     "pq.alist_of (PQ.push ?k ?p ?q) =
      (if ?k ~: set (PQ.values ?q)
       then insort_key snd (?k, ?p) (pq.alist_of ?q) else pq.alist_of ?q)",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0))))),
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app (template_hole 9, template_var 0))),
         template_app (template_hole 9, template_var 0)))),
    ("PQ.push_priorities",
     "?k ~: set (PQ.values ?q) ==>
      set (priorities (PQ.push ?k ?p ?q)) = set (priorities ?q) Un {?p}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("PQ.Min_snd_hd",
     "[| ?q ~= []; sorted (map snd ?q) |]
      ==> Min (snd ` set ?q) = snd (hd ?q)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 5),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 5,
           template_app (template_hole 0, template_var 0))))),
    ("PQ.set_alist_of_remove_min",
     "~ PQ.is_empty ?q ==>
      set (pq.alist_of (remove_min ?q)) =
      set (pq.alist_of ?q) -
      {(PQ.min ?q, the (PQ.priority ?q (PQ.min ?q)))}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 11, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_var 0))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app (template_hole 3, template_var 0))))),
             template_hole 0))))),
    ("PQ.push_commute",
     "[| ?a ~= ?b; ?v ~= ?w |]
      ==> PQ.push ?w ?b (PQ.push ?v ?a ?q) =
          PQ.push ?v ?a (PQ.push ?w ?b ?q)",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.PQMoreTemplates"
### 0.274s elapsed time, 0.377s cpu time, 0.000s GC time
val it = (): unit
