   [("PQ.distinct_alist_of", "distinct (pq.alist_of ?q)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("PQ.distinct_fst_alist_of", "distinct (map fst (pq.alist_of ?q))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("PQ.not_is_empty_push", "~ PQ.is_empty (PQ.push ?k ?p ?q)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0))
             )
         )),
    ("PQ.is_empty_empty", "PQ.is_empty ?q = (?q = PQ.empty)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation (template_var 0, template_hole 0))),
    ("PQ.sorted_snd_alist_of", "sorted (map snd (pq.alist_of ?q))",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("PQ.remove_min_empty", "PQ.is_empty ?q ==> remove_min ?q = PQ.empty",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("PQ.is_empty_alist_of", "PQ.is_empty ?q ==> pq.alist_of ?q = []",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("PQ.pop_simps", "PQ.is_empty ?q ==> PQ.pop ?q = None",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("PQ.values_set", "set (PQ.values ?q) = fst ` set (pq.alist_of ?q)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("PQ.priorities_set",
     "set (priorities ?q) = snd ` set (pq.alist_of ?q)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("PQ.not_is_empty_alist_of",
     "~ PQ.is_empty ?q ==> pq.alist_of ?q ~= []",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("PQ.alist_of_eqI", "pq.alist_of ?p = pq.alist_of ?q ==> ?p = ?q",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("PQ.alift_of_remove_min_if",
     "pq.alist_of (remove_min ?q) =
      (if PQ.is_empty ?q then [] else tl (pq.alist_of ?q))",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1),
         template_app
          (template_hole 0,
           template_app (template_hole 5, template_var 0))))),
    ("PQ.map_snd_alist_of",
     "map (the o PQ.priority ?q) (PQ.values ?q) = map snd (pq.alist_of ?q)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app (template_hole 4, template_var 0))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("PQ.values_remove_min",
     "~ PQ.is_empty ?q ==> PQ.values (remove_min ?q) = tl (PQ.values ?q)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("PQ.alist_of_remove_min",
     "~ PQ.is_empty ?q ==>
      pq.alist_of (remove_min ?q) = tl (pq.alist_of ?q)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("PQ.push_values",
     "set (PQ.values (PQ.push ?k ?p ?q)) = set (PQ.values ?q) Un {?k}",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("PQ.image_snd_alist_of",
     "the ` PQ.priority ?q ` set (PQ.values ?q) =
      snd ` set (pq.alist_of ?q)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_hole 8),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)))),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("PQ.pop_simps",
     "~ PQ.is_empty ?q ==> PQ.pop ?q = Some (PQ.min ?q, remove_min ?q)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_var 0))
            )],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0)))))),
    ("PQ.not_in_first_image", "?x ~: fst ` ?s ==> (?x, ?p) ~: ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)),
                 template_var 1)
               )
           ))),
    ("PQ.tl_set", "distinct ?q ==> set (tl ?q) = set ?q - {hd ?q}",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0))))),
    ("PQ.priority_Min_priorities",
     "~ PQ.is_empty ?q ==>
      PQ.priority ?q (PQ.min ?q) = Some (Min (set (priorities ?q)))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))))))),
    ("PQ.priority_fst",
     "?xp : set (pq.alist_of ?q) ==>
      PQ.priority ?q (fst ?xp) = Some (snd ?xp)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 1))))),
    ("PQ.Min_snd_alist_of",
     "~ PQ.is_empty ?q ==>
      Min (snd ` set (pq.alist_of ?q)) = snd (hd (pq.alist_of ?q))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)))),
         template_app
          (template_hole 3,
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))))),
    ("PQ.hd_construct",
     "~ PQ.is_empty ?q ==>
      hd (pq.alist_of ?q) = (PQ.min ?q, the (PQ.priority ?q (PQ.min ?q)))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app (template_hole 2, template_var 0))))))),
    ("PQ.push_priorities",
     "?k : set (PQ.values ?q) ==>
      set (priorities (PQ.push ?k ?p ?q)) = set (priorities ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 1))))),
    ("PQ.alist_of_Abs_pq",
     "[| distinct (map fst ?xs); sorted (map snd ?xs) |]
      ==> pq.alist_of (pq.Abs_pq ?xs) = ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("PQ.priority_Min",
     "~ PQ.is_empty ?q ==>
      PQ.priority ?q (PQ.min ?q) =
      Some (Min (the ` PQ.priority ?q ` set (PQ.values ?q)))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 0),
           template_app (template_hole 7, template_var 0)),
         template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 8, template_var 0)),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0))))))))),
    ("PQ.alist_of_push",
     "pq.alist_of (PQ.push ?k ?p ?q) =
      (if ?k ~: set (PQ.values ?q)
       then insort_key snd (?k, ?p) (pq.alist_of ?q) else pq.alist_of ?q)",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0))))),
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app (template_hole 9, template_var 0))),
         template_app (template_hole 9, template_var 0)))),
    ("PQ.push_priorities",
     "?k ~: set (PQ.values ?q) ==>
      set (priorities (PQ.push ?k ?p ?q)) = set (priorities ?q) Un {?p}",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("PQ.Min_snd_hd",
     "[| ?q ~= []; sorted (map snd ?q) |]
      ==> Min (snd ` set ?q) = snd (hd ?q)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 5),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 5,
           template_app (template_hole 0, template_var 0))))),
    ("PQ.set_alist_of_remove_min",
     "~ PQ.is_empty ?q ==>
      set (pq.alist_of (remove_min ?q)) =
      set (pq.alist_of ?q) -
      {(PQ.min ?q, the (PQ.priority ?q (PQ.min ?q)))}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 11, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_var 0))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app (template_hole 3, template_var 0))))),
             template_hole 0))))),
    ("PQ.push_commute",
     "[| ?a ~= ?b; ?v ~= ?w |]
      ==> PQ.push ?w ?b (PQ.push ?v ?a ?q) =
          PQ.push ?v ?a (PQ.push ?w ?b ?q)",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0)))))]
