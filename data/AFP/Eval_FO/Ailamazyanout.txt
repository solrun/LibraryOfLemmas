Loading theory "Containers.Equal" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.Set_Impl" via "Containers.DList_Set")
Loading theory "Containers.Extend_Partial_Order" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Set_Linorder")
Loading theory "Deriving.Comparator" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Containers.List_Fusion" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Set_Linorder" via "Containers.Lexicographic_Order")
locale equal_base
  fixes equal :: "'a => 'a => bool"
locale Equal.equal
  fixes equal :: "'a => 'a => bool"
  assumes "equal equal"
### theory "Containers.Equal"
### 0.038s elapsed time, 0.187s cpu time, 0.000s GC time
Loading theory "Containers.Closure_Set" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.Set_Impl")
Proofs for inductive predicate(s) "terminates_onp"
  Proving monotonicity ...
locale equal_base
  fixes equal :: "'a => 'a => bool"
### theory "Containers.Closure_Set"
### 0.037s elapsed time, 0.152s cpu time, 0.000s GC time
Loading theory "Deriving.Derive_Manager" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Containers_Generator")
signature DERIVE_MANAGER =
  sig
    val derive: string -> string -> string -> theory -> theory
    val derive_cmd: string -> string -> string -> theory -> theory
    val print_info: theory -> unit
    val register_derive:
       string ->
         string ->
           (string -> string -> theory -> theory) -> theory -> theory
  end
structure Derive_Manager: DERIVE_MANAGER
### theory "Deriving.Derive_Manager"
### 0.051s elapsed time, 0.192s cpu time, 0.032s GC time
Loading theory "Deriving.Generator_Aux" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Containers_Generator")
### theory "Containers.Extend_Partial_Order"
### 0.135s elapsed time, 0.563s cpu time, 0.032s GC time
Loading theory "Draft.FO" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Eval_FO")
signature BNF_ACCESS =
  sig
    val bnf_types: Proof.context -> string list -> typ list
    val case_consts: Proof.context -> string list -> term list
    val case_simps: Proof.context -> string list -> thm list list
    val case_thms: Proof.context -> string list -> thm list
    val constr_argument_types:
       Proof.context -> string list -> typ list list list
    val constr_terms: Proof.context -> string -> term list
    val distinct_thms: Proof.context -> string list -> thm list list
    val induct_thms: Proof.context -> string list -> thm list
    val inject_thms: Proof.context -> string list -> thm list list
    val map_comps: Proof.context -> string list -> thm list
    val map_simps: Proof.context -> string list -> thm list list
    val map_terms: Proof.context -> string list -> term list
    val set_simps: Proof.context -> string list -> thm list list
    val set_terms: Proof.context -> string list -> term list list
  end
structure Bnf_Access: BNF_ACCESS
locale list
  fixes g :: "('a, 's) generator"
signature GENERATOR_AUX =
  sig
    val OF_option: thm -> thm option list -> thm
    val add_used_tycos:
       Proof.context -> string -> string list -> string list
    val alist_to_string: (string * 'a) list -> string
    val conjI_tac:
       thm list ->
         Proof.context ->
           'a list -> (Proof.context -> int -> tactic) -> tactic
    val create_map:
       (typ -> term) ->
         (string * typ -> 'a -> term) ->
           'a ->
             (typ -> bool) ->
               (local_theory -> string -> bool list) ->
                 (local_theory -> string -> term) ->
                   (local_theory -> string -> 'a -> term) ->
                     string list ->
                       (local_theory -> string -> 'a) ->
                         typ -> local_theory -> term
    val create_partial:
       'a ->
         (typ -> bool) ->
           (local_theory -> string -> bool list) ->
             (local_theory -> string -> term) ->
               (local_theory -> string -> 'a -> term) ->
                 string list ->
                   (local_theory -> string -> 'a) ->
                     typ -> local_theory -> term
    val define_overloaded:
       string * term -> local_theory -> thm * local_theory
    val define_overloaded_generic:
       Attrib.binding * term -> local_theory -> thm * local_theory
    val drop_last: 'a list -> 'a list
    val freeify_tvars: typ -> typ
    val ind_case_to_idxs: 'a list list -> int -> int * int
    val infer_type: Proof.context -> term -> term
    val ints_to_subscript: int list -> string
    val is_class_instance: theory -> string -> sort -> bool
    val lambdas: term list -> term -> term
    val mk_case_tac:
       Proof.context ->
         term option list list ->
           thm ->
             (int ->
                Proof.context * thm list * (string * cterm) list -> tactic)
               -> tactic
    val mk_def: typ -> string -> term -> term
    val mk_id: typ -> term
    val mk_infer_const: string -> Proof.context -> term -> term
    val mutual_recursive_types:
       string -> Proof.context -> string list * typ list
    val prove_multi_future:
       Proof.context ->
         string list ->
           term list ->
             term list ->
               ({context: Proof.context, prems: thm list} -> tactic) ->
                 thm list
    val recursor:
       (string -> 'a) * ('a -> bool list) * string list ->
         bool ->
           (typ -> 'b) ->
             (typ -> 'b) ->
               (typ -> 'b) ->
                 ((typ * 'b option) list * 'a -> 'b) -> typ -> 'b
    val rename_types: (typ * typ) list -> term -> term
    val split_IHs:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list -> thm list -> thm list list
    val std_recursor_tac:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list ->
           ('a -> thm) ->
             thm list -> typ -> thm list -> Proof.context -> tactic
    val sub: string -> string
    val subT: string -> typ -> string
    val typ_and_vs_of_typname:
       theory -> string -> sort -> typ * (string * sort) list
    val typ_and_vs_of_used_typname:
       string ->
         bool list -> string list -> typ * (string * string list) list
    val type_parameters:
       typ -> Proof.context -> (string * sort) list * typ list
  end
structure Generator_Aux: GENERATOR_AUX
### theory "Deriving.Generator_Aux"
### 0.161s elapsed time, 0.635s cpu time, 0.073s GC time
Loading theory "Deriving.Equality_Generator" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.Set_Impl" via "Containers.DList_Set" via "Containers.Collection_Eq" via "Deriving.Equality_Instances")
consts
  list_has_next :: "'a list => bool"
### No equation for constructor "[]"
consts
  list_next :: "'a list => 'a * 'a list"
Found termination order: "{}"
locale comparator
  fixes comp :: "'a => 'a => order"
  assumes "comparator comp"
Found termination order: "{}"
signature EQUALITY_GENERATOR =
  sig
    val ensure_info: equality_type -> string -> local_theory -> local_theory
    datatype equality_type = BNF | EQ
    val generate_equality:
       equality_type -> string -> local_theory -> local_theory
    val generate_equalitys_from_bnf_fp:
       string ->
         local_theory ->
           ((term * thm list) list * (term * thm) list) * local_theory
    val get_info: Proof.context -> string -> info option
    type info =
       {equality: term,
        equality_def: thm option,
        equality_thm: thm,
        map: term,
        map_comp: thm option,
        partial_equality_thm: thm,
        pequality: term, used_positions: bool list}
    val register_equality_of: string -> local_theory -> local_theory
    val register_foreign_equality:
       typ -> term -> thm -> local_theory -> local_theory
    val register_foreign_partial_and_full_equality:
       string ->
         term ->
           term ->
             term ->
               thm option ->
                 thm option ->
                   thm -> thm -> bool list -> local_theory -> local_theory
  end
structure Equality_Generator: EQUALITY_GENERATOR
### theory "Deriving.Equality_Generator"
### 0.271s elapsed time, 1.063s cpu time, 0.102s GC time
Loading theory "Deriving.Equality_Instances" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.Set_Impl" via "Containers.DList_Set" via "Containers.Collection_Eq")
Found termination order: "case_sum (%x. Suc 0) (%x. 0) <*mlex*> {}"
generating equality for type "Sum_Type.sum"
Found termination order: "{}"
generating equality for type "List.list"
generating equality for type "Product_Type.prod"
generating equality for type "Option.option"
Found termination order: "{}"
### theory "Deriving.Equality_Instances"
### 0.082s elapsed time, 0.322s cpu time, 0.000s GC time
Loading theory "Draft.Infinite" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Eval_FO")
### Additional type variable(s) in locale specification "infinite": 'a
Found termination order: "{}"
class infinite = type +
  assumes "infinite_UNIV": "infinite UNIV"
### theory "Deriving.Comparator"
### 0.705s elapsed time, 2.809s cpu time, 0.207s GC time
Loading theory "Deriving.Compare" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
### theory "Draft.Infinite"
### 0.067s elapsed time, 0.268s cpu time, 0.000s GC time
Loading theory "Deriving.Comparator_Generator" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "filter_has_next"
  Proving monotonicity ...
class compare = type +
  fixes compare :: "'a => 'a => order"
  assumes "comparator_compare": "comparator compare"
Found termination order: "{}"
class compare_order = compare + ord +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
### theory "Containers.List_Fusion"
### 0.960s elapsed time, 3.804s cpu time, 0.330s GC time
Loading theory "HOL-Library.AList" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.AssocList" via "HOL-Library.DAList")
Found termination order: "size_list size <*mlex*> {}"
consts
  update :: "'key => 'val => ('key * 'val) list => ('key * 'val) list"
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
class compare_order = compare + linorder +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
signature COMPARATOR_GENERATOR =
  sig
    datatype comparator_type = BNF | Linorder
    val ensure_info:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparator:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparators_from_bnf_fp:
       string ->
         local_theory ->
           ((term * thm list) list * (term * thm) list) * local_theory
    val get_info: Proof.context -> string -> info option
    type info =
       {comp: term,
        comp_def: thm option,
        comp_thm: thm,
        map: term,
        map_comp: thm option,
        partial_comp_thms: thm list, pcomp: term, used_positions: bool list}
    val register_comparator_of: string -> local_theory -> local_theory
    val register_foreign_comparator:
       typ -> term -> thm -> local_theory -> local_theory
    val register_foreign_partial_and_full_comparator:
       string ->
         term ->
           term ->
             term ->
               thm option ->
                 thm option ->
                   thm ->
                     thm ->
                       thm ->
                         thm -> bool list -> local_theory -> local_theory
  end
structure Comparator_Generator: COMPARATOR_GENERATOR
### theory "Deriving.Comparator_Generator"
### 0.848s elapsed time, 3.185s cpu time, 0.837s GC time
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Set_Linorder" via "Containers.Containers_Auxiliary" via "HOL-Library.Monad_Syntax")
signature COMPARE_CODE =
  sig
    val change_compare_code:
       term -> string list -> local_theory -> local_theory
  end
structure Compare_Code: COMPARE_CODE
### theory "Deriving.Compare"
### 0.884s elapsed time, 3.323s cpu time, 0.837s GC time
Loading theory "Deriving.Compare_Generator" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Deriving.Compare_Instances")
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.084s elapsed time, 0.337s cpu time, 0.000s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Set_Linorder" via "Containers.Containers_Auxiliary")
### theory "HOL-Library.Monad_Syntax"
### 0.039s elapsed time, 0.157s cpu time, 0.000s GC time
Loading theory "Containers.Containers_Auxiliary" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Set_Linorder")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Dropping global mixfix syntax: "less_eq_prod" (infix \<open>\<sqsubseteq>\<close> 50)
### Dropping global mixfix syntax: "less_prod" (infix \<open>\<sqsubset>\<close> 50)
### Dropping global mixfix syntax: "less_eq_prod'" (infix \<open>\<sqsubseteq>\<close> 50)
### Dropping global mixfix syntax: "less_prod'" (infix \<open>\<sqsubset>\<close> 50)
### theory "Containers.Containers_Auxiliary"
### 0.230s elapsed time, 0.902s cpu time, 0.158s GC time
Loading theory "HOL-Library.Char_ord" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Set_Linorder" via "Containers.Lexicographic_Order")
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
signature COMPARE_GENERATOR =
  sig
    val compare_instance:
       Comparator_Generator.comparator_type -> string -> theory -> theory
    val compare_order_instance_via_comparator_of: string -> theory -> theory
    val compare_order_instance_via_compare: string -> theory -> theory
  end
structure Compare_Generator: COMPARE_GENERATOR
### theory "Deriving.Compare_Generator"
### 0.361s elapsed time, 1.431s cpu time, 0.158s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AilamazyanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  char :: distrib_lattice
  inf_char == inf :: char => char => char
  sup_char == sup :: char => char => char
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "HOL-Library.Char_ord"
### 0.074s elapsed time, 0.292s cpu time, 0.000s GC time
Loading theory "Containers.Lexicographic_Order" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Set_Linorder")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.533s cpu time, 0.096s GC time
Loading theory "Deriving.Compare_Instances" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
### theory "HOL-Library.AList"
### 1.544s elapsed time, 5.715s cpu time, 1.774s GC time
deriving "compare_order" instance for type "Int.int"
deriving "compare" instance for type "Int.int"
Loading theory "HOL-Library.DAList" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.AssocList")
deriving "compare_order" instance for type "Code_Numeral.integer"
deriving "compare" instance for type "Code_Numeral.integer"
deriving "compare_order" instance for type "Nat.nat"
deriving "compare" instance for type "Nat.nat"
deriving "compare_order" instance for type "String.char"
deriving "compare" instance for type "String.char"
### theory "Containers.Lexicographic_Order"
### 0.566s elapsed time, 2.011s cpu time, 0.902s GC time
Loading theory "HOL-Library.Mapping" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl")
deriving "compare" instance for type "Sum_Type.sum"
generating comparator for type "Sum_Type.sum"
deriving "compare" instance for type "List.list"
generating comparator for type "List.list"
deriving "compare" instance for type "Product_Type.prod"
generating comparator for type "Product_Type.prod"
deriving "compare" instance for type "Option.option"
generating comparator for type "Option.option"
Found termination order: "{}"
instantiation
  alist :: (equal, equal) equal
  equal_alist == equal_class.equal ::
    ('a, 'b) alist => ('a, 'b) alist => bool
instantiation
  alist :: (type, type) size
  size_alist == size :: ('a, 'b) alist => nat
Found termination order: "{}"
deriving "compare" instance for type "HOL.bool"
deriving "compare" instance for type "Product_Type.unit"
deriving "compare_order" instance for type "HOL.bool"
deriving "compare_order" instance for type "Product_Type.unit"
### theory "Deriving.Compare_Instances"
### 0.752s elapsed time, 2.745s cpu time, 0.904s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AilamazyanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### Additional type variable(s) in specification of "random_aux_alist_rel": 'a, 'b
### Additional type variable(s) in specification of "random_aux_alist_dom": 'a, 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
instantiation
  alist :: (random, random) random
  random_alist == random_class.random ::
    natural
    => natural * natural
       => (('a, 'b) alist * (unit => term)) * natural * natural
instantiation
  alist :: (exhaustive, exhaustive) exhaustive
  exhaustive_alist == exhaustive_class.exhaustive ::
    (('a, 'b) alist => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  mapping :: (type, type) equal
  equal_mapping == equal_class.equal ::
    ('a, 'b) mapping => ('a, 'b) mapping => bool
instantiation
  alist :: (full_exhaustive, full_exhaustive) full_exhaustive
  full_exhaustive_alist == full_exhaustive_class.full_exhaustive ::
    (('a, 'b) alist * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
### theory "HOL-Library.Nat_Bijection"
### 0.342s elapsed time, 1.345s cpu time, 0.145s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AilamazyanMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
### theory "HOL-Library.DAList"
### 0.812s elapsed time, 3.200s cpu time, 0.344s GC time
Loading theory "Containers.AssocList" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl")
consts
  update_with_aux ::
    "'val
     => 'key => ('val => 'val) => ('key * 'val) list => ('key * 'val) list"
Found termination order: "size <*mlex*> {}"
locale combine_mapping_abel_semigroup
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "combine_mapping_abel_semigroup (\<^bold>*)"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
### theory "Containers.AssocList"
### 0.644s elapsed time, 2.338s cpu time, 1.093s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Set_Linorder" via "HOL-Library.Cardinality")
  Proving monotonicity ...
### theory "HOL-Library.Mapping"
### 1.445s elapsed time, 5.487s cpu time, 1.438s GC time
Loading theory "HOL-Library.RBT_Impl" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.RBT_ext")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.301s elapsed time, 4.913s cpu time, 1.567s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AilamazyanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Phantom_Type"
### 0.614s elapsed time, 2.419s cpu time, 0.372s GC time
Loading theory "Containers.Containers_Generator" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order")
### theory "Draft.FO"
### 4.486s elapsed time, 17.100s cpu time, 3.882s GC time
Loading theory "Draft.Eval_FO" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan")
### theory "HOL-Library.Set_Algebras"
### 0.236s elapsed time, 0.933s cpu time, 0.121s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order" via "Containers.Set_Linorder")
### Additional type variable(s) in locale specification "CARD_1": 'a
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
### Additional type variable(s) in locale specification "card2": 'a
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
signature CONTAINERS_GENERATOR =
  sig
    val HOLogic_list_conj: term list -> term
    val all_tys: term -> typ list -> term -> term
    val derive_is_c_dots_lemma:
       typ -> string -> thm list -> string -> theory -> theory
    val derive_none:
       string -> sort -> (typ -> term) -> string -> theory -> theory
    val derive_set_map_impl:
       string ->
         sort ->
           (string * term) list -> string -> string -> theory -> theory
    val is_class_instance: theory -> string -> sort -> bool
    val mk_Some: term -> term
    val mk_is_c_dots: typ -> string -> term
    val register_is_c_dots_lemma:
       string -> string -> thm -> theory -> theory
  end
structure Containers_Generator: CONTAINERS_GENERATOR
### theory "Containers.Containers_Generator"
### 0.467s elapsed time, 1.849s cpu time, 0.237s GC time
Loading theory "Containers.Collection_Enum" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.Set_Impl")
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
class cenum = type +
  fixes
    cEnum ::
      "('a list * (('a => bool) => bool) * (('a => bool) => bool)) option"
  assumes
    "UNIV_cenum":
      "!!enum enum_all enum_ex.
          cEnum = Some (enum, enum_all, enum_ex) ==> UNIV = set enum"
    and
    "cenum_all_UNIV":
      "!!enum enum_all enum_ex P.
          cEnum = Some (enum, enum_all, enum_ex) ==>
          enum_all P = Ball UNIV P"
    and
    "cenum_ex_UNIV":
      "!!enum enum_all enum_ex P.
          cEnum = Some (enum, enum_all, enum_ex) ==> enum_ex P = Bex UNIV P"
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
consts
  entries :: "('a, 'b) rbt => ('a * 'b) list"
signature CENUM_GENERATOR =
  sig val derive_no_cenum: string -> theory -> theory end
structure Cenum_Generator: CENUM_GENERATOR
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
### Rewrite rule not in simpset:
### Wellfounded.accp all_n_lists_rel (?P1, ?n1) ==>
### all_n_lists ?P1 ?n1 ==
### if ?n1 = 0 then ?P1 []
### else cenum_all (%x. all_n_lists (%xs. ?P1 (x # xs)) (?n1 - 1))
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
### Rewrite rule not in simpset:
### Wellfounded.accp ex_n_lists_rel (?P1, ?n1) ==>
### ex_n_lists ?P1 ?n1 ==
### if ?n1 = 0 then ?P1 []
### else cenum_ex (%x. ex_n_lists (%xs. ?P1 (x # xs)) (?n1 - 1))
consts
  rbt_sorted :: "('a, 'b) rbt => bool"
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
locale eval_fo
  fixes wf :: "('a, 'b) fo_fmla => ('b * nat => 'a list set) => 't => bool"
    and abs :: "'a fo_term list => 'a list set => 't"
    and rep :: "'t => 'a list set"
    and res :: "'t => 'a eval_res"
    and eval_bool :: "bool => 't"
    and eval_eq :: "'a fo_term => 'a fo_term => 't"
    and eval_neg :: "nat list => 't => 't"
    and eval_conj :: "nat list => 't => nat list => 't => 't"
    and eval_ajoin :: "nat list => 't => nat list => 't => 't"
    and eval_disj :: "nat list => 't => nat list => 't => 't"
    and eval_exists :: "nat => nat list => 't => 't"
    and eval_forall :: "nat => nat list => 't => 't"
  assumes
    "eval_fo wf abs rep res eval_bool eval_eq eval_neg eval_conj eval_ajoin
      eval_disj eval_exists eval_forall"
instantiation
  fun :: (cenum, cenum) cenum
  cEnum_fun == cEnum ::
    (('a => 'b) list *
     ((('a => 'b) => bool) => bool) * ((('a => 'b) => bool) => bool)) option
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
### Ambiguous input (line 136 of "$AFP/Containers/Collection_Enum.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_CENUM" ("\<^type>fun" ("_position_sort" 'a) ("_position_sort" 'b)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CENUM" ("_position_sort" 'a)))
###       ("_case2" ("_case1" ("_position" None) ("_position" None))
###         ("_case1"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" enum_a)
###               ("_tuple_args" ("_position" enum_all_a)
###                 ("_tuple_arg" ("_position" enum_ex_a)))))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CENUM" ("_position_sort" 'b)))
###             ("_case2" ("_case1" ("_position" None) ("_position" None))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" enum_b)
###                     ("_tuple_args" ("_position" enum_all_b)
###                       ("_tuple_arg" ("_position" enum_ex_b)))))
###                 ("_applC" ("_position" Some)
###                   ("_tuple"
###                     ("_applC" ("_position" map)
###                       ("_cargs"
###                         ("_lambda" ("_position" ys)
###                           ("\<^const>Fun.comp" ("_position" the)
###                             ("_applC" ("_position" map_of)
###                               ("_applC" ("_position" zip)
###                                 ("_cargs" ("_position" enum_a)
###                                   ("_position" ys))))))
###                         ("_applC" ("_position" List.n_lists)
###                           ("_cargs"
###                             ("_applC" ("_position" length)
###                               ("_position" enum_a))
###                             ("_position" enum_b)))))
###                     ("_tuple_args"
###                       ("_lambda" ("_position" P)
###                         ("_applC" ("_position" all_n_lists)
###                           ("_cargs" ("_position" enum_all_b)
###                             ("_cargs"
###                               ("_lambda" ("_position" bs)
###                                 ("_applC" ("_position" P)
###                                   ("\<^const>Fun.comp" ("_position" the)
###                                     ("_applC" ("_position" map_of)
### ("_applC" ("_position" zip)
###   ("_cargs" ("_position" enum_a) ("_position" bs)))))))
###                               ("_applC" ("_position" length)
###                                 ("_position" enum_a))))))
###                       ("_tuple_arg"
###                         ("_lambda" ("_position" P)
###                           ("_applC" ("_position" ex_n_lists)
###                             ("_cargs" ("_position" enum_ex_b)
###                               ("_cargs"
###                                 ("_lambda" ("_position" bs)
###                                   ("_applC" ("_position" P)
###                                     ("\<^const>Fun.comp" ("_position" the)
### ("_applC" ("_position" map_of)
###   ("_applC" ("_position" zip)
###     ("_cargs" ("_position" enum_a) ("_position" bs)))))))
###                                 ("_applC" ("_position" length)
###                                   ("_position" enum_a))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_CENUM" ("\<^type>fun" ("_position_sort" 'a) ("_position_sort" 'b)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CENUM" ("_position_sort" 'a)))
###       ("_case2" ("_case1" ("_position" None) ("_position" None))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" enum_a)
###                 ("_tuple_args" ("_position" enum_all_a)
###                   ("_tuple_arg" ("_position" enum_ex_a)))))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CENUM" ("_position_sort" 'b)))
###               ("_case1" ("_position" None) ("_position" None))))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" enum_b)
###                 ("_tuple_args" ("_position" enum_all_b)
###                   ("_tuple_arg" ("_position" enum_ex_b)))))
###             ("_applC" ("_position" Some)
###               ("_tuple"
###                 ("_applC" ("_position" map)
###                   ("_cargs"
###                     ("_lambda" ("_position" ys)
###                       ("\<^const>Fun.comp" ("_position" the)
###                         ("_applC" ("_position" map_of)
###                           ("_applC" ("_position" zip)
###                             ("_cargs" ("_position" enum_a)
###                               ("_position" ys))))))
###                     ("_applC" ("_position" List.n_lists)
###                       ("_cargs"
###                         ("_applC" ("_position" length) ("_position" enum_a))
###                         ("_position" enum_b)))))
###                 ("_tuple_args"
###                   ("_lambda" ("_position" P)
###                     ("_applC" ("_position" all_n_lists)
###                       ("_cargs" ("_position" enum_all_b)
###                         ("_cargs"
###                           ("_lambda" ("_position" bs)
###                             ("_applC" ("_position" P)
###                               ("\<^const>Fun.comp" ("_position" the)
###                                 ("_applC" ("_position" map_of)
###                                   ("_applC" ("_position" zip)
###                                     ("_cargs" ("_position" enum_a)
### ("_position" bs)))))))
###                           ("_applC" ("_position" length)
###                             ("_position" enum_a))))))
###                   ("_tuple_arg"
###                     ("_lambda" ("_position" P)
###                       ("_applC" ("_position" ex_n_lists)
###                         ("_cargs" ("_position" enum_ex_b)
###                           ("_cargs"
###                             ("_lambda" ("_position" bs)
###                               ("_applC" ("_position" P)
###                                 ("\<^const>Fun.comp" ("_position" the)
###                                   ("_applC" ("_position" map_of)
###                                     ("_applC" ("_position" zip)
### ("_cargs" ("_position" enum_a) ("_position" bs)))))))
###                             ("_applC" ("_position" length)
###                               ("_position" enum_a))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  set :: (cenum) cenum
  cEnum_set == cEnum ::
    ('a set list *
     (('a set => bool) => bool) * (('a set => bool) => bool)) option
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  unit :: cenum
  cEnum_unit == cEnum ::
    (unit list * ((unit => bool) => bool) * ((unit => bool) => bool)) option
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  bool :: cenum
  cEnum_bool == cEnum ::
    (bool list * ((bool => bool) => bool) * ((bool => bool) => bool)) option
instantiation
  prod :: (cenum, cenum) cenum
  cEnum_prod == cEnum ::
    (('a * 'b) list *
     (('a * 'b => bool) => bool) * (('a * 'b => bool) => bool)) option
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
consts
  rbt_lookup :: "('a, 'b) rbt => 'a => 'b option"
### Ambiguous input (line 225 of "$AFP/Containers/Collection_Enum.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_CENUM"
###       ("\<^type>Product_Type.prod" ("_position_sort" 'a)
###         ("_position_sort" 'b)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CENUM" ("_position_sort" 'a)))
###       ("_case2" ("_case1" ("_position" None) ("_position" None))
###         ("_case1"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" enum_a)
###               ("_tuple_args" ("_position" enum_all_a)
###                 ("_tuple_arg" ("_position" enum_ex_a)))))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CENUM" ("_position_sort" 'b)))
###             ("_case2" ("_case1" ("_position" None) ("_position" None))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" enum_b)
###                     ("_tuple_args" ("_position" enum_all_b)
###                       ("_tuple_arg" ("_position" enum_ex_b)))))
###                 ("_applC" ("_position" Some)
###                   ("_tuple"
###                     ("_applC" ("_position" List.product)
###                       ("_cargs" ("_position" enum_a) ("_position" enum_b)))
###                     ("_tuple_args"
###                       ("_lambda" ("_position" P)
###                         ("_applC" ("_position" enum_all_a)
###                           ("_lambda" ("_position" x)
###                             ("_applC" ("_position" enum_all_b)
###                               ("_lambda" ("_position" y)
###                                 ("_applC" ("_position" P)
###                                   ("_tuple" ("_position" x)
###                                     ("_tuple_arg" ("_position" y)))))))))
###                       ("_tuple_arg"
###                         ("_lambda" ("_position" P)
###                           ("_applC" ("_position" enum_ex_a)
###                             ("_lambda" ("_position" x)
###                               ("_applC" ("_position" enum_ex_b)
###                                 ("_lambda" ("_position" y)
###                                   ("_applC" ("_position" P)
###                                     ("_tuple" ("_position" x)
### ("_tuple_arg" ("_position" y)))))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_CENUM"
###       ("\<^type>Product_Type.prod" ("_position_sort" 'a)
###         ("_position_sort" 'b)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CENUM" ("_position_sort" 'a)))
###       ("_case2" ("_case1" ("_position" None) ("_position" None))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" enum_a)
###                 ("_tuple_args" ("_position" enum_all_a)
###                   ("_tuple_arg" ("_position" enum_ex_a)))))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CENUM" ("_position_sort" 'b)))
###               ("_case1" ("_position" None) ("_position" None))))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" enum_b)
###                 ("_tuple_args" ("_position" enum_all_b)
###                   ("_tuple_arg" ("_position" enum_ex_b)))))
###             ("_applC" ("_position" Some)
###               ("_tuple"
###                 ("_applC" ("_position" List.product)
###                   ("_cargs" ("_position" enum_a) ("_position" enum_b)))
###                 ("_tuple_args"
###                   ("_lambda" ("_position" P)
###                     ("_applC" ("_position" enum_all_a)
###                       ("_lambda" ("_position" x)
###                         ("_applC" ("_position" enum_all_b)
###                           ("_lambda" ("_position" y)
###                             ("_applC" ("_position" P)
###                               ("_tuple" ("_position" x)
###                                 ("_tuple_arg" ("_position" y)))))))))
###                   ("_tuple_arg"
###                     ("_lambda" ("_position" P)
###                       ("_applC" ("_position" enum_ex_a)
###                         ("_lambda" ("_position" x)
###                           ("_applC" ("_position" enum_ex_b)
###                             ("_lambda" ("_position" y)
###                               ("_applC" ("_position" P)
###                                 ("_tuple" ("_position" x)
###                                   ("_tuple_arg"
###                                     ("_position" y)))))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Cardinality"
### 0.765s elapsed time, 3.038s cpu time, 0.284s GC time
Loading theory "Containers.Collection_Eq" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.Set_Impl" via "Containers.DList_Set")
instantiation
  sum :: (cenum, cenum) cenum
  cEnum_sum == cEnum ::
    (('a + 'b) list *
     (('a + 'b => bool) => bool) * (('a + 'b => bool) => bool)) option
### Ambiguous input (line 237 of "$AFP/Containers/Collection_Enum.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_CENUM"
###       ("\<^type>Sum_Type.sum" ("_position_sort" 'a) ("_position_sort" 'b)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CENUM" ("_position_sort" 'a)))
###       ("_case2" ("_case1" ("_position" None) ("_position" None))
###         ("_case1"
###           ("_applC" ("_position" Some)
###             ("_tuple" ("_position" enum_a)
###               ("_tuple_args" ("_position" enum_all_a)
###                 ("_tuple_arg" ("_position" enum_ex_a)))))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CENUM" ("_position_sort" 'b)))
###             ("_case2" ("_case1" ("_position" None) ("_position" None))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("_tuple" ("_position" enum_b)
###                     ("_tuple_args" ("_position" enum_all_b)
###                       ("_tuple_arg" ("_position" enum_ex_b)))))
###                 ("_applC" ("_position" Some)
###                   ("_tuple"
###                     ("\<^const>List.append"
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" Inl) ("_position" enum_a)))
###                       ("_applC" ("_position" map)
###                         ("_cargs" ("_position" Inr) ("_position" enum_b))))
###                     ("_tuple_args"
###                       ("_lambda" ("_position" P)
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" enum_all_a)
###                             ("_lambda" ("_position" x)
###                               ("_applC" ("_position" P)
###                                 ("_applC" ("_position" Inl)
###                                   ("_position" x)))))
###                           ("_applC" ("_position" enum_all_b)
###                             ("_lambda" ("_position" x)
###                               ("_applC" ("_position" P)
###                                 ("_applC" ("_position" Inr)
###                                   ("_position" x)))))))
###                       ("_tuple_arg"
###                         ("_lambda" ("_position" P)
###                           ("\<^const>HOL.disj"
###                             ("_applC" ("_position" enum_ex_a)
###                               ("_lambda" ("_position" x)
###                                 ("_applC" ("_position" P)
###                                   ("_applC" ("_position" Inl)
###                                     ("_position" x)))))
###                             ("_applC" ("_position" enum_ex_b)
###                               ("_lambda" ("_position" x)
###                                 ("_applC" ("_position" P)
###                                   ("_applC" ("_position" Inr)
###                                     ("_position" x)))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_CENUM"
###       ("\<^type>Sum_Type.sum" ("_position_sort" 'a) ("_position_sort" 'b)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CENUM" ("_position_sort" 'a)))
###       ("_case2" ("_case1" ("_position" None) ("_position" None))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" enum_a)
###                 ("_tuple_args" ("_position" enum_all_a)
###                   ("_tuple_arg" ("_position" enum_ex_a)))))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CENUM" ("_position_sort" 'b)))
###               ("_case1" ("_position" None) ("_position" None))))
###           ("_case1"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" enum_b)
###                 ("_tuple_args" ("_position" enum_all_b)
###                   ("_tuple_arg" ("_position" enum_ex_b)))))
###             ("_applC" ("_position" Some)
###               ("_tuple"
###                 ("\<^const>List.append"
###                   ("_applC" ("_position" map)
###                     ("_cargs" ("_position" Inl) ("_position" enum_a)))
###                   ("_applC" ("_position" map)
###                     ("_cargs" ("_position" Inr) ("_position" enum_b))))
###                 ("_tuple_args"
###                   ("_lambda" ("_position" P)
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" enum_all_a)
###                         ("_lambda" ("_position" x)
###                           ("_applC" ("_position" P)
###                             ("_applC" ("_position" Inl) ("_position" x)))))
###                       ("_applC" ("_position" enum_all_b)
###                         ("_lambda" ("_position" x)
###                           ("_applC" ("_position" P)
###                             ("_applC" ("_position" Inr)
###                               ("_position" x)))))))
###                   ("_tuple_arg"
###                     ("_lambda" ("_position" P)
###                       ("\<^const>HOL.disj"
###                         ("_applC" ("_position" enum_ex_a)
###                           ("_lambda" ("_position" x)
###                             ("_applC" ("_position" P)
###                               ("_applC" ("_position" Inl)
###                                 ("_position" x)))))
###                         ("_applC" ("_position" enum_ex_b)
###                           ("_lambda" ("_position" x)
###                             ("_applC" ("_position" P)
###                               ("_applC" ("_position" Inr)
###                                 ("_position" x)))))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  option :: (cenum) cenum
  cEnum_option == cEnum ::
    ('a option list *
     (('a option => bool) => bool) * (('a option => bool) => bool)) option
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
instantiation
  Enum.finite_1 :: cenum
  cEnum_finite_1 == cEnum ::
    (Enum.finite_1 list *
     ((Enum.finite_1 => bool) => bool) *
     ((Enum.finite_1 => bool) => bool)) option
instantiation
  Enum.finite_2 :: cenum
  cEnum_finite_2 == cEnum ::
    (Enum.finite_2 list *
     ((Enum.finite_2 => bool) => bool) *
     ((Enum.finite_2 => bool) => bool)) option
instantiation
  Enum.finite_3 :: cenum
  cEnum_finite_3 == cEnum ::
    (Enum.finite_3 list *
     ((Enum.finite_3 => bool) => bool) *
     ((Enum.finite_3 => bool) => bool)) option
instantiation
  Enum.finite_4 :: cenum
  cEnum_finite_4 == cEnum ::
    (Enum.finite_4 list *
     ((Enum.finite_4 => bool) => bool) *
     ((Enum.finite_4 => bool) => bool)) option
instantiation
  Enum.finite_5 :: cenum
  cEnum_finite_5 == cEnum ::
    (Enum.finite_5 list *
     ((Enum.finite_5 => bool) => bool) *
     ((Enum.finite_5 => bool) => bool)) option
instantiation
  char :: cenum
  cEnum_char == cEnum ::
    (char list * ((char => bool) => bool) * ((char => bool) => bool)) option
use None as trivial implementation of cenum for type list
registered list in class cenum
use None as trivial implementation of cenum for type nat
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
registered nat in class cenum
use None as trivial implementation of cenum for type int
registered int in class cenum
use None as trivial implementation of cenum for type integer
class ceq = type +
  fixes ceq :: "('a => 'a => bool) option"
  assumes "ceq": "!!eqa. ceq = Some eqa ==> eqa = (=)"
registered integer in class cenum
use None as trivial implementation of cenum for type natural
registered natural in class cenum
use None as trivial implementation of cenum for type literal
registered literal in class cenum
### theory "Containers.Collection_Enum"
### 0.671s elapsed time, 2.657s cpu time, 0.257s GC time
Loading theory "Containers.Set_Linorder" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2" via "Containers.Collection_Order")
consts
  color_of :: "('a, 'b) rbt => color"
consts
  bheight :: "('a, 'b) rbt => nat"
consts
  inv1 :: "('a, 'b) rbt => bool"
consts
  inv1l :: "('a, 'b) rbt => bool"
signature CEQ_GENERATOR =
  sig
    val ceq_instance_via_eq: string -> theory -> theory
    val ceq_instance_via_equality: string -> theory -> theory
    val derive_no_ceq: string -> theory -> theory
  end
structure Ceq_Generator: CEQ_GENERATOR
deriving "ceq" instance for type "Product_Type.unit" via "="
consts
  inv2 :: "('a, 'b) rbt => bool"
derived is_ceq_unit-lemma
### Code generator: dropping subsumed code equation
### CEQ(unit) == Some (=)
deriving "ceq" instance for type "HOL.bool" via "="
derived is_ceq_bool-lemma
deriving "ceq" instance for type "Nat.nat" via "="
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
derived is_ceq_nat-lemma
deriving "ceq" instance for type "Int.int" via "="
derived is_ceq_int-lemma
deriving "ceq" instance for type "Enum.finite_1" via "="
derived is_ceq_finite_1-lemma
deriving "ceq" instance for type "Enum.finite_2" via "="
derived is_ceq_finite_2-lemma
deriving "ceq" instance for type "Enum.finite_3" via "="
derived is_ceq_finite_3-lemma
deriving "ceq" instance for type "Enum.finite_4" via "="
derived is_ceq_finite_4-lemma
deriving "ceq" instance for type "Enum.finite_5" via "="
derived is_ceq_finite_5-lemma
deriving "ceq" instance for type "Code_Numeral.integer" via "="
derived is_ceq_integer-lemma
deriving "ceq" instance for type "Code_Numeral.natural" via "="
derived is_ceq_natural-lemma
deriving "ceq" instance for type "String.char" via "="
derived is_ceq_char-lemma
deriving "ceq" instance for type "String.literal" via "="
derived is_ceq_literal-lemma
deriving "ceq" instance for type "Sum_Type.sum"
derived is_ceq_sum-lemma
deriving "ceq" instance for type "Product_Type.prod"
derived is_ceq_prod-lemma
deriving "ceq" instance for type "List.list"
derived is_ceq_list-lemma
deriving "ceq" instance for type "Option.option"
derived is_ceq_option-lemma
use None as trivial implementation of ceq for type fun
registered fun in class ceq
instantiation
  set :: (ceq) ceq
  ceq_set == ceq :: ('a set => 'a set => bool) option
instantiation
  Predicate.pred :: (ceq) ceq
  ceq_pred == ceq :: ('a Predicate.pred => 'a Predicate.pred => bool) option
### theory "Containers.Collection_Eq"
### 0.565s elapsed time, 2.238s cpu time, 0.192s GC time
Loading theory "Containers.DList_Set" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.Set_Impl")
locale equal_base
  fixes equal :: "'a => 'a => bool"
consts
  list_member :: "'a list => 'a => bool"
consts
  list_distinct :: "'a list => bool"
specification
  finite_complement_partition: finite ?A ==> ?A : infinite_complement_partition
  complement_partition: infinite UNIV ==>
(?A : infinite_complement_partition) =
(- ?A ~: infinite_complement_partition)
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  list_remove1 :: "'a => 'a list => 'a list"
consts
  list_remdups :: "'a list => 'a list"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
locale Equal.equal
  fixes equal :: "'a => 'a => bool"
  assumes "equal equal"
### theory "Draft.Eval_FO"
### 1.782s elapsed time, 7.056s cpu time, 0.811s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AilamazyanMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
### theory "Containers.DList_Set"
### 0.690s elapsed time, 2.726s cpu time, 0.339s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AilamazyanMoreTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class proper_intrvl = ord +
  fixes proper_interval :: "'a option => 'a option => bool"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
class proper_interval = proper_intrvl +
  assumes
    "proper_interval_simps": "proper_interval None None = True"
      "!!y. proper_interval None (Some y) = (EX z. z < y)"
      "!!x. proper_interval (Some x) None = (EX z. x < z)"
      "!!x y. proper_interval (Some x) (Some y) = (EX z>x. z < y)"
class proper_intrvl = ord +
  fixes proper_interval :: "'a option => 'a option => bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.826s elapsed time, 3.281s cpu time, 0.252s GC time
Found termination order: "size <*mlex*> {}"
(if ?x <= ?y then if ?x = ?y then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y = ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y <= ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?x < ?y then ?Q else ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x <= ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y < ?x then ?R else ?P) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x = ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y = ?x then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y < ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x < ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y <= ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x <= ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.045s elapsed time, 7.619s cpu time, 0.761s GC time
Loading theory "Draft.Templates" (required by "Draft.AilamazyanMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.269s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AilamazyanMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.662s elapsed time, 2.615s cpu time, 0.119s GC time
class proper_intrvl = ord +
  fixes proper_interval :: "'a option => 'a option => bool"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. length (snd (snd (snd p)))) <*mlex*>
   (%p. length (fst (snd (snd p)))) <*mlex*> {}"
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
instantiation
  unit :: proper_interval
  proper_interval_unit == proper_interval ::
    unit option => unit option => bool
Found termination order: "{}"
instantiation
  bool :: proper_interval
  proper_interval_bool == proper_interval ::
    bool option => bool option => bool
Found termination order: "{}"
instantiation
  nat :: proper_interval
  proper_interval_nat == proper_interval :: nat option => nat option => bool
Found termination order: "{}"
instantiation
  int :: proper_interval
  proper_interval_int == proper_interval :: int option => int option => bool
Found termination order: "{}"
instantiation
  integer :: proper_interval
  proper_interval_integer == proper_interval ::
    integer option => integer option => bool
instantiation
  natural :: proper_interval
  proper_interval_natural == proper_interval ::
    natural option => natural option => bool
instantiation
  char :: proper_interval
  proper_interval_char == proper_interval ::
    char option => char option => bool
Found termination order: "{}"
instantiation
  Enum.finite_1 :: proper_interval
  proper_interval_finite_1 == proper_interval ::
    Enum.finite_1 option => Enum.finite_1 option => bool
instantiation
  Enum.finite_2 :: proper_interval
  proper_interval_finite_2 == proper_interval ::
    Enum.finite_2 option => Enum.finite_2 option => bool
Found termination order: "{}"
instantiation
  Enum.finite_3 :: proper_interval
  proper_interval_finite_3 == proper_interval ::
    Enum.finite_3 option => Enum.finite_3 option => bool
Found termination order: "{}"
### Ignoring duplicate rewrite rule:
### balance Empty ?s1 ?t1 Empty == Branch B Empty ?s1 ?t1 Empty
### Ignoring duplicate rewrite rule:
### balance (Branch B ?va1 ?vb1 ?vc1 ?vd1) ?s1 ?t1 Empty ==
### Branch B (Branch B ?va1 ?vb1 ?vc1 ?vd1) ?s1 ?t1 Empty
### Ignoring duplicate rewrite rule:
### balance Empty ?s1 ?t1 (Branch B ?va1 ?vb1 ?vc1 ?vd1) ==
### Branch B Empty ?s1 ?t1 (Branch B ?va1 ?vb1 ?vc1 ?vd1)
Found termination order: "{}"
class proper_intrvl = ord +
  fixes proper_interval :: "'a option => 'a option => bool"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
consts
  paint :: "color => ('a, 'b) rbt => ('a, 'b) rbt"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
### theory "Containers.Set_Linorder"
### 6.817s elapsed time, 20.674s cpu time, 1.756s GC time
Loading theory "Containers.Collection_Order" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2")
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
class ccompare = type +
  fixes ccompare :: "('a => 'a => order) option"
  assumes "ccompare": "!!comp. ccompare = Some comp ==> comparator comp"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class ccompare = type +
  fixes ccompare :: "('a => 'a => order) option"
  assumes "ccompare": "!!comp. ccompare = Some comp ==> comparator comp"
signature CCOMPARE_GENERATOR =
  sig
    val ccompare_instance_via_comparator: string -> theory -> theory
    val ccompare_instance_via_compare: string -> theory -> theory
    val derive_no_ccompare: string -> theory -> theory
  end
structure CCompare_Generator: CCOMPARE_GENERATOR
deriving "compare_order" instance for type "Enum.finite_1"
deriving "compare" instance for type "Enum.finite_1"
deriving "compare_order" instance for type "Enum.finite_2"
deriving "compare" instance for type "Enum.finite_2"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
deriving "compare_order" instance for type "Enum.finite_3"
deriving "compare" instance for type "Enum.finite_3"
deriving "compare_order" instance for type "Code_Numeral.natural"
deriving "compare" instance for type "Code_Numeral.natural"
deriving "compare_order" instance for type "String.literal"
deriving "compare" instance for type "String.literal"
deriving "ccompare_order" instance for type "Product_Type.unit" via compare_order
derived is_ccompare_unit-lemma
deriving "ccompare_order" instance for type "HOL.bool" via compare_order
derived is_ccompare_bool-lemma
deriving "ccompare_order" instance for type "Nat.nat" via compare_order
derived is_ccompare_nat-lemma
deriving "ccompare_order" instance for type "Int.int" via compare_order
derived is_ccompare_int-lemma
deriving "ccompare_order" instance for type "Enum.finite_1" via compare_order
derived is_ccompare_finite_1-lemma
deriving "ccompare_order" instance for type "Enum.finite_2" via compare_order
derived is_ccompare_finite_2-lemma
deriving "ccompare_order" instance for type "Enum.finite_3" via compare_order
derived is_ccompare_finite_3-lemma
deriving "ccompare_order" instance for type "Code_Numeral.integer" via compare_order
derived is_ccompare_integer-lemma
deriving "ccompare_order" instance for type "Code_Numeral.natural" via compare_order
derived is_ccompare_natural-lemma
deriving "ccompare_order" instance for type "String.char" via compare_order
derived is_ccompare_char-lemma
deriving "ccompare_order" instance for type "String.literal" via compare_order
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
derived is_ccompare_literal-lemma
use None as trivial implementation of ccompare for type finite_4
registered finite_4 in class ccompare
use None as trivial implementation of ccompare for type finite_5
registered finite_5 in class ccompare
deriving "ccompare" instance for type "Sum_Type.sum"
derived is_ccompare_sum-lemma
deriving "ccompare" instance for type "List.list"
derived is_ccompare_list-lemma
deriving "ccompare" instance for type "Option.option"
derived is_ccompare_option-lemma
deriving "ccompare" instance for type "Product_Type.prod"
derived is_ccompare_prod-lemma
use None as trivial implementation of ccompare for type fun
registered fun in class ccompare
instantiation
  set :: (ccompare) ccompare
  ccompare_set == ccompare :: ('a set => 'a set => order) option
use None as trivial implementation of ccompare for type pred
registered pred in class ccompare
class cproper_interval = ccompare +
  fixes cproper_interval :: "'a option => 'a option => bool"
  assumes
    "cproper_interval":
      "[| ID ccompare ~= None; finite UNIV |]
       ==> class.proper_interval cless cproper_interval"
instantiation
  unit :: cproper_interval
  cproper_interval_unit == cproper_interval ::
    unit option => unit option => bool
instantiation
  bool :: cproper_interval
  cproper_interval_bool == cproper_interval ::
    bool option => bool option => bool
instantiation
  nat :: cproper_interval
  cproper_interval_nat == cproper_interval ::
    nat option => nat option => bool
instantiation
  int :: cproper_interval
  cproper_interval_int == cproper_interval ::
    int option => int option => bool
instantiation
  integer :: cproper_interval
  cproper_interval_integer == cproper_interval ::
    integer option => integer option => bool
instantiation
  natural :: cproper_interval
  cproper_interval_natural == cproper_interval ::
    natural option => natural option => bool
instantiation
  char :: cproper_interval
  cproper_interval_char == cproper_interval ::
    char option => char option => bool
instantiation
  Enum.finite_1 :: cproper_interval
  cproper_interval_finite_1 == cproper_interval ::
    Enum.finite_1 option => Enum.finite_1 option => bool
instantiation
  Enum.finite_2 :: cproper_interval
  cproper_interval_finite_2 == cproper_interval ::
    Enum.finite_2 option => Enum.finite_2 option => bool
instantiation
  Enum.finite_3 :: cproper_interval
  cproper_interval_finite_3 == cproper_interval ::
    Enum.finite_3 option => Enum.finite_3 option => bool
instantiation
  Enum.finite_4 :: cproper_interval
  cproper_interval_finite_4 == cproper_interval ::
    Enum.finite_4 option => Enum.finite_4 option => bool
instantiation
  Enum.finite_5 :: cproper_interval
  cproper_interval_finite_5 == cproper_interval ::
    Enum.finite_5 option => Enum.finite_5 option => bool
instantiation
  sum :: (cproper_interval, cproper_interval) cproper_interval
  cproper_interval_sum == cproper_interval ::
    ('a + 'b) option => ('a + 'b) option => bool
Found termination order: "{}"
Found termination order: "{}"
instantiation
  prod :: (cproper_interval, cproper_interval) cproper_interval
  cproper_interval_prod == cproper_interval ::
    ('a * 'b) option => ('a * 'b) option => bool
Found termination order: "{}"
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
instantiation
  list :: (ccompare) cproper_interval
  cproper_interval_list == cproper_interval ::
    'a list option => 'a list option => bool
instantiation
  String.literal :: cproper_interval
  cproper_interval_literal == cproper_interval ::
    String.literal option => String.literal option => bool
instantiation
  option :: (cproper_interval) cproper_interval
  cproper_interval_option == cproper_interval ::
    'a option option => 'a option option => bool
Found termination order: "{}"
instantiation
  set :: (cproper_interval) cproper_interval
  cproper_interval_set == cproper_interval ::
    'a set option => 'a set option => bool
### Not an equation, in theorem:
### cproper_interval_set_dom (None, None) ==> cproper_interval None None == True
### Not an equation, in theorem:
### cproper_interval_set_dom (None, Some ?B) ==>
### cproper_interval None (Some ?B) == ?B ~= {}
### Not an equation, in theorem:
### cproper_interval_set_dom (Some ?A, None) ==>
### cproper_interval (Some ?A) None == ?A ~= UNIV
### Not an equation, in theorem:
### cproper_interval_set_dom (Some ?A, Some ?B) ==>
### cproper_interval (Some ?A) (Some ?B) ==
### finite UNIV & (EX C. cless ?A C & cless C ?B)
Found termination order: "{}"
instantiation
  fun :: (type, type) cproper_interval
  cproper_interval_fun == cproper_interval ::
    ('a => 'b) option => ('a => 'b) option => bool
### theory "Containers.Collection_Order"
### 1.369s elapsed time, 3.166s cpu time, 0.223s GC time
Found termination order: "{}"
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order:
  "case_sum (%p. size (fst (snd p)))
    (case_sum (%p. size (snd (snd (snd (snd p)))))
      (%p. size (snd p))) <*mlex*>
   case_sum (%x. Suc 0) (%x. 0) <*mlex*>
   case_sum (%x. 0) (case_sum (%x. Suc 0) (%x. 0)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
consts
  rbt_map_entry :: "'a => ('b => 'b) => ('a, 'b) rbt => ('a, 'b) rbt"
consts
  map :: "('a => 'b => 'c) => ('a, 'b) rbt => ('a, 'c) rbt"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order:
  "case_sum (%p. size (fst p)) (%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "{}"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Ambiguous input (line 1808 of "~~/src/HOL/Library/RBT_Impl.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sorted)
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" fst) ("_position" xs)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" sorted)
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" fst) ("_position" ys)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_of)
###         ("_cargs"
###           ("_applC" ("_position" sunion_with)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" xs) ("_position" ys))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" map_of)
###           ("_cargs" ("_position" xs) ("_position" k)))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_applC" ("_position" map_of)
###               ("_cargs" ("_position" ys) ("_position" k))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" v))
###             ("_case_syntax"
###               ("_applC" ("_position" map_of)
###                 ("_cargs" ("_position" ys) ("_position" k)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Some) ("_position" v)))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" w))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" f)
###                       ("_cargs" ("_position" k)
###                         ("_cargs" ("_position" v)
###                           ("_position" w))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" sorted)
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" fst) ("_position" xs)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" sorted)
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" fst) ("_position" ys)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_of)
###         ("_cargs"
###           ("_applC" ("_position" sunion_with)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" xs) ("_position" ys))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" map_of)
###           ("_cargs" ("_position" xs) ("_position" k)))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_applC" ("_position" map_of)
###               ("_cargs" ("_position" ys) ("_position" k))))
###           ("_case2"
###             ("_case1" ("_applC" ("_position" Some) ("_position" v))
###               ("_case_syntax"
###                 ("_applC" ("_position" map_of)
###                   ("_cargs" ("_position" ys) ("_position" k)))
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Some) ("_position" v)))))
###             ("_case1" ("_applC" ("_position" Some) ("_position" w))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" f)
###                   ("_cargs" ("_position" k)
###                     ("_cargs" ("_position" v) ("_position" w))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Ambiguous input (line 2563 of "~~/src/HOL/Library/RBT_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" rbt_lookup)
###       ("_cargs"
###         ("_applC" ("_position" fold)
###           ("_cargs"
###             ("_applC" ("_position" rbt_insert_with_key) ("_position" f))
###             ("_cargs" ("_position" t1) ("_position" t2))))
###         ("_position" k)))
###     ("_case_syntax"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs" ("_position" t1) ("_position" k)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" rbt_lookup)
###             ("_cargs" ("_position" t2) ("_position" k))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" v))
###           ("_case_syntax"
###             ("_applC" ("_position" rbt_lookup)
###               ("_cargs" ("_position" t2) ("_position" k)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Some) ("_position" v)))
###               ("_case1" ("_applC" ("_position" Some) ("_position" w))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" f)
###                     ("_cargs" ("_position" k)
###                       ("_cargs" ("_position" w) ("_position" v)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" rbt_lookup)
###       ("_cargs"
###         ("_applC" ("_position" fold)
###           ("_cargs"
###             ("_applC" ("_position" rbt_insert_with_key) ("_position" f))
###             ("_cargs" ("_position" t1) ("_position" t2))))
###         ("_position" k)))
###     ("_case_syntax"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs" ("_position" t1) ("_position" k)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" rbt_lookup)
###             ("_cargs" ("_position" t2) ("_position" k))))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" Some) ("_position" v))
###             ("_case_syntax"
###               ("_applC" ("_position" rbt_lookup)
###                 ("_cargs" ("_position" t2) ("_position" k)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Some) ("_position" v)))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" w))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" f)
###                 ("_cargs" ("_position" k)
###                   ("_cargs" ("_position" w) ("_position" v)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Ambiguous input (line 2939 of "~~/src/HOL/Library/RBT_Impl.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" rbt_sorted) ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" rbt_sorted) ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs"
###           ("_applC" ("_position" rbt_union_with_key)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" t1) ("_position" t2))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" rbt_lookup)
###           ("_cargs" ("_position" t1) ("_position" k)))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_applC" ("_position" rbt_lookup)
###               ("_cargs" ("_position" t2) ("_position" k))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" v))
###             ("_case_syntax"
###               ("_applC" ("_position" rbt_lookup)
###                 ("_cargs" ("_position" t2) ("_position" k)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Some) ("_position" v)))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" w))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" f)
###                       ("_cargs" ("_position" k)
###                         ("_cargs" ("_position" v)
###                           ("_position" w))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" rbt_sorted) ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" rbt_sorted) ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs"
###           ("_applC" ("_position" rbt_union_with_key)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" t1) ("_position" t2))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" rbt_lookup)
###           ("_cargs" ("_position" t1) ("_position" k)))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_applC" ("_position" rbt_lookup)
###               ("_cargs" ("_position" t2) ("_position" k))))
###           ("_case2"
###             ("_case1" ("_applC" ("_position" Some) ("_position" v))
###               ("_case_syntax"
###                 ("_applC" ("_position" rbt_lookup)
###                   ("_cargs" ("_position" t2) ("_position" k)))
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Some) ("_position" v)))))
###             ("_case1" ("_applC" ("_position" Some) ("_position" w))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" f)
###                   ("_cargs" ("_position" k)
###                     ("_cargs" ("_position" v) ("_position" w))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2972 of "~~/src/HOL/Library/RBT_Impl.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" rbt_sorted) ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" rbt_sorted) ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs"
###           ("_applC" ("_position" rbt_inter_with_key)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" t1) ("_position" t2))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" rbt_lookup)
###           ("_cargs" ("_position" t1) ("_position" k)))
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" v))
###             ("_case_syntax"
###               ("_applC" ("_position" rbt_lookup)
###                 ("_cargs" ("_position" t2) ("_position" k)))
###               ("_case2" ("_case1" ("_position" None) ("_position" None))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" w))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" f)
###                       ("_cargs" ("_position" k)
###                         ("_cargs" ("_position" v)
###                           ("_position" w))))))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" rbt_sorted) ("_position" t1)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" rbt_sorted) ("_position" t2)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rbt_lookup)
###         ("_cargs"
###           ("_applC" ("_position" rbt_inter_with_key)
###             ("_cargs" ("_position" f)
###               ("_cargs" ("_position" t1) ("_position" t2))))
###           ("_position" k)))
###       ("_case_syntax"
###         ("_applC" ("_position" rbt_lookup)
###           ("_cargs" ("_position" t1) ("_position" k)))
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case2"
###             ("_case1" ("_applC" ("_position" Some) ("_position" v))
###               ("_case_syntax"
###                 ("_applC" ("_position" rbt_lookup)
###                   ("_cargs" ("_position" t2) ("_position" k)))
###                 ("_case1" ("_position" None) ("_position" None))))
###             ("_case1" ("_applC" ("_position" Some) ("_position" w))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" f)
###                   ("_cargs" ("_position" k)
###                     ("_cargs" ("_position" v) ("_position" w))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Code generator: dropping subsumed code equation
### keys (Branch ?c ?l ?k ?v ?r) == keys ?l @ ?k # keys ?r
### Code generator: dropping subsumed code equation
### keys Empty == []
### theory "HOL-Library.RBT_Impl"
### 29.497s elapsed time, 54.220s cpu time, 7.783s GC time
Loading theory "Containers.RBT_ext" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2")
Loading theory "Deriving.RBT_Comparator_Impl" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.RBT_Mapping2")
consts
  rbt_comp_lookup :: "('a, 'b) rbt => 'a => 'b option"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Dropping global mixfix syntax: "less_eq_prod'" (infix \<open>\<sqsubseteq>\<close> 50)
### Dropping global mixfix syntax: "less_prod'" (infix \<open>\<sqsubset>\<close> 50)
consts
  RBT_Impl_diag :: "('a, 'b) rbt => ('a * 'a, 'b) rbt"
Found termination order: "{}"
### Missing patterns in function definition:
### rbt_keys_next ([], rbt.Empty) = undefined
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Missing patterns in function definition:
### rbt_entries_next ([], rbt.Empty) = undefined
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Containers.RBT_ext"
### 1.347s elapsed time, 3.593s cpu time, 0.400s GC time
Found termination order:
  "case_sum (%p. size (fst (snd p)))
    (case_sum (%p. size (snd (snd (snd (snd p)))))
      (%p. size (snd p))) <*mlex*>
   case_sum (%x. Suc 0) (%x. 0) <*mlex*>
   case_sum (%x. 0) (case_sum (%x. Suc 0) (%x. 0)) <*mlex*> {}"
consts
  rbt_comp_map_entry :: "'a => ('b => 'b) => ('a, 'b) rbt => ('a, 'b) rbt"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Deriving.RBT_Comparator_Impl"
### 5.050s elapsed time, 9.970s cpu time, 4.063s GC time
Loading theory "Containers.RBT_Mapping2" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl")
### Ambiguous input (line 247 of "$AFP/Containers/RBT_Mapping2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lookup)
###       ("_applC" ("_position" meet)
###         ("_cargs" ("_position" f)
###           ("_cargs"
###             ("_constrain" ("_position" t1)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" mapping_rbt)))
###             ("_position" t2)))))
###     ("_lambda" ("_position" k)
###       ("_case_syntax"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" t1) ("_position" k)))
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" v1))
###             ("_case_syntax"
###               ("_applC" ("_position" lookup)
###                 ("_cargs" ("_position" t2) ("_position" k)))
###               ("_case2" ("_case1" ("_position" None) ("_position" None))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" v2))
###                   ("_applC" ("_position" Some)
###                     ("_applC" ("_position" f)
###                       ("_cargs" ("_position" k)
###                         ("_cargs" ("_position" v1)
###                           ("_position" v2))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lookup)
###       ("_applC" ("_position" meet)
###         ("_cargs" ("_position" f)
###           ("_cargs"
###             ("_constrain" ("_position" t1)
###               ("_tappl" ("_position_sort" 'a) ("_position_sort" 'b)
###                 ("_type_name" mapping_rbt)))
###             ("_position" t2)))))
###     ("_lambda" ("_position" k)
###       ("_case_syntax"
###         ("_applC" ("_position" lookup)
###           ("_cargs" ("_position" t1) ("_position" k)))
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case2"
###             ("_case1" ("_applC" ("_position" Some) ("_position" v1))
###               ("_case_syntax"
###                 ("_applC" ("_position" lookup)
###                   ("_cargs" ("_position" t2) ("_position" k)))
###                 ("_case1" ("_position" None) ("_position" None))))
###             ("_case1" ("_applC" ("_position" Some) ("_position" v2))
###               ("_applC" ("_position" Some)
###                 ("_applC" ("_position" f)
###                   ("_cargs" ("_position" k)
###                     ("_cargs" ("_position" v1) ("_position" v2))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Containers.RBT_Mapping2"
### 0.830s elapsed time, 0.902s cpu time, 0.094s GC time
Loading theory "Containers.RBT_Set2" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl" via "Containers.Set_Impl")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "Containers.RBT_Set2"
### 0.989s elapsed time, 1.097s cpu time, 0.145s GC time
Loading theory "Containers.Set_Impl" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code" via "Containers.Mapping_Impl")
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "length <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
structure Set_Complement_Eqs: NAMED_THMS
### Code generator: dropping subsumed code equation
### Collect ?P == set (filter ?P enum_class.enum)
### Ambiguous input (line 739 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.union" ("_applC" ("_position" RBT_set) ("_position" rbt))
###       ("_applC" ("_position" DList_set) ("_position" dxs)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'b)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''union RBT_set DList_set: ccompare = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt))
###                   ("_applC" ("_position" DList_set) ("_position" dxs)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'b)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position" ''union RBT_set DList_set: ceq = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Set.union"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs)))))))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_applC" ("_position" RBT_set)
###                   ("_applC" ("_position" DList_Set.fold)
###                     ("_cargs" ("_position" RBT_Set2.insert)
###                       ("_cargs" ("_position" dxs)
###                         ("_position" rbt)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.union" ("_applC" ("_position" RBT_set) ("_position" rbt))
###       ("_applC" ("_position" DList_set) ("_position" dxs)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'b)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''union RBT_set DList_set: ccompare = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt))
###                   ("_applC" ("_position" DList_set) ("_position" dxs)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'b)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position" ''union RBT_set DList_set: ceq = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Set.union"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs)))))))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_applC" ("_position" RBT_set)
###               ("_applC" ("_position" DList_Set.fold)
###                 ("_cargs" ("_position" RBT_Set2.insert)
###                   ("_cargs" ("_position" dxs) ("_position" rbt)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 744 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.union"
###       ("_applC" ("_position" DList_set) ("_position" dxs))
###       ("_applC" ("_position" RBT_set) ("_position" rbt)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'b)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''union DList_set RBT_set: ccompare = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt))
###                   ("_applC" ("_position" DList_set) ("_position" dxs)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'b)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position" ''union DList_set RBT_set: ceq = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Set.union"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs)))))))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_applC" ("_position" RBT_set)
###                   ("_applC" ("_position" DList_Set.fold)
###                     ("_cargs" ("_position" RBT_Set2.insert)
###                       ("_cargs" ("_position" dxs)
###                         ("_position" rbt)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.union"
###       ("_applC" ("_position" DList_set) ("_position" dxs))
###       ("_applC" ("_position" RBT_set) ("_position" rbt)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'b)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''union DList_set RBT_set: ccompare = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Set.union"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt))
###                   ("_applC" ("_position" DList_set) ("_position" dxs)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'b)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position" ''union DList_set RBT_set: ceq = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Set.union"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs)))))))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_applC" ("_position" RBT_set)
###               ("_applC" ("_position" DList_Set.fold)
###                 ("_cargs" ("_position" RBT_Set2.insert)
###                   ("_cargs" ("_position" dxs) ("_position" rbt)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 823 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("_applC" ("_position" DList_set) ("_position" dxs))
###       ("_applC" ("_position" RBT_set) ("_position" rbt)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'b)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''inter DList_set RBT_set: ccompare = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Set.inter"
###                   ("_applC" ("_position" DList_set) ("_position" dxs))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'b)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position" ''inter DList_set RBT_set: ceq = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Set.inter"
###                         ("_applC" ("_position" DList_set) ("_position" dxs))
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt)))))))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_applC" ("_position" RBT_set)
###                   ("_applC" ("_position" RBT_Set2.inter_list)
###                     ("_cargs" ("_position" rbt)
###                       ("_applC" ("_position" list_of_dlist)
###                         ("_position" dxs)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter"
###       ("_applC" ("_position" DList_set) ("_position" dxs))
###       ("_applC" ("_position" RBT_set) ("_position" rbt)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'b)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''inter DList_set RBT_set: ccompare = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Set.inter"
###                   ("_applC" ("_position" DList_set) ("_position" dxs))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'b)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position" ''inter DList_set RBT_set: ceq = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Set.inter"
###                         ("_applC" ("_position" DList_set) ("_position" dxs))
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt)))))))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_applC" ("_position" RBT_set)
###               ("_applC" ("_position" RBT_Set2.inter_list)
###                 ("_cargs" ("_position" rbt)
###                   ("_applC" ("_position" list_of_dlist)
###                     ("_position" dxs)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 838 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter" ("_applC" ("_position" RBT_set) ("_position" rbt))
###       ("_applC" ("_position" DList_set) ("_position" dxs)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'b)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''inter RBT_set DList_set: ccompare = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Set.inter"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt))
###                   ("_applC" ("_position" DList_set) ("_position" dxs)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'b)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position" ''inter RBT_set DList_set: ceq = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Set.inter"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs)))))))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_applC" ("_position" RBT_set)
###                   ("_applC" ("_position" RBT_Set2.inter_list)
###                     ("_cargs" ("_position" rbt)
###                       ("_applC" ("_position" list_of_dlist)
###                         ("_position" dxs)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Set.inter" ("_applC" ("_position" RBT_set) ("_position" rbt))
###       ("_applC" ("_position" DList_set) ("_position" dxs)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'b)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''inter RBT_set DList_set: ccompare = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Set.inter"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt))
###                   ("_applC" ("_position" DList_set) ("_position" dxs)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'b)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position" ''inter RBT_set DList_set: ceq = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Set.inter"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs)))))))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_applC" ("_position" RBT_set)
###               ("_applC" ("_position" RBT_Set2.inter_list)
###                 ("_cargs" ("_position" rbt)
###                   ("_applC" ("_position" list_of_dlist)
###                     ("_position" dxs)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Code generator: dropping subsumed code equation
### Inf ?A ?x == INF f\<in>?A. f ?x
### Code generator: dropping subsumed code equation
### Sup ?A ?x == SUP f\<in>?A. f ?x
### Ambiguous input (line 951 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" csorted_list_of_set)
###       ("_applC" ("_position" DList_set) ("_position" dxs)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'b)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''csorted_list_of_set DList_set: ceq = None''))
###               ("_lambda" ("_idtdummy")
###                 ("_applC" ("_position" csorted_list_of_set)
###                   ("_applC" ("_position" DList_set) ("_position" dxs)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'b)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''csorted_list_of_set DList_set: ccompare = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("_applC" ("_position" csorted_list_of_set)
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs)))))))
###               ("_case1" ("_applC" ("_position" Some) ("_position" c))
###                 ("_applC" ("_position" ord.quicksort)
###                   ("_cargs"
###                     ("_applC" ("_position" lt_of_comp) ("_position" c))
###                     ("_applC" ("_position" list_of_dlist)
###                       ("_position" dxs))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" csorted_list_of_set)
###       ("_applC" ("_position" DList_set) ("_position" dxs)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'b)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''csorted_list_of_set DList_set: ceq = None''))
###               ("_lambda" ("_idtdummy")
###                 ("_applC" ("_position" csorted_list_of_set)
###                   ("_applC" ("_position" DList_set) ("_position" dxs)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'b)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''csorted_list_of_set DList_set: ccompare = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("_applC" ("_position" csorted_list_of_set)
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs)))))))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" c))
###             ("_applC" ("_position" ord.quicksort)
###               ("_cargs" ("_applC" ("_position" lt_of_comp) ("_position" c))
###                 ("_applC" ("_position" list_of_dlist)
###                   ("_position" dxs))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
### Code generator: dropping subsumed code equation
### set_eq ?A ?B == ?A <= ?B & ?B <= ?A
### Ambiguous input (line 1326 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_elem)
###       ("_applC" ("_position" DList_set) ("_position" dxs)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal" ("_position" ''the_elem DList_set: ceq = None''))
###               ("_lambda" ("_idtdummy")
###                 ("_applC" ("_position" the_elem)
###                   ("_applC" ("_position" DList_set) ("_position" dxs)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" list_of_dlist) ("_position" dxs))
###             ("_case2" ("_case1" ("_list" ("_position" x)) ("_position" x))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position" ''the_elem DList_set: not unique''))
###                     ("_lambda" ("_idtdummy")
###                       ("_applC" ("_position" the_elem)
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_elem)
###       ("_applC" ("_position" DList_set) ("_position" dxs)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal" ("_position" ''the_elem DList_set: ceq = None''))
###               ("_lambda" ("_idtdummy")
###                 ("_applC" ("_position" the_elem)
###                   ("_applC" ("_position" DList_set) ("_position" dxs)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" list_of_dlist) ("_position" dxs))
###               ("_case1" ("_list" ("_position" x)) ("_position" x))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" Code.abort)
###               ("_cargs"
###                 ("_Literal"
###                   ("_position" ''the_elem DList_set: not unique''))
###                 ("_lambda" ("_idtdummy")
###                   ("_applC" ("_position" the_elem)
###                     ("_applC" ("_position" DList_set)
###                       ("_position" dxs))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1331 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_elem)
###       ("_applC" ("_position" RBT_set) ("_position" rbt)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'b)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''the_elem RBT_set: ccompare = None''))
###               ("_lambda" ("_idtdummy")
###                 ("_applC" ("_position" the_elem)
###                   ("_applC" ("_position" RBT_set) ("_position" rbt)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" RBT_Mapping2.impl_of) ("_position" rbt))
###             ("_case2"
###               ("_case1"
###                 ("_applC" ("_position" RBT_Impl.Branch)
###                   ("_cargs" ("\<^const>Pure.dummy_pattern")
###                     ("_cargs" ("_position" RBT_Impl.Empty)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("\<^const>Pure.dummy_pattern")
###                           ("_position" RBT_Impl.Empty))))))
###                 ("_position" x))
###               ("_case1" ("\<^const>Pure.dummy_pattern")
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position" ''the_elem RBT_set: not unique''))
###                     ("_lambda" ("_idtdummy")
###                       ("_applC" ("_position" the_elem)
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" the_elem)
###       ("_applC" ("_position" RBT_set) ("_position" rbt)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'b)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''the_elem RBT_set: ccompare = None''))
###               ("_lambda" ("_idtdummy")
###                 ("_applC" ("_position" the_elem)
###                   ("_applC" ("_position" RBT_set) ("_position" rbt)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" RBT_Mapping2.impl_of)
###                 ("_position" rbt))
###               ("_case1"
###                 ("_applC" ("_position" RBT_Impl.Branch)
###                   ("_cargs" ("\<^const>Pure.dummy_pattern")
###                     ("_cargs" ("_position" RBT_Impl.Empty)
###                       ("_cargs" ("_position" x)
###                         ("_cargs" ("\<^const>Pure.dummy_pattern")
###                           ("_position" RBT_Impl.Empty))))))
###                 ("_position" x))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" Code.abort)
###               ("_cargs"
###                 ("_Literal" ("_position" ''the_elem RBT_set: not unique''))
###                 ("_lambda" ("_idtdummy")
###                   ("_applC" ("_position" the_elem)
###                     ("_applC" ("_position" RBT_set)
###                       ("_position" rbt))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1387 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Product_Type.product)
###       ("_cargs" ("_applC" ("_position" DList_set) ("_position" dxs))
###         ("_applC" ("_position" DList_set) ("_position" dys))))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''product DList_set DList_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("_applC" ("_position" Product_Type.product)
###                   ("_cargs"
###                     ("_applC" ("_position" DList_set) ("_position" dxs))
###                     ("_applC" ("_position" DList_set)
###                       ("_position" dys))))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'b)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''product DList_set DList_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("_applC" ("_position" Product_Type.product)
###                         ("_cargs"
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs))
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dys))))))))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_applC" ("_position" DList_set)
###                   ("_applC" ("_position" DList_Set.product)
###                     ("_cargs" ("_position" dxs) ("_position" dys))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Product_Type.product)
###       ("_cargs" ("_applC" ("_position" DList_set) ("_position" dxs))
###         ("_applC" ("_position" DList_set) ("_position" dys))))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''product DList_set DList_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("_applC" ("_position" Product_Type.product)
###                   ("_cargs"
###                     ("_applC" ("_position" DList_set) ("_position" dxs))
###                     ("_applC" ("_position" DList_set)
###                       ("_position" dys))))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'b)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''product DList_set DList_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("_applC" ("_position" Product_Type.product)
###                         ("_cargs"
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs))
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dys))))))))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_applC" ("_position" DList_set)
###               ("_applC" ("_position" DList_Set.product)
###                 ("_cargs" ("_position" dxs) ("_position" dys))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1403 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Product_Type.product)
###       ("_cargs" ("_applC" ("_position" RBT_set) ("_position" rbt1))
###         ("_applC" ("_position" RBT_set) ("_position" rbt2))))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'c)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''product RBT_set RBT_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("_applC" ("_position" Product_Type.product)
###                   ("_cargs"
###                     ("_applC" ("_position" RBT_set) ("_position" rbt1))
###                     ("_applC" ("_position" RBT_set)
###                       ("_position" rbt2))))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'd)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''product RBT_set RBT_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("_applC" ("_position" Product_Type.product)
###                         ("_cargs"
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt1))
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt2))))))))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_applC" ("_position" RBT_set)
###                   ("_applC" ("_position" RBT_Set2.product)
###                     ("_cargs" ("_position" rbt1)
###                       ("_position" rbt2))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" Product_Type.product)
###       ("_cargs" ("_applC" ("_position" RBT_set) ("_position" rbt1))
###         ("_applC" ("_position" RBT_set) ("_position" rbt2))))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'c)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''product RBT_set RBT_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("_applC" ("_position" Product_Type.product)
###                   ("_cargs"
###                     ("_applC" ("_position" RBT_set) ("_position" rbt1))
###                     ("_applC" ("_position" RBT_set)
###                       ("_position" rbt2))))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'd)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''product RBT_set RBT_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("_applC" ("_position" Product_Type.product)
###                         ("_cargs"
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt1))
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt2))))))))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_applC" ("_position" RBT_set)
###               ("_applC" ("_position" RBT_Set2.product)
###                 ("_cargs" ("_position" rbt1) ("_position" rbt2))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1470 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.Image"
###       ("_applC" ("_position" DList_set) ("_position" dxs)) ("_position" B))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal" ("_position" ''Image DList_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.Image"
###                   ("_applC" ("_position" DList_set) ("_position" dxs))
###                   ("_position" B))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'b)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position" ''Image DList_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.Image"
###                         ("_applC" ("_position" DList_set) ("_position" dxs))
###                         ("_position" B))))))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_applC" ("_position" DList_Set.fold)
###                   ("_cargs"
###                     ("_lambda"
###                       ("_pttrns"
###                         ("_pattern" ("_position" x) ("_position" y))
###                         ("_position" acc))
###                       ("\<^const>HOL.If"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" B))
###                         ("_applC" ("_position" insert)
###                           ("_cargs" ("_position" y) ("_position" acc)))
###                         ("_position" acc)))
###                     ("_cargs" ("_position" dxs)
###                       ("\<^const>Set.empty"))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.Image"
###       ("_applC" ("_position" DList_set) ("_position" dxs)) ("_position" B))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal" ("_position" ''Image DList_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.Image"
###                   ("_applC" ("_position" DList_set) ("_position" dxs))
###                   ("_position" B))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'b)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position" ''Image DList_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.Image"
###                         ("_applC" ("_position" DList_set) ("_position" dxs))
###                         ("_position" B))))))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_applC" ("_position" DList_Set.fold)
###               ("_cargs"
###                 ("_lambda"
###                   ("_pttrns" ("_pattern" ("_position" x) ("_position" y))
###                     ("_position" acc))
###                   ("\<^const>HOL.If"
###                     ("\<^const>Set.member" ("_position" x) ("_position" B))
###                     ("_applC" ("_position" insert)
###                       ("_cargs" ("_position" y) ("_position" acc)))
###                     ("_position" acc)))
###                 ("_cargs" ("_position" dxs) ("\<^const>Set.empty"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1477 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.Image"
###       ("_applC" ("_position" RBT_set) ("_position" rbt)) ("_position" C))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'c)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal" ("_position" ''Image RBT_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.Image"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt))
###                   ("_position" C))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'd)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position" ''Image RBT_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.Image"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt))
###                         ("_position" C))))))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_applC" ("_position" RBT_Set2.fold)
###                   ("_cargs"
###                     ("_lambda"
###                       ("_pttrns"
###                         ("_pattern" ("_position" x) ("_position" y))
###                         ("_position" acc))
###                       ("\<^const>HOL.If"
###                         ("\<^const>Set.member" ("_position" x)
###                           ("_position" C))
###                         ("_applC" ("_position" insert)
###                           ("_cargs" ("_position" y) ("_position" acc)))
###                         ("_position" acc)))
###                     ("_cargs" ("_position" rbt)
###                       ("\<^const>Set.empty"))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.Image"
###       ("_applC" ("_position" RBT_set) ("_position" rbt)) ("_position" C))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'c)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal" ("_position" ''Image RBT_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.Image"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt))
###                   ("_position" C))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'd)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position" ''Image RBT_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.Image"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt))
###                         ("_position" C))))))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_applC" ("_position" RBT_Set2.fold)
###               ("_cargs"
###                 ("_lambda"
###                   ("_pttrns" ("_pattern" ("_position" x) ("_position" y))
###                     ("_position" acc))
###                   ("\<^const>HOL.If"
###                     ("\<^const>Set.member" ("_position" x) ("_position" C))
###                     ("_applC" ("_position" insert)
###                       ("_cargs" ("_position" y) ("_position" acc)))
###                     ("_position" acc)))
###                 ("_cargs" ("_position" rbt) ("\<^const>Set.empty"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1546 of "$AFP/Containers/Set_Impl.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt1))
###       ("_applC" ("_position" RBT_set) ("_position" rbt2)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp RBT_set RBT_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt1))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt2)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'b)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp RBT_set RBT_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt1))
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt2)))))))
###               ("_case1" ("_applC" ("_position" Some) ("_position" c_b))
###                 ("_case_syntax"
###                   ("_applC" ("_position" ID)
###                     ("_CCOMPARE" ("_position_sort" 'c)))
###                   ("_case2"
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp RBT_set RBT_set: ccompare3 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt1))
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt2)))))))
###                     ("_case1"
###                       ("_applC" ("_position" Some)
###                         ("\<^const>Pure.dummy_pattern"))
###                       ("_applC" ("_position" RBT_Set2.fold)
###                         ("_cargs"
###                           ("_lambda"
###                             ("_pattern" ("_position" x) ("_position" y))
###                             ("_applC" ("_position" RBT_Set2.fold)
###                               ("_cargs"
###                                 ("_lambda"
###                                   ("_pttrns"
###                                     ("_pattern" ("_position" y')
### ("_position" z))
###                                     ("_position" A))
###                                   ("\<^const>HOL.If"
###                                     ("\<^const>HOL.not_equal"
### ("_applC" ("_position" c_b) ("_cargs" ("_position" y) ("_position" y')))
### ("_position" Eq))
###                                     ("_position" A)
###                                     ("_applC" ("_position" insert)
### ("_cargs" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" z)))
###   ("_position" A)))))
###                                 ("_position" rbt2))))
###                           ("_cargs" ("_position" rbt1)
###                             ("\<^const>Set.empty")))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt1))
###       ("_applC" ("_position" RBT_set) ("_position" rbt2)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp RBT_set RBT_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt1))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt2)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'b)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp RBT_set RBT_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt1))
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt2)))))))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" c_b))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'c)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp RBT_set RBT_set: ccompare3 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt1))
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt2)))))))
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("\<^const>Pure.dummy_pattern"))
###                   ("_applC" ("_position" RBT_Set2.fold)
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pattern" ("_position" x) ("_position" y))
###                         ("_applC" ("_position" RBT_Set2.fold)
###                           ("_cargs"
###                             ("_lambda"
###                               ("_pttrns"
###                                 ("_pattern" ("_position" y')
###                                   ("_position" z))
###                                 ("_position" A))
###                               ("\<^const>HOL.If"
###                                 ("\<^const>HOL.not_equal"
###                                   ("_applC" ("_position" c_b)
###                                     ("_cargs" ("_position" y)
### ("_position" y')))
###                                   ("_position" Eq))
###                                 ("_position" A)
###                                 ("_applC" ("_position" insert)
###                                   ("_cargs"
###                                     ("_tuple" ("_position" x)
### ("_tuple_arg" ("_position" z)))
###                                     ("_position" A)))))
###                             ("_position" rbt2))))
###                       ("_cargs" ("_position" rbt1)
###                         ("\<^const>Set.empty")))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt1))
###       ("_applC" ("_position" RBT_set) ("_position" rbt2)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp RBT_set RBT_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt1))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt2)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'b)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp RBT_set RBT_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt1))
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt2)))))))
###               ("_case2"
###                 ("_case1" ("_applC" ("_position" Some) ("_position" c_b))
###                   ("_case_syntax"
###                     ("_applC" ("_position" ID)
###                       ("_CCOMPARE" ("_position_sort" 'c)))
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp RBT_set RBT_set: ccompare3 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt1))
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt2)))))))))
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("\<^const>Pure.dummy_pattern"))
###                   ("_applC" ("_position" RBT_Set2.fold)
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pattern" ("_position" x) ("_position" y))
###                         ("_applC" ("_position" RBT_Set2.fold)
###                           ("_cargs"
###                             ("_lambda"
###                               ("_pttrns"
###                                 ("_pattern" ("_position" y')
###                                   ("_position" z))
###                                 ("_position" A))
###                               ("\<^const>HOL.If"
###                                 ("\<^const>HOL.not_equal"
###                                   ("_applC" ("_position" c_b)
###                                     ("_cargs" ("_position" y)
### ("_position" y')))
###                                   ("_position" Eq))
###                                 ("_position" A)
###                                 ("_applC" ("_position" insert)
###                                   ("_cargs"
###                                     ("_tuple" ("_position" x)
### ("_tuple_arg" ("_position" z)))
###                                     ("_position" A)))))
###                             ("_position" rbt2))))
###                       ("_cargs" ("_position" rbt1)
###                         ("\<^const>Set.empty")))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt1))
###       ("_applC" ("_position" RBT_set) ("_position" rbt2)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp RBT_set RBT_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt1))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt2)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'b)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp RBT_set RBT_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt1))
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt2)))))))))
###           ("_case2"
###             ("_case1" ("_applC" ("_position" Some) ("_position" c_b))
###               ("_case_syntax"
###                 ("_applC" ("_position" ID)
###                   ("_CCOMPARE" ("_position_sort" 'c)))
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp RBT_set RBT_set: ccompare3 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt1))
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt2)))))))))
###             ("_case1"
###               ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###               ("_applC" ("_position" RBT_Set2.fold)
###                 ("_cargs"
###                   ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                     ("_applC" ("_position" RBT_Set2.fold)
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pttrns"
###                             ("_pattern" ("_position" y') ("_position" z))
###                             ("_position" A))
###                           ("\<^const>HOL.If"
###                             ("\<^const>HOL.not_equal"
###                               ("_applC" ("_position" c_b)
###                                 ("_cargs" ("_position" y) ("_position" y')))
###                               ("_position" Eq))
###                             ("_position" A)
###                             ("_applC" ("_position" insert)
###                               ("_cargs"
###                                 ("_tuple" ("_position" x)
###                                   ("_tuple_arg" ("_position" z)))
###                                 ("_position" A)))))
###                         ("_position" rbt2))))
###                   ("_cargs" ("_position" rbt1)
###                     ("\<^const>Set.empty")))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt1))
###       ("_applC" ("_position" RBT_set) ("_position" rbt2)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp RBT_set RBT_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt1))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt2)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'b)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp RBT_set RBT_set: ccompare2 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt1))
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt2)))))))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" c_b))
###                   ("_case_syntax"
###                     ("_applC" ("_position" ID)
###                       ("_CCOMPARE" ("_position_sort" 'c)))
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp RBT_set RBT_set: ccompare3 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt1))
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt2))))))))))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_applC" ("_position" RBT_Set2.fold)
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                   ("_applC" ("_position" RBT_Set2.fold)
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pttrns"
###                           ("_pattern" ("_position" y') ("_position" z))
###                           ("_position" A))
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.not_equal"
###                             ("_applC" ("_position" c_b)
###                               ("_cargs" ("_position" y) ("_position" y')))
###                             ("_position" Eq))
###                           ("_position" A)
###                           ("_applC" ("_position" insert)
###                             ("_cargs"
###                               ("_tuple" ("_position" x)
###                                 ("_tuple_arg" ("_position" z)))
###                               ("_position" A)))))
###                       ("_position" rbt2))))
###                 ("_cargs" ("_position" rbt1) ("\<^const>Set.empty"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1555 of "$AFP/Containers/Set_Impl.thy") produces 14 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt3))
###       ("_applC" ("_position" DList_set) ("_position" dxs1)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position"
###                   ''relcomp RBT_set DList_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                   ("_applC" ("_position" DList_set) ("_position" dxs1)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'd)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp RBT_set DList_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs1)))))))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_case_syntax"
###                   ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'd)))
###                   ("_case2"
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp RBT_set DList_set: ceq2 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt3))
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs1)))))))
###                     ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###                       ("_case_syntax"
###                         ("_applC" ("_position" ID)
###                           ("_CEQ" ("_position_sort" 'e)))
###                         ("_case2"
###                           ("_case1" ("_position" None)
###                             ("_applC" ("_position" Code.abort)
###                               ("_cargs"
###                                 ("_Literal"
###                                   ("_position"
###                                     ''relcomp RBT_set DList_set: ceq3 = None''))
###                                 ("_lambda" ("_idtdummy")
###                                   ("\<^const>Relation.relcomp"
###                                     ("_applC" ("_position" RBT_set)
### ("_position" rbt3))
###                                     ("_applC" ("_position" DList_set)
### ("_position" dxs1)))))))
###                           ("_case1"
###                             ("_applC" ("_position" Some)
###                               ("\<^const>Pure.dummy_pattern"))
###                             ("_applC" ("_position" RBT_Set2.fold)
###                               ("_cargs"
###                                 ("_lambda"
###                                   ("_pattern" ("_position" x)
###                                     ("_position" y))
###                                   ("_applC" ("_position" DList_Set.fold)
###                                     ("_cargs"
### ("_lambda"
###   ("_pttrns" ("_pattern" ("_position" y') ("_position" z)) ("_position" A))
###   ("\<^const>HOL.If"
###     ("_applC" ("_position" eq) ("_cargs" ("_position" y) ("_position" y')))
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" z)))
###         ("_position" A)))
###     ("_position" A)))
### ("_position" dxs1))))
###                                 ("_cargs" ("_position" rbt3)
###                                   ("\<^const>Set.empty"))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt3))
###       ("_applC" ("_position" DList_set) ("_position" dxs1)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position"
###                   ''relcomp RBT_set DList_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                   ("_applC" ("_position" DList_set) ("_position" dxs1)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'd)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp RBT_set DList_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs1)))))))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'd)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp RBT_set DList_set: ceq2 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt3))
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs1)))))))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###                   ("_case_syntax"
###                     ("_applC" ("_position" ID)
###                       ("_CEQ" ("_position_sort" 'e)))
###                     ("_case2"
###                       ("_case1" ("_position" None)
###                         ("_applC" ("_position" Code.abort)
###                           ("_cargs"
###                             ("_Literal"
###                               ("_position"
###                                 ''relcomp RBT_set DList_set: ceq3 = None''))
###                             ("_lambda" ("_idtdummy")
###                               ("\<^const>Relation.relcomp"
###                                 ("_applC" ("_position" RBT_set)
###                                   ("_position" rbt3))
###                                 ("_applC" ("_position" DList_set)
###                                   ("_position" dxs1)))))))
###                       ("_case1"
###                         ("_applC" ("_position" Some)
###                           ("\<^const>Pure.dummy_pattern"))
###                         ("_applC" ("_position" RBT_Set2.fold)
###                           ("_cargs"
###                             ("_lambda"
###                               ("_pattern" ("_position" x) ("_position" y))
###                               ("_applC" ("_position" DList_Set.fold)
###                                 ("_cargs"
###                                   ("_lambda"
###                                     ("_pttrns"
### ("_pattern" ("_position" y') ("_position" z)) ("_position" A))
###                                     ("\<^const>HOL.If"
### ("_applC" ("_position" eq) ("_cargs" ("_position" y) ("_position" y')))
### ("_applC" ("_position" insert)
###   ("_cargs" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" z)))
###     ("_position" A)))
### ("_position" A)))
###                                   ("_position" dxs1))))
###                             ("_cargs" ("_position" rbt3)
###                               ("\<^const>Set.empty"))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt3))
###       ("_applC" ("_position" DList_set) ("_position" dxs1)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position"
###                   ''relcomp RBT_set DList_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                   ("_applC" ("_position" DList_set) ("_position" dxs1)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'd)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp RBT_set DList_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs1)))))))
###               ("_case2"
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("\<^const>Pure.dummy_pattern"))
###                   ("_case_syntax"
###                     ("_applC" ("_position" ID)
###                       ("_CEQ" ("_position_sort" 'd)))
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp RBT_set DList_set: ceq2 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt3))
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs1)))))))))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###                   ("_case_syntax"
###                     ("_applC" ("_position" ID)
###                       ("_CEQ" ("_position_sort" 'e)))
###                     ("_case2"
###                       ("_case1" ("_position" None)
###                         ("_applC" ("_position" Code.abort)
###                           ("_cargs"
###                             ("_Literal"
###                               ("_position"
###                                 ''relcomp RBT_set DList_set: ceq3 = None''))
###                             ("_lambda" ("_idtdummy")
###                               ("\<^const>Relation.relcomp"
###                                 ("_applC" ("_position" RBT_set)
###                                   ("_position" rbt3))
###                                 ("_applC" ("_position" DList_set)
###                                   ("_position" dxs1)))))))
###                       ("_case1"
###                         ("_applC" ("_position" Some)
###                           ("\<^const>Pure.dummy_pattern"))
###                         ("_applC" ("_position" RBT_Set2.fold)
###                           ("_cargs"
###                             ("_lambda"
###                               ("_pattern" ("_position" x) ("_position" y))
###                               ("_applC" ("_position" DList_Set.fold)
###                                 ("_cargs"
###                                   ("_lambda"
###                                     ("_pttrns"
### ("_pattern" ("_position" y') ("_position" z)) ("_position" A))
###                                     ("\<^const>HOL.If"
### ("_applC" ("_position" eq) ("_cargs" ("_position" y) ("_position" y')))
### ("_applC" ("_position" insert)
###   ("_cargs" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" z)))
###     ("_position" A)))
### ("_position" A)))
###                                   ("_position" dxs1))))
###                             ("_cargs" ("_position" rbt3)
###                               ("\<^const>Set.empty"))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt3))
###       ("_applC" ("_position" DList_set) ("_position" dxs1)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position"
###                   ''relcomp RBT_set DList_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                   ("_applC" ("_position" DList_set) ("_position" dxs1)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'd)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp RBT_set DList_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs1)))))))))
###           ("_case2"
###             ("_case1"
###               ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###               ("_case_syntax"
###                 ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'd)))
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp RBT_set DList_set: ceq2 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt3))
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs1)))))))))
###             ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###               ("_case_syntax"
###                 ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###                 ("_case2"
###                   ("_case1" ("_position" None)
###                     ("_applC" ("_position" Code.abort)
###                       ("_cargs"
###                         ("_Literal"
###                           ("_position"
###                             ''relcomp RBT_set DList_set: ceq3 = None''))
###                         ("_lambda" ("_idtdummy")
###                           ("\<^const>Relation.relcomp"
###                             ("_applC" ("_position" RBT_set)
###                               ("_position" rbt3))
###                             ("_applC" ("_position" DList_set)
###                               ("_position" dxs1)))))))
###                   ("_case1"
###                     ("_applC" ("_position" Some)
###                       ("\<^const>Pure.dummy_pattern"))
###                     ("_applC" ("_position" RBT_Set2.fold)
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pattern" ("_position" x) ("_position" y))
###                           ("_applC" ("_position" DList_Set.fold)
###                             ("_cargs"
###                               ("_lambda"
###                                 ("_pttrns"
###                                   ("_pattern" ("_position" y')
###                                     ("_position" z))
###                                   ("_position" A))
###                                 ("\<^const>HOL.If"
###                                   ("_applC" ("_position" eq)
###                                     ("_cargs" ("_position" y)
### ("_position" y')))
###                                   ("_applC" ("_position" insert)
###                                     ("_cargs"
### ("_tuple" ("_position" x) ("_tuple_arg" ("_position" z))) ("_position" A)))
###                                   ("_position" A)))
###                               ("_position" dxs1))))
###                         ("_cargs" ("_position" rbt3)
###                           ("\<^const>Set.empty"))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt3))
###       ("_applC" ("_position" DList_set) ("_position" dxs1)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position"
###                   ''relcomp RBT_set DList_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                   ("_applC" ("_position" DList_set) ("_position" dxs1)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'd)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp RBT_set DList_set: ccompare2 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt3))
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs1)))))))
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("\<^const>Pure.dummy_pattern"))
###                   ("_case_syntax"
###                     ("_applC" ("_position" ID)
###                       ("_CEQ" ("_position_sort" 'd)))
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp RBT_set DList_set: ceq2 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt3))
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs1))))))))))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp RBT_set DList_set: ceq3 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt3))
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs1)))))))
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("\<^const>Pure.dummy_pattern"))
###                   ("_applC" ("_position" RBT_Set2.fold)
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pattern" ("_position" x) ("_position" y))
###                         ("_applC" ("_position" DList_Set.fold)
###                           ("_cargs"
###                             ("_lambda"
###                               ("_pttrns"
###                                 ("_pattern" ("_position" y')
###                                   ("_position" z))
###                                 ("_position" A))
###                               ("\<^const>HOL.If"
###                                 ("_applC" ("_position" eq)
###                                   ("_cargs" ("_position" y)
###                                     ("_position" y')))
###                                 ("_applC" ("_position" insert)
###                                   ("_cargs"
###                                     ("_tuple" ("_position" x)
### ("_tuple_arg" ("_position" z)))
###                                     ("_position" A)))
###                                 ("_position" A)))
###                             ("_position" dxs1))))
###                       ("_cargs" ("_position" rbt3)
###                         ("\<^const>Set.empty")))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt3))
###       ("_applC" ("_position" DList_set) ("_position" dxs1)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position"
###                   ''relcomp RBT_set DList_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                   ("_applC" ("_position" DList_set) ("_position" dxs1)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'd)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp RBT_set DList_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs1)))))))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_case_syntax"
###                   ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'd)))
###                   ("_case2"
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp RBT_set DList_set: ceq2 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt3))
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs1)))))))
###                     ("_case2"
###                       ("_case1"
###                         ("_applC" ("_position" Some) ("_position" eq))
###                         ("_case_syntax"
###                           ("_applC" ("_position" ID)
###                             ("_CEQ" ("_position_sort" 'e)))
###                           ("_case1" ("_position" None)
###                             ("_applC" ("_position" Code.abort)
###                               ("_cargs"
###                                 ("_Literal"
###                                   ("_position"
###                                     ''relcomp RBT_set DList_set: ceq3 = None''))
###                                 ("_lambda" ("_idtdummy")
###                                   ("\<^const>Relation.relcomp"
###                                     ("_applC" ("_position" RBT_set)
### ("_position" rbt3))
###                                     ("_applC" ("_position" DList_set)
### ("_position" dxs1)))))))))
###                       ("_case1"
###                         ("_applC" ("_position" Some)
###                           ("\<^const>Pure.dummy_pattern"))
###                         ("_applC" ("_position" RBT_Set2.fold)
###                           ("_cargs"
###                             ("_lambda"
###                               ("_pattern" ("_position" x) ("_position" y))
###                               ("_applC" ("_position" DList_Set.fold)
###                                 ("_cargs"
###                                   ("_lambda"
###                                     ("_pttrns"
### ("_pattern" ("_position" y') ("_position" z)) ("_position" A))
###                                     ("\<^const>HOL.If"
### ("_applC" ("_position" eq) ("_cargs" ("_position" y) ("_position" y')))
### ("_applC" ("_position" insert)
###   ("_cargs" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" z)))
###     ("_position" A)))
### ("_position" A)))
###                                   ("_position" dxs1))))
###                             ("_cargs" ("_position" rbt3)
###                               ("\<^const>Set.empty"))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt3))
###       ("_applC" ("_position" DList_set) ("_position" dxs1)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position"
###                   ''relcomp RBT_set DList_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                   ("_applC" ("_position" DList_set) ("_position" dxs1)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'd)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp RBT_set DList_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs1)))))))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'd)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp RBT_set DList_set: ceq2 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt3))
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs1)))))))
###                 ("_case2"
###                   ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###                     ("_case_syntax"
###                       ("_applC" ("_position" ID)
###                         ("_CEQ" ("_position_sort" 'e)))
###                       ("_case1" ("_position" None)
###                         ("_applC" ("_position" Code.abort)
###                           ("_cargs"
###                             ("_Literal"
###                               ("_position"
###                                 ''relcomp RBT_set DList_set: ceq3 = None''))
###                             ("_lambda" ("_idtdummy")
###                               ("\<^const>Relation.relcomp"
###                                 ("_applC" ("_position" RBT_set)
###                                   ("_position" rbt3))
###                                 ("_applC" ("_position" DList_set)
###                                   ("_position" dxs1)))))))))
###                   ("_case1"
###                     ("_applC" ("_position" Some)
###                       ("\<^const>Pure.dummy_pattern"))
###                     ("_applC" ("_position" RBT_Set2.fold)
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pattern" ("_position" x) ("_position" y))
###                           ("_applC" ("_position" DList_Set.fold)
###                             ("_cargs"
###                               ("_lambda"
###                                 ("_pttrns"
###                                   ("_pattern" ("_position" y')
###                                     ("_position" z))
###                                   ("_position" A))
###                                 ("\<^const>HOL.If"
###                                   ("_applC" ("_position" eq)
###                                     ("_cargs" ("_position" y)
### ("_position" y')))
###                                   ("_applC" ("_position" insert)
###                                     ("_cargs"
### ("_tuple" ("_position" x) ("_tuple_arg" ("_position" z))) ("_position" A)))
###                                   ("_position" A)))
###                               ("_position" dxs1))))
###                         ("_cargs" ("_position" rbt3)
###                           ("\<^const>Set.empty"))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt3))
###       ("_applC" ("_position" DList_set) ("_position" dxs1)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position"
###                   ''relcomp RBT_set DList_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                   ("_applC" ("_position" DList_set) ("_position" dxs1)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'd)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp RBT_set DList_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs1)))))))
###               ("_case2"
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("\<^const>Pure.dummy_pattern"))
###                   ("_case_syntax"
###                     ("_applC" ("_position" ID)
###                       ("_CEQ" ("_position_sort" 'd)))
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp RBT_set DList_set: ceq2 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt3))
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs1)))))))))
###                 ("_case2"
###                   ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###                     ("_case_syntax"
###                       ("_applC" ("_position" ID)
###                         ("_CEQ" ("_position_sort" 'e)))
###                       ("_case1" ("_position" None)
###                         ("_applC" ("_position" Code.abort)
###                           ("_cargs"
###                             ("_Literal"
###                               ("_position"
###                                 ''relcomp RBT_set DList_set: ceq3 = None''))
###                             ("_lambda" ("_idtdummy")
###                               ("\<^const>Relation.relcomp"
###                                 ("_applC" ("_position" RBT_set)
###                                   ("_position" rbt3))
###                                 ("_applC" ("_position" DList_set)
###                                   ("_position" dxs1)))))))))
###                   ("_case1"
###                     ("_applC" ("_position" Some)
###                       ("\<^const>Pure.dummy_pattern"))
###                     ("_applC" ("_position" RBT_Set2.fold)
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pattern" ("_position" x) ("_position" y))
###                           ("_applC" ("_position" DList_Set.fold)
###                             ("_cargs"
###                               ("_lambda"
###                                 ("_pttrns"
###                                   ("_pattern" ("_position" y')
###                                     ("_position" z))
###                                   ("_position" A))
###                                 ("\<^const>HOL.If"
###                                   ("_applC" ("_position" eq)
###                                     ("_cargs" ("_position" y)
### ("_position" y')))
###                                   ("_applC" ("_position" insert)
###                                     ("_cargs"
### ("_tuple" ("_position" x) ("_tuple_arg" ("_position" z))) ("_position" A)))
###                                   ("_position" A)))
###                               ("_position" dxs1))))
###                         ("_cargs" ("_position" rbt3)
###                           ("\<^const>Set.empty"))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt3))
###       ("_applC" ("_position" DList_set) ("_position" dxs1)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position"
###                   ''relcomp RBT_set DList_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                   ("_applC" ("_position" DList_set) ("_position" dxs1)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'd)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp RBT_set DList_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs1)))))))))
###           ("_case2"
###             ("_case1"
###               ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###               ("_case_syntax"
###                 ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'd)))
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp RBT_set DList_set: ceq2 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt3))
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs1)))))))))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###                 ("_case_syntax"
###                   ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###                   ("_case1" ("_position" None)
###                     ("_applC" ("_position" Code.abort)
###                       ("_cargs"
###                         ("_Literal"
###                           ("_position"
###                             ''relcomp RBT_set DList_set: ceq3 = None''))
###                         ("_lambda" ("_idtdummy")
###                           ("\<^const>Relation.relcomp"
###                             ("_applC" ("_position" RBT_set)
###                               ("_position" rbt3))
###                             ("_applC" ("_position" DList_set)
###                               ("_position" dxs1)))))))))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_applC" ("_position" RBT_Set2.fold)
###                   ("_cargs"
###                     ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                       ("_applC" ("_position" DList_Set.fold)
###                         ("_cargs"
###                           ("_lambda"
###                             ("_pttrns"
###                               ("_pattern" ("_position" y') ("_position" z))
###                               ("_position" A))
###                             ("\<^const>HOL.If"
###                               ("_applC" ("_position" eq)
###                                 ("_cargs" ("_position" y) ("_position" y')))
###                               ("_applC" ("_position" insert)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" x)
###                                     ("_tuple_arg" ("_position" z)))
###                                   ("_position" A)))
###                               ("_position" A)))
###                           ("_position" dxs1))))
###                     ("_cargs" ("_position" rbt3)
###                       ("\<^const>Set.empty"))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt3))
###       ("_applC" ("_position" DList_set) ("_position" dxs1)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position"
###                   ''relcomp RBT_set DList_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt3))
###                   ("_applC" ("_position" DList_set) ("_position" dxs1)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'd)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp RBT_set DList_set: ccompare2 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt3))
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs1)))))))
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("\<^const>Pure.dummy_pattern"))
###                   ("_case_syntax"
###                     ("_applC" ("_position" ID)
###                       ("_CEQ" ("_position_sort" 'd)))
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp RBT_set DList_set: ceq2 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt3))
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs1))))))))))))
###           ("_case2"
###             ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###               ("_case_syntax"
###                 ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp RBT_set DList_set: ceq3 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt3))
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs1)))))))))
###             ("_case1"
###               ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###               ("_applC" ("_position" RBT_Set2.fold)
###                 ("_cargs"
###                   ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                     ("_applC" ("_position" DList_Set.fold)
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pttrns"
###                             ("_pattern" ("_position" y') ("_position" z))
###                             ("_position" A))
###                           ("\<^const>HOL.If"
###                             ("_applC" ("_position" eq)
###                               ("_cargs" ("_position" y) ("_position" y')))
###                             ("_applC" ("_position" insert)
###                               ("_cargs"
###                                 ("_tuple" ("_position" x)
###                                   ("_tuple_arg" ("_position" z)))
###                                 ("_position" A)))
###                             ("_position" A)))
###                         ("_position" dxs1))))
###                   ("_cargs" ("_position" rbt3)
###                     ("\<^const>Set.empty")))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1566 of "$AFP/Containers/Set_Impl.thy") produces 14 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs2))
###       ("_applC" ("_position" RBT_set) ("_position" rbt4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set RBT_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs2))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt4)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'd)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp DList_set RBT_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs2))
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt4)))))))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_case_syntax"
###                   ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'd)))
###                   ("_case2"
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp DList_set RBT_set: ccompare2 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs2))
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt4)))))))
###                     ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###                       ("_case_syntax"
###                         ("_applC" ("_position" ID)
###                           ("_CCOMPARE" ("_position_sort" 'a)))
###                         ("_case2"
###                           ("_case1" ("_position" None)
###                             ("_applC" ("_position" Code.abort)
###                               ("_cargs"
###                                 ("_Literal"
###                                   ("_position"
###                                     ''relcomp DList_set RBT_set: ccompare3 = None''))
###                                 ("_lambda" ("_idtdummy")
###                                   ("\<^const>Relation.relcomp"
###                                     ("_applC" ("_position" DList_set)
### ("_position" dxs2))
###                                     ("_applC" ("_position" RBT_set)
### ("_position" rbt4)))))))
###                           ("_case1"
###                             ("_applC" ("_position" Some)
###                               ("\<^const>Pure.dummy_pattern"))
###                             ("_applC" ("_position" DList_Set.fold)
###                               ("_cargs"
###                                 ("_lambda"
###                                   ("_pattern" ("_position" x)
###                                     ("_position" y))
###                                   ("_applC" ("_position" RBT_Set2.fold)
###                                     ("_cargs"
### ("_lambda"
###   ("_pttrns" ("_pattern" ("_position" y') ("_position" z)) ("_position" A))
###   ("\<^const>HOL.If"
###     ("_applC" ("_position" eq) ("_cargs" ("_position" y) ("_position" y')))
###     ("_applC" ("_position" insert)
###       ("_cargs" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" z)))
###         ("_position" A)))
###     ("_position" A)))
### ("_position" rbt4))))
###                                 ("_cargs" ("_position" dxs2)
###                                   ("\<^const>Set.empty"))))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs2))
###       ("_applC" ("_position" RBT_set) ("_position" rbt4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set RBT_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs2))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt4)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'd)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp DList_set RBT_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs2))
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt4)))))))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'd)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp DList_set RBT_set: ccompare2 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs2))
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt4)))))))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###                   ("_case_syntax"
###                     ("_applC" ("_position" ID)
###                       ("_CCOMPARE" ("_position_sort" 'a)))
###                     ("_case2"
###                       ("_case1" ("_position" None)
###                         ("_applC" ("_position" Code.abort)
###                           ("_cargs"
###                             ("_Literal"
###                               ("_position"
###                                 ''relcomp DList_set RBT_set: ccompare3 = None''))
###                             ("_lambda" ("_idtdummy")
###                               ("\<^const>Relation.relcomp"
###                                 ("_applC" ("_position" DList_set)
###                                   ("_position" dxs2))
###                                 ("_applC" ("_position" RBT_set)
###                                   ("_position" rbt4)))))))
###                       ("_case1"
###                         ("_applC" ("_position" Some)
###                           ("\<^const>Pure.dummy_pattern"))
###                         ("_applC" ("_position" DList_Set.fold)
###                           ("_cargs"
###                             ("_lambda"
###                               ("_pattern" ("_position" x) ("_position" y))
###                               ("_applC" ("_position" RBT_Set2.fold)
###                                 ("_cargs"
###                                   ("_lambda"
###                                     ("_pttrns"
### ("_pattern" ("_position" y') ("_position" z)) ("_position" A))
###                                     ("\<^const>HOL.If"
### ("_applC" ("_position" eq) ("_cargs" ("_position" y) ("_position" y')))
### ("_applC" ("_position" insert)
###   ("_cargs" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" z)))
###     ("_position" A)))
### ("_position" A)))
###                                   ("_position" rbt4))))
###                             ("_cargs" ("_position" dxs2)
###                               ("\<^const>Set.empty"))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs2))
###       ("_applC" ("_position" RBT_set) ("_position" rbt4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set RBT_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs2))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt4)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'd)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp DList_set RBT_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs2))
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt4)))))))
###               ("_case2"
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("\<^const>Pure.dummy_pattern"))
###                   ("_case_syntax"
###                     ("_applC" ("_position" ID)
###                       ("_CEQ" ("_position_sort" 'd)))
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp DList_set RBT_set: ccompare2 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs2))
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt4)))))))))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###                   ("_case_syntax"
###                     ("_applC" ("_position" ID)
###                       ("_CCOMPARE" ("_position_sort" 'a)))
###                     ("_case2"
###                       ("_case1" ("_position" None)
###                         ("_applC" ("_position" Code.abort)
###                           ("_cargs"
###                             ("_Literal"
###                               ("_position"
###                                 ''relcomp DList_set RBT_set: ccompare3 = None''))
###                             ("_lambda" ("_idtdummy")
###                               ("\<^const>Relation.relcomp"
###                                 ("_applC" ("_position" DList_set)
###                                   ("_position" dxs2))
###                                 ("_applC" ("_position" RBT_set)
###                                   ("_position" rbt4)))))))
###                       ("_case1"
###                         ("_applC" ("_position" Some)
###                           ("\<^const>Pure.dummy_pattern"))
###                         ("_applC" ("_position" DList_Set.fold)
###                           ("_cargs"
###                             ("_lambda"
###                               ("_pattern" ("_position" x) ("_position" y))
###                               ("_applC" ("_position" RBT_Set2.fold)
###                                 ("_cargs"
###                                   ("_lambda"
###                                     ("_pttrns"
### ("_pattern" ("_position" y') ("_position" z)) ("_position" A))
###                                     ("\<^const>HOL.If"
### ("_applC" ("_position" eq) ("_cargs" ("_position" y) ("_position" y')))
### ("_applC" ("_position" insert)
###   ("_cargs" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" z)))
###     ("_position" A)))
### ("_position" A)))
###                                   ("_position" rbt4))))
###                             ("_cargs" ("_position" dxs2)
###                               ("\<^const>Set.empty"))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs2))
###       ("_applC" ("_position" RBT_set) ("_position" rbt4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set RBT_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs2))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt4)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'd)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp DList_set RBT_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs2))
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt4)))))))))
###           ("_case2"
###             ("_case1"
###               ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###               ("_case_syntax"
###                 ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'd)))
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp DList_set RBT_set: ccompare2 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs2))
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt4)))))))))
###             ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###               ("_case_syntax"
###                 ("_applC" ("_position" ID)
###                   ("_CCOMPARE" ("_position_sort" 'a)))
###                 ("_case2"
###                   ("_case1" ("_position" None)
###                     ("_applC" ("_position" Code.abort)
###                       ("_cargs"
###                         ("_Literal"
###                           ("_position"
###                             ''relcomp DList_set RBT_set: ccompare3 = None''))
###                         ("_lambda" ("_idtdummy")
###                           ("\<^const>Relation.relcomp"
###                             ("_applC" ("_position" DList_set)
###                               ("_position" dxs2))
###                             ("_applC" ("_position" RBT_set)
###                               ("_position" rbt4)))))))
###                   ("_case1"
###                     ("_applC" ("_position" Some)
###                       ("\<^const>Pure.dummy_pattern"))
###                     ("_applC" ("_position" DList_Set.fold)
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pattern" ("_position" x) ("_position" y))
###                           ("_applC" ("_position" RBT_Set2.fold)
###                             ("_cargs"
###                               ("_lambda"
###                                 ("_pttrns"
###                                   ("_pattern" ("_position" y')
###                                     ("_position" z))
###                                   ("_position" A))
###                                 ("\<^const>HOL.If"
###                                   ("_applC" ("_position" eq)
###                                     ("_cargs" ("_position" y)
### ("_position" y')))
###                                   ("_applC" ("_position" insert)
###                                     ("_cargs"
### ("_tuple" ("_position" x) ("_tuple_arg" ("_position" z))) ("_position" A)))
###                                   ("_position" A)))
###                               ("_position" rbt4))))
###                         ("_cargs" ("_position" dxs2)
###                           ("\<^const>Set.empty"))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs2))
###       ("_applC" ("_position" RBT_set) ("_position" rbt4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set RBT_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs2))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt4)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'd)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp DList_set RBT_set: ceq2 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs2))
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt4)))))))
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("\<^const>Pure.dummy_pattern"))
###                   ("_case_syntax"
###                     ("_applC" ("_position" ID)
###                       ("_CEQ" ("_position_sort" 'd)))
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp DList_set RBT_set: ccompare2 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs2))
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt4))))))))))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'a)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp DList_set RBT_set: ccompare3 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs2))
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt4)))))))
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("\<^const>Pure.dummy_pattern"))
###                   ("_applC" ("_position" DList_Set.fold)
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pattern" ("_position" x) ("_position" y))
###                         ("_applC" ("_position" RBT_Set2.fold)
###                           ("_cargs"
###                             ("_lambda"
###                               ("_pttrns"
###                                 ("_pattern" ("_position" y')
###                                   ("_position" z))
###                                 ("_position" A))
###                               ("\<^const>HOL.If"
###                                 ("_applC" ("_position" eq)
###                                   ("_cargs" ("_position" y)
###                                     ("_position" y')))
###                                 ("_applC" ("_position" insert)
###                                   ("_cargs"
###                                     ("_tuple" ("_position" x)
### ("_tuple_arg" ("_position" z)))
###                                     ("_position" A)))
###                                 ("_position" A)))
###                             ("_position" rbt4))))
###                       ("_cargs" ("_position" dxs2)
###                         ("\<^const>Set.empty")))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs2))
###       ("_applC" ("_position" RBT_set) ("_position" rbt4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set RBT_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs2))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt4)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'd)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp DList_set RBT_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs2))
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt4)))))))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_case_syntax"
###                   ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'd)))
###                   ("_case2"
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp DList_set RBT_set: ccompare2 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs2))
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt4)))))))
###                     ("_case2"
###                       ("_case1"
###                         ("_applC" ("_position" Some) ("_position" eq))
###                         ("_case_syntax"
###                           ("_applC" ("_position" ID)
###                             ("_CCOMPARE" ("_position_sort" 'a)))
###                           ("_case1" ("_position" None)
###                             ("_applC" ("_position" Code.abort)
###                               ("_cargs"
###                                 ("_Literal"
###                                   ("_position"
###                                     ''relcomp DList_set RBT_set: ccompare3 = None''))
###                                 ("_lambda" ("_idtdummy")
###                                   ("\<^const>Relation.relcomp"
###                                     ("_applC" ("_position" DList_set)
### ("_position" dxs2))
###                                     ("_applC" ("_position" RBT_set)
### ("_position" rbt4)))))))))
###                       ("_case1"
###                         ("_applC" ("_position" Some)
###                           ("\<^const>Pure.dummy_pattern"))
###                         ("_applC" ("_position" DList_Set.fold)
###                           ("_cargs"
###                             ("_lambda"
###                               ("_pattern" ("_position" x) ("_position" y))
###                               ("_applC" ("_position" RBT_Set2.fold)
###                                 ("_cargs"
###                                   ("_lambda"
###                                     ("_pttrns"
### ("_pattern" ("_position" y') ("_position" z)) ("_position" A))
###                                     ("\<^const>HOL.If"
### ("_applC" ("_position" eq) ("_cargs" ("_position" y) ("_position" y')))
### ("_applC" ("_position" insert)
###   ("_cargs" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" z)))
###     ("_position" A)))
### ("_position" A)))
###                                   ("_position" rbt4))))
###                             ("_cargs" ("_position" dxs2)
###                               ("\<^const>Set.empty"))))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs2))
###       ("_applC" ("_position" RBT_set) ("_position" rbt4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set RBT_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs2))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt4)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'd)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp DList_set RBT_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs2))
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt4)))))))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'd)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp DList_set RBT_set: ccompare2 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs2))
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt4)))))))
###                 ("_case2"
###                   ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###                     ("_case_syntax"
###                       ("_applC" ("_position" ID)
###                         ("_CCOMPARE" ("_position_sort" 'a)))
###                       ("_case1" ("_position" None)
###                         ("_applC" ("_position" Code.abort)
###                           ("_cargs"
###                             ("_Literal"
###                               ("_position"
###                                 ''relcomp DList_set RBT_set: ccompare3 = None''))
###                             ("_lambda" ("_idtdummy")
###                               ("\<^const>Relation.relcomp"
###                                 ("_applC" ("_position" DList_set)
###                                   ("_position" dxs2))
###                                 ("_applC" ("_position" RBT_set)
###                                   ("_position" rbt4)))))))))
###                   ("_case1"
###                     ("_applC" ("_position" Some)
###                       ("\<^const>Pure.dummy_pattern"))
###                     ("_applC" ("_position" DList_Set.fold)
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pattern" ("_position" x) ("_position" y))
###                           ("_applC" ("_position" RBT_Set2.fold)
###                             ("_cargs"
###                               ("_lambda"
###                                 ("_pttrns"
###                                   ("_pattern" ("_position" y')
###                                     ("_position" z))
###                                   ("_position" A))
###                                 ("\<^const>HOL.If"
###                                   ("_applC" ("_position" eq)
###                                     ("_cargs" ("_position" y)
### ("_position" y')))
###                                   ("_applC" ("_position" insert)
###                                     ("_cargs"
### ("_tuple" ("_position" x) ("_tuple_arg" ("_position" z))) ("_position" A)))
###                                   ("_position" A)))
###                               ("_position" rbt4))))
###                         ("_cargs" ("_position" dxs2)
###                           ("\<^const>Set.empty"))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs2))
###       ("_applC" ("_position" RBT_set) ("_position" rbt4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set RBT_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs2))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt4)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'd)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp DList_set RBT_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs2))
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt4)))))))
###               ("_case2"
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("\<^const>Pure.dummy_pattern"))
###                   ("_case_syntax"
###                     ("_applC" ("_position" ID)
###                       ("_CEQ" ("_position_sort" 'd)))
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp DList_set RBT_set: ccompare2 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs2))
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt4)))))))))
###                 ("_case2"
###                   ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###                     ("_case_syntax"
###                       ("_applC" ("_position" ID)
###                         ("_CCOMPARE" ("_position_sort" 'a)))
###                       ("_case1" ("_position" None)
###                         ("_applC" ("_position" Code.abort)
###                           ("_cargs"
###                             ("_Literal"
###                               ("_position"
###                                 ''relcomp DList_set RBT_set: ccompare3 = None''))
###                             ("_lambda" ("_idtdummy")
###                               ("\<^const>Relation.relcomp"
###                                 ("_applC" ("_position" DList_set)
###                                   ("_position" dxs2))
###                                 ("_applC" ("_position" RBT_set)
###                                   ("_position" rbt4)))))))))
###                   ("_case1"
###                     ("_applC" ("_position" Some)
###                       ("\<^const>Pure.dummy_pattern"))
###                     ("_applC" ("_position" DList_Set.fold)
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pattern" ("_position" x) ("_position" y))
###                           ("_applC" ("_position" RBT_Set2.fold)
###                             ("_cargs"
###                               ("_lambda"
###                                 ("_pttrns"
###                                   ("_pattern" ("_position" y')
###                                     ("_position" z))
###                                   ("_position" A))
###                                 ("\<^const>HOL.If"
###                                   ("_applC" ("_position" eq)
###                                     ("_cargs" ("_position" y)
### ("_position" y')))
###                                   ("_applC" ("_position" insert)
###                                     ("_cargs"
### ("_tuple" ("_position" x) ("_tuple_arg" ("_position" z))) ("_position" A)))
###                                   ("_position" A)))
###                               ("_position" rbt4))))
###                         ("_cargs" ("_position" dxs2)
###                           ("\<^const>Set.empty"))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs2))
###       ("_applC" ("_position" RBT_set) ("_position" rbt4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set RBT_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs2))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt4)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'd)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp DList_set RBT_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs2))
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt4)))))))))
###           ("_case2"
###             ("_case1"
###               ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###               ("_case_syntax"
###                 ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'd)))
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp DList_set RBT_set: ccompare2 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs2))
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt4)))))))))
###             ("_case2"
###               ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###                 ("_case_syntax"
###                   ("_applC" ("_position" ID)
###                     ("_CCOMPARE" ("_position_sort" 'a)))
###                   ("_case1" ("_position" None)
###                     ("_applC" ("_position" Code.abort)
###                       ("_cargs"
###                         ("_Literal"
###                           ("_position"
###                             ''relcomp DList_set RBT_set: ccompare3 = None''))
###                         ("_lambda" ("_idtdummy")
###                           ("\<^const>Relation.relcomp"
###                             ("_applC" ("_position" DList_set)
###                               ("_position" dxs2))
###                             ("_applC" ("_position" RBT_set)
###                               ("_position" rbt4)))))))))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_applC" ("_position" DList_Set.fold)
###                   ("_cargs"
###                     ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                       ("_applC" ("_position" RBT_Set2.fold)
###                         ("_cargs"
###                           ("_lambda"
###                             ("_pttrns"
###                               ("_pattern" ("_position" y') ("_position" z))
###                               ("_position" A))
###                             ("\<^const>HOL.If"
###                               ("_applC" ("_position" eq)
###                                 ("_cargs" ("_position" y) ("_position" y')))
###                               ("_applC" ("_position" insert)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" x)
###                                     ("_tuple_arg" ("_position" z)))
###                                   ("_position" A)))
###                               ("_position" A)))
###                           ("_position" rbt4))))
###                     ("_cargs" ("_position" dxs2)
###                       ("\<^const>Set.empty"))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs2))
###       ("_applC" ("_position" RBT_set) ("_position" rbt4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set RBT_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs2))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt4)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'd)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp DList_set RBT_set: ceq2 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs2))
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt4)))))))
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("\<^const>Pure.dummy_pattern"))
###                   ("_case_syntax"
###                     ("_applC" ("_position" ID)
###                       ("_CEQ" ("_position_sort" 'd)))
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp DList_set RBT_set: ccompare2 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs2))
###                               ("_applC" ("_position" RBT_set)
###                                 ("_position" rbt4))))))))))))
###           ("_case2"
###             ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###               ("_case_syntax"
###                 ("_applC" ("_position" ID)
###                   ("_CCOMPARE" ("_position_sort" 'a)))
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp DList_set RBT_set: ccompare3 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs2))
###                           ("_applC" ("_position" RBT_set)
###                             ("_position" rbt4)))))))))
###             ("_case1"
###               ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###               ("_applC" ("_position" DList_Set.fold)
###                 ("_cargs"
###                   ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                     ("_applC" ("_position" RBT_Set2.fold)
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pttrns"
###                             ("_pattern" ("_position" y') ("_position" z))
###                             ("_position" A))
###                           ("\<^const>HOL.If"
###                             ("_applC" ("_position" eq)
###                               ("_cargs" ("_position" y) ("_position" y')))
###                             ("_applC" ("_position" insert)
###                               ("_cargs"
###                                 ("_tuple" ("_position" x)
###                                   ("_tuple_arg" ("_position" z)))
###                                 ("_position" A)))
###                             ("_position" A)))
###                         ("_position" rbt4))))
###                   ("_cargs" ("_position" dxs2)
###                     ("\<^const>Set.empty")))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1577 of "$AFP/Containers/Set_Impl.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs3))
###       ("_applC" ("_position" DList_set) ("_position" dxs4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set DList_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs3))
###                   ("_applC" ("_position" DList_set) ("_position" dxs4)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'f)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp DList_set DList_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs3))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs4)))))))
###               ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###                 ("_case_syntax"
###                   ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'g)))
###                   ("_case2"
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp DList_set DList_set: ceq3 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs3))
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs4)))))))
###                     ("_case1"
###                       ("_applC" ("_position" Some)
###                         ("\<^const>Pure.dummy_pattern"))
###                       ("_applC" ("_position" DList_Set.fold)
###                         ("_cargs"
###                           ("_lambda"
###                             ("_pattern" ("_position" x) ("_position" y))
###                             ("_applC" ("_position" DList_Set.fold)
###                               ("_cargs"
###                                 ("_lambda"
###                                   ("_pttrns"
###                                     ("_pattern" ("_position" y')
### ("_position" z))
###                                     ("_position" A))
###                                   ("\<^const>HOL.If"
###                                     ("_applC" ("_position" eq)
### ("_cargs" ("_position" y) ("_position" y')))
###                                     ("_applC" ("_position" insert)
### ("_cargs" ("_tuple" ("_position" x) ("_tuple_arg" ("_position" z)))
###   ("_position" A)))
###                                     ("_position" A)))
###                                 ("_position" dxs4))))
###                           ("_cargs" ("_position" dxs3)
###                             ("\<^const>Set.empty")))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs3))
###       ("_applC" ("_position" DList_set) ("_position" dxs4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set DList_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs3))
###                   ("_applC" ("_position" DList_set) ("_position" dxs4)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'f)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp DList_set DList_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs3))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs4)))))))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'g)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp DList_set DList_set: ceq3 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs3))
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs4)))))))
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("\<^const>Pure.dummy_pattern"))
###                   ("_applC" ("_position" DList_Set.fold)
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pattern" ("_position" x) ("_position" y))
###                         ("_applC" ("_position" DList_Set.fold)
###                           ("_cargs"
###                             ("_lambda"
###                               ("_pttrns"
###                                 ("_pattern" ("_position" y')
###                                   ("_position" z))
###                                 ("_position" A))
###                               ("\<^const>HOL.If"
###                                 ("_applC" ("_position" eq)
###                                   ("_cargs" ("_position" y)
###                                     ("_position" y')))
###                                 ("_applC" ("_position" insert)
###                                   ("_cargs"
###                                     ("_tuple" ("_position" x)
### ("_tuple_arg" ("_position" z)))
###                                     ("_position" A)))
###                                 ("_position" A)))
###                             ("_position" dxs4))))
###                       ("_cargs" ("_position" dxs3)
###                         ("\<^const>Set.empty")))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs3))
###       ("_applC" ("_position" DList_set) ("_position" dxs4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set DList_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs3))
###                   ("_applC" ("_position" DList_set) ("_position" dxs4)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'f)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp DList_set DList_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs3))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs4)))))))
###               ("_case2"
###                 ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###                   ("_case_syntax"
###                     ("_applC" ("_position" ID)
###                       ("_CEQ" ("_position_sort" 'g)))
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp DList_set DList_set: ceq3 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs3))
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs4)))))))))
###                 ("_case1"
###                   ("_applC" ("_position" Some)
###                     ("\<^const>Pure.dummy_pattern"))
###                   ("_applC" ("_position" DList_Set.fold)
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pattern" ("_position" x) ("_position" y))
###                         ("_applC" ("_position" DList_Set.fold)
###                           ("_cargs"
###                             ("_lambda"
###                               ("_pttrns"
###                                 ("_pattern" ("_position" y')
###                                   ("_position" z))
###                                 ("_position" A))
###                               ("\<^const>HOL.If"
###                                 ("_applC" ("_position" eq)
###                                   ("_cargs" ("_position" y)
###                                     ("_position" y')))
###                                 ("_applC" ("_position" insert)
###                                   ("_cargs"
###                                     ("_tuple" ("_position" x)
### ("_tuple_arg" ("_position" z)))
###                                     ("_position" A)))
###                                 ("_position" A)))
###                             ("_position" dxs4))))
###                       ("_cargs" ("_position" dxs3)
###                         ("\<^const>Set.empty")))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs3))
###       ("_applC" ("_position" DList_set) ("_position" dxs4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set DList_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs3))
###                   ("_applC" ("_position" DList_set) ("_position" dxs4)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'f)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp DList_set DList_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs3))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs4)))))))))
###           ("_case2"
###             ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###               ("_case_syntax"
###                 ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'g)))
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp DList_set DList_set: ceq3 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs3))
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs4)))))))))
###             ("_case1"
###               ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###               ("_applC" ("_position" DList_Set.fold)
###                 ("_cargs"
###                   ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                     ("_applC" ("_position" DList_Set.fold)
###                       ("_cargs"
###                         ("_lambda"
###                           ("_pttrns"
###                             ("_pattern" ("_position" y') ("_position" z))
###                             ("_position" A))
###                           ("\<^const>HOL.If"
###                             ("_applC" ("_position" eq)
###                               ("_cargs" ("_position" y) ("_position" y')))
###                             ("_applC" ("_position" insert)
###                               ("_cargs"
###                                 ("_tuple" ("_position" x)
###                                   ("_tuple_arg" ("_position" z)))
###                                 ("_position" A)))
###                             ("_position" A)))
###                         ("_position" dxs4))))
###                   ("_cargs" ("_position" dxs3)
###                     ("\<^const>Set.empty")))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs3))
###       ("_applC" ("_position" DList_set) ("_position" dxs4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set DList_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs3))
###                   ("_applC" ("_position" DList_set) ("_position" dxs4)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'f)))
###               ("_case2"
###                 ("_case1" ("_position" None)
###                   ("_applC" ("_position" Code.abort)
###                     ("_cargs"
###                       ("_Literal"
###                         ("_position"
###                           ''relcomp DList_set DList_set: ceq2 = None''))
###                       ("_lambda" ("_idtdummy")
###                         ("\<^const>Relation.relcomp"
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs3))
###                           ("_applC" ("_position" DList_set)
###                             ("_position" dxs4)))))))
###                 ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###                   ("_case_syntax"
###                     ("_applC" ("_position" ID)
###                       ("_CEQ" ("_position_sort" 'g)))
###                     ("_case1" ("_position" None)
###                       ("_applC" ("_position" Code.abort)
###                         ("_cargs"
###                           ("_Literal"
###                             ("_position"
###                               ''relcomp DList_set DList_set: ceq3 = None''))
###                           ("_lambda" ("_idtdummy")
###                             ("\<^const>Relation.relcomp"
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs3))
###                               ("_applC" ("_position" DList_set)
###                                 ("_position" dxs4))))))))))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_applC" ("_position" DList_Set.fold)
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                   ("_applC" ("_position" DList_Set.fold)
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pttrns"
###                           ("_pattern" ("_position" y') ("_position" z))
###                           ("_position" A))
###                         ("\<^const>HOL.If"
###                           ("_applC" ("_position" eq)
###                             ("_cargs" ("_position" y) ("_position" y')))
###                           ("_applC" ("_position" insert)
###                             ("_cargs"
###                               ("_tuple" ("_position" x)
###                                 ("_tuple_arg" ("_position" z)))
###                               ("_position" A)))
###                           ("_position" A)))
###                       ("_position" dxs4))))
###                 ("_cargs" ("_position" dxs3) ("\<^const>Set.empty"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1591 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt1))
###       ("_applC" ("_position" Set_Monad) ("_position" xs3)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position"
###                   ''relcomp RBT_set Set_Monad: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt1))
###                   ("_applC" ("_position" Set_Monad) ("_position" xs3)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'b)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp RBT_set Set_Monad: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt1))
###                         ("_applC" ("_position" Set_Monad)
###                           ("_position" xs3)))))))
###               ("_case1" ("_applC" ("_position" Some) ("_position" c_b))
###                 ("_applC" ("_position" RBT_Set2.fold)
###                   ("_cargs"
###                     ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                       ("_applC" ("_position" fold)
###                         ("_cargs"
###                           ("_lambda"
###                             ("_pttrns"
###                               ("_pattern" ("_position" y') ("_position" z))
###                               ("_position" A))
###                             ("\<^const>HOL.If"
###                               ("\<^const>HOL.not_equal"
###                                 ("_applC" ("_position" c_b)
###                                   ("_cargs" ("_position" y)
###                                     ("_position" y')))
###                                 ("_position" Eq))
###                               ("_position" A)
###                               ("_applC" ("_position" insert)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" x)
###                                     ("_tuple_arg" ("_position" z)))
###                                   ("_position" A)))))
###                           ("_position" xs3))))
###                     ("_cargs" ("_position" rbt1)
###                       ("\<^const>Set.empty"))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" RBT_set) ("_position" rbt1))
###       ("_applC" ("_position" Set_Monad) ("_position" xs3)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position"
###                   ''relcomp RBT_set Set_Monad: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" RBT_set) ("_position" rbt1))
###                   ("_applC" ("_position" Set_Monad) ("_position" xs3)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'b)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp RBT_set Set_Monad: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" RBT_set) ("_position" rbt1))
###                         ("_applC" ("_position" Set_Monad)
###                           ("_position" xs3)))))))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" c_b))
###             ("_applC" ("_position" RBT_Set2.fold)
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                   ("_applC" ("_position" fold)
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pttrns"
###                           ("_pattern" ("_position" y') ("_position" z))
###                           ("_position" A))
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.not_equal"
###                             ("_applC" ("_position" c_b)
###                               ("_cargs" ("_position" y) ("_position" y')))
###                             ("_position" Eq))
###                           ("_position" A)
###                           ("_applC" ("_position" insert)
###                             ("_cargs"
###                               ("_tuple" ("_position" x)
###                                 ("_tuple_arg" ("_position" z)))
###                               ("_position" A)))))
###                       ("_position" xs3))))
###                 ("_cargs" ("_position" rbt1) ("\<^const>Set.empty"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1598 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" Set_Monad) ("_position" xs4))
###       ("_applC" ("_position" RBT_set) ("_position" rbt5)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position"
###                   ''relcomp Set_Monad RBT_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" Set_Monad) ("_position" xs4))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt5)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'b)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp Set_Monad RBT_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" Set_Monad) ("_position" xs4))
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt5)))))))
###               ("_case1" ("_applC" ("_position" Some) ("_position" c_b))
###                 ("_applC" ("_position" fold)
###                   ("_cargs"
###                     ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                       ("_applC" ("_position" RBT_Set2.fold)
###                         ("_cargs"
###                           ("_lambda"
###                             ("_pttrns"
###                               ("_pattern" ("_position" y') ("_position" z))
###                               ("_position" A))
###                             ("\<^const>HOL.If"
###                               ("\<^const>HOL.not_equal"
###                                 ("_applC" ("_position" c_b)
###                                   ("_cargs" ("_position" y)
###                                     ("_position" y')))
###                                 ("_position" Eq))
###                               ("_position" A)
###                               ("_applC" ("_position" insert)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" x)
###                                     ("_tuple_arg" ("_position" z)))
###                                   ("_position" A)))))
###                           ("_position" rbt5))))
###                     ("_cargs" ("_position" xs4)
###                       ("\<^const>Set.empty"))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" Set_Monad) ("_position" xs4))
###       ("_applC" ("_position" RBT_set) ("_position" rbt5)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position"
###                   ''relcomp Set_Monad RBT_set: ccompare1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" Set_Monad) ("_position" xs4))
###                   ("_applC" ("_position" RBT_set) ("_position" rbt5)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'b)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp Set_Monad RBT_set: ccompare2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" Set_Monad) ("_position" xs4))
###                         ("_applC" ("_position" RBT_set)
###                           ("_position" rbt5)))))))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" c_b))
###             ("_applC" ("_position" fold)
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                   ("_applC" ("_position" RBT_Set2.fold)
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pttrns"
###                           ("_pattern" ("_position" y') ("_position" z))
###                           ("_position" A))
###                         ("\<^const>HOL.If"
###                           ("\<^const>HOL.not_equal"
###                             ("_applC" ("_position" c_b)
###                               ("_cargs" ("_position" y) ("_position" y')))
###                             ("_position" Eq))
###                           ("_position" A)
###                           ("_applC" ("_position" insert)
###                             ("_cargs"
###                               ("_tuple" ("_position" x)
###                                 ("_tuple_arg" ("_position" z)))
###                               ("_position" A)))))
###                       ("_position" rbt5))))
###                 ("_cargs" ("_position" xs4) ("\<^const>Set.empty"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1605 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs3))
###       ("_applC" ("_position" Set_Monad) ("_position" xs5)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set Set_Monad: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs3))
###                   ("_applC" ("_position" Set_Monad) ("_position" xs5)))))))
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'f)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp DList_set Set_Monad: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs3))
###                         ("_applC" ("_position" Set_Monad)
###                           ("_position" xs5)))))))
###               ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###                 ("_applC" ("_position" DList_Set.fold)
###                   ("_cargs"
###                     ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                       ("_applC" ("_position" fold)
###                         ("_cargs"
###                           ("_lambda"
###                             ("_pttrns"
###                               ("_pattern" ("_position" y') ("_position" z))
###                               ("_position" A))
###                             ("\<^const>HOL.If"
###                               ("_applC" ("_position" eq)
###                                 ("_cargs" ("_position" y) ("_position" y')))
###                               ("_applC" ("_position" insert)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" x)
###                                     ("_tuple_arg" ("_position" z)))
###                                   ("_position" A)))
###                               ("_position" A)))
###                           ("_position" xs5))))
###                     ("_cargs" ("_position" dxs3)
###                       ("\<^const>Set.empty"))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" DList_set) ("_position" dxs3))
###       ("_applC" ("_position" Set_Monad) ("_position" xs5)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'e)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp DList_set Set_Monad: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" DList_set) ("_position" dxs3))
###                   ("_applC" ("_position" Set_Monad) ("_position" xs5)))))))
###         ("_case2"
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'f)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp DList_set Set_Monad: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs3))
###                         ("_applC" ("_position" Set_Monad)
###                           ("_position" xs5)))))))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###             ("_applC" ("_position" DList_Set.fold)
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                   ("_applC" ("_position" fold)
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pttrns"
###                           ("_pattern" ("_position" y') ("_position" z))
###                           ("_position" A))
###                         ("\<^const>HOL.If"
###                           ("_applC" ("_position" eq)
###                             ("_cargs" ("_position" y) ("_position" y')))
###                           ("_applC" ("_position" insert)
###                             ("_cargs"
###                               ("_tuple" ("_position" x)
###                                 ("_tuple_arg" ("_position" z)))
###                               ("_position" A)))
###                           ("_position" A)))
###                       ("_position" xs5))))
###                 ("_cargs" ("_position" dxs3) ("\<^const>Set.empty"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1612 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" Set_Monad) ("_position" xs6))
###       ("_applC" ("_position" DList_set) ("_position" dxs4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'f)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp Set_Monad DList_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" Set_Monad) ("_position" xs6))
###                   ("_applC" ("_position" DList_set) ("_position" dxs4)))))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'g)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp Set_Monad DList_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" Set_Monad) ("_position" xs6))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs4)))))))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_applC" ("_position" fold)
###                   ("_cargs"
###                     ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                       ("_applC" ("_position" DList_Set.fold)
###                         ("_cargs"
###                           ("_lambda"
###                             ("_pttrns"
###                               ("_pattern" ("_position" y') ("_position" z))
###                               ("_position" A))
###                             ("\<^const>HOL.If"
###                               ("_applC" ("_position" eq)
###                                 ("_cargs" ("_position" y) ("_position" y')))
###                               ("_applC" ("_position" insert)
###                                 ("_cargs"
###                                   ("_tuple" ("_position" x)
###                                     ("_tuple_arg" ("_position" z)))
###                                   ("_position" A)))
###                               ("_position" A)))
###                           ("_position" dxs4))))
###                     ("_cargs" ("_position" xs6)
###                       ("\<^const>Set.empty"))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Relation.relcomp"
###       ("_applC" ("_position" Set_Monad) ("_position" xs6))
###       ("_applC" ("_position" DList_set) ("_position" dxs4)))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'f)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''relcomp Set_Monad DList_set: ceq1 = None''))
###               ("_lambda" ("_idtdummy")
###                 ("\<^const>Relation.relcomp"
###                   ("_applC" ("_position" Set_Monad) ("_position" xs6))
###                   ("_applC" ("_position" DList_set) ("_position" dxs4)))))))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###             ("_case_syntax"
###               ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'g)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''relcomp Set_Monad DList_set: ceq2 = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("\<^const>Relation.relcomp"
###                         ("_applC" ("_position" Set_Monad) ("_position" xs6))
###                         ("_applC" ("_position" DList_set)
###                           ("_position" dxs4)))))))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_applC" ("_position" fold)
###               ("_cargs"
###                 ("_lambda" ("_pattern" ("_position" x) ("_position" y))
###                   ("_applC" ("_position" DList_Set.fold)
###                     ("_cargs"
###                       ("_lambda"
###                         ("_pttrns"
###                           ("_pattern" ("_position" y') ("_position" z))
###                           ("_position" A))
###                         ("\<^const>HOL.If"
###                           ("_applC" ("_position" eq)
###                             ("_cargs" ("_position" y) ("_position" y')))
###                           ("_applC" ("_position" insert)
###                             ("_cargs"
###                               ("_tuple" ("_position" x)
###                                 ("_tuple_arg" ("_position" z)))
###                               ("_position" A)))
###                           ("_position" A)))
###                       ("_position" dxs4))))
###                 ("_cargs" ("_position" xs6) ("\<^const>Set.empty"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1629 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff" ("_applC" ("_position" irrefl) ("_position" r))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###           ("_Ball" ("_pattern" ("_position" x) ("_position" y))
###             ("_position" r)
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" eq)
###                 ("_cargs" ("_position" x) ("_position" y))))))
###         ("_case1" ("_position" None)
###           ("_case_syntax"
###             ("_applC" ("_position" ID) ("_CCOMPARE" ("_position_sort" 'a)))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''irrefl: ceq = None & ccompare = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("_applC" ("_position" irrefl) ("_position" r))))))
###               ("_case1" ("_applC" ("_position" Some) ("_position" c))
###                 ("_Ball" ("_pattern" ("_position" x) ("_position" y))
###                   ("_position" r)
###                   ("\<^const>HOL.not_equal"
###                     ("_applC" ("_position" c)
###                       ("_cargs" ("_position" x) ("_position" y)))
###                     ("_position" Eq)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff" ("_applC" ("_position" irrefl) ("_position" r))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###           ("_Ball" ("_pattern" ("_position" x) ("_position" y))
###             ("_position" r)
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" eq)
###                 ("_cargs" ("_position" x) ("_position" y))))))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_case_syntax"
###               ("_applC" ("_position" ID)
###                 ("_CCOMPARE" ("_position_sort" 'a)))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Code.abort)
###                   ("_cargs"
###                     ("_Literal"
###                       ("_position"
###                         ''irrefl: ceq = None & ccompare = None''))
###                     ("_lambda" ("_idtdummy")
###                       ("_applC" ("_position" irrefl) ("_position" r))))))))
###           ("_case1" ("_applC" ("_position" Some) ("_position" c))
###             ("_Ball" ("_pattern" ("_position" x) ("_position" y))
###               ("_position" r)
###               ("\<^const>HOL.not_equal"
###                 ("_applC" ("_position" c)
###                   ("_cargs" ("_position" x) ("_position" y)))
###                 ("_position" Eq)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1722 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" can_select)
###       ("_cargs" ("_position" P)
###         ("_applC" ("_position" Set_Monad) ("_position" xs))))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''can_select Set_Monad: ceq = None''))
###               ("_lambda" ("_idtdummy")
###                 ("_applC" ("_position" can_select)
###                   ("_cargs" ("_position" P)
###                     ("_applC" ("_position" Set_Monad)
###                       ("_position" xs))))))))
###         ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###           ("_case_syntax"
###             ("_applC" ("_position" filter)
###               ("_cargs" ("_position" P) ("_position" xs)))
###             ("_case2" ("_case1" ("_position" Nil) ("_position" False))
###               ("_case1"
###                 ("\<^const>List.list.Cons" ("_position" x) ("_position" xs))
###                 ("_applC" ("_position" list_all)
###                   ("_cargs" ("_applC" ("_position" eq) ("_position" x))
###                     ("_position" xs)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" can_select)
###       ("_cargs" ("_position" P)
###         ("_applC" ("_position" Set_Monad) ("_position" xs))))
###     ("_case_syntax"
###       ("_applC" ("_position" ID) ("_CEQ" ("_position_sort" 'a)))
###       ("_case2"
###         ("_case1" ("_position" None)
###           ("_applC" ("_position" Code.abort)
###             ("_cargs"
###               ("_Literal"
###                 ("_position" ''can_select Set_Monad: ceq = None''))
###               ("_lambda" ("_idtdummy")
###                 ("_applC" ("_position" can_select)
###                   ("_cargs" ("_position" P)
###                     ("_applC" ("_position" Set_Monad)
###                       ("_position" xs))))))))
###         ("_case2"
###           ("_case1" ("_applC" ("_position" Some) ("_position" eq))
###             ("_case_syntax"
###               ("_applC" ("_position" filter)
###                 ("_cargs" ("_position" P) ("_position" xs)))
###               ("_case1" ("_position" Nil) ("_position" False))))
###           ("_case1"
###             ("\<^const>List.list.Cons" ("_position" x) ("_position" xs))
###             ("_applC" ("_position" list_all)
###               ("_cargs" ("_applC" ("_position" eq) ("_position" x))
###                 ("_position" xs)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1833 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_constrain" ("_position" set_empty_choose)
###       ("_tapp"
###         ("_ofsort" ("_position_sort" 'a)
###           ("_sort"
###             ("_classes" ("_class_name" ceq) ("_class_name" ccompare))))
###         ("_type_name" set)))
###     ("_case_syntax" ("_CCOMPARE" ("_position_sort" 'a))
###       ("_case2"
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_applC" ("_position" RBT_set) ("_position" RBT_Set2.empty)))
###         ("_case1" ("_position" None)
###           ("_case_syntax" ("_CEQ" ("_position_sort" 'a))
###             ("_case2"
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Set_Monad)
###                   ("\<^const>List.list.Nil")))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_applC" ("_position" DList_set)
###                   ("_position" DList_Set.empty))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_constrain" ("_position" set_empty_choose)
###       ("_tapp"
###         ("_ofsort" ("_position_sort" 'a)
###           ("_sort"
###             ("_classes" ("_class_name" ceq) ("_class_name" ccompare))))
###         ("_type_name" set)))
###     ("_case_syntax" ("_CCOMPARE" ("_position_sort" 'a))
###       ("_case2"
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_applC" ("_position" RBT_set) ("_position" RBT_Set2.empty)))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_case_syntax" ("_CEQ" ("_position_sort" 'a))
###               ("_case1" ("_position" None)
###                 ("_applC" ("_position" Set_Monad)
###                   ("\<^const>List.list.Nil")))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_applC" ("_position" DList_set)
###               ("_position" DList_Set.empty))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class set_impl = type +
  fixes set_impl :: "('a, set_impl) phantom"
signature SET_IMPL_GENERATOR =
  sig val derive_set_impl: string -> string -> theory -> theory end
structure Set_Impl_Generator: SET_IMPL_GENERATOR
use dlist as set_impl for type unit
registered unit in class set_impl
use dlist as set_impl for type bool
registered bool in class set_impl
use rbt as set_impl for type nat
registered nat in class set_impl
use set_RBT as set_impl for type int
registered int in class set_impl
use dlist as set_impl for type finite_1
registered finite_1 in class set_impl
use dlist as set_impl for type finite_2
registered finite_2 in class set_impl
use dlist as set_impl for type finite_3
registered finite_3 in class set_impl
use rbt as set_impl for type integer
registered integer in class set_impl
use rbt as set_impl for type natural
registered natural in class set_impl
use rbt as set_impl for type char
registered char in class set_impl
instantiation
  sum :: (set_impl, set_impl) set_impl
  set_impl_sum == set_impl :: ('a + 'b, set_impl) phantom
instantiation
  prod :: (set_impl, set_impl) set_impl
  set_impl_prod == set_impl :: ('a * 'b, set_impl) phantom
use choose as set_impl for type list
registered list in class set_impl
use rbt as set_impl for type literal
registered literal in class set_impl
instantiation
  option :: (set_impl) set_impl
  set_impl_option == set_impl :: ('a option, set_impl) phantom
use monad as set_impl for type fun
registered fun in class set_impl
use choose as set_impl for type set
registered set in class set_impl
instantiation
  phantom :: (type, set_impl) set_impl
  set_impl_phantom == set_impl :: (('a, 'b) phantom, set_impl) phantom
### Ambiguous input (line 1952 of "$AFP/Containers/Set_Impl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set_aux) ("_position" set_Choose))
###     ("_case_syntax"
###       ("_CCOMPARE"
###         ("_ofsort" ("_position_sort" 'a)
###           ("_sort"
###             ("_classes" ("_class_name" ccompare) ("_class_name" ceq)))))
###       ("_case2"
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_applC" ("_position" conv)
###             ("_applC" ("_position" RBT_set) ("_position" RBT_Set2.empty))))
###         ("_case1" ("_position" None)
###           ("_case_syntax" ("_CEQ" ("_position_sort" 'a))
###             ("_case2" ("_case1" ("_position" None) ("_position" Set_Monad))
###               ("_case1"
###                 ("_applC" ("_position" Some)
###                   ("\<^const>Pure.dummy_pattern"))
###                 ("_applC" ("_position" conv)
###                   ("_applC" ("_position" DList_set)
###                     ("_position" DList_Set.empty)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" set_aux) ("_position" set_Choose))
###     ("_case_syntax"
###       ("_CCOMPARE"
###         ("_ofsort" ("_position_sort" 'a)
###           ("_sort"
###             ("_classes" ("_class_name" ccompare) ("_class_name" ceq)))))
###       ("_case2"
###         ("_case1"
###           ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###           ("_applC" ("_position" conv)
###             ("_applC" ("_position" RBT_set) ("_position" RBT_Set2.empty))))
###         ("_case2"
###           ("_case1" ("_position" None)
###             ("_case_syntax" ("_CEQ" ("_position_sort" 'a))
###               ("_case1" ("_position" None) ("_position" Set_Monad))))
###           ("_case1"
###             ("_applC" ("_position" Some) ("\<^const>Pure.dummy_pattern"))
###             ("_applC" ("_position" conv)
###               ("_applC" ("_position" DList_set)
###                 ("_position" DList_Set.empty)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Containers.Set_Impl"
### 11.274s elapsed time, 15.039s cpu time, 4.815s GC time
Loading theory "Containers.Mapping_Impl" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster" via "Draft.Mapping_Code")
class mapping_impl = type +
  fixes mapping_impl :: "('a, mapping_impl) phantom"
signature MAPPING_IMPL_GENERATOR =
  sig val derive_mapping_impl: string -> string -> theory -> theory end
structure Mapping_Impl_Generator: MAPPING_IMPL_GENERATOR
use assoclist as mapping_impl for type unit
registered unit in class mapping_impl
use assoclist as mapping_impl for type bool
registered bool in class mapping_impl
use rbt as mapping_impl for type nat
registered nat in class mapping_impl
use mapping_RBT as mapping_impl for type int
registered int in class mapping_impl
use assoclist as mapping_impl for type finite_1
registered finite_1 in class mapping_impl
use assoclist as mapping_impl for type finite_2
registered finite_2 in class mapping_impl
use assoclist as mapping_impl for type finite_3
registered finite_3 in class mapping_impl
use rbt as mapping_impl for type integer
registered integer in class mapping_impl
use rbt as mapping_impl for type natural
registered natural in class mapping_impl
use rbt as mapping_impl for type char
registered char in class mapping_impl
instantiation
  sum :: (mapping_impl, mapping_impl) mapping_impl
  mapping_impl_sum == mapping_impl :: ('a + 'b, mapping_impl) phantom
instantiation
  prod :: (mapping_impl, mapping_impl) mapping_impl
  mapping_impl_prod == mapping_impl :: ('a * 'b, mapping_impl) phantom
use choose as mapping_impl for type list
registered list in class mapping_impl
use rbt as mapping_impl for type literal
registered literal in class mapping_impl
instantiation
  option :: (mapping_impl) mapping_impl
  mapping_impl_option == mapping_impl :: ('a option, mapping_impl) phantom
use choose as mapping_impl for type set
registered set in class mapping_impl
instantiation
  phantom :: (type, mapping_impl) mapping_impl
  mapping_impl_phantom == mapping_impl ::
    (('a, 'b) phantom, mapping_impl) phantom
### theory "Containers.Mapping_Impl"
### 1.247s elapsed time, 1.516s cpu time, 0.100s GC time
Loading theory "Draft.Mapping_Code" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan" via "Draft.Cluster")
### theory "Draft.Mapping_Code"
### 0.183s elapsed time, 0.300s cpu time, 0.156s GC time
Loading theory "Draft.Cluster" (required by "Draft.AilamazyanMoreTemplates" via "Draft.Ailamazyan")
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "Draft.Cluster"
### 1.042s elapsed time, 1.150s cpu time, 0.144s GC time
Loading theory "Draft.Ailamazyan" (required by "Draft.AilamazyanMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (fst p)) (snd p)) <*mlex*>
   (%p. size_list (%p. size (fst p)) (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*>
   (%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Ailamazyan"
### 7.462s elapsed time, 8.761s cpu time, 1.203s GC time
Loading theory "Draft.AilamazyanMoreTemplates"
val templateLemmas =
   [("Ailamazyan.finite_SP", "finite (SP ?\<phi>)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Ailamazyan.distinct_rremdups", "distinct (rremdups ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Ailamazyan.ad_agr_list_refl", "ad_agr_list ?X ?xs ?xs",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Ailamazyan.d_pos", "1 <= d ?\<phi>",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Ailamazyan.ad_equiv_pair_refl", "ad_equiv_pair ?X (?a, ?a)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))
         )),
    ("Ailamazyan.fo_nmlz_sound", "fo_nmlzd ?AD (fo_nmlz ?AD ?xs)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Ailamazyan.fo_nmlz_Nil", "fo_nmlz ?AD [] = []",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Ailamazyan.merge_Nil2", "merge ?nxs [] = ?nxs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Ailamazyan.SP_fv", "SP ?\<phi> <= fv_fo_fmla ?\<phi>",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Ailamazyan.fo_nmlz_ad_agr", "ad_agr_list ?AD ?xs (fo_nmlz ?AD ?xs)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Ailamazyan.eval_bool", "fo_wf (Bool ?b) ?I (eval_bool ?b)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0),
           template_app (template_hole 0, template_var 1))
         )),
    ("Ailamazyan.nfv_card", "nfv ?\<phi> = card (fv_fo_fmla ?\<phi>)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Ailamazyan.rremdups_set", "set (rremdups ?xs) = set ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Ailamazyan.SP_list_set", "set (SP_list ?\<phi>) = SP ?\<phi>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Ailamazyan.fv_fo_terms_list_Var",
     "fv_fo_terms_list_rec (map Var ?ns) = ?ns",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Ailamazyan.card_SP_d", "card (SP ?\<phi>) <= d ?\<phi>",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Ailamazyan.length_rremdups", "length (rremdups ?xs) = card (set ?xs)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Ailamazyan.fo_nmlz_length", "length (fo_nmlz ?AD ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Ailamazyan.sp_equiv_pair_comm",
     "sp_equiv_pair ?x ?y = sp_equiv_pair ?y ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Ailamazyan.map_projl_Inl", "map projl (map Inl ?xs) = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Ailamazyan.Ball_fo_nmlzd", "Ball (fo_nmlz ?AD ` ?X) (fo_nmlzd ?AD)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 0)),
           template_app (template_hole 0, template_var 1))
         )),
    ("Ailamazyan.eval_eq", "fo_wf (Eqa ?t ?t') ?I (eval_eq ?t ?t')",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))
         )),
    ("Ailamazyan.sorted_distinct_SP_list",
     "sorted_distinct (SP_list ?\<phi>)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))
         )),
    ("Ailamazyan.nall_tuples_code",
     "nall_tuples ?AD ?n = nall_tuples_rec ?AD 0 ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0))),
    ("Ailamazyan.card_set_minus", "card (set ?xs - ?X) <= length ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Ailamazyan.card_Inr_vimage_le_length",
     "card (Inr -` set ?xs) <= length ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Ailamazyan.nall_tuples_finite",
     "finite ?AD ==> finite (nall_tuples ?AD ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Ailamazyan.all_tuples_finite",
     "finite ?xs ==> finite (all_tuples ?xs ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Ailamazyan.finite_Inl", "finite ?X ==> finite (Inl -` ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Ailamazyan.sp_equiv_list_comm",
     "sp_equiv_list ?xs ?ys ==> sp_equiv_list ?ys ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Ailamazyan.fo_nmlz_rec_length",
     "length (fo_nmlz_rec ?i ?m ?AD ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Ailamazyan.fo_nmlzd_code",
     "fo_nmlzd ?AD ?xs = (fo_nmlz ?AD ?xs = ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Ailamazyan.filter_rremdups",
     "filter ?P (rremdups ?xs) = rremdups (filter ?P ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Ailamazyan.fv_fo_fmla_list_Pred",
     "remdups_adj (sort (fv_fo_terms_list ?ts)) = fv_fo_terms_list ?ts",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 0, template_var 0))),
    ("Ailamazyan.eval_eterms_map_Var",
     "?\<sigma> \<odot>e map Var ?ns = map ?\<sigma> ?ns",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Ailamazyan.proj_tuple_idle",
     "proj_tuple (map fst ?nxs) ?nxs = map snd ?nxs",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Ailamazyan.finite_act_edom",
     "wf_fo_intp ?\<phi> ?I ==> finite (act_edom ?\<phi> ?I)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Ailamazyan.fo_nmlzd_take",
     "fo_nmlzd ?AD ?xs ==> fo_nmlzd ?AD (take ?i ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Ailamazyan.fo_nmlz_idem",
     "fo_nmlzd ?AD ?ys ==> fo_nmlz ?AD ?ys = ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Ailamazyan.ad_agr_list_comm",
     "ad_agr_list ?X ?xs ?ys ==> ad_agr_list ?X ?ys ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Ailamazyan.ad_equiv_list_comm",
     "ad_equiv_list ?X ?xs ?ys ==> ad_equiv_list ?X ?ys ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Ailamazyan.fo_nmlz_map",
     "EX \<tau>. fo_nmlz ?AD (map ?\<sigma> ?ns) = map \<tau> ?ns",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Ailamazyan.rremdups_take",
     "EX j. rremdups (take ?i ?xs) = take j (rremdups ?xs)",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Ailamazyan.fun_upd_id_map",
     "id_map ?i(Inr ?i |-> ?i) = id_map (Suc ?i)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 3, template_app (template_hole 0, template_var 0)))),
    ("Ailamazyan.proj_fmla_map",
     "proj_fmla ?\<phi> ?R =
      (%\<tau>. map \<tau> (fv_fo_fmla_list ?\<phi>)) ` ?R",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 2, t_empty), template_var 0))),
    ("Ailamazyan.ad_equiv_pair_comm",
     "ad_equiv_pair ?X (?a, ?a') = ad_equiv_pair ?X (?a', ?a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Ailamazyan.eval_terms_eterms",
     "map Inl (?\<sigma> \<odot> ?ts) = (Inl o ?\<sigma>) \<odot>e ?ts",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 3),
             template_var 1)),
         template_var 0))),
    ("Ailamazyan.fo_nmlz_take",
     "take ?n (fo_nmlz ?AD ?xs) = fo_nmlz ?AD (take ?n ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Ailamazyan.fo_nmlz_proj_sub",
     "fo_nmlz ?AD ` proj_fmla ?\<phi> ?R <= nall_tuples ?AD (nfv ?\<phi>)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("Ailamazyan.fo_wf_eval_abs",
     "wf_fo_intp ?\<phi> ?I ==> fo_wf ?\<phi> ?I (eval_abs ?\<phi> ?I)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Ailamazyan.ad_agr_list_length",
     "ad_agr_list ?X ?xs ?ys ==> length ?xs = length ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Ailamazyan.all_tuples_setD",
     "?vs : all_tuples ?xs ?n ==> set ?vs <= ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_var 1))),
    ("Ailamazyan.id_mapD", "id_map ?j (Inr ?i) = None ==> ?j <= ?i",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1),
            template_app (template_hole 2, template_var 0)),
          template_hole 1)],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Ailamazyan.fo_nmlzd_all_AD",
     "set ?xs <= Inl ` ?AD ==> fo_nmlzd ?AD ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app
           (template_app (template_hole 2, template_hole 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Ailamazyan.set_map_filter_sum",
     "set (List.map_filter (case_sum Map.empty Some) ?xs) = Inr -` set ?xs",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, t_empty), template_hole 3)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Ailamazyan.proj_sat_fmla",
     "proj_sat ?\<phi> ?I =
      proj_fmla ?\<phi> {\<sigma>. sat ?\<phi> ?I \<sigma>}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, t_empty)))),
    ("Ailamazyan.fo_nmlz_eq",
     "(fo_nmlz ?AD ?vs = fo_nmlz ?AD ?vs') = ad_agr_list ?AD ?vs ?vs'",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Ailamazyan.ad_agr_close_empty",
     "fo_nmlzd ?X ?xs ==> ad_agr_close {} ?xs = {?xs}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_hole 2), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Ailamazyan.fo_rep",
     "fo_wf ?\<phi> ?I ?t ==> fo_rep ?t = proj_sat ?\<phi> ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Ailamazyan.fo_fin",
     "fo_wf ?\<phi> ?I ?t ==> fo_fin ?t = finite (fo_rep ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Ailamazyan.pos_complete", "pos ?a ?xs = None ==> ?a ~: set ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Ailamazyan.pos_length", "pos ?a ?xs = Some ?i ==> ?i < length ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_than, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("Ailamazyan.pos_set", "pos ?a ?xs = Some ?i ==> ?a : set ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Ailamazyan.nall_tuples_rec_length",
     "?xs : nall_tuples_rec ?AD ?i ?n ==> length ?xs = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 3), template_var 0))),
    ("Ailamazyan.unify_vals_terms_extends",
     "unify_vals_terms ?vs ?ts ?\<sigma> = Some ?\<sigma>' ==>
      extends_subst ?\<sigma> ?\<sigma>'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Ailamazyan.filter_take",
     "EX j. filter ?P (take ?i ?xs) = take j (filter ?P ?xs)",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Ailamazyan.map_filter_take",
     "EX j. List.map_filter ?f (take ?i ?xs) =
            take j (List.map_filter ?f ?xs)",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Ailamazyan.merge_length",
     "length (merge ?nxs ?mys) = length (map fst ?nxs @ map fst ?mys)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Ailamazyan.proj_sat_vals",
     "proj_sat ?\<phi> ?I =
      proj_vals {\<sigma>. sat ?\<phi> ?I \<sigma>}
       (fv_fo_fmla_list ?\<phi>)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app (template_hole 0, template_var 1)))),
    ("Ailamazyan.sp_equiv_list_link",
     "sp_equiv_list (map ?\<sigma> ?ns) (map ?\<tau> ?ns) =
      sp_equiv ?\<sigma> ?\<tau> (set ?ns)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Ailamazyan.nall_tuples_rec_fo_nmlz",
     "(?xs : nall_tuples_rec ?AD 0 (length ?xs)) = (fo_nmlz ?AD ?xs = ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3),
                template_app (template_hole 2, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Ailamazyan.fv_fo_fmla_list_exists",
     "fv_fo_fmla_list (Exists ?n ?\<phi>) =
      filter ((~=) ?n) (fv_fo_fmla_list ?\<phi>)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 4, template_var 0)))),
    ("Ailamazyan.fv_fo_fmla_list_forall",
     "fv_fo_fmla_list (Forall ?n ?\<phi>) =
      filter ((~=) ?n) (fv_fo_fmla_list ?\<phi>)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 4, template_var 0)))),
    ("Ailamazyan.fo_rep_eval_abs",
     "wf_fo_intp ?\<phi> ?I ==>
      fo_rep (eval_abs ?\<phi> ?I) = proj_sat ?\<phi> ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ailamazyan.fo_nmlz_eqI",
     "ad_agr_list ?AD ?vs ?vs' ==> fo_nmlz ?AD ?vs = fo_nmlz ?AD ?vs'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Ailamazyan.fo_nmlz_eqD",
     "fo_nmlz ?AD ?vs = fo_nmlz ?AD ?vs' ==> ad_agr_list ?AD ?vs ?vs'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Ailamazyan.sp_equiv_list_trans",
     "[| sp_equiv_list ?xs ?ys; sp_equiv_list ?ys ?zs |]
      ==> sp_equiv_list ?xs ?zs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Ailamazyan.fo_nmlzd_mono_sub",
     "[| ?X <= ?X'; fo_nmlzd ?X ?xs |] ==> fo_nmlzd ?X' ?xs",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Ailamazyan.eval_table",
     "eval_table ?ts ?X =
      proj_vals {\<sigma>. \<sigma> \<odot>e ?ts : ?X}
       (fv_fo_terms_list ?ts)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app (template_hole 0, template_var 1)))),
    ("Ailamazyan.nall_tuples_set",
     "nall_tuples ?AD ?n = {ys. length ys = ?n & fo_nmlzd ?AD ys}",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Ailamazyan.eval_neg",
     "fo_wf ?\<phi> ?I ?t ==>
      fo_wf (Neg ?\<phi>) ?I (eval_neg (fv_fo_fmla_list ?\<phi>) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 1),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))
           ))),
    ("Ailamazyan.rem_nth_add_nth",
     "?i <= length ?zs ==> rem_nth ?i (add_nth ?i ?z ?zs) = ?zs",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)),
         template_var 1))),
    ("Ailamazyan.ad_agr_sets_comm",
     "ad_agr_sets ?FV ?S ?X ?\<sigma> ?\<tau> ==>
      ad_agr_sets ?FV ?S ?X ?\<tau> ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Ailamazyan.nall_tuples_rec_Inl",
     "?vs : nall_tuples_rec ?AD ?i ?n ==> Inl -` set ?vs <= ?AD",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 3)),
         template_var 2))),
    ("Ailamazyan.ad_agr_close_rec_length",
     "?ys : ad_agr_close_rec ?i ?m ?AD ?xs ==> length ?xs = length ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 4)))),
    ("Ailamazyan.all_tuples_set",
     "all_tuples ?xs ?n = {ys. length ys = ?n & set ys <= ?xs}",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Ailamazyan.ad_agr_close_set_nmlz_eq",
     "ad_agr_close_set ?AD (fo_nmlz ?AD' ` ?X) =
      \<Union> (ad_agr_close ?AD ` fo_nmlz ?AD' ` ?X)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_var 0))))),
    ("Ailamazyan.fo_nmlz_rec_take",
     "take ?n (fo_nmlz_rec ?i ?m ?AD ?xs) =
      fo_nmlz_rec ?i ?m ?AD (take ?n ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_var 0)))),
    ("Ailamazyan.rem_nth_length",
     "?i < length ?xs ==> length (rem_nth ?i ?xs) = length ?xs - 1",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 4, template_var 0)),
           template_hole 0)))),
    ("Ailamazyan.add_nth_length",
     "?i <= length ?zs ==> length (add_nth ?i ?z ?zs) = Suc (length ?zs)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0),
             template_var 1)),
         template_app
          (template_hole 0,
           template_app (template_hole 3, template_var 1))))),
    ("Ailamazyan.ad_agr_close_set_eq",
     "Ball ?X (fo_nmlzd ?AD') ==>
      ad_agr_close_set ?AD ?X = \<Union> (ad_agr_close ?AD ` ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 2))))),
    ("Ailamazyan.fv_ex_all",
     "pos ?i (fv_fo_fmla_list ?\<phi>) = None ==>
      fv_fo_fmla_list (Exists ?i ?\<phi>) = fv_fo_fmla_list ?\<phi>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1),
            template_app (template_hole 3, template_var 0)),
          template_hole 2)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 3, template_var 0)))),
    ("Ailamazyan.fv_ex_all",
     "pos ?i (fv_fo_fmla_list ?\<phi>) = None ==>
      fv_fo_fmla_list (Forall ?i ?\<phi>) = fv_fo_fmla_list ?\<phi>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1),
            template_app (template_hole 3, template_var 0)),
          template_hole 2)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 3, template_var 0)))),
    ("Ailamazyan.ad_agr_list_mono",
     "[| ?X <= ?Y; ad_agr_list ?Y ?ys ?xs |] ==> ad_agr_list ?X ?ys ?xs",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Ailamazyan.ad_equiv_list_mono",
     "[| ?X <= ?Y; ad_equiv_list ?Y ?xs ?ys |]
      ==> ad_equiv_list ?X ?xs ?ys",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Ailamazyan.sp_equiv_mono",
     "[| ?I <= ?J; sp_equiv ?\<sigma> ?\<tau> ?J |]
      ==> sp_equiv ?\<sigma> ?\<tau> ?I",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 3)
           ))),
    ("Ailamazyan.filter_rremdups_filter",
     "filter ?P (rremdups (filter ?Q ?xs)) =
      rremdups (filter (%x. ?P x & ?Q x) ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("Ailamazyan.ex_out", "finite ?X ==> EX k. k ~: ?X & k < Suc (card ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Ailamazyan.ext_tuple_set_mono",
     "?A <= ?B ==>
      ext_tuple_set ?AD ?ns ?ns' ?A <= ext_tuple_set ?AD ?ns ?ns' ?B",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0),
           template_var 3)))),
    ("Ailamazyan.eval_exists",
     "fo_wf ?\<phi> ?I ?t ==>
      fo_wf (Exists ?i ?\<phi>) ?I
       (eval_exists ?i (fv_fo_fmla_list ?\<phi>) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 3)),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 3)),
               template_var 1))
           ))),
    ("Ailamazyan.eval_forall",
     "fo_wf ?\<phi> ?I ?t ==>
      fo_wf (Forall ?i ?\<phi>) ?I
       (eval_forall ?i (fv_fo_fmla_list ?\<phi>) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 3)),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 3)),
               template_var 1))
           ))),
    ("Ailamazyan.add_nth_rem_nth_self",
     "?i < length ?xs ==> add_nth ?i (?xs ! ?i) (rem_nth ?i ?xs) = ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Ailamazyan.all_tuplesD",
     "?vs : all_tuples ?xs ?n ==> length ?vs = ?n & set ?vs <= ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1))
           ))),
    ("Ailamazyan.unify_vals_terms_sound",
     "unify_vals_terms ?vs ?ts ?\<sigma> = Some ?\<sigma>' ==>
      (the o ?\<sigma>') \<odot>e ?ts = ?vs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)),
           template_var 2),
         template_var 3))),
    ("Ailamazyan.id_mapD",
     "id_map ?j (Inr ?i) = Some ?x ==> ?i < ?j & ?i = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2),
            template_app (template_hole 4, template_var 1)),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Ailamazyan.fo_nmlz_set_rev",
     "set (fo_nmlz ?AD ?xs) <= Inl ` ?AD ==> set ?xs <= Inl ` ?AD",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)),
          template_app
           (template_app (template_hole 1, template_hole 0),
            template_var 1))],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 1)))),
    ("Ailamazyan.ad_agr_list_trans",
     "[| ad_agr_list ?X ?xs ?ys; ad_agr_list ?X ?ys ?zs |]
      ==> ad_agr_list ?X ?xs ?zs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Ailamazyan.ad_equiv_list_trans",
     "[| ad_equiv_list ?X ?xs ?ys; ad_equiv_list ?X ?ys ?zs |]
      ==> ad_equiv_list ?X ?xs ?zs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Ailamazyan.fo_res_infin",
     "[| fo_wf ?\<phi> ?I ?t; infinite (fo_rep ?t) |]
      ==> fo_res ?t = Infin",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 0))
                )
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Ailamazyan.nall_tuplesI",
     "[| length ?vs = ?n; fo_nmlzd ?AD ?vs |] ==> ?vs : nall_tuples ?AD ?n",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 2), template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Ailamazyan.fo_nmlzd_mono",
     "[| Inl -` set ?xs <= ?AD; fo_nmlzd ?AD' ?xs |] ==> fo_nmlzd ?AD ?xs",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_app (template_hole 1, template_var 2)),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 2)
           ))),
    ("Ailamazyan.insert_Inr",
     "insert (Inr ?i) (?X Un Inr ` {..<?i}) = ?X Un Inr ` {..<Suc ?i}",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, template_hole 4),
             template_app (template_hole 1, template_var 1)))),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 4),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)))))),
    ("Ailamazyan.ad_agr_list_link",
     "ad_agr_sets (set ?ns) (set ?ns) ?AD ?\<sigma> ?\<tau> =
      ad_agr_list ?AD (map ?\<sigma> ?ns) (map ?\<tau> ?ns)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 3)),
               template_app (template_hole 2, template_var 3)),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 3)))),
    ("Ailamazyan.sat_esat_conv",
     "wf_fo_intp ?\<phi> ?I ==>
      sat ?\<phi> ?I ?\<sigma> = esat ?\<phi> ?I (Inl o ?\<sigma>) UNIV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_hole 0)))),
    ("Ailamazyan.nfv_ex_all",
     "pos ?i (fv_fo_fmla_list ?\<phi>) = Some ?j ==>
      nfv ?\<phi> = Suc (nfv (Exists ?i ?\<phi>))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_app (template_hole 5, template_var 1)),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("Ailamazyan.nfv_ex_all",
     "pos ?i (fv_fo_fmla_list ?\<phi>) = Some ?j ==>
      nfv ?\<phi> = Suc (nfv (Forall ?i ?\<phi>))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_app (template_hole 5, template_var 1)),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("Ailamazyan.nall_tuples_rec_fo_nmlz_rec_complete",
     "fo_nmlz_rec ?j (id_map ?j) ?AD ?xs = ?xs ==>
      ?xs : nall_tuples_rec ?AD ?j (length ?xs)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_app (template_hole 3, template_var 2)),
              template_var 1),
            template_var 0),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Ailamazyan.ad_agr_sets_restrict",
     "ad_agr_sets (set (fv_fo_fmla_list ?\<phi>))
       (set (fv_fo_fmla_list ?\<phi>)) ?AD ?\<sigma> ?\<tau> ==>
      ad_agr ?\<phi> ?AD ?\<sigma> ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_hole 2,
                        template_app (template_hole 1, template_var 3))),
                    template_app
                     (template_hole 2,
                      template_app (template_hole 1, template_var 3))),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Ailamazyan.ad_equiv_pair_mono",
     "[| ?X <= ?Y; ad_equiv_pair ?Y (?a, ?a') |]
      ==> ad_equiv_pair ?X (?a, ?a')",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Ailamazyan.fo_res_fin",
     "[| fo_wf ?\<phi> ?I ?t; finite (fo_rep ?t) |]
      ==> fo_res ?t = Fin (fo_rep ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 0,
           template_app (template_hole 3, template_var 0))))),
    ("Ailamazyan.all_tuplesI",
     "[| length ?vs = ?n; set ?vs <= ?xs |] ==> ?vs : all_tuples ?xs ?n",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2), template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 2),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Ailamazyan.set_zip_map",
     "set (zip (map ?\<sigma> ?ns) (map ?\<tau> ?ns)) =
      (%n. (?\<sigma> n, ?\<tau> n)) ` set ?ns",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1))),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 0, template_var 1)))),
    ("Ailamazyan.rem_nth_take_drop",
     "?i < length ?xs ==> rem_nth ?i ?xs = take ?i ?xs @ drop (Suc ?i) ?xs",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Ailamazyan.pos_sound",
     "pos ?a ?xs = Some ?i ==> ?i < length ?xs & ?xs ! ?i = ?a",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app (template_hole 2, template_var 1))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 2))
           ))),
    ("Ailamazyan.sp_equiv_list_fv_list",
     "sp_equiv_list (?\<sigma> \<odot>e ?ts) (?\<tau> \<odot>e ?ts) ==>
      sp_equiv_list (map ?\<sigma> (fv_fo_terms_list ?ts))
       (map ?\<tau> (fv_fo_terms_list ?ts))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Ailamazyan.set_zip_comm",
     "(?x, ?y) : set (zip ?xs ?ys) ==> (?y, ?x) : set (zip ?ys ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 3)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Ailamazyan.fo_nmlz_rec_set_rev",
     "set (fo_nmlz_rec ?i ?m ?AD ?xs) <= Inl ` ?AD ==>
      set ?xs <= Inl ` ?AD",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)),
          template_app
           (template_app (template_hole 1, template_hole 0),
            template_var 1))],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 1)))),
    ("Ailamazyan.exists_map",
     "[| length ?xs = length ?ys; distinct ?xs |]
      ==> EX f. ?ys = map f ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Ailamazyan.rremdups_app",
     "rremdups (?xs @ [?x]) =
      rremdups ?xs @ (if ?x : set ?xs then [] else [?x])",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 6, template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))),
             template_hole 3),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))))),
    ("Ailamazyan.ad_agr_sets_mono",
     "[| ?X <= ?Y; ad_agr_sets ?FV ?S ?Y ?\<sigma> ?\<tau> |]
      ==> ad_agr_sets ?FV ?S ?X ?\<sigma> ?\<tau>",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 2),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 5),
               template_var 1),
             template_var 0)
           ))),
    ("Ailamazyan.ad_agr_sets_mono'",
     "[| ?S <= ?S'; ad_agr_sets ?FV ?S' ?X ?\<sigma> ?\<tau> |]
      ==> ad_agr_sets ?FV ?S ?X ?\<sigma> ?\<tau>",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_var 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 4),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 5),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Ailamazyan.ad_agr_list_eq",
     "[| set ?ys <= ?AD; ad_agr_list ?AD (map Inl ?xs) (map Inl ?ys) |]
      ==> ?xs = ?ys",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2))
            )],
       template_equation (template_var 0, template_var 2))),
    ("Ailamazyan.ad_agr_list_fo_nmlzd",
     "[| ad_agr_list ?AD ?vs ?vs'; fo_nmlzd ?AD ?vs; fo_nmlzd ?AD ?vs' |]
      ==> ?vs = ?vs'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Ailamazyan.ad_equiv_list_link",
     "(ALL i:set ?ns. ad_equiv_pair ?X (?\<sigma> i, ?\<tau> i)) =
      ad_equiv_list ?X (map ?\<sigma> ?ns) (map ?\<tau> ?ns)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 3)),
         t_empty),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 3)))),
    ("Ailamazyan.map_filter_app",
     "List.map_filter ?f (?xs @ [?x]) =
      List.map_filter ?f ?xs @ (case ?f ?x of None => [] | Some y => [y])",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_hole 4))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1), t_empty),
           template_app (template_var 2, template_var 0))))),
    ("Ailamazyan.add_nth_take_drop",
     "?i <= length ?zs ==>
      add_nth ?i ?v ?zs = take ?i ?zs @ ?v # drop ?i ?zs",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("Ailamazyan.set_zip_mapI",
     "?x : set ?xs ==>
      (?f ?x, ?g ?x) : set (zip (map ?f ?xs) (map ?g ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_var 1, template_var 3)),
                 template_app (template_var 0, template_var 3))),
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))))
           ))),
    ("Ailamazyan.eval_pred",
     "finite (?I (?r, length ?ts)) ==>
      fo_wf (Pred ?r ?ts) ?I (eval_pred ?ts (?I (?r, length ?ts)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_var 2,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app (template_hole 3, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_var 2,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app (template_hole 3, template_var 0)))))
           ))),
    ("Ailamazyan.ad_agr_list_fv_list",
     "ad_agr_list ?X (?\<sigma> \<odot>e ?ts) (?\<tau> \<odot>e ?ts) ==>
      ad_agr_list ?X (map ?\<sigma> (fv_fo_terms_list ?ts))
       (map ?\<tau> (fv_fo_terms_list ?ts))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Ailamazyan.fo_nmlz_mono",
     "[| ?AD <= ?AD'; Inl -` set ?xs <= ?AD |]
      ==> fo_nmlz ?AD' ?xs = fo_nmlz ?AD ?xs",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_app (template_hole 2, template_var 0)),
          template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Ailamazyan.eval_eterms_fv_fo_terms_set",
     "[| ?\<sigma> \<odot>e ?ts = ?\<sigma>' \<odot>e ?ts;
         ?n : fv_fo_terms_set ?ts |]
      ==> ?\<sigma> ?n = ?\<sigma>' ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 2))
            )],
       template_equation
        (template_app (template_var 3, template_var 0),
         template_app (template_var 1, template_var 0)))),
    ("Ailamazyan.nall_tuples_rec_fo_nmlz_rec_sound",
     "[| ?i <= ?j; ?xs : nall_tuples_rec ?AD ?i ?n |]
      ==> fo_nmlz_rec ?j (id_map ?j) ?AD ?xs = ?xs",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 4),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app (template_hole 0, template_var 3)),
             template_var 1),
           template_var 2),
         template_var 2))),
    ("Ailamazyan.map_map_of",
     "[| length ?xs = length ?ys; distinct ?xs |]
      ==> ?ys = map (the o map_of (zip ?xs ?ys)) ?xs",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 7, template_var 0)),
        template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)))),
           template_var 1)))),
    ("Ailamazyan.Inr_in_tuple",
     "[| fo_nmlz ?AD ?zs = ?zs; ?n < card (Inr -` set ?zs) |]
      ==> Inr ?n : set ?zs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_var 1),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app (template_hole 1, template_var 1))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Ailamazyan.ext_tuple_set_eq",
     "Ball ?X (fo_nmlzd ?AD) ==>
      ext_tuple_set ?AD ?ns ?ns' ?X =
      fo_nmlz ?AD ` \<Union> (ext_tuple ?AD ?ns ?ns' ` ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app (template_hole 7, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1),
                   template_var 0)),
               template_var 3)))))),
    ("Ailamazyan.fo_wf_eval_table",
     "fo_wf ?\<phi> ?I (?AD, ?n, ?X) ==>
      ?X = fo_nmlz ?AD ` eval_table (map Var [0..<?n]) ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 2)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1))),
             template_var 0))))),
    ("Ailamazyan.eval_eterm_cong",
     "(!!n. n : fv_fo_term_set ?t ==> ?\<sigma> n = ?\<sigma>' n) ==>
      ?\<sigma> \<cdot>e ?t = ?\<sigma>' \<cdot>e ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Ailamazyan.eval_eterms_cong",
     "(!!n. n : fv_fo_terms_set ?ts ==> ?\<sigma> n = ?\<sigma>' n) ==>
      ?\<sigma> \<odot>e ?ts = ?\<sigma>' \<odot>e ?ts",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Ailamazyan.fo_nmlz_add_rem",
     "?i <= length ?zs ==>
      EX z'.
         fo_nmlz ?AD (add_nth ?i ?z ?zs) =
         fo_nmlz ?AD (add_nth ?i z' (fo_nmlz ?AD ?zs))",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 4, template_var 2))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Ailamazyan.fo_nmlz_add_rem'",
     "?i <= length ?zs ==>
      EX z'.
         fo_nmlz ?AD (add_nth ?i ?z (fo_nmlz ?AD ?zs)) =
         fo_nmlz ?AD (add_nth ?i z' ?zs)",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app (template_hole 4, template_var 2))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Ailamazyan.fo_nmlz_idem_isl",
     "(!!x. x : set ?xs ==> case x of Inl z => z : ?X | Inr b => False) ==>
      fo_nmlz ?X ?xs = ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Ailamazyan.sp_equiv_list_subset",
     "[| set ?ms <= set ?ns;
         sp_equiv_list (map ?\<sigma> ?ns) (map ?\<sigma>' ?ns) |]
      ==> sp_equiv_list (map ?\<sigma> ?ms) (map ?\<sigma>' ?ms)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 3),
          template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 2)),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))
           ))),
    ("Ailamazyan.ad_agr_list_set",
     "[| ad_agr_list ?X ?xs ?ys; ?y : ?X; Inl ?y : set ?ys |]
      ==> Inl ?y : set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Ailamazyan.ad_agr_list_take_drop",
     "ad_agr_list ?AD ?xs ?ys ==>
      ad_agr_list ?AD (take ?i ?xs @ drop (Suc ?i) ?xs)
       (take ?i ?ys @ drop (Suc ?i) ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0)),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 1)))
           ))),
    ("Ailamazyan.fo_wf_X",
     "fo_wf ?\<phi> ?I (?AD, ?n, ?X) ==>
      ?X =
      fo_nmlz ?AD `
      proj_fmla ?\<phi> {\<sigma>. esat ?\<phi> ?I \<sigma> UNIV}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_app
            (template_app (template_hole 3, template_var 4),
             template_app (template_hole 2, t_empty)))))),
    ("Ailamazyan.fo_rep_norm",
     "fo_wf ?\<phi> ?I (?AD, ?n, ?X) ==>
      ?X = fo_nmlz ?AD ` map Inl ` fo_rep (?AD, ?n, ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_var 0)))))))),
    ("Ailamazyan.eval_conj",
     "[| fo_wf ?\<phi> ?I ?t\<phi>; fo_wf ?\<psi> ?I ?t\<psi> |]
      ==> fo_wf (Conj ?\<phi> ?\<psi>) ?I
           (eval_conj (fv_fo_fmla_list ?\<phi>) ?t\<phi>
             (fv_fo_fmla_list ?\<psi>) ?t\<psi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 1)),
               template_var 3),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 4)),
                   template_var 2),
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("Ailamazyan.eval_disj",
     "[| fo_wf ?\<phi> ?I ?t\<phi>; fo_wf ?\<psi> ?I ?t\<psi> |]
      ==> fo_wf (Disj ?\<phi> ?\<psi>) ?I
           (eval_disj (fv_fo_fmla_list ?\<phi>) ?t\<phi>
             (fv_fo_fmla_list ?\<psi>) ?t\<psi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 1)),
               template_var 3),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 4)),
                   template_var 2),
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("Ailamazyan.ad_agr_close_set_length",
     "[| ?z : ad_agr_close_set ?AD ?X; !!x. x : ?X ==> length x = ?n |]
      ==> length ?z = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 3), template_var 0))),
    ("Ailamazyan.ad_agr_list_eval",
     "[| \<Union> (set (map set_fo_term ?ts)) <= ?AD;
         ad_agr_list ?AD (?\<sigma> \<odot>e ?ts) ?zs |]
      ==> EX \<tau>. ?zs = \<tau> \<odot>e ?ts",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 3))),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 3)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Ailamazyan.fo_nmlz_set",
     "set (fo_nmlz ?AD ?xs) =
      set ?xs Int Inl ` ?AD Un
      Inr ` {..<min (length ?xs) (card (set ?xs - Inl ` ?AD))}",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app (template_hole 11, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 12, template_var 0)),
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_var 1))),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 12, template_var 0)),
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_var 1))))))))),
    ("Ailamazyan.fo_nmlz_set_card",
     "fo_nmlz ?AD ?xs = ?xs ==>
      set ?xs = set ?xs Int Inl ` ?AD Un Inr ` {..<card (Inr -` set ?xs)}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 1),
            template_var 0),
          template_var 0)],
       template_equation
        (template_app (template_hole 9, template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 9, template_var 0)),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 1))),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_hole 3),
                   template_app (template_hole 9, template_var 0))))))))),
    ("Ailamazyan.eval_ajoin",
     "[| fo_wf ?\<phi> ?I ?t\<phi>; fo_wf ?\<psi> ?I ?t\<psi> |]
      ==> fo_wf (Conj ?\<phi> (Neg ?\<psi>)) ?I
           (eval_ajoin (fv_fo_fmla_list ?\<phi>) ?t\<phi>
             (fv_fo_fmla_list ?\<psi>) ?t\<psi>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_app (template_hole 2, template_var 1))),
               template_var 3),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 4)),
                   template_var 2),
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("Ailamazyan.esat_UNIV_cong",
     "[| ad_agr ?\<phi> ?AD ?\<sigma> ?\<tau>; act_edom ?\<phi> ?I <= ?AD |]
      ==> esat ?\<phi> ?I ?\<sigma> UNIV = esat ?\<phi> ?I ?\<tau> UNIV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 4), template_var 0),
          template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 0),
             template_var 2),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 0),
             template_var 1),
           template_hole 0)))),
    ("Ailamazyan.fo_nmlz_rem_nth_add_nth",
     "[| fo_nmlz ?AD ?zs = ?zs; ?i <= length ?zs |]
      ==> fo_nmlz ?AD (rem_nth ?i (fo_nmlz ?AD (add_nth ?i ?z ?zs))) = ?zs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_var 2),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 4, template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)))),
         template_var 2))),
    ("Ailamazyan.ad_agr_list_subset",
     "[| set ?ms <= set ?ns;
         ad_agr_list ?X (map ?\<sigma> ?ns) (map ?\<sigma>' ?ns) |]
      ==> ad_agr_list ?X (map ?\<sigma> ?ms) (map ?\<sigma>' ?ms)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 4),
          template_app (template_hole 2, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 3)),
              template_app
               (template_app (template_hole 0, template_var 0),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 4)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 4))
           ))),
    ("Ailamazyan.exists_fo_nmlzd",
     "[| length ?xs = length ?ys; distinct ?xs; fo_nmlzd ?AD ?ys |]
      ==> EX f. ?ys = fo_nmlz ?AD (map f ?xs)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Ailamazyan.fo_nmlz_Cons",
     "fo_nmlz ?AD [?x] =
      (case ?x of Inl x => if x : ?AD then [Inl x] else [Inr 0]
       | Inr b => [Inr 0])",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1),
         template_app
          (template_app (template_hole 7, template_var 0),
           template_hole 6)),
       template_app
        (template_app (template_app (template_hole 5, t_empty), t_empty),
         template_var 0))),
    ("Ailamazyan.fo_nmlzd_set",
     "fo_nmlzd ?AD ?xs ==>
      set ?xs =
      set ?xs Int Inl ` ?AD Un
      Inr ` {..<min (length ?xs) (card (Inr -` set ?xs))}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 11, template_var 0),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 11, template_var 0)),
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 1))),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_hole 5),
                     template_app
                      (template_hole 11, template_var 0)))))))))),
    ("Ailamazyan.esat_fv_cong",
     "(!!n. n : fv_fo_fmla ?\<phi> ==> ?\<sigma> n = ?\<sigma>' n) ==>
      esat ?\<phi> ?I ?\<sigma> ?X = esat ?\<phi> ?I ?\<sigma>' ?X",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 3),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 2),
           template_var 0)))),
    ("Ailamazyan.esat_exists_not_fv",
     "[| ?n ~: fv_fo_fmla ?\<phi>; ?X ~= {} |]
      ==> esat (Exists ?n ?\<phi>) ?I ?\<sigma> ?X =
          esat ?\<phi> ?I ?\<sigma> ?X",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app (template_hole 5, template_var 3))
                )
            ),
        template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3)),
               template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0),
           template_var 2)))),
    ("Ailamazyan.esat_forall_not_fv",
     "[| ?n ~: fv_fo_fmla ?\<phi>; ?X ~= {} |]
      ==> esat (Forall ?n ?\<phi>) ?I ?\<sigma> ?X =
          esat ?\<phi> ?I ?\<sigma> ?X",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app (template_hole 5, template_var 3))
                )
            ),
        template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3)),
               template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0),
           template_var 2)))),
    ("Ailamazyan.nall_tuples_rec_filter",
     "[| ?xs : nall_tuples_rec ?AD ?n (length ?xs);
         ?ys = filter (%x. ~ isl x) ?xs |]
      ==> ?ys : nall_tuples_rec {} ?n (length ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_app (template_hole 5, template_var 3)))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 3, t_empty), template_var 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_app
                (template_app (template_hole 6, template_hole 0),
                 template_var 1),
               template_app (template_hole 5, template_var 0)))
           ))),
    ("Ailamazyan.nall_tuplesD",
     "?vs : nall_tuples ?AD ?n ==>
      length ?vs = ?n &
      set ?vs <= Inl ` ?AD Un Inr ` {..<?n} & fo_nmlzd ?AD ?vs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app (template_hole 12, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app (template_hole 9, template_var 2)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_var 2)),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_hole 4),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_app (template_hole 1, template_var 0))))),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)))
           ))),
    ("Ailamazyan.rem_nth_sound",
     "[| distinct ?xs; pos ?n ?xs = Some ?i |]
      ==> rem_nth ?i (map ?\<sigma> ?xs) =
          map ?\<sigma> (filter ((~=) ?n) ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 3),
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 3)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 2, t_empty), template_var 3))))),
    ("Ailamazyan.add_nth_rem_nth_map",
     "[| distinct ?xs; pos ?n ?xs = Some ?i |]
      ==> add_nth ?i ?a (rem_nth ?i (map ?\<sigma> ?xs)) =
          map (?\<sigma>(?n := ?a)) ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 3), template_var 4),
          template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 4))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3),
               template_var 1)),
           template_var 4)))),
    ("Ailamazyan.fo_nmlz_add_nth_rem_nth",
     "[| fo_nmlz ?AD ?xs = ?xs; ?i < length ?xs |]
      ==> EX z. fo_nmlz ?AD (add_nth ?i z (fo_nmlz ?AD (rem_nth ?i ?xs))) =
                ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_var 1),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 3, template_var 1))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Ailamazyan.map_values_cong",
     "(!!x y. Mapping.lookup ?t x = Some y ==> ?f x y = ?f' x y) ==>
      Mapping.map_values ?f ?t = Mapping.map_values ?f' ?t",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Ailamazyan.card_wit_sub",
     "[| finite ?Z; card ?Z <= card {ts: ?X. EX z:?Z. ts = ?f z} |]
      ==> ?f ` ?Z <= ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 2),
          template_app
           (template_hole 7, template_app (template_hole 6, t_empty)))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("Ailamazyan.ad_agr_list_fv_list'",
     "[| \<Union> (set (map set_fo_term ?ts)) <= ?X;
         ad_agr_list ?X (map ?\<sigma> (fv_fo_terms_list ?ts))
          (map ?\<tau> (fv_fo_terms_list ?ts)) |]
      ==> ad_agr_list ?X (?\<sigma> \<odot>e ?ts) (?\<tau> \<odot>e ?ts)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 3))),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app (template_hole 1, template_var 3))),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_app (template_hole 1, template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))
           ))),
    ("Ailamazyan.fo_rep_fin",
     "[| fo_wf ?\<phi> ?I (?AD, ?n, ?X); fo_fin (?AD, ?n, ?X) |]
      ==> fo_rep (?AD, ?n, ?X) = map projl ` ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 7, template_var 2),
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)))),
    ("Ailamazyan.ad_agr_close_sound",
     "[| ?ys : ad_agr_close ?Y ?xs; fo_nmlzd ?X ?xs; ?X Int ?Y = {} |]
      ==> fo_nmlzd (?X Un ?Y) ?ys & ad_agr_list ?X ?xs ?ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 0), template_var 2),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 2)),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 3))
           ))),
    ("Ailamazyan.ad_agr_close_set_sound",
     "[| ?z : ad_agr_close_set (?AD - ?AD') ?X;
         !!x. x : ?X ==> fo_nmlzd ?AD' x; ?AD' <= ?AD |]
      ==> fo_nmlzd ?AD ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1)),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_inequation (less_equals, template_var 1, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 3)
           ))),
    ("Ailamazyan.esat_UNIV_ad_agr_list",
     "[| ad_agr_list ?AD (map ?\<sigma> (fv_fo_fmla_list ?\<phi>))
          (map ?\<tau> (fv_fo_fmla_list ?\<phi>));
         act_edom ?\<phi> ?I <= ?AD |]
      ==> esat ?\<phi> ?I ?\<sigma> UNIV = esat ?\<phi> ?I ?\<tau> UNIV",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app (template_hole 5, template_var 2))),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_app (template_hole 5, template_var 2)))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_var 2), template_var 0),
          template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0),
             template_var 3),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0),
             template_var 1),
           template_hole 0)))),
    ("Ailamazyan.ad_agr_close_complete",
     "[| ?X Int ?Y = {}; fo_nmlzd ?X ?xs; fo_nmlzd (?X Un ?Y) ?ys;
         ad_agr_list ?X ?xs ?ys |]
      ==> ?ys : ad_agr_close ?Y ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 3), template_var 2),
          template_hole 5),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Ailamazyan.proj_fmla_esat_sat",
     "wf_fo_intp ?\<phi> ?I ==>
      proj_fmla ?\<phi> {\<sigma>. esat ?\<phi> ?I \<sigma> UNIV} Int
      range (map Inl) =
      map Inl ` proj_fmla ?\<phi> {\<sigma>. sat ?\<phi> ?I \<sigma>}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 1),
               template_app (template_hole 9, t_empty))),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)),
             template_hole 3)),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_hole 4)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, t_empty)))))),
    ("Ailamazyan.ext_tuple_set_length",
     "[| ?z : ext_tuple_set ?AD ?ns ?ns' ?X;
         !!x. x : ?X ==> length x = length ?ns |]
      ==> length ?z = length ?ns + length ?ns'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 2, template_var 4),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 1, template_var 1))))),
    ("Ailamazyan.ad_agr_list_rev_mono",
     "[| ?Y <= ?X; ad_agr_list ?Y ?ys ?xs; Inl -` set ?xs <= ?Y;
         Inl -` set ?ys <= ?Y |]
      ==> ad_agr_list ?X ?ys ?xs",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_hole 1),
            template_app (template_hole 0, template_var 0)),
          template_var 3),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_hole 1),
            template_app (template_hole 0, template_var 1)),
          template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Ailamazyan.esat_UNIV_code",
     "esat_UNIV ?\<phi> ?I ?\<sigma> =
      (if wf_fo_intp ?\<phi> ?I
       then case eval_fmla ?\<phi> ?I of
            (AD, n, X) =>
              fo_nmlz (act_edom ?\<phi> ?I)
               (map ?\<sigma> (fv_fo_fmla_list ?\<phi>))
              : X
       else esat_UNIV ?\<phi> ?I ?\<sigma>)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 10, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 7, t_empty),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_app
          (template_app
            (template_app (template_hole 10, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Ailamazyan.ext_tuple_eq",
     "length ?fv_sub = length ?as ==>
      ext_tuple ?AD ?fv_sub ?fv_sub_comp ?as =
      (%fs. map snd (merge (zip ?fv_sub ?as) (zip ?fv_sub_comp fs))) `
      nall_tuples_rec ?AD (card (Inr -` set ?as)) (length ?fv_sub_comp)",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 3),
          template_app (template_hole 12, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 10, template_var 1),
               template_var 3),
             template_var 0),
           template_var 2),
         template_app
          (template_app (template_hole 9, t_empty),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 2)))),
             template_app (template_hole 13, template_var 0)))))),
    ("Ailamazyan.unify_vals_terms_complete",
     "[| ?\<sigma>'' \<odot>e ?ts = ?vs;
         !!n. ?\<sigma> n ~= None ==> ?\<sigma> n = Some (?\<sigma>'' n) |]
      ==> EX \<sigma>'.
             unify_vals_terms ?vs ?ts ?\<sigma> = Some \<sigma>'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 3), template_var 2),
          template_var 1),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Ailamazyan.fo_nmlz_rec_sound",
     "[| ran ?m <= {..<?i};
         filter ((<=) ?i)
          (rremdups
            (List.map_filter (case_sum Map.empty Some)
              (fo_nmlz_rec ?i ?m ?AD ?xs))) =
         ?ns |]
      ==> ?ns = [?i..<?i + length ?ns]",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 13, template_var 4),
          template_app (template_hole 12, template_var 3)),
        template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 3)),
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, t_empty),
                    template_hole 4)),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 3),
                      template_var 4),
                    template_var 2),
                  template_var 1)))),
          template_var 0)],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app (template_hole 0, template_var 0)))))),
    ("Ailamazyan.sp_equiv_list_almost_same",
     "[| sp_equiv_list (?xs @ ?v # ?ys) (?xs @ ?w # ?ys);
         ?v : set ?xs Un set ?ys | ?w : set ?xs Un set ?ys |]
      ==> ?v = ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_app
                 (template_app (template_hole 5, template_var 0),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app (template_hole 1, template_var 3)),
                    template_app (template_hole 1, template_var 1)))),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 3)),
                  template_app (template_hole 1, template_var 1))))
            )],
       template_equation (template_var 2, template_var 0))),
    ("Ailamazyan.ad_agr_list_fo_nmlzd_isl",
     "[| ad_agr_list ?X (map ?f ?xs) (map ?g ?xs); fo_nmlzd ?X (map ?f ?xs);
         ?x : set ?xs; isl (?f ?x) |]
      ==> ?f ?x = ?g ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 1,
              template_app (template_var 3, template_var 0))
            )],
       template_equation
        (template_app (template_var 3, template_var 0),
         template_app (template_var 1, template_var 0)))),
    ("Ailamazyan.proj_tuple_map",
     "[| sorted_distinct ?ns; sorted_distinct ?ms; set ?ns <= set ?ms |]
      ==> proj_tuple ?ns (zip ?ms (map ?\<sigma> ?ms)) = map ?\<sigma> ?ns",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 2)),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_var 1)),
              template_app (template_hole 6, template_var 1))
            ),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Ailamazyan.nall_tuples_rec_filter_rev",
     "[| ?ys : nall_tuples_rec {} ?n (length ?ys);
         ?ys = filter (%x. ~ isl x) ?xs; Inl -` set ?xs <= ?AD |]
      ==> ?xs : nall_tuples_rec ?AD ?n (length ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 10, template_hole 9),
                  template_var 2),
                template_app (template_hole 8, template_var 3)))
            ),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 6, t_empty), template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_hole 1),
            template_app (template_hole 0, template_var 1)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 10, template_var 0),
                 template_var 2),
               template_app (template_hole 8, template_var 1)))
           ))),
    ("Ailamazyan.distinct_set_zip",
     "[| length ?nsx = length ?xs; distinct ?nsx;
         (?a, ?b) : set (zip ?nsx ?xs); (?a, ?ba) : set (zip ?nsx ?xs) |]
      ==> ?b = ?ba",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 4),
          template_app (template_hole 6, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3)))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Ailamazyan.sat_code",
     "sat ?\<phi> ?I ?\<sigma> =
      (if wf_fo_intp ?\<phi> ?I
       then case eval_fmla ?\<phi> ?I of
            (AD, n, X) =>
              fo_nmlz (act_edom ?\<phi> ?I)
               (map (Inl o ?\<sigma>) (fv_fo_fmla_list ?\<phi>))
              : X
       else sat ?\<phi> ?I ?\<sigma>)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 12, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 9, t_empty),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_app
          (template_app
            (template_app (template_hole 12, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Ailamazyan.pairwise_take_drop",
     "[| pairwise ?P (set (zip ?xs ?ys)); length ?xs = length ?ys |]
      ==> pairwise ?P
           (set (zip (take ?i ?xs @ drop (Suc ?i) ?xs)
                  (take ?i ?ys @ drop (Suc ?i) ?ys)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 3),
              template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 1)))
            ),
        template_equation
         (template_app (template_hole 8, template_var 2),
          template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 12, template_var 3),
             template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_var 0),
                         template_var 2)),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 0)),
                       template_var 2))),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app (template_hole 3, template_var 0)),
                     template_var 1)))))
           ))),
    ("Ailamazyan.proj_out_list",
     "finite ?AD ==>
      EX \<tau>.
         ad_agr_list ?AD (map ?\<sigma> ?ns) (map (Inl o \<tau>) ?ns) &
         (ALL j x. j : set ?ns --> ?\<sigma> j = Inl x --> \<tau> j = x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2))],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Ailamazyan.norm_proj_fmla_esat_sat",
     "wf_fo_intp ?\<phi> ?I ==>
      fo_nmlz (act_edom ?\<phi> ?I) `
      proj_fmla ?\<phi> {\<sigma>. esat ?\<phi> ?I \<sigma> UNIV} =
      fo_nmlz (act_edom ?\<phi> ?I) `
      map Inl ` proj_fmla ?\<phi> {\<sigma>. sat ?\<phi> ?I \<sigma>}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 9, template_var 1),
             template_app (template_hole 8, t_empty))),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, t_empty))))))),
    ("Ailamazyan.fo_nmlz_Cons_Cons",
     "fo_nmlz ?AD [?x, ?x] =
      (case ?x of
       Inl x => if x : ?AD then [Inl x, Inl x] else [Inr 0, Inr 0]
       | Inr b => [Inr 0, Inr 0])",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1),
         template_app
          (template_app (template_hole 7, template_var 0),
           template_app
            (template_app (template_hole 7, template_var 0),
             template_hole 6))),
       template_app
        (template_app (template_app (template_hole 5, t_empty), t_empty),
         template_var 0))),
    ("Ailamazyan.sat_ad_agr_list",
     "[| wf_fo_intp ?\<phi> ?I;
         ad_agr_list ?AD (map (Inl o ?\<sigma>) (fv_fo_fmla_list ?\<phi>))
          (map (Inl o ?\<tau>) (fv_fo_fmla_list ?\<phi>));
         act_edom ?\<phi> ?I <= ?AD |]
      ==> sat ?\<phi> ?I ?\<sigma> = sat ?\<phi> ?I ?\<tau>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_hole 5),
                      template_var 1)),
                  template_app (template_hole 4, template_var 4))),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_var 0)),
                template_app (template_hole 4, template_var 4)))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 4), template_var 3),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 3),
           template_var 0)))),
    ("Ailamazyan.ad_agr_list_add_nth",
     "[| ?i <= length ?zs;
         ad_agr_list ?AD (add_nth ?i ?v ?zs) (add_nth ?i ?w ?zs);
         ?v ~= ?w |]
      ==> {?v, ?w} Int (Inl ` ?AD Un set ?zs) = {}",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app (template_hole 12, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 2),
                template_app
                 (template_app
                   (template_app (template_hole 10, template_var 4),
                    template_var 1),
                  template_var 3)),
              template_app
               (template_app
                 (template_app (template_hole 10, template_var 4),
                  template_var 0),
                template_var 3))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 4))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_app (template_hole 0, template_var 3))),
         template_hole 4))),
    ("Ailamazyan.fo_nmlzd_app_Inr",
     "[| Inr ?n ~: set ?xs; Inr ?n' ~: set ?xs;
         fo_nmlzd ?AD (?xs @ [Inr ?n]); fo_nmlzd ?AD (?xs @ [Inr ?n']) |]
      ==> ?n = ?n'",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 3)),
                  template_app (template_hole 5, template_var 2))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 1)),
                  template_app (template_hole 5, template_var 2))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 6, template_var 3)),
                  template_hole 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 6, template_var 1)),
                  template_hole 1)))
            )],
       template_equation (template_var 3, template_var 1))),
    ("Ailamazyan.proj_tuple_length",
     "[| sorted_distinct ?ns; sorted_distinct ?ms; set ?ns <= set ?ms;
         length ?ms = length ?xs |]
      ==> length (proj_tuple ?ns (zip ?ms ?xs)) = length ?ns",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 2)),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 1)),
              template_app (template_hole 7, template_var 1))
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app (template_hole 3, template_var 2)))),
    ("Ailamazyan.map_fst_merge",
     "[| sorted_distinct (map fst ?nxs); sorted_distinct (map fst ?mys) |]
      ==> map fst (merge ?nxs ?mys) = sort (map fst ?nxs @ map fst ?mys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_var 1))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_var 0))),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 1)),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 0)))))),
    ("Ailamazyan.fo_nmlz_twice",
     "[| sorted_distinct ?ns; sorted_distinct ?ns'; set ?ns <= set ?ns' |]
      ==> fo_nmlz ?AD
           (proj_tuple ?ns (zip ?ns' (fo_nmlz ?AD (map ?\<sigma> ?ns')))) =
          fo_nmlz ?AD (map ?\<sigma> ?ns)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 3)),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 2)),
              template_app (template_hole 7, template_var 2))
            ),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 3),
          template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))))),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3))))),
    ("Ailamazyan.esat_Pred",
     "[| ad_agr_sets ?FV ?S (\<Union> (set ` ?X)) ?\<sigma> ?\<tau>;
         fv_fo_terms_set ?ts <= ?FV; ?\<sigma> \<odot>e ?ts : map Inl ` ?X;
         ?t : set ?ts |]
      ==> ?\<sigma> \<cdot>e ?t = ?\<tau> \<cdot>e ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 14, template_var 6),
                    template_var 5),
                  template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_hole 11),
                      template_var 4))),
                template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 1),
          template_var 6),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_hole 4)),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Ailamazyan.fo_nmlz_rec_set",
     "ran ?m <= {..<?i} ==>
      set (fo_nmlz_rec ?i ?m ?AD ?xs) Un Inr ` {..<?i} =
      set ?xs Int Inl ` ?AD Un
      Inr ` {..<?i + card (set ?xs - Inl ` ?AD - dom ?m)}",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 14, template_var 3),
          template_app (template_hole 13, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 9, template_var 2),
                     template_var 3),
                   template_var 1),
                 template_var 0))),
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_app (template_hole 13, template_var 2))),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 10, template_var 0)),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 1))),
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app (template_hole 10, template_var 0)),
                         template_app
                          (template_app (template_hole 5, template_hole 4),
                           template_var 1))),
                     template_app
                      (template_hole 0, template_var 3)))))))))),
    ("Ailamazyan.add_nth_restrict",
     "[| fo_nmlz ?AD ?zs = ?zs; ?i <= length ?zs |]
      ==> EX z':Inl ` ?AD Un Inr ` {..<Suc (card (Inr -` set ?zs))}.
             fo_nmlz ?AD (add_nth ?i ?z ?zs) =
             fo_nmlz ?AD (add_nth ?i z' ?zs)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 14, template_var 3),
            template_var 2),
          template_var 2),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 12, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app (template_hole 2, template_hole 6),
                           template_app
                            (template_hole 1, template_var 2)))))))),
             t_empty)
           ))),
    ("Ailamazyan.fin_ad_agr_list_iff",
     "[| finite ?AD; !!vs. vs : ?Z ==> length vs = ?n;
         ?Z = {ts. EX ts':?X. ad_agr_list ?AD (map Inl ts) ts'} |]
      ==> finite ?Z = (\<Union> (set ` ?Z) <= ?AD)",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 3)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_equation
         (template_var 2, template_app (template_hole 10, t_empty))],
       template_equation
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 2))),
           template_var 3)))),
    ("Ailamazyan.list_induct2_rev",
     "[| length ?xs = length ?ys; ?P [] [];
         !!x y xs ys. ?P xs ys ==> ?P (xs @ [x]) (ys @ [y]) |]
      ==> ?P ?xs ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 2),
          template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_hole 9),
              template_hole 8)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           ))),
    ("Ailamazyan.sp_equiv_list_fv",
     "[| !!i. i : fv_fo_terms_set ?ts ==>
              ad_equiv_pair ?X (?\<sigma> i, ?\<tau> i);
         \<Union> (set_fo_term ` set ?ts) <= ?X;
         sp_equiv ?\<sigma> ?\<tau> (fv_fo_terms_set ?ts) |]
      ==> sp_equiv_list (map ((\<cdot>e) ?\<sigma>) ?ts)
           (map ((\<cdot>e) ?\<tau>) ?ts)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app (template_hole 4, template_var 3))),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_app (template_hole 11, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 3))
           ))),
    ("Ailamazyan.esat_Pred_inf",
     "[| fv_fo_terms_set ?ts <= ?FV; fv_fo_terms_set ?ts <= ?S;
         ad_agr_sets ?FV ?S ?AD ?\<sigma> ?\<tau>;
         ad_agr_list ?AD (?\<sigma> \<odot>e ?ts) ?vs;
         \<Union> (set_fo_term ` set ?ts) <= ?AD |]
      ==> ad_agr_list ?AD (?\<tau> \<odot>e ?ts) ?vs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 6),
          template_var 5),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 6),
          template_var 4),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 6)),
              template_var 0)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_app (template_hole 0, template_var 6))),
          template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 6)),
             template_var 0)
           ))),
    ("Ailamazyan.fo_nmlz_rec_shift",
     "[| fo_nmlz_rec ?i (id_map ?i) ?AD ?xs = ?xs;
         ?i' = card (Inr -` (Inr ` {..<?i} Un set (take ?n ?xs)));
         ?n <= length ?xs |]
      ==> fo_nmlz_rec ?i' (id_map ?i') ?AD (drop ?n ?xs) = drop ?n ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 13, template_var 4),
                template_app (template_hole 12, template_var 4)),
              template_var 3),
            template_var 2),
          template_var 2),
        template_equation
         (template_var 1,
          template_app
           (template_hole 10,
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_hole 8),
                    template_app (template_hole 5, template_var 4))),
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_var 2)))))),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 1, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 13, template_var 1),
               template_app (template_hole 12, template_var 1)),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Ailamazyan.combine_map2",
     "[| length ?ys = length ?xs; length ?ys' = length ?xs'; distinct ?xs;
         distinct ?xs'; set ?xs Int set ?xs' = {} |]
      ==> EX f. ?ys = map f ?xs & ?ys' = map f ?xs'",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 3),
          template_app (template_hole 9, template_var 2)),
        template_equation
         (template_app (template_hole 10, template_var 1),
          template_app (template_hole 9, template_var 0)),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2)),
            template_app (template_hole 5, template_var 0)),
          template_hole 4)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Ailamazyan.main",
     "[| ad_agr ?\<phi> ?AD ?\<sigma> ?\<tau>; act_edom ?\<phi> ?I <= ?AD;
         Inl ` ?AD Un Inr ` {..<d ?\<phi>} <= ?X;
         ?\<tau> ` fv_fo_fmla ?\<phi> <= ?X |]
      ==> esat ?\<phi> ?I ?\<sigma> UNIV = esat ?\<phi> ?I ?\<tau> ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 12, template_var 5),
            template_var 1),
          template_var 4),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_var 4)),
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 5)))),
          template_var 0),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_var 2),
            template_app (template_hole 3, template_var 5)),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 1),
             template_var 3),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 1),
             template_var 2),
           template_var 0)))),
    ("Ailamazyan.merge_map",
     "[| sorted_distinct ?ns; sorted_distinct ?ms;
         set ?ns Int set ?ms = {} |]
      ==> map snd
           (merge (zip ?ns (map ?\<sigma> ?ns))
             (zip ?ms (map ?\<sigma> ?ms))) =
          map ?\<sigma> (sort (?ns @ ?ms))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_hole 13),
                  template_var 2)),
              template_app (template_hole 12, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_hole 13),
                  template_var 1)),
              template_app (template_hole 12, template_var 1))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)),
            template_app (template_hole 9, template_var 1)),
          template_hole 8)],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 2))),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)))),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("Ailamazyan.mapping_join_cross_with",
     "(!!x x'. [| x : ?t; x' : ?t'; ?h x ~= ?h' x' |] ==> ?f x x' = {}) ==>
      set_of_idx
       (mapping_join (cross_with ?f) (cluster (Some o ?h) ?t)
         (cluster (Some o ?h') ?t')) =
      cross_with ?f ?t ?t'",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 0)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 2)),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)),
               template_var 3))),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 0),
             template_var 4),
           template_var 3)))),
    ("Ailamazyan.proj_tuple_merge",
     "[| sorted_distinct (map fst ?nxs); sorted_distinct (map fst ?mys);
         set (map fst ?nxs) Int set (map fst ?mys) = {} |]
      ==> proj_tuple (map fst ?nxs) (merge ?nxs ?mys) = map snd ?nxs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_app
                   (template_app (template_hole 11, template_hole 10),
                    template_var 1))),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 11, template_hole 10),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_app
                   (template_app (template_hole 11, template_hole 10),
                    template_var 0))),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 11, template_hole 10),
                  template_var 0)))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 11, template_hole 10),
                  template_var 1))),
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 11, template_hole 10),
                template_var 0))),
          template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 11, template_hole 10),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 1)))),
    ("Ailamazyan.ad_agr_close_correct",
     "[| ?AD' <= ?AD;
         !!\<sigma> \<tau>.
            ad_agr_sets (set (fv_fo_fmla_list ?\<phi>))
             (set (fv_fo_fmla_list ?\<phi>)) ?AD' \<sigma> \<tau> ==>
            (\<sigma> : ?R) = (\<tau> : ?R) |]
      ==> \<Union>
           (ad_agr_close (?AD - ?AD') `
            fo_nmlz ?AD' ` proj_fmla ?\<phi> ?R) =
          fo_nmlz ?AD ` proj_fmla ?\<phi> ?R",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Ailamazyan.ad_agr_list_add",
     "[| ad_agr_list ?AD ?xs ?ys; ?i <= length ?xs |]
      ==> EX z':Inl ` ?AD Un Inr ` {..<Suc (card (Inr -` set ?ys))} Un
                set ?ys.
             ad_agr_list ?AD (take ?i ?xs @ ?z # drop ?i ?xs)
              (take ?i ?ys @ z' # drop ?i ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 17, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 15, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_app (template_hole 12, template_hole 11),
                         template_var 4)),
                     template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_app
                        (template_hole 8,
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6,
                             template_app
                              (template_app
                                (template_hole 5, template_hole 9),
                               template_app
                                (template_hole 4, template_var 2)))))))),
                 template_app (template_hole 4, template_var 2))),
             t_empty)
           ))),
    ("Ailamazyan.fo_nmlz_rec_idem",
     "[| Inl -` set ?ys <= ?AD;
         rremdups (List.map_filter (case_sum Map.empty Some) ?ys) = ?ns;
         set (filter (%n. n < ?i) ?ns) <= {..<?i};
         filter ((<=) ?i) ?ns = [?i..<?i + ?k] |]
      ==> fo_nmlz_rec ?i (id_map ?i) ?AD ?ys = ?ys",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 19, template_hole 18),
            template_app (template_hole 17, template_var 4)),
          template_var 3),
        template_equation
         (template_app
           (template_hole 15,
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, t_empty),
                  template_hole 11)),
              template_var 4)),
          template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app
             (template_app (template_hole 8, t_empty), template_var 2)),
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 5, template_var 1)),
            template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 1)),
             template_var 3),
           template_var 4),
         template_var 4))),
    ("Ailamazyan.proj_fmla_conj_sub",
     "act_edom ?\<psi> ?I <= ?AD ==>
      fo_nmlz ?AD `
      proj_fmla (Conj ?\<phi> ?\<psi>)
       {\<sigma>. esat ?\<phi> ?I \<sigma> UNIV} Int
      fo_nmlz ?AD `
      proj_fmla (Conj ?\<phi> ?\<psi>)
       {\<sigma>. esat ?\<psi> ?I \<sigma> UNIV}
      <= fo_nmlz ?AD `
         proj_fmla (Conj ?\<phi> ?\<psi>)
          {\<sigma>. esat (Conj ?\<phi> ?\<psi>) ?I \<sigma> UNIV}",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 9, template_var 3), template_var 2),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_var 3)),
                 template_app (template_hole 2, t_empty)))),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 3)),
               template_app (template_hole 2, t_empty)))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 3)),
             template_app (template_hole 2, t_empty)))))),
    ("Ailamazyan.main_cor_inf",
     "[| ad_agr ?\<phi> ?AD ?\<sigma> ?\<tau>; act_edom ?\<phi> ?I <= ?AD;
         d ?\<phi> <= ?n;
         ?\<tau> ` fv_fo_fmla ?\<phi> <= Inl ` ?AD Un Inr ` {..<?n} |]
      ==> esat ?\<phi> ?I ?\<sigma> UNIV =
          esat ?\<phi> ?I ?\<tau> (Inl ` ?AD Un Inr ` {..<?n})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 13, template_var 5),
            template_var 1),
          template_var 4),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 5),
          template_var 0),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 9, template_var 2),
            template_app (template_hole 8, template_var 5)),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 4)),
            template_app
             (template_app (template_hole 9, template_hole 4),
              template_app (template_hole 3, template_var 0))))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 1),
             template_var 3),
           template_hole 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 1),
             template_var 2),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 4)),
             template_app
              (template_app (template_hole 9, template_hole 4),
               template_app (template_hole 3, template_var 0))))))),
    ("Ailamazyan.ad_agr_close_set_correct",
     "[| ?AD' <= ?AD; sorted_distinct ?ns;
         !!\<sigma> \<tau>.
            ad_agr_sets (set ?ns) (set ?ns) ?AD' \<sigma> \<tau> ==>
            (\<sigma> : ?R) = (\<tau> : ?R) |]
      ==> \<Union>
           (ad_agr_close (?AD - ?AD') ` fo_nmlz ?AD' ` proj_vals ?R ?ns) =
          fo_nmlz ?AD ` proj_vals ?R ?ns",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_hole 14),
                  template_var 1)),
              template_app (template_hole 13, template_var 1))
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Ailamazyan.proj_out",
     "[| wf_fo_intp ?\<phi> ?I; esat ?\<phi> ?I ?\<sigma> UNIV |]
      ==> EX \<tau>.
             esat ?\<phi> ?I (Inl o \<tau>) UNIV &
             (ALL i x.
                 i : fv_fo_fmla ?\<phi> & ?\<sigma> i = Inl x -->
                 \<tau> i = x) &
             ad_agr_list (act_edom ?\<phi> ?I)
              (map ?\<sigma> (fv_fo_fmla_list ?\<phi>))
              (map (Inl o \<tau>) (fv_fo_fmla_list ?\<phi>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 15)
            )],
       template_predicate (template_app (template_hole 14, t_empty)))),
    ("Ailamazyan.insort_aux_le",
     "[| ALL x:set ?nxs. ?n <= fst x; ALL x:set ?mys. ?m <= fst x;
         ?n <= ?m |]
      ==> insort ?n (sort (map fst ?nxs @ ?m # map fst ?mys)) =
          ?n # sort (map fst ?nxs @ ?m # map fst ?mys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, t_empty), template_var 2),
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 10),
                   template_var 3)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_hole 7),
                   template_var 1))))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 10),
                   template_var 3)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_hole 7),
                   template_var 1)))))))),
    ("Ailamazyan.insort_aux_gt",
     "[| ALL x:set ?nxs. ?n <= fst x; ALL x:set ?mys. ?m <= fst x;
         ~ ?n <= ?m |]
      ==> insort ?n (sort (map fst ?nxs @ ?m # map fst ?mys)) =
          ?m # insort ?n (sort (map fst ?nxs @ map fst ?mys))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 1)),
              t_empty)
            ),
        template_negation
         (
            template_inequation
             (less_equals, template_var 2, template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, t_empty), template_var 2),
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 11),
                   template_var 3)),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 0, template_hole 8),
                   template_var 1))))),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_var 2),
             template_app
              (template_app (template_hole 4, t_empty),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 11),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 0, template_hole 8),
                   template_var 1)))))))),
    ("Ailamazyan.set_fo_nmlz_add_nth_rem_nth",
     "[| ?j < length ?xs; !!x. x : ?X ==> fo_nmlz ?AD x = x;
         !!x. x : ?X ==> ?j < length x |]
      ==> {ts: ?X.
           EX z. ts =
                 fo_nmlz ?AD
                  (add_nth ?j z (fo_nmlz ?AD (rem_nth ?j ?xs)))} =
          {y: ?X.
           fo_nmlz ?AD (rem_nth ?j y) = fo_nmlz ?AD (rem_nth ?j ?xs)}",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 10, template_var 2)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app (template_hole 4, t_empty),
         template_app (template_hole 4, t_empty)))),
    ("Ailamazyan.ad_agr_map",
     "[| length ?xs = length ?ys; inj_on ?m (dom ?m);
         !!x y.
            (x, y) : set (zip ?xs ?ys) ==>
            case x of
            Inl x' =>
              if x' : ?AD then x = y
              else ?m x = Some y &
                   (case y of Inl z => z ~: ?AD | Inr x => True)
            | Inr n =>
                ?m x = Some y &
                (case y of Inl z => z ~: ?AD | Inr x => True) |]
      ==> ad_agr_list ?AD ?xs ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 17, template_var 3),
          template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 1),
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3),
             template_var 2)
           ))),
    ("Ailamazyan.merge_map'",
     "[| sorted_distinct (map fst ?nxs); sorted_distinct (map fst ?mys);
         fst ` set ?nxs Int fst ` set ?mys = {};
         map snd ?nxs = map ?\<sigma> (map fst ?nxs);
         map snd ?mys = map ?\<sigma> (map fst ?mys) |]
      ==> map snd (merge ?nxs ?mys) =
          map ?\<sigma> (sort (map fst ?nxs @ map fst ?mys))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_hole 15),
                  template_app
                   (template_app (template_hole 14, template_hole 13),
                    template_var 2))),
              template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 14, template_hole 13),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_hole 15),
                  template_app
                   (template_app (template_hole 14, template_hole 13),
                    template_var 1))),
              template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 14, template_hole 13),
                  template_var 1)))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_hole 13),
                template_app (template_hole 8, template_var 2))),
            template_app
             (template_app (template_hole 9, template_hole 13),
              template_app (template_hole 8, template_var 1))),
          template_hole 7),
        template_equation
         (template_app
           (template_app (template_hole 5, template_hole 4),
            template_var 2),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_var 2))),
        template_equation
         (template_app
           (template_app (template_hole 5, template_hole 4),
            template_var 1),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_var 1)))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 14, template_hole 13),
                   template_var 2)),
               template_app
                (template_app (template_hole 14, template_hole 13),
                 template_var 1))))))),
    ("Ailamazyan.idx_join",
     "[| !!vs. vs : ?X\<phi> ==>
               fo_nmlzd ?AD vs & length vs = length ?ns\<phi>;
         !!vs. vs : ?X\<psi> ==>
               fo_nmlzd ?AD vs & length vs = length ?ns\<psi>;
         sorted_distinct ?ns\<phi>; sorted_distinct ?ns\<psi>;
         ?ns = filter (%n. n : set ?ns\<psi>) ?ns\<phi> |]
      ==> idx_join ?AD ?ns ?ns\<phi> ?X\<phi> ?ns\<psi> ?X\<psi> =
          eval_conj_set ?AD ?ns\<phi> ?X\<phi> ?ns\<psi> ?X\<psi>",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 3)),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 1)),
              template_app (template_hole 7, template_var 1))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 5, t_empty), template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 0),
                 template_var 3),
               template_var 5),
             template_var 1),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 5),
             template_var 1),
           template_var 2)))),
    ("Ailamazyan.eval_conj_tuple_empty",
     "[| fo_nmlzd ?Z ?xs; fo_nmlzd ?Z ?ys; length ?nsx = length ?xs;
         length ?nsy = length ?ys; sorted_distinct ?nsx;
         sorted_distinct ?nsy; ?ns = filter (%n. n : set ?nsy) ?nsx;
         fo_nmlz ?Z (proj_tuple ?ns (zip ?nsx ?xs)) ~=
         fo_nmlz ?Z (proj_tuple ?ns (zip ?nsy ?ys)) |]
      ==> eval_conj_tuple ?Z ?nsx ?nsy ?xs ?ys = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 5),
              template_var 3)
            ),
        template_equation
         (template_app (template_hole 17, template_var 2),
          template_app (template_hole 16, template_var 4)),
        template_equation
         (template_app (template_hole 17, template_var 1),
          template_app (template_hole 16, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_hole 13),
                  template_var 2)),
              template_app (template_hole 12, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_hole 13),
                  template_var 1)),
              template_app (template_hole 12, template_var 1))
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 10, t_empty), template_var 2)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 4))),
              template_app
               (template_app (template_hole 5, template_var 5),
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 3))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 2),
               template_var 1),
             template_var 4),
           template_var 3),
         template_hole 0))),
    ("Ailamazyan.eval_conj_set_correct",
     "[| ?ns\<phi>' = filter (%n. n ~: set ?ns\<phi>) ?ns\<psi>;
         ?ns\<psi>' = filter (%n. n ~: set ?ns\<psi>) ?ns\<phi>;
         ?X\<phi> = fo_nmlz ?AD ` proj_vals ?R\<phi> ?ns\<phi>;
         ?X\<psi> = fo_nmlz ?AD ` proj_vals ?R\<psi> ?ns\<psi>;
         sorted_distinct ?ns\<phi>; sorted_distinct ?ns\<psi> |]
      ==> eval_conj_set ?AD ?ns\<phi> ?X\<phi> ?ns\<psi> ?X\<psi> =
          ext_tuple_set ?AD ?ns\<phi> ?ns\<phi>' ?X\<phi> Int
          ext_tuple_set ?AD ?ns\<psi> ?ns\<psi>' ?X\<psi>",
     template_implication
      ([template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 14, t_empty), template_var 6)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 14, t_empty), template_var 7)),
        template_equation
         (template_var 4,
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 3)),
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 7))),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 3)),
            template_app
             (template_app (template_hole 7, template_var 0),
              template_var 6))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 7)),
              template_app (template_hole 3, template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 6)),
              template_app (template_hole 3, template_var 6))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 7),
               template_var 4),
             template_var 6),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 7),
                 template_var 8),
               template_var 4)),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 6),
               template_var 5),
             template_var 1))))),
    ("Ailamazyan.combine_map3",
     "[| length ?ys = length ?xs; length ?ys' = length ?xs';
         length ?ys'' = length ?xs''; distinct ?xs; distinct ?xs';
         distinct ?xs''; set ?xs Int set ?xs' = {};
         set ?xs Int set ?xs'' = {}; set ?xs' Int set ?xs'' = {} |]
      ==> EX f. ?ys = map f ?xs & ?ys' = map f ?xs' & ?ys'' = map f ?xs''",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 5),
          template_app (template_hole 9, template_var 4)),
        template_equation
         (template_app (template_hole 10, template_var 3),
          template_app (template_hole 9, template_var 2)),
        template_equation
         (template_app (template_hole 10, template_var 1),
          template_app (template_hole 9, template_var 0)),
        template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 4)),
            template_app (template_hole 5, template_var 2)),
          template_hole 4),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 4)),
            template_app (template_hole 5, template_var 0)),
          template_hole 4),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2)),
            template_app (template_hole 5, template_var 0)),
          template_hole 4)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Ailamazyan.extend_\<tau>",
     "[| ad_agr_sets (?FV - {?n}) (?S - {?n}) ?X ?\<sigma> ?\<tau>;
         ?S <= ?FV; finite ?S; ?\<tau> ` (?FV - {?n}) <= ?Z;
         Inl ` ?X Un
         Inr `
         {..<max 1
              (card (Inr -` ?\<tau> ` (?S - {?n})) +
               (if ?n : ?S then 1 else 0))}
         <= ?Z |]
      ==> EX k:?Z.
             ad_agr_sets ?FV ?S ?X (?\<sigma>(?n := ?x))
              (?\<tau>(?n := k))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 22,
                      template_app
                       (template_app (template_hole 21, template_var 7),
                        template_app
                         (template_app (template_hole 20, template_var 6),
                          template_hole 19))),
                    template_app
                     (template_app (template_hole 21, template_var 5),
                      template_app
                       (template_app (template_hole 20, template_var 6),
                        template_hole 19))),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 5, template_var 7),
        template_predicate
         (template_app (template_hole 17, template_var 5)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 15, template_var 2),
            template_app
             (template_app (template_hole 21, template_var 7),
              template_app
               (template_app (template_hole 20, template_var 6),
                template_hole 19))),
          template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app (template_hole 13, template_hole 12),
                template_var 4)),
            template_app
             (template_app (template_hole 15, template_hole 11),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app
                         (template_app (template_hole 5, template_hole 11),
                          template_app
                           (template_app (template_hole 15, template_var 2),
                            template_app
                             (template_app
                               (template_hole 21, template_var 5),
                              template_app
                               (template_app
                                 (template_hole 20, template_var 6),
                                template_hole 19)))))),
                    template_app
                     (template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 3, template_var 6),
                            template_var 5)),
                        template_hole 8),
                      template_hole 2)))))),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Ailamazyan.fo_nmlz_rec_map",
     "[| inj_on ?m (dom ?m); ran ?m <= {..<?i} |]
      ==> EX m'.
             inj_on m' (dom m') &
             (ALL n. ?m n ~= None --> m' n = ?m n) &
             (ALL (x, y):set (zip ?xs (fo_nmlz_rec ?i ?m ?AD ?xs)).
                 case x of
                 Inl x' =>
                   if x' : ?AD then x = y
                   else EX j. m' (Inl x') = Some j & y = Inr j
                 | Inr n => EX j. m' (Inr n) = Some j & y = Inr j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 3),
              template_app (template_hole 23, template_var 3))
            ),
        template_inequation
         (less_equals, template_app (template_hole 21, template_var 3),
          template_app (template_hole 20, template_var 2))],
       template_predicate (template_app (template_hole 19, t_empty)))),
    ("Ailamazyan.add_nth_iff_card",
     "[| !!xs. xs : ?X ==> fo_nmlz ?AD xs = xs;
         !!xs. xs : ?X ==> ?i < length xs; fo_nmlz ?AD ?zs = ?zs;
         ?i <= length ?zs; finite ?AD; finite ?X |]
      ==> (ALL z. fo_nmlz ?AD (add_nth ?i z ?zs) : ?X) =
          (Suc (card ?AD + card (Inr -` set ?zs))
           <= card {ts: ?X. EX z. ts = fo_nmlz ?AD (add_nth ?i z ?zs)})",
     template_implication
      ([template_predicate (template_app (template_hole 23, t_empty)),
        template_predicate (template_app (template_hole 23, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 19, template_var 2),
            template_var 0),
          template_var 0),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 17, template_var 0)),
        template_predicate
         (template_app (template_hole 15, template_var 2)),
        template_predicate
         (template_app (template_hole 14, template_var 3))],
       template_equation
        (template_app (template_hole 12, t_empty),
         template_app
          (template_app
            (template_hole 16,
             template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 2)),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 0)))))),
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty)))))),
    ("Ailamazyan.ext_tuple_correct",
     "[| sorted_distinct ?fv_sub; sorted_distinct ?fv_sub_comp;
         sorted_distinct ?fv_all; set ?fv_sub Int set ?fv_sub_comp = {};
         set ?fv_sub Un set ?fv_sub_comp = set ?fv_all;
         ?ass = fo_nmlz ?AD ` proj_vals ?R ?fv_sub;
         !!\<sigma> \<tau>.
            ad_agr_sets (set ?fv_sub) (set ?fv_sub) ?AD \<sigma> \<tau> ==>
            (\<sigma> : ?R) = (\<tau> : ?R) |]
      ==> ext_tuple_set ?AD ?fv_sub ?fv_sub_comp ?ass =
          fo_nmlz ?AD ` proj_vals ?R ?fv_all",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_hole 15),
                  template_var 5)),
              template_app (template_hole 14, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_hole 15),
                  template_var 4)),
              template_app (template_hole 14, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_hole 15),
                  template_var 3)),
              template_app (template_hole 14, template_var 3))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 5)),
            template_app (template_hole 11, template_var 4)),
          template_hole 10),
        template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 11, template_var 5)),
            template_app (template_hole 11, template_var 4)),
          template_app (template_hole 11, template_var 3)),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1)),
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 5))),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 5),
             template_var 4),
           template_var 2),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_var 3))))),
    ("Ailamazyan.map_values_cluster",
     "[| !!w z Z.
            [| Z <= ?X; z : Z; w : ?f (?h z) {z} |] ==> w : ?f (?h z) Z;
         !!w z Z.
            [| Z <= ?X; z : Z; w : ?f (?h z) Z |]
            ==> EX z':Z. w : ?f (?h z) {z'} |]
      ==> set_of_idx (Mapping.map_values ?f (cluster (Some o ?h) ?X)) =
          (UN x:?X. ?f (?h x) {x})",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 17, t_empty))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 0)),
               template_var 2))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("Ailamazyan.ext_tuple_sound",
     "[| sorted_distinct ?fv_sub; sorted_distinct ?fv_sub_comp;
         sorted_distinct ?fv_all; set ?fv_sub Int set ?fv_sub_comp = {};
         set ?fv_sub Un set ?fv_sub_comp = set ?fv_all;
         ?ass = fo_nmlz ?AD ` proj_vals ?R ?fv_sub;
         !!\<sigma> \<tau>.
            ad_agr_sets (set ?fv_sub) (set ?fv_sub) ?AD \<sigma> \<tau> ==>
            (\<sigma> : ?R) = (\<tau> : ?R);
         ?xs
         : fo_nmlz ?AD `
           \<Union> (ext_tuple ?AD ?fv_sub ?fv_sub_comp ` ?ass) |]
      ==> ?xs : fo_nmlz ?AD ` proj_vals ?R ?fv_all",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_hole 18),
                  template_var 6)),
              template_app (template_hole 17, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_hole 18),
                  template_var 5)),
              template_app (template_hole 17, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_hole 18),
                  template_var 4)),
              template_app (template_hole 17, template_var 4))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 15,
              template_app (template_hole 14, template_var 6)),
            template_app (template_hole 14, template_var 5)),
          template_hole 13),
        template_equation
         (template_app
           (template_app
             (template_hole 12,
              template_app (template_hole 14, template_var 6)),
            template_app (template_hole 14, template_var 5)),
          template_app (template_hole 14, template_var 4)),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)),
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 6))),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 2)),
                template_app
                 (template_hole 2,
                  template_app
                   (template_app
                     (template_hole 1,
                      template_app
                       (template_app
                         (template_app (template_hole 0, template_var 2),
                          template_var 6),
                        template_var 5)),
                    template_var 3))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 2)),
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_var 4)))
           ))),
    ("Ailamazyan.ext_tuple_sound",
     "[| sorted_distinct ?fv_sub; sorted_distinct ?fv_sub_comp;
         sorted_distinct ?fv_all; set ?fv_sub Int set ?fv_sub_comp = {};
         set ?fv_sub Un set ?fv_sub_comp = set ?fv_all;
         ?ass = fo_nmlz ?AD ` proj_vals ?R ?fv_sub;
         !!\<sigma> \<tau>.
            ad_agr_sets (set ?fv_sub) (set ?fv_sub) ?AD \<sigma> \<tau> ==>
            (\<sigma> : ?R) = (\<tau> : ?R);
         ?xs
         : fo_nmlz ?AD `
           \<Union> (ext_tuple ?AD ?fv_sub ?fv_sub_comp ` ?ass) |]
      ==> fo_nmlz ?AD (proj_tuple ?fv_sub (zip ?fv_all ?xs)) : ?ass",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_app (template_hole 21, template_hole 20),
                  template_var 6)),
              template_app (template_hole 19, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_app (template_hole 21, template_hole 20),
                  template_var 5)),
              template_app (template_hole 19, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_app (template_hole 21, template_hole 20),
                  template_var 4)),
              template_app (template_hole 19, template_var 4))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 17,
              template_app (template_hole 16, template_var 6)),
            template_app (template_hole 16, template_var 5)),
          template_hole 15),
        template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 16, template_var 6)),
            template_app (template_hole 16, template_var 5)),
          template_app (template_hole 16, template_var 4)),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 2)),
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 6))),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 2)),
                template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app
                         (template_app (template_hole 2, template_var 2),
                          template_var 6),
                        template_var 5)),
                    template_var 3))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 11, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 6),
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 0)))),
             template_var 3)
           ))),
    ("Ailamazyan.ext_tuple_complete",
     "[| sorted_distinct ?fv_sub; sorted_distinct ?fv_sub_comp;
         sorted_distinct ?fv_all; set ?fv_sub Int set ?fv_sub_comp = {};
         set ?fv_sub Un set ?fv_sub_comp = set ?fv_all;
         ?ass = fo_nmlz ?AD ` proj_vals ?R ?fv_sub;
         !!\<sigma> \<tau>.
            ad_agr_sets (set ?fv_sub) (set ?fv_sub) ?AD \<sigma> \<tau> ==>
            (\<sigma> : ?R) = (\<tau> : ?R);
         ?xs = fo_nmlz ?AD (map ?\<sigma> ?fv_all); ?\<sigma> : ?R |]
      ==> ?xs
          : fo_nmlz ?AD `
            \<Union> (ext_tuple ?AD ?fv_sub ?fv_sub_comp ` ?ass)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_app (template_hole 21, template_hole 20),
                  template_var 7)),
              template_app (template_hole 19, template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_app (template_hole 21, template_hole 20),
                  template_var 6)),
              template_app (template_hole 19, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 22,
                template_app
                 (template_app (template_hole 21, template_hole 20),
                  template_var 5)),
              template_app (template_hole 19, template_var 5))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 17,
              template_app (template_hole 16, template_var 7)),
            template_app (template_hole 16, template_var 6)),
          template_hole 15),
        template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 16, template_var 7)),
            template_app (template_hole 16, template_var 6)),
          template_app (template_hole 16, template_var 5)),
        template_equation
         (template_var 4,
          template_app
           (template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 3)),
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 7))),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 11, template_var 3),
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 5))),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app
                (template_hole 12,
                 template_app (template_hole 11, template_var 3)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 3),
                         template_var 7),
                       template_var 6)),
                   template_var 4))))
           ))),
    ("Ailamazyan.eval_conj_tuple_close_empty",
     "[| fo_nmlzd ?X ?xs; fo_nmlzd ?Y ?ys; length ?nsx = length ?xs;
         length ?nsy = length ?ys; sorted_distinct ?nsx;
         sorted_distinct ?nsy; ?ns = filter (%n. n : set ?nsy) ?nsx;
         fo_nmlz (?X Int ?Y) (proj_tuple ?ns (zip ?nsx ?xs)) ~=
         fo_nmlz (?X Int ?Y) (proj_tuple ?ns (zip ?nsy ?ys));
         ?xs' : ad_agr_close (?X Un ?Y - ?X) ?xs;
         ?ys' : ad_agr_close (?X Un ?Y - ?Y) ?ys |]
      ==> eval_conj_tuple (?X Un ?Y) ?nsx ?nsy ?xs' ?ys' = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 6),
              template_var 5)
            ),
        template_equation
         (template_app (template_hole 22, template_var 4),
          template_app (template_hole 21, template_var 7)),
        template_equation
         (template_app (template_hole 22, template_var 3),
          template_app (template_hole 21, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_hole 18),
                  template_var 4)),
              template_app (template_hole 17, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app
                 (template_app (template_hole 19, template_hole 18),
                  template_var 3)),
              template_app (template_hole 17, template_var 3))
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 15, t_empty), template_var 4)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 8),
                    template_var 6)),
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 7))),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 8),
                    template_var 6)),
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_app
                   (template_app (template_hole 7, template_var 3),
                    template_var 5))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 8),
                        template_var 6)),
                    template_var 8)),
                template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 8),
                        template_var 6)),
                    template_var 6)),
                template_var 5))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 8),
                     template_var 6)),
                 template_var 4),
               template_var 3),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("Ailamazyan.sz_fmla_induct",
     "[| !!r ts. ?P (Pred r ts); !!b. ?P (Bool b); !!t t'. ?P (Eqa t t');
         !!\<phi>. ?P \<phi> ==> ?P (Neg \<phi>);
         !!\<phi> \<psi>.
            [| ?P \<phi>; ?P \<psi> |] ==> ?P (Conj \<phi> \<psi>);
         !!\<phi> \<psi>.
            [| ?P \<phi>; ?P \<psi> |] ==> ?P (Disj \<phi> \<psi>);
         !!n \<phi>. ?P \<phi> ==> ?P (Exists n \<phi>);
         !!n \<phi>. ?P (Exists n (Neg \<phi>)) ==> ?P (Forall n \<phi>) |]
      ==> ?P ?\<phi>",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Ailamazyan.proj_tuple_correct",
     "[| sorted_distinct ?fv_sub; sorted_distinct ?fv_sub_comp;
         sorted_distinct ?fv_all; set ?fv_sub Int set ?fv_sub_comp = {};
         set ?fv_sub Un set ?fv_sub_comp = set ?fv_all;
         ?ass = fo_nmlz ?AD ` proj_vals ?R ?fv_sub;
         !!\<sigma> \<tau>.
            ad_agr_sets (set ?fv_sub) (set ?fv_sub) ?AD \<sigma> \<tau> ==>
            (\<sigma> : ?R) = (\<tau> : ?R);
         fo_nmlz ?AD ?xs = ?xs; length ?xs = length ?fv_all |]
      ==> (?xs
           : fo_nmlz ?AD `
             \<Union> (ext_tuple ?AD ?fv_sub ?fv_sub_comp ` ?ass)) =
          (fo_nmlz ?AD (proj_tuple ?fv_sub (zip ?fv_all ?xs)) : ?ass)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_app (template_hole 25, template_hole 24),
                  template_var 6)),
              template_app (template_hole 23, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_app (template_hole 25, template_hole 24),
                  template_var 5)),
              template_app (template_hole 23, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_app (template_hole 25, template_hole 24),
                  template_var 4)),
              template_app (template_hole 23, template_var 4))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 6)),
            template_app (template_hole 20, template_var 5)),
          template_hole 19),
        template_equation
         (template_app
           (template_app
             (template_hole 18,
              template_app (template_hole 20, template_var 6)),
            template_app (template_hole 20, template_var 5)),
          template_app (template_hole 20, template_var 4)),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 2)),
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 6))),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 15, template_var 2),
            template_var 0),
          template_var 0),
        template_equation
         (template_app (template_hole 7, template_var 0),
          template_app (template_hole 6, template_var 4))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app
              (template_hole 16,
               template_app (template_hole 15, template_var 2)),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 6),
                     template_var 5)),
                 template_var 3)))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 15, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 6),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0)))),
           template_var 3)))),
    ("Ailamazyan.proj_tuple_sound",
     "[| sorted_distinct ?fv_sub; sorted_distinct ?fv_sub_comp;
         sorted_distinct ?fv_all; set ?fv_sub Int set ?fv_sub_comp = {};
         set ?fv_sub Un set ?fv_sub_comp = set ?fv_all;
         ?ass = fo_nmlz ?AD ` proj_vals ?R ?fv_sub;
         !!\<sigma> \<tau>.
            ad_agr_sets (set ?fv_sub) (set ?fv_sub) ?AD \<sigma> \<tau> ==>
            (\<sigma> : ?R) = (\<tau> : ?R);
         fo_nmlz ?AD ?xs = ?xs; length ?xs = length ?fv_all;
         fo_nmlz ?AD (proj_tuple ?fv_sub (zip ?fv_all ?xs)) : ?ass |]
      ==> ?xs
          : fo_nmlz ?AD `
            \<Union> (ext_tuple ?AD ?fv_sub ?fv_sub_comp ` ?ass)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_app (template_hole 25, template_hole 24),
                  template_var 6)),
              template_app (template_hole 23, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_app (template_hole 25, template_hole 24),
                  template_var 5)),
              template_app (template_hole 23, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_app (template_hole 25, template_hole 24),
                  template_var 4)),
              template_app (template_hole 23, template_var 4))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 6)),
            template_app (template_hole 20, template_var 5)),
          template_hole 19),
        template_equation
         (template_app
           (template_app
             (template_hole 18,
              template_app (template_hole 20, template_var 6)),
            template_app (template_hole 20, template_var 5)),
          template_app (template_hole 20, template_var 4)),
        template_equation
         (template_var 3,
          template_app
           (template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 2)),
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 6))),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 15, template_var 2),
            template_var 0),
          template_var 0),
        template_equation
         (template_app (template_hole 7, template_var 0),
          template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 15, template_var 2),
                  template_app
                   (template_app (template_hole 4, template_var 6),
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 0)))),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_app
                (template_hole 16,
                 template_app (template_hole 15, template_var 2)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 6),
                       template_var 5)),
                   template_var 3))))
           ))),
    ("Ailamazyan.ad_agr_close_rec_complete",
     "[| fo_nmlz_rec ?j (id_map ?j) ?X ?xs = ?xs; ?X Int ?AD = {};
         ?X Int ?Y = {}; ?Y Int ?AD = {}; inj_on ?m (dom ?m);
         dom ?m = {..<?j}; ran ?m = Inl ` ?Y Un Inr ` {..<?i}; ?i <= ?j;
         !!n b.
            (Inr n, b) : set (zip ?xs ?ys) ==>
            case ?m n of None => b ~: ran ?m | Some v => v = b;
         fo_nmlz_rec ?i (id_map ?i) (?X Un ?Y Un ?AD) ?ys = ?ys;
         ad_agr_list ?X ?xs ?ys |]
      ==> ?ys : ad_agr_close_rec ?i ?m ?AD ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 30, template_var 7),
                template_app (template_hole 29, template_var 7)),
              template_var 6),
            template_var 5),
          template_var 5),
        template_equation
         (template_app
           (template_app (template_hole 27, template_var 6),
            template_var 4),
          template_hole 26),
        template_equation
         (template_app
           (template_app (template_hole 27, template_var 6),
            template_var 3),
          template_hole 26),
        template_equation
         (template_app
           (template_app (template_hole 27, template_var 3),
            template_var 4),
          template_hole 26),
        template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 2),
              template_app (template_hole 24, template_var 2))
            ),
        template_equation
         (template_app (template_hole 24, template_var 2),
          template_app (template_hole 22, template_var 7)),
        template_equation
         (template_app (template_hole 20, template_var 2),
          template_app
           (template_app
             (template_hole 19,
              template_app
               (template_app (template_hole 18, template_hole 17),
                template_var 3)),
            template_app
             (template_app (template_hole 16, template_hole 15),
              template_app (template_hole 22, template_var 1)))),
        template_inequation (less_equals, template_var 1, template_var 7),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 30, template_var 1),
                template_app (template_hole 29, template_var 1)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 3, template_var 6),
                    template_var 3)),
                template_var 4)),
            template_var 0),
          template_var 0),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 6),
                template_var 5),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 4),
               template_var 5))
           ))),
    ("Ailamazyan.eval_conj_tuple_empty2",
     "[| fo_nmlzd ?Z ?xs; fo_nmlzd ?Z ?ys; length ?nsx = length ?xs;
         length ?nsy = length ?ys; sorted_distinct ?nsx;
         sorted_distinct ?nsy; sorted_distinct ?ns;
         set ?ns <= set ?nsx Int set ?nsy;
         fo_nmlz ?Z (proj_tuple ?ns (zip ?nsx ?xs)) ~=
         fo_nmlz ?Z (proj_tuple ?ns (zip ?nsy ?ys)) |
         proj_tuple ?ns (zip ?nsx ?xs) ~= proj_tuple ?ns (zip ?nsy ?ys) &
         (ALL x:set (proj_tuple ?ns (zip ?nsx ?xs)). isl x) &
         (ALL y:set (proj_tuple ?ns (zip ?nsy ?ys)). isl y) |]
      ==> eval_conj_tuple ?Z ?nsx ?nsy ?xs ?ys = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 5),
              template_var 3)
            ),
        template_equation
         (template_app (template_hole 20, template_var 2),
          template_app (template_hole 19, template_var 4)),
        template_equation
         (template_app (template_hole 20, template_var 1),
          template_app (template_hole 19, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_hole 16),
                  template_var 2)),
              template_app (template_hole 15, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_hole 16),
                  template_var 1)),
              template_app (template_hole 15, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_hole 16),
                  template_var 0)),
              template_app (template_hole 15, template_var 0))
            ),
        template_inequation
         (less_equals, template_app (template_hole 13, template_var 0),
          template_app
           (template_app
             (template_hole 12,
              template_app (template_hole 13, template_var 2)),
            template_app (template_hole 13, template_var 1))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 5),
                        template_app
                         (template_app (template_hole 7, template_var 0),
                          template_app
                           (template_app (template_hole 6, template_var 2),
                            template_var 4)))),
                    template_app
                     (template_app (template_hole 8, template_var 5),
                      template_app
                       (template_app (template_hole 7, template_var 0),
                        template_app
                         (template_app (template_hole 6, template_var 1),
                          template_var 3)))))),
              template_app
               (template_app
                 (template_hole 18,
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app (template_hole 7, template_var 0),
                          template_app
                           (template_app (template_hole 6, template_var 2),
                            template_var 4))),
                      template_app
                       (template_app (template_hole 7, template_var 0),
                        template_app
                         (template_app (template_hole 6, template_var 1),
                          template_var 3))))),
                template_app
                 (template_app
                   (template_hole 18,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 7, template_var 0),
                            template_app
                             (template_app
                               (template_hole 6, template_var 2),
                              template_var 4)))),
                      t_empty)),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_hole 4,
                        template_app
                         (template_app (template_hole 7, template_var 0),
                          template_app
                           (template_app (template_hole 6, template_var 1),
                            template_var 3)))),
                    t_empty))))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 2),
               template_var 1),
             template_var 4),
           template_var 3),
         template_hole 0))),
    ("Ailamazyan.eval_conj_tuple_close_empty2",
     "[| fo_nmlzd ?X ?xs; fo_nmlzd ?Y ?ys; length ?nsx = length ?xs;
         length ?nsy = length ?ys; sorted_distinct ?nsx;
         sorted_distinct ?nsy; sorted_distinct ?ns;
         set ?ns <= set ?nsx Int set ?nsy;
         fo_nmlz (?X Int ?Y) (proj_tuple ?ns (zip ?nsx ?xs)) ~=
         fo_nmlz (?X Int ?Y) (proj_tuple ?ns (zip ?nsy ?ys)) |
         proj_tuple ?ns (zip ?nsx ?xs) ~= proj_tuple ?ns (zip ?nsy ?ys) &
         (ALL x:set (proj_tuple ?ns (zip ?nsx ?xs)). isl x) &
         (ALL y:set (proj_tuple ?ns (zip ?nsy ?ys)). isl y);
         ?xs' : ad_agr_close (?X Un ?Y - ?X) ?xs;
         ?ys' : ad_agr_close (?X Un ?Y - ?Y) ?ys |]
      ==> eval_conj_tuple (?X Un ?Y) ?nsx ?nsy ?xs' ?ys' = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 27, template_var 8),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 27, template_var 6),
              template_var 5)
            ),
        template_equation
         (template_app (template_hole 25, template_var 4),
          template_app (template_hole 24, template_var 7)),
        template_equation
         (template_app (template_hole 25, template_var 3),
          template_app (template_hole 24, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_hole 21),
                  template_var 4)),
              template_app (template_hole 20, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_hole 21),
                  template_var 3)),
              template_app (template_hole 20, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_hole 21),
                  template_var 2)),
              template_app (template_hole 20, template_var 2))
            ),
        template_inequation
         (less_equals, template_app (template_hole 18, template_var 2),
          template_app
           (template_app
             (template_hole 17,
              template_app (template_hole 18, template_var 4)),
            template_app (template_hole 18, template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_hole 15,
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app
                         (template_hole 13,
                          template_app
                           (template_app (template_hole 12, template_var 8),
                            template_var 6)),
                        template_app
                         (template_app (template_hole 11, template_var 2),
                          template_app
                           (template_app (template_hole 10, template_var 4),
                            template_var 7)))),
                    template_app
                     (template_app
                       (template_hole 13,
                        template_app
                         (template_app (template_hole 12, template_var 8),
                          template_var 6)),
                      template_app
                       (template_app (template_hole 11, template_var 2),
                        template_app
                         (template_app (template_hole 10, template_var 3),
                          template_var 5)))))),
              template_app
               (template_app
                 (template_hole 23,
                  template_app
                   (template_hole 15,
                    template_app
                     (template_app
                       (template_hole 14,
                        template_app
                         (template_app (template_hole 11, template_var 2),
                          template_app
                           (template_app (template_hole 10, template_var 4),
                            template_var 7))),
                      template_app
                       (template_app (template_hole 11, template_var 2),
                        template_app
                         (template_app (template_hole 10, template_var 3),
                          template_var 5))))),
                template_app
                 (template_app
                   (template_hole 23,
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_hole 8,
                          template_app
                           (template_app (template_hole 11, template_var 2),
                            template_app
                             (template_app
                               (template_hole 10, template_var 4),
                              template_var 7)))),
                      t_empty)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 11, template_var 2),
                          template_app
                           (template_app (template_hole 10, template_var 3),
                            template_var 5)))),
                    t_empty))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 8),
                        template_var 6)),
                    template_var 8)),
                template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 8),
                        template_var 6)),
                    template_var 6)),
                template_var 5))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 8),
                     template_var 6)),
                 template_var 4),
               template_var 3),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("Ailamazyan.ad_agr_close_rec_sound",
     "[| ?ys : ad_agr_close_rec ?i ?m ?AD ?xs;
         fo_nmlz_rec ?j (id_map ?j) ?X ?xs = ?xs; ?X Int ?AD = {};
         ?X Int ?Y = {}; ?Y Int ?AD = {}; inj_on ?m (dom ?m);
         dom ?m = {..<?j}; ran ?m <= Inl ` ?Y Un Inr ` {..<?i}; ?i <= ?j |]
      ==> fo_nmlz_rec ?i (id_map ?i) (?X Un ?Y Un ?AD) ?ys = ?ys &
          (EX m'.
              inj_on m' (dom m') &
              (ALL n v. ?m n = Some v --> m' (Inr n) = Some v) &
              (ALL (x, y):set (zip ?xs ?ys).
                  case x of
                  Inl x' =>
                    if x' : ?X then x = y
                    else m' x = Some y &
                         (case y of Inl z => z ~: ?X | Inr x => True)
                  | Inr n =>
                      m' x = Some y &
                      (case y of Inl z => z ~: ?X | Inr x => True)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 39, template_var 7),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 38, template_var 6),
                    template_var 5),
                  template_var 4),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 36, template_var 2),
                template_app (template_hole 35, template_var 2)),
              template_var 1),
            template_var 3),
          template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 33, template_var 1),
            template_var 4),
          template_hole 32),
        template_equation
         (template_app
           (template_app (template_hole 33, template_var 1),
            template_var 0),
          template_hole 32),
        template_equation
         (template_app
           (template_app (template_hole 33, template_var 0),
            template_var 4),
          template_hole 32),
        template_predicate
         (
            template_app
             (template_app (template_hole 31, template_var 5),
              template_app (template_hole 30, template_var 5))
            ),
        template_equation
         (template_app (template_hole 30, template_var 5),
          template_app (template_hole 28, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 26, template_var 5),
          template_app
           (template_app
             (template_hole 25,
              template_app
               (template_app (template_hole 24, template_hole 23),
                template_var 0)),
            template_app
             (template_app (template_hole 22, template_hole 21),
              template_app (template_hole 28, template_var 6)))),
        template_inequation (less_equals, template_var 6, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app
                  (template_hole 37,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 36, template_var 6),
                         template_app (template_hole 35, template_var 6)),
                       template_app
                        (template_app
                          (template_hole 18,
                           template_app
                            (template_app
                              (template_hole 18, template_var 1),
                             template_var 0)),
                         template_var 4)),
                     template_var 7)),
                 template_var 7)),
             template_app (template_hole 17, t_empty))
           ))),
    ("Ailamazyan.eval_conj_set_aux",
     "[| ?ns\<phi>' = filter (%n. n ~: set ?ns\<phi>) ?ns\<psi>;
         ?ns\<psi>' = filter (%n. n ~: set ?ns\<psi>) ?ns\<phi>;
         ?X\<phi> = fo_nmlz ?AD ` proj_vals ?R\<phi> ?ns\<phi>;
         ?X\<psi> = fo_nmlz ?AD ` proj_vals ?R\<psi> ?ns\<psi>;
         sorted_distinct ?ns\<phi>; sorted_distinct ?ns\<psi>;
         ?cxs =
         filter (%(n, x). n ~: set ?ns\<psi> & isl x) (zip ?ns\<phi> ?xs);
         ?nxs =
         map fst
          (filter (%(n, x). n ~: set ?ns\<psi> & ~ isl x)
            (zip ?ns\<phi> ?xs));
         ?cys =
         filter (%(n, y). n ~: set ?ns\<phi> & isl y) (zip ?ns\<psi> ?ys);
         ?nys =
         map fst
          (filter (%(n, y). n ~: set ?ns\<phi> & ~ isl y)
            (zip ?ns\<psi> ?ys));
         ?xs : ?X\<phi>; ?ys : ?X\<psi>; ?xs = map ?\<sigma>xs ?ns\<phi>;
         ?fs\<phi> = map ?\<sigma>xs ?ns\<phi>';
         ?ys = map ?\<sigma>ys ?ns\<psi>;
         ?fs\<psi> = map ?\<sigma>ys ?ns\<psi>';
         ?fs\<phi>
         : nall_tuples_rec ?AD (card (Inr -` set ?xs)) (length ?ns\<phi>');
         ?fs\<psi>
         : nall_tuples_rec ?AD (card (Inr -` set ?ys)) (length ?ns\<psi>');
         ad_agr_list ?AD (map ?\<sigma>ys (sort (?ns\<psi> @ ?ns\<psi>')))
          (map ?\<sigma>xs (sort (?ns\<phi> @ ?ns\<phi>'))) |]
      ==> map snd (merge (zip ?ns\<phi> ?xs) ?cys) =
          map ?\<sigma>xs (sort (?ns\<phi> @ map fst ?cys))",
     template_implication
      ([template_equation
         (template_var 18,
          template_app
           (template_app (template_hole 33, t_empty), template_var 16)),
        template_equation
         (template_var 15,
          template_app
           (template_app (template_hole 33, t_empty), template_var 17)),
        template_equation
         (template_var 14,
          template_app
           (template_app
             (template_hole 28,
              template_app (template_hole 27, template_var 13)),
            template_app
             (template_app (template_hole 26, template_var 12),
              template_var 17))),
        template_equation
         (template_var 11,
          template_app
           (template_app
             (template_hole 28,
              template_app (template_hole 27, template_var 13)),
            template_app
             (template_app (template_hole 26, template_var 10),
              template_var 16))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app (template_hole 24, template_hole 23),
                  template_var 17)),
              template_app (template_hole 22, template_var 17))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app (template_hole 24, template_hole 23),
                  template_var 16)),
              template_app (template_hole 22, template_var 16))
            ),
        template_equation
         (template_var 9,
          template_app
           (template_app
             (template_hole 20, template_app (template_hole 19, t_empty)),
            template_app
             (template_app (template_hole 17, template_var 17),
              template_var 8))),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 16, template_hole 15),
            template_app
             (template_app
               (template_hole 20, template_app (template_hole 19, t_empty)),
              template_app
               (template_app (template_hole 17, template_var 17),
                template_var 8)))),
        template_equation
         (template_var 6,
          template_app
           (template_app
             (template_hole 20, template_app (template_hole 19, t_empty)),
            template_app
             (template_app (template_hole 17, template_var 16),
              template_var 5))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 16, template_hole 15),
            template_app
             (template_app
               (template_hole 20, template_app (template_hole 19, t_empty)),
              template_app
               (template_app (template_hole 17, template_var 16),
                template_var 5)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 8),
              template_var 14)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 5),
              template_var 11)
            ),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 12, template_var 3),
            template_var 17)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 12, template_var 3),
            template_var 18)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 12, template_var 1),
            template_var 16)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 12, template_var 1),
            template_var 15)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 11, template_var 13),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_hole 8),
                      template_app (template_hole 7, template_var 8)))),
                template_app (template_hole 6, template_var 18)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 11, template_var 13),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_hole 8),
                      template_app (template_hole 7, template_var 5)))),
                template_app (template_hole 6, template_var 15)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 13),
                template_app
                 (template_app (template_hole 12, template_var 1),
                  template_app
                   (template_app (template_hole 4, t_empty),
                    template_app
                     (template_app (template_hole 3, template_var 16),
                      template_var 15)))),
              template_app
               (template_app (template_hole 12, template_var 3),
                template_app
                 (template_app (template_hole 4, t_empty),
                  template_app
                   (template_app (template_hole 3, template_var 17),
                    template_var 18))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 17, template_var 17),
                 template_var 8)),
             template_var 6)),
         template_app
          (template_app (template_hole 12, template_var 3),
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app (template_hole 3, template_var 17),
               template_app
                (template_app (template_hole 16, template_hole 15),
                 template_var 6))))))),
    ("Ailamazyan.eval_conj_set_aux",
     "[| ?ns\<phi>' = filter (%n. n ~: set ?ns\<phi>) ?ns\<psi>;
         ?ns\<psi>' = filter (%n. n ~: set ?ns\<psi>) ?ns\<phi>;
         ?X\<phi> = fo_nmlz ?AD ` proj_vals ?R\<phi> ?ns\<phi>;
         ?X\<psi> = fo_nmlz ?AD ` proj_vals ?R\<psi> ?ns\<psi>;
         sorted_distinct ?ns\<phi>; sorted_distinct ?ns\<psi>;
         ?cxs =
         filter (%(n, x). n ~: set ?ns\<psi> & isl x) (zip ?ns\<phi> ?xs);
         ?nxs =
         map fst
          (filter (%(n, x). n ~: set ?ns\<psi> & ~ isl x)
            (zip ?ns\<phi> ?xs));
         ?cys =
         filter (%(n, y). n ~: set ?ns\<phi> & isl y) (zip ?ns\<psi> ?ys);
         ?nys =
         map fst
          (filter (%(n, y). n ~: set ?ns\<phi> & ~ isl y)
            (zip ?ns\<psi> ?ys));
         ?xs : ?X\<phi>; ?ys : ?X\<psi>; ?xs = map ?\<sigma>xs ?ns\<phi>;
         ?fs\<phi> = map ?\<sigma>xs ?ns\<phi>';
         ?ys = map ?\<sigma>ys ?ns\<psi>;
         ?fs\<psi> = map ?\<sigma>ys ?ns\<psi>';
         ?fs\<phi>
         : nall_tuples_rec ?AD (card (Inr -` set ?xs)) (length ?ns\<phi>');
         ?fs\<psi>
         : nall_tuples_rec ?AD (card (Inr -` set ?ys)) (length ?ns\<psi>');
         ad_agr_list ?AD (map ?\<sigma>ys (sort (?ns\<psi> @ ?ns\<psi>')))
          (map ?\<sigma>xs (sort (?ns\<phi> @ ?ns\<phi>'))) |]
      ==> map ?\<sigma>xs ?nys
          : nall_tuples_rec {}
             (card
               (Inr -`
                set (map ?\<sigma>xs (sort (?ns\<phi> @ map fst ?cys)))))
             (length ?nys)",
     template_implication
      ([template_equation
         (template_var 18,
          template_app
           (template_app (template_hole 31, t_empty), template_var 16)),
        template_equation
         (template_var 15,
          template_app
           (template_app (template_hole 31, t_empty), template_var 17)),
        template_equation
         (template_var 14,
          template_app
           (template_app
             (template_hole 26,
              template_app (template_hole 25, template_var 13)),
            template_app
             (template_app (template_hole 24, template_var 12),
              template_var 17))),
        template_equation
         (template_var 11,
          template_app
           (template_app
             (template_hole 26,
              template_app (template_hole 25, template_var 13)),
            template_app
             (template_app (template_hole 24, template_var 10),
              template_var 16))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_hole 21),
                  template_var 17)),
              template_app (template_hole 20, template_var 17))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_hole 21),
                  template_var 16)),
              template_app (template_hole 20, template_var 16))
            ),
        template_equation
         (template_var 9,
          template_app
           (template_app
             (template_hole 18, template_app (template_hole 17, t_empty)),
            template_app
             (template_app (template_hole 15, template_var 17),
              template_var 8))),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 14, template_hole 13),
            template_app
             (template_app
               (template_hole 18, template_app (template_hole 17, t_empty)),
              template_app
               (template_app (template_hole 15, template_var 17),
                template_var 8)))),
        template_equation
         (template_var 6,
          template_app
           (template_app
             (template_hole 18, template_app (template_hole 17, t_empty)),
            template_app
             (template_app (template_hole 15, template_var 16),
              template_var 5))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 14, template_hole 13),
            template_app
             (template_app
               (template_hole 18, template_app (template_hole 17, t_empty)),
              template_app
               (template_app (template_hole 15, template_var 16),
                template_var 5)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 8),
              template_var 14)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 5),
              template_var 11)
            ),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 10, template_var 3),
            template_var 17)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 10, template_var 3),
            template_var 18)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 10, template_var 1),
            template_var 16)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 10, template_var 1),
            template_var 15)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 13),
                  template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_hole 6),
                      template_app (template_hole 5, template_var 8)))),
                template_app (template_hole 4, template_var 18)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 13),
                  template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_hole 6),
                      template_app (template_hole 5, template_var 5)))),
                template_app (template_hole 4, template_var 15)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 13),
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_app
                   (template_app (template_hole 2, t_empty),
                    template_app
                     (template_app (template_hole 1, template_var 16),
                      template_var 15)))),
              template_app
               (template_app (template_hole 10, template_var 3),
                template_app
                 (template_app (template_hole 2, t_empty),
                  template_app
                   (template_app (template_hole 1, template_var 17),
                    template_var 18))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 10, template_var 3),
                 template_var 4)),
             template_app
              (template_app
                (template_app (template_hole 9, template_hole 0),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 10, template_var 3),
                         template_app
                          (template_app (template_hole 2, t_empty),
                           template_app
                            (template_app
                              (template_hole 1, template_var 17),
                             template_app
                              (template_app
                                (template_hole 14, template_hole 13),
                               template_var 6)))))))),
               template_app (template_hole 4, template_var 4)))
           ))),
    ("Ailamazyan.eval_conj_set_aux",
     "[| ?ns\<phi>' = filter (%n. n ~: set ?ns\<phi>) ?ns\<psi>;
         ?ns\<psi>' = filter (%n. n ~: set ?ns\<psi>) ?ns\<phi>;
         ?X\<phi> = fo_nmlz ?AD ` proj_vals ?R\<phi> ?ns\<phi>;
         ?X\<psi> = fo_nmlz ?AD ` proj_vals ?R\<psi> ?ns\<psi>;
         sorted_distinct ?ns\<phi>; sorted_distinct ?ns\<psi>;
         ?cxs =
         filter (%(n, x). n ~: set ?ns\<psi> & isl x) (zip ?ns\<phi> ?xs);
         ?nxs =
         map fst
          (filter (%(n, x). n ~: set ?ns\<psi> & ~ isl x)
            (zip ?ns\<phi> ?xs));
         ?cys =
         filter (%(n, y). n ~: set ?ns\<phi> & isl y) (zip ?ns\<psi> ?ys);
         ?nys =
         map fst
          (filter (%(n, y). n ~: set ?ns\<phi> & ~ isl y)
            (zip ?ns\<psi> ?ys));
         ?xs : ?X\<phi>; ?ys : ?X\<psi>; ?xs = map ?\<sigma>xs ?ns\<phi>;
         ?fs\<phi> = map ?\<sigma>xs ?ns\<phi>';
         ?ys = map ?\<sigma>ys ?ns\<psi>;
         ?fs\<psi> = map ?\<sigma>ys ?ns\<psi>';
         ?fs\<phi>
         : nall_tuples_rec ?AD (card (Inr -` set ?xs)) (length ?ns\<phi>');
         ?fs\<psi>
         : nall_tuples_rec ?AD (card (Inr -` set ?ys)) (length ?ns\<psi>');
         ad_agr_list ?AD (map ?\<sigma>ys (sort (?ns\<psi> @ ?ns\<psi>')))
          (map ?\<sigma>xs (sort (?ns\<phi> @ ?ns\<phi>'))) |]
      ==> map snd (merge (zip ?ns\<phi> ?xs) (zip ?ns\<phi>' ?fs\<phi>)) =
          map snd
           (merge
             (zip (sort (?ns\<phi> @ map fst ?cys))
               (map ?\<sigma>xs (sort (?ns\<phi> @ map fst ?cys))))
             (zip ?nys (map ?\<sigma>xs ?nys)))",
     template_implication
      ([template_equation
         (template_var 18,
          template_app
           (template_app (template_hole 33, t_empty), template_var 16)),
        template_equation
         (template_var 15,
          template_app
           (template_app (template_hole 33, t_empty), template_var 17)),
        template_equation
         (template_var 14,
          template_app
           (template_app
             (template_hole 28,
              template_app (template_hole 27, template_var 13)),
            template_app
             (template_app (template_hole 26, template_var 12),
              template_var 17))),
        template_equation
         (template_var 11,
          template_app
           (template_app
             (template_hole 28,
              template_app (template_hole 27, template_var 13)),
            template_app
             (template_app (template_hole 26, template_var 10),
              template_var 16))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app (template_hole 24, template_hole 23),
                  template_var 17)),
              template_app (template_hole 22, template_var 17))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app (template_hole 24, template_hole 23),
                  template_var 16)),
              template_app (template_hole 22, template_var 16))
            ),
        template_equation
         (template_var 9,
          template_app
           (template_app
             (template_hole 20, template_app (template_hole 19, t_empty)),
            template_app
             (template_app (template_hole 17, template_var 17),
              template_var 8))),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 16, template_hole 15),
            template_app
             (template_app
               (template_hole 20, template_app (template_hole 19, t_empty)),
              template_app
               (template_app (template_hole 17, template_var 17),
                template_var 8)))),
        template_equation
         (template_var 6,
          template_app
           (template_app
             (template_hole 20, template_app (template_hole 19, t_empty)),
            template_app
             (template_app (template_hole 17, template_var 16),
              template_var 5))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 16, template_hole 15),
            template_app
             (template_app
               (template_hole 20, template_app (template_hole 19, t_empty)),
              template_app
               (template_app (template_hole 17, template_var 16),
                template_var 5)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 8),
              template_var 14)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 5),
              template_var 11)
            ),
        template_equation
         (template_var 8,
          template_app
           (template_app (template_hole 12, template_var 3),
            template_var 17)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 12, template_var 3),
            template_var 18)),
        template_equation
         (template_var 5,
          template_app
           (template_app (template_hole 12, template_var 1),
            template_var 16)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 12, template_var 1),
            template_var 15)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 11, template_var 13),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_hole 8),
                      template_app (template_hole 7, template_var 8)))),
                template_app (template_hole 6, template_var 18)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 11, template_var 13),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_hole 8),
                      template_app (template_hole 7, template_var 5)))),
                template_app (template_hole 6, template_var 15)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 13),
                template_app
                 (template_app (template_hole 12, template_var 1),
                  template_app
                   (template_app (template_hole 4, t_empty),
                    template_app
                     (template_app (template_hole 3, template_var 16),
                      template_var 15)))),
              template_app
               (template_app (template_hole 12, template_var 3),
                template_app
                 (template_app (template_hole 4, t_empty),
                  template_app
                   (template_app (template_hole 3, template_var 17),
                    template_var 18))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 17, template_var 17),
                 template_var 8)),
             template_app
              (template_app (template_hole 17, template_var 18),
               template_var 2))),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 17,
                   template_app
                    (template_app (template_hole 4, t_empty),
                     template_app
                      (template_app (template_hole 3, template_var 17),
                       template_app
                        (template_app (template_hole 16, template_hole 15),
                         template_var 6)))),
                 template_app
                  (template_app (template_hole 12, template_var 3),
                   template_app
                    (template_app (template_hole 4, t_empty),
                     template_app
                      (template_app (template_hole 3, template_var 17),
                       template_app
                        (template_app (template_hole 16, template_hole 15),
                         template_var 6)))))),
             template_app
              (template_app (template_hole 17, template_var 4),
               template_app
                (template_app (template_hole 12, template_var 3),
                 template_var 4))))))),
    ("Ailamazyan.eval_conj_set_aux'",
     "[| ?ns\<phi>' = filter (%n. n ~: set ?ns\<phi>) ?ns\<psi>;
         ?ns\<psi>' = filter (%n. n ~: set ?ns\<psi>) ?ns\<phi>;
         ?X\<phi> = fo_nmlz ?AD ` proj_vals ?R\<phi> ?ns\<phi>;
         ?X\<psi> = fo_nmlz ?AD ` proj_vals ?R\<psi> ?ns\<psi>;
         sorted_distinct ?ns\<phi>; sorted_distinct ?ns\<psi>;
         ?cxs =
         filter (%(n, x). n ~: set ?ns\<psi> & isl x) (zip ?ns\<phi> ?xs);
         ?nxs =
         map fst
          (filter (%(n, x). n ~: set ?ns\<psi> & ~ isl x)
            (zip ?ns\<phi> ?xs));
         ?cys =
         filter (%(n, y). n ~: set ?ns\<phi> & isl y) (zip ?ns\<psi> ?ys);
         ?nys =
         map fst
          (filter (%(n, y). n ~: set ?ns\<phi> & ~ isl y)
            (zip ?ns\<psi> ?ys));
         ?xs : ?X\<phi>; ?ys : ?X\<psi>; ?xs = map ?\<sigma>xs ?ns\<phi>;
         map snd ?cys = map ?\<sigma>xs (map fst ?cys);
         ?ys\<psi> = map ?\<sigma>xs ?nys; ?ys = map ?\<sigma>ys ?ns\<psi>;
         map snd ?cxs = map ?\<sigma>ys (map fst ?cxs);
         ?xs\<phi> = map ?\<sigma>ys ?nxs;
         ?fs\<phi> = map ?\<sigma>xs ?ns\<phi>';
         ?fs\<psi> = map ?\<sigma>ys ?ns\<psi>';
         map ?\<sigma>xs ?nys
         : nall_tuples_rec {}
            (card
              (Inr -`
               set (map ?\<sigma>xs (sort (?ns\<phi> @ map fst ?cys)))))
            (length ?nys);
         Inl -` (set (map snd ?cxs) Un set ?xs\<phi>) <= ?AD;
         Inl -` (set (map snd ?cys) Un set ?ys\<psi>) <= ?AD;
         ad_agr_list ?AD (map ?\<sigma>ys (sort (?ns\<psi> @ ?ns\<psi>')))
          (map ?\<sigma>xs (sort (?ns\<phi> @ ?ns\<phi>'))) |]
      ==> ?fs\<phi>
          : nall_tuples_rec ?AD (card (Inr -` set ?xs))
             (length ?ns\<phi>')",
     template_implication
      ([template_equation
         (template_var 20,
          template_app
           (template_app (template_hole 37, t_empty), template_var 18)),
        template_equation
         (template_var 17,
          template_app
           (template_app (template_hole 37, t_empty), template_var 19)),
        template_equation
         (template_var 16,
          template_app
           (template_app
             (template_hole 32,
              template_app (template_hole 31, template_var 15)),
            template_app
             (template_app (template_hole 30, template_var 14),
              template_var 19))),
        template_equation
         (template_var 13,
          template_app
           (template_app
             (template_hole 32,
              template_app (template_hole 31, template_var 15)),
            template_app
             (template_app (template_hole 30, template_var 12),
              template_var 18))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 29,
                template_app
                 (template_app (template_hole 28, template_hole 27),
                  template_var 19)),
              template_app (template_hole 26, template_var 19))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 29,
                template_app
                 (template_app (template_hole 28, template_hole 27),
                  template_var 18)),
              template_app (template_hole 26, template_var 18))
            ),
        template_equation
         (template_var 11,
          template_app
           (template_app
             (template_hole 24, template_app (template_hole 23, t_empty)),
            template_app
             (template_app (template_hole 21, template_var 19),
              template_var 10))),
        template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 20, template_hole 19),
            template_app
             (template_app
               (template_hole 24, template_app (template_hole 23, t_empty)),
              template_app
               (template_app (template_hole 21, template_var 19),
                template_var 10)))),
        template_equation
         (template_var 8,
          template_app
           (template_app
             (template_hole 24, template_app (template_hole 23, t_empty)),
            template_app
             (template_app (template_hole 21, template_var 18),
              template_var 7))),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 20, template_hole 19),
            template_app
             (template_app
               (template_hole 24, template_app (template_hole 23, t_empty)),
              template_app
               (template_app (template_hole 21, template_var 18),
                template_var 7)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 10),
              template_var 16)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 7),
              template_var 13)
            ),
        template_equation
         (template_var 10,
          template_app
           (template_app (template_hole 16, template_var 5),
            template_var 19)),
        template_equation
         (template_app
           (template_app (template_hole 15, template_hole 14),
            template_var 8),
          template_app
           (template_app (template_hole 16, template_var 5),
            template_app
             (template_app (template_hole 20, template_hole 19),
              template_var 8))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 16, template_var 5),
            template_var 6)),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 16, template_var 3),
            template_var 18)),
        template_equation
         (template_app
           (template_app (template_hole 15, template_hole 14),
            template_var 11),
          template_app
           (template_app (template_hole 16, template_var 3),
            template_app
             (template_app (template_hole 20, template_hole 19),
              template_var 11))),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 16, template_var 3),
            template_var 9)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 16, template_var 5),
            template_var 20)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 16, template_var 3),
            template_var 17)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 16, template_var 5),
                  template_var 6)),
              template_app
               (template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_hole 9),
                      template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 16, template_var 5),
                          template_app
                           (template_app (template_hole 7, t_empty),
                            template_app
                             (template_app
                               (template_hole 6, template_var 19),
                              template_app
                               (template_app
                                 (template_hole 20, template_hole 19),
                                template_var 8)))))))),
                template_app (template_hole 5, template_var 6)))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 15, template_hole 14),
                    template_var 11))),
              template_app (template_hole 8, template_var 2))),
          template_var 15),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 15, template_hole 14),
                    template_var 8))),
              template_app (template_hole 8, template_var 4))),
          template_var 15),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 15),
                template_app
                 (template_app (template_hole 16, template_var 3),
                  template_app
                   (template_app (template_hole 7, t_empty),
                    template_app
                     (template_app (template_hole 6, template_var 18),
                      template_var 17)))),
              template_app
               (template_app (template_hole 16, template_var 5),
                template_app
                 (template_app (template_hole 7, t_empty),
                  template_app
                   (template_app (template_hole 6, template_var 19),
                    template_var 20))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 18, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 13, template_var 15),
                 template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_app (template_hole 8, template_var 10)))),
               template_app (template_hole 5, template_var 20)))
           ))),
    ("Ailamazyan.eval_conj_set_aux'",
     "[| ?ns\<phi>' = filter (%n. n ~: set ?ns\<phi>) ?ns\<psi>;
         ?ns\<psi>' = filter (%n. n ~: set ?ns\<psi>) ?ns\<phi>;
         ?X\<phi> = fo_nmlz ?AD ` proj_vals ?R\<phi> ?ns\<phi>;
         ?X\<psi> = fo_nmlz ?AD ` proj_vals ?R\<psi> ?ns\<psi>;
         sorted_distinct ?ns\<phi>; sorted_distinct ?ns\<psi>;
         ?cxs =
         filter (%(n, x). n ~: set ?ns\<psi> & isl x) (zip ?ns\<phi> ?xs);
         ?nxs =
         map fst
          (filter (%(n, x). n ~: set ?ns\<psi> & ~ isl x)
            (zip ?ns\<phi> ?xs));
         ?cys =
         filter (%(n, y). n ~: set ?ns\<phi> & isl y) (zip ?ns\<psi> ?ys);
         ?nys =
         map fst
          (filter (%(n, y). n ~: set ?ns\<phi> & ~ isl y)
            (zip ?ns\<psi> ?ys));
         ?xs : ?X\<phi>; ?ys : ?X\<psi>; ?xs = map ?\<sigma>xs ?ns\<phi>;
         map snd ?cys = map ?\<sigma>xs (map fst ?cys);
         ?ys\<psi> = map ?\<sigma>xs ?nys; ?ys = map ?\<sigma>ys ?ns\<psi>;
         map snd ?cxs = map ?\<sigma>ys (map fst ?cxs);
         ?xs\<phi> = map ?\<sigma>ys ?nxs;
         ?fs\<phi> = map ?\<sigma>xs ?ns\<phi>';
         ?fs\<psi> = map ?\<sigma>ys ?ns\<psi>';
         map ?\<sigma>xs ?nys
         : nall_tuples_rec {}
            (card
              (Inr -`
               set (map ?\<sigma>xs (sort (?ns\<phi> @ map fst ?cys)))))
            (length ?nys);
         Inl -` (set (map snd ?cxs) Un set ?xs\<phi>) <= ?AD;
         Inl -` (set (map snd ?cys) Un set ?ys\<psi>) <= ?AD;
         ad_agr_list ?AD (map ?\<sigma>ys (sort (?ns\<psi> @ ?ns\<psi>')))
          (map ?\<sigma>xs (sort (?ns\<phi> @ ?ns\<phi>'))) |]
      ==> map snd (merge (zip ?ns\<phi> ?xs) ?cys) =
          map ?\<sigma>xs (sort (?ns\<phi> @ map fst ?cys))",
     template_implication
      ([template_equation
         (template_var 20,
          template_app
           (template_app (template_hole 38, t_empty), template_var 18)),
        template_equation
         (template_var 17,
          template_app
           (template_app (template_hole 38, t_empty), template_var 19)),
        template_equation
         (template_var 16,
          template_app
           (template_app
             (template_hole 33,
              template_app (template_hole 32, template_var 15)),
            template_app
             (template_app (template_hole 31, template_var 14),
              template_var 19))),
        template_equation
         (template_var 13,
          template_app
           (template_app
             (template_hole 33,
              template_app (template_hole 32, template_var 15)),
            template_app
             (template_app (template_hole 31, template_var 12),
              template_var 18))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 30,
                template_app
                 (template_app (template_hole 29, template_hole 28),
                  template_var 19)),
              template_app (template_hole 27, template_var 19))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 30,
                template_app
                 (template_app (template_hole 29, template_hole 28),
                  template_var 18)),
              template_app (template_hole 27, template_var 18))
            ),
        template_equation
         (template_var 11,
          template_app
           (template_app
             (template_hole 25, template_app (template_hole 24, t_empty)),
            template_app
             (template_app (template_hole 22, template_var 19),
              template_var 10))),
        template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 21, template_hole 20),
            template_app
             (template_app
               (template_hole 25, template_app (template_hole 24, t_empty)),
              template_app
               (template_app (template_hole 22, template_var 19),
                template_var 10)))),
        template_equation
         (template_var 8,
          template_app
           (template_app
             (template_hole 25, template_app (template_hole 24, t_empty)),
            template_app
             (template_app (template_hole 22, template_var 18),
              template_var 7))),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 21, template_hole 20),
            template_app
             (template_app
               (template_hole 25, template_app (template_hole 24, t_empty)),
              template_app
               (template_app (template_hole 22, template_var 18),
                template_var 7)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 10),
              template_var 16)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 7),
              template_var 13)
            ),
        template_equation
         (template_var 10,
          template_app
           (template_app (template_hole 17, template_var 5),
            template_var 19)),
        template_equation
         (template_app
           (template_app (template_hole 16, template_hole 15),
            template_var 8),
          template_app
           (template_app (template_hole 17, template_var 5),
            template_app
             (template_app (template_hole 21, template_hole 20),
              template_var 8))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 17, template_var 5),
            template_var 6)),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 17, template_var 3),
            template_var 18)),
        template_equation
         (template_app
           (template_app (template_hole 16, template_hole 15),
            template_var 11),
          template_app
           (template_app (template_hole 17, template_var 3),
            template_app
             (template_app (template_hole 21, template_hole 20),
              template_var 11))),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 17, template_var 3),
            template_var 9)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 17, template_var 5),
            template_var 20)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 17, template_var 3),
            template_var 17)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 17, template_var 5),
                  template_var 6)),
              template_app
               (template_app
                 (template_app (template_hole 14, template_hole 13),
                  template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_hole 10),
                      template_app
                       (template_hole 9,
                        template_app
                         (template_app (template_hole 17, template_var 5),
                          template_app
                           (template_app (template_hole 8, t_empty),
                            template_app
                             (template_app
                               (template_hole 7, template_var 19),
                              template_app
                               (template_app
                                 (template_hole 21, template_hole 20),
                                template_var 8)))))))),
                template_app (template_hole 6, template_var 6)))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 16, template_hole 15),
                    template_var 11))),
              template_app (template_hole 9, template_var 2))),
          template_var 15),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 16, template_hole 15),
                    template_var 8))),
              template_app (template_hole 9, template_var 4))),
          template_var 15),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 15),
                template_app
                 (template_app (template_hole 17, template_var 3),
                  template_app
                   (template_app (template_hole 8, t_empty),
                    template_app
                     (template_app (template_hole 7, template_var 18),
                      template_var 17)))),
              template_app
               (template_app (template_hole 17, template_var 5),
                template_app
                 (template_app (template_hole 8, t_empty),
                  template_app
                   (template_app (template_hole 7, template_var 19),
                    template_var 20))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 16, template_hole 15),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 22, template_var 19),
                 template_var 10)),
             template_var 8)),
         template_app
          (template_app (template_hole 17, template_var 5),
           template_app
            (template_app (template_hole 8, t_empty),
             template_app
              (template_app (template_hole 7, template_var 19),
               template_app
                (template_app (template_hole 21, template_hole 20),
                 template_var 8))))))),
    ("Ailamazyan.eval_conj_set_aux'",
     "[| ?ns\<phi>' = filter (%n. n ~: set ?ns\<phi>) ?ns\<psi>;
         ?ns\<psi>' = filter (%n. n ~: set ?ns\<psi>) ?ns\<phi>;
         ?X\<phi> = fo_nmlz ?AD ` proj_vals ?R\<phi> ?ns\<phi>;
         ?X\<psi> = fo_nmlz ?AD ` proj_vals ?R\<psi> ?ns\<psi>;
         sorted_distinct ?ns\<phi>; sorted_distinct ?ns\<psi>;
         ?cxs =
         filter (%(n, x). n ~: set ?ns\<psi> & isl x) (zip ?ns\<phi> ?xs);
         ?nxs =
         map fst
          (filter (%(n, x). n ~: set ?ns\<psi> & ~ isl x)
            (zip ?ns\<phi> ?xs));
         ?cys =
         filter (%(n, y). n ~: set ?ns\<phi> & isl y) (zip ?ns\<psi> ?ys);
         ?nys =
         map fst
          (filter (%(n, y). n ~: set ?ns\<phi> & ~ isl y)
            (zip ?ns\<psi> ?ys));
         ?xs : ?X\<phi>; ?ys : ?X\<psi>; ?xs = map ?\<sigma>xs ?ns\<phi>;
         map snd ?cys = map ?\<sigma>xs (map fst ?cys);
         ?ys\<psi> = map ?\<sigma>xs ?nys; ?ys = map ?\<sigma>ys ?ns\<psi>;
         map snd ?cxs = map ?\<sigma>ys (map fst ?cxs);
         ?xs\<phi> = map ?\<sigma>ys ?nxs;
         ?fs\<phi> = map ?\<sigma>xs ?ns\<phi>';
         ?fs\<psi> = map ?\<sigma>ys ?ns\<psi>';
         map ?\<sigma>xs ?nys
         : nall_tuples_rec {}
            (card
              (Inr -`
               set (map ?\<sigma>xs (sort (?ns\<phi> @ map fst ?cys)))))
            (length ?nys);
         Inl -` (set (map snd ?cxs) Un set ?xs\<phi>) <= ?AD;
         Inl -` (set (map snd ?cys) Un set ?ys\<psi>) <= ?AD;
         ad_agr_list ?AD (map ?\<sigma>ys (sort (?ns\<psi> @ ?ns\<psi>')))
          (map ?\<sigma>xs (sort (?ns\<phi> @ ?ns\<phi>'))) |]
      ==> map snd (merge (zip ?ns\<phi> ?xs) (zip ?ns\<phi>' ?fs\<phi>)) =
          map snd
           (merge
             (zip (sort (?ns\<phi> @ map fst ?cys))
               (map ?\<sigma>xs (sort (?ns\<phi> @ map fst ?cys))))
             (zip ?nys (map ?\<sigma>xs ?nys)))",
     template_implication
      ([template_equation
         (template_var 20,
          template_app
           (template_app (template_hole 38, t_empty), template_var 18)),
        template_equation
         (template_var 17,
          template_app
           (template_app (template_hole 38, t_empty), template_var 19)),
        template_equation
         (template_var 16,
          template_app
           (template_app
             (template_hole 33,
              template_app (template_hole 32, template_var 15)),
            template_app
             (template_app (template_hole 31, template_var 14),
              template_var 19))),
        template_equation
         (template_var 13,
          template_app
           (template_app
             (template_hole 33,
              template_app (template_hole 32, template_var 15)),
            template_app
             (template_app (template_hole 31, template_var 12),
              template_var 18))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 30,
                template_app
                 (template_app (template_hole 29, template_hole 28),
                  template_var 19)),
              template_app (template_hole 27, template_var 19))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 30,
                template_app
                 (template_app (template_hole 29, template_hole 28),
                  template_var 18)),
              template_app (template_hole 27, template_var 18))
            ),
        template_equation
         (template_var 11,
          template_app
           (template_app
             (template_hole 25, template_app (template_hole 24, t_empty)),
            template_app
             (template_app (template_hole 22, template_var 19),
              template_var 10))),
        template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 21, template_hole 20),
            template_app
             (template_app
               (template_hole 25, template_app (template_hole 24, t_empty)),
              template_app
               (template_app (template_hole 22, template_var 19),
                template_var 10)))),
        template_equation
         (template_var 8,
          template_app
           (template_app
             (template_hole 25, template_app (template_hole 24, t_empty)),
            template_app
             (template_app (template_hole 22, template_var 18),
              template_var 7))),
        template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 21, template_hole 20),
            template_app
             (template_app
               (template_hole 25, template_app (template_hole 24, t_empty)),
              template_app
               (template_app (template_hole 22, template_var 18),
                template_var 7)))),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 10),
              template_var 16)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 7),
              template_var 13)
            ),
        template_equation
         (template_var 10,
          template_app
           (template_app (template_hole 17, template_var 5),
            template_var 19)),
        template_equation
         (template_app
           (template_app (template_hole 16, template_hole 15),
            template_var 8),
          template_app
           (template_app (template_hole 17, template_var 5),
            template_app
             (template_app (template_hole 21, template_hole 20),
              template_var 8))),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 17, template_var 5),
            template_var 6)),
        template_equation
         (template_var 7,
          template_app
           (template_app (template_hole 17, template_var 3),
            template_var 18)),
        template_equation
         (template_app
           (template_app (template_hole 16, template_hole 15),
            template_var 11),
          template_app
           (template_app (template_hole 17, template_var 3),
            template_app
             (template_app (template_hole 21, template_hole 20),
              template_var 11))),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 17, template_var 3),
            template_var 9)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 17, template_var 5),
            template_var 20)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 17, template_var 3),
            template_var 17)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 17, template_var 5),
                  template_var 6)),
              template_app
               (template_app
                 (template_app (template_hole 14, template_hole 13),
                  template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_hole 10),
                      template_app
                       (template_hole 9,
                        template_app
                         (template_app (template_hole 17, template_var 5),
                          template_app
                           (template_app (template_hole 8, t_empty),
                            template_app
                             (template_app
                               (template_hole 7, template_var 19),
                              template_app
                               (template_app
                                 (template_hole 21, template_hole 20),
                                template_var 8)))))))),
                template_app (template_hole 6, template_var 6)))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 16, template_hole 15),
                    template_var 11))),
              template_app (template_hole 9, template_var 2))),
          template_var 15),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 16, template_hole 15),
                    template_var 8))),
              template_app (template_hole 9, template_var 4))),
          template_var 15),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 15),
                template_app
                 (template_app (template_hole 17, template_var 3),
                  template_app
                   (template_app (template_hole 8, t_empty),
                    template_app
                     (template_app (template_hole 7, template_var 18),
                      template_var 17)))),
              template_app
               (template_app (template_hole 17, template_var 5),
                template_app
                 (template_app (template_hole 8, t_empty),
                  template_app
                   (template_app (template_hole 7, template_var 19),
                    template_var 20))))
            )],
       template_equation
        (template_app
          (template_app (template_hole 16, template_hole 15),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 22, template_var 19),
                 template_var 10)),
             template_app
              (template_app (template_hole 22, template_var 20),
               template_var 1))),
         template_app
          (template_app (template_hole 16, template_hole 15),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 22,
                   template_app
                    (template_app (template_hole 8, t_empty),
                     template_app
                      (template_app (template_hole 7, template_var 19),
                       template_app
                        (template_app (template_hole 21, template_hole 20),
                         template_var 8)))),
                 template_app
                  (template_app (template_hole 17, template_var 5),
                   template_app
                    (template_app (template_hole 8, t_empty),
                     template_app
                      (template_app (template_hole 7, template_var 19),
                       template_app
                        (template_app (template_hole 21, template_hole 20),
                         template_var 8)))))),
             template_app
              (template_app (template_hole 22, template_var 6),
               template_app
                (template_app (template_hole 17, template_var 5),
                 template_var 6)))))))]:
   (string * thm * template) list
### theory "Draft.AilamazyanMoreTemplates"
### 0.981s elapsed time, 1.304s cpu time, 0.140s GC time
val it = (): unit
