Loading theory "Draft.OpenFlow_Helpers" (required by "Draft.OF_conv_testTemplates" via "Draft.OF_conv_test" via "Draft.LinuxRouter_OpenFlow_Translation" via "Draft.Semantics_OpenFlow")
Loading theory "Draft.Sort_Descending" (required by "Draft.OF_conv_testTemplates" via "Draft.OF_conv_test" via "Draft.LinuxRouter_OpenFlow_Translation" via "Draft.Semantics_OpenFlow" via "Draft.List_Group")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OF_conv_testTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OF_conv_testTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.484s cpu time, 0.045s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OF_conv_testTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "Draft.OpenFlow_Helpers"
### 0.159s elapsed time, 0.636s cpu time, 0.045s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OF_conv_testTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.841s cpu time, 0.066s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OF_conv_testTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.367s elapsed time, 1.447s cpu time, 0.111s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OF_conv_testTemplates" via "Draft.ExtrEqs")
### theory "Draft.Sort_Descending"
### 0.437s elapsed time, 1.716s cpu time, 0.177s GC time
Loading theory "Draft.List_Group" (required by "Draft.OF_conv_testTemplates" via "Draft.OF_conv_test" via "Draft.LinuxRouter_OpenFlow_Translation" via "Draft.Semantics_OpenFlow")
### theory "Draft.List_Group"
### 0.126s elapsed time, 0.498s cpu time, 0.000s GC time
Loading theory "Draft.Semantics_OpenFlow" (required by "Draft.OF_conv_testTemplates" via "Draft.OF_conv_test" via "Draft.LinuxRouter_OpenFlow_Translation")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.966s elapsed time, 3.637s cpu time, 0.784s GC time
Loading theory "Draft.OpenFlow_Matches" (required by "Draft.OF_conv_testTemplates" via "Draft.OF_conv_test" via "Draft.LinuxRouter_OpenFlow_Translation")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.088s elapsed time, 4.107s cpu time, 0.873s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"[[1], [2, 2, 2], [3], [1], [4], [5, 5, 5]]"
  :: "int list list"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"[[(1, [])], [(2, ''a''), (2, ''b''), (2, ''c'')], [(3, ''c'')], [(1, [])],
  [(4, [])]]"
  :: "(int * char list) list list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.128s elapsed time, 7.758s cpu time, 1.179s GC time
Loading theory "Draft.Templates" (required by "Draft.OF_conv_testTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.219s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OF_conv_testTemplates")
find_consts
  "(('a \<times> 'b) \<Rightarrow> 'c) \<Rightarrow> 'a \<Rightarrow> 'b \<Rightarrow> 'c"
found 2 constant(s):
BNF_Wellorder_Constructions.curr ::
  "'a set => ('a * 'b => 'c) => 'a => 'b => 'c"
Product_Type.curry :: "('a * 'b => 'c) => 'a => 'b => 'c"
find_consts
  "('a \<Rightarrow> 'b \<Rightarrow> 'c) \<Rightarrow> ('a \<times> 'b) \<Rightarrow> 'c"
found 4 constant(s):
Hs_Compat.uncurry :: "('b => 'c => 'a) => 'b * 'c => 'a"
Product_Type.internal_case_prod :: "('a => 'b => 'c) => 'a * 'b => 'c"
Product_Type.old.prod.rec_prod :: "('a => 'b => 't) => 'a * 'b => 't"
Product_Type.prod.case_prod :: "('a => 'b => 'c) => 'a * 'b => 'c"
find_consts
  "('a \<Rightarrow> 'b \<Rightarrow> 'c \<Rightarrow> 'd) \<Rightarrow> ('a \<times> 'b \<times> 'c) \<Rightarrow> 'd"
found 1 constant(s):
Semantics_OpenFlow.split3 :: "('b => 'c => 'd => 'a) => 'b * 'c * 'd => 'a"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.880s elapsed time, 2.765s cpu time, 1.003s GC time
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Semantics_OpenFlow"
### 2.825s elapsed time, 9.539s cpu time, 2.145s GC time
### Cannot skip proof of schematic goal statement
Found termination order: "{}"
instantiation
  of_match_field :: linorder
  less_eq_of_match_field == less_eq ::
    of_match_field => of_match_field => bool
  less_of_match_field == less :: of_match_field => of_match_field => bool
Found termination order: "{}"
"map_option"
  :: "('a => 'b) => 'a option => 'b option"
### theory "Draft.OpenFlow_Matches"
### 4.163s elapsed time, 9.623s cpu time, 2.433s GC time
Loading theory "Draft.OpenFlow_Action" (required by "Draft.OF_conv_testTemplates" via "Draft.OF_conv_test" via "Draft.LinuxRouter_OpenFlow_Translation")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.OpenFlow_Action"
### 0.615s elapsed time, 0.651s cpu time, 0.021s GC time
Loading theory "Draft.OpenFlow_Serialize" (required by "Draft.OF_conv_testTemplates" via "Draft.OF_conv_test")
Loading theory "Draft.LinuxRouter_OpenFlow_Translation" (required by "Draft.OF_conv_testTemplates" via "Draft.OF_conv_test")
"{}"
  :: "(char list * ('a, 'b) simple_packet_ext_scheme) set"
### Ambiguous input (line 15 of "$AFP/LOFT/OpenFlow_Serialize.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" serialize_mac)
###     ("_constrain" ("_position" m)
###       ("_tapp" ("_NumeralType" 48) ("_type_name" word))))
###   ("_applC"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" intersperse) ("_Char" ("_position" '':'')))
###         ("_applC" ("_position" map)
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" hex_string_of_word)
###               ("\<^const>Groups.one_class.one"))
###             ("_lambda" ("_position" h)
###               ("\<^const>Word_Syntax.wordAND"
###                 ("\<^const>Bit_Shifts_Infix_Syntax.semiring_bit_operations_class.shiftr"
###                   ("_position" m)
###                   ("\<^const>Groups.times_class.times" ("_position" h)
###                     ("_Numeral" ("_constify" ("_position" 8)))))
###                 ("_Numeral" ("_constify" ("_position" 0xff))))))))
###       ("_position" rev))
###     ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###       ("_Numeral" ("_constify" ("_position" 6))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" serialize_mac)
###     ("_constrain" ("_position" m)
###       ("_tapp" ("_NumeralType" 48) ("_type_name" word))))
###   ("_applC"
###     ("\<^const>Fun.comp"
###       ("\<^const>Fun.comp"
###         ("_applC" ("_position" intersperse) ("_Char" ("_position" '':'')))
###         ("_applC" ("_position" map)
###           ("\<^const>Fun.comp"
###             ("_applC" ("_position" hex_string_of_word)
###               ("\<^const>Groups.one_class.one"))
###             ("_lambda" ("_position" h)
###               ("\<^const>Word_Syntax.wordAND"
###                 ("_thenM" ("_position" m)
###                   ("\<^const>Groups.times_class.times" ("_position" h)
###                     ("_Numeral" ("_constify" ("_position" 8)))))
###                 ("_Numeral" ("_constify" ("_position" 0xff))))))))
###       ("_position" rev))
###     ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###       ("_Numeral" ("_constify" ("_position" 6))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  serialize_of_match ::
    "(char list => char list) => of_match_field => char list"
"{(''oif'', p(| p_l2dst := 66 |))}"
  :: "(char list * ('a, 'b) simple_packet_ext_scheme) set"
consts
  annotate_rlen :: "'a list => (nat * 'a) list"
consts
  annotate_rlen_code :: "'a list => nat * (nat * 'a) list"
### theory "Draft.OpenFlow_Serialize"
### 1.600s elapsed time, 5.315s cpu time, 0.330s GC time
### theory "Draft.LinuxRouter_OpenFlow_Translation"
### 1.772s elapsed time, 5.429s cpu time, 0.330s GC time
*** Failed to load theory "Draft.OF_conv_test" (unresolved "Draft.OpenFlow_Serialize")
*** Failed to load theory "Draft.OF_conv_testTemplates" (unresolved "Draft.OF_conv_test")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "44")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 53 of "$AFP/LOFT/OpenFlow_Serialize.thy")
Exception- TOPLEVEL_ERROR raised
