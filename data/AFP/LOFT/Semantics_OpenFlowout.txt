Loading theory "Draft.OpenFlow_Helpers" (required by "Draft.Semantics_OpenFlowTemplates" via "Draft.Semantics_OpenFlow")
Loading theory "Draft.Sort_Descending" (required by "Draft.Semantics_OpenFlowTemplates" via "Draft.Semantics_OpenFlow" via "Draft.List_Group")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Semantics_OpenFlowTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Semantics_OpenFlowTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "Draft.OpenFlow_Helpers"
### 0.149s elapsed time, 0.611s cpu time, 0.049s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Semantics_OpenFlowTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.623s cpu time, 0.049s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Semantics_OpenFlowTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.318s elapsed time, 1.270s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Semantics_OpenFlowTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.200s elapsed time, 0.781s cpu time, 0.071s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Semantics_OpenFlowTemplates" via "Draft.ExtrEqs")
Found termination order: "length <*mlex*> {}"
### theory "Draft.Sort_Descending"
### 0.466s elapsed time, 1.842s cpu time, 0.199s GC time
Loading theory "Draft.List_Group" (required by "Draft.Semantics_OpenFlowTemplates" via "Draft.Semantics_OpenFlow")
### theory "Draft.List_Group"
### 0.125s elapsed time, 0.497s cpu time, 0.000s GC time
Loading theory "Draft.Semantics_OpenFlow" (required by "Draft.Semantics_OpenFlowTemplates")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.BigO"
### 0.932s elapsed time, 3.520s cpu time, 0.793s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.992s elapsed time, 3.761s cpu time, 0.793s GC time
Found termination order: "size <*mlex*> {}"
"[[1], [2, 2, 2], [3], [1], [4], [5, 5, 5]]"
  :: "int list list"
Found termination order: "size <*mlex*> {}"
"[[(1, [])], [(2, ''a''), (2, ''b''), (2, ''c'')], [(3, ''c'')], [(1, [])],
  [(4, [])]]"
  :: "(int * char list) list list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.050s elapsed time, 6.603s cpu time, 1.127s GC time
Loading theory "Draft.Templates" (required by "Draft.Semantics_OpenFlowTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.127s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Semantics_OpenFlowTemplates")
find_consts
  "(('a \<times> 'b) \<Rightarrow> 'c) \<Rightarrow> 'a \<Rightarrow> 'b \<Rightarrow> 'c"
found 2 constant(s):
BNF_Wellorder_Constructions.curr ::
  "'a set => ('a * 'b => 'c) => 'a => 'b => 'c"
Product_Type.curry :: "('a * 'b => 'c) => 'a => 'b => 'c"
find_consts
  "('a \<Rightarrow> 'b \<Rightarrow> 'c) \<Rightarrow> ('a \<times> 'b) \<Rightarrow> 'c"
found 4 constant(s):
Hs_Compat.uncurry :: "('b => 'c => 'a) => 'b * 'c => 'a"
Product_Type.internal_case_prod :: "('a => 'b => 'c) => 'a * 'b => 'c"
Product_Type.old.prod.rec_prod :: "('a => 'b => 't) => 'a * 'b => 't"
Product_Type.prod.case_prod :: "('a => 'b => 'c) => 'a * 'b => 'c"
find_consts
  "('a \<Rightarrow> 'b \<Rightarrow> 'c \<Rightarrow> 'd) \<Rightarrow> ('a \<times> 'b \<times> 'c) \<Rightarrow> 'd"
found 1 constant(s):
Semantics_OpenFlow.split3 :: "('b => 'c => 'd => 'a) => 'b * 'c * 'd => 'a"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.773s elapsed time, 1.888s cpu time, 0.809s GC time
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Semantics_OpenFlow"
### 2.535s elapsed time, 6.946s cpu time, 1.702s GC time
Loading theory "Draft.Semantics_OpenFlowTemplates"
val templateLemmas =
   [("Semantics_OpenFlow.OF_match_linear_ne_Undefined",
     "OF_match_linear ?\<gamma> ?ft ?p ~= Undefined",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("Semantics_OpenFlow.check_no_overlap_alt",
     "check_no_overlap ?\<gamma> ?ft = check_no_overlap2 ?\<gamma> ?ft",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Semantics_OpenFlow.check_no_overlapI",
     "no_overlaps ?\<gamma> ?t ==> check_no_overlap ?\<gamma> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Semantics_OpenFlow.overlap_sort_invar",
     "check_no_overlap ?\<gamma> (sort_descending_key ?k ?ft) =
      check_no_overlap ?\<gamma> ?ft",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2), template_var 0))),
    ("Semantics_OpenFlow.no_overlap_ConsI",
     "check_no_overlap2 ?\<gamma> (?x # ?xs) ==>
      check_no_overlap2 ?\<gamma> ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Semantics_OpenFlow.no_overlaps_append",
     "no_overlaps ?\<gamma> (?x @ ?y) ==> no_overlaps ?\<gamma> ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Semantics_OpenFlow.no_overlap_not_unefined",
     "check_no_overlap ?\<gamma> ?ft ==>
      OF_same_priority_match2 ?\<gamma> ?ft ?p ~= Undefined",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Semantics_OpenFlow.no_overlaps_not_unefined",
     "no_overlaps ?\<gamma> ?ft ==>
      OF_priority_match ?\<gamma> ?ft ?p ~= Undefined",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Semantics_OpenFlow.no_overlapsI",
     "[| check_no_overlap ?\<gamma> ?t; distinct ?t |]
      ==> no_overlaps ?\<gamma> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Semantics_OpenFlow.OF_lm_noa_none_iff",
     "(OF_match_linear ?\<gamma> ?ft ?p = NoAction) =
      (ALL e:set ?ft. ~ ?\<gamma> (ofe_fields e) ?p)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 4),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         t_empty))),
    ("Semantics_OpenFlow.OF_match_eq2",
     "check_no_overlap ?\<gamma> ?ft ==>
      OF_same_priority_match2 ?\<gamma> ?ft ?p =
      OF_match_linear ?\<gamma> (sort_descending_key ofe_prio ?ft) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("Semantics_OpenFlow.OF_eq_sort",
     "no_overlaps ?\<gamma> ?f ==>
      OF_priority_match ?\<gamma> ?f ?p =
      OF_match_linear ?\<gamma> (sort_descending_key ofe_prio ?f) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("Semantics_OpenFlow.OF_lm_noa_none",
     "OF_match_linear ?\<gamma> ?ft ?p = NoAction ==>
      ALL e:set ?ft. ~ ?\<gamma> (ofe_fields e) ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             t_empty)
           ))),
    ("Semantics_OpenFlow.unmatching_insert_agnostic",
     "~ ?\<gamma> (ofe_fields ?a) ?p ==>
      OF_same_priority_match2 ?\<gamma> (?a # ?ft) ?p =
      OF_same_priority_match2 ?\<gamma> ?ft ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_var 3,
                    template_app (template_hole 3, template_var 2)),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0),
           template_var 1)))),
    ("Semantics_OpenFlow.filter_singleton",
     "filter ?f ?s = [?y] ==> ?f ?y & ?y : set ?s",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, t_empty), template_var 1),
          template_app
           (template_app (template_hole 4, template_var 0),
            template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_var 2, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Semantics_OpenFlow.OF_match_linear_append",
     "OF_match_linear ?\<gamma> (?a @ ?b) ?p =
      (case OF_match_linear ?\<gamma> ?a ?p of Action a => Action a
       | NoAction => OF_match_linear ?\<gamma> ?b ?p
       | Undefined => Undefined)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1),
               template_var 0)),
           template_hole 0),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Semantics_OpenFlow.OF_eq",
     "[| no_overlaps ?\<gamma> ?f; sorted_descending (map ofe_prio ?f) |]
      ==> OF_match_linear ?\<gamma> ?f ?p =
          OF_priority_match ?\<gamma> ?f ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Semantics_OpenFlow.OF_match_eq",
     "[| sorted_descending (map ofe_prio ?ft);
         check_no_overlap ?\<gamma> ?ft |]
      ==> OF_same_priority_match2 ?\<gamma> ?ft ?p =
          OF_match_linear ?\<gamma> ?ft ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("Semantics_OpenFlow.OF_spm3_noa_none",
     "[| no_overlaps ?\<gamma> ?ft;
         OF_priority_match ?\<gamma> ?ft ?p = NoAction |]
      ==> ALL e:set ?ft. ~ ?\<gamma> (ofe_fields e) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             t_empty)
           ))),
    ("Semantics_OpenFlow.set_eq_rule",
     "[| !!x. x : ?a ==> x : ?b; !!x. x : ?b ==> x : ?a |] ==> ?a = ?b",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Semantics_OpenFlow.OF_spm3_get_fe",
     "OF_priority_match ?\<gamma> ?ft ?p = Action ?a ==>
      EX fe.
         ofe_action fe = ?a &
         fe : set ?ft & OF_priority_match_ana ?\<gamma> ?ft ?p = Action fe",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 9, template_var 0))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Semantics_OpenFlow.OF_match_linear_match_allsameaction",
     "[| ?gr : set ?oms; ?\<gamma> ?gr ?p = True |]
      ==> OF_match_linear ?\<gamma>
           (map (%x. split3 OFEntry (?pri, x, ?act)) ?oms) ?p =
          Action ?act",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 5),
              template_app (template_hole 10, template_var 4))
            ),
        template_equation
         (template_app
           (template_app (template_var 3, template_var 5), template_var 2),
          template_hole 8)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 3),
             template_app
              (template_app (template_hole 5, t_empty), template_var 4)),
           template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Semantics_OpenFlow.no_overlaps_ne1",
     "[| no_overlaps ?\<gamma> (?x @ ?a # ?y @ ?b # ?z);
         (EX p. ?\<gamma> (ofe_fields ?a) p) |
         (EX p. ?\<gamma> (ofe_fields ?b) p) |]
      ==> ?a ~= ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_app
               (template_app (template_hole 6, template_var 4),
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_app
                     (template_app (template_hole 5, template_var 1),
                      template_var 0)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4, template_app (template_hole 3, t_empty)),
              template_app (template_hole 3, t_empty))
            )],
       template_negation
        (template_equation (template_var 3, template_var 1)))),
    ("Semantics_OpenFlow.prio_match_matcher_alt2",
     "(let matching =
             {f: set ?flow_entries. ?\<gamma> (ofe_fields f) ?packet}
       in {f: matching. ALL fo:matching. ofe_prio fo <= ofe_prio f}) =
      set (let matching =
                 filter (%f. ?\<gamma> (ofe_fields f) ?packet) ?flow_entries
           in filter (%f. ALL fo:set matching. ofe_prio fo <= ofe_prio f)
               matching)",
     template_equation
      (template_app
        (template_app
          (template_hole 10, template_app (template_hole 9, t_empty)),
         t_empty),
       template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 2)),
           t_empty)))),
    ("Semantics_OpenFlow.prio_match_matcher_alt",
     "{f: set ?flow_entries.
       ?\<gamma> (ofe_fields f) ?packet &
       (ALL fo:set ?flow_entries.
           ofe_prio f < ofe_prio fo -->
           ~ ?\<gamma> (ofe_fields fo) ?packet)} =
      (let matching =
             {f: set ?flow_entries. ?\<gamma> (ofe_fields f) ?packet}
       in {f: matching. ALL fo:matching. ofe_prio fo <= ofe_prio f})",
     template_equation
      (template_app (template_hole 11, t_empty),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 11, t_empty)),
         t_empty)))]:
   (string * thm * template) list
### theory "Draft.Semantics_OpenFlowTemplates"
### 0.579s elapsed time, 0.738s cpu time, 0.078s GC time
val it = (): unit
