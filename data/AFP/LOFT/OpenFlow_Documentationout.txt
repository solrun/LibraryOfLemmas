Loading theory "Draft.OpenFlow_Helpers" (required by "Draft.OpenFlow_DocumentationTemplates" via "Draft.OpenFlow_Documentation" via "Draft.LinuxRouter_OpenFlow_Translation" via "Draft.Semantics_OpenFlow")
Loading theory "Draft.Sort_Descending" (required by "Draft.OpenFlow_DocumentationTemplates" via "Draft.OpenFlow_Documentation" via "Draft.LinuxRouter_OpenFlow_Translation" via "Draft.Semantics_OpenFlow" via "Draft.List_Group")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OpenFlow_DocumentationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OpenFlow_DocumentationTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "size_list size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.560s cpu time, 0.034s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OpenFlow_DocumentationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "Draft.OpenFlow_Helpers"
### 0.141s elapsed time, 0.578s cpu time, 0.034s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OpenFlow_DocumentationTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.341s elapsed time, 1.354s cpu time, 0.112s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OpenFlow_DocumentationTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.810s cpu time, 0.078s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OpenFlow_DocumentationTemplates" via "Draft.ExtrEqs")
### theory "Draft.Sort_Descending"
### 0.373s elapsed time, 1.486s cpu time, 0.112s GC time
Loading theory "Draft.List_Group" (required by "Draft.OpenFlow_DocumentationTemplates" via "Draft.OpenFlow_Documentation" via "Draft.LinuxRouter_OpenFlow_Translation" via "Draft.Semantics_OpenFlow")
### theory "Draft.List_Group"
### 0.149s elapsed time, 0.575s cpu time, 0.073s GC time
Loading theory "Draft.Semantics_OpenFlow" (required by "Draft.OpenFlow_DocumentationTemplates" via "Draft.OpenFlow_Documentation" via "Draft.LinuxRouter_OpenFlow_Translation")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.904s elapsed time, 3.396s cpu time, 0.787s GC time
Loading theory "Draft.OpenFlow_Matches" (required by "Draft.OpenFlow_DocumentationTemplates" via "Draft.OpenFlow_Documentation" via "Draft.LinuxRouter_OpenFlow_Translation")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.992s elapsed time, 3.730s cpu time, 0.836s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"[[1], [2, 2, 2], [3], [1], [4], [5, 5, 5]]"
  :: "int list list"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"[[(1, [])], [(2, ''a''), (2, ''b''), (2, ''c'')], [(3, ''c'')], [(1, [])],
  [(4, [])]]"
  :: "(int * char list) list list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.043s elapsed time, 7.433s cpu time, 1.156s GC time
Loading theory "Draft.Templates" (required by "Draft.OpenFlow_DocumentationTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.219s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OpenFlow_DocumentationTemplates")
find_consts
  "(('a \<times> 'b) \<Rightarrow> 'c) \<Rightarrow> 'a \<Rightarrow> 'b \<Rightarrow> 'c"
found 2 constant(s):
BNF_Wellorder_Constructions.curr ::
  "'a set => ('a * 'b => 'c) => 'a => 'b => 'c"
Product_Type.curry :: "('a * 'b => 'c) => 'a => 'b => 'c"
find_consts
  "('a \<Rightarrow> 'b \<Rightarrow> 'c) \<Rightarrow> ('a \<times> 'b) \<Rightarrow> 'c"
found 4 constant(s):
Hs_Compat.uncurry :: "('b => 'c => 'a) => 'b * 'c => 'a"
Product_Type.internal_case_prod :: "('a => 'b => 'c) => 'a * 'b => 'c"
Product_Type.old.prod.rec_prod :: "('a => 'b => 't) => 'a * 'b => 't"
Product_Type.prod.case_prod :: "('a => 'b => 'c) => 'a * 'b => 'c"
find_consts
  "('a \<Rightarrow> 'b \<Rightarrow> 'c \<Rightarrow> 'd) \<Rightarrow> ('a \<times> 'b \<times> 'c) \<Rightarrow> 'd"
found 1 constant(s):
Semantics_OpenFlow.split3 :: "('b => 'c => 'd => 'a) => 'b * 'c * 'd => 'a"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.661s elapsed time, 2.023s cpu time, 0.263s GC time
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.Semantics_OpenFlow"
### 2.489s elapsed time, 8.407s cpu time, 1.268s GC time
Loading theory "Draft.Featherweight_OpenFlow_Comparison" (required by "Draft.OpenFlow_DocumentationTemplates" via "Draft.OpenFlow_Documentation")
Proofs for inductive predicate(s) "guha_table_semantics"
  Proving monotonicity ...
### theory "Draft.Featherweight_OpenFlow_Comparison"
### 0.403s elapsed time, 1.246s cpu time, 0.990s GC time
### Cannot skip proof of schematic goal statement
Found termination order: "{}"
instantiation
  of_match_field :: linorder
  less_eq_of_match_field == less_eq ::
    of_match_field => of_match_field => bool
  less_of_match_field == less :: of_match_field => of_match_field => bool
Found termination order: "{}"
"map_option"
  :: "('a => 'b) => 'a option => 'b option"
### theory "Draft.OpenFlow_Matches"
### 3.836s elapsed time, 8.823s cpu time, 1.800s GC time
Loading theory "Draft.OpenFlow_Action" (required by "Draft.OpenFlow_DocumentationTemplates" via "Draft.OpenFlow_Documentation" via "Draft.LinuxRouter_OpenFlow_Translation")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.OpenFlow_Action"
### 0.532s elapsed time, 0.613s cpu time, 0.095s GC time
Loading theory "Draft.LinuxRouter_OpenFlow_Translation" (required by "Draft.OpenFlow_DocumentationTemplates" via "Draft.OpenFlow_Documentation")
"{}"
  :: "(char list * ('a, 'b) simple_packet_ext_scheme) set"
"{(''oif'', p(| p_l2dst := 66 |))}"
  :: "(char list * ('a, 'b) simple_packet_ext_scheme) set"
consts
  annotate_rlen :: "'a list => (nat * 'a) list"
consts
  annotate_rlen_code :: "'a list => nat * (nat * 'a) list"
### theory "Draft.LinuxRouter_OpenFlow_Translation"
### 1.524s elapsed time, 2.526s cpu time, 0.274s GC time
Loading theory "Draft.OpenFlow_Documentation" (required by "Draft.OpenFlow_DocumentationTemplates")
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "Draft.OpenFlow_Documentation"
### 0.854s elapsed time, 1.604s cpu time, 1.035s GC time
Loading theory "Draft.OpenFlow_DocumentationTemplates"
val templateLemmas =
   [("OpenFlow_Documentation.simple_match_to_of_match",
     "[| simple_match_valid ?r; p_iiface ?p : set ?ifs;
         match_iface (oiface ?r) (p_oiface ?p); p_l2type ?p = 2048 |]
      ==> simple_matches ?r ?p =
          (EX gr:set (simple_match_to_of_match ?r ?ifs).
              OF_match_fields gr ?p = Some True)",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app (template_hole 18, template_var 1)),
              template_app (template_hole 17, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 2)),
              template_app (template_hole 14, template_var 1))
            ),
        template_equation
         (template_app (template_hole 12, template_var 1),
          template_app
           (template_hole 11,
            template_app
             (template_hole 10,
              template_app
               (template_hole 10,
                template_app
                 (template_hole 10,
                  template_app
                   (template_hole 10,
                    template_app
                     (template_hole 10,
                      template_app
                       (template_hole 10,
                        template_app
                         (template_hole 10,
                          template_app
                           (template_hole 10,
                            template_app
                             (template_hole 10,
                              template_app
                               (template_hole 10,
                                template_app
                                 (template_hole 10,
                                  template_hole 9)))))))))))))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0))),
           t_empty))))]:
   (string * thm * template) list
### theory "Draft.OpenFlow_DocumentationTemplates"
### 0.989s elapsed time, 1.285s cpu time, 0.173s GC time
val it = (): unit
