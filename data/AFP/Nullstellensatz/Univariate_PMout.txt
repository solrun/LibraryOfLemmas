Loading theory "Draft.Univariate_PM" (required by "Draft.Univariate_PMTemplates")
Loading theory "Draft.Templates" (required by "Draft.Univariate_PMTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.175s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Univariate_PMTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.580s elapsed time, 1.169s cpu time, 0.178s GC time
### theory "Draft.Univariate_PM"
### 0.685s elapsed time, 1.381s cpu time, 0.178s GC time
Loading theory "Draft.Univariate_PMTemplates"
val templateLemmas =
   [("Univariate_PM.poly_of_pm_one", "poly_of_pm ?x 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Univariate_PM.poly_of_pm_zero", "poly_of_pm ?x 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Univariate_PM.poly_of_focus_zero", "poly_of_focus ?x 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Univariate_PM.poly_of_focus_one", "poly_of_focus ?x 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Univariate_PM.flat_pm_of_poly_zero", "flat_pm_of_poly ?x 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Univariate_PM.pm_of_poly_one", "pm_of_poly ?x 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Univariate_PM.pm_of_poly_zero", "pm_of_poly ?x 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Univariate_PM.flat_pm_of_poly_one", "flat_pm_of_poly ?x 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Univariate_PM.poly_of_pm_of_poly",
     "poly_of_pm ?x (pm_of_poly ?x ?p) = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Univariate_PM.flat_pm_of_poly_of_focus",
     "flat_pm_of_poly ?x (poly_of_focus ?x ?p) = ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Univariate_PM.pm_of_poly_in_Polys", "pm_of_poly ?x ?p : P[{?x}]",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)))
         )),
    ("Univariate_PM.poly_of_focus_eq_zero_iff",
     "(poly_of_focus ?x ?p = 0) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Univariate_PM.pm_of_poly_eq_zero_iff",
     "(pm_of_poly ?x ?p = 0) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Univariate_PM.poly_of_pm_uminus",
     "poly_of_pm ?x (- ?p) = - poly_of_pm ?x ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Univariate_PM.poly_of_focus_uminus",
     "poly_of_focus ?x (- ?p) = - poly_of_focus ?x ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Univariate_PM.flat_pm_of_poly_uminus",
     "flat_pm_of_poly ?x (- ?p) = - flat_pm_of_poly ?x ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Univariate_PM.pm_of_poly_uminus",
     "pm_of_poly ?x (- ?p) = - pm_of_poly ?x ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Univariate_PM.poly_eval_eq_poly",
     "poly_eval ?a (pm_of_poly ?x ?p) = poly ?p (?a ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app (template_var 2, template_var 1)))),
    ("Univariate_PM.coeff_poly_of_pm",
     "poly.coeff (poly_of_pm ?x ?p) ?k = lookup ?p (monomial ?k ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Univariate_PM.lookup_pm_of_poly_single",
     "lookup (pm_of_poly ?x ?p) (monomial ?d ?x) = poly.coeff ?p ?d",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Univariate_PM.poly_of_pm_power",
     "poly_of_pm ?x (?p ^ ?m) = poly_of_pm ?x ?p ^ ?m",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Univariate_PM.poly_of_focus_power",
     "poly_of_focus ?x (?p ^ ?m) = poly_of_focus ?x ?p ^ ?m",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Univariate_PM.flat_pm_of_poly_power",
     "flat_pm_of_poly ?x (?p ^ ?m) = flat_pm_of_poly ?x ?p ^ ?m",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Univariate_PM.pm_of_poly_smult",
     "pm_of_poly ?x (Polynomial.smult ?c ?p) = ?c \<cdot> pm_of_poly ?x ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Univariate_PM.flat_pm_of_poly_smult",
     "flat_pm_of_poly ?x (Polynomial.smult ?c ?p) =
      ?c * flat_pm_of_poly ?x ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Univariate_PM.poly_poly_of_focus_monomial",
     "poly (poly_of_focus ?x ?p) (monomial (1::?'b) (monomial 1 ?x)) = ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_hole 0)),
       template_var 0)),
    ("Univariate_PM.pm_of_poly_power",
     "pm_of_poly ?x (?p ^ ?m) = pm_of_poly ?x ?p ^ ?m",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Univariate_PM.pm_of_poly_monom",
     "pm_of_poly ?x (Polynomial.monom ?c ?d) =
      monomial ?c (monomial ?d ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Univariate_PM.poly_of_pm_times",
     "poly_of_pm ?x (?p * ?q) = poly_of_pm ?x ?p * poly_of_pm ?x ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Univariate_PM.poly_of_pm_prod",
     "poly_of_pm ?x (prod ?f ?I) = (PROD i:?I. poly_of_pm ?x (?f i))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Univariate_PM.poly_of_pm_plus",
     "poly_of_pm ?x (?p + ?q) = poly_of_pm ?x ?p + poly_of_pm ?x ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Univariate_PM.poly_of_pm_sum",
     "poly_of_pm ?x (sum ?f ?I) = (SUM i:?I. poly_of_pm ?x (?f i))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Univariate_PM.poly_of_pm_minus",
     "poly_of_pm ?x (?p - ?q) = poly_of_pm ?x ?p - poly_of_pm ?x ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Univariate_PM.poly_of_focus_times",
     "poly_of_focus ?x (?p * ?q) =
      poly_of_focus ?x ?p * poly_of_focus ?x ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Univariate_PM.poly_of_focus_minus",
     "poly_of_focus ?x (?p - ?q) =
      poly_of_focus ?x ?p - poly_of_focus ?x ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Univariate_PM.poly_of_focus_plus",
     "poly_of_focus ?x (?p + ?q) =
      poly_of_focus ?x ?p + poly_of_focus ?x ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Univariate_PM.poly_of_focus_prod",
     "poly_of_focus ?x (prod ?f ?I) = (PROD i:?I. poly_of_focus ?x (?f i))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Univariate_PM.poly_of_focus_sum",
     "poly_of_focus ?x (sum ?f ?I) = (SUM i:?I. poly_of_focus ?x (?f i))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Univariate_PM.flat_pm_of_poly_minus",
     "flat_pm_of_poly ?x (?p - ?q) =
      flat_pm_of_poly ?x ?p - flat_pm_of_poly ?x ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Univariate_PM.flat_pm_of_poly_times",
     "flat_pm_of_poly ?x (?p * ?q) =
      flat_pm_of_poly ?x ?p * flat_pm_of_poly ?x ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Univariate_PM.pm_of_poly_times",
     "pm_of_poly ?x (?p * ?q) = pm_of_poly ?x ?p * pm_of_poly ?x ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Univariate_PM.pm_of_poly_prod",
     "pm_of_poly ?x (prod ?f ?I) = (PROD i:?I. pm_of_poly ?x (?f i))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Univariate_PM.pm_of_poly_plus",
     "pm_of_poly ?x (?p + ?q) = pm_of_poly ?x ?p + pm_of_poly ?x ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Univariate_PM.pm_of_poly_sum",
     "pm_of_poly ?x (sum ?f ?I) = (SUM i:?I. pm_of_poly ?x (?f i))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Univariate_PM.pm_of_poly_minus",
     "pm_of_poly ?x (?p - ?q) = pm_of_poly ?x ?p - pm_of_poly ?x ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Univariate_PM.flat_pm_of_poly_prod",
     "flat_pm_of_poly ?x (prod ?f ?I) =
      (PROD i:?I. flat_pm_of_poly ?x (?f i))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Univariate_PM.flat_pm_of_poly_plus",
     "flat_pm_of_poly ?x (?p + ?q) =
      flat_pm_of_poly ?x ?p + flat_pm_of_poly ?x ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Univariate_PM.flat_pm_of_poly_sum",
     "flat_pm_of_poly ?x (sum ?f ?I) =
      (SUM i:?I. flat_pm_of_poly ?x (?f i))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Univariate_PM.poly_eq_poly_eval",
     "poly (poly_of_pm ?x ?p) ?a = poly_eval (%y. ?a when y = ?x) ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, t_empty), template_var 1))),
    ("Univariate_PM.poly_poly_of_focus",
     "poly (poly_of_focus ?x ?p) ?a = poly_eval (%_. ?a) (focus {?x} ?p)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0)),
           template_var 1)))),
    ("Univariate_PM.flat_pm_of_poly_monom",
     "flat_pm_of_poly ?x (Polynomial.monom ?c ?d) =
      punit.monom_mult (1::?'c) (monomial ?d ?x) ?c",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2),
             template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Univariate_PM.indets_flat_pm_of_poly_subset",
     "indets (flat_pm_of_poly ?x ?p)
      <= insert ?x (\<Union> (indets ` range (poly.coeff ?p)))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 7),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0)))))),
    ("Univariate_PM.poly_of_pm_eq_zero_iff",
     "(poly_of_pm ?x ?p = 0) = (keys ?p Int .[{?x}] = {})",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 8, template_var 1), template_var 0),
         template_hole 7),
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_hole 0))),
    ("Univariate_PM.pm_of_poly_of_pm",
     "?p : P[{?x}] ==> pm_of_poly ?x (poly_of_pm ?x ?p) = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Univariate_PM.keys_pm_of_poly",
     "keys (pm_of_poly ?x ?p) =
      Poly_Mapping.single ?x ` {d. poly.coeff ?p d ~= (0::?'b)}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, t_empty)))),
    ("Univariate_PM.poly_of_focus_monomial",
     "poly_of_focus ?x (monomial ?c ?t) =
      Polynomial.monom (monomial ?c (except ?t {?x})) (lookup ?t ?x)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1))),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("Univariate_PM.flat_pm_of_poly_in_Polys",
     "range (poly.coeff ?p) <= P[?Y] ==>
      flat_pm_of_poly ?x ?p : P[insert ?x ?Y]",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 2)),
            template_hole 4),
          template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Univariate_PM.poly_of_pm_monomial",
     "poly_of_pm ?x (monomial ?c ?t) =
      (Polynomial.monom ?c (lookup ?t ?x) when ?t : .[{?x}])",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 2))),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0)))))),
    ("Univariate_PM.flat_pm_of_poly_pCons",
     "flat_pm_of_poly ?x (pCons ?c ?p) =
      ?c +
      punit.monom_mult (1::?'b) (monomial 1 ?x) (flat_pm_of_poly ?x ?p)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_hole 3),
               template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0)),
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 0))))),
    ("Univariate_PM.poly_eq_poly_eval'",
     "?p : P[{?x}] ==> poly (poly_of_pm ?x ?p) ?a = poly_eval (%_. ?a) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 0, t_empty), template_var 2)))),
    ("Univariate_PM.coeff_poly_of_focus_subset_Polys",
     "?p : P[?X] ==>
      range (poly.coeff (poly_of_focus ?x ?p)) <= P[?X - {?x}]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 2))),
           template_hole 3),
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("Univariate_PM.poly_of_focus_flat_pm_of_poly",
     "range (poly.coeff ?p) <= P[- {?x}] ==>
      poly_of_focus ?x (flat_pm_of_poly ?x ?p) = ?p",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1)),
            template_hole 7),
          template_app
           (template_hole 6,
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3))))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Univariate_PM.pm_of_poly_pCons",
     "pm_of_poly ?x (pCons ?c ?p) =
      monomial ?c 0 +
      punit.monom_mult (1::?'b) (monomial 1 ?x) (pm_of_poly ?x ?p)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 2),
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_hole 3),
               template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0)),
           template_app
            (template_app (template_hole 10, template_var 2),
             template_var 0))))),
    ("Univariate_PM.flat_pm_of_poly_eq_zeroD",
     "[| flat_pm_of_poly ?x ?p = 0; range (poly.coeff ?p) <= P[- {?x}] |]
      ==> ?p = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 1),
            template_var 0),
          template_hole 10),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 0)),
            template_hole 6),
          template_app
           (template_hole 5,
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_hole 2))))],
       template_equation (template_var 0, template_hole 0))),
    ("Univariate_PM.pm_of_poly_aux",
     "{t. (poly.coeff ?p (lookup t ?x) when t : .[{?x}]) ~= (0::?'b)} =
      Poly_Mapping.single ?x ` {d. poly.coeff ?p d ~= (0::?'b)}",
     template_equation
      (template_app (template_hole 13, t_empty),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Univariate_PMTemplates"
### 0.568s elapsed time, 0.722s cpu time, 0.097s GC time
val it = (): unit
