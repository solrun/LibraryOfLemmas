Loading theory "Extended_Finite_State_Machines.Trilean" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp" via "Extended_Finite_State_Machines.Value_Lexorder" via "Extended_Finite_State_Machines.Value")
Loading theory "Extended_Finite_State_Machines.VName" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SubsumptionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SubsumptionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.151s elapsed time, 0.633s cpu time, 0.045s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "HOL-Library.FSet" via "HOL-Library.Countable")
Found termination order: "size_list size <*mlex*> {}"
instantiation
  vname :: linorder
  less_eq_vname == less_eq :: vname => vname => bool
  less_vname == less :: vname => vname => bool
### theory "HOL-Library.Nat_Bijection"
### 0.369s elapsed time, 1.483s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SubsumptionMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
instantiation
  trilean :: semiring
  times_trilean == times :: trilean => trilean => trilean
  plus_trilean == plus :: trilean => trilean => trilean
### theory "Extended_Finite_State_Machines.VName"
### 0.425s elapsed time, 1.709s cpu time, 0.118s GC time
Loading theory "HOL-Library.Option_ord" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp")
instantiation
  option :: (preorder) preorder
  less_eq_option == less_eq :: 'a option => 'a option => bool
  less_option == less :: 'a option => 'a option => bool
Found termination order: "{}"
instantiation
  option :: (order) order_bot
  bot_option == bot :: 'a option
instantiation
  option :: (order_top) order_top
  top_option == top :: 'a option
instantiation
  option :: (inf) inf
  inf_option == inf :: 'a option => 'a option => 'a option
instantiation
  option :: (sup) sup
  sup_option == sup :: 'a option => 'a option => 'a option
instantiation
  option :: (complete_lattice) complete_lattice
  Inf_option == Inf :: 'a option set => 'a option
  Sup_option == Sup :: 'a option set => 'a option
Found termination order: "{}"
instantiation
  trilean :: ord
  less_eq_trilean == less_eq :: trilean => trilean => bool
  less_trilean == less :: trilean => trilean => bool
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.473s elapsed time, 1.864s cpu time, 0.151s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp" via "FinFun.FinFun" via "HOL-Library.Cardinality")
instantiation
  trilean :: uminus
  uminus_trilean == uminus :: trilean => trilean
Found termination order: "{}"
### theory "Extended_Finite_State_Machines.Trilean"
### 0.766s elapsed time, 3.044s cpu time, 0.273s GC time
Loading theory "Extended_Finite_State_Machines.Value" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp" via "Extended_Finite_State_Machines.Value_Lexorder")
### theory "HOL-Library.Option_ord"
### 0.353s elapsed time, 1.384s cpu time, 0.155s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SubsumptionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
### theory "HOL-Library.Set_Algebras"
### 0.233s elapsed time, 0.930s cpu time, 0.069s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SubsumptionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "{}"
### theory "HOL-Library.Phantom_Type"
### 0.830s elapsed time, 3.099s cpu time, 0.740s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp" via "FinFun.FinFun")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### Additional type variable(s) in locale specification "CARD_1": 'a
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
Found termination order: "{}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Additional type variable(s) in locale specification "card2": 'a
### theory "HOL-Library.Stream"
### 1.384s elapsed time, 5.291s cpu time, 0.908s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "HOL-Library.FSet")
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
consts
  right :: "'a tree => 'a tree"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
### theory "Extended_Finite_State_Machines.Value"
### 1.149s elapsed time, 4.367s cpu time, 0.832s GC time
Loading theory "Extended_Finite_State_Machines.Value_Lexorder" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp")
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  value :: linorder
  less_eq_value == less_eq :: value => value => bool
  less_value == less :: value => value => bool
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
Found termination order: "{}"
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
### theory "Extended_Finite_State_Machines.Value_Lexorder"
### 0.118s elapsed time, 0.474s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SubsumptionMoreTemplates" via "Draft.ExtrEqs")
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.765s elapsed time, 3.021s cpu time, 0.250s GC time
Loading theory "FinFun.FinFun" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp")
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
bundle finfun
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
locale finfun_rec_wf_aux
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf_aux cnst upd"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale finfun_rec_wf
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf cnst upd"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.168s elapsed time, 4.430s cpu time, 1.168s GC time
\<Sqinter> (Sup ` ?A) = \<Squnion> (Inf ` {f ` ?A |f. ALL Y:?A. f Y : Y})
### theory "HOL-Library.Countable"
### 1.656s elapsed time, 6.195s cpu time, 1.387s GC time
Loading theory "HOL-Library.FSet" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM")
instantiation
  finfun :: ({card_UNIV,equal}, equal) equal
  equal_finfun == equal_class.equal ::
    'a \<Rightarrow>f 'b => 'a \<Rightarrow>f 'b => bool
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
instantiation
  finfun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_finfun == finite_UNIV :: ('a \<Rightarrow>f 'b, bool) phantom
instantiation
  finfun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_finfun == card_UNIV_class.card_UNIV ::
    ('a \<Rightarrow>f 'b, nat) phantom
bundle finfun_syntax
bundle no_finfun_syntax
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
### theory "HOL-Library.Tree"
### 2.648s elapsed time, 9.714s cpu time, 2.133s GC time
Loading theory "Draft.Templates" (required by "Draft.SubsumptionMoreTemplates" via "Draft.ExtrEqs")
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.106s elapsed time, 0.326s cpu time, 0.087s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SubsumptionMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.951s elapsed time, 2.960s cpu time, 1.083s GC time
### theory "FinFun.FinFun"
### 2.628s elapsed time, 8.633s cpu time, 2.459s GC time
Loading theory "Extended_Finite_State_Machines.AExp" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp")
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
Found termination order: "{}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.FSet"
### 2.727s elapsed time, 7.023s cpu time, 1.500s GC time
Loading theory "Extended_Finite_State_Machines.FSet_Utils" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM")
consts
  input2state_prim :: "value list => nat => nat \<Rightarrow>f value option"
consts
  repeat :: "nat => 'a => 'a list"
### theory "Extended_Finite_State_Machines.FSet_Utils"
### 0.297s elapsed time, 0.644s cpu time, 0.078s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Extended_Finite_State_Machines.AExp"
### 2.947s elapsed time, 5.121s cpu time, 0.564s GC time
Loading theory "Extended_Finite_State_Machines.GExp" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
consts
  padding :: "nat => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Extended_Finite_State_Machines.GExp"
### 2.514s elapsed time, 3.024s cpu time, 0.306s GC time
Loading theory "Extended_Finite_State_Machines.Transition" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM")
Proofs for inductive predicate(s) "eq_upto_rename"
  Proving monotonicity ...
### theory "Extended_Finite_State_Machines.Transition"
### 0.329s elapsed time, 0.344s cpu time, 0.000s GC time
Loading theory "Extended_Finite_State_Machines.EFSM" (required by "Draft.SubsumptionMoreTemplates" via "Draft.Subsumption")
Found termination order:
  "(%p. size_list (%p. size_list size (snd p)) (snd (snd (snd p)))) <*mlex*>
   {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "recognises_execution"
  Proving monotonicity ...
Found termination order:
  "(%p. size_list (%p. size_list size (snd p)) (snd (snd (snd p)))) <*mlex*>
   {}"
Proofs for inductive predicate(s) "accepts_trace"
  Proving monotonicity ...
Found termination order:
  "(%p. size_list (%p. size_list size (snd (snd p)))
         (snd (snd (snd p)))) <*mlex*>
   {}"
Proofs for inductive predicate(s) "trace_simulation"
  Proving monotonicity ...
Proofs for inductive predicate(s) "execution_simulation"
  Proving monotonicity ...
Proofs for inductive predicate(s) "executionally_equivalent"
  Proving monotonicity ...
Proofs for inductive predicate(s) "visits"
  Proving monotonicity ...
Proofs for inductive predicate(s) "obtains"
  Proving monotonicity ...
### theory "Extended_Finite_State_Machines.EFSM"
### 1.768s elapsed time, 1.997s cpu time, 0.262s GC time
Loading theory "Draft.Subsumption" (required by "Draft.SubsumptionMoreTemplates")
### theory "Draft.Subsumption"
### 0.108s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.SubsumptionMoreTemplates"
val templateLemmas =
   [("Subsumption.subsumes_reflexive", "subsumes ?t ?c ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 1)
         )),
    ("Subsumption.directly_subsumes_reflexive",
     "directly_subsumes ?e1.0 ?e2.0 ?s1.0 ?s2.0 ?t ?t",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0),
           template_var 0)
         )),
    ("Subsumption.subsumes_in_all_contexts_directly_subsumes",
     "(!!c. subsumes ?t2.0 c ?t1.0) ==>
      directly_subsumes ?e1.0 ?e2.0 ?s ?s' ?t2.0 ?t1.0",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0),
               template_var 5),
             template_var 4)
           ))),
    ("Subsumption.subsumes_transitive",
     "[| subsumes ?t1.0 ?c ?t2.0; subsumes ?t2.0 ?c ?t3.0 |]
      ==> subsumes ?t1.0 ?c ?t3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 0, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Subsumption.bad_guards",
     "EX i. can_take_transition ?t1.0 i ?r &
            ~ can_take_transition ?t2.0 i ?r ==>
      ~ subsumes ?t2.0 ?r ?t1.0",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1),
                 template_var 2)
               )
           ))),
    ("Subsumption.directly_subsumes_transitive",
     "[| directly_subsumes ?e1.0 ?e2.0 ?s1.0 ?s2.0 ?t1.0 ?t2.0;
         directly_subsumes ?e1.0 ?e2.0 ?s1.0 ?s2.0 ?t2.0 ?t3.0 |]
      ==> directly_subsumes ?e1.0 ?e2.0 ?s1.0 ?s2.0 ?t1.0 ?t3.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 6),
                      template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Subsumption.no_functionality_subsumed",
     "[| Label ?t1.0 = Label ?t2.0; Arity ?t1.0 = Arity ?t2.0;
         \<nexists>i. can_take_transition ?t1.0 i ?c |]
      ==> subsumes ?t2.0 ?c ?t1.0",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app (template_hole 4, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_negation
         (template_predicate (template_app (template_hole 2, t_empty)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Subsumption.bad_outputs",
     "EX i. can_take_transition ?t1.0 i ?r &
            evaluate_outputs ?t1.0 i ?r ~= evaluate_outputs ?t2.0 i ?r ==>
      ~ subsumes ?t2.0 ?r ?t1.0",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1),
                 template_var 2)
               )
           ))),
    ("Subsumption.no_choice_no_subsumption",
     "[| Label ?t = Label ?t'; Arity ?t = Arity ?t'; ~ choice ?t ?t';
         EX i. can_take_transition ?t' i ?c |]
      ==> ~ subsumes ?t ?c ?t'",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 2),
          template_app (template_hole 7, template_var 1)),
        template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)
                )
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 1)
               )
           ))),
    ("Subsumption.visits_and_not_subsumes",
     "EX c1 c2 t.
         obtains ?s1.0 c1 ?e1.0 0 <> t &
         obtains ?s2.0 c2 ?e2.0 0 <> t & ~ subsumes ?t1.0 c2 ?t2.0 ==>
      ~ directly_subsumes ?e1.0 ?e2.0 ?s1.0 ?s2.0 ?t1.0 ?t2.0",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 2),
                       template_var 5),
                     template_var 3),
                   template_var 1),
                 template_var 0)
               )
           ))),
    ("Subsumption.subsumes_updates",
     "[| subsumes ?t2.0 ?r ?t1.0; can_take_transition ?t1.0 ?i ?r;
         evaluate_updates ?t1.0 ?i ?r $ ?a = Some ?x |]
      ==> evaluate_updates ?t2.0 ?i ?r $ ?a = Some ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 3)),
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 4)),
                template_var 4)),
            template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 5)),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 4)),
               template_var 4)),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Subsumption.subsumes_update_equality",
     "subsumes ?t1.0 ?c ?t2.0 ==>
      ALL i.
         can_take_transition ?t2.0 i ?c -->
         (ALL r'.
             evaluate_updates ?t1.0 i ?c $ r' =
             evaluate_updates ?t2.0 i ?c $ r' |
             evaluate_updates ?t2.0 i ?c $ r' = None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Subsumption.direct_subsumption",
     "[| !!t c1 c2.
            [| obtains ?s1.0 c1 ?e1.0 0 <> t;
               obtains ?s2.0 c2 ?e2.0 0 <> t |]
            ==> ?f c2;
         !!c. ?f c ==> subsumes ?t1.0 c ?t2.0 |]
      ==> directly_subsumes ?e1.0 ?e2.0 ?s1.0 ?s2.0 ?t1.0 ?t2.0",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 3),
                   template_var 6),
                 template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("Subsumption.subsumes_possible_steps_replace",
     "[| (?s2', ?t2') |\<in>| possible_steps ?e2.0 ?s2.0 ?r2.0 ?l ?i;
         subsumes ?t2.0 ?r2.0 ?t1.0;
         ((?s2.0, ?s2'), ?t2') = ((?ss2.0, ?ss2'), ?t1.0) |]
      ==> (?s2', ?t2.0) |\<in>|
          possible_steps
           (replace ?e2.0 ((?ss2.0, ?ss2'), ?t1.0) ((?ss2.0, ?ss2'), ?t2.0))
           ?s2.0 ?r2.0 ?l ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 10),
                  template_var 9)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 5, template_var 8),
                      template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 6),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 7),
                template_var 10)),
            template_var 9),
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0)),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 10),
                 template_var 3)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_var 8),
                           template_app
                            (template_app
                              (template_hole 2,
                               template_app
                                (template_app
                                  (template_hole 1, template_var 1),
                                 template_var 0)),
                             template_var 2)),
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_hole 1, template_var 1),
                               template_var 0)),
                           template_var 3))),
                     template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4))
           ))),
    ("Subsumption.inconsistent_updates",
     "EX p2 p1.
         (EX i. posterior_separate (Arity ?t1.0) (Guards ?t1.0)
                 (Updates ?t2.0) i ?r =
                Some p2 &
                posterior_separate (Arity ?t1.0) (Guards ?t1.0)
                 (Updates ?t1.0) i ?r =
                Some p1) &
         (EX r' P.
             P (p2 $ r') & (EX y. p1 $ r' = Some y) & ~ P (p1 $ r')) ==>
      ~ subsumes ?t2.0 ?r ?t1.0",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)
               )
           ))),
    ("Subsumption.subsumption",
     "[| Label ?t1.0 = Label ?t2.0 & Arity ?t1.0 = Arity ?t2.0;
         ALL i.
            can_take_transition ?t1.0 i ?r -->
            can_take_transition ?t2.0 i ?r;
         ALL i.
            can_take_transition ?t1.0 i ?r -->
            evaluate_outputs ?t1.0 i ?r = evaluate_outputs ?t2.0 i ?r;
         ALL p1 p2 i.
            posterior_separate (Arity ?t1.0) (Guards ?t1.0) (Updates ?t2.0)
             i ?r =
            Some p2 -->
            posterior_separate (Arity ?t1.0) (Guards ?t1.0) (Updates ?t1.0)
             i ?r =
            Some p1 -->
            (ALL P r'. p1 $ r' = None | (P (p2 $ r') --> P (p1 $ r'))) |]
      ==> subsumes ?t2.0 ?r ?t1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app
                 (template_app
                   (template_hole 23,
                    template_app (template_hole 22, template_var 2)),
                  template_app (template_hole 22, template_var 1))),
              template_app
               (template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 2)),
                template_app (template_hole 20, template_var 1)))
            ),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           )))]:
   (string * thm * template) list
### theory "Draft.SubsumptionMoreTemplates"
### 0.516s elapsed time, 0.737s cpu time, 0.128s GC time
val it = (): unit
