Loading theory "Extended_Finite_State_Machines.Trilean" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp" via "Extended_Finite_State_Machines.Value_Lexorder" via "Extended_Finite_State_Machines.Value")
Loading theory "Extended_Finite_State_Machines.VName" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.List_Lexorder" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Extended_Finite_State_Machines.Transition_Lexorder" via "Extended_Finite_State_Machines.GExp_Lexorder")
instantiation
  list :: (ord) ord
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  list :: (linorder) distrib_lattice
  inf_list == inf :: 'a list => 'a list => 'a list
  sup_list == sup :: 'a list => 'a list => 'a list
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  list :: (order) order_bot
  bot_list == bot :: 'a list
### theory "HOL-Library.List_Lexorder"
### 0.099s elapsed time, 0.427s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.156s elapsed time, 0.636s cpu time, 0.043s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "HOL-Library.FSet" via "HOL-Library.Countable")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vname :: linorder
  less_eq_vname == less_eq :: vname => vname => bool
  less_vname == less :: vname => vname => bool
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "{}"
### theory "Extended_Finite_State_Machines.VName"
### 0.396s elapsed time, 1.589s cpu time, 0.114s GC time
Loading theory "HOL-Library.Option_ord" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp")
### theory "HOL-Library.Nat_Bijection"
### 0.319s elapsed time, 1.252s cpu time, 0.114s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.ExtrEqs")
instantiation
  option :: (preorder) preorder
  less_eq_option == less_eq :: 'a option => 'a option => bool
  less_option == less :: 'a option => 'a option => bool
instantiation
  trilean :: semiring
  times_trilean == times :: trilean => trilean => trilean
  plus_trilean == plus :: trilean => trilean => trilean
instantiation
  option :: (order) order_bot
  bot_option == bot :: 'a option
instantiation
  option :: (order_top) order_top
  top_option == top :: 'a option
instantiation
  option :: (inf) inf
  inf_option == inf :: 'a option => 'a option => 'a option
instantiation
  option :: (sup) sup
  sup_option == sup :: 'a option => 'a option => 'a option
instantiation
  option :: (complete_lattice) complete_lattice
  Inf_option == Inf :: 'a option set => 'a option
  Sup_option == Sup :: 'a option set => 'a option
Found termination order: "{}"
Found termination order: "{}"
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.498s elapsed time, 1.952s cpu time, 0.201s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp" via "FinFun.FinFun" via "HOL-Library.Cardinality")
instantiation
  trilean :: ord
  less_eq_trilean == less_eq :: trilean => trilean => bool
  less_trilean == less :: trilean => trilean => bool
instantiation
  trilean :: uminus
  uminus_trilean == uminus :: trilean => trilean
### theory "HOL-Library.Option_ord"
### 0.319s elapsed time, 1.255s cpu time, 0.130s GC time
Loading theory "HOL-Library.Product_Lexorder" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Extended_Finite_State_Machines.Transition_Lexorder")
Found termination order: "{}"
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
### theory "Extended_Finite_State_Machines.Trilean"
### 0.764s elapsed time, 3.037s cpu time, 0.244s GC time
Loading theory "Extended_Finite_State_Machines.Value" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp" via "Extended_Finite_State_Machines.Value_Lexorder")
instantiation
  prod :: (linorder, linorder) distrib_lattice
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
### theory "HOL-Library.Product_Lexorder"
### 0.097s elapsed time, 0.386s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "HOL-Library.Set_Algebras"
### 0.421s elapsed time, 1.448s cpu time, 0.586s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "{}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "{}"
### theory "HOL-Library.Phantom_Type"
### 0.831s elapsed time, 3.051s cpu time, 0.807s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp" via "FinFun.FinFun")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Additional type variable(s) in locale specification "CARD_1": 'a
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
### theory "HOL-Library.Stream"
### 1.180s elapsed time, 4.428s cpu time, 0.937s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "HOL-Library.FSet")
Found termination order: "{}"
Found termination order: "{}"
### theory "Extended_Finite_State_Machines.Value"
### 0.991s elapsed time, 3.684s cpu time, 0.925s GC time
Loading theory "Extended_Finite_State_Machines.Value_Lexorder" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp")
### Additional type variable(s) in locale specification "card2": 'a
instantiation
  value :: linorder
  less_eq_value == less_eq :: value => value => bool
  less_value == less :: value => value => bool
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
Found termination order: "{}"
### theory "Extended_Finite_State_Machines.Value_Lexorder"
### 0.146s elapsed time, 0.590s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.ExtrEqs")
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
### Additional type variable(s) in locale specification "countable": 'a
Found termination order: "size <*mlex*> {}"
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.822s elapsed time, 3.252s cpu time, 0.311s GC time
Loading theory "FinFun.FinFun" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
bundle finfun
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale finfun_rec_wf_aux
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf_aux cnst upd"
### theory "HOL-Library.BigO"
### 1.192s elapsed time, 4.522s cpu time, 1.226s GC time
\<Sqinter> (Sup ` ?A) = \<Squnion> (Inf ` {f ` ?A |f. ALL Y:?A. f Y : Y})
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale finfun_rec_wf
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf cnst upd"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.608s elapsed time, 6.105s cpu time, 1.427s GC time
Loading theory "HOL-Library.FSet" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
instantiation
  finfun :: ({card_UNIV,equal}, equal) equal
  equal_finfun == equal_class.equal ::
    'a \<Rightarrow>f 'b => 'a \<Rightarrow>f 'b => bool
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
Found termination order: "size <*mlex*> {}"
instantiation
  finfun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_finfun == finite_UNIV :: ('a \<Rightarrow>f 'b, bool) phantom
instantiation
  finfun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_finfun == card_UNIV_class.card_UNIV ::
    ('a \<Rightarrow>f 'b, nat) phantom
bundle finfun_syntax
bundle no_finfun_syntax
### theory "HOL-Library.Tree"
### 2.472s elapsed time, 9.046s cpu time, 1.779s GC time
Loading theory "Draft.Templates" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.175s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.938s elapsed time, 2.950s cpu time, 1.204s GC time
### theory "FinFun.FinFun"
### 2.465s elapsed time, 8.099s cpu time, 2.542s GC time
Loading theory "Extended_Finite_State_Machines.AExp" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp")
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
Found termination order: "{}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
### theory "HOL-Library.FSet"
### 2.856s elapsed time, 7.553s cpu time, 1.721s GC time
Loading theory "Extended_Finite_State_Machines.FSet_Utils" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  input2state_prim :: "value list => nat => nat \<Rightarrow>f value option"
consts
  repeat :: "nat => 'a => 'a list"
### theory "Extended_Finite_State_Machines.FSet_Utils"
### 0.241s elapsed time, 0.519s cpu time, 0.076s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Extended_Finite_State_Machines.AExp"
### 2.711s elapsed time, 4.786s cpu time, 0.572s GC time
Loading theory "Extended_Finite_State_Machines.AExp_Lexorder" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Extended_Finite_State_Machines.Transition_Lexorder" via "Extended_Finite_State_Machines.GExp_Lexorder")
Loading theory "Extended_Finite_State_Machines.GExp" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition")
Found termination order: "size <*mlex*> {}"
instantiation
  aexp :: (linorder) linorder
  less_eq_aexp == less_eq :: 'a aexp => 'a aexp => bool
  less_aexp == less :: 'a aexp => 'a aexp => bool
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Extended_Finite_State_Machines.AExp_Lexorder"
### 0.786s elapsed time, 1.790s cpu time, 0.173s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
consts
  padding :: "nat => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Extended_Finite_State_Machines.GExp"
### 2.517s elapsed time, 4.048s cpu time, 0.441s GC time
Loading theory "Extended_Finite_State_Machines.GExp_Lexorder" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Extended_Finite_State_Machines.Transition_Lexorder")
Loading theory "Extended_Finite_State_Machines.Transition" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "eq_upto_rename"
instantiation
  gexp :: (linorder) linorder
  less_eq_gexp == less_eq :: 'a gexp => 'a gexp => bool
  less_gexp == less :: 'a gexp => 'a gexp => bool
  Proving monotonicity ...
### theory "Extended_Finite_State_Machines.Transition"
### 0.337s elapsed time, 0.706s cpu time, 0.000s GC time
Loading theory "Extended_Finite_State_Machines.EFSM" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference" via "Draft.Subsumption")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Extended_Finite_State_Machines.GExp_Lexorder"
### 1.055s elapsed time, 2.383s cpu time, 0.182s GC time
Loading theory "Extended_Finite_State_Machines.Transition_Lexorder" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference")
Found termination order:
  "(%p. size_list (%p. size_list size (snd p)) (snd (snd (snd p)))) <*mlex*>
   {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "recognises_execution"
  Proving monotonicity ...
instantiation
  transition_ext :: (linorder) linorder
  less_eq_transition_ext == less_eq ::
    'a transition_scheme => 'a transition_scheme => bool
  less_transition_ext == less ::
    'a transition_scheme => 'a transition_scheme => bool
### theory "Extended_Finite_State_Machines.Transition_Lexorder"
### 0.325s elapsed time, 0.701s cpu time, 0.085s GC time
Found termination order:
  "(%p. size_list (%p. size_list size (snd p)) (snd (snd (snd p)))) <*mlex*>
   {}"
Proofs for inductive predicate(s) "accepts_trace"
  Proving monotonicity ...
Found termination order:
  "(%p. size_list (%p. size_list size (snd (snd p)))
         (snd (snd (snd p)))) <*mlex*>
   {}"
Proofs for inductive predicate(s) "trace_simulation"
  Proving monotonicity ...
Proofs for inductive predicate(s) "execution_simulation"
  Proving monotonicity ...
Proofs for inductive predicate(s) "executionally_equivalent"
  Proving monotonicity ...
Proofs for inductive predicate(s) "visits"
  Proving monotonicity ...
Proofs for inductive predicate(s) "obtains"
  Proving monotonicity ...
### theory "Extended_Finite_State_Machines.EFSM"
### 1.706s elapsed time, 3.065s cpu time, 0.249s GC time
Loading theory "Draft.Subsumption" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse" via "Draft.Inference")
### theory "Draft.Subsumption"
### 0.106s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.Inference" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption" via "Draft.Store_Reuse")
consts
  make_guard :: "value list => nat => vname gexp list"
consts
  make_outputs :: "value list => vname aexp list"
Found termination order:
  "(%p. size_list (%p. size_list size (snd (snd p)))
         (snd (snd (snd p)))) <*mlex*>
   {}"
consts
  make_pta_aux ::
    "(String.literal * value list * value list) list list
     => (nat list * (nat * nat) * transition) fset
        => (nat list * (nat * nat) * transition) fset"
consts
  try_heuristics_check ::
    "(((nat * nat) * transition) fset => bool)
     => (nat list
         => nat list
            => nat
               => (nat list * (nat * nat) * transition) fset
                  => (nat list * (nat * nat) * transition) fset
                     => (nat list * (nat * nat) * transition) fset
                        => (((nat * nat) * transition) fset => bool)
                           => (nat list *
                               (nat * nat) * transition) fset option) list
        => nat list
           => nat list
              => nat
                 => (nat list * (nat * nat) * transition) fset
                    => (nat list * (nat * nat) * transition) fset
                       => (nat list * (nat * nat) * transition) fset
                          => (((nat * nat) * transition) fset => bool)
                             => (nat list *
                                 (nat * nat) * transition) fset option"
instantiation
  score_ext :: (linorder) linorder
  less_eq_score_ext == less_eq :: 'a score_scheme => 'a score_scheme => bool
  less_score_ext == less :: 'a score_scheme => 'a score_scheme => bool
consts
  paths_of_length ::
    "nat
     => (nat list * (nat * nat) * transition) fset
        => nat => nat list list fset"
Found termination order:
  "(%p. size_list (%p. size_list size (snd p)) (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list (%p. size_list size (snd (snd p))) (fst p)) <*mlex*> {}"
### theory "Draft.Inference"
### 2.860s elapsed time, 3.261s cpu time, 0.528s GC time
Loading theory "Draft.Store_Reuse" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates" via "Draft.Store_Reuse_Subsumption")
instantiation
  ioTag :: linorder
  less_eq_ioTag == less_eq :: ioTag => ioTag => bool
  less_ioTag == less :: ioTag => ioTag => bool
Found termination order: "{}"
Found termination order: "{}"
consts
  index :: "value list => nat => ioTag => nat => (nat * ioTag * nat) fset"
consts
  walk_up_to ::
    "nat
     => (nat list * (nat * nat) * transition) fset
        => nat
           => nat \<Rightarrow>f value option
              => (String.literal * value list * value list) list
                 => transition * nat list"
consts
  count :: "'a => 'a list => nat"
consts
  generalise_transitions ::
    "((((transition * nat list) * ioTag * nat) *
       (transition * nat list) * ioTag * nat) *
      ((transition * nat list) * ioTag * nat) *
      (transition * nat list) * ioTag * nat) list
     => (nat list * (nat * nat) * transition) fset
        => (nat list * (nat * nat) * transition) fset"
Found termination order:
  "(%p. size_list (%p. size (snd (snd (snd p)))) (snd p)) <*mlex*> {}"
### theory "Draft.Store_Reuse"
### 0.829s elapsed time, 0.913s cpu time, 0.106s GC time
Loading theory "Draft.Store_Reuse_Subsumption" (required by "Draft.Store_Reuse_SubsumptionMoreTemplates")
consts
  stored_reused_aux_per_reg ::
    "transition => transition => nat => nat => (nat * nat) option"
consts
  stored_reused_aux ::
    "transition => transition => nat => nat => (nat * nat) option"
consts
  input_i_stored_in_reg ::
    "transition => transition => nat => nat => (nat * nat) option"
consts
  input_stored_in_reg_aux ::
    "transition => transition => nat => nat => (nat * nat) option"
### theory "Draft.Store_Reuse_Subsumption"
### 0.245s elapsed time, 0.245s cpu time, 0.000s GC time
Loading theory "Draft.Store_Reuse_SubsumptionMoreTemplates"
val templateLemmas =
   [("Store_Reuse_Subsumption.is_generalisation_of_i_lt_arity",
     "is_generalisation_of ?t' ?t ?i ?r ==> ?i < Arity ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than, template_var 1,
         template_app (template_hole 0, template_var 2)))),
    ("Store_Reuse_Subsumption.generalise_output_posterior",
     "posterior (generalise_output ?t ?p ?r) ?i ?ra = posterior ?t ?i ?ra",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 4), template_var 1),
         template_var 0))),
    ("Store_Reuse_Subsumption.is_generalisation_of_same_arity",
     "is_generalisation_of ?t' ?t ?i ?r ==> Arity ?t = Arity ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 2),
         template_app (template_hole 0, template_var 3)))),
    ("Store_Reuse_Subsumption.is_generalisation_of_guard_subset",
     "is_generalisation_of ?t' ?t ?i ?r ==>
      set (Guards ?t') <= set (Guards ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 3)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 2))))),
    ("Store_Reuse_Subsumption.one_extra_update_direct_subsumption",
     "one_extra_update ?t1.0 ?t2.0 ?s2.0 ?e2.0 ==>
      directly_subsumes ?e1.0 ?e2.0 ?s1.0 ?s2.0 ?t1.0 ?t2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 2),
                   template_var 0),
                 template_var 3),
               template_var 5),
             template_var 4)
           ))),
    ("Store_Reuse_Subsumption.stored_reused_is_generalised_output_of",
     "stored_reused ?t' ?t = Some (?p, ?r) ==>
      is_generalised_output_of ?t' ?t ?p ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 2),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Store_Reuse_Subsumption.not_updated",
     "not_updated ?r ?t2.0 ==>
      apply_updates (Updates ?t2.0) ?s ?s' $ ?r = ?s' $ ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 3)))),
    ("Store_Reuse_Subsumption.is_generalisation_of_medial",
     "is_generalisation_of ?t' ?t ?i ?r ==>
      can_take_transition ?t ?ip ?rg --> can_take_transition ?t' ?ip ?rg",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 1),
               template_var 0))
           ))),
    ("Store_Reuse_Subsumption.drop_guard_add_update_direct_subsumption_implies_direct_subsumption",
     "drop_guard_add_update_direct_subsumption ?t' ?t ?e ?s' ==>
      directly_subsumes (tm ?e1.0) (tm ?e) ?s ?s' ?t' ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 1)),
                     template_app (template_hole 0, template_var 3)),
                   template_var 0),
                 template_var 2),
               template_var 5),
             template_var 4)
           ))),
    ("Store_Reuse_Subsumption.input_stored_in_reg_is_generalisation",
     "input_stored_in_reg ?t' ?t ?e = Some (?i, ?r) ==>
      is_generalisation_of ?t' ?t ?i ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 3),
               template_var 1),
             template_var 0)
           ))),
    ("Store_Reuse_Subsumption.lists_neq_if",
     "EX i. ?l ! i ~= ?l' ! i ==> ?l ~= ?l'",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("Store_Reuse_Subsumption.apply_updates_foldr",
     "apply_updates ?u ?old =
      foldr (%h r. r(fst h $:= aval (snd h) ?old)) (rev ?u)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app (template_hole 0, template_var 1)))),
    ("Store_Reuse_Subsumption.diff_outputs_direct_subsumption",
     "diff_outputs_ctx ?e1.0 ?e2.0 ?s1.0 ?s2.0 ?t1.0 ?t2.0 ==>
      ~ directly_subsumes ?e1.0 ?e2.0 ?s1.0 ?s2.0 ?t1.0 ?t2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 5),
                         template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)
               )
           ))),
    ("Store_Reuse_Subsumption.input_stored_in_reg_aux_is_generalisation_aux",
     "input_stored_in_reg_aux ?t' ?t ?mr ?mi = Some (?i, ?r) ==>
      is_generalisation_of ?t' ?t ?i ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("Store_Reuse_Subsumption.stored_reused_aux_is_generalised_output_of",
     "stored_reused_aux ?t' ?t ?mr ?mp = Some (?p, ?r) ==>
      is_generalised_output_of ?t' ?t ?p ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_var 4),
               template_var 1),
             template_var 0)
           ))),
    ("Store_Reuse_Subsumption.is_generalisation_of_apply_guards",
     "[| is_generalisation_of ?t' ?t ?i ?r; apply_guards (Guards ?t) ?j |]
      ==> apply_guards (Guards ?t') ?j",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 3)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 4)),
             template_var 0)
           ))),
    ("Store_Reuse_Subsumption.is_generalisation_of_derestricts_input",
     "is_generalisation_of ?t' ?t ?i ?r ==>
      ALL g:set (Guards ?t'). ~ gexp_constrains g (V (I ?i))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 3))),
             t_empty)
           ))),
    ("Store_Reuse_Subsumption.generalise_output_directly_subsumes_original_executable",
     "generalise_output_direct_subsumption ?t' ?t ?e ?e' ?s ?s' ==>
      directly_subsumes (tm ?e) (tm ?e') ?s ?s' ?t' ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 5),
                      template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 3)),
                     template_app (template_hole 0, template_var 2)),
                   template_var 1),
                 template_var 0),
               template_var 5),
             template_var 4)
           ))),
    ("Store_Reuse_Subsumption.is_generalisation_of_subsumes_original",
     "[| is_generalisation_of ?t' ?t ?i ?r; ?c $ ?r = None |]
      ==> subsumes ?t' ?c ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 0), template_var 1),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0),
             template_var 3)
           ))),
    ("Store_Reuse_Subsumption.is_generalisation_of_constrains_input",
     "is_generalisation_of ?t' ?t ?i ?r ==>
      EX v. Eq (V (I ?i)) (L v) : set (Guards ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Store_Reuse_Subsumption.is_generalisation_of_preserves_reg",
     "is_generalisation_of ?t' ?t ?i ?r ==>
      evaluate_updates ?t ?ia ?c $ ?r = ?c $ ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 4)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_var 2)))),
    ("Store_Reuse_Subsumption.input_stored_in_reg_updates_reg",
     "input_stored_in_reg ?t2.0 ?t1.0 ?a = Some (?i, ?r) ==>
      (?r, V (I ?i)) : set (Updates ?t2.0)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 4)))
           ))),
    ("Store_Reuse_Subsumption.input_not_constrained_aval_swap_inputs",
     "~ aexp_constrains ?a (V (I ?v)) ==>
      aval ?a (join_ir ?i ?c) = aval ?a (join_ir (?i[?v := ?x]) ?c)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 3)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 0)),
             template_var 1))))),
    ("Store_Reuse_Subsumption.input_not_constrained_gval_swap_inputs",
     "~ gexp_constrains ?a (V (I ?v)) ==>
      gval ?a (join_ir ?i ?c) = gval ?a (join_ir (?i[?v := ?x]) ?c)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 3)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 0)),
             template_var 1))))),
    ("Store_Reuse_Subsumption.generalisation_of_preserves",
     "is_generalisation_of ?t' ?t ?i ?r ==>
      Label ?t = Label ?t' &
      Arity ?t = Arity ?t' & Outputs ?t = Outputs ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 2)),
                 template_app (template_hole 4, template_var 3))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_var 2)),
                   template_app (template_hole 2, template_var 3))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_app (template_hole 0, template_var 3))))
           ))),
    ("Store_Reuse_Subsumption.no_return_to_zero",
     "ALL ((from, to), t):?e. 0 < to ==>
      ALL r n. ~ visits 0 ?e (Suc n) r ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_hole 8, template_app (template_hole 7, t_empty)))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Store_Reuse_Subsumption.generalise_output_subsumes_original",
     "[| Outputs ?t ! ?r = L ?v; ?c $ ?p = Some ?v |]
      ==> subsumes (generalise_output ?t ?p ?r) ?c ?t",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 4)),
            template_var 3),
          template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 0),
                   template_var 3)),
               template_var 1),
             template_var 4)
           ))),
    ("Store_Reuse_Subsumption.input_stored_in_reg_not_subsumed",
     "[| input_stored_in_reg ?t' ?t ?e = Some (?i, ?r);
         EX ia. can_take_transition ?t' ia ?c |]
      ==> ~ subsumes ?t ?c ?t'",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 5),
              template_var 4),
            template_var 3),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1))),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0),
                 template_var 5)
               )
           ))),
    ("Store_Reuse_Subsumption.can_take_append_subset",
     "set (Guards ?t') < set (Guards ?t) ==>
      can_take ?a (Guards ?t @ Guards ?t') ?ia ?c =
      can_take ?a (Guards ?t) ?ia ?c",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_var 4)),
          template_app
           (template_hole 5,
            template_app (template_hole 3, template_var 3)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 4, template_var 4))),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 3, template_var 3)),
             template_var 1),
           template_var 0)))),
    ("Store_Reuse_Subsumption.no_return_to_zero_must_be_empty",
     "[| ALL ((from, to), t):?e. to ~= 0; obtains 0 ?a ?e ?s ?r ?t |]
      ==> ?t = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app
               (template_hole 7, template_app (template_hole 6, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_hole 3),
                      template_var 3),
                    template_var 4),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("Store_Reuse_Subsumption.must_be_an_update",
     "[| ?U1.0 ~= []; fst (hd ?U1.0) = ?r & tl ?U1.0 = ?U2.0 |]
      ==> EX u. ?U1.0 = (?r, u) # ?U2.0",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 2))),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 3, template_var 2)),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Store_Reuse_Subsumption.no_incoming_to_zero",
     "[| ALL ((from, to), t):?e. 0 < to;
         (?aaa, ?ba) |\<in>| possible_steps ?e ?s ?d ?l ?i |]
      ==> ?aaa ~= 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 6),
              template_app
               (template_hole 8, template_app (template_hole 7, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 6),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_negation
        (template_equation (template_var 5, template_hole 5)))),
    ("Store_Reuse_Subsumption.is_generalised_output_of_subsumes",
     "[| is_generalised_output_of ?t' ?t ?r ?p; Outputs ?t ! ?p = L ?v;
         ?c $ ?r = Some ?v |]
      ==> subsumes ?t' ?c ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 4)),
            template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 0), template_var 3),
          template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 0),
             template_var 4)
           ))),
    ("Store_Reuse_Subsumption.aval_updated",
     "[| (?r, ?u) : set ?U; ?r ~: set (map fst (removeAll (?r, ?u) ?U)) |]
      ==> apply_updates ?U ?s ?c $ ?r = aval ?u ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 4),
                  template_var 3)),
              template_app (template_hole 10, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_hole 5),
                      template_app
                       (template_app
                         (template_hole 4,
                          template_app
                           (template_app (template_hole 11, template_var 4),
                            template_var 3)),
                        template_var 2))))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0)),
           template_var 4),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("Store_Reuse_Subsumption.no_accepting_return_to_zero",
     "[| ALL ((from, to), t):?e. to ~= 0; recognises ?e (?a # ?t) |]
      ==> ~ visits 0 ?e 0 <> (?a # ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_hole 8, template_app (template_hole 7, t_empty)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 4),
                template_hole 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_hole 4),
                       template_var 2),
                     template_hole 4),
                   template_hole 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))
               )
           ))),
    ("Store_Reuse_Subsumption.is_generalisation_of_preserves_reg_2",
     "[| is_generalisation_of ?t' ?t ?i ?r; ?ra ~= ?r |]
      ==> evaluate_updates ?t ?ia ?c $ ?ra =
          evaluate_updates ?t' ?ia ?c $ ?ra",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_negation
         (template_equation (template_var 2, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 5)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 6)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_var 0)),
           template_var 2)))),
    ("Store_Reuse_Subsumption.generalised_directly_subsumes_original",
     "[| input_stored_in_reg ?t' ?t ?e = Some (?i, ?r);
         initially_undefined_context_check (tm ?e) ?r ?s';
         no_illegal_updates ?t ?r |]
      ==> directly_subsumes (tm ?e1.0) (tm ?e) ?s ?s' ?t' ?t",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_var 7),
              template_var 6),
            template_var 5),
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 5)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 6),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 0,
                       template_app (template_hole 2, template_var 1)),
                     template_app (template_hole 2, template_var 5)),
                   template_var 0),
                 template_var 2),
               template_var 7),
             template_var 6)
           ))),
    ("Store_Reuse_Subsumption.generalise_output_eq",
     "[| Outputs ?t ! ?r = L ?v; ?c $ ?p = Some ?v |]
      ==> evaluate_outputs ?t ?i ?c =
          apply_outputs ((Outputs ?t)[?r := V (R ?p)]) (join_ir ?i ?c)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 5)),
            template_var 4),
          template_app (template_hole 9, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_app (template_hole 6, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 10, template_var 5)),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 10, template_var 5)),
                 template_var 4),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 2))))),
    ("Store_Reuse_Subsumption.generalise_output_context_check_directly_subsumes_original",
     "[| stored_reused ?t' ?t = Some (?r, ?p); Outputs ?t ! ?p = L ?v;
         generalise_output_context_check ?v ?r ?s ?s' ?e1.0 ?e2.0 |]
      ==> directly_subsumes (tm ?e1.0) (tm ?e2.0) ?s ?s' ?t' ?t",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 8), template_var 7),
          template_app
           (template_hole 8,
            template_app
             (template_app (template_hole 7, template_var 6),
              template_var 5))),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 7)),
            template_var 5),
          template_app (template_hole 3, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 6),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 1)),
                     template_app (template_hole 0, template_var 0)),
                   template_var 3),
                 template_var 2),
               template_var 8),
             template_var 7)
           ))),
    ("Store_Reuse_Subsumption.aval_unconstrained",
     "[| ~ aexp_constrains ?a (V (I ?i)); ?i < length ?ia; ?v = ?ia ! ?i;
         ?v' ~= ?v |]
      ==> aval ?a (join_ir ?ia ?c) = aval ?a (join_ir (?ia[?i := ?v']) ?c)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 5),
                  template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 4)))
                )
            ),
        template_inequation
         (less_than, template_var 4,
          template_app (template_hole 6, template_var 3)),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 4)),
        template_negation
         (template_equation (template_var 1, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 5),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 5),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 4),
                 template_var 1)),
             template_var 0))))),
    ("Store_Reuse_Subsumption.is_generalised_output_of_does_not_subsume",
     "[| is_generalised_output_of ?t' ?t ?r ?p; ?p < length (Outputs ?t);
         Outputs ?t ! ?p = L ?v; ?c $ ?r ~= Some ?v;
         EX i. can_take_transition ?t i ?c |]
      ==> ~ subsumes ?t' ?c ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 13, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_hole 11,
            template_app (template_hole 10, template_var 4))),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 10, template_var 4)),
            template_var 2),
          template_app (template_hole 7, template_var 1)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_var 3),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 0),
                 template_var 4)
               )
           ))),
    ("Store_Reuse_Subsumption.generalise_output_directly_subsumes_original",
     "[| stored_reused ?t' ?t = Some (?r, ?p); Outputs ?t ! ?p = L ?v;
         ALL c1 c2 t.
            obtains ?s c1 ?e1.0 0 <> t & obtains ?s' c2 ?e2.0 0 <> t -->
            c2 $ ?r = Some ?v |]
      ==> directly_subsumes ?e1.0 ?e2.0 ?s ?s' ?t' ?t",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 17, template_var 8),
            template_var 7),
          template_app
           (template_hole 16,
            template_app
             (template_app (template_hole 15, template_var 6),
              template_var 5))),
        template_equation
         (template_app
           (template_app
             (template_hole 13,
              template_app (template_hole 12, template_var 7)),
            template_var 5),
          template_app (template_hole 11, template_var 4)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0),
                   template_var 3),
                 template_var 1),
               template_var 8),
             template_var 7)
           ))),
    ("Store_Reuse_Subsumption.one_extra_update_subsumes",
     "[| Label ?t1.0 = Label ?t2.0; Arity ?t1.0 = Arity ?t2.0;
         set (Guards ?t1.0) <= set (Guards ?t2.0);
         Outputs ?t1.0 = Outputs ?t2.0;
         Updates ?t1.0 = (?r, ?u) # Updates ?t2.0; not_updated ?r ?t2.0;
         ?c $ ?r = None |]
      ==> subsumes ?t1.0 ?c ?t2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 16, template_var 4),
          template_app (template_hole 16, template_var 3)),
        template_equation
         (template_app (template_hole 14, template_var 4),
          template_app (template_hole 14, template_var 3)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 12,
            template_app (template_hole 11, template_var 4)),
          template_app
           (template_hole 12,
            template_app (template_hole 11, template_var 3))),
        template_equation
         (template_app (template_hole 9, template_var 4),
          template_app (template_hole 9, template_var 3)),
        template_equation
         (template_app (template_hole 7, template_var 4),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1)),
            template_app (template_hole 7, template_var 3))),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 0), template_var 2),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0),
             template_var 3)
           ))),
    ("Store_Reuse_Subsumption.one_extra_update_directly_subsumes",
     "[| Label ?t1.0 = Label ?t2.0; Arity ?t1.0 = Arity ?t2.0;
         set (Guards ?t1.0) <= set (Guards ?t2.0);
         Outputs ?t1.0 = Outputs ?t2.0;
         Updates ?t1.0 = (?r, ?u) # Updates ?t2.0; not_updated ?r ?t2.0;
         initially_undefined_context_check ?e2.0 ?r ?s2.0 |]
      ==> directly_subsumes ?e1.0 ?e2.0 ?s1.0 ?s2.0 ?t1.0 ?t2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 7),
          template_app (template_hole 14, template_var 6)),
        template_equation
         (template_app (template_hole 12, template_var 7),
          template_app (template_hole 12, template_var 6)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_var 7)),
          template_app
           (template_hole 10,
            template_app (template_hole 9, template_var 6))),
        template_equation
         (template_app (template_hole 7, template_var 7),
          template_app (template_hole 7, template_var 6)),
        template_equation
         (template_app (template_hole 5, template_var 7),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4)),
            template_app (template_hole 5, template_var 6))),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 5),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 5),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3),
                   template_var 0),
                 template_var 2),
               template_var 7),
             template_var 6)
           ))),
    ("Store_Reuse_Subsumption.original_does_not_subsume_generalised_output",
     "[| stored_reused ?t' ?t = Some (?p, ?r); ?r < length (Outputs ?t);
         Outputs ?t ! ?r = L ?v;
         EX a c1 tt.
            obtains ?s c1 ?e1.0 0 <> tt &
            obtains ?s' a ?e 0 <> tt &
            a $ ?p ~= Some ?v & (EX i. can_take_transition ?t i a) |]
      ==> ~ directly_subsumes ?e1.0 ?e ?s ?s' ?t' ?t",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 21, template_var 8),
            template_var 7),
          template_app
           (template_hole 20,
            template_app
             (template_app (template_hole 19, template_var 6),
              template_var 5))),
        template_inequation
         (less_than, template_var 5,
          template_app
           (template_hole 17,
            template_app (template_hole 16, template_var 7))),
        template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 16, template_var 7)),
            template_var 5),
          template_app (template_hole 13, template_var 4)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 0),
                       template_var 3),
                     template_var 1),
                   template_var 8),
                 template_var 7)
               )
           ))),
    ("Store_Reuse_Subsumption.general_not_subsume_orig",
     "[| Arity ?t' = Arity ?t; set (Guards ?t') < set (Guards ?t);
         (?r, V (I ?i)) : set (Updates ?t');
         ?r ~: set (map fst (removeAll (?r, V (I ?i)) (Updates ?t')));
         ?r ~: set (map fst (Updates ?t));
         EX i. can_take_transition ?t i ?c; ?c $ ?r = None; ?i < Arity ?t |]
      ==> ~ subsumes ?t ?c ?t'",
     template_implication
      ([template_equation
         (template_app (template_hole 22, template_var 4),
          template_app (template_hole 22, template_var 3)),
        template_inequation
         (less_than,
          template_app
           (template_hole 20,
            template_app (template_hole 19, template_var 4)),
          template_app
           (template_hole 20,
            template_app (template_hole 19, template_var 3))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 2),
                  template_app
                   (template_hole 16,
                    template_app (template_hole 15, template_var 1)))),
              template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 4)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_hole 8),
                      template_app
                       (template_app
                         (template_hole 7,
                          template_app
                           (template_app (template_hole 17, template_var 2),
                            template_app
                             (template_hole 16,
                              template_app
                               (template_hole 15, template_var 1)))),
                        template_app (template_hole 13, template_var 4)))))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_hole 8),
                      template_app (template_hole 13, template_var 3))))
                )
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0), template_var 2),
          template_hole 2),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 22, template_var 3))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0),
                 template_var 4)
               )
           )))]:
   (string * thm * template) list
### theory "Draft.Store_Reuse_SubsumptionMoreTemplates"
### 0.552s elapsed time, 0.770s cpu time, 0.146s GC time
val it = (): unit
