Loading theory "Extended_Finite_State_Machines.Trilean" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp" via "Extended_Finite_State_Machines.Value_Lexorder" via "Extended_Finite_State_Machines.Value")
Loading theory "Extended_Finite_State_Machines.VName" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp")
Loading theory "HOL-Library.List_Lexorder" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Extended_Finite_State_Machines.Transition_Lexorder" via "Extended_Finite_State_Machines.GExp_Lexorder")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  list :: (ord) ord
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  list :: (linorder) distrib_lattice
  inf_list == inf :: 'a list => 'a list => 'a list
  sup_list == sup :: 'a list => 'a list => 'a list
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  list :: (order) order_bot
  bot_list == bot :: 'a list
### theory "HOL-Library.List_Lexorder"
### 0.118s elapsed time, 0.487s cpu time, 0.045s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.528s cpu time, 0.045s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "HOL-Library.FSet" via "HOL-Library.Countable")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
instantiation
  vname :: linorder
  less_eq_vname == less_eq :: vname => vname => bool
  less_vname == less :: vname => vname => bool
instantiation
  trilean :: semiring
  times_trilean == times :: trilean => trilean => trilean
  plus_trilean == plus :: trilean => trilean => trilean
Found termination order: "{}"
### theory "Extended_Finite_State_Machines.VName"
### 0.408s elapsed time, 1.632s cpu time, 0.121s GC time
Loading theory "HOL-Library.Option_ord" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp")
### theory "HOL-Library.Nat_Bijection"
### 0.298s elapsed time, 1.183s cpu time, 0.076s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
instantiation
  option :: (preorder) preorder
  less_eq_option == less_eq :: 'a option => 'a option => bool
  less_option == less :: 'a option => 'a option => bool
instantiation
  option :: (order) order_bot
  bot_option == bot :: 'a option
instantiation
  option :: (order_top) order_top
  top_option == top :: 'a option
instantiation
  option :: (inf) inf
  inf_option == inf :: 'a option => 'a option => 'a option
instantiation
  option :: (sup) sup
  sup_option == sup :: 'a option => 'a option => 'a option
Found termination order: "{}"
instantiation
  option :: (complete_lattice) complete_lattice
  Inf_option == Inf :: 'a option set => 'a option
  Sup_option == Sup :: 'a option set => 'a option
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.421s elapsed time, 1.666s cpu time, 0.160s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp" via "FinFun.FinFun" via "HOL-Library.Cardinality")
instantiation
  trilean :: ord
  less_eq_trilean == less_eq :: trilean => trilean => bool
  less_trilean == less :: trilean => trilean => bool
instantiation
  trilean :: uminus
  uminus_trilean == uminus :: trilean => trilean
Found termination order: "{}"
### theory "Extended_Finite_State_Machines.Trilean"
### 0.687s elapsed time, 2.719s cpu time, 0.299s GC time
Loading theory "Extended_Finite_State_Machines.Value" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp" via "Extended_Finite_State_Machines.Value_Lexorder")
### theory "HOL-Library.Option_ord"
### 0.338s elapsed time, 1.328s cpu time, 0.178s GC time
Loading theory "HOL-Library.Product_Lexorder" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Extended_Finite_State_Machines.Transition_Lexorder")
instantiation
  prod :: (ord, ord) ord
  less_eq_prod == less_eq :: 'a * 'b => 'a * 'b => bool
  less_prod == less :: 'a * 'b => 'a * 'b => bool
instantiation
  prod :: (linorder, linorder) distrib_lattice
  inf_prod == inf :: 'a * 'b => 'a * 'b => 'a * 'b
  sup_prod == sup :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (bot, bot) bot
  bot_prod == bot :: 'a * 'b
instantiation
  prod :: (top, top) top
  top_prod == top :: 'a * 'b
### theory "HOL-Library.Product_Lexorder"
### 0.118s elapsed time, 0.467s cpu time, 0.081s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "{}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "HOL-Library.Set_Algebras"
### 0.441s elapsed time, 1.504s cpu time, 0.640s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "{}"
### theory "HOL-Library.Phantom_Type"
### 0.833s elapsed time, 3.051s cpu time, 0.816s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp" via "FinFun.FinFun")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### Additional type variable(s) in locale specification "CARD_1": 'a
consts
  flat :: "'a list stream => 'a stream"
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "{}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "{}"
### theory "HOL-Library.Stream"
### 1.201s elapsed time, 4.495s cpu time, 0.989s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "HOL-Library.FSet")
### theory "Extended_Finite_State_Machines.Value"
### 0.940s elapsed time, 3.481s cpu time, 0.811s GC time
Loading theory "Extended_Finite_State_Machines.Value_Lexorder" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp")
instantiation
  value :: linorder
  less_eq_value == less_eq :: value => value => bool
  less_value == less :: value => value => bool
### Additional type variable(s) in locale specification "card2": 'a
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
Found termination order: "{}"
### theory "Extended_Finite_State_Machines.Value_Lexorder"
### 0.136s elapsed time, 0.535s cpu time, 0.093s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.ExtrEqs")
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
consts
  left :: "'a tree => 'a tree"
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
consts
  right :: "'a tree => 'a tree"
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
### Additional type variable(s) in locale specification "countable": 'a
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.859s elapsed time, 3.395s cpu time, 0.265s GC time
Loading theory "FinFun.FinFun" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp" via "Extended_Finite_State_Machines.AExp")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
bundle finfun
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
Found termination order: "size <*mlex*> {}"
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.070s elapsed time, 4.225s cpu time, 0.406s GC time
\<Sqinter> (Sup ` ?A) = \<Squnion> (Inf ` {f ` ?A |f. ALL Y:?A. f Y : Y})
locale finfun_rec_wf_aux
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf_aux cnst upd"
Found termination order: "size <*mlex*> {}"
locale finfun_rec_wf
  fixes cnst :: "'b => 'c"
    and upd :: "'a => 'b => 'c => 'c"
  assumes "finfun_rec_wf cnst upd"
### theory "HOL-Library.Countable"
### 1.416s elapsed time, 5.441s cpu time, 0.586s GC time
Loading theory "HOL-Library.FSet" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  fset :: (finite) finite
instantiation
  fset :: (type) {minus,bounded_lattice_bot,distrib_lattice}
  inf_fset == inf :: 'a fset => 'a fset => 'a fset
  bot_fset == bot :: 'a fset
  sup_fset == sup :: 'a fset => 'a fset => 'a fset
  less_eq_fset == less_eq :: 'a fset => 'a fset => bool
  less_fset == less :: 'a fset => 'a fset => bool
  minus_fset == minus :: 'a fset => 'a fset => 'a fset
Found termination order: "size <*mlex*> {}"
instantiation
  fset :: (equal) equal
  equal_fset == equal_class.equal :: 'a fset => 'a fset => bool
instantiation
  fset :: (type) conditionally_complete_lattice
  Inf_fset == Inf :: 'a fset set => 'a fset
  Sup_fset == Sup :: 'a fset set => 'a fset
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  fset :: (finite) complete_lattice
  top_fset == top :: 'a fset
instantiation
  fset :: (finite) complete_boolean_algebra
  uminus_fset == uminus :: 'a fset => 'a fset
instantiation
  finfun :: ({card_UNIV,equal}, equal) equal
  equal_finfun == equal_class.equal ::
    'a \<Rightarrow>f 'b => 'a \<Rightarrow>f 'b => bool
instantiation
  finfun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_finfun == finite_UNIV :: ('a \<Rightarrow>f 'b, bool) phantom
instantiation
  finfun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_finfun == card_UNIV_class.card_UNIV ::
    ('a \<Rightarrow>f 'b, nat) phantom
bundle finfun_syntax
bundle no_finfun_syntax
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.391s elapsed time, 8.703s cpu time, 0.948s GC time
Loading theory "Draft.Templates" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.178s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Least_Upper_BoundMoreTemplates")
### theory "FinFun.FinFun"
### 2.068s elapsed time, 6.789s cpu time, 0.788s GC time
Loading theory "Extended_Finite_State_Machines.AExp" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition" via "Extended_Finite_State_Machines.GExp")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.639s elapsed time, 1.950s cpu time, 0.214s GC time
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale comp_fun_idem
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_idem f"
locale comm_monoid_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
locale semilattice_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
  assumes "semilattice_fset (\<^bold>*)"
locale semilattice_order_fset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and
    less_eq :: "'a => 'a => bool"  (infix \<open>\<^bold>\<le>\<close> 50)
    and less :: "'a => 'a => bool"  (infix \<open>\<^bold><\<close> 50)
  assumes "semilattice_order_fset (\<^bold>*) (\<^bold>\<le>) (\<^bold><)"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  fset :: (type) size
  size_fset == size :: 'a fset => nat
instantiation
  fset :: (exhaustive) exhaustive
  exhaustive_fset == exhaustive_class.exhaustive ::
    ('a fset => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (full_exhaustive) full_exhaustive
  full_exhaustive_fset == full_exhaustive_class.full_exhaustive ::
    ('a fset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Found termination order: "(%p. nat_of_natural (snd p)) <*mlex*> {}"
instantiation
  fset :: (random) random
  random_fset == random_class.random ::
    natural
    => natural * natural => ('a fset * (unit => term)) * natural * natural
### Additional type variable(s) in specification of "random_aux_fset_rel": 'a
Found termination order: "{}"
### Additional type variable(s) in specification of "random_aux_fset_dom": 'a
Found termination order: "(%p. nat_of_natural (fst p)) <*mlex*> {}"
### theory "HOL-Library.FSet"
### 2.866s elapsed time, 7.703s cpu time, 1.827s GC time
Loading theory "Extended_Finite_State_Machines.FSet_Utils" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  input2state_prim :: "value list => nat => nat \<Rightarrow>f value option"
consts
  repeat :: "nat => 'a => 'a list"
### theory "Extended_Finite_State_Machines.FSet_Utils"
### 0.257s elapsed time, 0.559s cpu time, 0.098s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Extended_Finite_State_Machines.AExp"
### 3.425s elapsed time, 6.932s cpu time, 2.673s GC time
Loading theory "Extended_Finite_State_Machines.AExp_Lexorder" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Extended_Finite_State_Machines.Transition_Lexorder" via "Extended_Finite_State_Machines.GExp_Lexorder")
Loading theory "Extended_Finite_State_Machines.GExp" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM" via "Extended_Finite_State_Machines.Transition")
Found termination order: "size <*mlex*> {}"
instantiation
  aexp :: (linorder) linorder
  less_eq_aexp == less_eq :: 'a aexp => 'a aexp => bool
  less_aexp == less :: 'a aexp => 'a aexp => bool
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Extended_Finite_State_Machines.AExp_Lexorder"
### 0.796s elapsed time, 1.824s cpu time, 0.204s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
consts
  padding :: "nat => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Extended_Finite_State_Machines.GExp"
### 2.538s elapsed time, 4.026s cpu time, 0.454s GC time
Loading theory "Extended_Finite_State_Machines.GExp_Lexorder" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Extended_Finite_State_Machines.Transition_Lexorder")
Loading theory "Extended_Finite_State_Machines.Transition" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Draft.Subsumption" via "Extended_Finite_State_Machines.EFSM")
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "eq_upto_rename"
  Proving monotonicity ...
instantiation
  gexp :: (linorder) linorder
  less_eq_gexp == less_eq :: 'a gexp => 'a gexp => bool
  less_gexp == less :: 'a gexp => 'a gexp => bool
### theory "Extended_Finite_State_Machines.Transition"
### 0.339s elapsed time, 0.732s cpu time, 0.060s GC time
Loading theory "Extended_Finite_State_Machines.EFSM" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference" via "Draft.Subsumption")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Extended_Finite_State_Machines.GExp_Lexorder"
### 1.074s elapsed time, 2.497s cpu time, 0.167s GC time
Loading theory "Extended_Finite_State_Machines.Transition_Lexorder" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference")
Found termination order:
  "(%p. size_list (%p. size_list size (snd p)) (snd (snd (snd p)))) <*mlex*>
   {}"
Found termination order: "{}"
Proofs for inductive predicate(s) "recognises_execution"
  Proving monotonicity ...
instantiation
  transition_ext :: (linorder) linorder
  less_eq_transition_ext == less_eq ::
    'a transition_scheme => 'a transition_scheme => bool
  less_transition_ext == less ::
    'a transition_scheme => 'a transition_scheme => bool
Found termination order:
  "(%p. size_list (%p. size_list size (snd p)) (snd (snd (snd p)))) <*mlex*>
   {}"
### theory "Extended_Finite_State_Machines.Transition_Lexorder"
### 0.326s elapsed time, 0.690s cpu time, 0.073s GC time
Proofs for inductive predicate(s) "accepts_trace"
  Proving monotonicity ...
Found termination order:
  "(%p. size_list (%p. size_list size (snd (snd p)))
         (snd (snd (snd p)))) <*mlex*>
   {}"
Proofs for inductive predicate(s) "trace_simulation"
  Proving monotonicity ...
Proofs for inductive predicate(s) "execution_simulation"
  Proving monotonicity ...
Proofs for inductive predicate(s) "executionally_equivalent"
  Proving monotonicity ...
Proofs for inductive predicate(s) "visits"
  Proving monotonicity ...
Proofs for inductive predicate(s) "obtains"
  Proving monotonicity ...
### theory "Extended_Finite_State_Machines.EFSM"
### 1.712s elapsed time, 3.197s cpu time, 0.246s GC time
Loading theory "Draft.Subsumption" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound" via "Draft.Inference")
### theory "Draft.Subsumption"
### 0.099s elapsed time, 0.102s cpu time, 0.000s GC time
Loading theory "Draft.Inference" (required by "Draft.Least_Upper_BoundMoreTemplates" via "Draft.Least_Upper_Bound")
consts
  make_guard :: "value list => nat => vname gexp list"
consts
  make_outputs :: "value list => vname aexp list"
Found termination order:
  "(%p. size_list (%p. size_list size (snd (snd p)))
         (snd (snd (snd p)))) <*mlex*>
   {}"
consts
  make_pta_aux ::
    "(String.literal * value list * value list) list list
     => (nat list * (nat * nat) * transition) fset
        => (nat list * (nat * nat) * transition) fset"
consts
  try_heuristics_check ::
    "(((nat * nat) * transition) fset => bool)
     => (nat list
         => nat list
            => nat
               => (nat list * (nat * nat) * transition) fset
                  => (nat list * (nat * nat) * transition) fset
                     => (nat list * (nat * nat) * transition) fset
                        => (((nat * nat) * transition) fset => bool)
                           => (nat list *
                               (nat * nat) * transition) fset option) list
        => nat list
           => nat list
              => nat
                 => (nat list * (nat * nat) * transition) fset
                    => (nat list * (nat * nat) * transition) fset
                       => (nat list * (nat * nat) * transition) fset
                          => (((nat * nat) * transition) fset => bool)
                             => (nat list *
                                 (nat * nat) * transition) fset option"
instantiation
  score_ext :: (linorder) linorder
  less_eq_score_ext == less_eq :: 'a score_scheme => 'a score_scheme => bool
  less_score_ext == less :: 'a score_scheme => 'a score_scheme => bool
consts
  paths_of_length ::
    "nat
     => (nat list * (nat * nat) * transition) fset
        => nat => nat list list fset"
Found termination order:
  "(%p. size_list (%p. size_list size (snd p)) (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order:
  "(%p. size_list (%p. size_list size (snd (snd p))) (fst p)) <*mlex*> {}"
### theory "Draft.Inference"
### 2.685s elapsed time, 2.967s cpu time, 0.371s GC time
Loading theory "Draft.Least_Upper_Bound" (required by "Draft.Least_Upper_BoundMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Least_Upper_Bound"
### 7.491s elapsed time, 9.432s cpu time, 0.690s GC time
Loading theory "Draft.Least_Upper_BoundMoreTemplates"
val templateLemmas =
   [("Least_Upper_Bound.no_corresponding_bc",
     "~ has_corresponding (Bc ?x1.0) ?G1.0",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0)
             )
         )),
    ("Least_Upper_Bound.no_corresponding_gt",
     "~ has_corresponding (Gt ?x1.0 ?y1.0) ?G1.0",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0)
             )
         )),
    ("Least_Upper_Bound.no_corresponding_nor",
     "~ has_corresponding (Nor ?x1.0 ?y1.0) ?G1.0",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0)
             )
         )),
    ("Least_Upper_Bound.opposite_gob_directly_subsumption",
     "opposite_gob ?t1.0 ?t2.0 ==> ~ subsumes ?t1.0 ?c ?t2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 1)
               )
           ))),
    ("Least_Upper_Bound.singleton_list",
     "(length ?l = 1) = (EX e. ?l = [e])",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_hole 4),
       template_app (template_hole 3, t_empty))),
    ("Least_Upper_Bound.is_lob_direct_subsumption",
     "is_lob ?t1.0 ?t2.0 ==>
      directly_subsumes ?e1.0 ?e2.0 ?s ?s' ?t2.0 ?t1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 5),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0),
               template_var 4),
             template_var 5)
           ))),
    ("Least_Upper_Bound.get_in_is",
     "(get_in ?x = Some (?v, ?s1.0)) = (?x = In ?v ?s1.0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Least_Upper_Bound.has_corresponding_eq",
     "has_corresponding (Eq ?x21.0 ?x22.0) ?G1.0 ==>
      Eq ?x21.0 ?x22.0 : set ?G1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Least_Upper_Bound.these_cons",
     "these (?a # ?as) =
      (case ?a of None => these ?as | Some x => x # these ?as)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           t_empty),
         template_var 1))),
    ("Least_Upper_Bound.not_subset_not_in",
     "(~ ?s1.0 <= ?s2.0) = (EX i. i : ?s1.0 & i ~: ?s2.0)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("Least_Upper_Bound.In_in_get_Ins",
     "(In (I ?v) ?l : set ?G) = ((?v, ?l) : set (get_Ins ?G))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 2)),
             template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Least_Upper_Bound.gval_each_one",
     "[| ?g : set ?G; apply_guards ?G ?s |] ==> gval ?g ?s = true",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_hole 0))),
    ("Least_Upper_Bound.has_corresponding_apply_guards",
     "[| ALL g:set ?G2.0. has_corresponding g ?G1.0;
         apply_guards ?G1.0 ?s |]
      ==> apply_guards ?G2.0 ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Least_Upper_Bound.Ball_Cons",
     "(ALL x:set (?a # ?l). ?P x) = (?P ?a & (ALL x:set ?l. ?P x))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 0, template_var 2)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           t_empty)))),
    ("Least_Upper_Bound.no_Ins",
     "[] = get_Ins ?G ==> set ?G - {In (I ?i) ?l} = set ?G",
     template_implication
      ([template_equation
         (template_hole 8, template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_var 0)),
             template_hole 0)),
         template_app (template_hole 4, template_var 2)))),
    ("Least_Upper_Bound.literal_args_eq",
     "literal_args (Eq ?a ?b) ==> EX v l. ?a = V v & ?b = L l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Least_Upper_Bound.in_get_ins",
     "(I ?x1a, ?b) : set (these (map get_in ?G)) ==>
      In (I ?x1a) ?b : set ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 2)),
                  template_var 1)),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 7, template_var 2)),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Least_Upper_Bound.get_Ins_Cons_equiv",
     "\<nexists>v l. ?a = In (I v) l ==> get_Ins (?a # ?G) = get_Ins ?G",
     template_implication
      ([template_negation
         (template_predicate (template_app (template_hole 7, t_empty)))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Least_Upper_Bound.Eq_apply_guards",
     "[| Eq (V ?v) (L ?l) : set ?G1.0; apply_guards ?G1.0 ?s |]
      ==> ?s ?v = Some ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 3)),
                  template_app (template_hole 4, template_var 2))),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_var 0, template_var 3),
         template_app (template_hole 0, template_var 2)))),
    ("Least_Upper_Bound.not_restricted_swap_inputs",
     "[| not_restricted (I ?x1a) ?G; apply_guards ?G (join_ir ?i ?r) |]
      ==> apply_guards ?G (join_ir (?i[?x1a := ?x1.0]) ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 4)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 4),
                   template_var 0)),
               template_var 1))
           ))),
    ("Least_Upper_Bound.must_be_another",
     "[| 1 < size (fset_of_list ?b); ?x : set ?b |]
      ==> EX x':set ?b. ?x ~= x'",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 1))),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 3, template_var 1)),
             t_empty)
           ))),
    ("Least_Upper_Bound.input_not_constrained_aval_swap_inputs",
     "~ aexp_constrains ?a (V (I ?v)) ==>
      aval ?a (join_ir ?i ?c) = aval ?a (join_ir (?i[?v := ?x]) ?c)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 3)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 0)),
             template_var 1))))),
    ("Least_Upper_Bound.input_not_constrained_gval_swap_inputs",
     "~ gexp_constrains ?a (V (I ?v)) ==>
      gval ?a (join_ir ?i ?c) = gval ?a (join_ir (?i[?v := ?x]) ?c)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 3)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 4),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 0)),
             template_var 1))))),
    ("Least_Upper_Bound.In_apply_guards",
     "[| In ?v ?l : set ?G1.0; apply_guards ?G1.0 ?s |]
      ==> EX v':set ?l. ?s ?v = Some v'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             t_empty)
           ))),
    ("Least_Upper_Bound.remove_restricted",
     "[| ?g : set ?G; gexp_constrains ?g (V ?v); restricted_once ?v ?G |]
      ==> not_restricted ?v (removeAll ?g ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Least_Upper_Bound.unrestricted_input_swap",
     "[| not_restricted (I ?i) ?G; apply_guards ?G (join_ir ?iaa ?c) |]
      ==> apply_guards (removeAll ?g ?G) (join_ir (?iaa[?i := ?ia]) ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 5)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 5),
                   template_var 0)),
               template_var 2))
           ))),
    ("Least_Upper_Bound.gval_rearrange",
     "[| ?g : set ?G; gval ?g ?s = true;
         apply_guards (removeAll ?g ?G) ?s |]
      ==> apply_guards ?G ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 0),
          template_hole 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("Least_Upper_Bound.has_distinguishing_Eq",
     "has_distinguishing (Eq (V ?v) (L ?l)) ?G ==>
      EX l'. Eq (V ?v) (L l') : set ?G & ?l ~= l'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 2)),
                  template_app (template_hole 6, template_var 1))),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Least_Upper_Bound.restricted_max_once_cons",
     "ALL v. restricted_once v (?g # ?gs) | not_restricted v (?g # ?gs) ==>
      ALL v. restricted_once v ?gs | not_restricted v ?gs",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Least_Upper_Bound.has_distinguishing",
     "has_distinguishing ?g ?G ==>
      (EX v l. ?g = Eq (V v) (L l)) | (EX v l. ?g = In v l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8, template_app (template_hole 7, t_empty)),
             template_app (template_hole 7, t_empty))
           ))),
    ("Least_Upper_Bound.restricted_head",
     "ALL v.
         restricted_once v (Eq (V ?x2.0) (L ?x1.0) # ?G) |
         not_restricted v (Eq (V ?x2.0) (L ?x1.0) # ?G) ==>
      not_restricted ?x2.0 ?G",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Least_Upper_Bound.unconstrained_input",
     "[| ALL g:set ?G. ~ gexp_constrains g (V (I ?i));
         apply_guards ?G (join_ir ?ia ?c) |]
      ==> apply_guards ?G (join_ir (?ia[?i := ?x']) ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 4)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 3),
                   template_var 0)),
               template_var 1))
           ))),
    ("Least_Upper_Bound.has_corresponding_In",
     "has_corresponding (In ?v ?l) ?G1.0 ==>
      (EX l'. In ?v l' : set ?G1.0 & set l' <= set ?l) |
      (EX l':set ?l. Eq (V ?v) (L l') : set ?G1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10, template_app (template_hole 9, t_empty)),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 4, template_var 1)),
               t_empty))
           ))),
    ("Least_Upper_Bound.In_neq_apply_guards",
     "[| In ?v ?l : set ?G2.0; Eq (V ?v) (L ?l') : set ?G1.0; ?l' ~: set ?l;
         apply_guards ?G1.0 ?s |]
      ==> ~ apply_guards ?G2.0 ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4)),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 5)),
                  template_app (template_hole 4, template_var 2))),
              template_app (template_hole 7, template_var 1))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app (template_hole 1, template_var 4))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)
               )
           ))),
    ("Least_Upper_Bound.ex_mutex",
     "[| Eq (V ?v) (L ?l) : set ?G1.0; Eq (V ?v) (L ?l') : set ?G2.0;
         ?l ~= ?l'; apply_guards ?G1.0 ?s |]
      ==> ~ apply_guards ?G2.0 ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 5)),
                  template_app (template_hole 4, template_var 4))),
              template_app (template_hole 3, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_hole 5, template_var 5)),
                  template_app (template_hole 4, template_var 2))),
              template_app (template_hole 3, template_var 1))
            ),
        template_negation
         (template_equation (template_var 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)
               )
           ))),
    ("Least_Upper_Bound.apply_guards_remove_restricted",
     "[| ?g : set ?G; gexp_constrains ?g (V (I ?i));
         restricted_once (I ?i) ?G; apply_guards ?G (join_ir ?iaa ?c) |]
      ==> apply_guards (removeAll ?g ?G) (join_ir (?iaa[?i := ?ia]) ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_app (template_hole 8, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 5, template_var 3)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 3),
                   template_var 0)),
               template_var 1))
           ))),
    ("Least_Upper_Bound.In_swap_inputs",
     "[| In (I ?i) ?s2.0 : set ?G; restricted_once (I ?i) ?G;
         ?ia : set ?s2.0; apply_guards ?G (join_ir ?iaa ?c) |]
      ==> apply_guards ?G (join_ir (?iaa[?i := ?ia]) ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 5)),
                  template_var 4)),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 7, template_var 5)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 5),
                   template_var 2)),
               template_var 0))
           ))),
    ("Least_Upper_Bound.another_swap_inputs",
     "[| apply_guards ?G (join_ir ?i ?c);
         filter (%g. gexp_constrains g (V (I ?a))) ?G = [In (I ?a) ?b];
         ?xa : set ?b |]
      ==> apply_guards ?G (join_ir (?i[?a := ?xa]) ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 5),
              template_app
               (template_app (template_hole 11, template_var 4),
                template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 9, t_empty), template_var 5),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 6, template_var 2)),
                template_var 1)),
            template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 12, template_var 5),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 2),
                   template_var 0)),
               template_var 3))
           ))),
    ("Least_Upper_Bound.test_aux",
     "[| ALL g:set (removeAll (In (I ?v) ?l) ?G1.0).
            ~ gexp_constrains g (V (I ?v));
         apply_guards ?G1.0 (join_ir ?i ?c); ?x : set ?l |]
      ==> apply_guards ?G1.0 (join_ir (?i[?v := ?x]) ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 9,
                          template_app (template_hole 8, template_var 5)),
                        template_var 4)),
                    template_var 3))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 5),
                   template_var 0)),
               template_var 1))
           ))),
    ("Least_Upper_Bound.guard_subset_eq_outputs_updates_subsumption",
     "[| Label ?t1.0 = Label ?t2.0; Arity ?t1.0 = Arity ?t2.0;
         Outputs ?t1.0 = Outputs ?t2.0; Updates ?t1.0 = Updates ?t2.0;
         set (Guards ?t2.0) <= set (Guards ?t1.0) |]
      ==> subsumes ?t2.0 ?c ?t1.0",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 2),
          template_app (template_hole 10, template_var 1)),
        template_equation
         (template_app (template_hole 8, template_var 2),
          template_app (template_hole 8, template_var 1)),
        template_equation
         (template_app (template_hole 6, template_var 2),
          template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app (template_hole 4, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 1)),
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 2)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Least_Upper_Bound.each_input_guarded_once_cons",
     "ALL i:\<Union> (enumerate_gexp_inputs ` set (?a # ?G)).
         length (filter (%g. gexp_constrains g (V (I i))) (?a # ?G))
         <= 1 ==>
      ALL i:\<Union> (enumerate_gexp_inputs ` set ?G).
         length (filter (%g. gexp_constrains g (V (I i))) ?G) <= 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 1),
                        template_var 0))))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_app (template_hole 8, template_var 0)))),
             t_empty)
           ))),
    ("Least_Upper_Bound.correspondence_subsumption",
     "[| Label ?t1.0 = Label ?t2.0; Arity ?t1.0 = Arity ?t2.0;
         Outputs ?t1.0 = Outputs ?t2.0; Updates ?t1.0 = Updates ?t2.0;
         ALL g:set (Guards ?t2.0). has_corresponding g (Guards ?t1.0) |]
      ==> subsumes ?t2.0 ?c ?t1.0",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 2),
          template_app (template_hole 11, template_var 1)),
        template_equation
         (template_app (template_hole 9, template_var 2),
          template_app (template_hole 9, template_var 1)),
        template_equation
         (template_app (template_hole 7, template_var 2),
          template_app (template_hole 7, template_var 1)),
        template_equation
         (template_app (template_hole 5, template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)
           ))),
    ("Least_Upper_Bound.guard_subset_eq_outputs_updates_direct_subsumption",
     "[| Label ?t1.0 = Label ?t2.0; Arity ?t1.0 = Arity ?t2.0;
         Outputs ?t1.0 = Outputs ?t2.0; Updates ?t1.0 = Updates ?t2.0;
         set (Guards ?t2.0) <= set (Guards ?t1.0) |]
      ==> directly_subsumes ?m1.0 ?m2.0 ?s1.0 ?s2.0 ?t2.0 ?t1.0",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 5),
          template_app (template_hole 10, template_var 4)),
        template_equation
         (template_app (template_hole 8, template_var 5),
          template_app (template_hole 8, template_var 4)),
        template_equation
         (template_app (template_hole 6, template_var 5),
          template_app (template_hole 6, template_var 4)),
        template_equation
         (template_app (template_hole 4, template_var 5),
          template_app (template_hole 4, template_var 4)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 4)),
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 5)))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0),
               template_var 4),
             template_var 5)
           ))),
    ("Least_Upper_Bound.has_distinguishing_In",
     "has_distinguishing (In ?v ?l) ?G ==>
      (EX l' i. ?v = I i & Eq (V ?v) (L l') : set ?G & l' ~: set ?l) |
      (EX l' i. ?v = I i & In ?v l' : set ?G & set ?l < set l')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15, template_app (template_hole 14, t_empty)),
             template_app (template_hole 1, t_empty))
           ))),
    ("Least_Upper_Bound.distinguishing_subsumption",
     "[| EX g:set (Guards ?t2.0). has_distinguishing g (Guards ?t1.0);
         Arity ?t1.0 = Arity ?t2.0; EX i. can_take_transition ?t1.0 i ?c;
         ALL (v, l'):insert (0, []) (set (get_Ins (Guards ?t1.0))).
            ALL g:set (removeAll (In (I v) l') (Guards ?t1.0)).
               ~ gexp_constrains g (V (I v)) |]
      ==> ~ subsumes ?t2.0 ?c ?t1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_hole 22,
                  template_app (template_hole 21, template_var 2))),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 18, template_var 1),
          template_app (template_hole 18, template_var 2)),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_hole 12),
                      template_hole 11)),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 21, template_var 1))))),
              template_app (template_hole 8, t_empty))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 1)
               )
           ))),
    ("Least_Upper_Bound.lob_distinguished_3_not_subsumes",
     "[| EX (i, l):set (get_Ins (Guards ?t2.0)).
            filter (%g. gexp_constrains g (V (I i))) (Guards ?t2.0) =
            [In (I i) l] &
            (EX (i', l'):set (get_Ins (Guards ?t1.0)).
                i = i' & set l' < set l);
         Arity ?t1.0 = Arity ?t2.0; EX i. can_take_transition ?t2.0 i ?c |]
      ==> ~ subsumes ?t1.0 ?c ?t2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 21,
                template_app
                 (template_hole 20,
                  template_app
                   (template_hole 19,
                    template_app (template_hole 18, template_var 2)))),
              template_app (template_hole 17, t_empty))
            ),
        template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)
               )
           ))),
    ("Least_Upper_Bound.lob_aux_some",
     "[| Outputs ?t1.0 = Outputs ?t2.0; Updates ?t1.0 = Updates ?t2.0;
         all_literal_args ?t1.0; all_literal_args ?t2.0;
         Label ?t = Label ?t1.0; Arity ?t = Arity ?t1.0;
         Guards ?t = remdups (merge_guards (Guards ?t1.0) (Guards ?t2.0));
         Outputs ?t = Outputs ?t1.0; Updates ?t = Updates ?t1.0 |]
      ==> lob_aux ?t1.0 ?t2.0 = Some ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 14, template_var 2),
          template_app (template_hole 14, template_var 1)),
        template_equation
         (template_app (template_hole 12, template_var 2),
          template_app (template_hole 12, template_var 1)),
        template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_equation
         (template_app (template_hole 9, template_var 0),
          template_app (template_hole 9, template_var 2)),
        template_equation
         (template_app (template_hole 7, template_var 0),
          template_app (template_hole 7, template_var 2)),
        template_equation
         (template_app (template_hole 5, template_var 0),
          template_app
           (template_hole 4,
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 5, template_var 2)),
              template_app (template_hole 5, template_var 1)))),
        template_equation
         (template_app (template_hole 14, template_var 0),
          template_app (template_hole 14, template_var 2)),
        template_equation
         (template_app (template_hole 12, template_var 0),
          template_app (template_hole 12, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Least_Upper_Bound.lob_distinguished_2_not_subsumes",
     "[| EX (i, l):set (get_Ins (Guards ?t2.0)).
            filter (%g. gexp_constrains g (V (I i))) (Guards ?t2.0) =
            [In (I i) l] &
            (EX l':set l.
                i < Arity ?t1.0 &
                Eq (V (I i)) (L l') : set (Guards ?t1.0) &
                1 < size (fset_of_list l));
         Arity ?t1.0 = Arity ?t2.0; EX i. can_take_transition ?t2.0 i ?c |]
      ==> ~ subsumes ?t1.0 ?c ?t2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 29,
                template_app
                 (template_hole 28,
                  template_app
                   (template_hole 27,
                    template_app (template_hole 26, template_var 2)))),
              template_app (template_hole 25, t_empty))
            ),
        template_equation
         (template_app (template_hole 12, template_var 1),
          template_app (template_hole 12, template_var 2)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)
               )
           ))),
    ("Least_Upper_Bound.literal_args_can_take",
     "[| ALL g:set ?G.
            EX i v s. g = Eq (V (I i)) (L v) | g = In (I i) s & s ~= [];
         ALL i:\<Union> (enumerate_gexp_inputs ` set ?G). i < ?a;
         ALL i:\<Union> (enumerate_gexp_inputs ` set ?G).
            length (filter (%g. gexp_constrains g (V (I i))) ?G) <= 1 |]
      ==> EX i. length i = ?a & apply_guards ?G (join_ir i ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 29,
                template_app (template_hole 28, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 11, template_hole 10),
                    template_app (template_hole 28, template_var 2)))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 11, template_hole 10),
                    template_app (template_hole 28, template_var 2)))),
              t_empty)
            )],
       template_predicate (template_app (template_hole 25, t_empty)))),
    ("Least_Upper_Bound.test",
     "[| In (I ?v) ?l : set ?G2.0; In (I ?v) ?l' : set ?G1.0; ?x : set ?l';
         ?x ~: set ?l; apply_guards ?G1.0 (join_ir ?i ?c); length ?i = ?a;
         ALL g:set (removeAll (In (I ?v) ?l') ?G1.0).
            ~ gexp_constrains g (V (I ?v)) |]
      ==> EX i. length i = ?a &
                apply_guards ?G1.0 (join_ir i ?c) &
                (length i = ?a --> ~ apply_guards ?G2.0 (join_ir i ?c))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_hole 16,
                    template_app (template_hole 15, template_var 8)),
                  template_var 7)),
              template_app (template_hole 14, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_hole 16,
                    template_app (template_hole 15, template_var 8)),
                  template_var 5)),
              template_app (template_hole 14, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_app (template_hole 12, template_var 5))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 13, template_var 3),
                  template_app (template_hole 12, template_var 7))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 4),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 1))
            ),
        template_equation
         (template_app (template_hole 7, template_var 2), template_var 0),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 14,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app
                         (template_hole 16,
                          template_app (template_hole 15, template_var 8)),
                        template_var 5)),
                    template_var 4))),
              t_empty)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Least_Upper_Bound.test2",
     "[| In (I ?i) ?l : set (Guards ?t2.0);
         In (I ?i) ?l' : set (Guards ?t1.0); length ?ia = Arity ?t1.0;
         apply_guards (Guards ?t1.0) (join_ir ?ia ?c); ?x : set ?l';
         ?x ~: set ?l;
         ALL (v, l'):insert (0, []) (set (get_Ins (Guards ?t1.0))).
            ALL g:set (removeAll (In (I v) l') (Guards ?t1.0)).
               ~ gexp_constrains g (V (I v));
         Arity ?t1.0 = Arity ?t2.0 |]
      ==> EX i. length i = Arity ?t2.0 &
                apply_guards (Guards ?t1.0) (join_ir i ?c) &
                (length i = Arity ?t2.0 -->
                 ~ apply_guards (Guards ?t2.0) (join_ir i ?c))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 29,
                template_app
                 (template_app
                   (template_hole 28,
                    template_app (template_hole 27, template_var 7)),
                  template_var 6)),
              template_app
               (template_hole 26,
                template_app (template_hole 25, template_var 5)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 29,
                template_app
                 (template_app
                   (template_hole 28,
                    template_app (template_hole 27, template_var 7)),
                  template_var 4)),
              template_app
               (template_hole 26,
                template_app (template_hole 24, template_var 3)))
            ),
        template_equation
         (template_app (template_hole 22, template_var 2),
          template_app (template_hole 21, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 20,
                template_app (template_hole 24, template_var 3)),
              template_app
               (template_app (template_hole 19, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 0),
              template_app (template_hole 17, template_var 4))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 18, template_var 0),
                  template_app (template_hole 17, template_var 6))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_hole 12),
                      template_hole 11)),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 24, template_var 3))))),
              template_app (template_hole 8, t_empty))
            ),
        template_equation
         (template_app (template_hole 21, template_var 3),
          template_app (template_hole 3, template_var 5))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Least_Upper_Bound.opposite_gob_subsumption",
     "[| ALL g:set (Guards ?t1.0).
            EX i v s. g = Eq (V (I i)) (L v) | g = In (I i) s & s ~= [];
         ALL g:set (Guards ?t2.0).
            EX i v s. g = Eq (V (I i)) (L v) | g = In (I i) s & s ~= [];
         EX i v.
            Eq (V (I i)) (L v) : set (Guards ?t1.0) &
            (ALL g:set (Guards ?t2.0). ~ gexp_constrains g (V (I i)));
         Arity ?t1.0 = Arity ?t2.0;
         ALL i:enumerate_inputs ?t2.0. i < Arity ?t2.0;
         ALL i:enumerate_inputs ?t2.0.
            length (filter (%g. gexp_constrains g (V (I i))) (Guards ?t2.0))
            <= 1 |]
      ==> ~ subsumes ?t1.0 ?c ?t2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 28,
                template_app
                 (template_hole 27,
                  template_app (template_hole 26, template_var 2))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 28,
                template_app
                 (template_hole 27,
                  template_app (template_hole 26, template_var 1))),
              t_empty)
            ),
        template_predicate (template_app (template_hole 25, t_empty)),
        template_equation
         (template_app (template_hole 8, template_var 2),
          template_app (template_hole 8, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 1)
               )
           )))]:
   (string * thm * template) list
### theory "Draft.Least_Upper_BoundMoreTemplates"
### 0.574s elapsed time, 0.792s cpu time, 0.093s GC time
val it = (): unit
