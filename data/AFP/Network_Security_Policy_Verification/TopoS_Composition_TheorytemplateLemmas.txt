   [("TopoS_Composition_Theory.generate_valid_topology_nodes",
     "nodes (generate_valid_topology ?M ?G) = nodes ?G",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("TopoS_Composition_Theory.generate_valid_topology_subseteq_edges",
     "edges (generate_valid_topology ?M ?G) <= edges ?G",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("TopoS_Composition_Theory.wf_graph_generate_valid_topology",
     "wf_graph ?G ==> wf_graph (generate_valid_topology ?M ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("TopoS_Composition_Theory.valid_reqs1",
     "valid_reqs (?m # ?M) ==> configured_SecurityInvariant ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("TopoS_Composition_Theory.valid_reqs2",
     "valid_reqs (?m # ?M) ==> valid_reqs ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("TopoS_Composition_Theory.generate_valid_topology_SOME_nodes",
     "nodes (generate_valid_topology_SOME ?M (| nodes = ?V, edges = ?E |)) =
      ?V",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0))),
       template_var 1)),
    ("TopoS_Composition_Theory.get_ACS_union_get_IFS",
     "set (get_ACS ?M) Un set (get_IFS ?M) = set ?M",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("TopoS_Composition_Theory.c_offending_flows_subseteq_edges",
     "configured_SecurityInvariant ?m ==>
      \<Union> (c_offending_flows ?m ?G) <= edges ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("TopoS_Composition_Theory.get_offending_flows_un",
     "\<Union> (get_offending_flows ?M ?G) =
      (UN m:set ?M. \<Union> (c_offending_flows m ?G))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 1))))),
    ("TopoS_Composition_Theory.all_security_requirements_fulfilled_imp_get_offending_empty",
     "[| valid_reqs ?M; all_security_requirements_fulfilled ?M ?G |]
      ==> get_offending_flows ?M ?G = {}",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("TopoS_Composition_Theory.generate_valid_topology_does_nothing_if_valid",
     "[| valid_reqs ?M; all_security_requirements_fulfilled ?M ?G |]
      ==> generate_valid_topology ?M ?G = ?G",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("TopoS_Composition_Theory.generate_valid_topology_as_set",
     "generate_valid_topology ?M ?G =
      delete_edges ?G (UN m:set ?M. \<Union> (c_offending_flows m ?G))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 0, template_var 1)))))),
    ("TopoS_Composition_Theory.new_configured_SecurityInvariant_sound",
     "new_configured_SecurityInvariant
       (?sinvar, ?defbot, ?receiver_violation, ?nP) =
      Some ?m ==>
      configured_SecurityInvariant ?m",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)))),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("TopoS_Composition_Theory.generate_valid_topology_mono_models",
     "edges (generate_valid_topology (?m # ?M) (| nodes = ?V, edges = ?E |))
      <= edges (generate_valid_topology ?M (| nodes = ?V, edges = ?E |))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0))))),
    ("TopoS_Composition_Theory.generate_valid_topology_SOME_superset",
     "[| valid_reqs ?M; wf_graph ?G |]
      ==> edges (generate_valid_topology ?M ?G)
          <= edges (generate_valid_topology_SOME ?M ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("TopoS_Composition_Theory.get_offending_flows_subseteq_edges",
     "[| valid_reqs ?M;
         ?F : get_offending_flows ?M (| nodes = ?V, edges = ?E |) |]
      ==> ?F <= ?E",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0),
                  template_hole 1)))
            )],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("TopoS_Composition_Theory.get_offending_flows_alt1",
     "get_offending_flows ?M ?G =
      \<Union> {c_offending_flows m ?G |m. m : set ?M}",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_hole 6, template_app (template_hole 5, t_empty)))),
    ("TopoS_Composition_Theory.generate_valid_topology_sound",
     "[| valid_reqs ?M; wf_graph (| nodes = ?V, edges = ?E |) |]
      ==> all_security_requirements_fulfilled ?M
           (generate_valid_topology ?M (| nodes = ?V, edges = ?E |))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0),
                 template_hole 2)))
           ))),
    ("TopoS_Composition_Theory.generate_valid_topology_SOME_sound",
     "[| valid_reqs ?M; wf_graph (| nodes = ?V, edges = ?E |) |]
      ==> all_security_requirements_fulfilled ?M
           (generate_valid_topology_SOME ?M (| nodes = ?V, edges = ?E |))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0),
                 template_hole 2)))
           ))),
    ("TopoS_Composition_Theory.all_security_requirements_fulfilled_imp_no_offending_flows",
     "[| valid_reqs ?M; all_security_requirements_fulfilled ?M ?G |]
      ==> (UN m:set ?M. \<Union> (c_offending_flows m ?G)) = {}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 1, template_var 1))),
         template_hole 0))),
    ("TopoS_Composition_Theory.new_configured_TopoS_sinvar_correct",
     "SecurityInvariant ?sinvar ?defbot ?receiver_violation ==>
      c_sinvar
       (the (new_configured_SecurityInvariant
              (?sinvar, ?defbot, ?receiver_violation, ?nP))) =
      (%G. ?sinvar G ?nP)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))))),
         t_empty))),
    ("TopoS_Composition_Theory.new_configured_TopoS_offending_flows_correct",
     "SecurityInvariant ?sinvar ?defbot ?receiver_violation ==>
      c_offending_flows
       (the (new_configured_SecurityInvariant
              (?sinvar, ?defbot, ?receiver_violation, ?nP))) =
      (%G. SecurityInvariant_withOffendingFlows.set_offending_flows ?sinvar
            G ?nP)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)))))),
         t_empty))),
    ("TopoS_Composition_Theory.all_security_requirements_fulfilled_mono",
     "[| valid_reqs ?M; ?E' <= ?E; wf_graph (| nodes = ?V, edges = ?E |);
         all_security_requirements_fulfilled ?M
          (| nodes = ?V, edges = ?E |) |]
      ==> all_security_requirements_fulfilled ?M
           (| nodes = ?V, edges = ?E' |)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 1),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 1),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2),
               template_hole 1))
           ))),
    ("TopoS_Composition_Theory.generate_valid_topology_some_sound",
     "[| valid_reqs ?M; wf_graph (| nodes = ?V, edges = ?E |); set ?Es = ?E;
         distinct ?Es |]
      ==> all_security_requirements_fulfilled ?M
           (generate_valid_topology_some ?M ?Es
             (| nodes = ?V, edges = ?E |))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_hole 5))
            ),
        template_equation
         (template_app (template_hole 3, template_var 0), template_var 1),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1),
                 template_hole 5)))
           ))),
    ("TopoS_Composition_Theory.get_offending_flows_union_mono",
     "[| valid_reqs ?M; wf_graph (| nodes = ?V, edges = ?E |); ?E' <= ?E |]
      ==> \<Union> (get_offending_flows ?M (| nodes = ?V, edges = ?E' |))
          <= \<Union>
              (get_offending_flows ?M (| nodes = ?V, edges = ?E |))",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_hole 3))
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0),
               template_hole 3))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_hole 3)))))),
    ("TopoS_Composition_Theory.generate_valid_topology_max_topo",
     "[| valid_reqs ?M; wf_graph ?G;
         ALL m:set ?M. EX P. ALL G. c_sinvar m G = (ALL e:edges G. P e) |]
      ==> max_topo ?M (generate_valid_topology ?M (fully_connected ?G))",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("TopoS_Composition_Theory.mono_extend_get_offending_flows",
     "[| valid_reqs ?M; wf_graph (| nodes = ?V, edges = ?E |); ?E' <= ?E;
         ?F' : get_offending_flows ?M (| nodes = ?V, edges = ?E' |) |]
      ==> EX F:get_offending_flows ?M (| nodes = ?V, edges = ?E |).
             ?F' <= F",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 4)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_hole 4))
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 4),
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 1),
                  template_hole 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app
                  (template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 2),
                   template_hole 4))),
             t_empty)
           ))),
    ("TopoS_Composition_Theory.Un_set_offending_flows_bound_minus_subseteq'",
     "[| valid_reqs ?M; wf_graph (| nodes = ?V, edges = ?E |); ?E' <= ?E;
         \<Union> (get_offending_flows ?M (| nodes = ?V, edges = ?E |))
         <= ?X |]
      ==> \<Union>
           (get_offending_flows ?M (| nodes = ?V, edges = ?E - ?E' |))
          <= ?X - ?E'",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 4)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_hole 4))
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_hole 4))),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_hole 4))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("TopoS_Composition_Theory.enf_offending_flows",
     "[| configured_SecurityInvariant ?m;
         ALL G. c_sinvar ?m G = (ALL e:edges G. ?P e) |]
      ==> ALL G.
             c_offending_flows ?m G =
             (if c_sinvar ?m G then {} else {{e: edges G. ~ ?P e}})",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("TopoS_Composition_Theory.enf_not_fulfilled_if_in_offending",
     "[| valid_reqs ?M; wf_graph ?G;
         ALL m:set ?M. EX P. ALL G. c_sinvar m G = (ALL e:edges G. P e) |]
      ==> ALL x:UN m:set ?M.
                   \<Union> (c_offending_flows m (fully_connected ?G)).
             ~ all_security_requirements_fulfilled ?M
                (| nodes = ?V, edges = insert x ?E |)",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 3)),
        template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 3)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, t_empty),
                   template_app (template_hole 15, template_var 3)))),
             t_empty)
           ))),
    ("TopoS_Composition_Theory.enf_all_valid_policy_subset_of_max",
     "[| valid_reqs ?M; wf_graph ?G;
         ALL m:set ?M. EX P. ALL G. c_sinvar m G = (ALL e:edges G. P e);
         nodes ?G = nodes ?G'; wf_graph ?G';
         all_security_requirements_fulfilled ?M ?G' |]
      ==> edges ?G'
          <= edges (generate_valid_topology ?M (fully_connected ?G))",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 2)),
        template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 2)),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_predicate
         (template_app (template_hole 14, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 6, template_var 0),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1)))))),
    ("TopoS_Composition_Theory.unique_offending_obtain",
     "[| configured_SecurityInvariant ?m; c_offending_flows ?m ?G = {?F};
         !!P. [| ?F = {(v1, v2). (v1, v2) : edges ?G & ~ P (v1, v2)};
                 c_sinvar ?m ?G = (ALL (v1, v2):edges ?G. P (v1, v2));
                 ALL (v1, v2):edges ?G - ?F. P (v1, v2) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 15, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 14, template_var 1),
            template_hole 13)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0)))]
