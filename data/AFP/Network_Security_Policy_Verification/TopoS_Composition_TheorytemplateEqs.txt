   [("TopoS_Composition_Theory.generate_valid_topology_nodes",
     "nodes (generate_valid_topology ?M ?G) = nodes ?G",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("TopoS_Composition_Theory.generate_valid_topology_SOME_nodes",
     "nodes (generate_valid_topology_SOME ?M (| nodes = ?V, edges = ?E |)) =
      ?V",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0))),
       template_var 1)),
    ("TopoS_Composition_Theory.get_ACS_union_get_IFS",
     "set (get_ACS ?M) Un set (get_IFS ?M) = set ?M",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("TopoS_Composition_Theory.get_offending_flows_un",
     "\<Union> (get_offending_flows ?M ?G) =
      (UN m:set ?M. \<Union> (c_offending_flows m ?G))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 1))))),
    ("TopoS_Composition_Theory.generate_valid_topology_as_set",
     "generate_valid_topology ?M ?G =
      delete_edges ?G (UN m:set ?M. \<Union> (c_offending_flows m ?G))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 0, template_var 1)))))),
    ("TopoS_Composition_Theory.get_offending_flows_alt1",
     "get_offending_flows ?M ?G =
      \<Union> {c_offending_flows m ?G |m. m : set ?M}",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_hole 6, template_app (template_hole 5, t_empty))))]
