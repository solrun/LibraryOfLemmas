   [("TopoS_Interface_impl.all_nodes_list_I",
     "?P (list_graph_to_graph ?G) = ?Pl ?G ==>
      (ALL n:nodes (list_graph_to_graph ?G).
          ?P (list_graph_to_graph ?G) n) =
      (ALL n:set (nodesL ?G). ?Pl ?G n)",
     template_implication
      ([template_equation
         (template_app
           (template_var 2, template_app (template_hole 5, template_var 1)),
          template_app (template_var 0, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 5, template_var 1))),
           t_empty),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           t_empty)))),
    ("TopoS_Interface_impl.all_edges_list_I",
     "?P (list_graph_to_graph ?G) = ?Pl ?G ==>
      (ALL (e1, e2):edges (list_graph_to_graph ?G).
          ?P (list_graph_to_graph ?G) e1 e2) =
      (ALL (e1, e2):set (edgesL ?G). ?Pl ?G e1 e2)",
     template_implication
      ([template_equation
         (template_app
           (template_var 2, template_app (template_hole 6, template_var 1)),
          template_app (template_var 0, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 6, template_var 1))),
           template_app (template_hole 2, t_empty)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           template_app (template_hole 2, t_empty))))),
    ("TopoS_Interface_impl.minimalize_offending_overapprox_gives_some_offending_flow",
     "[| wf_list_graph ?G; TopoS_modelLibrary ?m ?sinvar_spec;
         ~ nm_sinvar ?m ?G ?nP |]
      ==> set (TopoS_Interface_impl.minimalize_offending_overapprox
                (%G. nm_sinvar ?m G ?nP) (edgesL ?G) [] ?G)
          : SecurityInvariant_withOffendingFlows.set_offending_flows
             ?sinvar_spec (list_graph_to_graph ?G) ?nP",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 3),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, t_empty),
                       template_app (template_hole 3, template_var 3)),
                     template_hole 2),
                   template_var 3))),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 3)),
               template_var 0))
           ))),
    ("TopoS_Interface_impl.Generic_offending_list_correct",
     "[| wf_list_graph ?G;
         !!G nP.
            wf_list_graph G ==>
            ?sinvar_spec (list_graph_to_graph G) nP = ?sinvar_impl G nP |]
      ==> SecurityInvariant_withOffendingFlows.set_offending_flows
           ?sinvar_spec (list_graph_to_graph ?G) ?nP =
          set ` set (Generic_offending_list ?sinvar_impl ?G ?nP)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 3)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 6, template_var 3)),
           template_var 0),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3),
               template_var 0)))))),
    ("TopoS_Interface_impl.minimalize_offending_overapprox_spec_impl",
     "[| wf_list_graph ?G;
         !!G nP.
            wf_list_graph G ==>
            ?sinvar_spec (list_graph_to_graph G) nP = ?sinvar_impl G nP |]
      ==> TopoS_Interface_impl.minimalize_offending_overapprox
           (%G. ?sinvar_impl G ?nP) ?fs ?keeps ?G =
          TopoS_withOffendingFlows.minimalize_offending_overapprox
           (%G. ?sinvar_spec G ?nP) ?fs ?keeps (list_graph_to_graph ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 5)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, t_empty), template_var 1),
             template_var 0),
           template_var 5),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, t_empty), template_var 1),
             template_var 0),
           template_app (template_hole 3, template_var 5))))),
    ("TopoS_Interface_impl.TopoS_eval_impl_proofrule",
     "[| SecurityInvariant ?sinvar_spec ?default_node_properties
          ?receiver_violation;
         !!nP. wf_list_graph ?G ==>
               ?sinvar_spec (list_graph_to_graph ?G) nP =
               ?sinvar_impl ?G nP |]
      ==> (distinct (nodesL ?G) &
           distinct (edgesL ?G) &
           SecurityInvariant.eval ?sinvar_spec ?default_node_properties
            (list_graph_to_graph ?G) ?P) =
          (wf_list_graph ?G &
           ?sinvar_impl ?G
            (SecurityInvariant.node_props ?default_node_properties ?P))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2))),
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2))),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 4),
                 template_app (template_hole 7, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 9, template_var 2)),
           template_app
            (template_app (template_var 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 0))))))]
