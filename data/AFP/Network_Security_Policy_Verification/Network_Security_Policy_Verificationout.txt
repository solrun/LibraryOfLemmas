Loading theory "Draft.FiniteGraph" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Interface")
Loading theory "Draft.ML_GraphViz" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Impl")
Loading theory "Draft.TopoS_Util" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Interface")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.TopoS_Util"
### 0.040s elapsed time, 0.199s cpu time, 0.000s GC time
Loading theory "Draft.TopoS_Vertices" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Interface")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype open_viewer = AskTimeouted of real | DoNothing | OpenImmediately
signature GRAPHVIZ =
  sig
    val default_tune_node_format: term -> string -> string
    val node_to_string:
       Proof.context -> (term -> string -> string) -> term -> string
    val open_viewer: open_viewer ref
    val term_to_string: Proof.context -> term -> string
    val term_to_string_html: Proof.context -> term -> string
    val term_to_string_safe: Proof.context -> term -> string
    val visualize_graph:
       Proof.context -> (term -> string -> string) -> term -> unit
    val visualize_graph_pretty:
       Proof.context ->
         (term -> string -> string) ->
           (string * term) list -> string -> unit
  end
structure Graphviz: GRAPHVIZ
constructor AskTimeouted: real -> open_viewer
constructor DoNothing: open_viewer
constructor OpenImmediately: open_viewer
### theory "Draft.ML_GraphViz"
### 0.087s elapsed time, 0.381s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.548s cpu time, 0.035s GC time
Loading theory "Draft.Efficient_Distinct" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.FiniteListGraph_Impl")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class vertex = type +
  fixes vertex_1 :: "'a"
    and vertex_2 :: "'a"
    and vertex_3 :: "'a"
  assumes "distinct_vertices": "distinct [vertex_1, vertex_2, vertex_3]"
instantiation
  nat :: vertex
  vertex_1_nat == vertex_1 :: nat
  vertex_2_nat == vertex_2 :: nat
  vertex_3_nat == vertex_3 :: nat
locale wf_graph
  fixes G :: "'v graph"
  assumes "wf_graph G"
instantiation
  int :: vertex
  vertex_1_int == vertex_1 :: int
  vertex_2_int == vertex_2 :: int
  vertex_3_int == vertex_3 :: int
instantiation
  char :: vertex
  vertex_1_char == vertex_1 :: char
  vertex_2_char == vertex_2 :: char
  vertex_3_char == vertex_3 :: char
instantiation
  list :: (vertex) vertex
  vertex_1_list == vertex_1 :: 'a list
  vertex_2_list == vertex_2 :: 'a list
  vertex_3_list == vertex_3 :: 'a list
Found termination order: "size_list size <*mlex*> {}"
val tune_string_vertex_format = fn: term -> string -> string
### theory "Draft.TopoS_Vertices"
### 0.277s elapsed time, 1.087s cpu time, 0.035s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.328s elapsed time, 1.280s cpu time, 0.099s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.ExtrEqs")
### theory "Draft.FiniteGraph"
### 0.529s elapsed time, 2.092s cpu time, 0.174s GC time
Loading theory "Draft.TopoS_Interface" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification")
### theory "HOL-Library.Set_Algebras"
### 0.212s elapsed time, 0.818s cpu time, 0.139s GC time
Loading theory "Draft.vertex_example_simps" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Interface_impl" via "Draft.TopoS_Helper")
### theory "Draft.vertex_example_simps"
### 0.168s elapsed time, 0.672s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (fst (snd p))) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
Found termination order:
  "(%p. length (fst (snd p))) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order:
  "(%p. length (fst (snd p))) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
consts
  flat :: "'a list stream => 'a stream"
locale SecurityInvariant
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
    and default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
    and receiver_violation :: "bool"
  assumes "SecurityInvariant sinvar \<bottom> receiver_violation"
### theory "Draft.Efficient_Distinct"
### 1.164s elapsed time, 4.453s cpu time, 0.756s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.ExtrEqs")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "{}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
locale SecurityInvariant_IFS
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
    and default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
  assumes "SecurityInvariant_IFS sinvar \<bottom>"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "HOL-Library.Stream"
### 0.978s elapsed time, 3.716s cpu time, 0.692s GC time
Loading theory "Draft.FiniteListGraph" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Interface_impl")
locale SecurityInvariant_IFS_otherDirectrion
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
    and default_node_properties :: "'b"  (\<open>\<bottom>\<close>)
  assumes "SecurityInvariant_IFS_otherDirectrion sinvar \<bottom>"
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant_ACS
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
    and default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
  assumes "SecurityInvariant_ACS sinvar \<bottom>"
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant_ACS_otherDirectrion
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
    and default_node_properties :: "'b"  (\<open>\<bottom>\<close>)
  assumes "SecurityInvariant_ACS_otherDirectrion sinvar \<bottom>"
### theory "Draft.TopoS_Interface"
### 1.039s elapsed time, 3.958s cpu time, 0.682s GC time
Loading theory "Draft.TopoS_withOffendingFlows" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Interface_impl" via "Draft.TopoS_Helper" via "Draft.TopoS_ENF")
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.069s elapsed time, 4.046s cpu time, 1.031s GC time
Found termination order: "size <*mlex*> {}"
"1"
  :: "nat"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
### theory "Draft.FiniteListGraph"
### 1.004s elapsed time, 3.789s cpu time, 0.966s GC time
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "is_offending_flows_def" =
      \<open>is_offending_flows ?f ?G ?nP ==
             ~ sinvar ?G ?nP & sinvar (delete_edges ?G ?f) ?nP\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "is_offending_flows_min_set_def" =
      \<open>is_offending_flows_min_set ?f ?G ?nP ==
             is_offending_flows ?f ?G ?nP &
             (ALL (e1, e2):?f.
                 ~ sinvar (add_edge e1 e2 (delete_edges ?G ?f)) ?nP)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "set_offending_flows_def" =
      \<open>set_offending_flows ?G ?nP =
             {F. F <= edges ?G &
                 is_offending_flows_min_set F ?G ?nP}\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "offending_not_empty" =
      \<open>?F : set_offending_flows ?G ?nP ==> ?F ~= {}\<close>
  notes theorem
    "empty_offending_contra" =
      \<open>[| ?F : set_offending_flows ?G ?nP; ?F = {} |]
             ==> False\<close>
  notes theorem
    "offending_notevalD" =
      \<open>?F : set_offending_flows ?G ?nP ==> ~ sinvar ?G ?nP\<close>
  notes theorem
    "sinvar_no_offending" =
      \<open>sinvar ?G ?nP ==> set_offending_flows ?G ?nP = {}\<close>
  notes theorem
    "removing_offending_flows_makes_invariant_hold" =
      \<open>ALL F:set_offending_flows ?G ?nP.
                sinvar (delete_edges ?G F) ?nP\<close>
  notes theorem
    "valid_without_offending_flows" =
      \<open>?F : set_offending_flows ?G ?nP ==>
             sinvar (delete_edges ?G ?F) ?nP\<close>
  notes theorem
    "set_offending_flows_simp" =
      \<open>wf_graph ?G ==>
             set_offending_flows ?G ?nP =
             {F. F <= edges ?G &
                 (~ sinvar ?G ?nP &
                  sinvar (| nodes = nodes ?G, edges = edges ?G - F |) ?nP) &
                 (ALL (e1, e2):F.
                     ~ sinvar
                        (| nodes = nodes ?G,
                           edges = {(e1, e2)} Un (edges ?G - F) |)
                        ?nP)}\<close>
"CHR ''A''"
  :: "char"
locale SecurityInvariant
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
    and default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
    and receiver_violation :: "bool"
  assumes "SecurityInvariant sinvar \<bottom> receiver_violation"
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "is_offending_flows_def" =
      \<open>is_offending_flows ?f ?G ?nP ==
             ~ sinvar ?G ?nP & sinvar (delete_edges ?G ?f) ?nP\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "is_offending_flows_min_set_def" =
      \<open>is_offending_flows_min_set ?f ?G ?nP ==
             is_offending_flows ?f ?G ?nP &
             (ALL (e1, e2):?f.
                 ~ sinvar (add_edge e1 e2 (delete_edges ?G ?f)) ?nP)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "set_offending_flows_def" =
      \<open>set_offending_flows ?G ?nP =
             {F. F <= edges ?G &
                 is_offending_flows_min_set F ?G ?nP}\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "offending_not_empty" =
      \<open>?F : set_offending_flows ?G ?nP ==> ?F ~= {}\<close>
  notes theorem
    "empty_offending_contra" =
      \<open>[| ?F : set_offending_flows ?G ?nP; ?F = {} |]
             ==> False\<close>
  notes theorem
    "offending_notevalD" =
      \<open>?F : set_offending_flows ?G ?nP ==> ~ sinvar ?G ?nP\<close>
  notes theorem
    "sinvar_no_offending" =
      \<open>sinvar ?G ?nP ==> set_offending_flows ?G ?nP = {}\<close>
  notes theorem
    "removing_offending_flows_makes_invariant_hold" =
      \<open>ALL F:set_offending_flows ?G ?nP.
                sinvar (delete_edges ?G F) ?nP\<close>
  notes theorem
    "valid_without_offending_flows" =
      \<open>?F : set_offending_flows ?G ?nP ==>
             sinvar (delete_edges ?G ?F) ?nP\<close>
  notes theorem
    "set_offending_flows_simp" =
      \<open>wf_graph ?G ==>
             set_offending_flows ?G ?nP =
             {F. F <= edges ?G &
                 (~ sinvar ?G ?nP &
                  sinvar (| nodes = nodes ?G, edges = edges ?G - F |) ?nP) &
                 (ALL (e1, e2):F.
                     ~ sinvar
                        (| nodes = nodes ?G,
                           edges = {(e1, e2)} Un (edges ?G - F) |)
                        ?nP)}\<close>
  notes
    "SecurityInvariant_preliminaries_axioms" =
      (\<open>SecurityInvariant_preliminaries sinvar\<close>)
      ["attribute" "<attribute>"]
  notes
    "defined_offending" =
      \<open>[| wf_graph ?G; ~ sinvar ?G ?nP |]
             ==> set_offending_flows ?G ?nP ~= {}\<close>
  notes
    "mono_sinvar" =
      \<open>[| wf_graph (| nodes = ?N, edges = ?E |); ?E' <= ?E;
                sinvar (| nodes = ?N, edges = ?E |) ?nP |]
             ==> sinvar (| nodes = ?N, edges = ?E' |) ?nP\<close>
  notes
    "mono_offending" =
      \<open>[| wf_graph ?G; is_offending_flows ?ff ?G ?nP |]
             ==> is_offending_flows (?ff Un ?f') ?G ?nP\<close>
  notes
    "SecurityInvariant_axioms" =
      (\<open>SecurityInvariant sinvar \<bottom> receiver_violation\<close>)
      ["attribute" "<attribute>"]
  notes
    "default_secure" =
      \<open>[| wf_graph ?G; ~ sinvar ?G ?nP;
                ?F : set_offending_flows ?G ?nP |]
             ==> (~ receiver_violation -->
                  ?i : fst ` ?F --> ~ sinvar ?G (?nP(?i := \<bottom>))) &
                 (receiver_violation -->
                  ?i : snd ` ?F -->
                  ~ sinvar ?G (?nP(?i := \<bottom>)))\<close>
  notes
    "default_unique" =
      \<open>?otherbot ~= \<bottom> ==>
             EX G nP i F.
                wf_graph G &
                ~ sinvar G nP &
                F : set_offending_flows G nP &
                sinvar (delete_edges G F) nP &
                (~ receiver_violation -->
                 i : fst ` F & sinvar G (nP(i := ?otherbot))) &
                (receiver_violation -->
                 i : snd ` F & sinvar G (nP(i := ?otherbot)))\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props_graph ==
            lfp (%p x1 x2.
                    EX node_props_sum P.
                       x1 = P &
                       x2 =
                       (%i. case node_properties P i of None => \<bottom>
                            | Some property => property))\<close>)
      ["nitpick_unfold"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props_graph ?P
             (%i. case node_properties ?P i of None => \<bottom>
                  | Some property => property)\<close>)
      ["Pure.intro" ?]
  notes
    "node_props_graph.intros" =
      \<open>node_props_graph ?P
              (%i. case node_properties ?P i of None => \<bottom>
                   | Some property => property)\<close>
  notes
    "node_props_graph.cases" =
      (\<open>[| node_props_graph ?a1.0 ?a2.0;
                 !!node_props_sum P.
                    [| ?a1.0 = P;
                       ?a2.0 =
                       (%i. case node_properties P i of None => \<bottom>
                            | Some property => property) |]
                    ==> ?P |]
              ==> ?P\<close>)
      ["consumes" - 1, "constraints" 2, "attribute" "<attribute>",
        "Pure.elim" ?]
  notes
    "node_props_graph.induct" =
      (\<open>[| node_props_graph ?x1.0 ?x2.0;
                 !!node_props_sum P.
                    ?P P
                     (%i. case node_properties P i of None => \<bottom>
                          | Some property => property) |]
              ==> ?P ?x1.0 ?x2.0\<close>)
      ["consumes" - 1]
  notes
    "node_props_graph.simps" =
      (\<open>node_props_graph ?a1.0 ?a2.0 =
              (EX node_props_sum P.
                  ?a1.0 = P &
                  ?a2.0 =
                  (%i. case node_properties P i of None => \<bottom>
                       | Some property => property))\<close>)
      ["attribute" "<attribute>"]
  notes
    "node_props_graph.inducts" =
      (\<open>[| node_props_graph ?x1.0 ?x2.0;
                 !!node_props_sum P.
                    ?P P
                     (%i. case node_properties P i of None => \<bottom>
                          | Some property => property) |]
              ==> ?P ?x1.0 ?x2.0\<close>)
      ["consumes" - 1, "attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props_rel == lfp (%p x1 x2. False)\<close>)
      ["nitpick_unfold"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes "node_props_rel.intros" =
  notes
    "node_props_rel.cases" =
      (\<open>node_props_rel ?a1.0 ?a2.0 ==> ?P\<close>)
      ["consumes" 0, "constraints" 2, "attribute" "<attribute>",
        "Pure.elim" ?]
  notes
    "node_props_rel.induct" =
      (\<open>node_props_rel ?x1.0 ?x2.0 ==> ?P ?x1.0 ?x2.0\<close>)
      ["consumes" 0]
  notes
    "node_props_rel.simps" =
      (\<open>node_props_rel ?a1.0 ?a2.0 = False\<close>)
      ["attribute" "<attribute>"]
  notes
    "node_props_rel.inducts" =
      (\<open>node_props_rel ?x1.0 ?x2.0 ==> ?P ?x1.0 ?x2.0\<close>)
      ["consumes" 0, "attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props_dom ?P ==>
            node_props ?P =
            (%i. case node_properties ?P i of None => \<bottom>
                 | Some property => property)\<close>)
      ["nitpick_psimp"]
  notes
    "node_props.psimps" =
      \<open>node_props_dom ?P ==>
             node_props ?P =
             (%i. case node_properties ?P i of None => \<bottom>
                  | Some property => property)\<close>
  notes
    "node_props.pinduct" =
      (\<open>[| node_props_dom ?a0.0; !!P. node_props_dom P ==> ?P P |]
              ==> ?P ?a0.0\<close>)
      ["case_names" "1", "consumes" 1, "induct" pred]
  notes
    "node_props.termination" = \<open>wf ?R ==> All node_props_dom\<close>
  notes
    "node_props.cases" = (\<open>(!!P. ?x = P ==> ?P) ==> ?P\<close>)
      ["case_names" "1"]
  notes
    "node_props.pelims" =
      (\<open>[| node_props ?x = ?y; node_props_dom ?x;
                 !!P. [| ?x = P;
                         ?y =
                         (%i. case node_properties P i of None => \<bottom>
                              | Some property => property);
                         node_props_dom P |]
                      ==> ?P |]
              ==> ?P\<close>)
      ["consumes" 1, "constraints" 1]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props ?P =
            (%i. case node_properties ?P i of None => \<bottom>
                 | Some property => property)\<close>)
      ["simp", "nitpick_simp"]
  notes
    "node_props.simps" =
      \<open>node_props ?P =
             (%i. case node_properties ?P i of None => \<bottom>
                  | Some property => property)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "node_props.induct" = (\<open>(!!P. ?P P) ==> ?P ?a0.0\<close>)
      ["case_names" "1"]
  notes
    "node_props.elims" =
      (\<open>[| node_props ?x = ?y;
                 !!P. [| ?x = P;
                         ?y =
                         (%i. case node_properties P i of None => \<bottom>
                              | Some property => property) |]
                      ==> ?P |]
              ==> ?P\<close>)
      ["consumes" 1, "constraints" 1]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "node_props_formaldef_def" =
      \<open>node_props_formaldef ?P ==
             %i. if i : dom (node_properties ?P)
                 then the (node_properties ?P i) else \<bottom>\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "node_props_eq_node_props_formaldef" =
      \<open>node_props_formaldef = node_props\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "eval_def" =
      \<open>eval ?G ?P == wf_graph ?G & sinvar ?G (node_props ?P)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "unique_common_math_notation" =
      \<open>ALL G nP i F.
                wf_graph G &
                ~ sinvar G nP &
                F : set_offending_flows G nP &
                sinvar (delete_edges G F) nP &
                (~ receiver_violation -->
                 i : fst ` F --> ~ sinvar G (nP(i := ?otherbot))) &
                (receiver_violation -->
                 i : snd ` F --> ~ sinvar G (nP(i := ?otherbot))) ==>
             ?otherbot = \<bottom>\<close>
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
Found termination order: "size <*mlex*> {}"
"[4, 3, 2, 1]"
  :: "nat list"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
"[4, 3, 2]"
  :: "nat list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
### theory "Draft.TopoS_withOffendingFlows"
### 1.132s elapsed time, 4.280s cpu time, 1.069s GC time
Loading theory "Draft.TopoS_ENF" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Interface_impl" via "Draft.TopoS_Helper")
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
"{{1, 2, 3}, {1, 2}, {1}, {1, 3}, {3}, {}, {2}, {2, 3}, {8}, {9}}"
  :: "int set set"
"{{3, 2, 1, 8}, {3, 2, 1, 9}, {2, 1, 8}, {2, 1, 9}, {1, 8}, {1, 9},
  {3, 1, 8}, {3, 1, 9}, {3, 8}, {3, 9}, {8}, {9}, {2, 8}, {2, 9}, {3, 2, 8},
  {3, 2, 9}}"
  :: "int set set"
Found termination order: "size <*mlex*> {}"
"{{2, 8}, {2, 5, 6}, {8}, {5, 6}, {1, 8}, {1, 5, 6}, {2, 1, 8},
  {2, 1, 5, 6}, {2}, {}, {1}, {1, 2}}"
  :: "int set set"
### theory "HOL-Library.Tree"
### 2.483s elapsed time, 9.443s cpu time, 1.923s GC time
Loading theory "Draft.Templates" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.ExtrEqs")
"{{2}, {}, {1}, {1, 2}}"
  :: "int set set"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.089s elapsed time, 0.312s cpu time, 0.068s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Network_Security_Policy_VerificationTemplates")
### theory "Draft.TopoS_ENF"
### 0.565s elapsed time, 2.159s cpu time, 0.241s GC time
Loading theory "Draft.TopoS_Helper" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Interface_impl")
"True"
  :: "bool"
### theory "Draft.TopoS_Helper"
### 0.213s elapsed time, 0.551s cpu time, 0.000s GC time
Loading theory "Draft.SINVAR_ACLcommunicateWith" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.SINVAR_ACLnotCommunicateWith_impl" via "Draft.SINVAR_ACLnotCommunicateWith")
Loading theory "Draft.SINVAR_BLPbasic" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.SINVAR_BLPbasic_impl")
Loading theory "Draft.SINVAR_BLPtrusted" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.SINVAR_BLPtrusted_impl")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SINVAR_ACLcommunicateWith"
### 0.578s elapsed time, 2.161s cpu time, 1.104s GC time
Loading theory "Draft.SINVAR_ACLnotCommunicateWith" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.SINVAR_ACLnotCommunicateWith_impl")
### Cannot skip proof of schematic goal statement
Found termination order: "{}"
### theory "Draft.SINVAR_BLPbasic"
### 0.685s elapsed time, 2.602s cpu time, 1.174s GC time
Loading theory "Draft.SINVAR_CommunicationPartners" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.SINVAR_CommunicationPartners_impl")
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.953s elapsed time, 3.345s cpu time, 1.174s GC time
Loading theory "Draft.SINVAR_Dependability" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.SINVAR_Dependability_impl")
Found termination order: "{}"
### Cannot skip proof of schematic goal statement
Found termination order: "{}"
### theory "Draft.SINVAR_ACLnotCommunicateWith"
### 0.314s elapsed time, 1.253s cpu time, 0.161s GC time
Loading theory "Draft.SINVAR_Dependability_norefl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.SINVAR_Dependability_norefl_impl")
### theory "Draft.SINVAR_BLPtrusted"
### 0.922s elapsed time, 3.533s cpu time, 1.265s GC time
Loading theory "Draft.SINVAR_DomainHierarchyNG" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.SINVAR_DomainHierarchyNG_impl")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SINVAR_Dependability"
### 0.414s elapsed time, 1.632s cpu time, 0.228s GC time
Loading theory "Draft.SINVAR_NoRefl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.SINVAR_NoRefl_impl")
### theory "Draft.SINVAR_Dependability_norefl"
### 0.282s elapsed time, 1.118s cpu time, 0.137s GC time
Loading theory "Draft.SINVAR_NonInterference" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.SINVAR_NonInterference_impl")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Cannot skip proof of schematic goal statement
Found termination order: "{}"
### theory "Draft.SINVAR_NoRefl"
### 0.669s elapsed time, 2.641s cpu time, 0.266s GC time
Loading theory "Draft.SINVAR_SecGwExt" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.SINVAR_SecGwExt_impl")
### theory "Draft.SINVAR_NonInterference"
### 0.725s elapsed time, 2.846s cpu time, 0.383s GC time
Loading theory "Draft.SINVAR_Sink" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.SINVAR_Sink_impl")
### Cannot skip proof of schematic goal statement
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  domainNameDept :: order
  less_eq_domainNameDept == less_eq ::
    domainNameDept => domainNameDept => bool
  less_domainNameDept == less :: domainNameDept => domainNameDept => bool
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.SINVAR_CommunicationPartners"
### 1.682s elapsed time, 6.614s cpu time, 0.746s GC time
Loading theory "Draft.SINVAR_Subnets" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.SINVAR_Subnets_impl")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
instantiation
  domainNameDept :: top
  top_domainNameDept == top_class.top :: domainNameDept
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Cannot skip proof of schematic goal statement
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
### theory "Draft.SINVAR_Sink"
### 1.028s elapsed time, 4.047s cpu time, 0.307s GC time
Loading theory "Draft.SINVAR_SubnetsInGW" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.SINVAR_SubnetsInGW_impl")
### Cannot skip proof of schematic goal statement
Found termination order: "{}"
Found termination order: "{}"
instantiation
  domainName :: partial_order
  leq_domainName == leq :: domainName => domainName => bool
Found termination order: "{}"
Found termination order: "{}"
### Cannot skip proof of schematic goal statement
Found termination order: "{}"
instantiation
  domainName :: Lattice.lattice
Found termination order: "{}"
### theory "Draft.SINVAR_SecGwExt"
### 1.624s elapsed time, 6.383s cpu time, 0.616s GC time
Loading theory "Draft.SINVAR_Tainting" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.SINVAR_Tainting_impl")
Found termination order: "{}"
### theory "Draft.SINVAR_Subnets"
### 1.245s elapsed time, 4.894s cpu time, 0.453s GC time
Loading theory "Draft.SINVAR_TaintingTrusted" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library" via "Draft.SINVAR_TaintingTrusted_impl")
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "Draft.SINVAR_Tainting"
### 0.229s elapsed time, 0.909s cpu time, 0.090s GC time
Loading theory "Draft.TopoS_Composition_Theory" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification")
Found termination order: "{}"
### theory "Draft.SINVAR_SubnetsInGW"
### 1.008s elapsed time, 3.967s cpu time, 0.387s GC time
Loading theory "Draft.TopoS_Interface_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification")
Found termination order: "{}"
Found termination order: "{}"
locale TopoS_List_Impl
  fixes default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
    and sinvar_spec :: "'v graph => ('v => 'a) => bool"
    and sinvar_impl :: "'v list_graph => ('v => 'a) => bool"
    and receiver_violation :: "bool"
    and
    offending_flows_impl ::
      "'v list_graph => ('v => 'a) => ('v * 'v) list list"
    and node_props_impl :: "('v, 'a) TopoS_Params => 'v => 'a"
    and eval_impl :: "'v list_graph => ('v, 'a) TopoS_Params => bool"
  assumes
    "TopoS_List_Impl \<bottom> sinvar_spec sinvar_impl receiver_violation
      offending_flows_impl node_props_impl eval_impl"
### Cannot skip proof of schematic goal statement
Found termination order: "{}"
locale configured_SecurityInvariant
  fixes m :: "'v SecurityInvariant_configured"
  assumes "configured_SecurityInvariant m"
### theory "Draft.SINVAR_DomainHierarchyNG"
### 3.377s elapsed time, 13.289s cpu time, 1.332s GC time
### Cannot skip proof of schematic goal statement
### theory "Draft.SINVAR_TaintingTrusted"
### 0.790s elapsed time, 3.107s cpu time, 0.345s GC time
set_offending_flows ?G ?nP =
(if sinvar ?G ?nP then {}
 else {{(s, r).
        (s, r) : edges ?G & ~ (s = r --> ?nP s = node_config.Refl)}})
instantiation
  domainNameDept :: order
  less_eq_domainNameDept == less_eq ::
    domainNameDept => domainNameDept => bool
  less_domainNameDept == less :: domainNameDept => domainNameDept => bool
[| ?f : set_offending_flows ?G ?nP; ?i : fst ` ?f |]
==> ~ sinvar ?G (?nP(?i := Unassigned))
SecurityInvariant_withOffendingFlows.sinvar_mono ?sinvar =
(ALL nP N E' E.
    wf_graph (| nodes = N, edges = E |) &
    E' <= E & ?sinvar (| nodes = N, edges = E |) nP -->
    ?sinvar (| nodes = N, edges = E' |) nP)
configured_SecurityInvariant ?m ==
(ALL G.
    c_offending_flows ?m G =
    {F. F <= edges G &
        ~ c_sinvar ?m G &
        c_sinvar ?m (delete_edges G F) &
        (ALL (e1, e2):F.
            ~ c_sinvar ?m (add_edge e1 e2 (delete_edges G F)))}) &
(ALL N.
    wf_graph (| nodes = N, edges = {} |) -->
    c_sinvar ?m (| nodes = N, edges = {} |)) &
(ALL N E E'.
    wf_graph (| nodes = N, edges = E |) -->
    E' <= E -->
    c_sinvar ?m (| nodes = N, edges = E |) -->
    c_sinvar ?m (| nodes = N, edges = E' |))
[| configured_SecurityInvariant ?m; wf_graph (| nodes = ?N, edges = ?E |);
   ?E' <= ?E; c_sinvar ?m (| nodes = ?N, edges = ?E |) |]
==> c_sinvar ?m (| nodes = ?N, edges = ?E' |)
"''i8'' -- ''CoffeeMachine'' -- Leaf"
  :: "domainNameDept"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
"TaintsUntaints {''foo''} {''bar''}"
  :: "SINVAR_TaintingTrusted.taints"
[| configured_SecurityInvariant ?m; wf_graph (| nodes = ?V, edges = ?E |);
   ?E' <= ?E |]
==> \<Union> (c_offending_flows ?m (| nodes = ?V, edges = ?E' |))
    <= \<Union> (c_offending_flows ?m (| nodes = ?V, edges = ?E |))
[| configured_SecurityInvariant ?m; wf_graph (| nodes = ?V, edges = ?E |);
   \<Union> (c_offending_flows ?m (| nodes = ?V, edges = ?E |)) <= ?X |]
==> \<Union> (c_offending_flows ?m (| nodes = ?V, edges = ?E - ?E' |))
    <= ?X - ?E'
"{''foo'', ''bar''}"
  :: "char list set"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.TopoS_Composition_Theory"
### 1.269s elapsed time, 4.751s cpu time, 0.612s GC time
Loading theory "Draft.TopoS_Stateful_Policy" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification")
"generate_valid_topology"
  :: "'a SecurityInvariant_configured list => 'a graph => 'a graph"
"all_security_requirements_fulfilled"
  :: "'a SecurityInvariant_configured list => 'a graph => bool"
locale TopoS_modelLibrary
  fixes m :: "('v, 'a) TopoS_packed"
    and sinvar_spec :: "'v graph => ('v => 'a) => bool"
  assumes "TopoS_modelLibrary m sinvar_spec"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
TopoS_withOffendingFlows.minimalize_offending_overapprox (%G. ?m G ?nP) ?fs
 ?keeps ?G =
SecurityInvariant_withOffendingFlows.minimalize_offending_overapprox ?m ?fs
 ?keeps ?G ?nP
### theory "Draft.TopoS_Interface_impl"
### 1.285s elapsed time, 4.283s cpu time, 0.505s GC time
Loading theory "Draft.SINVAR_ACLcommunicateWith_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library")
Loading theory "Draft.SINVAR_ACLnotCommunicateWith_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library")
Loading theory "Draft.SINVAR_BLPbasic_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library")
locale wf_stateful_policy
  fixes \<T> :: "'v stateful_policy"
  assumes "wf_stateful_policy \<T>"
locale stateful_policy_compliance
  fixes \<T> :: "'v stateful_policy"
    and G :: "'v graph"
    and M :: "'v SecurityInvariant_configured list"
  assumes "stateful_policy_compliance \<T> G M"
### theory "Draft.TopoS_Stateful_Policy"
### 0.968s elapsed time, 3.032s cpu time, 2.019s GC time
Loading theory "Draft.TopoS_Stateful_Policy_Algorithm" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SINVAR_ACLnotCommunicateWith_impl"
### 0.917s elapsed time, 3.354s cpu time, 2.090s GC time
Loading theory "Draft.SINVAR_BLPtrusted_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library")
### theory "Draft.SINVAR_ACLcommunicateWith_impl"
### 0.937s elapsed time, 3.432s cpu time, 2.090s GC time
Loading theory "Draft.SINVAR_CommunicationPartners_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library")
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.SINVAR_BLPbasic_impl"
### 1.172s elapsed time, 4.374s cpu time, 2.090s GC time
Loading theory "Draft.SINVAR_Dependability_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SINVAR_CommunicationPartners_impl"
### 0.344s elapsed time, 1.357s cpu time, 0.115s GC time
Loading theory "Draft.SINVAR_Dependability_norefl_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library")
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.SINVAR_BLPtrusted_impl"
### 0.454s elapsed time, 1.804s cpu time, 0.115s GC time
Loading theory "Draft.SINVAR_DomainHierarchyNG_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.TopoS_Stateful_Policy_Algorithm"
### 0.782s elapsed time, 3.087s cpu time, 0.186s GC time
Loading theory "Draft.SINVAR_NoRefl_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library")
Found termination order: "{}"
### theory "Draft.SINVAR_Dependability_impl"
### 0.365s elapsed time, 1.451s cpu time, 0.115s GC time
Loading theory "Draft.SINVAR_NonInterference_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library")
### theory "Draft.SINVAR_Dependability_norefl_impl"
### 0.281s elapsed time, 1.133s cpu time, 0.000s GC time
Loading theory "Draft.SINVAR_SecGwExt_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SINVAR_NoRefl_impl"
### 0.336s elapsed time, 1.325s cpu time, 0.175s GC time
Loading theory "Draft.SINVAR_Sink_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SINVAR_DomainHierarchyNG_impl"
### 0.483s elapsed time, 1.914s cpu time, 0.175s GC time
Loading theory "Draft.SINVAR_SubnetsInGW_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library")
Found termination order: "{}"
### theory "Draft.SINVAR_SecGwExt_impl"
### 0.384s elapsed time, 1.516s cpu time, 0.175s GC time
Loading theory "Draft.SINVAR_Subnets_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library")
### theory "Draft.SINVAR_NonInterference_impl"
### 0.441s elapsed time, 1.741s cpu time, 0.175s GC time
Loading theory "Draft.SINVAR_TaintingTrusted_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SINVAR_Sink_impl"
### 0.348s elapsed time, 1.377s cpu time, 0.150s GC time
Loading theory "Draft.SINVAR_Tainting_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification" via "Draft.TopoS_Library")
### theory "Draft.SINVAR_SubnetsInGW_impl"
### 0.352s elapsed time, 1.393s cpu time, 0.150s GC time
Loading theory "Draft.TopoS_Composition_Theory_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.SINVAR_Subnets_impl"
### 0.357s elapsed time, 1.409s cpu time, 0.150s GC time
stateful_policy_compliance ?\<T> ?G ?M ==>
all_security_requirements_fulfilled (get_IFS ?M)
 (stateful_policy_to_network_graph ?\<T>)
stateful_policy_compliance ?\<T> ?G ?M ==>
ALL E<=backflows (flows_state ?\<T>).
   ALL F:get_offending_flows (get_ACS ?M)
          (| nodes = hosts ?\<T>,
             edges = flows_fix ?\<T> Un flows_state ?\<T> Un E |).
      F <= E
stateful_policy_compliance ?\<T> ?G ?M ==>
ALL (v\<^sub>1, v\<^sub>2):backflows (flows_state ?\<T>).
   \<Union>
    (get_offending_flows (get_ACS ?M)
      (| nodes = hosts ?\<T>,
         edges =
           flows_fix ?\<T> Un flows_state ?\<T> Un
           {(v\<^sub>1, v\<^sub>2)} |))
   <= {(v\<^sub>1, v\<^sub>2)}
stateful_policy_compliance ?\<T> ?G ?M ==>
\<Union>
 (get_offending_flows (get_ACS ?M) (stateful_policy_to_network_graph ?\<T>))
<= backflows (flows_state ?\<T>)
stateful_policy_compliance ?\<T> ?G ?M ==>
\<Union> (get_offending_flows ?M (stateful_policy_to_network_graph ?\<T>))
<= backflows (flows_state ?\<T>)
stateful_policy_compliance ?\<T> ?G ?M ==>
all_security_requirements_fulfilled ?M
 (| nodes = hosts ?\<T>, edges = flows_fix ?\<T> Un flows_state ?\<T> |)
[| valid_reqs (get_IFS ?M); wf_graph ?G;
   all_security_requirements_fulfilled (get_IFS ?M) ?G;
   set ?edgesList <= edges ?G |]
==> all_security_requirements_fulfilled (get_IFS ?M)
     (stateful_policy_to_network_graph
       (| hosts = nodes ?G, flows_fix = edges ?G,
          flows_state = set (filter_IFS_no_violations ?G ?M ?edgesList) |))
[| valid_reqs (get_IFS ?M); wf_graph ?G; set ?edgesList = edges ?G |]
==> let stateful = set (filter_IFS_no_violations ?G ?M ?edgesList)
    in ALL e:edges ?G - stateful.
          ~ all_security_requirements_fulfilled (get_IFS ?M)
             (stateful_policy_to_network_graph
               (| hosts = nodes ?G, flows_fix = edges ?G,
                  flows_state = {e} Un stateful |))
CommunicationPartners.node_props ?P =
(%i. case node_properties ?P i of
     None => SINVAR_CommunicationPartners.default_node_properties
     | Some property => property)
[| valid_reqs ?M; wf_graph (| nodes = ?V, edges = E Un backflows E |);
   ?E' <= E Un backflows E;
   \<Union>
    (get_offending_flows ?M (| nodes = ?V, edges = E Un backflows E |))
   <= backflows E - E |]
==> \<Union>
     (get_offending_flows ?M
       (| nodes = ?V, edges = E Un backflows E - ?E' |))
    <= backflows E - E - ?E'
[| valid_reqs (get_ACS ?M); wf_graph ?G; set ?edgesList <= edges ?G;
   all_security_requirements_fulfilled (get_ACS ?M) ?G;
   ?\<T> =
   (| hosts = nodes ?G, flows_fix = edges ?G,
      flows_state =
        set (filter_compliant_stateful_ACS ?G ?M ?edgesList) |) |]
==> ALL F:get_offending_flows (get_ACS ?M)
           (stateful_policy_to_network_graph ?\<T>).
       F <= backflows (filternew_flows_state ?\<T>)
[| valid_reqs (get_ACS ?M); wf_graph (| nodes = ?V, edges = ?E |);
   set ?edgesList = ?E;
   ?stateful =
   set (filter_compliant_stateful_ACS (| nodes = ?V, edges = ?E |) ?M
         ?edgesList) |]
==> ALL e:?E - (?stateful Un {e: ?E. e : backflows ?E}).
       ~ \<Union>
          (get_offending_flows (get_ACS ?M)
            (stateful_policy_to_network_graph
              (| hosts = ?V, flows_fix = ?E,
                 flows_state = ?stateful Un {e} |)))
         <= backflows
             (filternew_flows_state
               (| hosts = ?V, flows_fix = ?E,
                  flows_state = ?stateful Un {e} |))
### theory "Draft.SINVAR_TaintingTrusted_impl"
### 0.379s elapsed time, 1.494s cpu time, 0.150s GC time
Found termination order: "{}"
"True"
  :: "bool"
"False"
  :: "bool"
"[3, 3, 3, 3]"
  :: "nat list"
"[1, 0, 0, 0]"
  :: "nat list"
### theory "Draft.SINVAR_Tainting_impl"
### 0.517s elapsed time, 2.052s cpu time, 0.124s GC time
"True"
  :: "bool"
"False"
  :: "bool"
"True"
  :: "bool"
"False"
  :: "bool"
"True"
  :: "bool"
"True"
  :: "bool"
Found termination order: "{}"
"[[(1, 2)], [(2, 3)], [(3, 4)]]"
  :: "(nat * nat) list list"
"True"
  :: "bool"
"True"
  :: "bool"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
"True"
  :: "bool"
"True"
  :: "bool"
"False"
  :: "bool"
Found termination order: "{}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.TopoS_Composition_Theory_impl"
### 1.179s elapsed time, 4.675s cpu time, 0.252s GC time
Loading theory "Draft.TopoS_Stateful_Policy_impl" (required by "Draft.Network_Security_Policy_VerificationTemplates" via "Draft.Network_Security_Policy_Verification")
"[[(''LowerSRV'', ''UpperSRV'')]]"
  :: "(char list * char list) list list"
"False"
  :: "bool"
"True"
  :: "bool"
"False"
  :: "bool"
"True"
  :: "bool"
"True"
  :: "bool"
"True"
  :: "bool"
"False"
  :: "bool"
"[]"
  :: "(nat * nat) list list"
"False"
  :: "bool"
"[[(2, 1), (8, 11), (8, 2)]]"
  :: "(nat * nat) list list"
"True"
  :: "bool"
"True"
  :: "bool"
"False"
  :: "bool"
"True"
  :: "bool"
"[[(42, 4)]]"
  :: "(nat * nat) list list"
"True"
  :: "bool"
"True"
  :: "bool"
"False"
  :: "bool"
"True"
  :: "bool"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
"True"
  :: "bool"
"X"
  :: "('v, 'a) TopoS_packed"
"True"
  :: "bool"
new_configured_SecurityInvariant
 (?sinvar, ?defbot, ?receiver_violation, ?nP) =
Some ?m ==>
configured_SecurityInvariant ?m
[| TopoS_modelLibrary ?m ?sinvar_spec; ?nP = nm_node_props ?m ?C;
   ?Spec =
   (| c_sinvar = %G. ?sinvar_spec G ?nP,
      c_offending_flows =
        %G. SecurityInvariant_withOffendingFlows.set_offending_flows
             ?sinvar_spec G ?nP,
      c_isIFS = nm_receiver_violation ?m |) |]
==> new_configured_SecurityInvariant
     (?sinvar_spec, nm_default ?m, nm_receiver_violation ?m, ?nP) =
    Some ?Spec
ALL (m_impl, m_spec):set ?M.
   SecurityInvariant_complies_formal_def m_impl m_spec ==>
ALL (m_impl, m_spec)
    :set (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl ?M))
           (TopoS_Composition_Theory.get_IFS (get_spec ?M))).
   SecurityInvariant_complies_formal_def m_impl m_spec
ALL (m_impl, m_spec):set ?M.
   SecurityInvariant_complies_formal_def m_impl m_spec ==>
get_impl
 (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl ?M))
   (TopoS_Composition_Theory.get_IFS (get_spec ?M))) =
TopoS_Composition_Theory_impl.get_IFS (get_impl ?M)
ALL (m_impl, m_spec):set ?M.
   SecurityInvariant_complies_formal_def m_impl m_spec ==>
get_spec
 (zip (TopoS_Composition_Theory_impl.get_IFS (get_impl ?M))
   (TopoS_Composition_Theory.get_IFS (get_spec ?M))) =
TopoS_Composition_Theory.get_IFS (get_spec ?M)
ALL (m_impl, m_spec):set ?M.
   SecurityInvariant_complies_formal_def m_impl m_spec ==>
ALL (m_impl, m_spec)
    :set (zip (TopoS_Composition_Theory_impl.get_ACS (get_impl ?M))
           (TopoS_Composition_Theory.get_ACS (get_spec ?M))).
   SecurityInvariant_complies_formal_def m_impl m_spec
ALL (m_impl, m_spec):set ?M.
   SecurityInvariant_complies_formal_def m_impl m_spec ==>
get_impl
 (zip (TopoS_Composition_Theory_impl.get_ACS (get_impl ?M))
   (TopoS_Composition_Theory.get_ACS (get_spec ?M))) =
TopoS_Composition_Theory_impl.get_ACS (get_impl ?M)
ALL (m_impl, m_spec):set ?M.
   SecurityInvariant_complies_formal_def m_impl m_spec ==>
get_spec
 (zip (TopoS_Composition_Theory_impl.get_ACS (get_impl ?M))
   (TopoS_Composition_Theory.get_ACS (get_spec ?M))) =
TopoS_Composition_Theory.get_ACS (get_spec ?M)
[| valid_reqs ?M; wf_graph (| nodes = ?V, edges = ?E |); set ?Es = ?E;
   distinct ?Es |]
==> TopoS_Composition_Theory.all_security_requirements_fulfilled ?M
     (TopoS_Composition_Theory.generate_valid_topology_some ?M ?Es
       (| nodes = ?V, edges = ?E |))
"[[(42, 4), (3, 8), (11, 8)]]"
  :: "(nat * nat) list list"
"[1, 2, 3, 4, 6, 5]"
  :: "int list"
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.TopoS_Stateful_Policy_impl"
### 1.165s elapsed time, 3.806s cpu time, 0.282s GC time
*** Failed to load theory "Draft.FiniteListGraph_Impl" (unresolved "Draft.Efficient_Distinct")
*** Failed to load theory "Draft.TopoS_Library" (unresolved "Draft.Efficient_Distinct", "Draft.FiniteListGraph_Impl", "Draft.SINVAR_BLPbasic_impl", "Draft.SINVAR_BLPtrusted_impl", "Draft.SINVAR_SecGwExt_impl", "Draft.SINVAR_TaintingTrusted_impl", "Draft.SINVAR_Tainting_impl")
*** Failed to load theory "Draft.METASINVAR_SystemBoundary" (unresolved "Draft.SINVAR_BLPtrusted_impl")
*** Failed to load theory "Draft.TopoS_Impl" (unresolved "Draft.METASINVAR_SystemBoundary", "Draft.TopoS_Library")
*** Failed to load theory "Draft.Network_Security_Policy_Verification" (unresolved "Draft.TopoS_Impl", "Draft.TopoS_Library")
*** Failed to load theory "Draft.Network_Security_Policy_VerificationTemplates" (unresolved "Draft.Network_Security_Policy_Verification")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "58")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 111 of "$AFP/Network_Security_Policy_Verification/Security_Invariants/SINVAR_Tainting_impl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "56")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 19 of "$AFP/Network_Security_Policy_Verification/Security_Invariants/SINVAR_TaintingTrusted_impl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "54")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 82 of "$AFP/Network_Security_Policy_Verification/Security_Invariants/SINVAR_SecGwExt_impl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "52")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 77 of "$AFP/Network_Security_Policy_Verification/Security_Invariants/SINVAR_BLPtrusted_impl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "50")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 122 of "$AFP/Network_Security_Policy_Verification/Security_Invariants/SINVAR_BLPbasic_impl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "48")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 93 of "$AFP/Network_Security_Policy_Verification/Lib/Efficient_Distinct.thy")
Exception- TOPLEVEL_ERROR raised
