Loading theory "Draft.FiniteGraph" (required by "Draft.FiniteListGraphTemplates" via "Draft.FiniteListGraph")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FiniteListGraphTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FiniteListGraphTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FiniteListGraphTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.615s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FiniteListGraphTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.212s elapsed time, 0.858s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FiniteListGraphTemplates" via "Draft.ExtrEqs")
locale wf_graph
  fixes G :: "'v graph"
  assumes "wf_graph G"
### theory "HOL-Library.Nat_Bijection"
### 0.331s elapsed time, 1.313s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FiniteListGraphTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.FiniteGraph"
### 0.533s elapsed time, 2.105s cpu time, 0.198s GC time
Loading theory "Draft.FiniteListGraph" (required by "Draft.FiniteListGraphTemplates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.899s elapsed time, 3.416s cpu time, 0.769s GC time
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.958s elapsed time, 3.507s cpu time, 0.741s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.FiniteListGraph"
### 0.859s elapsed time, 3.035s cpu time, 0.741s GC time
Found termination order: "size <*mlex*> {}"
"[4, 3, 2]"
  :: "nat list"
"[4, 3, 2, 1]"
  :: "nat list"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.861s elapsed time, 5.412s cpu time, 0.989s GC time
Loading theory "Draft.Templates" (required by "Draft.FiniteListGraphTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FiniteListGraphTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.487s elapsed time, 0.544s cpu time, 0.071s GC time
Loading theory "Draft.FiniteListGraphTemplates"
val templateLemmas =
   [("FiniteListGraph.wf_list_graph_iff_wf_graph",
     "wf_graph (list_graph_to_graph ?G) = wf_list_graph_axioms ?G",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("FiniteListGraph.backlinks_correct",
     "backflows (set ?E) = set (backlinks ?E)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("FiniteListGraph.delete_edges_nodes",
     "nodesL (FiniteListGraph.delete_edges ?G ?es) = nodesL ?G",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("FiniteListGraph.undirected_correct",
     "FiniteGraph.undirected (list_graph_to_graph ?G) =
      list_graph_to_graph (FiniteListGraph.undirected ?G)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("FiniteListGraph.undirected_wf",
     "wf_list_graph ?G ==> wf_list_graph (FiniteListGraph.undirected ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("FiniteListGraph.backlinks_distinct",
     "distinct ?E ==> distinct (backlinks ?E)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("FiniteListGraph.add_node_wf",
     "wf_list_graph ?G ==> wf_list_graph (FiniteListGraph.add_node ?v ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("FiniteListGraph.delete_edges_wf",
     "wf_list_graph ?G ==>
      wf_list_graph (FiniteListGraph.delete_edges ?G ?E)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FiniteListGraph.delete_node_wf",
     "wf_list_graph ?G ==>
      wf_list_graph (FiniteListGraph.delete_node ?v ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("FiniteListGraph.distinct_succ_rtran",
     "wf_list_graph ?G ==> distinct (FiniteListGraph.succ_rtran ?G ?v)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FiniteListGraph.distinct_succ_tran",
     "wf_list_graph ?G ==> distinct (FiniteListGraph.succ_tran ?G ?v)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FiniteListGraph.succ_rtran_correct",
     "FiniteGraph.succ_rtran (list_graph_to_graph ?G) ?v =
      set (FiniteListGraph.succ_rtran ?G ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FiniteListGraph.succ_tran_correct",
     "FiniteGraph.succ_tran (list_graph_to_graph ?G) ?v =
      set (FiniteListGraph.succ_tran ?G ?v)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FiniteListGraph.delete_edges_set_nodes",
     "set (nodesL (FiniteListGraph.delete_edges ?G ?E)) = set (nodesL ?G)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 1)))),
    ("FiniteListGraph.add_node_set_edges",
     "set (edgesL (FiniteListGraph.add_node ?v ?G)) = set (edgesL ?G)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("FiniteListGraph.add_node_correct",
     "FiniteGraph.add_node ?v (list_graph_to_graph ?G) =
      list_graph_to_graph (FiniteListGraph.add_node ?v ?G)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FiniteListGraph.delete_edges_length",
     "length (edgesL (FiniteListGraph.delete_edges ?G ?f))
      <= length (edgesL ?G)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 1)))),
    ("FiniteListGraph.add_edge_wf",
     "wf_list_graph ?G ==>
      wf_list_graph (FiniteListGraph.add_edge ?v ?v' ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("FiniteListGraph.delete_edge_wf",
     "wf_list_graph ?G ==>
      wf_list_graph (FiniteListGraph.delete_edge ?v ?v' ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("FiniteListGraph.delete_edge_set_nodes",
     "set (nodesL (FiniteListGraph.delete_edge ?v ?v' ?G)) =
      set (nodesL ?G)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("FiniteListGraph.delete_edges_correct",
     "FiniteGraph.delete_edges (list_graph_to_graph ?G) (set ?E) =
      list_graph_to_graph (FiniteListGraph.delete_edges ?G ?E)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FiniteListGraph.delete_edge_length",
     "length (edgesL (FiniteListGraph.delete_edge ?v ?v' ?G))
      <= length (edgesL ?G)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)))),
    ("FiniteListGraph.add_node_wf2",
     "wf_graph (list_graph_to_graph ?G) ==>
      wf_graph (list_graph_to_graph (FiniteListGraph.add_node ?v ?G))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("FiniteListGraph.delete_edges_wf2",
     "wf_graph (list_graph_to_graph ?G) ==>
      wf_graph (list_graph_to_graph (FiniteListGraph.delete_edges ?G ?E))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("FiniteListGraph.backlinks_alt",
     "backlinks ?E = map (%e. (snd e, fst e)) ?E",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app (template_hole 3, t_empty), template_var 0))),
    ("FiniteListGraph.add_edge_correct",
     "FiniteGraph.add_edge ?v ?v' (list_graph_to_graph ?G) =
      list_graph_to_graph (FiniteListGraph.add_edge ?v ?v' ?G)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("FiniteListGraph.delete_edge_correct",
     "FiniteGraph.delete_edge ?v ?v' (list_graph_to_graph ?G) =
      list_graph_to_graph (FiniteListGraph.delete_edge ?v ?v' ?G)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("FiniteListGraph.delete_edges_chain",
     "FiniteListGraph.delete_edges ?G (?as @ ?bs) =
      FiniteListGraph.delete_edges (FiniteListGraph.delete_edges ?G ?as)
       ?bs",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("FiniteListGraph.delete_edges_commute",
     "FiniteListGraph.delete_edges (FiniteListGraph.delete_edges ?G ?as)
       ?bs =
      FiniteListGraph.delete_edges (FiniteListGraph.delete_edges ?G ?bs)
       ?as",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_var 1))),
    ("FiniteListGraph.add_edge_wf2",
     "wf_graph (list_graph_to_graph ?G) ==>
      wf_graph (list_graph_to_graph (FiniteListGraph.add_edge ?v ?v' ?G))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)))
           ))),
    ("FiniteListGraph.delete_edge_wf2",
     "wf_graph (list_graph_to_graph ?G) ==>
      wf_graph
       (list_graph_to_graph (FiniteListGraph.delete_edge ?v ?v' ?G))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 2)))
           ))),
    ("FiniteListGraph.delete_edges_set_edges",
     "set (edgesL (FiniteListGraph.delete_edges ?G ?E)) =
      set (edgesL ?G) - set ?E",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app (template_hole 3, template_var 0)))),
    ("FiniteListGraph.num_reachable_correct",
     "wf_list_graph ?G ==>
      FiniteGraph.num_reachable (list_graph_to_graph ?G) ?v =
      FiniteListGraph.num_reachable ?G ?v",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FiniteListGraph.num_reachable_norefl_correct",
     "wf_list_graph ?G ==>
      FiniteGraph.num_reachable_norefl (list_graph_to_graph ?G) ?v =
      FiniteListGraph.num_reachable_norefl ?G ?v",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("FiniteListGraph.distinct_rtrancl_list_impl",
     "[| distinct ?L; distinct ?ls |]
      ==> distinct (rtrancl_list_impl ?L ?ls)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FiniteListGraph.distinct_trancl_list_impl",
     "[| distinct ?L; distinct ?ls |]
      ==> distinct (trancl_list_impl ?L ?ls)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FiniteListGraph.add_node_set_nodes",
     "set (nodesL (FiniteListGraph.add_node ?v ?G)) =
      set (nodesL ?G) Un {?v}",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("FiniteListGraph.backlinks_subset",
     "(set (backlinks ?X) <= set (backlinks ?Y)) = (set ?X <= set ?Y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("FiniteListGraph.delete_edges_delete_edge_commute",
     "FiniteListGraph.delete_edges
       (FiniteListGraph.delete_edge ?a1.0 ?a2.0 ?G) ?as =
      FiniteListGraph.delete_edge ?a1.0 ?a2.0
       (FiniteListGraph.delete_edges ?G ?as)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("FiniteListGraph.delete_node_correct",
     "wf_list_graph ?G ==>
      FiniteGraph.delete_node ?v (list_graph_to_graph ?G) =
      list_graph_to_graph (FiniteListGraph.delete_node ?v ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("FiniteListGraph.backlinks_set",
     "set (backlinks ?E) = {(e2, e1). (e1, e2) : set ?E}",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3, template_app (template_hole 2, t_empty)))),
    ("FiniteListGraph.succ_rtran_set",
     "set (FiniteListGraph.succ_rtran ?G ?v) =
      {e2. (?v, e2) : (set (edgesL ?G))^*}",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("FiniteListGraph.succ_tran_set",
     "set (FiniteListGraph.succ_tran ?G ?v) =
      {e2. (?v, e2) : (set (edgesL ?G))^+}",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("FiniteListGraph.delete_edge_commute",
     "FiniteListGraph.delete_edge ?a1.0 ?a2.0
       (FiniteListGraph.delete_edge ?b1.0 ?b2.0 ?G) =
      FiniteListGraph.delete_edge ?b1.0 ?b2.0
       (FiniteListGraph.delete_edge ?a1.0 ?a2.0 ?G)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 3),
           template_var 0)))),
    ("FiniteListGraph.add_edge_set_nodes",
     "set (nodesL (FiniteListGraph.add_edge ?v ?v' ?G)) =
      set (nodesL ?G) Un {?v, ?v'}",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0))))),
    ("FiniteListGraph.add_edge_set_edges",
     "set (edgesL (FiniteListGraph.add_edge ?v ?v' ?G)) =
      set (edgesL ?G) Un {(?v, ?v')}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_hole 0)))),
    ("FiniteListGraph.delete_edge_set_edges2",
     "set (edgesL (FiniteListGraph.delete_edge ?v ?v' ?G)) =
      set (edgesL ?G) - {(?v, ?v')}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_hole 0)))),
    ("FiniteListGraph.undirected_succ_tran_set",
     "set (FiniteListGraph.succ_tran (FiniteListGraph.undirected ?G) ?v) =
      {e2. (?v, e2) : (set (edgesL (FiniteListGraph.undirected ?G)))^+}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)),
           template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("FiniteListGraph.delete_edges_as_filter",
     "FiniteListGraph.delete_edges ?G ?l =
      (| nodesL = nodesL ?G,
         edgesL = filter (%x. x ~: set ?l) (edgesL ?G) |)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)),
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 1, template_var 1))),
         template_hole 0))),
    ("FiniteListGraph.undirected_nodes_set",
     "set (edgesL (FiniteListGraph.undirected ?G)) =
      set (edgesL ?G) Un {(e2, e1). (e1, e2) : set (edgesL ?G)}",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0))),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("FiniteListGraph.delete_edges_set_edges2",
     "set (edgesL (FiniteListGraph.delete_edges ?G ?E)) =
      {(a, b). (a, b) : set (edgesL ?G) & (a, b) ~: set ?E}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0))),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("FiniteListGraph.delete_node_set_edges",
     "set (edgesL (FiniteListGraph.delete_node ?v ?G)) =
      {(a, b). (a, b) : set (edgesL ?G) & a ~= ?v & b ~= ?v}",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0))),
       template_app
        (template_hole 6, template_app (template_hole 5, t_empty)))),
    ("FiniteListGraph.delete_edge_set_edges",
     "set (edgesL (FiniteListGraph.delete_edge ?v ?v' ?G)) =
      {(a, b). (a, b) : set (edgesL ?G) & (a, b) ~= (?v, ?v')}",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_hole 6, template_app (template_hole 5, t_empty)))),
    ("FiniteListGraph.backlinks_in_nodes_G",
     "[| fst ` set (edgesL ?G) <= set (nodesL ?G);
         snd ` set (edgesL ?G) <= set (nodesL ?G) |]
      ==> fst ` set (edgesL (FiniteListGraph.undirected ?G))
          <= set (nodesL (FiniteListGraph.undirected ?G)) &
          snd ` set (edgesL (FiniteListGraph.undirected ?G))
          <= set (nodesL (FiniteListGraph.undirected ?G))",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_hole 7),
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 0))),
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 0))),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_hole 2),
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 0))),
          template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 5,
                         template_app (template_hole 0, template_var 0))))),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 0, template_var 0))))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_hole 2),
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 0, template_var 0))))),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 0, template_var 0)))))
           ))),
    ("FiniteListGraph.distinct_relpow_impl",
     "[| distinct ?L; distinct ?new; distinct ?have;
         distinct (?new @ ?have) |]
      ==> distinct
           (relpow_impl
             (%as. remdups (map snd (filter (%(a, b). a : set as) ?L)))
             (%xs ys. filter (%x. x ~: set ys) xs @ ys) (%x xs. x : set xs)
             ?new ?have ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 11,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 9, t_empty), t_empty),
                     t_empty),
                   template_var 2),
                 template_var 1),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.FiniteListGraphTemplates"
### 0.296s elapsed time, 0.392s cpu time, 0.000s GC time
val it = (): unit
