Loading theory "Draft.FiniteGraph" (required by "Draft.FiniteGraphTemplates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FiniteGraphTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FiniteGraphTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FiniteGraphTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.537s cpu time, 0.054s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FiniteGraphTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.214s elapsed time, 0.862s cpu time, 0.054s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FiniteGraphTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
locale wf_graph
  fixes G :: "'v graph"
  assumes "wf_graph G"
### theory "HOL-Library.Nat_Bijection"
### 0.392s elapsed time, 1.557s cpu time, 0.140s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FiniteGraphTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "Draft.FiniteGraph"
### 0.572s elapsed time, 2.264s cpu time, 0.228s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.757s elapsed time, 2.618s cpu time, 0.329s GC time
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.018s elapsed time, 3.028s cpu time, 0.847s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.854s elapsed time, 4.693s cpu time, 0.995s GC time
Loading theory "Draft.Templates" (required by "Draft.FiniteGraphTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FiniteGraphTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.456s elapsed time, 0.500s cpu time, 0.055s GC time
Loading theory "Draft.FiniteGraphTemplates"
val templateLemmas =
   [("FiniteGraph.succ_empty", "succ FiniteGraph.empty ?v = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("FiniteGraph.backflows_id", "backflows (backflows ?E) = ?E",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("FiniteGraph.delete_edges_empty", "delete_edges ?G {} = ?G",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("FiniteGraph.delete_edges_set_nodes",
     "nodes (delete_edges ?G ?E) = nodes ?G",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("FiniteGraph.fully_connected_wf",
     "wf_graph ?G ==> wf_graph (fully_connected ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("FiniteGraph.backflows_finite", "finite ?E ==> finite (backflows ?E)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("FiniteGraph.delete_edges_list_set",
     "delete_edges_list ?G ?E = delete_edges ?G (set ?E)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("FiniteGraph.delete_edges_wf",
     "wf_graph ?G ==> wf_graph (delete_edges ?G ?E)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FiniteGraph.delete_edges_list_wf",
     "wf_graph ?G ==> wf_graph (delete_edges_list ?G ?E)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FiniteGraph.delete_node_wf",
     "wf_graph ?G ==> wf_graph (delete_node ?v ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("FiniteGraph.succ_tran_finite",
     "wf_graph ?G ==> finite (succ_tran ?G ?v)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FiniteGraph.add_node_wf", "wf_graph ?g ==> wf_graph (add_node ?v ?g)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("FiniteGraph.backflows_subseteq",
     "(?X <= ?Y) = (backflows ?X <= backflows ?Y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("FiniteGraph.delete_edges_edges_empty",
     "delete_edges ?G (edges ?G) = ?G(| edges := {} |)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, t_empty), template_var 0))),
    ("FiniteGraph.add_edge_wf",
     "wf_graph ?G ==> wf_graph (add_edge ?v ?v' ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("FiniteGraph.delete_edge_wf",
     "wf_graph ?G ==> wf_graph (delete_edge ?v ?v' ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("FiniteGraph.succ_finite", "finite (edges ?G) ==> finite (succ ?G ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FiniteGraph.backflows_inter",
     "backflows (?A Int ?B) = backflows ?A Int backflows ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("FiniteGraph.backflows_un",
     "backflows (?A Un ?B) = backflows ?A Un backflows ?B",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("FiniteGraph.backflows_minus_backflows",
     "backflows (?X - backflows ?Y) = backflows ?X - ?Y",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("FiniteGraph.succ_tran_subseteq_nodes",
     "wf_graph ?G ==> succ_tran ?G ?v <= nodes ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("FiniteGraph.backflows_alt_fstsnd",
     "backflows ?E = (%e. (snd e, fst e)) ` ?E",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app (template_hole 3, t_empty), template_var 0))),
    ("FiniteGraph.delete_edges_simp2",
     "delete_edges ?G ?E = (| nodes = nodes ?G, edges = edges ?G - ?E |)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_var 0)),
         template_hole 0))),
    ("FiniteGraph.num_succtran_zero",
     "succ_tran ?G ?v = {} ==> num_reachable ?G ?v = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("FiniteGraph.undirected_backflows",
     "undirected ?G =
      (| nodes = nodes ?G, edges = edges ?G Un backflows (edges ?G) |)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 0)))),
         template_hole 0))),
    ("FiniteGraph.delete_edges_list_union",
     "delete_edges_list ?G (?ff @ ?keeps) =
      delete_edges ?G (set ?ff Un set ?keeps)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("FiniteGraph.backflows_wf",
     "wf_graph (| nodes = ?N, edges = ?E |) ==>
      wf_graph (| nodes = ?N, edges = backflows ?E |)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 0, template_var 0)),
               template_hole 1))
           ))),
    ("FiniteGraph.wf_graph_finite_filterV",
     "wf_graph ?G ==> finite {n: nodes ?G. ?P n}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))
           ))),
    ("FiniteGraph.delete_edges_edges_mono",
     "?E' <= ?E ==>
      edges (delete_edges ?G ?E) <= edges (delete_edges ?G ?E')",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("FiniteGraph.wf_graph_remove_edges",
     "wf_graph (| nodes = ?V, edges = ?E |) ==>
      wf_graph (| nodes = ?V, edges = ?E - ?X |)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_hole 1))
           ))),
    ("FiniteGraph.wf_graph_remove_edges_union",
     "wf_graph (| nodes = ?V, edges = ?E Un ?E' |) ==>
      wf_graph (| nodes = ?V, edges = ?E |)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 0)),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_hole 0))
           ))),
    ("FiniteGraph.num_reachable_zero_iff",
     "wf_graph ?G ==> (num_reachable ?G ?v = 0) = (succ_tran ?G ?v = {})",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0),
           template_hole 3),
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)))),
    ("FiniteGraph.num_reachable_zero",
     "[| wf_graph ?G; num_reachable ?G ?v = 0 |] ==> succ_tran ?G ?v = {}",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("FiniteGraph.graph_eq_intro",
     "[| nodes ?G = nodes ?G'; edges ?G = edges ?G' |] ==> ?G = ?G'",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("FiniteGraph.succ_tran_empty",
     "[| wf_graph ?G; ?v ~: fst ` edges ?G |] ==> succ_tran ?G ?v = {}",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 0),
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_app (template_hole 3, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("FiniteGraph.wf_graph_finite_filterE",
     "wf_graph ?G ==> finite {(e1, e2). (e1, e2) : edges ?G & ?P e1 e2}",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_hole 5, template_app (template_hole 4, t_empty)))
           ))),
    ("FiniteGraph.wf_graph_add_subset_edges",
     "[| wf_graph (| nodes = ?V, edges = ?E |); ?E' <= ?E |]
      ==> wf_graph (| nodes = ?V, edges = ?E Un ?E' |)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_hole 2))
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_hole 2))
           ))),
    ("FiniteGraph.add_edge_delete_edges_list",
     "add_edge (fst ?a) (snd ?a) (delete_edges_list ?G (?a # ?ff)) =
      add_edge (fst ?a) (snd ?a) (delete_edges ?G (set ?ff))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 2)),
           template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 2)),
           template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("FiniteGraph.add_delete_edge",
     "[| wf_graph ?G; (?a, ?b) : edges ?G |]
      ==> add_edge ?a ?b (delete_edge ?a ?b ?G) = ?G",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2)),
         template_var 2))),
    ("FiniteGraph.wf_graph_union_edges",
     "[| wf_graph (| nodes = ?V, edges = ?E |);
         wf_graph (| nodes = ?V, edges = ?E' |) |]
      ==> wf_graph (| nodes = ?V, edges = ?E Un ?E' |)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_hole 1))
           ))),
    ("FiniteGraph.graph_ops",
     "add_edge ?v ?v' ?G =
      (| nodes = nodes ?G Un {?v, ?v'}, edges = {(?v, ?v')} Un edges ?G |)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 0)),
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_hole 6)))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)),
                 template_hole 2)),
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("FiniteGraph.num_reachable_mono",
     "[| wf_graph (| nodes = ?N, edges = ?E |); ?E' <= ?E |]
      ==> num_reachable (| nodes = ?N, edges = ?E' |) ?v
          <= num_reachable (| nodes = ?N, edges = ?E |) ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_hole 3))
            ),
        template_inequation (less_equals, template_var 1, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1),
               template_hole 3)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_hole 3)),
           template_var 0)))),
    ("FiniteGraph.num_reachable_norefl_mono",
     "[| wf_graph (| nodes = ?N, edges = ?E |); ?E' <= ?E |]
      ==> num_reachable_norefl (| nodes = ?N, edges = ?E' |) ?v
          <= num_reachable_norefl (| nodes = ?N, edges = ?E |) ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_hole 3))
            ),
        template_inequation (less_equals, template_var 1, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1),
               template_hole 3)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_hole 3)),
           template_var 0)))),
    ("FiniteGraph.succ_tran_mono",
     "[| wf_graph (| nodes = ?N, edges = ?E |); ?E' <= ?E |]
      ==> succ_tran (| nodes = ?N, edges = ?E' |) ?v
          <= succ_tran (| nodes = ?N, edges = ?E |) ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2),
                template_hole 3))
            ),
        template_inequation (less_equals, template_var 1, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 1),
               template_hole 3)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_var 2),
               template_hole 3)),
           template_var 0)))),
    ("FiniteGraph.add_delete_edges",
     "[| wf_graph ?G; (?a, ?b) : edges ?G; (?a, ?b) ~: ?fs |]
      ==> add_edge ?a ?b (delete_edges ?G (insert (?a, ?b) ?fs)) =
          delete_edges ?G ?fs",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app (template_hole 5, template_var 3))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 1)),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.FiniteGraphTemplates"
### 0.286s elapsed time, 0.399s cpu time, 0.048s GC time
val it = (): unit
