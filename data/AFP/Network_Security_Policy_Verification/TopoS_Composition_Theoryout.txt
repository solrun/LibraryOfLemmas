Loading theory "Draft.TopoS_Util" (required by "Draft.TopoS_Composition_TheoryTemplates" via "Draft.TopoS_Composition_Theory" via "Draft.TopoS_Interface")
Loading theory "Draft.TopoS_Vertices" (required by "Draft.TopoS_Composition_TheoryTemplates" via "Draft.TopoS_Composition_Theory" via "Draft.TopoS_Interface")
Loading theory "Draft.FiniteGraph" (required by "Draft.TopoS_Composition_TheoryTemplates" via "Draft.TopoS_Composition_Theory" via "Draft.TopoS_Interface")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TopoS_Composition_TheoryTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.TopoS_Util"
### 0.040s elapsed time, 0.199s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TopoS_Composition_TheoryTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.531s cpu time, 0.051s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TopoS_Composition_TheoryTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
class vertex = type +
  fixes vertex_1 :: "'a"
    and vertex_2 :: "'a"
    and vertex_3 :: "'a"
  assumes "distinct_vertices": "distinct [vertex_1, vertex_2, vertex_3]"
instantiation
  nat :: vertex
  vertex_1_nat == vertex_1 :: nat
  vertex_2_nat == vertex_2 :: nat
  vertex_3_nat == vertex_3 :: nat
instantiation
  int :: vertex
  vertex_1_int == vertex_1 :: int
  vertex_2_int == vertex_2 :: int
  vertex_3_int == vertex_3 :: int
instantiation
  char :: vertex
  vertex_1_char == vertex_1 :: char
  vertex_2_char == vertex_2 :: char
  vertex_3_char == vertex_3 :: char
instantiation
  list :: (vertex) vertex
  vertex_1_list == vertex_1 :: 'a list
  vertex_2_list == vertex_2 :: 'a list
  vertex_3_list == vertex_3 :: 'a list
locale wf_graph
  fixes G :: "'v graph"
  assumes "wf_graph G"
Found termination order: "size_list size <*mlex*> {}"
val tune_string_vertex_format = fn: term -> string -> string
### theory "Draft.TopoS_Vertices"
### 0.278s elapsed time, 1.131s cpu time, 0.051s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TopoS_Composition_TheoryTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.214s elapsed time, 0.845s cpu time, 0.064s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TopoS_Composition_TheoryTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.367s elapsed time, 1.435s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TopoS_Composition_TheoryTemplates" via "Draft.ExtrEqs")
### theory "Draft.FiniteGraph"
### 0.517s elapsed time, 2.050s cpu time, 0.196s GC time
Loading theory "Draft.TopoS_Interface" (required by "Draft.TopoS_Composition_TheoryTemplates" via "Draft.TopoS_Composition_Theory")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
consts
  left :: "'a tree => 'a tree"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.894s elapsed time, 3.382s cpu time, 0.702s GC time
Loading theory "Draft.vertex_example_simps" (required by "Draft.TopoS_Composition_TheoryTemplates" via "Draft.TopoS_Composition_Theory" via "Draft.TopoS_Helper")
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
    and default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
    and receiver_violation :: "bool"
  assumes "SecurityInvariant sinvar \<bottom> receiver_violation"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "{}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
locale SecurityInvariant_IFS
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
    and default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
  assumes "SecurityInvariant_IFS sinvar \<bottom>"
### theory "HOL-Library.Stream"
### 1.004s elapsed time, 3.797s cpu time, 0.777s GC time
Found termination order: "size <*mlex*> {}"
"1"
  :: "nat"
locale SecurityInvariant_IFS_otherDirectrion
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
    and default_node_properties :: "'b"  (\<open>\<bottom>\<close>)
  assumes "SecurityInvariant_IFS_otherDirectrion sinvar \<bottom>"
### theory "Draft.vertex_example_simps"
### 0.227s elapsed time, 0.893s cpu time, 0.075s GC time
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "is_offending_flows_def" =
      \<open>is_offending_flows ?f ?G ?nP ==
             ~ sinvar ?G ?nP & sinvar (delete_edges ?G ?f) ?nP\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "is_offending_flows_min_set_def" =
      \<open>is_offending_flows_min_set ?f ?G ?nP ==
             is_offending_flows ?f ?G ?nP &
             (ALL (e1, e2):?f.
                 ~ sinvar (add_edge e1 e2 (delete_edges ?G ?f)) ?nP)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "set_offending_flows_def" =
      \<open>set_offending_flows ?G ?nP =
             {F. F <= edges ?G &
                 is_offending_flows_min_set F ?G ?nP}\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "offending_not_empty" =
      \<open>?F : set_offending_flows ?G ?nP ==> ?F ~= {}\<close>
  notes theorem
    "empty_offending_contra" =
      \<open>[| ?F : set_offending_flows ?G ?nP; ?F = {} |]
             ==> False\<close>
  notes theorem
    "offending_notevalD" =
      \<open>?F : set_offending_flows ?G ?nP ==> ~ sinvar ?G ?nP\<close>
  notes theorem
    "sinvar_no_offending" =
      \<open>sinvar ?G ?nP ==> set_offending_flows ?G ?nP = {}\<close>
  notes theorem
    "removing_offending_flows_makes_invariant_hold" =
      \<open>ALL F:set_offending_flows ?G ?nP.
                sinvar (delete_edges ?G F) ?nP\<close>
  notes theorem
    "valid_without_offending_flows" =
      \<open>?F : set_offending_flows ?G ?nP ==>
             sinvar (delete_edges ?G ?F) ?nP\<close>
  notes theorem
    "set_offending_flows_simp" =
      \<open>wf_graph ?G ==>
             set_offending_flows ?G ?nP =
             {F. F <= edges ?G &
                 (~ sinvar ?G ?nP &
                  sinvar (| nodes = nodes ?G, edges = edges ?G - F |) ?nP) &
                 (ALL (e1, e2):F.
                     ~ sinvar
                        (| nodes = nodes ?G,
                           edges = {(e1, e2)} Un (edges ?G - F) |)
                        ?nP)}\<close>
"CHR ''A''"
  :: "char"
locale SecurityInvariant_ACS
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
    and default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
  assumes "SecurityInvariant_ACS sinvar \<bottom>"
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
    and default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
    and receiver_violation :: "bool"
  assumes "SecurityInvariant sinvar \<bottom> receiver_violation"
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "is_offending_flows_def" =
      \<open>is_offending_flows ?f ?G ?nP ==
             ~ sinvar ?G ?nP & sinvar (delete_edges ?G ?f) ?nP\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "is_offending_flows_min_set_def" =
      \<open>is_offending_flows_min_set ?f ?G ?nP ==
             is_offending_flows ?f ?G ?nP &
             (ALL (e1, e2):?f.
                 ~ sinvar (add_edge e1 e2 (delete_edges ?G ?f)) ?nP)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "set_offending_flows_def" =
      \<open>set_offending_flows ?G ?nP =
             {F. F <= edges ?G &
                 is_offending_flows_min_set F ?G ?nP}\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "offending_not_empty" =
      \<open>?F : set_offending_flows ?G ?nP ==> ?F ~= {}\<close>
  notes theorem
    "empty_offending_contra" =
      \<open>[| ?F : set_offending_flows ?G ?nP; ?F = {} |]
             ==> False\<close>
  notes theorem
    "offending_notevalD" =
      \<open>?F : set_offending_flows ?G ?nP ==> ~ sinvar ?G ?nP\<close>
  notes theorem
    "sinvar_no_offending" =
      \<open>sinvar ?G ?nP ==> set_offending_flows ?G ?nP = {}\<close>
  notes theorem
    "removing_offending_flows_makes_invariant_hold" =
      \<open>ALL F:set_offending_flows ?G ?nP.
                sinvar (delete_edges ?G F) ?nP\<close>
  notes theorem
    "valid_without_offending_flows" =
      \<open>?F : set_offending_flows ?G ?nP ==>
             sinvar (delete_edges ?G ?F) ?nP\<close>
  notes theorem
    "set_offending_flows_simp" =
      \<open>wf_graph ?G ==>
             set_offending_flows ?G ?nP =
             {F. F <= edges ?G &
                 (~ sinvar ?G ?nP &
                  sinvar (| nodes = nodes ?G, edges = edges ?G - F |) ?nP) &
                 (ALL (e1, e2):F.
                     ~ sinvar
                        (| nodes = nodes ?G,
                           edges = {(e1, e2)} Un (edges ?G - F) |)
                        ?nP)}\<close>
  notes
    "SecurityInvariant_preliminaries_axioms" =
      (\<open>SecurityInvariant_preliminaries sinvar\<close>)
      ["attribute" "<attribute>"]
  notes
    "defined_offending" =
      \<open>[| wf_graph ?G; ~ sinvar ?G ?nP |]
             ==> set_offending_flows ?G ?nP ~= {}\<close>
  notes
    "mono_sinvar" =
      \<open>[| wf_graph (| nodes = ?N, edges = ?E |); ?E' <= ?E;
                sinvar (| nodes = ?N, edges = ?E |) ?nP |]
             ==> sinvar (| nodes = ?N, edges = ?E' |) ?nP\<close>
  notes
    "mono_offending" =
      \<open>[| wf_graph ?G; is_offending_flows ?ff ?G ?nP |]
             ==> is_offending_flows (?ff Un ?f') ?G ?nP\<close>
  notes
    "SecurityInvariant_axioms" =
      (\<open>SecurityInvariant sinvar \<bottom> receiver_violation\<close>)
      ["attribute" "<attribute>"]
  notes
    "default_secure" =
      \<open>[| wf_graph ?G; ~ sinvar ?G ?nP;
                ?F : set_offending_flows ?G ?nP |]
             ==> (~ receiver_violation -->
                  ?i : fst ` ?F --> ~ sinvar ?G (?nP(?i := \<bottom>))) &
                 (receiver_violation -->
                  ?i : snd ` ?F -->
                  ~ sinvar ?G (?nP(?i := \<bottom>)))\<close>
  notes
    "default_unique" =
      \<open>?otherbot ~= \<bottom> ==>
             EX G nP i F.
                wf_graph G &
                ~ sinvar G nP &
                F : set_offending_flows G nP &
                sinvar (delete_edges G F) nP &
                (~ receiver_violation -->
                 i : fst ` F & sinvar G (nP(i := ?otherbot))) &
                (receiver_violation -->
                 i : snd ` F & sinvar G (nP(i := ?otherbot)))\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props_graph ==
            lfp (%p x1 x2.
                    EX node_props_sum P.
                       x1 = P &
                       x2 =
                       (%i. case node_properties P i of None => \<bottom>
                            | Some property => property))\<close>)
      ["nitpick_unfold"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props_graph ?P
             (%i. case node_properties ?P i of None => \<bottom>
                  | Some property => property)\<close>)
      ["Pure.intro" ?]
  notes
    "node_props_graph.intros" =
      \<open>node_props_graph ?P
              (%i. case node_properties ?P i of None => \<bottom>
                   | Some property => property)\<close>
  notes
    "node_props_graph.cases" =
      (\<open>[| node_props_graph ?a1.0 ?a2.0;
                 !!node_props_sum P.
                    [| ?a1.0 = P;
                       ?a2.0 =
                       (%i. case node_properties P i of None => \<bottom>
                            | Some property => property) |]
                    ==> ?P |]
              ==> ?P\<close>)
      ["consumes" - 1, "constraints" 2, "attribute" "<attribute>",
        "Pure.elim" ?]
  notes
    "node_props_graph.induct" =
      (\<open>[| node_props_graph ?x1.0 ?x2.0;
                 !!node_props_sum P.
                    ?P P
                     (%i. case node_properties P i of None => \<bottom>
                          | Some property => property) |]
              ==> ?P ?x1.0 ?x2.0\<close>)
      ["consumes" - 1]
  notes
    "node_props_graph.simps" =
      (\<open>node_props_graph ?a1.0 ?a2.0 =
              (EX node_props_sum P.
                  ?a1.0 = P &
                  ?a2.0 =
                  (%i. case node_properties P i of None => \<bottom>
                       | Some property => property))\<close>)
      ["attribute" "<attribute>"]
  notes
    "node_props_graph.inducts" =
      (\<open>[| node_props_graph ?x1.0 ?x2.0;
                 !!node_props_sum P.
                    ?P P
                     (%i. case node_properties P i of None => \<bottom>
                          | Some property => property) |]
              ==> ?P ?x1.0 ?x2.0\<close>)
      ["consumes" - 1, "attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props_rel == lfp (%p x1 x2. False)\<close>)
      ["nitpick_unfold"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes "node_props_rel.intros" =
  notes
    "node_props_rel.cases" =
      (\<open>node_props_rel ?a1.0 ?a2.0 ==> ?P\<close>)
      ["consumes" 0, "constraints" 2, "attribute" "<attribute>",
        "Pure.elim" ?]
  notes
    "node_props_rel.induct" =
      (\<open>node_props_rel ?x1.0 ?x2.0 ==> ?P ?x1.0 ?x2.0\<close>)
      ["consumes" 0]
  notes
    "node_props_rel.simps" =
      (\<open>node_props_rel ?a1.0 ?a2.0 = False\<close>)
      ["attribute" "<attribute>"]
  notes
    "node_props_rel.inducts" =
      (\<open>node_props_rel ?x1.0 ?x2.0 ==> ?P ?x1.0 ?x2.0\<close>)
      ["consumes" 0, "attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props_dom ?P ==>
            node_props ?P =
            (%i. case node_properties ?P i of None => \<bottom>
                 | Some property => property)\<close>)
      ["nitpick_psimp"]
  notes
    "node_props.psimps" =
      \<open>node_props_dom ?P ==>
             node_props ?P =
             (%i. case node_properties ?P i of None => \<bottom>
                  | Some property => property)\<close>
  notes
    "node_props.pinduct" =
      (\<open>[| node_props_dom ?a0.0; !!P. node_props_dom P ==> ?P P |]
              ==> ?P ?a0.0\<close>)
      ["case_names" "1", "consumes" 1, "induct" pred]
  notes
    "node_props.termination" = \<open>wf ?R ==> All node_props_dom\<close>
  notes
    "node_props.cases" = (\<open>(!!P. ?x = P ==> ?P) ==> ?P\<close>)
      ["case_names" "1"]
  notes
    "node_props.pelims" =
      (\<open>[| node_props ?x = ?y; node_props_dom ?x;
                 !!P. [| ?x = P;
                         ?y =
                         (%i. case node_properties P i of None => \<bottom>
                              | Some property => property);
                         node_props_dom P |]
                      ==> ?P |]
              ==> ?P\<close>)
      ["consumes" 1, "constraints" 1]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props ?P =
            (%i. case node_properties ?P i of None => \<bottom>
                 | Some property => property)\<close>)
      ["simp", "nitpick_simp"]
  notes
    "node_props.simps" =
      \<open>node_props ?P =
             (%i. case node_properties ?P i of None => \<bottom>
                  | Some property => property)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "node_props.induct" = (\<open>(!!P. ?P P) ==> ?P ?a0.0\<close>)
      ["case_names" "1"]
  notes
    "node_props.elims" =
      (\<open>[| node_props ?x = ?y;
                 !!P. [| ?x = P;
                         ?y =
                         (%i. case node_properties P i of None => \<bottom>
                              | Some property => property) |]
                      ==> ?P |]
              ==> ?P\<close>)
      ["consumes" 1, "constraints" 1]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "node_props_formaldef_def" =
      \<open>node_props_formaldef ?P ==
             %i. if i : dom (node_properties ?P)
                 then the (node_properties ?P i) else \<bottom>\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "node_props_eq_node_props_formaldef" =
      \<open>node_props_formaldef = node_props\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "eval_def" =
      \<open>eval ?G ?P == wf_graph ?G & sinvar ?G (node_props ?P)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "unique_common_math_notation" =
      \<open>ALL G nP i F.
                wf_graph G &
                ~ sinvar G nP &
                F : set_offending_flows G nP &
                sinvar (delete_edges G F) nP &
                (~ receiver_violation -->
                 i : fst ` F --> ~ sinvar G (nP(i := ?otherbot))) &
                (receiver_violation -->
                 i : snd ` F --> ~ sinvar G (nP(i := ?otherbot))) ==>
             ?otherbot = \<bottom>\<close>
locale SecurityInvariant_ACS_otherDirectrion
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
    and default_node_properties :: "'b"  (\<open>\<bottom>\<close>)
  assumes "SecurityInvariant_ACS_otherDirectrion sinvar \<bottom>"
Found termination order: "size <*mlex*> {}"
### theory "Draft.TopoS_Interface"
### 1.042s elapsed time, 3.829s cpu time, 0.697s GC time
Loading theory "Draft.TopoS_withOffendingFlows" (required by "Draft.TopoS_Composition_TheoryTemplates" via "Draft.TopoS_Composition_Theory" via "Draft.TopoS_Helper" via "Draft.TopoS_ENF")
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
### theory "HOL-Library.Tree"
### 1.976s elapsed time, 6.388s cpu time, 1.012s GC time
Loading theory "Draft.Templates" (required by "Draft.TopoS_Composition_TheoryTemplates" via "Draft.ExtrEqs")
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
### theory "Draft.TopoS_withOffendingFlows"
### 0.962s elapsed time, 2.576s cpu time, 0.863s GC time
Loading theory "Draft.TopoS_ENF" (required by "Draft.TopoS_Composition_TheoryTemplates" via "Draft.TopoS_Composition_Theory" via "Draft.TopoS_Helper")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.286s elapsed time, 0.994s cpu time, 0.692s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TopoS_Composition_TheoryTemplates")
"{{1, 2, 3}, {1, 2}, {1}, {1, 3}, {3}, {}, {2}, {2, 3}, {8}, {9}}"
  :: "int set set"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
"{{3, 2, 1, 8}, {3, 2, 1, 9}, {2, 1, 8}, {2, 1, 9}, {1, 8}, {1, 9},
  {3, 1, 8}, {3, 1, 9}, {3, 8}, {3, 9}, {8}, {9}, {2, 8}, {2, 9}, {3, 2, 8},
  {3, 2, 9}}"
  :: "int set set"
"{{2, 8}, {2, 5, 6}, {8}, {5, 6}, {1, 8}, {1, 5, 6}, {2, 1, 8},
  {2, 1, 5, 6}, {2}, {}, {1}, {1, 2}}"
  :: "int set set"
"{{2}, {}, {1}, {1, 2}}"
  :: "int set set"
"True"
  :: "bool"
### theory "Draft.TopoS_ENF"
### 0.596s elapsed time, 2.076s cpu time, 0.204s GC time
Loading theory "Draft.TopoS_Helper" (required by "Draft.TopoS_Composition_TheoryTemplates" via "Draft.TopoS_Composition_Theory")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.666s elapsed time, 2.222s cpu time, 0.204s GC time
### theory "Draft.TopoS_Helper"
### 0.191s elapsed time, 0.260s cpu time, 0.000s GC time
Loading theory "Draft.TopoS_Composition_Theory" (required by "Draft.TopoS_Composition_TheoryTemplates")
Found termination order: "{}"
locale configured_SecurityInvariant
  fixes m :: "'v SecurityInvariant_configured"
  assumes "configured_SecurityInvariant m"
configured_SecurityInvariant ?m ==
(ALL G.
    c_offending_flows ?m G =
    {F. F <= edges G &
        ~ c_sinvar ?m G &
        c_sinvar ?m (delete_edges G F) &
        (ALL (e1, e2):F.
            ~ c_sinvar ?m (add_edge e1 e2 (delete_edges G F)))}) &
(ALL N.
    wf_graph (| nodes = N, edges = {} |) -->
    c_sinvar ?m (| nodes = N, edges = {} |)) &
(ALL N E E'.
    wf_graph (| nodes = N, edges = E |) -->
    E' <= E -->
    c_sinvar ?m (| nodes = N, edges = E |) -->
    c_sinvar ?m (| nodes = N, edges = E' |))
[| configured_SecurityInvariant ?m; wf_graph (| nodes = ?N, edges = ?E |);
   ?E' <= ?E; c_sinvar ?m (| nodes = ?N, edges = ?E |) |]
==> c_sinvar ?m (| nodes = ?N, edges = ?E' |)
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
[| configured_SecurityInvariant ?m; wf_graph (| nodes = ?V, edges = ?E |);
   ?E' <= ?E |]
==> \<Union> (c_offending_flows ?m (| nodes = ?V, edges = ?E' |))
    <= \<Union> (c_offending_flows ?m (| nodes = ?V, edges = ?E |))
[| configured_SecurityInvariant ?m; wf_graph (| nodes = ?V, edges = ?E |);
   \<Union> (c_offending_flows ?m (| nodes = ?V, edges = ?E |)) <= ?X |]
==> \<Union> (c_offending_flows ?m (| nodes = ?V, edges = ?E - ?E' |))
    <= ?X - ?E'
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.TopoS_Composition_Theory"
### 1.053s elapsed time, 1.651s cpu time, 0.841s GC time
Loading theory "Draft.TopoS_Composition_TheoryTemplates"
val templateLemmas =
   [("TopoS_Composition_Theory.generate_valid_topology_nodes",
     "nodes (generate_valid_topology ?M ?G) = nodes ?G",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("TopoS_Composition_Theory.generate_valid_topology_subseteq_edges",
     "edges (generate_valid_topology ?M ?G) <= edges ?G",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("TopoS_Composition_Theory.wf_graph_generate_valid_topology",
     "wf_graph ?G ==> wf_graph (generate_valid_topology ?M ?G)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("TopoS_Composition_Theory.valid_reqs1",
     "valid_reqs (?m # ?M) ==> configured_SecurityInvariant ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("TopoS_Composition_Theory.valid_reqs2",
     "valid_reqs (?m # ?M) ==> valid_reqs ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("TopoS_Composition_Theory.generate_valid_topology_SOME_nodes",
     "nodes (generate_valid_topology_SOME ?M (| nodes = ?V, edges = ?E |)) =
      ?V",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0))),
       template_var 1)),
    ("TopoS_Composition_Theory.get_ACS_union_get_IFS",
     "set (get_ACS ?M) Un set (get_IFS ?M) = set ?M",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("TopoS_Composition_Theory.c_offending_flows_subseteq_edges",
     "configured_SecurityInvariant ?m ==>
      \<Union> (c_offending_flows ?m ?G) <= edges ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("TopoS_Composition_Theory.get_offending_flows_un",
     "\<Union> (get_offending_flows ?M ?G) =
      (UN m:set ?M. \<Union> (c_offending_flows m ?G))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 1))))),
    ("TopoS_Composition_Theory.all_security_requirements_fulfilled_imp_get_offending_empty",
     "[| valid_reqs ?M; all_security_requirements_fulfilled ?M ?G |]
      ==> get_offending_flows ?M ?G = {}",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("TopoS_Composition_Theory.generate_valid_topology_does_nothing_if_valid",
     "[| valid_reqs ?M; all_security_requirements_fulfilled ?M ?G |]
      ==> generate_valid_topology ?M ?G = ?G",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("TopoS_Composition_Theory.generate_valid_topology_as_set",
     "generate_valid_topology ?M ?G =
      delete_edges ?G (UN m:set ?M. \<Union> (c_offending_flows m ?G))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty),
             template_app (template_hole 0, template_var 1)))))),
    ("TopoS_Composition_Theory.new_configured_SecurityInvariant_sound",
     "new_configured_SecurityInvariant
       (?sinvar, ?defbot, ?receiver_violation, ?nP) =
      Some ?m ==>
      configured_SecurityInvariant ?m",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)))),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("TopoS_Composition_Theory.generate_valid_topology_mono_models",
     "edges (generate_valid_topology (?m # ?M) (| nodes = ?V, edges = ?E |))
      <= edges (generate_valid_topology ?M (| nodes = ?V, edges = ?E |))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0))),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0))))),
    ("TopoS_Composition_Theory.generate_valid_topology_SOME_superset",
     "[| valid_reqs ?M; wf_graph ?G |]
      ==> edges (generate_valid_topology ?M ?G)
          <= edges (generate_valid_topology_SOME ?M ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("TopoS_Composition_Theory.get_offending_flows_subseteq_edges",
     "[| valid_reqs ?M;
         ?F : get_offending_flows ?M (| nodes = ?V, edges = ?E |) |]
      ==> ?F <= ?E",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0),
                  template_hole 1)))
            )],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("TopoS_Composition_Theory.get_offending_flows_alt1",
     "get_offending_flows ?M ?G =
      \<Union> {c_offending_flows m ?G |m. m : set ?M}",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_hole 6, template_app (template_hole 5, t_empty)))),
    ("TopoS_Composition_Theory.generate_valid_topology_sound",
     "[| valid_reqs ?M; wf_graph (| nodes = ?V, edges = ?E |) |]
      ==> all_security_requirements_fulfilled ?M
           (generate_valid_topology ?M (| nodes = ?V, edges = ?E |))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0),
                 template_hole 2)))
           ))),
    ("TopoS_Composition_Theory.generate_valid_topology_SOME_sound",
     "[| valid_reqs ?M; wf_graph (| nodes = ?V, edges = ?E |) |]
      ==> all_security_requirements_fulfilled ?M
           (generate_valid_topology_SOME ?M (| nodes = ?V, edges = ?E |))",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0),
                 template_hole 2)))
           ))),
    ("TopoS_Composition_Theory.all_security_requirements_fulfilled_imp_no_offending_flows",
     "[| valid_reqs ?M; all_security_requirements_fulfilled ?M ?G |]
      ==> (UN m:set ?M. \<Union> (c_offending_flows m ?G)) = {}",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 1, template_var 1))),
         template_hole 0))),
    ("TopoS_Composition_Theory.new_configured_TopoS_sinvar_correct",
     "SecurityInvariant ?sinvar ?defbot ?receiver_violation ==>
      c_sinvar
       (the (new_configured_SecurityInvariant
              (?sinvar, ?defbot, ?receiver_violation, ?nP))) =
      (%G. ?sinvar G ?nP)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))))),
         t_empty))),
    ("TopoS_Composition_Theory.new_configured_TopoS_offending_flows_correct",
     "SecurityInvariant ?sinvar ?defbot ?receiver_violation ==>
      c_offending_flows
       (the (new_configured_SecurityInvariant
              (?sinvar, ?defbot, ?receiver_violation, ?nP))) =
      (%G. SecurityInvariant_withOffendingFlows.set_offending_flows ?sinvar
            G ?nP)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)))))),
         t_empty))),
    ("TopoS_Composition_Theory.all_security_requirements_fulfilled_mono",
     "[| valid_reqs ?M; ?E' <= ?E; wf_graph (| nodes = ?V, edges = ?E |);
         all_security_requirements_fulfilled ?M
          (| nodes = ?V, edges = ?E |) |]
      ==> all_security_requirements_fulfilled ?M
           (| nodes = ?V, edges = ?E' |)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 1),
                template_hole 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 0),
                  template_var 1),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2),
               template_hole 1))
           ))),
    ("TopoS_Composition_Theory.generate_valid_topology_some_sound",
     "[| valid_reqs ?M; wf_graph (| nodes = ?V, edges = ?E |); set ?Es = ?E;
         distinct ?Es |]
      ==> all_security_requirements_fulfilled ?M
           (generate_valid_topology_some ?M ?Es
             (| nodes = ?V, edges = ?E |))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_hole 5))
            ),
        template_equation
         (template_app (template_hole 3, template_var 0), template_var 1),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1),
                 template_hole 5)))
           ))),
    ("TopoS_Composition_Theory.get_offending_flows_union_mono",
     "[| valid_reqs ?M; wf_graph (| nodes = ?V, edges = ?E |); ?E' <= ?E |]
      ==> \<Union> (get_offending_flows ?M (| nodes = ?V, edges = ?E' |))
          <= \<Union>
              (get_offending_flows ?M (| nodes = ?V, edges = ?E |))",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_hole 3))
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0),
               template_hole 3))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_hole 3)))))),
    ("TopoS_Composition_Theory.generate_valid_topology_max_topo",
     "[| valid_reqs ?M; wf_graph ?G;
         ALL m:set ?M. EX P. ALL G. c_sinvar m G = (ALL e:edges G. P e) |]
      ==> max_topo ?M (generate_valid_topology ?M (fully_connected ?G))",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("TopoS_Composition_Theory.mono_extend_get_offending_flows",
     "[| valid_reqs ?M; wf_graph (| nodes = ?V, edges = ?E |); ?E' <= ?E;
         ?F' : get_offending_flows ?M (| nodes = ?V, edges = ?E' |) |]
      ==> EX F:get_offending_flows ?M (| nodes = ?V, edges = ?E |).
             ?F' <= F",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 4)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_hole 4))
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 4),
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 3),
                    template_var 1),
                  template_hole 4)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app
                  (template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 2),
                   template_hole 4))),
             t_empty)
           ))),
    ("TopoS_Composition_Theory.Un_set_offending_flows_bound_minus_subseteq'",
     "[| valid_reqs ?M; wf_graph (| nodes = ?V, edges = ?E |); ?E' <= ?E;
         \<Union> (get_offending_flows ?M (| nodes = ?V, edges = ?E |))
         <= ?X |]
      ==> \<Union>
           (get_offending_flows ?M (| nodes = ?V, edges = ?E - ?E' |))
          <= ?X - ?E'",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 4)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_hole 4))
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_hole 4))),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 4),
             template_app
              (template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_hole 4))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("TopoS_Composition_Theory.enf_offending_flows",
     "[| configured_SecurityInvariant ?m;
         ALL G. c_sinvar ?m G = (ALL e:edges G. ?P e) |]
      ==> ALL G.
             c_offending_flows ?m G =
             (if c_sinvar ?m G then {} else {{e: edges G. ~ ?P e}})",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("TopoS_Composition_Theory.enf_not_fulfilled_if_in_offending",
     "[| valid_reqs ?M; wf_graph ?G;
         ALL m:set ?M. EX P. ALL G. c_sinvar m G = (ALL e:edges G. P e) |]
      ==> ALL x:UN m:set ?M.
                   \<Union> (c_offending_flows m (fully_connected ?G)).
             ~ all_security_requirements_fulfilled ?M
                (| nodes = ?V, edges = insert x ?E |)",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 3)),
        template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app (template_hole 15, template_var 3)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, t_empty),
                   template_app (template_hole 15, template_var 3)))),
             t_empty)
           ))),
    ("TopoS_Composition_Theory.enf_all_valid_policy_subset_of_max",
     "[| valid_reqs ?M; wf_graph ?G;
         ALL m:set ?M. EX P. ALL G. c_sinvar m G = (ALL e:edges G. P e);
         nodes ?G = nodes ?G'; wf_graph ?G';
         all_security_requirements_fulfilled ?M ?G' |]
      ==> edges ?G'
          <= edges (generate_valid_topology ?M (fully_connected ?G))",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 2)),
        template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 2)),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_predicate
         (template_app (template_hole 14, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 6, template_var 0),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1)))))),
    ("TopoS_Composition_Theory.unique_offending_obtain",
     "[| configured_SecurityInvariant ?m; c_offending_flows ?m ?G = {?F};
         !!P. [| ?F = {(v1, v2). (v1, v2) : edges ?G & ~ P (v1, v2)};
                 c_sinvar ?m ?G = (ALL (v1, v2):edges ?G. P (v1, v2));
                 ALL (v1, v2):edges ?G - ?F. P (v1, v2) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 15, template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 14, template_var 1),
            template_hole 13)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.TopoS_Composition_TheoryTemplates"
### 0.322s elapsed time, 0.474s cpu time, 0.054s GC time
val it = (): unit
