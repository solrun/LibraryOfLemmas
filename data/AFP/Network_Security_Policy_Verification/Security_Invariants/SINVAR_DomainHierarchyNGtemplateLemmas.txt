   [("SINVAR_DomainHierarchyNG.Leaf_Top", "?a <= domainNameDept.Leaf",
     template_inequation (less_equals, template_var 0, template_hole 0)),
    ("SINVAR_DomainHierarchyNG.leq_domainNameTrust_refl",
     "?x \<sqsubseteq>\<^sub>t\<^sub>r\<^sub>u\<^sub>s\<^sub>t ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("SINVAR_DomainHierarchyNG.chopOne_not_decrease",
     "?dn <= domainNameDeptChopOne ?dn",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("SINVAR_DomainHierarchyNG.chop0", "domainNameChop ?dn 0 = ?dn",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("SINVAR_DomainHierarchyNG.chop_sup_max1", "?a <= chop_sup ?a ?b",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SINVAR_DomainHierarchyNG.chop_sup_max2", "?b <= chop_sup ?a ?b",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("SINVAR_DomainHierarchyNG.chop_not_decrease_hierarchy",
     "?dn <= domainNameChop ?dn ?n",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SINVAR_DomainHierarchyNG.DN_inf_is_inf",
     "is_inf ?x ?y (DN_inf ?x ?y)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("SINVAR_DomainHierarchyNG.DN_sup_is_sup",
     "is_sup ?x ?y (DN_sup ?x ?y)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("SINVAR_DomainHierarchyNG.Leaf_Top_Unique",
     "(domainNameDept.Leaf <= ?a) = (?a = domainNameDept.Leaf)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("SINVAR_DomainHierarchyNG.DN_inf_commute",
     "DN_inf ?x ?y = DN_inf ?y ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("SINVAR_DomainHierarchyNG.DN_sup_commute",
     "DN_sup ?x ?y = DN_sup ?y ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("SINVAR_DomainHierarchyNG.chop_sup_commute",
     "chop_sup ?a ?b = chop_sup ?b ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("SINVAR_DomainHierarchyNG.monotonicity_sinvar_mono",
     "SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
       SINVAR_DomainHierarchyNG.sinvar ?P ==>
      SecurityInvariant_withOffendingFlows.sinvar_mono
       SINVAR_DomainHierarchyNG.sinvar",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_hole 1)))),
    ("SINVAR_DomainHierarchyNG.ENFsr_monotonicity_sinvar_mono",
     "sinvar_all_edges_normal_form_sr ?P ==>
      SecurityInvariant_withOffendingFlows.sinvar_mono
       SINVAR_DomainHierarchyNG.sinvar",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_hole 1)))),
    ("SINVAR_DomainHierarchyNG.domainNameChopFunApply",
     "domainNameChop ?dn ?n = (domainNameDeptChopOne ^^ ?n) ?dn",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_var 1))),
    ("SINVAR_DomainHierarchyNG.domainNameChopRotateSuc",
     "domainNameChop ?dn (Suc ?n) =
      domainNameDeptChopOne (domainNameChop ?dn ?n)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("SINVAR_DomainHierarchyNG.domainNameChopRotate",
     "domainNameChop (domainNameDeptChopOne ?dn) ?n =
      domainNameDeptChopOne (domainNameChop ?dn ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("SINVAR_DomainHierarchyNG.minimalize_offending_overapprox_keeps_keeps",
     "set ?keeps
      <= set (SINVAR_DomainHierarchyNG.minimalize_offending_overapprox ?ff
               ?keeps ?G ?nP)",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 3),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 2),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("SINVAR_DomainHierarchyNG.removing_offending_flows_makes_invariant_hold",
     "ALL F:set_offending_flows ?G ?nP.
         SINVAR_DomainHierarchyNG.sinvar (delete_edges ?G F) ?nP",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1),
               template_var 0)),
           t_empty)
         )),
    ("SINVAR_DomainHierarchyNG.sinvar_no_offending",
     "SINVAR_DomainHierarchyNG.sinvar ?G ?nP ==>
      set_offending_flows ?G ?nP = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 3),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("SINVAR_DomainHierarchyNG.prepend_domain",
     "?a <= ?b ==> ?x -- ?a <= ?x -- ?b",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SINVAR_DomainHierarchyNG.offending_not_empty",
     "?F : set_offending_flows ?G ?nP ==> ?F ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 1),
                template_var 0))
            )],
       template_negation
        (template_equation (template_var 2, template_hole 0)))),
    ("SINVAR_DomainHierarchyNG.offending_notevalD",
     "?F : set_offending_flows ?G ?nP ==>
      ~ SINVAR_DomainHierarchyNG.sinvar ?G ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)
               )
           ))),
    ("SINVAR_DomainHierarchyNG.minimalize_offending_overapprox_subset",
     "set (SINVAR_DomainHierarchyNG.minimalize_offending_overapprox ?ff
            ?keeps ?G ?nP)
      <= set ?ff Un set ?keeps",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 3)),
         template_app (template_hole 3, template_var 2)))),
    ("SINVAR_DomainHierarchyNG.valid_without_offending_flows",
     "?F : set_offending_flows ?G ?nP ==>
      SINVAR_DomainHierarchyNG.sinvar (delete_edges ?G ?F) ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)
           ))),
    ("SINVAR_DomainHierarchyNG.less_eq_refl",
     "[| ?x <= ?y; ?y <= ?z |] ==> ?x <= ?z",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("SINVAR_DomainHierarchyNG.ENFnr_to_ENFnrSR",
     "SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_not_refl
       SINVAR_DomainHierarchyNG.sinvar ?P ==>
      sinvar_all_edges_normal_form_not_refl_SR (%v1 _ v2 _. ?P v1 v2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_hole 1), t_empty)
           ))),
    ("SINVAR_DomainHierarchyNG.empty_offending_contra",
     "[| ?F : set_offending_flows ?G ?nP; ?F = {} |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 1),
                template_var 0))
            ),
        template_equation (template_var 2, template_hole 1)],
       template_predicate (template_hole 0))),
    ("SINVAR_DomainHierarchyNG.chop_sup_is_sup",
     "ALL z. ?a <= z & ?b <= z --> chop_sup ?a ?b <= z",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("SINVAR_DomainHierarchyNG.chopOneContinue",
     "?dpt ~= domainNameDept.Leaf ==>
      domainNameDeptChopOne (?name -- ?dpt) =
      ?name -- domainNameDeptChopOne ?dpt",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 1, template_var 1))))),
    ("SINVAR_DomainHierarchyNG.ENF_offending_case2",
     "[| SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
          SINVAR_DomainHierarchyNG.sinvar ?P;
         SINVAR_DomainHierarchyNG.sinvar ?G ?nP |]
      ==> {} = set_offending_flows ?G ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_hole 3),
             template_var 1),
           template_var 0)))),
    ("SINVAR_DomainHierarchyNG.defined_offending",
     "[| wf_graph ?G; ~ SINVAR_DomainHierarchyNG.sinvar ?G ?nP |]
      ==> set_offending_flows ?G ?nP ~= {}",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 3),
                 template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("SINVAR_DomainHierarchyNG.common_inf_imp_comparable",
     "[| ?z <= ?a; ?z <= ?b |] ==> ?a <= ?b | ?b <= ?a",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))
           ))),
    ("SINVAR_DomainHierarchyNG.unfold_dmain_leq",
     "?y <= ?zn -- ?zns ==> EX yns. ?y = ?zn -- yns & yns <= ?zns",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("SINVAR_DomainHierarchyNG.mono_offending",
     "[| wf_graph ?G; is_offending_flows ?ff ?G ?nP |]
      ==> is_offending_flows (?ff Un ?f') ?G ?nP",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 2),
                template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 3),
             template_var 1)
           ))),
    ("SINVAR_DomainHierarchyNG.ENF_notevalmodel_imp_offending_not_empty",
     "[| SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
          SINVAR_DomainHierarchyNG.sinvar ?P;
         ~ SINVAR_DomainHierarchyNG.sinvar ?G ?nP |]
      ==> set_offending_flows ?G ?nP ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 4),
                 template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("SINVAR_DomainHierarchyNG.ENFnrSR_to_ENFsr",
     "sinvar_all_edges_normal_form_not_refl_SR ?P ==>
      sinvar_all_edges_normal_form_sr
       (%p1 v1 p2 v2. v1 ~= v2 --> ?P p1 v1 p2 v2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 4), t_empty)
           ))),
    ("SINVAR_DomainHierarchyNG.no_Bot",
     "[| ?n1.0 ~= ?n2.0; ?z <= ?n1.0 -- ?n1s; ?z <= ?n2.0 -- ?n2s |]
      ==> False",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 1, template_var 4),
            template_var 1)),
        template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 1, template_var 3),
            template_var 0))],
       template_predicate (template_hole 0))),
    ("SINVAR_DomainHierarchyNG.sinvar_valid_remove_flattened_offending_flows",
     "wf_graph (| nodes = ?nodesG, edges = ?edgesG |) ==>
      SINVAR_DomainHierarchyNG.sinvar
       (| nodes = ?nodesG,
          edges =
            ?edgesG -
            \<Union>
             (set_offending_flows (| nodes = ?nodesG, edges = ?edgesG |)
               ?nP) |)
       ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_hole 3),
                           template_app
                            (template_app
                              (template_app
                                (template_hole 5, template_var 2),
                               template_var 1),
                             template_hole 4)),
                         template_var 0)))),
                 template_hole 4)),
             template_var 0)
           ))),
    ("SINVAR_DomainHierarchyNG.sinvar_mono_I_proofrule_simple",
     "ALL G nP.
         SINVAR_DomainHierarchyNG.sinvar G nP =
         (ALL (e1, e2):edges G. ?P e1 e2 nP) ==>
      SecurityInvariant_withOffendingFlows.sinvar_mono
       SINVAR_DomainHierarchyNG.sinvar",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_hole 4)))),
    ("SINVAR_DomainHierarchyNG.sinvar_mono_imp_is_offending_flows_mono",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_DomainHierarchyNG.sinvar;
         wf_graph ?G; is_offending_flows ?FF ?G ?nP |]
      ==> is_offending_flows (?FF Un ?F) ?G ?nP",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3)),
        template_predicate (template_app (template_hole 2, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_hole 3),
                  template_var 2),
                template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 3),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 3),
             template_var 1)
           ))),
    ("SINVAR_DomainHierarchyNG.uncomparable_sup_is_Top",
     "[| ?n1.0 ~= ?n2.0; ?n1.0 -- ?x <= ?z; ?n2.0 -- ?y <= ?z |]
      ==> ?z = domainNameDept.Leaf",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 4), template_var 2),
          template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 3), template_var 0),
          template_var 1)],
       template_equation (template_var 1, template_hole 0))),
    ("SINVAR_DomainHierarchyNG.ENF_offending_imp_not_P",
     "[| SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
          SINVAR_DomainHierarchyNG.sinvar ?P;
         ?F : set_offending_flows ?G ?nP; (?e1.0, ?e2.0) : ?F |]
      ==> ~ ?P (?nP ?e1.0) (?nP ?e2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 3, template_hole 5),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_var 4)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_var 5,
                   template_app (template_var 2, template_var 1)),
                 template_app (template_var 2, template_var 0))
               )
           ))),
    ("SINVAR_DomainHierarchyNG.mono_sinvar",
     "[| wf_graph (| nodes = ?N, edges = ?E |); ?E' <= ?E;
         SINVAR_DomainHierarchyNG.sinvar (| nodes = ?N, edges = ?E |) ?nP |]
      ==> SINVAR_DomainHierarchyNG.sinvar (| nodes = ?N, edges = ?E' |)
           ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_hole 2))
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 0,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 1),
                 template_hole 2)),
             template_var 0)
           ))),
    ("SINVAR_DomainHierarchyNG.sinvar_mono_imp_negative_delete_edge_mono",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_DomainHierarchyNG.sinvar;
         wf_graph ?G; ?X <= ?Y;
         ~ SINVAR_DomainHierarchyNG.sinvar (delete_edges ?G ?Y) ?nP |]
      ==> ~ SINVAR_DomainHierarchyNG.sinvar (delete_edges ?G ?X) ?nP",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_hole 4)),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 0, template_var 3),
                      template_var 1)),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)),
                 template_var 0)
               )
           ))),
    ("SINVAR_DomainHierarchyNG.ENF_refl_not_offedning",
     "[| ~ SINVAR_DomainHierarchyNG.sinvar ?G ?nP;
         ?f : set_offending_flows ?G ?nP;
         SecurityInvariant_withOffendingFlows.ENF_refl
          SINVAR_DomainHierarchyNG.sinvar ?P |]
      ==> ALL (e1, e2):?f. e1 ~= e2",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 6),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 6),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, t_empty))
           ))),
    ("SINVAR_DomainHierarchyNG.ENF_offending_subseteq_lhs",
     "SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
       SINVAR_DomainHierarchyNG.sinvar ?P ==>
      set_offending_flows ?G ?nP
      <= {{(e1, e2). (e1, e2) : edges ?G & ~ ?P (?nP e1) (?nP e2)}}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 9, template_hole 11),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7, template_app (template_hole 6, t_empty))),
           template_hole 0)))),
    ("SINVAR_DomainHierarchyNG.offending_flows_union_mono",
     "[| wf_graph (| nodes = ?V, edges = ?E |); ?E' <= ?E |]
      ==> \<Union> (set_offending_flows (| nodes = ?V, edges = ?E' |) ?nP)
          <= \<Union>
              (set_offending_flows (| nodes = ?V, edges = ?E |) ?nP)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_hole 4))
            ),
        template_inequation (less_equals, template_var 1, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 1),
                 template_hole 4)),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 2),
                 template_hole 4)),
             template_var 0))))),
    ("SINVAR_DomainHierarchyNG.valid_empty_edges_iff_exists_offending_flows",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_DomainHierarchyNG.sinvar;
         wf_graph ?G; ~ SINVAR_DomainHierarchyNG.sinvar ?G ?nP |]
      ==> SINVAR_DomainHierarchyNG.sinvar (| nodes = nodes ?G, edges = {} |)
           ?nP =
          (set_offending_flows ?G ?nP ~= {})",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_hole 10)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 0)
                )
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_var 1)),
                      template_hole 4),
                    template_hole 3)),
                template_var 0)
              )],
         template_negation
          (
             template_equation
              (template_app
                (template_app
                  (template_app (template_hole 1, template_hole 10),
                   template_var 1),
                 template_var 0),
               template_hole 0)
             )))),
    ("SINVAR_DomainHierarchyNG.sinvar_valid_remove_SOME_offending_flows",
     "set_offending_flows (| nodes = ?nodesG, edges = ?edgesG |) ?nP ~=
      {} ==>
      SINVAR_DomainHierarchyNG.sinvar
       (| nodes = ?nodesG,
          edges =
            ?edgesG -
            (SOME F.
                F : set_offending_flows
                     (| nodes = ?nodesG, edges = ?edgesG |) ?nP) |)
       ?nP",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1),
                    template_hole 4)),
                template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app (template_hole 1, t_empty))),
                 template_hole 4)),
             template_var 0)
           ))),
    ("SINVAR_DomainHierarchyNG.sinvar_mono_imp_sinvar_mono",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_DomainHierarchyNG.sinvar;
         wf_graph (| nodes = ?N, edges = ?E |); ?E' <= ?E;
         SINVAR_DomainHierarchyNG.sinvar (| nodes = ?N, edges = ?E |) ?nP |]
      ==> SINVAR_DomainHierarchyNG.sinvar (| nodes = ?N, edges = ?E' |)
           ?nP",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_hole 4)),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_hole 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1),
                 template_hole 1)),
             template_var 0)
           ))),
    ("SINVAR_DomainHierarchyNG.ENF_offending_set_P_representation",
     "[| SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
          SINVAR_DomainHierarchyNG.sinvar ?P;
         ?F : set_offending_flows ?G ?nP |]
      ==> ?F = {(e1, e2). (e1, e2) : edges ?G & ~ ?P (?nP e1) (?nP e2)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 8, template_hole 10),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))))),
    ("SINVAR_DomainHierarchyNG.sinvar_mono_imp_negative_mono",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_DomainHierarchyNG.sinvar;
         wf_graph (| nodes = ?N, edges = ?E |); ?E' <= ?E;
         ~ SINVAR_DomainHierarchyNG.sinvar (| nodes = ?N, edges = ?E' |)
            ?nP |]
      ==> ~ SINVAR_DomainHierarchyNG.sinvar (| nodes = ?N, edges = ?E |)
             ?nP",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_hole 5)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_hole 2))
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_app (template_hole 3, template_var 3),
                        template_var 1),
                      template_hole 2)),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2),
                     template_hole 2)),
                 template_var 0)
               )
           ))),
    ("SINVAR_DomainHierarchyNG.Un_set_offending_flows_bound_minus_subseteq",
     "[| wf_graph (| nodes = ?V, edges = ?E |);
         \<Union> (set_offending_flows (| nodes = ?V, edges = ?E |) ?nP)
         <= ?X |]
      ==> \<Union>
           (set_offending_flows (| nodes = ?V, edges = ?E - ?E' |) ?nP)
          <= ?X - ?E'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_hole 5))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_hole 5)),
              template_var 2)),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 4),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 0)),
                 template_hole 5)),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SINVAR_DomainHierarchyNG.ENF_offending_set",
     "SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
       SINVAR_DomainHierarchyNG.sinvar ?P ==>
      set_offending_flows ?G ?nP =
      (if SINVAR_DomainHierarchyNG.sinvar ?G ?nP then {}
       else {{(e1, e2). (e1, e2) : edges ?G & ~ ?P (?nP e1) (?nP e2)}})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_hole 12),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 10, template_hole 12),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 12, template_var 1),
                 template_var 0)),
             template_hole 8),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6, template_app (template_hole 5, t_empty))),
             template_hole 8))))),
    ("SINVAR_DomainHierarchyNG.minimalize_offending_overapprox_sound",
     "[| wf_graph ?G; is_offending_flows (set ?ff) ?G ?nP;
         set ?ff <= edges ?G; distinct ?ff |]
      ==> is_offending_flows_min_set
           (set (SINVAR_DomainHierarchyNG.minimalize_offending_overapprox
                  ?ff [] ?G ?nP))
           ?G ?nP",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_app (template_hole 6, template_var 1)),
                template_var 2),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_app (template_hole 4, template_var 2)),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 7),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 1, template_hole 7),
                           template_var 1),
                         template_hole 0),
                       template_var 2),
                     template_var 0))),
               template_var 2),
             template_var 0)
           ))),
    ("SINVAR_DomainHierarchyNG.mono_imp_set_offending_flows_not_empty",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_DomainHierarchyNG.sinvar;
         wf_graph ?G; is_offending_flows (set ?ff) ?G ?nP;
         set ?ff <= edges ?G; distinct ?ff |]
      ==> set_offending_flows ?G ?nP ~= {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_hole 10)),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_hole 10),
                  template_app (template_hole 7, template_var 1)),
                template_var 2),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 1),
          template_app (template_hole 5, template_var 2)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 10),
                 template_var 2),
               template_var 0),
             template_hole 0)
           ))),
    ("SINVAR_DomainHierarchyNG.ENF_offending_case1",
     "[| SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
          SINVAR_DomainHierarchyNG.sinvar ?P;
         ~ SINVAR_DomainHierarchyNG.sinvar ?G ?nP |]
      ==> {{(e1, e2). (e1, e2) : edges ?G & ~ ?P (?nP e1) (?nP e2)}} =
          set_offending_flows ?G ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7, template_app (template_hole 6, t_empty))),
           template_hole 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_hole 11),
             template_var 1),
           template_var 0)))),
    ("SINVAR_DomainHierarchyNG.ENF_offending_members",
     "[| ~ SINVAR_DomainHierarchyNG.sinvar ?G ?nP;
         SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
          SINVAR_DomainHierarchyNG.sinvar ?P;
         ?f : set_offending_flows ?G ?nP |]
      ==> ?f <= edges ?G & (ALL (e1, e2):?f. ~ ?P (?nP e1) (?nP e2))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 8),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 5, template_hole 8),
                  template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app (template_hole 2, template_var 3))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, t_empty)))
           ))),
    ("SINVAR_DomainHierarchyNG.mono_extend_set_offending_flows",
     "[| wf_graph (| nodes = ?V, edges = ?E |); ?E' <= ?E;
         ?F' : set_offending_flows (| nodes = ?V, edges = ?E' |) ?nP |]
      ==> EX F:set_offending_flows (| nodes = ?V, edges = ?E |) ?nP.
             ?F' <= F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_hole 5))
            ),
        template_inequation (less_equals, template_var 2, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_app
                   (template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 2),
                    template_hole 5)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app
                    (template_app
                      (template_app (template_hole 6, template_var 4),
                       template_var 3),
                     template_hole 5)),
                 template_var 0)),
             t_empty)
           ))),
    ("SINVAR_DomainHierarchyNG.minimalize_offending_overapprox_gives_back_an_offending_flow",
     "[| wf_graph ?G; is_offending_flows (set ?ff) ?G ?nP;
         set ?ff <= edges ?G; distinct ?ff |]
      ==> set (SINVAR_DomainHierarchyNG.minimalize_offending_overapprox ?ff
                [] ?G ?nP)
          : set_offending_flows ?G ?nP",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app (template_hole 7, template_var 1)),
                template_var 2),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 1),
          template_app (template_hole 5, template_var 2)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 2, template_hole 8),
                         template_var 1),
                       template_hole 1),
                     template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_app (template_hole 0, template_hole 8),
                 template_var 2),
               template_var 0))
           ))),
    ("SINVAR_DomainHierarchyNG.mono_imp_emptyoffending_eq_nevervalid",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_DomainHierarchyNG.sinvar;
         wf_graph ?G; ~ SINVAR_DomainHierarchyNG.sinvar ?G ?nP;
         set_offending_flows ?G ?nP = {} |]
      ==> ~ (EX F<=edges ?G.
                SINVAR_DomainHierarchyNG.sinvar (delete_edges ?G F) ?nP)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_hole 10)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 0)
                )
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_hole 10),
              template_var 1),
            template_var 0),
          template_hole 5)],
       template_negation
        (template_predicate (template_app (template_hole 4, t_empty))))),
    ("SINVAR_DomainHierarchyNG.ENFsr_offending_set",
     "sinvar_all_edges_normal_form_sr ?P ==>
      set_offending_flows ?G ?nP =
      (if SINVAR_DomainHierarchyNG.sinvar ?G ?nP then {}
       else {{(s, r). (s, r) : edges ?G & ~ ?P (?nP s) s (?nP r) r}})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_hole 12),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 10, template_hole 12),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 12, template_var 1),
                 template_var 0)),
             template_hole 8),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6, template_app (template_hole 5, t_empty))),
             template_hole 8))))),
    ("SINVAR_DomainHierarchyNG.Un_set_offending_flows_bound_minus",
     "[| wf_graph (| nodes = ?V, edges = ?E |);
         \<Union> (set_offending_flows (| nodes = ?V, edges = ?E |) ?nP)
         <= ?X |]
      ==> \<Union>
           (set_offending_flows (| nodes = ?V, edges = ?E - {?f} |) ?nP)
          <= ?X - {?f}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3),
                template_hole 7))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3),
                  template_hole 7)),
              template_var 2)),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_app (template_hole 8, template_var 4),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_hole 0))),
                 template_hole 7)),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("SINVAR_DomainHierarchyNG.ENF_offending_not_empty_imp_ENF_offending_subseteq_rhs",
     "[| SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
          SINVAR_DomainHierarchyNG.sinvar ?P;
         set_offending_flows ?G ?nP ~= {} |]
      ==> {{(e1, e2). (e1, e2) : edges ?G & ~ ?P (?nP e1) (?nP e2)}}
          <= set_offending_flows ?G ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_hole 12),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 9, template_hole 12),
                  template_var 1),
                template_var 0),
              template_hole 8)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5, template_app (template_hole 4, t_empty))),
           template_hole 8),
         template_app
          (template_app
            (template_app (template_hole 9, template_hole 12),
             template_var 1),
           template_var 0)))),
    ("SINVAR_DomainHierarchyNG.is_offending_flows_min_set_minimalize_offending_overapprox",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_DomainHierarchyNG.sinvar;
         wf_graph ?G; is_offending_flows (set ?ff) ?G ?nP;
         set ?ff <= edges ?G; distinct ?ff |]
      ==> is_offending_flows_min_set
           (set (SINVAR_DomainHierarchyNG.minimalize_offending_overapprox
                  ?ff [] ?G ?nP))
           ?G ?nP",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_hole 9)),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_hole 9),
                  template_app (template_hole 6, template_var 1)),
                template_var 2),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_app (template_hole 4, template_var 2)),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 9),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 1, template_hole 9),
                           template_var 1),
                         template_hole 0),
                       template_var 2),
                     template_var 0))),
               template_var 2),
             template_var 0)
           ))),
    ("SINVAR_DomainHierarchyNG.ENFnr_offending_set",
     "SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_not_refl
       SINVAR_DomainHierarchyNG.sinvar ?P ==>
      set_offending_flows ?G ?nP =
      (if SINVAR_DomainHierarchyNG.sinvar ?G ?nP then {}
       else {{(e1, e2).
              (e1, e2) : edges ?G & e1 ~= e2 & ~ ?P (?nP e1) (?nP e2)}})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 11, template_hole 13),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 13, template_var 1),
                 template_var 0)),
             template_hole 9),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7, template_app (template_hole 6, t_empty))),
             template_hole 9))))),
    ("SINVAR_DomainHierarchyNG.minimality_offending_flows_mono_edges_graph",
     "[| wf_graph (| nodes = ?V, edges = ?E |); ?E' <= ?E;
         ?F : set_offending_flows (| nodes = ?V, edges = ?E' |) ?nP |]
      ==> ALL (e1, e2):?F.
             ~ SINVAR_DomainHierarchyNG.sinvar
                (add_edge e1 e2
                  (delete_edges (| nodes = ?V, edges = ?E |) ?F))
                ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_app (template_hole 10, template_var 4),
                  template_var 3),
                template_hole 9))
            ),
        template_inequation (less_equals, template_var 2, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_app
                   (template_app
                     (template_app (template_hole 10, template_var 4),
                      template_var 2),
                    template_hole 9)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 3, t_empty))
           ))),
    ("SINVAR_DomainHierarchyNG.ENFnrSR_offending_set",
     "sinvar_all_edges_normal_form_not_refl_SR ?P ==>
      set_offending_flows ?G ?nP =
      (if SINVAR_DomainHierarchyNG.sinvar ?G ?nP then {}
       else {{(e1, e2).
              (e1, e2) : edges ?G &
              e1 ~= e2 & ~ ?P (?nP e1) e1 (?nP e2) e2}})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 11, template_hole 13),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 13, template_var 1),
                 template_var 0)),
             template_hole 9),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7, template_app (template_hole 6, t_empty))),
             template_hole 9))))),
    ("SINVAR_DomainHierarchyNG.offending_partition_subset_empty",
     "[| ALL F:set_offending_flows (| nodes = ?V, edges = ?E Un ?X |) ?nP.
            F <= ?X;
         wf_graph (| nodes = ?V, edges = ?E Un ?X |); ?E Int ?X = {} |]
      ==> set_offending_flows (| nodes = ?V, edges = ?E |) ?nP = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_app (template_hole 11, template_hole 10),
                    template_app
                     (template_app
                       (template_app (template_hole 9, template_var 3),
                        template_app
                         (template_app (template_hole 8, template_var 2),
                          template_var 1)),
                      template_hole 7)),
                  template_var 0)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_app
                   (template_app (template_hole 8, template_var 2),
                    template_var 1)),
                template_hole 7))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 11, template_hole 10),
             template_app
              (template_app
                (template_app (template_hole 9, template_var 3),
                 template_var 2),
               template_hole 7)),
           template_var 0),
         template_hole 0))),
    ("SINVAR_DomainHierarchyNG.not_model_mono_imp_addedge_mono",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_DomainHierarchyNG.sinvar;
         wf_graph ?G; (?a1.0, ?a2.0) : edges ?G; ?X <= ?Y;
         ~ SINVAR_DomainHierarchyNG.sinvar
            (add_edge ?a1.0 ?a2.0 (delete_edges ?G ?Y)) ?nP |]
      ==> ~ SINVAR_DomainHierarchyNG.sinvar
             (add_edge ?a1.0 ?a2.0 (delete_edges ?G ?X)) ?nP",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_hole 8)),
        template_predicate (template_app (template_hole 7, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3)),
              template_app (template_hole 4, template_var 5))
            ),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_app (template_hole 1, template_var 4),
                        template_var 3),
                      template_app
                       (template_app (template_hole 0, template_var 5),
                        template_var 1))),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 2))),
                 template_var 0)
               )
           ))),
    ("SINVAR_DomainHierarchyNG.sinvar_valid_remove_minimalize_offending_overapprox",
     "[| wf_graph (| nodes = ?nodesG, edges = ?edgesG |);
         ~ SINVAR_DomainHierarchyNG.sinvar
            (| nodes = ?nodesG, edges = ?edgesG |) ?nP;
         set ?Es = ?edgesG; distinct ?Es |]
      ==> SINVAR_DomainHierarchyNG.sinvar
           (| nodes = ?nodesG,
              edges =
                ?edgesG -
                set (SINVAR_DomainHierarchyNG.minimalize_offending_overapprox
                      ?Es [] (| nodes = ?nodesG, edges = ?edgesG |) ?nP) |)
           ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_hole 8))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_app (template_hole 9, template_var 3),
                        template_var 2),
                      template_hole 8)),
                  template_var 1)
                )
            ),
        template_equation
         (template_app (template_hole 4, template_var 0), template_var 2),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app (template_hole 9, template_var 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 1, template_hole 6),
                               template_var 0),
                             template_hole 0),
                           template_app
                            (template_app
                              (template_app
                                (template_hole 9, template_var 3),
                               template_var 2),
                             template_hole 8)),
                         template_var 1)))),
                 template_hole 8)),
             template_var 1)
           ))),
    ("SINVAR_DomainHierarchyNG.set_offending_flows_insert_contains_new",
     "[| wf_graph (| nodes = ?V, edges = insert ?e ?E |);
         set_offending_flows (| nodes = ?V, edges = ?E |) ?nP = {};
         set_offending_flows (| nodes = ?V, edges = insert ?e ?E |) ?nP ~=
         {} |]
      ==> {?e}
          : set_offending_flows (| nodes = ?V, edges = insert ?e ?E |) ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_app
                   (template_app (template_hole 8, template_var 2),
                    template_var 1)),
                template_hole 7))
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 1),
                template_hole 7)),
            template_var 0),
          template_hole 3),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app
                   (template_app
                     (template_app (template_hole 9, template_var 3),
                      template_app
                       (template_app (template_hole 8, template_var 2),
                        template_var 1)),
                    template_hole 7)),
                template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_hole 0)),
             template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app
                    (template_app (template_hole 9, template_var 3),
                     template_app
                      (template_app (template_hole 8, template_var 2),
                       template_var 1)),
                   template_hole 7)),
               template_var 0))
           ))),
    ("SINVAR_DomainHierarchyNG.ENF_fsts_refl_instance",
     "[| SecurityInvariant_withOffendingFlows.ENF_refl
          SINVAR_DomainHierarchyNG.sinvar ?P;
         ALL nP e1 e2.
            ~ ?P (nP e1) (nP e2) --> ~ ?P ?default_node_properties (nP e2);
         ?f : set_offending_flows ?G ?nP; ?i : fst ` ?f |]
      ==> ~ SINVAR_DomainHierarchyNG.sinvar ?G
             (?nP(?i := ?default_node_properties))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 10),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 4))
               )
           ))),
    ("SINVAR_DomainHierarchyNG.ENF_snds_refl_instance",
     "[| SecurityInvariant_withOffendingFlows.ENF_refl
          SINVAR_DomainHierarchyNG.sinvar ?P;
         ALL nP e1 e2.
            ~ ?P (nP e1) (nP e2) --> ~ ?P (nP e1) ?default_node_properties;
         ?f : set_offending_flows ?G ?nP; ?i : snd ` ?f |]
      ==> ~ SINVAR_DomainHierarchyNG.sinvar ?G
             (?nP(?i := ?default_node_properties))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 10),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 4))
               )
           ))),
    ("SINVAR_DomainHierarchyNG.minimality_offending_flows_mono_edges_graph_extend",
     "[| wf_graph (| nodes = ?V, edges = ?E |); ?E' <= ?E;
         ?Fadd Int ?E' = {};
         ?F' : set_offending_flows (| nodes = ?V, edges = ?E' |) ?nP |]
      ==> ALL (e1, e2):?F'.
             ~ SINVAR_DomainHierarchyNG.sinvar
                (add_edge e1 e2
                  (delete_edges (| nodes = ?V, edges = ?E |)
                    (?F' Un ?Fadd)))
                ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 15,
              template_app
               (template_app
                 (template_app (template_hole 14, template_var 5),
                  template_var 4),
                template_hole 13))
            ),
        template_inequation (less_equals, template_var 3, template_var 4),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 2),
            template_var 3),
          template_hole 9),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app
                   (template_app
                     (template_app (template_hole 14, template_var 5),
                      template_var 3),
                    template_hole 13)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app (template_hole 4, t_empty))
           ))),
    ("SINVAR_DomainHierarchyNG.ENFnr_snds_weakrefl_instance",
     "[| SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_not_refl
          SINVAR_DomainHierarchyNG.sinvar ?P;
         ALL e1 e2. ~ ?P e1 e2 --> ~ ?P e1 ?default_node_properties;
         ALL e2. ?P ?default_node_properties e2;
         ?f : set_offending_flows ?G ?nP; ?i : snd ` ?f |]
      ==> ~ SINVAR_DomainHierarchyNG.sinvar ?G
             (?nP(?i := ?default_node_properties))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 9),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 4))
               )
           ))),
    ("SINVAR_DomainHierarchyNG.partitioned_offending_subseteq_pow_combine",
     "[| wf_graph (| nodes = ?V, edges = ?E Un ?X |); ?E Int ?X = {};
         ALL F:set_offending_flows (| nodes = ?V, edges = ?E Un ?X |) ?nP.
            F <= ?X |]
      ==> set_offending_flows (| nodes = ?V, edges = ?E Un ?X |) ?nP
          <= pow_combine ?X
              (set_offending_flows (| nodes = ?V, edges = ?E |) ?nP)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app
                 (template_app (template_hole 11, template_var 3),
                  template_app
                   (template_app (template_hole 10, template_var 2),
                    template_var 1)),
                template_hole 9))
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_hole 6),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_app
                     (template_app
                       (template_app (template_hole 11, template_var 3),
                        template_app
                         (template_app (template_hole 10, template_var 2),
                          template_var 1)),
                      template_hole 9)),
                  template_var 0)),
              t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_app (template_hole 11, template_var 3),
                 template_app
                  (template_app (template_hole 10, template_var 2),
                   template_var 1)),
               template_hole 9)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_app (template_hole 11, template_var 3),
                   template_var 2),
                 template_hole 9)),
             template_var 0))))),
    ("SINVAR_DomainHierarchyNG.set_offending_flows_simp",
     "wf_graph ?G ==>
      set_offending_flows ?G ?nP =
      {F. F <= edges ?G &
          (~ SINVAR_DomainHierarchyNG.sinvar ?G ?nP &
           SINVAR_DomainHierarchyNG.sinvar
            (| nodes = nodes ?G, edges = edges ?G - F |) ?nP) &
          (ALL (e1, e2):F.
              ~ SINVAR_DomainHierarchyNG.sinvar
                 (| nodes = nodes ?G,
                    edges = {(e1, e2)} Un (edges ?G - F) |)
                 ?nP)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 16, template_hole 15),
             template_var 1),
           template_var 0),
         template_app (template_hole 14, t_empty)))),
    ("SINVAR_DomainHierarchyNG.ENFnr_fsts_weakrefl_instance",
     "[| SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_not_refl
          SINVAR_DomainHierarchyNG.sinvar ?P;
         ALL e1 e2.
            e2 ~= ?default_node_properties -->
            ~ ?P e1 e2 --> ~ ?P ?default_node_properties e2;
         ALL e1. ?P e1 ?default_node_properties;
         ?f : set_offending_flows ?G ?nP; ?i : fst ` ?f |]
      ==> ~ SINVAR_DomainHierarchyNG.sinvar ?G
             (?nP(?i := ?default_node_properties))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 10),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 4))
               )
           ))),
    ("SINVAR_DomainHierarchyNG.sinvar_mono_I_proofrule",
     "[| ALL nP G.
            SINVAR_DomainHierarchyNG.sinvar G nP =
            (ALL (e1, e2):edges G. ?P e1 e2 nP G);
         ALL nP e1 e2 N E' E.
            wf_graph (| nodes = N, edges = E |) &
            (e1, e2) : E &
            E' <= E & ?P e1 e2 nP (| nodes = N, edges = E |) -->
            ?P e1 e2 nP (| nodes = N, edges = E' |) |]
      ==> SecurityInvariant_withOffendingFlows.sinvar_mono
           SINVAR_DomainHierarchyNG.sinvar",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_hole 15)))),
    ("SINVAR_DomainHierarchyNG.ENFnrSR_fsts_weakrefl_instance",
     "[| sinvar_all_edges_normal_form_not_refl_SR ?P;
         ALL s r. ?P ?default_node_properties s ?default_node_properties r;
         ALL s r.
            ?nP r ~= ?default_node_properties -->
            ~ ?P (?nP s) s (?nP r) r -->
            ~ ?P ?default_node_properties s (?nP r) r;
         ALL s r. ?P (?nP s) s ?default_node_properties r;
         ?f : set_offending_flows ?G ?nP; ?i : fst ` ?f |]
      ==> ~ SINVAR_DomainHierarchyNG.sinvar ?G
             (?nP(?i := ?default_node_properties))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 10),
                  template_var 1),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 0),
                   template_var 4))
               )
           ))),
    ("SINVAR_DomainHierarchyNG.ENFnrSR_snds_weakrefl_instance",
     "[| sinvar_all_edges_normal_form_not_refl_SR ?P;
         ALL s r. ?P ?default_node_properties s ?default_node_properties r;
         ALL s r.
            ?nP s ~= ?default_node_properties -->
            ~ ?P (?nP s) s (?nP r) r -->
            ~ ?P (?nP s) s ?default_node_properties r;
         ALL s r. ?P ?default_node_properties s (?nP r) r;
         ?f : set_offending_flows ?G ?nP; ?i : snd ` ?f |]
      ==> ~ SINVAR_DomainHierarchyNG.sinvar ?G
             (?nP(?i := ?default_node_properties))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 10),
                  template_var 1),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 0),
                   template_var 4))
               )
           )))]
