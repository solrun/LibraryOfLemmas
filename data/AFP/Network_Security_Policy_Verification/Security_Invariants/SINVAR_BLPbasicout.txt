Loading theory "Draft.TopoS_Util" (required by "Draft.SINVAR_BLPbasicTemplates" via "Draft.SINVAR_BLPbasic" via "Draft.TopoS_Helper" via "Draft.TopoS_Interface")
Loading theory "Draft.FiniteGraph" (required by "Draft.SINVAR_BLPbasicTemplates" via "Draft.SINVAR_BLPbasic" via "Draft.TopoS_Helper" via "Draft.TopoS_Interface")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SINVAR_BLPbasicTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.TopoS_Vertices" (required by "Draft.SINVAR_BLPbasicTemplates" via "Draft.SINVAR_BLPbasic" via "Draft.TopoS_Helper" via "Draft.TopoS_Interface")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.TopoS_Util"
### 0.032s elapsed time, 0.158s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SINVAR_BLPbasicTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.159s elapsed time, 0.652s cpu time, 0.050s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SINVAR_BLPbasicTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
class vertex = type +
  fixes vertex_1 :: "'a"
    and vertex_2 :: "'a"
    and vertex_3 :: "'a"
  assumes "distinct_vertices": "distinct [vertex_1, vertex_2, vertex_3]"
instantiation
  nat :: vertex
  vertex_1_nat == vertex_1 :: nat
  vertex_2_nat == vertex_2 :: nat
  vertex_3_nat == vertex_3 :: nat
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
locale wf_graph
  fixes G :: "'v graph"
  assumes "wf_graph G"
instantiation
  int :: vertex
  vertex_1_int == vertex_1 :: int
  vertex_2_int == vertex_2 :: int
  vertex_3_int == vertex_3 :: int
Found termination order: "size_list size <*mlex*> {}"
instantiation
  char :: vertex
  vertex_1_char == vertex_1 :: char
  vertex_2_char == vertex_2 :: char
  vertex_3_char == vertex_3 :: char
instantiation
  list :: (vertex) vertex
  vertex_1_list == vertex_1 :: 'a list
  vertex_2_list == vertex_2 :: 'a list
  vertex_3_list == vertex_3 :: 'a list
val tune_string_vertex_format = fn: term -> string -> string
### theory "Draft.TopoS_Vertices"
### 0.331s elapsed time, 1.339s cpu time, 0.050s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SINVAR_BLPbasicTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.364s elapsed time, 1.419s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SINVAR_BLPbasicTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.256s elapsed time, 1.005s cpu time, 0.084s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SINVAR_BLPbasicTemplates" via "Draft.ExtrEqs")
### theory "Draft.FiniteGraph"
### 0.537s elapsed time, 2.124s cpu time, 0.239s GC time
Loading theory "Draft.TopoS_Interface" (required by "Draft.SINVAR_BLPbasicTemplates" via "Draft.SINVAR_BLPbasic" via "Draft.TopoS_Helper")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale SecurityInvariant
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
    and default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
    and receiver_violation :: "bool"
  assumes "SecurityInvariant sinvar \<bottom> receiver_violation"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 1.002s elapsed time, 3.775s cpu time, 0.875s GC time
Loading theory "Draft.vertex_example_simps" (required by "Draft.SINVAR_BLPbasicTemplates" via "Draft.SINVAR_BLPbasic" via "Draft.TopoS_Helper")
Found termination order: "{}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.076s elapsed time, 4.064s cpu time, 0.875s GC time
locale SecurityInvariant_IFS
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
    and default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
  assumes "SecurityInvariant_IFS sinvar \<bottom>"
"1"
  :: "nat"
Found termination order: "size <*mlex*> {}"
"CHR ''A''"
  :: "char"
locale SecurityInvariant_IFS_otherDirectrion
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
    and default_node_properties :: "'b"  (\<open>\<bottom>\<close>)
  assumes "SecurityInvariant_IFS_otherDirectrion sinvar \<bottom>"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "is_offending_flows_def" =
      \<open>is_offending_flows ?f ?G ?nP ==
             ~ sinvar ?G ?nP & sinvar (delete_edges ?G ?f) ?nP\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "is_offending_flows_min_set_def" =
      \<open>is_offending_flows_min_set ?f ?G ?nP ==
             is_offending_flows ?f ?G ?nP &
             (ALL (e1, e2):?f.
                 ~ sinvar (add_edge e1 e2 (delete_edges ?G ?f)) ?nP)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "set_offending_flows_def" =
      \<open>set_offending_flows ?G ?nP =
             {F. F <= edges ?G &
                 is_offending_flows_min_set F ?G ?nP}\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "offending_not_empty" =
      \<open>?F : set_offending_flows ?G ?nP ==> ?F ~= {}\<close>
  notes theorem
    "empty_offending_contra" =
      \<open>[| ?F : set_offending_flows ?G ?nP; ?F = {} |]
             ==> False\<close>
  notes theorem
    "offending_notevalD" =
      \<open>?F : set_offending_flows ?G ?nP ==> ~ sinvar ?G ?nP\<close>
  notes theorem
    "sinvar_no_offending" =
      \<open>sinvar ?G ?nP ==> set_offending_flows ?G ?nP = {}\<close>
  notes theorem
    "removing_offending_flows_makes_invariant_hold" =
      \<open>ALL F:set_offending_flows ?G ?nP.
                sinvar (delete_edges ?G F) ?nP\<close>
  notes theorem
    "valid_without_offending_flows" =
      \<open>?F : set_offending_flows ?G ?nP ==>
             sinvar (delete_edges ?G ?F) ?nP\<close>
  notes theorem
    "set_offending_flows_simp" =
      \<open>wf_graph ?G ==>
             set_offending_flows ?G ?nP =
             {F. F <= edges ?G &
                 (~ sinvar ?G ?nP &
                  sinvar (| nodes = nodes ?G, edges = edges ?G - F |) ?nP) &
                 (ALL (e1, e2):F.
                     ~ sinvar
                        (| nodes = nodes ?G,
                           edges = {(e1, e2)} Un (edges ?G - F) |)
                        ?nP)}\<close>
locale SecurityInvariant
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
    and default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
    and receiver_violation :: "bool"
  assumes "SecurityInvariant sinvar \<bottom> receiver_violation"
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "is_offending_flows_def" =
      \<open>is_offending_flows ?f ?G ?nP ==
             ~ sinvar ?G ?nP & sinvar (delete_edges ?G ?f) ?nP\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "is_offending_flows_min_set_def" =
      \<open>is_offending_flows_min_set ?f ?G ?nP ==
             is_offending_flows ?f ?G ?nP &
             (ALL (e1, e2):?f.
                 ~ sinvar (add_edge e1 e2 (delete_edges ?G ?f)) ?nP)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "set_offending_flows_def" =
      \<open>set_offending_flows ?G ?nP =
             {F. F <= edges ?G &
                 is_offending_flows_min_set F ?G ?nP}\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "offending_not_empty" =
      \<open>?F : set_offending_flows ?G ?nP ==> ?F ~= {}\<close>
  notes theorem
    "empty_offending_contra" =
      \<open>[| ?F : set_offending_flows ?G ?nP; ?F = {} |]
             ==> False\<close>
  notes theorem
    "offending_notevalD" =
      \<open>?F : set_offending_flows ?G ?nP ==> ~ sinvar ?G ?nP\<close>
  notes theorem
    "sinvar_no_offending" =
      \<open>sinvar ?G ?nP ==> set_offending_flows ?G ?nP = {}\<close>
  notes theorem
    "removing_offending_flows_makes_invariant_hold" =
      \<open>ALL F:set_offending_flows ?G ?nP.
                sinvar (delete_edges ?G F) ?nP\<close>
  notes theorem
    "valid_without_offending_flows" =
      \<open>?F : set_offending_flows ?G ?nP ==>
             sinvar (delete_edges ?G ?F) ?nP\<close>
  notes theorem
    "set_offending_flows_simp" =
      \<open>wf_graph ?G ==>
             set_offending_flows ?G ?nP =
             {F. F <= edges ?G &
                 (~ sinvar ?G ?nP &
                  sinvar (| nodes = nodes ?G, edges = edges ?G - F |) ?nP) &
                 (ALL (e1, e2):F.
                     ~ sinvar
                        (| nodes = nodes ?G,
                           edges = {(e1, e2)} Un (edges ?G - F) |)
                        ?nP)}\<close>
  notes
    "SecurityInvariant_preliminaries_axioms" =
      (\<open>SecurityInvariant_preliminaries sinvar\<close>)
      ["attribute" "<attribute>"]
  notes
    "defined_offending" =
      \<open>[| wf_graph ?G; ~ sinvar ?G ?nP |]
             ==> set_offending_flows ?G ?nP ~= {}\<close>
  notes
    "mono_sinvar" =
      \<open>[| wf_graph (| nodes = ?N, edges = ?E |); ?E' <= ?E;
                sinvar (| nodes = ?N, edges = ?E |) ?nP |]
             ==> sinvar (| nodes = ?N, edges = ?E' |) ?nP\<close>
  notes
    "mono_offending" =
      \<open>[| wf_graph ?G; is_offending_flows ?ff ?G ?nP |]
             ==> is_offending_flows (?ff Un ?f') ?G ?nP\<close>
  notes
    "SecurityInvariant_axioms" =
      (\<open>SecurityInvariant sinvar \<bottom> receiver_violation\<close>)
      ["attribute" "<attribute>"]
  notes
    "default_secure" =
      \<open>[| wf_graph ?G; ~ sinvar ?G ?nP;
                ?F : set_offending_flows ?G ?nP |]
             ==> (~ receiver_violation -->
                  ?i : fst ` ?F --> ~ sinvar ?G (?nP(?i := \<bottom>))) &
                 (receiver_violation -->
                  ?i : snd ` ?F -->
                  ~ sinvar ?G (?nP(?i := \<bottom>)))\<close>
  notes
    "default_unique" =
      \<open>?otherbot ~= \<bottom> ==>
             EX G nP i F.
                wf_graph G &
                ~ sinvar G nP &
                F : set_offending_flows G nP &
                sinvar (delete_edges G F) nP &
                (~ receiver_violation -->
                 i : fst ` F & sinvar G (nP(i := ?otherbot))) &
                (receiver_violation -->
                 i : snd ` F & sinvar G (nP(i := ?otherbot)))\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props_graph ==
            lfp (%p x1 x2.
                    EX node_props_sum P.
                       x1 = P &
                       x2 =
                       (%i. case node_properties P i of None => \<bottom>
                            | Some property => property))\<close>)
      ["nitpick_unfold"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props_graph ?P
             (%i. case node_properties ?P i of None => \<bottom>
                  | Some property => property)\<close>)
      ["Pure.intro" ?]
  notes
    "node_props_graph.intros" =
      \<open>node_props_graph ?P
              (%i. case node_properties ?P i of None => \<bottom>
                   | Some property => property)\<close>
  notes
    "node_props_graph.cases" =
      (\<open>[| node_props_graph ?a1.0 ?a2.0;
                 !!node_props_sum P.
                    [| ?a1.0 = P;
                       ?a2.0 =
                       (%i. case node_properties P i of None => \<bottom>
                            | Some property => property) |]
                    ==> ?P |]
              ==> ?P\<close>)
      ["consumes" - 1, "constraints" 2, "attribute" "<attribute>",
        "Pure.elim" ?]
  notes
    "node_props_graph.induct" =
      (\<open>[| node_props_graph ?x1.0 ?x2.0;
                 !!node_props_sum P.
                    ?P P
                     (%i. case node_properties P i of None => \<bottom>
                          | Some property => property) |]
              ==> ?P ?x1.0 ?x2.0\<close>)
      ["consumes" - 1]
  notes
    "node_props_graph.simps" =
      (\<open>node_props_graph ?a1.0 ?a2.0 =
              (EX node_props_sum P.
                  ?a1.0 = P &
                  ?a2.0 =
                  (%i. case node_properties P i of None => \<bottom>
                       | Some property => property))\<close>)
      ["attribute" "<attribute>"]
  notes
    "node_props_graph.inducts" =
      (\<open>[| node_props_graph ?x1.0 ?x2.0;
                 !!node_props_sum P.
                    ?P P
                     (%i. case node_properties P i of None => \<bottom>
                          | Some property => property) |]
              ==> ?P ?x1.0 ?x2.0\<close>)
      ["consumes" - 1, "attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props_rel == lfp (%p x1 x2. False)\<close>)
      ["nitpick_unfold"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes "node_props_rel.intros" =
  notes
    "node_props_rel.cases" =
      (\<open>node_props_rel ?a1.0 ?a2.0 ==> ?P\<close>)
      ["consumes" 0, "constraints" 2, "attribute" "<attribute>",
        "Pure.elim" ?]
  notes
    "node_props_rel.induct" =
      (\<open>node_props_rel ?x1.0 ?x2.0 ==> ?P ?x1.0 ?x2.0\<close>)
      ["consumes" 0]
  notes
    "node_props_rel.simps" =
      (\<open>node_props_rel ?a1.0 ?a2.0 = False\<close>)
      ["attribute" "<attribute>"]
  notes
    "node_props_rel.inducts" =
      (\<open>node_props_rel ?x1.0 ?x2.0 ==> ?P ?x1.0 ?x2.0\<close>)
      ["consumes" 0, "attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props_dom ?P ==>
            node_props ?P =
            (%i. case node_properties ?P i of None => \<bottom>
                 | Some property => property)\<close>)
      ["nitpick_psimp"]
  notes
    "node_props.psimps" =
      \<open>node_props_dom ?P ==>
             node_props ?P =
             (%i. case node_properties ?P i of None => \<bottom>
                  | Some property => property)\<close>
  notes
    "node_props.pinduct" =
      (\<open>[| node_props_dom ?a0.0; !!P. node_props_dom P ==> ?P P |]
              ==> ?P ?a0.0\<close>)
      ["case_names" "1", "consumes" 1, "induct" pred]
  notes
    "node_props.termination" = \<open>wf ?R ==> All node_props_dom\<close>
  notes
    "node_props.cases" = (\<open>(!!P. ?x = P ==> ?P) ==> ?P\<close>)
      ["case_names" "1"]
  notes
    "node_props.pelims" =
      (\<open>[| node_props ?x = ?y; node_props_dom ?x;
                 !!P. [| ?x = P;
                         ?y =
                         (%i. case node_properties P i of None => \<bottom>
                              | Some property => property);
                         node_props_dom P |]
                      ==> ?P |]
              ==> ?P\<close>)
      ["consumes" 1, "constraints" 1]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props ?P =
            (%i. case node_properties ?P i of None => \<bottom>
                 | Some property => property)\<close>)
      ["simp", "nitpick_simp"]
  notes
    "node_props.simps" =
      \<open>node_props ?P =
             (%i. case node_properties ?P i of None => \<bottom>
                  | Some property => property)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "node_props.induct" = (\<open>(!!P. ?P P) ==> ?P ?a0.0\<close>)
      ["case_names" "1"]
  notes
    "node_props.elims" =
      (\<open>[| node_props ?x = ?y;
                 !!P. [| ?x = P;
                         ?y =
                         (%i. case node_properties P i of None => \<bottom>
                              | Some property => property) |]
                      ==> ?P |]
              ==> ?P\<close>)
      ["consumes" 1, "constraints" 1]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "node_props_formaldef_def" =
      \<open>node_props_formaldef ?P ==
             %i. if i : dom (node_properties ?P)
                 then the (node_properties ?P i) else \<bottom>\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "node_props_eq_node_props_formaldef" =
      \<open>node_props_formaldef = node_props\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "eval_def" =
      \<open>eval ?G ?P == wf_graph ?G & sinvar ?G (node_props ?P)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "unique_common_math_notation" =
      \<open>ALL G nP i F.
                wf_graph G &
                ~ sinvar G nP &
                F : set_offending_flows G nP &
                sinvar (delete_edges G F) nP &
                (~ receiver_violation -->
                 i : fst ` F --> ~ sinvar G (nP(i := ?otherbot))) &
                (receiver_violation -->
                 i : snd ` F --> ~ sinvar G (nP(i := ?otherbot))) ==>
             ?otherbot = \<bottom>\<close>
locale SecurityInvariant_ACS
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
    and default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
  assumes "SecurityInvariant_ACS sinvar \<bottom>"
Found termination order: "size <*mlex*> {}"
### theory "Draft.vertex_example_simps"
### 0.237s elapsed time, 0.864s cpu time, 0.091s GC time
locale SecurityInvariant_ACS_otherDirectrion
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
    and default_node_properties :: "'b"  (\<open>\<bottom>\<close>)
  assumes "SecurityInvariant_ACS_otherDirectrion sinvar \<bottom>"
### theory "Draft.TopoS_Interface"
### 1.147s elapsed time, 4.245s cpu time, 0.861s GC time
Loading theory "Draft.TopoS_withOffendingFlows" (required by "Draft.SINVAR_BLPbasicTemplates" via "Draft.SINVAR_BLPbasic" via "Draft.TopoS_Helper" via "Draft.TopoS_ENF")
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
### theory "HOL-Library.Tree"
### 2.064s elapsed time, 6.728s cpu time, 1.233s GC time
Loading theory "Draft.Templates" (required by "Draft.SINVAR_BLPbasicTemplates" via "Draft.ExtrEqs")
### theory "Draft.TopoS_withOffendingFlows"
### 0.728s elapsed time, 1.771s cpu time, 0.268s GC time
Loading theory "Draft.TopoS_ENF" (required by "Draft.SINVAR_BLPbasicTemplates" via "Draft.SINVAR_BLPbasic" via "Draft.TopoS_Helper")
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.257s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SINVAR_BLPbasicTemplates")
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
"{{1, 2, 3}, {1, 2}, {1}, {1, 3}, {3}, {}, {2}, {2, 3}, {8}, {9}}"
  :: "int set set"
"{{3, 2, 1, 8}, {3, 2, 1, 9}, {2, 1, 8}, {2, 1, 9}, {1, 8}, {1, 9},
  {3, 1, 8}, {3, 1, 9}, {3, 8}, {3, 9}, {8}, {9}, {2, 8}, {2, 9}, {3, 2, 8},
  {3, 2, 9}}"
  :: "int set set"
"{{2, 8}, {2, 5, 6}, {8}, {5, 6}, {1, 8}, {1, 5, 6}, {2, 1, 8},
  {2, 1, 5, 6}, {2}, {}, {1}, {1, 2}}"
  :: "int set set"
"{{2}, {}, {1}, {1, 2}}"
  :: "int set set"
### theory "Draft.TopoS_ENF"
### 0.523s elapsed time, 1.959s cpu time, 0.149s GC time
Loading theory "Draft.TopoS_Helper" (required by "Draft.SINVAR_BLPbasicTemplates" via "Draft.SINVAR_BLPbasic")
"True"
  :: "bool"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.669s elapsed time, 2.209s cpu time, 0.184s GC time
### theory "Draft.TopoS_Helper"
### 0.224s elapsed time, 0.499s cpu time, 0.036s GC time
Loading theory "Draft.SINVAR_BLPbasic" (required by "Draft.SINVAR_BLPbasicTemplates")
Found termination order: "{}"
### Cannot skip proof of schematic goal statement
### theory "Draft.SINVAR_BLPbasic"
### 0.240s elapsed time, 0.280s cpu time, 0.056s GC time
Loading theory "Draft.SINVAR_BLPbasicTemplates"
val templateLemmas =
   [("SINVAR_BLPbasic.privacylevel_refl", "?e <= ?e",
     template_inequation (less_equals, template_var 0, template_var 0)),
    ("SINVAR_BLPbasic.monotonicity_sinvar_mono",
     "SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
       SINVAR_BLPbasic.sinvar ?P ==>
      SecurityInvariant_withOffendingFlows.sinvar_mono
       SINVAR_BLPbasic.sinvar",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_hole 1)))),
    ("SINVAR_BLPbasic.ENFsr_monotonicity_sinvar_mono",
     "sinvar_all_edges_normal_form_sr ?P ==>
      SecurityInvariant_withOffendingFlows.sinvar_mono
       SINVAR_BLPbasic.sinvar",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_hole 1)))),
    ("SINVAR_BLPbasic.minimalize_offending_overapprox_keeps_keeps",
     "set ?keeps
      <= set (SINVAR_BLPbasic.minimalize_offending_overapprox ?ff ?keeps ?G
               ?nP)",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 3),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 2),
               template_var 3),
             template_var 1),
           template_var 0)))),
    ("SINVAR_BLPbasic.removing_offending_flows_makes_invariant_hold",
     "ALL F:set_offending_flows ?G ?nP.
         SINVAR_BLPbasic.sinvar (delete_edges ?G F) ?nP",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1),
               template_var 0)),
           t_empty)
         )),
    ("SINVAR_BLPbasic.sinvar_no_offending",
     "SINVAR_BLPbasic.sinvar ?G ?nP ==> set_offending_flows ?G ?nP = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 3),
             template_var 1),
           template_var 0),
         template_hole 0))),
    ("SINVAR_BLPbasic.offending_not_empty",
     "?F : set_offending_flows ?G ?nP ==> ?F ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 1),
                template_var 0))
            )],
       template_negation
        (template_equation (template_var 2, template_hole 0)))),
    ("SINVAR_BLPbasic.offending_notevalD",
     "?F : set_offending_flows ?G ?nP ==> ~ SINVAR_BLPbasic.sinvar ?G ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)
               )
           ))),
    ("SINVAR_BLPbasic.minimalize_offending_overapprox_subset",
     "set (SINVAR_BLPbasic.minimalize_offending_overapprox ?ff ?keeps ?G
            ?nP)
      <= set ?ff Un set ?keeps",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 3, template_var 3)),
         template_app (template_hole 3, template_var 2)))),
    ("SINVAR_BLPbasic.valid_without_offending_flows",
     "?F : set_offending_flows ?G ?nP ==>
      SINVAR_BLPbasic.sinvar (delete_edges ?G ?F) ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2)),
             template_var 0)
           ))),
    ("SINVAR_BLPbasic.ENFnr_to_ENFnrSR",
     "SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_not_refl
       SINVAR_BLPbasic.sinvar ?P ==>
      sinvar_all_edges_normal_form_not_refl_SR (%v1 _ v2 _. ?P v1 v2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_hole 1), t_empty)
           ))),
    ("SINVAR_BLPbasic.empty_offending_contra",
     "[| ?F : set_offending_flows ?G ?nP; ?F = {} |] ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 1),
                template_var 0))
            ),
        template_equation (template_var 2, template_hole 1)],
       template_predicate (template_hole 0))),
    ("SINVAR_BLPbasic.ENF_offending_case2",
     "[| SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
          SINVAR_BLPbasic.sinvar ?P;
         SINVAR_BLPbasic.sinvar ?G ?nP |]
      ==> {} = set_offending_flows ?G ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_hole 3),
             template_var 1),
           template_var 0)))),
    ("SINVAR_BLPbasic.defined_offending",
     "[| wf_graph ?G; ~ SINVAR_BLPbasic.sinvar ?G ?nP |]
      ==> set_offending_flows ?G ?nP ~= {}",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 3),
                 template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("SINVAR_BLPbasic.mono_offending",
     "[| wf_graph ?G; is_offending_flows ?ff ?G ?nP |]
      ==> is_offending_flows (?ff Un ?f') ?G ?nP",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 2),
                template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 3),
             template_var 1)
           ))),
    ("SINVAR_BLPbasic.ENF_notevalmodel_imp_offending_not_empty",
     "[| SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
          SINVAR_BLPbasic.sinvar ?P;
         ~ SINVAR_BLPbasic.sinvar ?G ?nP |]
      ==> set_offending_flows ?G ?nP ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 4),
                 template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("SINVAR_BLPbasic.ENFnrSR_to_ENFsr",
     "sinvar_all_edges_normal_form_not_refl_SR ?P ==>
      sinvar_all_edges_normal_form_sr
       (%p1 v1 p2 v2. v1 ~= v2 --> ?P p1 v1 p2 v2)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 4), t_empty)
           ))),
    ("SINVAR_BLPbasic.sinvar_BLPbasic_tancl",
     "wf_graph ?G ==>
      SINVAR_BLPbasic.sinvar ?G ?nP =
      (ALL v:nodes ?G. ALL v':succ_tran ?G v. ?nP v <= ?nP v')",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           t_empty)))),
    ("SINVAR_BLPbasic.sinvar_valid_remove_flattened_offending_flows",
     "wf_graph (| nodes = ?nodesG, edges = ?edgesG |) ==>
      SINVAR_BLPbasic.sinvar
       (| nodes = ?nodesG,
          edges =
            ?edgesG -
            \<Union>
             (set_offending_flows (| nodes = ?nodesG, edges = ?edgesG |)
               ?nP) |)
       ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app
                      (template_hole 1,
                       template_app
                        (template_app
                          (template_app (template_hole 0, template_hole 3),
                           template_app
                            (template_app
                              (template_app
                                (template_hole 5, template_var 2),
                               template_var 1),
                             template_hole 4)),
                         template_var 0)))),
                 template_hole 4)),
             template_var 0)
           ))),
    ("SINVAR_BLPbasic.sinvar_mono_I_proofrule_simple",
     "ALL G nP.
         SINVAR_BLPbasic.sinvar G nP =
         (ALL (e1, e2):edges G. ?P e1 e2 nP) ==>
      SecurityInvariant_withOffendingFlows.sinvar_mono
       SINVAR_BLPbasic.sinvar",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_hole 4)))),
    ("SINVAR_BLPbasic.sinvar_mono_imp_is_offending_flows_mono",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_BLPbasic.sinvar;
         wf_graph ?G; is_offending_flows ?FF ?G ?nP |]
      ==> is_offending_flows (?FF Un ?F) ?G ?nP",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_hole 3)),
        template_predicate (template_app (template_hole 2, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_hole 3),
                  template_var 2),
                template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 3),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 3),
             template_var 1)
           ))),
    ("SINVAR_BLPbasic.ENF_offending_imp_not_P",
     "[| SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
          SINVAR_BLPbasic.sinvar ?P;
         ?F : set_offending_flows ?G ?nP; (?e1.0, ?e2.0) : ?F |]
      ==> ~ ?P (?nP ?e1.0) (?nP ?e2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 3, template_hole 5),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_var 4)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_var 5,
                   template_app (template_var 2, template_var 1)),
                 template_app (template_var 2, template_var 0))
               )
           ))),
    ("SINVAR_BLPbasic.mono_sinvar",
     "[| wf_graph (| nodes = ?N, edges = ?E |); ?E' <= ?E;
         SINVAR_BLPbasic.sinvar (| nodes = ?N, edges = ?E |) ?nP |]
      ==> SINVAR_BLPbasic.sinvar (| nodes = ?N, edges = ?E' |) ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_hole 2))
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 0,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 1),
                 template_hole 2)),
             template_var 0)
           ))),
    ("SINVAR_BLPbasic.sinvar_mono_imp_negative_delete_edge_mono",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_BLPbasic.sinvar;
         wf_graph ?G; ?X <= ?Y;
         ~ SINVAR_BLPbasic.sinvar (delete_edges ?G ?Y) ?nP |]
      ==> ~ SINVAR_BLPbasic.sinvar (delete_edges ?G ?X) ?nP",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_hole 4)),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 0, template_var 3),
                      template_var 1)),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)),
                 template_var 0)
               )
           ))),
    ("SINVAR_BLPbasic.ENF_refl_not_offedning",
     "[| ~ SINVAR_BLPbasic.sinvar ?G ?nP; ?f : set_offending_flows ?G ?nP;
         SecurityInvariant_withOffendingFlows.ENF_refl
          SINVAR_BLPbasic.sinvar ?P |]
      ==> ALL (e1, e2):?f. e1 ~= e2",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 6),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 6),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, t_empty))
           ))),
    ("SINVAR_BLPbasic.ENF_offending_subseteq_lhs",
     "SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
       SINVAR_BLPbasic.sinvar ?P ==>
      set_offending_flows ?G ?nP
      <= {{(e1, e2). (e1, e2) : edges ?G & ~ ?P (?nP e1) (?nP e2)}}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 9, template_hole 11),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7, template_app (template_hole 6, t_empty))),
           template_hole 0)))),
    ("SINVAR_BLPbasic.offending_flows_union_mono",
     "[| wf_graph (| nodes = ?V, edges = ?E |); ?E' <= ?E |]
      ==> \<Union> (set_offending_flows (| nodes = ?V, edges = ?E' |) ?nP)
          <= \<Union>
              (set_offending_flows (| nodes = ?V, edges = ?E |) ?nP)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_hole 4))
            ),
        template_inequation (less_equals, template_var 1, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 1),
                 template_hole 4)),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 2),
                 template_hole 4)),
             template_var 0))))),
    ("SINVAR_BLPbasic.valid_empty_edges_iff_exists_offending_flows",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_BLPbasic.sinvar;
         wf_graph ?G; ~ SINVAR_BLPbasic.sinvar ?G ?nP |]
      ==> SINVAR_BLPbasic.sinvar (| nodes = nodes ?G, edges = {} |) ?nP =
          (set_offending_flows ?G ?nP ~= {})",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_hole 10)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 0)
                )
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app
                     (template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_var 1)),
                      template_hole 4),
                    template_hole 3)),
                template_var 0)
              )],
         template_negation
          (
             template_equation
              (template_app
                (template_app
                  (template_app (template_hole 1, template_hole 10),
                   template_var 1),
                 template_var 0),
               template_hole 0)
             )))),
    ("SINVAR_BLPbasic.sinvar_valid_remove_SOME_offending_flows",
     "set_offending_flows (| nodes = ?nodesG, edges = ?edgesG |) ?nP ~=
      {} ==>
      SINVAR_BLPbasic.sinvar
       (| nodes = ?nodesG,
          edges =
            ?edgesG -
            (SOME F.
                F : set_offending_flows
                     (| nodes = ?nodesG, edges = ?edgesG |) ?nP) |)
       ?nP",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1),
                    template_hole 4)),
                template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app (template_hole 1, t_empty))),
                 template_hole 4)),
             template_var 0)
           ))),
    ("SINVAR_BLPbasic.sinvar_mono_imp_sinvar_mono",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_BLPbasic.sinvar;
         wf_graph (| nodes = ?N, edges = ?E |); ?E' <= ?E;
         SINVAR_BLPbasic.sinvar (| nodes = ?N, edges = ?E |) ?nP |]
      ==> SINVAR_BLPbasic.sinvar (| nodes = ?N, edges = ?E' |) ?nP",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_hole 4)),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_hole 1))
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_hole 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1),
                 template_hole 1)),
             template_var 0)
           ))),
    ("SINVAR_BLPbasic.ENF_offending_set_P_representation",
     "[| SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
          SINVAR_BLPbasic.sinvar ?P;
         ?F : set_offending_flows ?G ?nP |]
      ==> ?F = {(e1, e2). (e1, e2) : edges ?G & ~ ?P (?nP e1) (?nP e2)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 8, template_hole 10),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_hole 6, template_app (template_hole 5, t_empty))))),
    ("SINVAR_BLPbasic.sinvar_mono_imp_negative_mono",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_BLPbasic.sinvar;
         wf_graph (| nodes = ?N, edges = ?E |); ?E' <= ?E;
         ~ SINVAR_BLPbasic.sinvar (| nodes = ?N, edges = ?E' |) ?nP |]
      ==> ~ SINVAR_BLPbasic.sinvar (| nodes = ?N, edges = ?E |) ?nP",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_hole 5)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_hole 2))
            ),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_app (template_hole 3, template_var 3),
                        template_var 1),
                      template_hole 2)),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 3),
                       template_var 2),
                     template_hole 2)),
                 template_var 0)
               )
           ))),
    ("SINVAR_BLPbasic.Un_set_offending_flows_bound_minus_subseteq",
     "[| wf_graph (| nodes = ?V, edges = ?E |);
         \<Union> (set_offending_flows (| nodes = ?V, edges = ?E |) ?nP)
         <= ?X |]
      ==> \<Union>
           (set_offending_flows (| nodes = ?V, edges = ?E - ?E' |) ?nP)
          <= ?X - ?E'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_hole 5))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_hole 5)),
              template_var 2)),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 4),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 0)),
                 template_hole 5)),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SINVAR_BLPbasic.ENF_offending_set",
     "SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
       SINVAR_BLPbasic.sinvar ?P ==>
      set_offending_flows ?G ?nP =
      (if SINVAR_BLPbasic.sinvar ?G ?nP then {}
       else {{(e1, e2). (e1, e2) : edges ?G & ~ ?P (?nP e1) (?nP e2)}})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_hole 12),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 10, template_hole 12),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 12, template_var 1),
                 template_var 0)),
             template_hole 8),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6, template_app (template_hole 5, t_empty))),
             template_hole 8))))),
    ("SINVAR_BLPbasic.minimalize_offending_overapprox_sound",
     "[| wf_graph ?G; is_offending_flows (set ?ff) ?G ?nP;
         set ?ff <= edges ?G; distinct ?ff |]
      ==> is_offending_flows_min_set
           (set (SINVAR_BLPbasic.minimalize_offending_overapprox ?ff [] ?G
                  ?nP))
           ?G ?nP",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_app (template_hole 6, template_var 1)),
                template_var 2),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_app (template_hole 4, template_var 2)),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 7),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 1, template_hole 7),
                           template_var 1),
                         template_hole 0),
                       template_var 2),
                     template_var 0))),
               template_var 2),
             template_var 0)
           ))),
    ("SINVAR_BLPbasic.mono_imp_set_offending_flows_not_empty",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_BLPbasic.sinvar;
         wf_graph ?G; is_offending_flows (set ?ff) ?G ?nP;
         set ?ff <= edges ?G; distinct ?ff |]
      ==> set_offending_flows ?G ?nP ~= {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_hole 10)),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_hole 10),
                  template_app (template_hole 7, template_var 1)),
                template_var 2),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 1),
          template_app (template_hole 5, template_var 2)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 10),
                 template_var 2),
               template_var 0),
             template_hole 0)
           ))),
    ("SINVAR_BLPbasic.ENF_offending_case1",
     "[| SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
          SINVAR_BLPbasic.sinvar ?P;
         ~ SINVAR_BLPbasic.sinvar ?G ?nP |]
      ==> {{(e1, e2). (e1, e2) : edges ?G & ~ ?P (?nP e1) (?nP e2)}} =
          set_offending_flows ?G ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 11, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7, template_app (template_hole 6, t_empty))),
           template_hole 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_hole 11),
             template_var 1),
           template_var 0)))),
    ("SINVAR_BLPbasic.ENF_offending_members",
     "[| ~ SINVAR_BLPbasic.sinvar ?G ?nP;
         SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
          SINVAR_BLPbasic.sinvar ?P;
         ?f : set_offending_flows ?G ?nP |]
      ==> ?f <= edges ?G & (ALL (e1, e2):?f. ~ ?P (?nP e1) (?nP e2))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 8),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 5, template_hole 8),
                  template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app (template_hole 2, template_var 3))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, t_empty)))
           ))),
    ("SINVAR_BLPbasic.mono_extend_set_offending_flows",
     "[| wf_graph (| nodes = ?V, edges = ?E |); ?E' <= ?E;
         ?F' : set_offending_flows (| nodes = ?V, edges = ?E' |) ?nP |]
      ==> EX F:set_offending_flows (| nodes = ?V, edges = ?E |) ?nP.
             ?F' <= F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3),
                template_hole 5))
            ),
        template_inequation (less_equals, template_var 2, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_app
                   (template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 2),
                    template_hole 5)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app
                    (template_app
                      (template_app (template_hole 6, template_var 4),
                       template_var 3),
                     template_hole 5)),
                 template_var 0)),
             t_empty)
           ))),
    ("SINVAR_BLPbasic.minimalize_offending_overapprox_gives_back_an_offending_flow",
     "[| wf_graph ?G; is_offending_flows (set ?ff) ?G ?nP;
         set ?ff <= edges ?G; distinct ?ff |]
      ==> set (SINVAR_BLPbasic.minimalize_offending_overapprox ?ff [] ?G
                ?nP)
          : set_offending_flows ?G ?nP",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app (template_hole 7, template_var 1)),
                template_var 2),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 1),
          template_app (template_hole 5, template_var 2)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 2, template_hole 8),
                         template_var 1),
                       template_hole 1),
                     template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_app (template_hole 0, template_hole 8),
                 template_var 2),
               template_var 0))
           ))),
    ("SINVAR_BLPbasic.mono_imp_emptyoffending_eq_nevervalid",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_BLPbasic.sinvar;
         wf_graph ?G; ~ SINVAR_BLPbasic.sinvar ?G ?nP;
         set_offending_flows ?G ?nP = {} |]
      ==> ~ (EX F<=edges ?G.
                SINVAR_BLPbasic.sinvar (delete_edges ?G F) ?nP)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_hole 10)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 0)
                )
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 6, template_hole 10),
              template_var 1),
            template_var 0),
          template_hole 5)],
       template_negation
        (template_predicate (template_app (template_hole 4, t_empty))))),
    ("SINVAR_BLPbasic.ENFsr_offending_set",
     "sinvar_all_edges_normal_form_sr ?P ==>
      set_offending_flows ?G ?nP =
      (if SINVAR_BLPbasic.sinvar ?G ?nP then {}
       else {{(s, r). (s, r) : edges ?G & ~ ?P (?nP s) s (?nP r) r}})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_hole 12),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 10, template_hole 12),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 12, template_var 1),
                 template_var 0)),
             template_hole 8),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6, template_app (template_hole 5, t_empty))),
             template_hole 8))))),
    ("SINVAR_BLPbasic.Un_set_offending_flows_bound_minus",
     "[| wf_graph (| nodes = ?V, edges = ?E |);
         \<Union> (set_offending_flows (| nodes = ?V, edges = ?E |) ?nP)
         <= ?X |]
      ==> \<Union>
           (set_offending_flows (| nodes = ?V, edges = ?E - {?f} |) ?nP)
          <= ?X - {?f}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3),
                template_hole 7))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3),
                  template_hole 7)),
              template_var 2)),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_app (template_hole 8, template_var 4),
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_app
                      (template_app (template_hole 1, template_var 0),
                       template_hole 0))),
                 template_hole 7)),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("SINVAR_BLPbasic.ENF_offending_not_empty_imp_ENF_offending_subseteq_rhs",
     "[| SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form
          SINVAR_BLPbasic.sinvar ?P;
         set_offending_flows ?G ?nP ~= {} |]
      ==> {{(e1, e2). (e1, e2) : edges ?G & ~ ?P (?nP e1) (?nP e2)}}
          <= set_offending_flows ?G ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_hole 12),
              template_var 2)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 9, template_hole 12),
                  template_var 1),
                template_var 0),
              template_hole 8)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5, template_app (template_hole 4, t_empty))),
           template_hole 8),
         template_app
          (template_app
            (template_app (template_hole 9, template_hole 12),
             template_var 1),
           template_var 0)))),
    ("SINVAR_BLPbasic.is_offending_flows_min_set_minimalize_offending_overapprox",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_BLPbasic.sinvar;
         wf_graph ?G; is_offending_flows (set ?ff) ?G ?nP;
         set ?ff <= edges ?G; distinct ?ff |]
      ==> is_offending_flows_min_set
           (set (SINVAR_BLPbasic.minimalize_offending_overapprox ?ff [] ?G
                  ?nP))
           ?G ?nP",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_hole 9)),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_hole 9),
                  template_app (template_hole 6, template_var 1)),
                template_var 2),
              template_var 0)
            ),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_app (template_hole 4, template_var 2)),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 9),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 1, template_hole 9),
                           template_var 1),
                         template_hole 0),
                       template_var 2),
                     template_var 0))),
               template_var 2),
             template_var 0)
           ))),
    ("SINVAR_BLPbasic.ENFnr_offending_set",
     "SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_not_refl
       SINVAR_BLPbasic.sinvar ?P ==>
      set_offending_flows ?G ?nP =
      (if SINVAR_BLPbasic.sinvar ?G ?nP then {}
       else {{(e1, e2).
              (e1, e2) : edges ?G & e1 ~= e2 & ~ ?P (?nP e1) (?nP e2)}})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 11, template_hole 13),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 13, template_var 1),
                 template_var 0)),
             template_hole 9),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7, template_app (template_hole 6, t_empty))),
             template_hole 9))))),
    ("SINVAR_BLPbasic.minimality_offending_flows_mono_edges_graph",
     "[| wf_graph (| nodes = ?V, edges = ?E |); ?E' <= ?E;
         ?F : set_offending_flows (| nodes = ?V, edges = ?E' |) ?nP |]
      ==> ALL (e1, e2):?F.
             ~ SINVAR_BLPbasic.sinvar
                (add_edge e1 e2
                  (delete_edges (| nodes = ?V, edges = ?E |) ?F))
                ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app
                 (template_app (template_hole 10, template_var 4),
                  template_var 3),
                template_hole 9))
            ),
        template_inequation (less_equals, template_var 2, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_app
                   (template_app
                     (template_app (template_hole 10, template_var 4),
                      template_var 2),
                    template_hole 9)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 3, t_empty))
           ))),
    ("SINVAR_BLPbasic.ENFnrSR_offending_set",
     "sinvar_all_edges_normal_form_not_refl_SR ?P ==>
      set_offending_flows ?G ?nP =
      (if SINVAR_BLPbasic.sinvar ?G ?nP then {}
       else {{(e1, e2).
              (e1, e2) : edges ?G &
              e1 ~= e2 & ~ ?P (?nP e1) e1 (?nP e2) e2}})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_hole 13),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 11, template_hole 13),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 13, template_var 1),
                 template_var 0)),
             template_hole 9),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7, template_app (template_hole 6, t_empty))),
             template_hole 9))))),
    ("SINVAR_BLPbasic.offending_partition_subset_empty",
     "[| ALL F:set_offending_flows (| nodes = ?V, edges = ?E Un ?X |) ?nP.
            F <= ?X;
         wf_graph (| nodes = ?V, edges = ?E Un ?X |); ?E Int ?X = {} |]
      ==> set_offending_flows (| nodes = ?V, edges = ?E |) ?nP = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_app (template_hole 11, template_hole 10),
                    template_app
                     (template_app
                       (template_app (template_hole 9, template_var 3),
                        template_app
                         (template_app (template_hole 8, template_var 2),
                          template_var 1)),
                      template_hole 7)),
                  template_var 0)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_app
                   (template_app (template_hole 8, template_var 2),
                    template_var 1)),
                template_hole 7))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 11, template_hole 10),
             template_app
              (template_app
                (template_app (template_hole 9, template_var 3),
                 template_var 2),
               template_hole 7)),
           template_var 0),
         template_hole 0))),
    ("SINVAR_BLPbasic.not_model_mono_imp_addedge_mono",
     "[| SecurityInvariant_withOffendingFlows.sinvar_mono
          SINVAR_BLPbasic.sinvar;
         wf_graph ?G; (?a1.0, ?a2.0) : edges ?G; ?X <= ?Y;
         ~ SINVAR_BLPbasic.sinvar
            (add_edge ?a1.0 ?a2.0 (delete_edges ?G ?Y)) ?nP |]
      ==> ~ SINVAR_BLPbasic.sinvar
             (add_edge ?a1.0 ?a2.0 (delete_edges ?G ?X)) ?nP",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_hole 8)),
        template_predicate (template_app (template_hole 7, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_var 3)),
              template_app (template_hole 4, template_var 5))
            ),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_app (template_hole 1, template_var 4),
                        template_var 3),
                      template_app
                       (template_app (template_hole 0, template_var 5),
                        template_var 1))),
                  template_var 0)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 2))),
                 template_var 0)
               )
           ))),
    ("SINVAR_BLPbasic.sinvar_valid_remove_minimalize_offending_overapprox",
     "[| wf_graph (| nodes = ?nodesG, edges = ?edgesG |);
         ~ SINVAR_BLPbasic.sinvar (| nodes = ?nodesG, edges = ?edgesG |)
            ?nP;
         set ?Es = ?edgesG; distinct ?Es |]
      ==> SINVAR_BLPbasic.sinvar
           (| nodes = ?nodesG,
              edges =
                ?edgesG -
                set (SINVAR_BLPbasic.minimalize_offending_overapprox ?Es []
                      (| nodes = ?nodesG, edges = ?edgesG |) ?nP) |)
           ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_hole 8))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_app (template_hole 9, template_var 3),
                        template_var 2),
                      template_hole 8)),
                  template_var 1)
                )
            ),
        template_equation
         (template_app (template_hole 4, template_var 0), template_var 2),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app (template_hole 9, template_var 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app
                            (template_app
                              (template_app
                                (template_hole 1, template_hole 6),
                               template_var 0),
                             template_hole 0),
                           template_app
                            (template_app
                              (template_app
                                (template_hole 9, template_var 3),
                               template_var 2),
                             template_hole 8)),
                         template_var 1)))),
                 template_hole 8)),
             template_var 1)
           ))),
    ("SINVAR_BLPbasic.set_offending_flows_insert_contains_new",
     "[| wf_graph (| nodes = ?V, edges = insert ?e ?E |);
         set_offending_flows (| nodes = ?V, edges = ?E |) ?nP = {};
         set_offending_flows (| nodes = ?V, edges = insert ?e ?E |) ?nP ~=
         {} |]
      ==> {?e}
          : set_offending_flows (| nodes = ?V, edges = insert ?e ?E |) ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_app
                   (template_app (template_hole 8, template_var 2),
                    template_var 1)),
                template_hole 7))
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 1),
                template_hole 7)),
            template_var 0),
          template_hole 3),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_app
                   (template_app
                     (template_app (template_hole 9, template_var 3),
                      template_app
                       (template_app (template_hole 8, template_var 2),
                        template_var 1)),
                    template_hole 7)),
                template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_hole 0)),
             template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app
                  (template_app
                    (template_app (template_hole 9, template_var 3),
                     template_app
                      (template_app (template_hole 8, template_var 2),
                       template_var 1)),
                   template_hole 7)),
               template_var 0))
           ))),
    ("SINVAR_BLPbasic.ENF_fsts_refl_instance",
     "[| SecurityInvariant_withOffendingFlows.ENF_refl
          SINVAR_BLPbasic.sinvar ?P;
         ALL nP e1 e2.
            ~ ?P (nP e1) (nP e2) --> ~ ?P ?default_node_properties (nP e2);
         ?f : set_offending_flows ?G ?nP; ?i : fst ` ?f |]
      ==> ~ SINVAR_BLPbasic.sinvar ?G
             (?nP(?i := ?default_node_properties))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 10),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 4))
               )
           ))),
    ("SINVAR_BLPbasic.ENF_snds_refl_instance",
     "[| SecurityInvariant_withOffendingFlows.ENF_refl
          SINVAR_BLPbasic.sinvar ?P;
         ALL nP e1 e2.
            ~ ?P (nP e1) (nP e2) --> ~ ?P (nP e1) ?default_node_properties;
         ?f : set_offending_flows ?G ?nP; ?i : snd ` ?f |]
      ==> ~ SINVAR_BLPbasic.sinvar ?G
             (?nP(?i := ?default_node_properties))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 10),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 4))
               )
           ))),
    ("SINVAR_BLPbasic.minimality_offending_flows_mono_edges_graph_extend",
     "[| wf_graph (| nodes = ?V, edges = ?E |); ?E' <= ?E;
         ?Fadd Int ?E' = {};
         ?F' : set_offending_flows (| nodes = ?V, edges = ?E' |) ?nP |]
      ==> ALL (e1, e2):?F'.
             ~ SINVAR_BLPbasic.sinvar
                (add_edge e1 e2
                  (delete_edges (| nodes = ?V, edges = ?E |)
                    (?F' Un ?Fadd)))
                ?nP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 15,
              template_app
               (template_app
                 (template_app (template_hole 14, template_var 5),
                  template_var 4),
                template_hole 13))
            ),
        template_inequation (less_equals, template_var 3, template_var 4),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 2),
            template_var 3),
          template_hole 9),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_app
                   (template_app
                     (template_app (template_hole 14, template_var 5),
                      template_var 3),
                    template_hole 13)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app (template_hole 4, t_empty))
           ))),
    ("SINVAR_BLPbasic.ENFnr_snds_weakrefl_instance",
     "[| SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_not_refl
          SINVAR_BLPbasic.sinvar ?P;
         ALL e1 e2. ~ ?P e1 e2 --> ~ ?P e1 ?default_node_properties;
         ALL e2. ?P ?default_node_properties e2;
         ?f : set_offending_flows ?G ?nP; ?i : snd ` ?f |]
      ==> ~ SINVAR_BLPbasic.sinvar ?G
             (?nP(?i := ?default_node_properties))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 9),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 4))
               )
           ))),
    ("SINVAR_BLPbasic.partitioned_offending_subseteq_pow_combine",
     "[| wf_graph (| nodes = ?V, edges = ?E Un ?X |); ?E Int ?X = {};
         ALL F:set_offending_flows (| nodes = ?V, edges = ?E Un ?X |) ?nP.
            F <= ?X |]
      ==> set_offending_flows (| nodes = ?V, edges = ?E Un ?X |) ?nP
          <= pow_combine ?X
              (set_offending_flows (| nodes = ?V, edges = ?E |) ?nP)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_app
                 (template_app (template_hole 11, template_var 3),
                  template_app
                   (template_app (template_hole 10, template_var 2),
                    template_var 1)),
                template_hole 9))
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 2), template_var 1),
          template_hole 6),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_app
                     (template_app
                       (template_app (template_hole 11, template_var 3),
                        template_app
                         (template_app (template_hole 10, template_var 2),
                          template_var 1)),
                      template_hole 9)),
                  template_var 0)),
              t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_app (template_hole 11, template_var 3),
                 template_app
                  (template_app (template_hole 10, template_var 2),
                   template_var 1)),
               template_hole 9)),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_app (template_hole 11, template_var 3),
                   template_var 2),
                 template_hole 9)),
             template_var 0))))),
    ("SINVAR_BLPbasic.set_offending_flows_simp",
     "wf_graph ?G ==>
      set_offending_flows ?G ?nP =
      {F. F <= edges ?G &
          (~ SINVAR_BLPbasic.sinvar ?G ?nP &
           SINVAR_BLPbasic.sinvar
            (| nodes = nodes ?G, edges = edges ?G - F |) ?nP) &
          (ALL (e1, e2):F.
              ~ SINVAR_BLPbasic.sinvar
                 (| nodes = nodes ?G,
                    edges = {(e1, e2)} Un (edges ?G - F) |)
                 ?nP)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 16, template_hole 15),
             template_var 1),
           template_var 0),
         template_app (template_hole 14, t_empty)))),
    ("SINVAR_BLPbasic.ENFnr_fsts_weakrefl_instance",
     "[| SecurityInvariant_withOffendingFlows.sinvar_all_edges_normal_form_not_refl
          SINVAR_BLPbasic.sinvar ?P;
         ALL e1 e2.
            e2 ~= ?default_node_properties -->
            ~ ?P e1 e2 --> ~ ?P ?default_node_properties e2;
         ALL e1. ?P e1 ?default_node_properties;
         ?f : set_offending_flows ?G ?nP; ?i : fst ` ?f |]
      ==> ~ SINVAR_BLPbasic.sinvar ?G
             (?nP(?i := ?default_node_properties))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 10),
                  template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 3))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 2),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 4))
               )
           ))),
    ("SINVAR_BLPbasic.sinvar_mono_I_proofrule",
     "[| ALL nP G.
            SINVAR_BLPbasic.sinvar G nP =
            (ALL (e1, e2):edges G. ?P e1 e2 nP G);
         ALL nP e1 e2 N E' E.
            wf_graph (| nodes = N, edges = E |) &
            (e1, e2) : E &
            E' <= E & ?P e1 e2 nP (| nodes = N, edges = E |) -->
            ?P e1 e2 nP (| nodes = N, edges = E' |) |]
      ==> SecurityInvariant_withOffendingFlows.sinvar_mono
           SINVAR_BLPbasic.sinvar",
     template_implication
      ([template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 18, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_hole 15)))),
    ("SINVAR_BLPbasic.ENFnrSR_fsts_weakrefl_instance",
     "[| sinvar_all_edges_normal_form_not_refl_SR ?P;
         ALL s r. ?P ?default_node_properties s ?default_node_properties r;
         ALL s r.
            ?nP r ~= ?default_node_properties -->
            ~ ?P (?nP s) s (?nP r) r -->
            ~ ?P ?default_node_properties s (?nP r) r;
         ALL s r. ?P (?nP s) s ?default_node_properties r;
         ?f : set_offending_flows ?G ?nP; ?i : fst ` ?f |]
      ==> ~ SINVAR_BLPbasic.sinvar ?G
             (?nP(?i := ?default_node_properties))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 10),
                  template_var 1),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 0),
                   template_var 4))
               )
           ))),
    ("SINVAR_BLPbasic.ENFnrSR_snds_weakrefl_instance",
     "[| sinvar_all_edges_normal_form_not_refl_SR ?P;
         ALL s r. ?P ?default_node_properties s ?default_node_properties r;
         ALL s r.
            ?nP s ~= ?default_node_properties -->
            ~ ?P (?nP s) s (?nP r) r -->
            ~ ?P (?nP s) s ?default_node_properties r;
         ALL s r. ?P ?default_node_properties s (?nP r) r;
         ?f : set_offending_flows ?G ?nP; ?i : snd ` ?f |]
      ==> ~ SINVAR_BLPbasic.sinvar ?G
             (?nP(?i := ?default_node_properties))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 10),
                  template_var 1),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 2))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 0),
                   template_var 4))
               )
           )))]:
   (string * thm * template) list
### theory "Draft.SINVAR_BLPbasicTemplates"
### 0.351s elapsed time, 0.495s cpu time, 0.000s GC time
val it = (): unit
