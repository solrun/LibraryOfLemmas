   [("TopoS_withOffendingFlows.rule_pow_combine_fixfst",
     "?B <= ?C ==> pow_combine ?A ?B <= pow_combine ?A ?C",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("TopoS_withOffendingFlows.minimalize_offending_overapprox_boundnP",
     "minimalize_offending_overapprox (%G. ?m G ?nP) ?fs ?keeps ?G =
      SecurityInvariant_withOffendingFlows.minimalize_offending_overapprox
       ?m ?fs ?keeps ?G ?nP",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             template_var 1),
           template_var 0),
         template_var 3))),
    ("TopoS_withOffendingFlows.rule_pow_combine_fixfst_Union",
     "\<Union> ?B <= \<Union> ?C ==>
      \<Union> (pow_combine ?A ?B) <= \<Union> (pow_combine ?A ?C)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("TopoS_withOffendingFlows.pow_combine_mono",
     "ALL F:?S. F <= ?X ==> ALL F:pow_combine ?Y ?S. F <= ?Y Un ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             t_empty)
           )))]
