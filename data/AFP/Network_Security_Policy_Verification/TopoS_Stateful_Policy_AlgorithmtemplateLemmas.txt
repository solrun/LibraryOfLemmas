   [("TopoS_Stateful_Policy_Algorithm.valid_reqs_ACS_D",
     "valid_reqs ?M ==> valid_reqs (get_ACS ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.valid_reqs_IFS_D",
     "valid_reqs ?M ==> valid_reqs (get_IFS ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_select_simps",
     "hosts (generate_valid_stateful_policy_IFSACS ?G ?M ?edgesList) =
      nodes ?G",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 2))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_select_simps",
     "hosts (generate_valid_stateful_policy_IFSACS_2 ?G ?M ?edgesList) =
      nodes ?G",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 2))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_select_simps",
     "flows_fix (generate_valid_stateful_policy_IFSACS ?G ?M ?edgesList) =
      edges ?G",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 2))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_select_simps",
     "flows_fix (generate_valid_stateful_policy_IFSACS_2 ?G ?M ?edgesList) =
      edges ?G",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 2))),
    ("TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_subseteq_input",
     "set (filter_IFS_no_violations ?G ?M ?Es) <= set ?Es",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_subseteq_input",
     "set (filter_compliant_stateful_ACS ?G ?M ?Es) <= set ?Es",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_select_simps",
     "flows_state (generate_valid_stateful_policy_IFSACS ?G ?M ?edgesList)
      <= set ?edgesList",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_select_simps",
     "flows_state (generate_valid_stateful_policy_IFSACS_2 ?G ?M ?edgesList)
      <= set ?edgesList",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("TopoS_Stateful_Policy_Algorithm.all_security_requirements_fulfilled_ACS_D",
     "all_security_requirements_fulfilled ?M ?G ==>
      all_security_requirements_fulfilled (get_ACS ?M) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.all_security_requirements_fulfilled_IFS_D",
     "all_security_requirements_fulfilled ?M ?G ==>
      all_security_requirements_fulfilled (get_IFS ?M) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_wf_stateful_policy",
     "[| wf_graph ?G; set ?edgesList = edges ?G |]
      ==> wf_stateful_policy
           (generate_valid_stateful_policy_IFSACS ?G ?M ?edgesList)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_wf_stateful_policy",
     "[| wf_graph ?G; set ?edgesList = edges ?G |]
      ==> wf_stateful_policy
           (generate_valid_stateful_policy_IFSACS_2 ?G ?M ?edgesList)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_all_security_requirements_fulfilled_IFS",
     "[| valid_reqs ?M; wf_graph ?G;
         all_security_requirements_fulfilled ?M ?G;
         set ?edgesList <= edges ?G |]
      ==> all_security_requirements_fulfilled (get_IFS ?M)
           (stateful_policy_to_network_graph
             (generate_valid_stateful_policy_IFSACS ?G ?M ?edgesList))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 2, template_var 2)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0)))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_all_security_requirements_fulfilled_IFS",
     "[| valid_reqs ?M; wf_graph ?G;
         all_security_requirements_fulfilled ?M ?G;
         set ?edgesList <= edges ?G |]
      ==> all_security_requirements_fulfilled (get_IFS ?M)
           (stateful_policy_to_network_graph
             (generate_valid_stateful_policy_IFSACS_2 ?G ?M ?edgesList))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 2, template_var 2)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0)))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.trivial_stateful_policy_compliance",
     "[| wf_graph (| nodes = ?V, edges = ?E |); valid_reqs ?M;
         all_security_requirements_fulfilled ?M
          (| nodes = ?V, edges = ?E |) |]
      ==> stateful_policy_compliance
           (| hosts = ?V, flows_fix = ?E, flows_state = {} |)
           (| nodes = ?V, edges = ?E |) ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_hole 5))
            ),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_hole 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 1),
                     template_hole 0),
                   template_hole 5)),
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1),
                 template_hole 5)),
             template_var 0)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_stateful_policy_compliance",
     "[| valid_reqs ?M; wf_graph ?G;
         all_security_requirements_fulfilled ?M ?G;
         set ?edgesList = edges ?G;
         ?\<T> = generate_valid_stateful_policy_IFSACS ?G ?M ?edgesList |]
      ==> stateful_policy_compliance ?\<T> ?G ?M",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 2)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 2),
              template_var 3),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 3)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_stateful_policy_compliance",
     "[| valid_reqs ?M; wf_graph ?G;
         all_security_requirements_fulfilled ?M ?G;
         set ?edgesList = edges ?G;
         ?\<T> = generate_valid_stateful_policy_IFSACS_2 ?G ?M ?edgesList |]
      ==> stateful_policy_compliance ?\<T> ?G ?M",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 2)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 2),
              template_var 3),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 3)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu_no_IFS",
     "[| valid_reqs (get_IFS ?M); wf_graph ?G; get_IFS ?M = [];
         set ?accu Un set ?edgesList <= edges ?G |]
      ==> filter_IFS_no_violations_accu ?G ?M ?accu ?edgesList =
          rev ?edgesList @ ?accu",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 3))
            ),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_equation
         (template_app (template_hole 11, template_var 3), template_hole 8),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1)),
            template_app (template_hole 5, template_var 0)),
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("TopoS_Stateful_Policy_Algorithm.all_security_requirements_fulfilled_mono_stateful_policy_to_network_graph",
     "[| valid_reqs ?M; ?E' <= ?E;
         wf_graph (| nodes = ?V, edges = ?Efix Un ?E |);
         all_security_requirements_fulfilled ?M
          (stateful_policy_to_network_graph
            (| hosts = ?V, flows_fix = ?Efix, flows_state = ?E |)) |]
      ==> all_security_requirements_fulfilled ?M
           (stateful_policy_to_network_graph
             (| hosts = ?V, flows_fix = ?Efix, flows_state = ?E' |))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_var 2)),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_hole 1,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 1),
                      template_var 0),
                    template_var 2),
                  template_hole 3)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 3),
                 template_hole 3)))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_correct",
     "[| valid_reqs (get_IFS ?M); wf_graph ?G;
         all_security_requirements_fulfilled (get_IFS ?M) ?G;
         set ?edgesList <= edges ?G |]
      ==> all_security_requirements_fulfilled (get_IFS ?M)
           (stateful_policy_to_network_graph
             (| hosts = nodes ?G, flows_fix = edges ?G,
                flows_state =
                  set (filter_IFS_no_violations ?G ?M ?edgesList) |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 10, template_var 2)),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 0),
          template_app (template_hole 5, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 10, template_var 2)),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 1)),
                     template_app (template_hole 5, template_var 1)),
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 2),
                       template_var 0))),
                 template_hole 0)))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_filter_compliant_stateful_ACS",
     "[| valid_reqs ?M; wf_graph ?G;
         all_security_requirements_fulfilled ?M ?G;
         set ?edgesList <= edges ?G;
         ?\<T> = generate_valid_stateful_policy_IFSACS_2 ?G ?M ?edgesList |]
      ==> ALL F:get_offending_flows (get_ACS ?M)
                 (stateful_policy_to_network_graph ?\<T>).
             F <= backflows (filternew_flows_state ?\<T>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 3)),
        template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 2)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 6, template_var 2),
              template_var 3),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 2, template_var 0))),
             t_empty)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_maximal",
     "[| valid_reqs (get_IFS ?M); wf_graph ?G; set ?edgesList = edges ?G |]
      ==> let stateful = set (filter_IFS_no_violations ?G ?M ?edgesList)
          in ALL e:edges ?G - stateful.
                ~ all_security_requirements_fulfilled (get_IFS ?M)
                   (stateful_policy_to_network_graph
                     (| hosts = nodes ?G, flows_fix = edges ?G,
                        flows_state = {e} Un stateful |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 18,
              template_app (template_hole 17, template_var 2))
            ),
        template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_equation
         (template_app (template_hole 14, template_var 0),
          template_app (template_hole 13, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_app (template_hole 11, template_var 1),
                     template_var 2),
                   template_var 0))),
             t_empty)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_correct",
     "[| valid_reqs (get_ACS ?M); wf_graph ?G; set ?edgesList <= edges ?G;
         all_security_requirements_fulfilled (get_ACS ?M) ?G;
         ?\<T> =
         (| hosts = nodes ?G, flows_fix = edges ?G,
            flows_state =
              set (filter_compliant_stateful_ACS ?G ?M ?edgesList) |) |]
      ==> ALL F:get_offending_flows (get_ACS ?M)
                 (stateful_policy_to_network_graph ?\<T>).
             F <= backflows (filternew_flows_state ?\<T>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 3))
            ),
        template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 12, template_var 1),
          template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 15, template_var 3)),
              template_var 2)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 2)),
                template_app (template_hole 11, template_var 2)),
              template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 3),
                  template_var 1))),
            template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 15, template_var 3)),
                 template_app (template_hole 2, template_var 0))),
             t_empty)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu_correct_induction",
     "[| valid_reqs (get_IFS ?M); wf_graph (| nodes = ?V, edges = ?E |);
         all_security_requirements_fulfilled (get_IFS ?M)
          (stateful_policy_to_network_graph
            (| hosts = ?V, flows_fix = ?E, flows_state = set ?accu |));
         set ?accu Un set ?edgesList <= ?E |]
      ==> all_security_requirements_fulfilled (get_IFS ?M)
           (stateful_policy_to_network_graph
             (| hosts = ?V, flows_fix = ?E,
                flows_state =
                  set (filter_IFS_no_violations_accu
                        (| nodes = ?V, edges = ?E |) ?M ?accu
                        ?edgesList) |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2),
                template_hole 7))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 10, template_var 4)),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2),
                    template_app (template_hole 3, template_var 1)),
                  template_hole 7)))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 1,
              template_app (template_hole 3, template_var 1)),
            template_app (template_hole 3, template_var 0)),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 10, template_var 4)),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 2),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 0,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 8, template_var 3),
                                 template_var 2),
                               template_hole 7)),
                           template_var 4),
                         template_var 1),
                       template_var 0))),
                 template_hole 7)))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_maximal_allsubsets",
     "[| valid_reqs (get_IFS ?M); wf_graph ?G; set ?edgesList = edges ?G |]
      ==> let stateful = set (filter_IFS_no_violations ?G ?M ?edgesList)
          in ALL E<=edges ?G - stateful.
                E ~= {} -->
                ~ all_security_requirements_fulfilled (get_IFS ?M)
                   (stateful_policy_to_network_graph
                     (| hosts = nodes ?G, flows_fix = edges ?G,
                        flows_state = E Un stateful |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 19,
              template_app (template_hole 18, template_var 2))
            ),
        template_predicate
         (template_app (template_hole 17, template_var 1)),
        template_equation
         (template_app (template_hole 15, template_var 0),
          template_app (template_hole 14, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_app (template_hole 12, template_var 1),
                     template_var 2),
                   template_var 0))),
             t_empty)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_noIFS_noACSsideeffects_imp_fullgraph",
     "[| valid_reqs ?M; wf_graph ?G;
         all_security_requirements_fulfilled ?M ?G;
         set ?edgesList = edges ?G;
         ALL F:get_offending_flows (get_ACS ?M)
                (| nodes = nodes ?G,
                   edges = edges ?G Un backflows (edges ?G) |).
            F <= backflows (edges ?G) - edges ?G;
         get_IFS ?M = [] |]
      ==> stateful_policy_to_network_graph
           (generate_valid_stateful_policy_IFSACS ?G ?M ?edgesList) =
          undirected ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 2)),
        template_predicate
         (template_app (template_hole 21, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 18, template_var 0),
          template_app (template_hole 17, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_var 2)),
                  template_app
                   (template_app
                     (template_app
                       (template_hole 13,
                        template_app (template_hole 12, template_var 1)),
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app (template_hole 17, template_var 1)),
                        template_app
                         (template_hole 10,
                          template_app
                           (template_hole 17, template_var 1)))),
                    template_hole 9))),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 5, template_var 2), template_hole 4)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_noIFS_noACSsideeffects_imp_fullgraph",
     "[| valid_reqs ?M; wf_graph ?G;
         all_security_requirements_fulfilled ?M ?G;
         set ?edgesList = edges ?G;
         ALL F:get_offending_flows (get_ACS ?M)
                (| nodes = nodes ?G,
                   edges = edges ?G Un backflows (edges ?G) |).
            F <= backflows (edges ?G) - edges ?G;
         get_IFS ?M = [] |]
      ==> stateful_policy_to_network_graph
           (generate_valid_stateful_policy_IFSACS_2 ?G ?M ?edgesList) =
          undirected ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 2)),
        template_predicate
         (template_app (template_hole 21, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 18, template_var 0),
          template_app (template_hole 17, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_var 2)),
                  template_app
                   (template_app
                     (template_app
                       (template_hole 13,
                        template_app (template_hole 12, template_var 1)),
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app (template_hole 17, template_var 1)),
                        template_app
                         (template_hole 10,
                          template_app
                           (template_hole 17, template_var 1)))),
                    template_hole 9))),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 5, template_var 2), template_hole 4)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_maximal_allsubsets",
     "[| valid_reqs (get_ACS ?M); wf_graph (| nodes = ?V, edges = ?E |);
         set ?edgesList = ?E;
         ?stateful =
         set (filter_compliant_stateful_ACS (| nodes = ?V, edges = ?E |) ?M
               ?edgesList);
         ?X <= ?E - (?stateful Un backflows ?E); ?X ~= {} |]
      ==> ~ \<Union>
             (get_offending_flows (get_ACS ?M)
               (stateful_policy_to_network_graph
                 (| hosts = ?V, flows_fix = ?E,
                    flows_state = ?stateful Un ?X |)))
            <= backflows
                (filternew_flows_state
                  (| hosts = ?V, flows_fix = ?E,
                     flows_state = ?stateful Un ?X |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 18,
              template_app (template_hole 17, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app
                 (template_app (template_hole 15, template_var 4),
                  template_var 3),
                template_hole 14))
            ),
        template_equation
         (template_app (template_hole 12, template_var 2), template_var 3),
        template_equation
         (template_var 1,
          template_app
           (template_hole 12,
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_app (template_hole 15, template_var 4),
                      template_var 3),
                    template_hole 14)),
                template_var 5),
              template_var 2))),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 9, template_var 3),
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 3)))),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_negation
        (
           template_inequation
            (less_equals,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 17, template_var 5)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 4),
                         template_var 3),
                       template_app
                        (template_app (template_hole 8, template_var 1),
                         template_var 0)),
                     template_hole 14)))),
             template_app
              (template_hole 7,
               template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_var 0)),
                   template_hole 14))))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_maximal",
     "[| valid_reqs (get_ACS ?M); wf_graph (| nodes = ?V, edges = ?E |);
         set ?edgesList = ?E;
         ?stateful =
         set (filter_compliant_stateful_ACS (| nodes = ?V, edges = ?E |) ?M
               ?edgesList) |]
      ==> ALL e:?E - (?stateful Un {e: ?E. e : backflows ?E}).
             ~ \<Union>
                (get_offending_flows (get_ACS ?M)
                  (stateful_policy_to_network_graph
                    (| hosts = ?V, flows_fix = ?E,
                       flows_state = ?stateful Un {e} |)))
               <= backflows
                   (filternew_flows_state
                     (| hosts = ?V, flows_fix = ?E,
                        flows_state = ?stateful Un {e} |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 22, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 21,
              template_app
               (template_app
                 (template_app (template_hole 20, template_var 3),
                  template_var 2),
                template_hole 19))
            ),
        template_equation
         (template_app (template_hole 17, template_var 1), template_var 2),
        template_equation
         (template_var 0,
          template_app
           (template_hole 17,
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app
                   (template_app
                     (template_app (template_hole 20, template_var 3),
                      template_var 2),
                    template_hole 19)),
                template_var 4),
              template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, template_var 2),
                 template_app
                  (template_app (template_hole 13, template_var 0),
                   template_app (template_hole 12, t_empty)))),
             t_empty)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu_no_side_effects",
     "[| valid_reqs (get_ACS ?M); wf_graph ?G;
         ALL F:get_offending_flows (get_ACS ?M)
                (| nodes = nodes ?G,
                   edges = edges ?G Un backflows (edges ?G) |).
            F <= backflows (edges ?G) - edges ?G;
         set ?accu Un set ?edgesList <= edges ?G;
         ALL a:set ?accu. a ~: backflows (edges ?G) |]
      ==> filter_compliant_stateful_ACS_accu ?G ?M ?accu ?edgesList =
          rev (filter (%e. e ~: backflows (edges ?G)) ?edgesList) @ ?accu",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 3))
            ),
        template_predicate
         (template_app (template_hole 19, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app (template_hole 20, template_var 3)),
                  template_app
                   (template_app
                     (template_app
                       (template_hole 16,
                        template_app (template_hole 15, template_var 2)),
                      template_app
                       (template_app
                         (template_hole 14,
                          template_app (template_hole 13, template_var 2)),
                        template_app
                         (template_hole 12,
                          template_app
                           (template_hole 13, template_var 2)))),
                    template_hole 11))),
              t_empty)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 8, template_var 1)),
            template_app (template_hole 8, template_var 0)),
          template_app (template_hole 13, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 0))),
           template_var 1)))),
    ("TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu_maximal_induction",
     "[| valid_reqs (get_IFS ?M); wf_graph (| nodes = ?V, edges = ?E |);
         set ?accu <= ?E; set ?edgesList <= ?E;
         ALL e:?E - (set ?accu Un set ?edgesList).
            ~ all_security_requirements_fulfilled (get_IFS ?M)
               (stateful_policy_to_network_graph
                 (| hosts = ?V, flows_fix = ?E,
                    flows_state = {e} Un set ?accu |)) |]
      ==> let stateful =
                set (filter_IFS_no_violations_accu
                      (| nodes = ?V, edges = ?E |) ?M ?accu ?edgesList)
          in ALL e:?E - stateful.
                ~ all_security_requirements_fulfilled (get_IFS ?M)
                   (stateful_policy_to_network_graph
                     (| hosts = ?V, flows_fix = ?E,
                        flows_state = {e} Un stateful |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 17,
              template_app (template_hole 16, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 15,
              template_app
               (template_app
                 (template_app (template_hole 14, template_var 3),
                  template_var 2),
                template_hole 13))
            ),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 1),
          template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 0),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app (template_hole 11, template_var 1)),
                    template_app (template_hole 11, template_var 0)))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 0,
                         template_app
                          (template_app
                            (template_app
                              (template_hole 14, template_var 3),
                             template_var 2),
                           template_hole 13)),
                       template_var 4),
                     template_var 1),
                   template_var 0))),
             t_empty)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu_correct_induction",
     "[| valid_reqs (get_ACS ?M); wf_graph (| nodes = ?V, edges = ?E |);
         set ?accu Un set ?edgesList <= ?E;
         ALL F:get_offending_flows (get_ACS ?M)
                (stateful_policy_to_network_graph
                  (| hosts = ?V, flows_fix = ?E,
                     flows_state = set ?accu |)).
            F <= backflows (set ?accu);
         ALL a:set ?accu. a ~: backflows ?E;
         ?\<T> =
         (| hosts = ?V, flows_fix = ?E,
            flows_state =
              set (filter_compliant_stateful_ACS_accu
                    (| nodes = ?V, edges = ?E |) ?M ?accu ?edgesList) |) |]
      ==> ALL F:get_offending_flows (get_ACS ?M)
                 (stateful_policy_to_network_graph ?\<T>).
             F <= backflows (filternew_flows_state ?\<T>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 18,
              template_app (template_hole 17, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app
                 (template_app (template_hole 15, template_var 4),
                  template_var 3),
                template_hole 14))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 2)),
            template_app (template_hole 11, template_var 1)),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 17, template_var 5)),
                  template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 7, template_var 4),
                          template_var 3),
                        template_app (template_hole 11, template_var 2)),
                      template_hole 14)))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 11, template_var 2)),
              t_empty)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 1,
                        template_app
                         (template_app
                           (template_app (template_hole 15, template_var 4),
                            template_var 3),
                          template_hole 14)),
                      template_var 5),
                    template_var 2),
                  template_var 1))),
            template_hole 14))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 17, template_var 5)),
                 template_app (template_hole 8, template_var 0))),
             t_empty)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu_induction_maximal",
     "[| valid_reqs (get_ACS ?M); wf_graph (| nodes = ?V, edges = ?E |);
         set ?edgesList <= ?E; set ?accu <= ?E;
         ?stateful =
         set (filter_compliant_stateful_ACS_accu
               (| nodes = ?V, edges = ?E |) ?M ?accu ?edgesList);
         ALL e:?E -
               (set ?edgesList Un set ?accu Un {e: ?E. e : backflows ?E}).
            ~ \<Union>
               (get_offending_flows (get_ACS ?M)
                 (stateful_policy_to_network_graph
                   (| hosts = ?V, flows_fix = ?E,
                      flows_state = set ?accu Un {e} |)))
              <= backflows
                  (filternew_flows_state
                    (| hosts = ?V, flows_fix = ?E,
                       flows_state = set ?accu Un {e} |)) |]
      ==> ALL e:?E - (?stateful Un {e: ?E. e : backflows ?E}).
             ~ \<Union>
                (get_offending_flows (get_ACS ?M)
                  (stateful_policy_to_network_graph
                    (| hosts = ?V, flows_fix = ?E,
                       flows_state = ?stateful Un {e} |)))
               <= backflows
                   (filternew_flows_state
                     (| hosts = ?V, flows_fix = ?E,
                        flows_state = ?stateful Un {e} |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 22, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_hole 21,
              template_app
               (template_app
                 (template_app (template_hole 20, template_var 4),
                  template_var 3),
                template_hole 19))
            ),
        template_inequation
         (less_equals, template_app (template_hole 17, template_var 2),
          template_var 3),
        template_inequation
         (less_equals, template_app (template_hole 17, template_var 1),
          template_var 3),
        template_equation
         (template_var 0,
          template_app
           (template_hole 17,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_app
                       (template_app (template_hole 20, template_var 4),
                        template_var 3),
                      template_hole 19)),
                  template_var 5),
                template_var 1),
              template_var 2))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 3),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app (template_hole 17, template_var 2)),
                        template_app (template_hole 17, template_var 1))),
                    template_app (template_hole 11, t_empty)))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 13, template_var 3),
                 template_app
                  (template_app (template_hole 12, template_var 0),
                   template_app (template_hole 11, t_empty)))),
             t_empty)
           )))]
