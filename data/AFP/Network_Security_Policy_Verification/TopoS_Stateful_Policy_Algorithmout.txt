Loading theory "Draft.FiniteGraph" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.TopoS_Stateful_Policy_Algorithm" via "Draft.TopoS_Stateful_Policy" via "Draft.TopoS_Composition_Theory" via "Draft.TopoS_Interface")
Loading theory "Draft.TopoS_Util" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.TopoS_Stateful_Policy_Algorithm" via "Draft.TopoS_Stateful_Policy" via "Draft.TopoS_Composition_Theory" via "Draft.TopoS_Interface")
Loading theory "Draft.TopoS_Vertices" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.TopoS_Stateful_Policy_Algorithm" via "Draft.TopoS_Stateful_Policy" via "Draft.TopoS_Composition_Theory" via "Draft.TopoS_Interface")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.TopoS_Util"
### 0.040s elapsed time, 0.197s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.139s elapsed time, 0.571s cpu time, 0.041s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
class vertex = type +
  fixes vertex_1 :: "'a"
    and vertex_2 :: "'a"
    and vertex_3 :: "'a"
  assumes "distinct_vertices": "distinct [vertex_1, vertex_2, vertex_3]"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  nat :: vertex
  vertex_1_nat == vertex_1 :: nat
  vertex_2_nat == vertex_2 :: nat
  vertex_3_nat == vertex_3 :: nat
instantiation
  int :: vertex
  vertex_1_int == vertex_1 :: int
  vertex_2_int == vertex_2 :: int
  vertex_3_int == vertex_3 :: int
instantiation
  char :: vertex
  vertex_1_char == vertex_1 :: char
  vertex_2_char == vertex_2 :: char
  vertex_3_char == vertex_3 :: char
locale wf_graph
  fixes G :: "'v graph"
  assumes "wf_graph G"
Found termination order: "size_list size <*mlex*> {}"
instantiation
  list :: (vertex) vertex
  vertex_1_list == vertex_1 :: 'a list
  vertex_2_list == vertex_2 :: 'a list
  vertex_3_list == vertex_3 :: 'a list
val tune_string_vertex_format = fn: term -> string -> string
### theory "Draft.TopoS_Vertices"
### 0.273s elapsed time, 1.109s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.218s elapsed time, 0.849s cpu time, 0.063s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.270s cpu time, 0.105s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.ExtrEqs")
### theory "Draft.FiniteGraph"
### 0.508s elapsed time, 2.017s cpu time, 0.187s GC time
Loading theory "Draft.TopoS_Interface" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.TopoS_Stateful_Policy_Algorithm" via "Draft.TopoS_Stateful_Policy" via "Draft.TopoS_Composition_Theory")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
### theory "HOL-Library.BigO"
### 0.973s elapsed time, 3.685s cpu time, 0.848s GC time
Loading theory "Draft.vertex_example_simps" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.TopoS_Stateful_Policy_Algorithm" via "Draft.TopoS_Stateful_Policy" via "Draft.TopoS_Composition_Theory" via "Draft.TopoS_Helper")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale SecurityInvariant
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
    and default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
    and receiver_violation :: "bool"
  assumes "SecurityInvariant sinvar \<bottom> receiver_violation"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.084s elapsed time, 4.108s cpu time, 0.889s GC time
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant_IFS
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
    and default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
  assumes "SecurityInvariant_IFS sinvar \<bottom>"
"1"
  :: "nat"
"CHR ''A''"
  :: "char"
locale SecurityInvariant_IFS_otherDirectrion
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
    and default_node_properties :: "'b"  (\<open>\<bottom>\<close>)
  assumes "SecurityInvariant_IFS_otherDirectrion sinvar \<bottom>"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "is_offending_flows_def" =
      \<open>is_offending_flows ?f ?G ?nP ==
             ~ sinvar ?G ?nP & sinvar (delete_edges ?G ?f) ?nP\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "is_offending_flows_min_set_def" =
      \<open>is_offending_flows_min_set ?f ?G ?nP ==
             is_offending_flows ?f ?G ?nP &
             (ALL (e1, e2):?f.
                 ~ sinvar (add_edge e1 e2 (delete_edges ?G ?f)) ?nP)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "set_offending_flows_def" =
      \<open>set_offending_flows ?G ?nP =
             {F. F <= edges ?G &
                 is_offending_flows_min_set F ?G ?nP}\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "offending_not_empty" =
      \<open>?F : set_offending_flows ?G ?nP ==> ?F ~= {}\<close>
  notes theorem
    "empty_offending_contra" =
      \<open>[| ?F : set_offending_flows ?G ?nP; ?F = {} |]
             ==> False\<close>
  notes theorem
    "offending_notevalD" =
      \<open>?F : set_offending_flows ?G ?nP ==> ~ sinvar ?G ?nP\<close>
  notes theorem
    "sinvar_no_offending" =
      \<open>sinvar ?G ?nP ==> set_offending_flows ?G ?nP = {}\<close>
  notes theorem
    "removing_offending_flows_makes_invariant_hold" =
      \<open>ALL F:set_offending_flows ?G ?nP.
                sinvar (delete_edges ?G F) ?nP\<close>
  notes theorem
    "valid_without_offending_flows" =
      \<open>?F : set_offending_flows ?G ?nP ==>
             sinvar (delete_edges ?G ?F) ?nP\<close>
  notes theorem
    "set_offending_flows_simp" =
      \<open>wf_graph ?G ==>
             set_offending_flows ?G ?nP =
             {F. F <= edges ?G &
                 (~ sinvar ?G ?nP &
                  sinvar (| nodes = nodes ?G, edges = edges ?G - F |) ?nP) &
                 (ALL (e1, e2):F.
                     ~ sinvar
                        (| nodes = nodes ?G,
                           edges = {(e1, e2)} Un (edges ?G - F) |)
                        ?nP)}\<close>
locale SecurityInvariant
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
    and default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
    and receiver_violation :: "bool"
  assumes "SecurityInvariant sinvar \<bottom> receiver_violation"
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "is_offending_flows_def" =
      \<open>is_offending_flows ?f ?G ?nP ==
             ~ sinvar ?G ?nP & sinvar (delete_edges ?G ?f) ?nP\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "is_offending_flows_min_set_def" =
      \<open>is_offending_flows_min_set ?f ?G ?nP ==
             is_offending_flows ?f ?G ?nP &
             (ALL (e1, e2):?f.
                 ~ sinvar (add_edge e1 e2 (delete_edges ?G ?f)) ?nP)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "set_offending_flows_def" =
      \<open>set_offending_flows ?G ?nP =
             {F. F <= edges ?G &
                 is_offending_flows_min_set F ?G ?nP}\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "offending_not_empty" =
      \<open>?F : set_offending_flows ?G ?nP ==> ?F ~= {}\<close>
  notes theorem
    "empty_offending_contra" =
      \<open>[| ?F : set_offending_flows ?G ?nP; ?F = {} |]
             ==> False\<close>
  notes theorem
    "offending_notevalD" =
      \<open>?F : set_offending_flows ?G ?nP ==> ~ sinvar ?G ?nP\<close>
  notes theorem
    "sinvar_no_offending" =
      \<open>sinvar ?G ?nP ==> set_offending_flows ?G ?nP = {}\<close>
  notes theorem
    "removing_offending_flows_makes_invariant_hold" =
      \<open>ALL F:set_offending_flows ?G ?nP.
                sinvar (delete_edges ?G F) ?nP\<close>
  notes theorem
    "valid_without_offending_flows" =
      \<open>?F : set_offending_flows ?G ?nP ==>
             sinvar (delete_edges ?G ?F) ?nP\<close>
  notes theorem
    "set_offending_flows_simp" =
      \<open>wf_graph ?G ==>
             set_offending_flows ?G ?nP =
             {F. F <= edges ?G &
                 (~ sinvar ?G ?nP &
                  sinvar (| nodes = nodes ?G, edges = edges ?G - F |) ?nP) &
                 (ALL (e1, e2):F.
                     ~ sinvar
                        (| nodes = nodes ?G,
                           edges = {(e1, e2)} Un (edges ?G - F) |)
                        ?nP)}\<close>
  notes
    "SecurityInvariant_preliminaries_axioms" =
      (\<open>SecurityInvariant_preliminaries sinvar\<close>)
      ["attribute" "<attribute>"]
  notes
    "defined_offending" =
      \<open>[| wf_graph ?G; ~ sinvar ?G ?nP |]
             ==> set_offending_flows ?G ?nP ~= {}\<close>
  notes
    "mono_sinvar" =
      \<open>[| wf_graph (| nodes = ?N, edges = ?E |); ?E' <= ?E;
                sinvar (| nodes = ?N, edges = ?E |) ?nP |]
             ==> sinvar (| nodes = ?N, edges = ?E' |) ?nP\<close>
  notes
    "mono_offending" =
      \<open>[| wf_graph ?G; is_offending_flows ?ff ?G ?nP |]
             ==> is_offending_flows (?ff Un ?f') ?G ?nP\<close>
  notes
    "SecurityInvariant_axioms" =
      (\<open>SecurityInvariant sinvar \<bottom> receiver_violation\<close>)
      ["attribute" "<attribute>"]
  notes
    "default_secure" =
      \<open>[| wf_graph ?G; ~ sinvar ?G ?nP;
                ?F : set_offending_flows ?G ?nP |]
             ==> (~ receiver_violation -->
                  ?i : fst ` ?F --> ~ sinvar ?G (?nP(?i := \<bottom>))) &
                 (receiver_violation -->
                  ?i : snd ` ?F -->
                  ~ sinvar ?G (?nP(?i := \<bottom>)))\<close>
  notes
    "default_unique" =
      \<open>?otherbot ~= \<bottom> ==>
             EX G nP i F.
                wf_graph G &
                ~ sinvar G nP &
                F : set_offending_flows G nP &
                sinvar (delete_edges G F) nP &
                (~ receiver_violation -->
                 i : fst ` F & sinvar G (nP(i := ?otherbot))) &
                (receiver_violation -->
                 i : snd ` F & sinvar G (nP(i := ?otherbot)))\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props_graph ==
            lfp (%p x1 x2.
                    EX node_props_sum P.
                       x1 = P &
                       x2 =
                       (%i. case node_properties P i of None => \<bottom>
                            | Some property => property))\<close>)
      ["nitpick_unfold"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props_graph ?P
             (%i. case node_properties ?P i of None => \<bottom>
                  | Some property => property)\<close>)
      ["Pure.intro" ?]
  notes
    "node_props_graph.intros" =
      \<open>node_props_graph ?P
              (%i. case node_properties ?P i of None => \<bottom>
                   | Some property => property)\<close>
  notes
    "node_props_graph.cases" =
      (\<open>[| node_props_graph ?a1.0 ?a2.0;
                 !!node_props_sum P.
                    [| ?a1.0 = P;
                       ?a2.0 =
                       (%i. case node_properties P i of None => \<bottom>
                            | Some property => property) |]
                    ==> ?P |]
              ==> ?P\<close>)
      ["consumes" - 1, "constraints" 2, "attribute" "<attribute>",
        "Pure.elim" ?]
  notes
    "node_props_graph.induct" =
      (\<open>[| node_props_graph ?x1.0 ?x2.0;
                 !!node_props_sum P.
                    ?P P
                     (%i. case node_properties P i of None => \<bottom>
                          | Some property => property) |]
              ==> ?P ?x1.0 ?x2.0\<close>)
      ["consumes" - 1]
  notes
    "node_props_graph.simps" =
      (\<open>node_props_graph ?a1.0 ?a2.0 =
              (EX node_props_sum P.
                  ?a1.0 = P &
                  ?a2.0 =
                  (%i. case node_properties P i of None => \<bottom>
                       | Some property => property))\<close>)
      ["attribute" "<attribute>"]
  notes
    "node_props_graph.inducts" =
      (\<open>[| node_props_graph ?x1.0 ?x2.0;
                 !!node_props_sum P.
                    ?P P
                     (%i. case node_properties P i of None => \<bottom>
                          | Some property => property) |]
              ==> ?P ?x1.0 ?x2.0\<close>)
      ["consumes" - 1, "attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props_rel == lfp (%p x1 x2. False)\<close>)
      ["nitpick_unfold"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes "node_props_rel.intros" =
  notes
    "node_props_rel.cases" =
      (\<open>node_props_rel ?a1.0 ?a2.0 ==> ?P\<close>)
      ["consumes" 0, "constraints" 2, "attribute" "<attribute>",
        "Pure.elim" ?]
  notes
    "node_props_rel.induct" =
      (\<open>node_props_rel ?x1.0 ?x2.0 ==> ?P ?x1.0 ?x2.0\<close>)
      ["consumes" 0]
  notes
    "node_props_rel.simps" =
      (\<open>node_props_rel ?a1.0 ?a2.0 = False\<close>)
      ["attribute" "<attribute>"]
  notes
    "node_props_rel.inducts" =
      (\<open>node_props_rel ?x1.0 ?x2.0 ==> ?P ?x1.0 ?x2.0\<close>)
      ["consumes" 0, "attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props_dom ?P ==>
            node_props ?P =
            (%i. case node_properties ?P i of None => \<bottom>
                 | Some property => property)\<close>)
      ["nitpick_psimp"]
  notes
    "node_props.psimps" =
      \<open>node_props_dom ?P ==>
             node_props ?P =
             (%i. case node_properties ?P i of None => \<bottom>
                  | Some property => property)\<close>
  notes
    "node_props.pinduct" =
      (\<open>[| node_props_dom ?a0.0; !!P. node_props_dom P ==> ?P P |]
              ==> ?P ?a0.0\<close>)
      ["case_names" "1", "consumes" 1, "induct" pred]
  notes
    "node_props.termination" = \<open>wf ?R ==> All node_props_dom\<close>
  notes
    "node_props.cases" = (\<open>(!!P. ?x = P ==> ?P) ==> ?P\<close>)
      ["case_names" "1"]
  notes
    "node_props.pelims" =
      (\<open>[| node_props ?x = ?y; node_props_dom ?x;
                 !!P. [| ?x = P;
                         ?y =
                         (%i. case node_properties P i of None => \<bottom>
                              | Some property => property);
                         node_props_dom P |]
                      ==> ?P |]
              ==> ?P\<close>)
      ["consumes" 1, "constraints" 1]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    (\<open>node_props ?P =
            (%i. case node_properties ?P i of None => \<bottom>
                 | Some property => property)\<close>)
      ["simp", "nitpick_simp"]
  notes
    "node_props.simps" =
      \<open>node_props ?P =
             (%i. case node_properties ?P i of None => \<bottom>
                  | Some property => property)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "node_props.induct" = (\<open>(!!P. ?P P) ==> ?P ?a0.0\<close>)
      ["case_names" "1"]
  notes
    "node_props.elims" =
      (\<open>[| node_props ?x = ?y;
                 !!P. [| ?x = P;
                         ?y =
                         (%i. case node_properties P i of None => \<bottom>
                              | Some property => property) |]
                      ==> ?P |]
              ==> ?P\<close>)
      ["consumes" 1, "constraints" 1]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "node_props_formaldef_def" =
      \<open>node_props_formaldef ?P ==
             %i. if i : dom (node_properties ?P)
                 then the (node_properties ?P i) else \<bottom>\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "node_props_eq_node_props_formaldef" =
      \<open>node_props_formaldef = node_props\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes
    "eval_def" =
      \<open>eval ?G ?P == wf_graph ?G & sinvar ?G (node_props ?P)\<close>
  notes (\<open>TERM _\<close>) ["attribute" "<attribute>"]
  notes theorem
    "unique_common_math_notation" =
      \<open>ALL G nP i F.
                wf_graph G &
                ~ sinvar G nP &
                F : set_offending_flows G nP &
                sinvar (delete_edges G F) nP &
                (~ receiver_violation -->
                 i : fst ` F --> ~ sinvar G (nP(i := ?otherbot))) &
                (receiver_violation -->
                 i : snd ` F --> ~ sinvar G (nP(i := ?otherbot))) ==>
             ?otherbot = \<bottom>\<close>
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant_ACS
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
    and default_node_properties :: "'a"  (\<open>\<bottom>\<close>)
  assumes "SecurityInvariant_ACS sinvar \<bottom>"
### theory "Draft.vertex_example_simps"
### 0.231s elapsed time, 0.879s cpu time, 0.041s GC time
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant_ACS_otherDirectrion
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
    and default_node_properties :: "'b"  (\<open>\<bottom>\<close>)
  assumes "SecurityInvariant_ACS_otherDirectrion sinvar \<bottom>"
### theory "Draft.TopoS_Interface"
### 1.141s elapsed time, 4.162s cpu time, 0.806s GC time
Loading theory "Draft.TopoS_withOffendingFlows" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.TopoS_Stateful_Policy_Algorithm" via "Draft.TopoS_Stateful_Policy" via "Draft.TopoS_Composition_Theory" via "Draft.TopoS_Helper" via "Draft.TopoS_ENF")
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
Found termination order: "(%p. size_list size (fst (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
locale SecurityInvariant_preliminaries
  fixes sinvar :: "'a graph => ('a => 'b) => bool"
  assumes "SecurityInvariant_preliminaries sinvar"
### theory "HOL-Library.Tree"
### 2.107s elapsed time, 6.822s cpu time, 1.180s GC time
Loading theory "Draft.Templates" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.ExtrEqs")
### theory "Draft.TopoS_withOffendingFlows"
### 0.716s elapsed time, 1.723s cpu time, 0.228s GC time
Loading theory "Draft.TopoS_ENF" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.TopoS_Stateful_Policy_Algorithm" via "Draft.TopoS_Stateful_Policy" via "Draft.TopoS_Composition_Theory" via "Draft.TopoS_Helper")
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
locale SecurityInvariant_withOffendingFlows
  fixes sinvar :: "'v graph => ('v => 'a) => bool"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.097s elapsed time, 0.385s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates")
"{{3, 2, 1, 8}, {3, 2, 1, 9}, {2, 1, 8}, {2, 1, 9}, {1, 8}, {1, 9},
  {3, 1, 8}, {3, 1, 9}, {3, 8}, {3, 9}, {8}, {9}, {2, 8}, {2, 9}, {3, 2, 8},
  {3, 2, 9}}"
  :: "int set set"
"{{1, 2, 3}, {1, 2}, {1}, {1, 3}, {3}, {}, {2}, {2, 3}, {8}, {9}}"
  :: "int set set"
"{{2}, {}, {1}, {1, 2}}"
  :: "int set set"
"{{2, 8}, {2, 5, 6}, {8}, {5, 6}, {1, 8}, {1, 5, 6}, {2, 1, 8},
  {2, 1, 5, 6}, {2}, {}, {1}, {1, 2}}"
  :: "int set set"
### theory "Draft.TopoS_ENF"
### 0.510s elapsed time, 1.920s cpu time, 0.127s GC time
Loading theory "Draft.TopoS_Helper" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.TopoS_Stateful_Policy_Algorithm" via "Draft.TopoS_Stateful_Policy" via "Draft.TopoS_Composition_Theory")
"True"
  :: "bool"
### theory "Draft.TopoS_Helper"
### 0.221s elapsed time, 0.553s cpu time, 0.039s GC time
Loading theory "Draft.TopoS_Composition_Theory" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.TopoS_Stateful_Policy_Algorithm" via "Draft.TopoS_Stateful_Policy")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.662s elapsed time, 2.168s cpu time, 0.166s GC time
Found termination order: "{}"
locale configured_SecurityInvariant
  fixes m :: "'v SecurityInvariant_configured"
  assumes "configured_SecurityInvariant m"
configured_SecurityInvariant ?m ==
(ALL G.
    c_offending_flows ?m G =
    {F. F <= edges G &
        ~ c_sinvar ?m G &
        c_sinvar ?m (delete_edges G F) &
        (ALL (e1, e2):F.
            ~ c_sinvar ?m (add_edge e1 e2 (delete_edges G F)))}) &
(ALL N.
    wf_graph (| nodes = N, edges = {} |) -->
    c_sinvar ?m (| nodes = N, edges = {} |)) &
(ALL N E E'.
    wf_graph (| nodes = N, edges = E |) -->
    E' <= E -->
    c_sinvar ?m (| nodes = N, edges = E |) -->
    c_sinvar ?m (| nodes = N, edges = E' |))
[| configured_SecurityInvariant ?m; wf_graph (| nodes = ?N, edges = ?E |);
   ?E' <= ?E; c_sinvar ?m (| nodes = ?N, edges = ?E |) |]
==> c_sinvar ?m (| nodes = ?N, edges = ?E' |)
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
[| configured_SecurityInvariant ?m; wf_graph (| nodes = ?V, edges = ?E |);
   ?E' <= ?E |]
==> \<Union> (c_offending_flows ?m (| nodes = ?V, edges = ?E' |))
    <= \<Union> (c_offending_flows ?m (| nodes = ?V, edges = ?E |))
[| configured_SecurityInvariant ?m; wf_graph (| nodes = ?V, edges = ?E |);
   \<Union> (c_offending_flows ?m (| nodes = ?V, edges = ?E |)) <= ?X |]
==> \<Union> (c_offending_flows ?m (| nodes = ?V, edges = ?E - ?E' |))
    <= ?X - ?E'
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.TopoS_Composition_Theory"
### 0.827s elapsed time, 0.913s cpu time, 0.096s GC time
Loading theory "Draft.TopoS_Stateful_Policy" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates" via "Draft.TopoS_Stateful_Policy_Algorithm")
"generate_valid_topology"
  :: "'a SecurityInvariant_configured list => 'a graph => 'a graph"
"all_security_requirements_fulfilled"
  :: "'a SecurityInvariant_configured list => 'a graph => bool"
locale wf_stateful_policy
  fixes \<T> :: "'v stateful_policy"
  assumes "wf_stateful_policy \<T>"
locale stateful_policy_compliance
  fixes \<T> :: "'v stateful_policy"
    and G :: "'v graph"
    and M :: "'v SecurityInvariant_configured list"
  assumes "stateful_policy_compliance \<T> G M"
stateful_policy_compliance ?\<T> ?G ?M ==>
all_security_requirements_fulfilled (get_IFS ?M)
 (stateful_policy_to_network_graph ?\<T>)
stateful_policy_compliance ?\<T> ?G ?M ==>
\<Union>
 (get_offending_flows (get_ACS ?M) (stateful_policy_to_network_graph ?\<T>))
<= backflows (flows_state ?\<T>)
stateful_policy_compliance ?\<T> ?G ?M ==>
ALL E<=backflows (flows_state ?\<T>).
   ALL F:get_offending_flows (get_ACS ?M)
          (| nodes = hosts ?\<T>,
             edges = flows_fix ?\<T> Un flows_state ?\<T> Un E |).
      F <= E
stateful_policy_compliance ?\<T> ?G ?M ==>
\<Union> (get_offending_flows ?M (stateful_policy_to_network_graph ?\<T>))
<= backflows (flows_state ?\<T>)
stateful_policy_compliance ?\<T> ?G ?M ==>
ALL (v\<^sub>1, v\<^sub>2):backflows (flows_state ?\<T>).
   \<Union>
    (get_offending_flows (get_ACS ?M)
      (| nodes = hosts ?\<T>,
         edges =
           flows_fix ?\<T> Un flows_state ?\<T> Un
           {(v\<^sub>1, v\<^sub>2)} |))
   <= {(v\<^sub>1, v\<^sub>2)}
stateful_policy_compliance ?\<T> ?G ?M ==>
all_security_requirements_fulfilled ?M
 (| nodes = hosts ?\<T>, edges = flows_fix ?\<T> Un flows_state ?\<T> |)
### theory "Draft.TopoS_Stateful_Policy"
### 0.562s elapsed time, 1.158s cpu time, 0.826s GC time
Loading theory "Draft.TopoS_Stateful_Policy_Algorithm" (required by "Draft.TopoS_Stateful_Policy_AlgorithmTemplates")
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
[| valid_reqs (get_IFS ?M); wf_graph ?G;
   all_security_requirements_fulfilled (get_IFS ?M) ?G;
   set ?edgesList <= edges ?G |]
==> all_security_requirements_fulfilled (get_IFS ?M)
     (stateful_policy_to_network_graph
       (| hosts = nodes ?G, flows_fix = edges ?G,
          flows_state = set (filter_IFS_no_violations ?G ?M ?edgesList) |))
[| valid_reqs (get_IFS ?M); wf_graph ?G; set ?edgesList = edges ?G |]
==> let stateful = set (filter_IFS_no_violations ?G ?M ?edgesList)
    in ALL e:edges ?G - stateful.
          ~ all_security_requirements_fulfilled (get_IFS ?M)
             (stateful_policy_to_network_graph
               (| hosts = nodes ?G, flows_fix = edges ?G,
                  flows_state = {e} Un stateful |))
Found termination order:
  "(%p. size_list size (snd (snd (snd p)))) <*mlex*> {}"
[| valid_reqs ?M; wf_graph (| nodes = ?V, edges = E Un backflows E |);
   ?E' <= E Un backflows E;
   \<Union>
    (get_offending_flows ?M (| nodes = ?V, edges = E Un backflows E |))
   <= backflows E - E |]
==> \<Union>
     (get_offending_flows ?M
       (| nodes = ?V, edges = E Un backflows E - ?E' |))
    <= backflows E - E - ?E'
[| valid_reqs (get_ACS ?M); wf_graph ?G; set ?edgesList <= edges ?G;
   all_security_requirements_fulfilled (get_ACS ?M) ?G;
   ?\<T> =
   (| hosts = nodes ?G, flows_fix = edges ?G,
      flows_state =
        set (filter_compliant_stateful_ACS ?G ?M ?edgesList) |) |]
==> ALL F:get_offending_flows (get_ACS ?M)
           (stateful_policy_to_network_graph ?\<T>).
       F <= backflows (filternew_flows_state ?\<T>)
[| valid_reqs (get_ACS ?M); wf_graph (| nodes = ?V, edges = ?E |);
   set ?edgesList = ?E;
   ?stateful =
   set (filter_compliant_stateful_ACS (| nodes = ?V, edges = ?E |) ?M
         ?edgesList) |]
==> ALL e:?E - (?stateful Un {e: ?E. e : backflows ?E}).
       ~ \<Union>
          (get_offending_flows (get_ACS ?M)
            (stateful_policy_to_network_graph
              (| hosts = ?V, flows_fix = ?E,
                 flows_state = ?stateful Un {e} |)))
         <= backflows
             (filternew_flows_state
               (| hosts = ?V, flows_fix = ?E,
                  flows_state = ?stateful Un {e} |))
### theory "Draft.TopoS_Stateful_Policy_Algorithm"
### 0.618s elapsed time, 0.710s cpu time, 0.115s GC time
Loading theory "Draft.TopoS_Stateful_Policy_AlgorithmTemplates"
val templateLemmas =
   [("TopoS_Stateful_Policy_Algorithm.valid_reqs_ACS_D",
     "valid_reqs ?M ==> valid_reqs (get_ACS ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.valid_reqs_IFS_D",
     "valid_reqs ?M ==> valid_reqs (get_IFS ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_select_simps",
     "hosts (generate_valid_stateful_policy_IFSACS ?G ?M ?edgesList) =
      nodes ?G",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 2))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_select_simps",
     "hosts (generate_valid_stateful_policy_IFSACS_2 ?G ?M ?edgesList) =
      nodes ?G",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 2))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_select_simps",
     "flows_fix (generate_valid_stateful_policy_IFSACS ?G ?M ?edgesList) =
      edges ?G",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 2))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_select_simps",
     "flows_fix (generate_valid_stateful_policy_IFSACS_2 ?G ?M ?edgesList) =
      edges ?G",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 2))),
    ("TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_subseteq_input",
     "set (filter_IFS_no_violations ?G ?M ?Es) <= set ?Es",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_subseteq_input",
     "set (filter_compliant_stateful_ACS ?G ?M ?Es) <= set ?Es",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_select_simps",
     "flows_state (generate_valid_stateful_policy_IFSACS ?G ?M ?edgesList)
      <= set ?edgesList",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_select_simps",
     "flows_state (generate_valid_stateful_policy_IFSACS_2 ?G ?M ?edgesList)
      <= set ?edgesList",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("TopoS_Stateful_Policy_Algorithm.all_security_requirements_fulfilled_ACS_D",
     "all_security_requirements_fulfilled ?M ?G ==>
      all_security_requirements_fulfilled (get_ACS ?M) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.all_security_requirements_fulfilled_IFS_D",
     "all_security_requirements_fulfilled ?M ?G ==>
      all_security_requirements_fulfilled (get_IFS ?M) ?G",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_wf_stateful_policy",
     "[| wf_graph ?G; set ?edgesList = edges ?G |]
      ==> wf_stateful_policy
           (generate_valid_stateful_policy_IFSACS ?G ?M ?edgesList)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_wf_stateful_policy",
     "[| wf_graph ?G; set ?edgesList = edges ?G |]
      ==> wf_stateful_policy
           (generate_valid_stateful_policy_IFSACS_2 ?G ?M ?edgesList)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_all_security_requirements_fulfilled_IFS",
     "[| valid_reqs ?M; wf_graph ?G;
         all_security_requirements_fulfilled ?M ?G;
         set ?edgesList <= edges ?G |]
      ==> all_security_requirements_fulfilled (get_IFS ?M)
           (stateful_policy_to_network_graph
             (generate_valid_stateful_policy_IFSACS ?G ?M ?edgesList))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 2, template_var 2)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0)))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_all_security_requirements_fulfilled_IFS",
     "[| valid_reqs ?M; wf_graph ?G;
         all_security_requirements_fulfilled ?M ?G;
         set ?edgesList <= edges ?G |]
      ==> all_security_requirements_fulfilled (get_IFS ?M)
           (stateful_policy_to_network_graph
             (generate_valid_stateful_policy_IFSACS_2 ?G ?M ?edgesList))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 2, template_var 2)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0)))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.trivial_stateful_policy_compliance",
     "[| wf_graph (| nodes = ?V, edges = ?E |); valid_reqs ?M;
         all_security_requirements_fulfilled ?M
          (| nodes = ?V, edges = ?E |) |]
      ==> stateful_policy_compliance
           (| hosts = ?V, flows_fix = ?E, flows_state = {} |)
           (| nodes = ?V, edges = ?E |) ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_hole 5))
            ),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1),
                template_hole 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 1),
                     template_hole 0),
                   template_hole 5)),
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 1),
                 template_hole 5)),
             template_var 0)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_stateful_policy_compliance",
     "[| valid_reqs ?M; wf_graph ?G;
         all_security_requirements_fulfilled ?M ?G;
         set ?edgesList = edges ?G;
         ?\<T> = generate_valid_stateful_policy_IFSACS ?G ?M ?edgesList |]
      ==> stateful_policy_compliance ?\<T> ?G ?M",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 2)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 2),
              template_var 3),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 3)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_stateful_policy_compliance",
     "[| valid_reqs ?M; wf_graph ?G;
         all_security_requirements_fulfilled ?M ?G;
         set ?edgesList = edges ?G;
         ?\<T> = generate_valid_stateful_policy_IFSACS_2 ?G ?M ?edgesList |]
      ==> stateful_policy_compliance ?\<T> ?G ?M",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 2)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 1, template_var 2),
              template_var 3),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 3)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu_no_IFS",
     "[| valid_reqs (get_IFS ?M); wf_graph ?G; get_IFS ?M = [];
         set ?accu Un set ?edgesList <= edges ?G |]
      ==> filter_IFS_no_violations_accu ?G ?M ?accu ?edgesList =
          rev ?edgesList @ ?accu",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 3))
            ),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_equation
         (template_app (template_hole 11, template_var 3), template_hole 8),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1)),
            template_app (template_hole 5, template_var 0)),
          template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("TopoS_Stateful_Policy_Algorithm.all_security_requirements_fulfilled_mono_stateful_policy_to_network_graph",
     "[| valid_reqs ?M; ?E' <= ?E;
         wf_graph (| nodes = ?V, edges = ?Efix Un ?E |);
         all_security_requirements_fulfilled ?M
          (stateful_policy_to_network_graph
            (| hosts = ?V, flows_fix = ?Efix, flows_state = ?E |)) |]
      ==> all_security_requirements_fulfilled ?M
           (stateful_policy_to_network_graph
             (| hosts = ?V, flows_fix = ?Efix, flows_state = ?E' |))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 4)),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_var 2)),
                template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_hole 1,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 0, template_var 1),
                      template_var 0),
                    template_var 2),
                  template_hole 3)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 3),
                 template_hole 3)))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_correct",
     "[| valid_reqs (get_IFS ?M); wf_graph ?G;
         all_security_requirements_fulfilled (get_IFS ?M) ?G;
         set ?edgesList <= edges ?G |]
      ==> all_security_requirements_fulfilled (get_IFS ?M)
           (stateful_policy_to_network_graph
             (| hosts = nodes ?G, flows_fix = edges ?G,
                flows_state =
                  set (filter_IFS_no_violations ?G ?M ?edgesList) |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 2))
            ),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 10, template_var 2)),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 0),
          template_app (template_hole 5, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 10, template_var 2)),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 1)),
                     template_app (template_hole 5, template_var 1)),
                   template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 2),
                       template_var 0))),
                 template_hole 0)))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_filter_compliant_stateful_ACS",
     "[| valid_reqs ?M; wf_graph ?G;
         all_security_requirements_fulfilled ?M ?G;
         set ?edgesList <= edges ?G;
         ?\<T> = generate_valid_stateful_policy_IFSACS_2 ?G ?M ?edgesList |]
      ==> ALL F:get_offending_flows (get_ACS ?M)
                 (stateful_policy_to_network_graph ?\<T>).
             F <= backflows (filternew_flows_state ?\<T>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 3)),
        template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 2)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app (template_hole 6, template_var 2),
              template_var 3),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 2, template_var 0))),
             t_empty)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_maximal",
     "[| valid_reqs (get_IFS ?M); wf_graph ?G; set ?edgesList = edges ?G |]
      ==> let stateful = set (filter_IFS_no_violations ?G ?M ?edgesList)
          in ALL e:edges ?G - stateful.
                ~ all_security_requirements_fulfilled (get_IFS ?M)
                   (stateful_policy_to_network_graph
                     (| hosts = nodes ?G, flows_fix = edges ?G,
                        flows_state = {e} Un stateful |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 18,
              template_app (template_hole 17, template_var 2))
            ),
        template_predicate
         (template_app (template_hole 16, template_var 1)),
        template_equation
         (template_app (template_hole 14, template_var 0),
          template_app (template_hole 13, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_hole 14,
                 template_app
                  (template_app
                    (template_app (template_hole 11, template_var 1),
                     template_var 2),
                   template_var 0))),
             t_empty)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_correct",
     "[| valid_reqs (get_ACS ?M); wf_graph ?G; set ?edgesList <= edges ?G;
         all_security_requirements_fulfilled (get_ACS ?M) ?G;
         ?\<T> =
         (| hosts = nodes ?G, flows_fix = edges ?G,
            flows_state =
              set (filter_compliant_stateful_ACS ?G ?M ?edgesList) |) |]
      ==> ALL F:get_offending_flows (get_ACS ?M)
                 (stateful_policy_to_network_graph ?\<T>).
             F <= backflows (filternew_flows_state ?\<T>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 3))
            ),
        template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 12, template_var 1),
          template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 15, template_var 3)),
              template_var 2)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 2)),
                template_app (template_hole 11, template_var 2)),
              template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 3),
                  template_var 1))),
            template_hole 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 15, template_var 3)),
                 template_app (template_hole 2, template_var 0))),
             t_empty)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu_correct_induction",
     "[| valid_reqs (get_IFS ?M); wf_graph (| nodes = ?V, edges = ?E |);
         all_security_requirements_fulfilled (get_IFS ?M)
          (stateful_policy_to_network_graph
            (| hosts = ?V, flows_fix = ?E, flows_state = set ?accu |));
         set ?accu Un set ?edgesList <= ?E |]
      ==> all_security_requirements_fulfilled (get_IFS ?M)
           (stateful_policy_to_network_graph
             (| hosts = ?V, flows_fix = ?E,
                flows_state =
                  set (filter_IFS_no_violations_accu
                        (| nodes = ?V, edges = ?E |) ?M ?accu
                        ?edgesList) |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_app (template_hole 8, template_var 3),
                  template_var 2),
                template_hole 7))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 10, template_var 4)),
              template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2),
                    template_app (template_hole 3, template_var 1)),
                  template_hole 7)))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 1,
              template_app (template_hole 3, template_var 1)),
            template_app (template_hole 3, template_var 0)),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 10, template_var 4)),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 2),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app
                          (template_app
                            (template_hole 0,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 8, template_var 3),
                                 template_var 2),
                               template_hole 7)),
                           template_var 4),
                         template_var 1),
                       template_var 0))),
                 template_hole 7)))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_maximal_allsubsets",
     "[| valid_reqs (get_IFS ?M); wf_graph ?G; set ?edgesList = edges ?G |]
      ==> let stateful = set (filter_IFS_no_violations ?G ?M ?edgesList)
          in ALL E<=edges ?G - stateful.
                E ~= {} -->
                ~ all_security_requirements_fulfilled (get_IFS ?M)
                   (stateful_policy_to_network_graph
                     (| hosts = nodes ?G, flows_fix = edges ?G,
                        flows_state = E Un stateful |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 19,
              template_app (template_hole 18, template_var 2))
            ),
        template_predicate
         (template_app (template_hole 17, template_var 1)),
        template_equation
         (template_app (template_hole 15, template_var 0),
          template_app (template_hole 14, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_app (template_hole 12, template_var 1),
                     template_var 2),
                   template_var 0))),
             t_empty)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_noIFS_noACSsideeffects_imp_fullgraph",
     "[| valid_reqs ?M; wf_graph ?G;
         all_security_requirements_fulfilled ?M ?G;
         set ?edgesList = edges ?G;
         ALL F:get_offending_flows (get_ACS ?M)
                (| nodes = nodes ?G,
                   edges = edges ?G Un backflows (edges ?G) |).
            F <= backflows (edges ?G) - edges ?G;
         get_IFS ?M = [] |]
      ==> stateful_policy_to_network_graph
           (generate_valid_stateful_policy_IFSACS ?G ?M ?edgesList) =
          undirected ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 2)),
        template_predicate
         (template_app (template_hole 21, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 18, template_var 0),
          template_app (template_hole 17, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_var 2)),
                  template_app
                   (template_app
                     (template_app
                       (template_hole 13,
                        template_app (template_hole 12, template_var 1)),
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app (template_hole 17, template_var 1)),
                        template_app
                         (template_hole 10,
                          template_app
                           (template_hole 17, template_var 1)))),
                    template_hole 9))),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 5, template_var 2), template_hole 4)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("TopoS_Stateful_Policy_Algorithm.generate_valid_stateful_policy_IFSACS_2_noIFS_noACSsideeffects_imp_fullgraph",
     "[| valid_reqs ?M; wf_graph ?G;
         all_security_requirements_fulfilled ?M ?G;
         set ?edgesList = edges ?G;
         ALL F:get_offending_flows (get_ACS ?M)
                (| nodes = nodes ?G,
                   edges = edges ?G Un backflows (edges ?G) |).
            F <= backflows (edges ?G) - edges ?G;
         get_IFS ?M = [] |]
      ==> stateful_policy_to_network_graph
           (generate_valid_stateful_policy_IFSACS_2 ?G ?M ?edgesList) =
          undirected ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 22, template_var 2)),
        template_predicate
         (template_app (template_hole 21, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 18, template_var 0),
          template_app (template_hole 17, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app
                   (template_hole 15,
                    template_app (template_hole 14, template_var 2)),
                  template_app
                   (template_app
                     (template_app
                       (template_hole 13,
                        template_app (template_hole 12, template_var 1)),
                      template_app
                       (template_app
                         (template_hole 11,
                          template_app (template_hole 17, template_var 1)),
                        template_app
                         (template_hole 10,
                          template_app
                           (template_hole 17, template_var 1)))),
                    template_hole 9))),
              t_empty)
            ),
        template_equation
         (template_app (template_hole 5, template_var 2), template_hole 4)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_maximal_allsubsets",
     "[| valid_reqs (get_ACS ?M); wf_graph (| nodes = ?V, edges = ?E |);
         set ?edgesList = ?E;
         ?stateful =
         set (filter_compliant_stateful_ACS (| nodes = ?V, edges = ?E |) ?M
               ?edgesList);
         ?X <= ?E - (?stateful Un backflows ?E); ?X ~= {} |]
      ==> ~ \<Union>
             (get_offending_flows (get_ACS ?M)
               (stateful_policy_to_network_graph
                 (| hosts = ?V, flows_fix = ?E,
                    flows_state = ?stateful Un ?X |)))
            <= backflows
                (filternew_flows_state
                  (| hosts = ?V, flows_fix = ?E,
                     flows_state = ?stateful Un ?X |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 18,
              template_app (template_hole 17, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app
                 (template_app (template_hole 15, template_var 4),
                  template_var 3),
                template_hole 14))
            ),
        template_equation
         (template_app (template_hole 12, template_var 2), template_var 3),
        template_equation
         (template_var 1,
          template_app
           (template_hole 12,
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_app (template_hole 15, template_var 4),
                      template_var 3),
                    template_hole 14)),
                template_var 5),
              template_var 2))),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 9, template_var 3),
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 3)))),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_negation
        (
           template_inequation
            (less_equals,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 17, template_var 5)),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 1, template_var 4),
                         template_var 3),
                       template_app
                        (template_app (template_hole 8, template_var 1),
                         template_var 0)),
                     template_hole 14)))),
             template_app
              (template_hole 7,
               template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 3),
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_var 0)),
                   template_hole 14))))
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_maximal",
     "[| valid_reqs (get_ACS ?M); wf_graph (| nodes = ?V, edges = ?E |);
         set ?edgesList = ?E;
         ?stateful =
         set (filter_compliant_stateful_ACS (| nodes = ?V, edges = ?E |) ?M
               ?edgesList) |]
      ==> ALL e:?E - (?stateful Un {e: ?E. e : backflows ?E}).
             ~ \<Union>
                (get_offending_flows (get_ACS ?M)
                  (stateful_policy_to_network_graph
                    (| hosts = ?V, flows_fix = ?E,
                       flows_state = ?stateful Un {e} |)))
               <= backflows
                   (filternew_flows_state
                     (| hosts = ?V, flows_fix = ?E,
                        flows_state = ?stateful Un {e} |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 22, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 21,
              template_app
               (template_app
                 (template_app (template_hole 20, template_var 3),
                  template_var 2),
                template_hole 19))
            ),
        template_equation
         (template_app (template_hole 17, template_var 1), template_var 2),
        template_equation
         (template_var 0,
          template_app
           (template_hole 17,
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app
                   (template_app
                     (template_app (template_hole 20, template_var 3),
                      template_var 2),
                    template_hole 19)),
                template_var 4),
              template_var 1)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, template_var 2),
                 template_app
                  (template_app (template_hole 13, template_var 0),
                   template_app (template_hole 12, t_empty)))),
             t_empty)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu_no_side_effects",
     "[| valid_reqs (get_ACS ?M); wf_graph ?G;
         ALL F:get_offending_flows (get_ACS ?M)
                (| nodes = nodes ?G,
                   edges = edges ?G Un backflows (edges ?G) |).
            F <= backflows (edges ?G) - edges ?G;
         set ?accu Un set ?edgesList <= edges ?G;
         ALL a:set ?accu. a ~: backflows (edges ?G) |]
      ==> filter_compliant_stateful_ACS_accu ?G ?M ?accu ?edgesList =
          rev (filter (%e. e ~: backflows (edges ?G)) ?edgesList) @ ?accu",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 21,
              template_app (template_hole 20, template_var 3))
            ),
        template_predicate
         (template_app (template_hole 19, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app (template_hole 20, template_var 3)),
                  template_app
                   (template_app
                     (template_app
                       (template_hole 16,
                        template_app (template_hole 15, template_var 2)),
                      template_app
                       (template_app
                         (template_hole 14,
                          template_app (template_hole 13, template_var 2)),
                        template_app
                         (template_hole 12,
                          template_app
                           (template_hole 13, template_var 2)))),
                    template_hole 11))),
              t_empty)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 8, template_var 1)),
            template_app (template_hole 8, template_var 0)),
          template_app (template_hole 13, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 0))),
           template_var 1)))),
    ("TopoS_Stateful_Policy_Algorithm.filter_IFS_no_violations_accu_maximal_induction",
     "[| valid_reqs (get_IFS ?M); wf_graph (| nodes = ?V, edges = ?E |);
         set ?accu <= ?E; set ?edgesList <= ?E;
         ALL e:?E - (set ?accu Un set ?edgesList).
            ~ all_security_requirements_fulfilled (get_IFS ?M)
               (stateful_policy_to_network_graph
                 (| hosts = ?V, flows_fix = ?E,
                    flows_state = {e} Un set ?accu |)) |]
      ==> let stateful =
                set (filter_IFS_no_violations_accu
                      (| nodes = ?V, edges = ?E |) ?M ?accu ?edgesList)
          in ALL e:?E - stateful.
                ~ all_security_requirements_fulfilled (get_IFS ?M)
                   (stateful_policy_to_network_graph
                     (| hosts = ?V, flows_fix = ?E,
                        flows_state = {e} Un stateful |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 17,
              template_app (template_hole 16, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 15,
              template_app
               (template_app
                 (template_app (template_hole 14, template_var 3),
                  template_var 2),
                template_hole 13))
            ),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 1),
          template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 0),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_app
                     (template_hole 8,
                      template_app (template_hole 11, template_var 1)),
                    template_app (template_hole 11, template_var 0)))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 0,
                         template_app
                          (template_app
                            (template_app
                              (template_hole 14, template_var 3),
                             template_var 2),
                           template_hole 13)),
                       template_var 4),
                     template_var 1),
                   template_var 0))),
             t_empty)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu_correct_induction",
     "[| valid_reqs (get_ACS ?M); wf_graph (| nodes = ?V, edges = ?E |);
         set ?accu Un set ?edgesList <= ?E;
         ALL F:get_offending_flows (get_ACS ?M)
                (stateful_policy_to_network_graph
                  (| hosts = ?V, flows_fix = ?E,
                     flows_state = set ?accu |)).
            F <= backflows (set ?accu);
         ALL a:set ?accu. a ~: backflows ?E;
         ?\<T> =
         (| hosts = ?V, flows_fix = ?E,
            flows_state =
              set (filter_compliant_stateful_ACS_accu
                    (| nodes = ?V, edges = ?E |) ?M ?accu ?edgesList) |) |]
      ==> ALL F:get_offending_flows (get_ACS ?M)
                 (stateful_policy_to_network_graph ?\<T>).
             F <= backflows (filternew_flows_state ?\<T>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 18,
              template_app (template_hole 17, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_hole 16,
              template_app
               (template_app
                 (template_app (template_hole 15, template_var 4),
                  template_var 3),
                template_hole 14))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 2)),
            template_app (template_hole 11, template_var 1)),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 17, template_var 5)),
                  template_app
                   (template_hole 8,
                    template_app
                     (template_app
                       (template_app
                         (template_app (template_hole 7, template_var 4),
                          template_var 3),
                        template_app (template_hole 11, template_var 2)),
                      template_hole 14)))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 11, template_var 2)),
              t_empty)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 1,
                        template_app
                         (template_app
                           (template_app (template_hole 15, template_var 4),
                            template_var 3),
                          template_hole 14)),
                      template_var 5),
                    template_var 2),
                  template_var 1))),
            template_hole 14))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 17, template_var 5)),
                 template_app (template_hole 8, template_var 0))),
             t_empty)
           ))),
    ("TopoS_Stateful_Policy_Algorithm.filter_compliant_stateful_ACS_accu_induction_maximal",
     "[| valid_reqs (get_ACS ?M); wf_graph (| nodes = ?V, edges = ?E |);
         set ?edgesList <= ?E; set ?accu <= ?E;
         ?stateful =
         set (filter_compliant_stateful_ACS_accu
               (| nodes = ?V, edges = ?E |) ?M ?accu ?edgesList);
         ALL e:?E -
               (set ?edgesList Un set ?accu Un {e: ?E. e : backflows ?E}).
            ~ \<Union>
               (get_offending_flows (get_ACS ?M)
                 (stateful_policy_to_network_graph
                   (| hosts = ?V, flows_fix = ?E,
                      flows_state = set ?accu Un {e} |)))
              <= backflows
                  (filternew_flows_state
                    (| hosts = ?V, flows_fix = ?E,
                       flows_state = set ?accu Un {e} |)) |]
      ==> ALL e:?E - (?stateful Un {e: ?E. e : backflows ?E}).
             ~ \<Union>
                (get_offending_flows (get_ACS ?M)
                  (stateful_policy_to_network_graph
                    (| hosts = ?V, flows_fix = ?E,
                       flows_state = ?stateful Un {e} |)))
               <= backflows
                   (filternew_flows_state
                     (| hosts = ?V, flows_fix = ?E,
                        flows_state = ?stateful Un {e} |))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 23,
              template_app (template_hole 22, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_hole 21,
              template_app
               (template_app
                 (template_app (template_hole 20, template_var 4),
                  template_var 3),
                template_hole 19))
            ),
        template_inequation
         (less_equals, template_app (template_hole 17, template_var 2),
          template_var 3),
        template_inequation
         (less_equals, template_app (template_hole 17, template_var 1),
          template_var 3),
        template_equation
         (template_var 0,
          template_app
           (template_hole 17,
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_app
                       (template_app (template_hole 20, template_var 4),
                        template_var 3),
                      template_hole 19)),
                  template_var 5),
                template_var 1),
              template_var 2))),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 3),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app (template_hole 17, template_var 2)),
                        template_app (template_hole 17, template_var 1))),
                    template_app (template_hole 11, t_empty)))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 13, template_var 3),
                 template_app
                  (template_app (template_hole 12, template_var 0),
                   template_app (template_hole 11, t_empty)))),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.TopoS_Stateful_Policy_AlgorithmTemplates"
### 0.338s elapsed time, 0.456s cpu time, 0.000s GC time
val it = (): unit
