Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.KMPMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.KMPMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOL-Library.Countable")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.126s elapsed time, 0.531s cpu time, 0.037s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.KMPMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.619s cpu time, 0.037s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.KMPMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.316s elapsed time, 1.271s cpu time, 0.128s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.KMPMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.214s elapsed time, 0.846s cpu time, 0.091s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.KMPMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.393s elapsed time, 1.576s cpu time, 0.128s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 0.766s elapsed time, 3.024s cpu time, 0.302s GC time
Loading theory "HOLCF.Porder" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun" via "HOLCF.Cpodef" via "HOLCF.Adm" via "HOLCF.Cont" via "HOLCF.Pcpo")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.045s elapsed time, 3.924s cpu time, 0.891s GC time
class below = type +
  fixes below :: "'a => 'a => bool"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
class po = below +
  assumes "below_refl": "!!x. x << x"
  assumes "below_trans": "!!x y z. [| x << y; y << z |] ==> x << z"
  assumes "below_antisym": "!!x y. [| x << y; y << x |] ==> x = y"
class po = below +
  assumes "below_refl": "!!x. x << x"
  assumes "below_trans": "!!x y z. [| x << y; y << z |] ==> x << z"
  assumes "below_antisym": "!!x y. [| x << y; y << x |] ==> x = y"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
class po = below +
  assumes "below_refl": "!!x. x << x"
  assumes "below_trans": "!!x y z. [| x << y; y << z |] ==> x << z"
  assumes "below_antisym": "!!x y. [| x << y; y << x |] ==> x = y"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOLCF.Porder"
### 0.539s elapsed time, 1.679s cpu time, 0.691s GC time
Loading theory "HOLCF.Pcpo" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun" via "HOLCF.Cpodef" via "HOLCF.Adm" via "HOLCF.Cont")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class cpo = po +
  assumes "cpo": "!!S. chain S ==> EX x. range S <<| x"
### theory "HOL-Library.Countable"
### 1.343s elapsed time, 4.770s cpu time, 0.993s GC time
Found termination order: "size <*mlex*> {}"
class pcpo = cpo +
  assumes "least": "EX x. ALL y. x << y"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class chfin = po +
  assumes "chfin": "!!Y. chain Y ==> EX n. max_in_chain n Y"
Found termination order: "size <*mlex*> {}"
class flat = pcpo +
  assumes "ax_flat": "!!x y. x << y ==> x = \<bottom> | x = y"
### theory "HOL-Library.Tree"
### 2.046s elapsed time, 6.693s cpu time, 1.183s GC time
Loading theory "Draft.Templates" (required by "Draft.KMPMoreTemplates" via "Draft.ExtrEqs")
class discrete_cpo = below +
  assumes "discrete_cpo": "!!x y. (x << y) = (x = y)"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.126s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.KMPMoreTemplates")
### theory "HOLCF.Pcpo"
### 0.804s elapsed time, 1.765s cpu time, 0.099s GC time
Loading theory "HOLCF.Cont" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun" via "HOLCF.Cpodef" via "HOLCF.Adm")
### theory "HOLCF.Cont"
### 0.159s elapsed time, 0.341s cpu time, 0.061s GC time
Loading theory "HOLCF.Adm" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun" via "HOLCF.Cpodef")
Loading theory "HOLCF.Discrete" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Ssum" via "HOLCF.Tr" via "HOLCF.Lift")
### theory "HOLCF.Adm"
### 0.084s elapsed time, 0.243s cpu time, 0.000s GC time
Loading theory "HOLCF.Cpodef" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun")
Loading theory "HOLCF.Fun_Cpo" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun")
instantiation
  fun :: (type, below) below
  below_fun == below :: ('a => 'b) => ('a => 'b) => bool
### theory "HOLCF.Fun_Cpo"
### 0.088s elapsed time, 0.338s cpu time, 0.081s GC time
Loading theory "HOLCF.Product_Cpo" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.560s elapsed time, 1.436s cpu time, 0.142s GC time
instantiation
  unit :: discrete_cpo
  below_unit == below :: unit => unit => bool
instantiation
  prod :: (below, below) below
  below_prod == below :: 'a * 'b => 'a * 'b => bool
### ML warning (line 143 of "~~/src/HOL/HOLCF/Tools/cpodef.ML"):
### Value identifier (name) has not been referenced.
signature CPODEF =
  sig
    val add_cpodef:
       binding * (string * sort) list * mixfix ->
         term ->
           Typedef.bindings option ->
             (Proof.context -> tactic) * (Proof.context -> tactic) ->
               theory -> (Typedef.info * cpo_info) * theory
    val add_pcpodef:
       binding * (string * sort) list * mixfix ->
         term ->
           Typedef.bindings option ->
             (Proof.context -> tactic) * (Proof.context -> tactic) ->
               theory -> (Typedef.info * cpo_info * pcpo_info) * theory
    val add_podef:
       binding * (string * sort) list * mixfix ->
         term ->
           Typedef.bindings option ->
             (Proof.context -> tactic) ->
               theory -> (Typedef.info * thm) * theory
    type cpo_info =
       {adm: thm,
        below_def: thm,
        compact: thm, cont_Abs: thm, cont_Rep: thm, lub: thm}
    val cpodef_proof:
       (binding * (string * sort) list * mixfix) * term *
       Typedef.bindings option
         -> theory -> Proof.state
    val cpodef_proof_cmd:
       (binding * (string * string option) list * mixfix) * string *
       Typedef.bindings option
         -> theory -> Proof.state
    type pcpo_info =
       {Abs_bottom_iff: thm,
        Abs_strict: thm, Rep_bottom_iff: thm, Rep_strict: thm}
    val pcpodef_proof:
       (binding * (string * sort) list * mixfix) * term *
       Typedef.bindings option
         -> theory -> Proof.state
    val pcpodef_proof_cmd:
       (binding * (string * string option) list * mixfix) * string *
       Typedef.bindings option
         -> theory -> Proof.state
  end
structure Cpodef: CPODEF
### theory "HOLCF.Cpodef"
### 0.200s elapsed time, 0.711s cpu time, 0.081s GC time
### theory "HOLCF.Product_Cpo"
### 0.125s elapsed time, 0.393s cpu time, 0.000s GC time
Loading theory "HOLCF.Cfun" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation")
instantiation
  discr :: (type) discrete_cpo
  below_discr == below :: 'a discr => 'a discr => bool
### theory "HOLCF.Discrete"
### 0.366s elapsed time, 1.160s cpu time, 0.141s GC time
### theory "HOLCF.Cfun"
### 0.353s elapsed time, 0.397s cpu time, 0.000s GC time
Loading theory "HOLCF.Completion" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal")
Loading theory "HOLCF.Cprod" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite")
Loading theory "HOLCF.Deflation" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions")
Loading theory "HOLCF.Fix" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Domain_Aux" via "HOLCF.Fixrec")
locale Completion.preorder
  fixes r :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 50)
  assumes "preorder (\<preceq>)"
consts
  iterate :: "nat => ('a -> 'a) -> 'a -> 'a"
locale deflation
  fixes d :: "'a -> 'a"
  assumes "deflation d"
### theory "HOLCF.Cprod"
### 0.038s elapsed time, 0.150s cpu time, 0.000s GC time
Loading theory "HOLCF.Sfun" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions")
locale finite_deflation
  fixes d :: "'a -> 'a"
  assumes "finite_deflation d"
locale ep_pair
  fixes e :: "'a -> 'b"
    and p :: "'b -> 'a"
  assumes "ep_pair e p"
### theory "HOLCF.Fix"
### 0.117s elapsed time, 0.461s cpu time, 0.058s GC time
Loading theory "HOLCF.Sprod" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions")
locale ideal_completion
  fixes r :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 50)
    and principal :: "'a => 'b"
    and rep :: "'b => 'a set"
  assumes "ideal_completion (\<preceq>) principal rep"
### theory "HOLCF.Sfun"
### 0.089s elapsed time, 0.347s cpu time, 0.058s GC time
Loading theory "HOLCF.Up" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Ssum" via "HOLCF.Tr" via "HOLCF.Lift")
locale pcpo_ep_pair
  fixes e :: "'a -> 'b"
    and p :: "'b -> 'a"
  assumes "pcpo_ep_pair e p"
### theory "HOLCF.Deflation"
### 0.172s elapsed time, 0.679s cpu time, 0.058s GC time
### theory "HOLCF.Completion"
### 0.214s elapsed time, 0.818s cpu time, 0.130s GC time
### theory "HOLCF.Sprod"
### 0.173s elapsed time, 0.513s cpu time, 0.072s GC time
consts
  Ifup :: "('a -> 'b) => 'a\<^sub>\<bottom> => 'b"
instantiation
  u :: (cpo) below
  below_u == below :: 'a\<^sub>\<bottom> => 'a\<^sub>\<bottom> => bool
### theory "HOLCF.Up"
### 0.375s elapsed time, 0.691s cpu time, 0.072s GC time
Loading theory "HOLCF.Lift" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Ssum" via "HOLCF.Tr")
Proofs for inductive predicate(s) "rec_set_lift"
### theory "HOLCF.Lift"
### 0.263s elapsed time, 0.315s cpu time, 0.067s GC time
Loading theory "HOLCF.One" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Domain_Aux" via "HOLCF.Fixrec")
Loading theory "HOLCF.Tr" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Ssum")
### theory "HOLCF.One"
### 0.057s elapsed time, 0.116s cpu time, 0.000s GC time
val split_If_tac = fn: Proof.context -> int -> tactic
### theory "HOLCF.Tr"
### 0.105s elapsed time, 0.162s cpu time, 0.000s GC time
Loading theory "HOLCF.Ssum" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions")
### theory "HOLCF.Ssum"
### 0.139s elapsed time, 0.177s cpu time, 0.054s GC time
Loading theory "HOLCF.Fixrec" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Domain_Aux")
Loading theory "HOLCF.Map_Functions" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite")
### theory "HOLCF.Map_Functions"
### 0.481s elapsed time, 0.977s cpu time, 0.037s GC time
Loading theory "HOLCF.Bifinite" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal")
### ML warning (file "~~/src/HOL/HOLCF/Tools/holcf_library.ML"):
### Pattern is not exhaustive.
structure HOLCF_Library:
  sig
    val -->> : typ list * typ -> typ
    val ->> : typ * typ -> typ
    val ` : term * term -> term
    val below_const: typ -> term
    val big_lambda: term -> term -> term
    val big_lambdas: term list -> term -> term
    val cabs_const: typ * typ -> term
    val capply_const: typ * typ -> term
    val dest_cfunT: typ -> typ * typ
    val dest_matchT: typ -> typ
    val dest_sprodT: typ -> typ * typ
    val dest_ssumT: typ -> typ * typ
    val dest_upT: typ -> typ
    val from_sinl: typ * typ -> term
    val from_sinr: typ * typ -> term
    val from_up: typ -> term
    val fup_const: typ * typ -> term
    val iterate_const: typ -> term
    val lambda_tuple: term list -> term -> term
    val lambdas: term list -> term -> term
    val list_ccomb: term * term list -> term
    val mk_ID: typ -> term
    val mk_adm: term -> term
    val mk_all: term * term -> term
    val mk_below: term * term -> term
    val mk_bottom: typ -> term
    val mk_cabs: term -> term
    val mk_capply: term * term -> term
    val mk_cfcomp: term * term -> term
    val mk_cfunT: typ * typ -> typ
    val mk_chain: term -> term
    val mk_compact: term -> term
    val mk_conj: term * term -> term
    val mk_cont: term -> term
    val mk_defined: term -> term
    val mk_disj: term * term -> term
    val mk_eq: term * term -> term
    val mk_equals: term * term -> term
    val mk_ex: term * term -> term
    val mk_fail: typ -> term
    val mk_fix: term -> term
    val mk_fst: term -> term
    val mk_fup: term -> term
    val mk_imp: term * term -> term
    val mk_iterate: term * term -> term
    val mk_lub: term -> term
    val mk_matchT: typ -> typ
    val mk_not: term -> term
    val mk_one_case: term -> term
    val mk_prodT: typ * typ -> typ
    val mk_sinjects: term list -> term list
    val mk_snd: term -> term
    val mk_spair: term * term -> term
    val mk_sprodT: typ * typ -> typ
    val mk_sscase: term * term -> term
    val mk_ssplit: term -> term
    val mk_ssumT: typ * typ -> typ
    val mk_strict: term -> term
    val mk_strictify: term -> term
    val mk_stuple: term list -> term
    val mk_succeed: term -> term
    val mk_trp: term -> term
    val mk_tuple: term list -> term
    val mk_tupleT: typ list -> typ
    val mk_undef: term -> term
    val mk_up: term -> term
    val mk_upT: typ -> typ
    val oneT: typ
    val one_case_const: typ -> term
    val sfst_const: typ * typ -> term
    val sinl_const: typ * typ -> term
    val sinr_const: typ * typ -> term
    val spair_const: typ * typ -> term
    val sscase_const: typ * typ * typ -> term
    val ssnd_const: typ * typ -> term
    val ssplit_const: typ * typ * typ -> term
    val succeed_const: typ -> term
    val trT: typ
    val up_const: typ -> term
  end
signature FIXREC =
  sig
    val add_fixrec:
       (binding * typ option * mixfix) list ->
         (bool * (Attrib.binding * term)) list ->
           local_theory -> local_theory
    val add_fixrec_cmd:
       (binding * string option * mixfix) list ->
         (bool * (Attrib.binding * string)) list ->
           local_theory -> local_theory
    val add_matchers: (string * string) list -> theory -> theory
    val fixrec_simp_tac: Proof.context -> int -> tactic
  end
structure Fixrec: FIXREC
### theory "HOLCF.Fixrec"
### 0.689s elapsed time, 1.422s cpu time, 0.103s GC time
Loading theory "HOLCF.Domain_Aux" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain")
locale approx_chain
  fixes approx :: "nat => 'a -> 'a"
  assumes "approx_chain approx"
locale iso
  fixes abs :: "'a -> 'b"
    and rep :: "'b -> 'a"
  assumes "Domain_Aux.iso abs rep"
class bifinite = pcpo +
  assumes "bifinite": "EX a. approx_chain a"
class profinite = cpo +
  assumes "profinite": "EX a. approx_chain a"
### theory "HOLCF.Bifinite"
### 0.922s elapsed time, 2.251s cpu time, 0.977s GC time
Loading theory "HOLCF.Universal" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic")
signature DOMAIN_TAKE_PROOFS =
  sig
    val add_deflation_thm: thm -> theory -> theory
    val add_lub_take_theorems:
       (binding * iso_info) list ->
         take_info -> thm list -> theory -> take_induct_info * theory
    val add_rec_type: string * bool list -> theory -> theory
    val define_take_functions:
       (binding * iso_info) list -> theory -> take_info * theory
    val get_deflation_thms: theory -> thm list
    val get_map_ID_thms: theory -> thm list
    val get_rec_tab: theory -> bool list Symtab.table
    type iso_info =
       {absT: typ,
        abs_const: term,
        abs_inverse: thm, repT: typ, rep_const: term, rep_inverse: thm}
    val map_ID_add: attribute
    val map_of_typ: theory -> (typ * term) list -> typ -> term
    type take_induct_info =
       {chain_take_thms: thm list,
        deflation_take_thms: thm list,
        finite_consts: term list,
        finite_defs: thm list,
        is_finite: bool,
        lub_take_thms: thm list,
        reach_thms: thm list,
        take_0_thms: thm list,
        take_Suc_thms: thm list,
        take_consts: term list,
        take_defs: thm list,
        take_induct_thms: thm list,
        take_lemma_thms: thm list, take_strict_thms: thm list}
    type take_info =
       {chain_take_thms: thm list,
        deflation_take_thms: thm list,
        finite_consts: term list,
        finite_defs: thm list,
        take_0_thms: thm list,
        take_Suc_thms: thm list,
        take_consts: term list,
        take_defs: thm list, take_strict_thms: thm list}
  end
structure Domain_Take_Proofs: DOMAIN_TAKE_PROOFS
signature CONT_CONSTS =
  sig
    val add_consts: (binding * typ * mixfix) list -> theory -> theory
    val add_consts_cmd: (binding * string * mixfix) list -> theory -> theory
  end
structure Cont_Consts: CONT_CONSTS
signature CONT_PROC =
  sig
    val all_cont_thms: term -> thm list
    val cont_proc: simproc
    val cont_tac: Proof.context -> int -> tactic
    val cont_thms: term -> thm list
    val is_lcf_term: term -> bool
    val setup: theory -> theory
  end
structure ContProc: CONT_PROC
Proofs for inductive predicate(s) "ubasis_le"
  Proving monotonicity ...
signature DOMAIN_CONSTRUCTORS =
  sig
    val add_domain_constructors:
       binding ->
         (binding * (bool * binding option * typ) list * mixfix) list ->
           Domain_Take_Proofs.iso_info -> theory -> constr_info * theory
    type constr_info =
       {cases: thm list,
        compacts: thm list,
        con_betas: thm list,
        con_rews: thm list,
        con_specs: (term * (bool * typ) list) list,
        dis_rews: thm list,
        dist_eqs: thm list,
        dist_les: thm list,
        exhaust: thm,
        injects: thm list,
        inverts: thm list,
        iso_info: Domain_Take_Proofs.iso_info,
        match_rews: thm list, nchotomy: thm, sel_rews: thm list}
  end
structure Domain_Constructors: DOMAIN_CONSTRUCTORS
signature DOMAIN_INDUCTION =
  sig
    val comp_theorems:
       binding list ->
         Domain_Take_Proofs.take_induct_info ->
           Domain_Constructors.constr_info list ->
             theory -> thm list * theory
    val quiet_mode: bool ref
    val trace_domain: bool ref
  end
structure Domain_Induction: DOMAIN_INDUCTION
### theory "HOLCF.Domain_Aux"
### 1.106s elapsed time, 2.619s cpu time, 0.989s GC time
instantiation
  udom :: below
  below_udom == below :: udom => udom => bool
instantiation
  compact_basis :: (pcpo) below
  below_compact_basis == below ::
    'a compact_basis => 'a compact_basis => bool
locale bifinite_approx_chain
  fixes approx :: "nat => 'a -> 'a"
  assumes "bifinite_approx_chain approx"
consts
  cb_take :: "nat => 'a compact_basis => 'a compact_basis"
locale bifinite_approx_chain
  fixes approx :: "nat => 'a -> 'a"
  assumes "bifinite_approx_chain approx"
### theory "HOLCF.Universal"
### 0.737s elapsed time, 1.162s cpu time, 0.105s GC time
Loading theory "HOLCF.Algebraic" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable")
Loading theory "HOLCF.Compact_Basis" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Powerdomains" via "HOLCF.ConvexPD" via "HOLCF.UpperPD")
instantiation
  fin_defl :: (bifinite) below
  below_fin_defl == below :: 'a fin_defl => 'a fin_defl => bool
### theory "HOLCF.Compact_Basis"
### 0.102s elapsed time, 0.230s cpu time, 0.052s GC time
Loading theory "HOLCF.LowerPD" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Powerdomains" via "HOLCF.ConvexPD")
Loading theory "HOLCF.UpperPD" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Powerdomains" via "HOLCF.ConvexPD")
instantiation
  defl :: (bifinite) below
  below_defl == below :: 'a defl => 'a defl => bool
instantiation
  upper_pd :: (bifinite) below
  below_upper_pd == below :: ('a)\<sharp> => ('a)\<sharp> => bool
instantiation
  lower_pd :: (bifinite) below
  below_lower_pd == below :: ('a)\<flat> => ('a)\<flat> => bool
### theory "HOLCF.Algebraic"
### 0.189s elapsed time, 0.498s cpu time, 0.052s GC time
Loading theory "HOLCF.Representable" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Domain")
class predomain_syn = cpo +
  fixes liftemb :: "'a\<^sub>\<bottom> -> udom\<^sub>\<bottom>"
    and liftprj :: "udom\<^sub>\<bottom> -> 'a\<^sub>\<bottom>"
    and liftdefl :: "'a itself => (udom\<^sub>\<bottom>) defl"
### theory "HOLCF.UpperPD"
### 0.254s elapsed time, 0.782s cpu time, 0.060s GC time
### theory "HOLCF.LowerPD"
### 0.264s elapsed time, 0.796s cpu time, 0.060s GC time
Loading theory "HOLCF.ConvexPD" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF" via "HOLCF.Powerdomains")
class predomain = predomain_syn +
  assumes "predomain_ep": "ep_pair liftemb liftprj"
  assumes "cast_liftdefl": "cast$(liftdefl TYPE('a)) = liftemb oo liftprj"
class domain = pcpo + predomain_syn +
  fixes emb :: "'a -> udom"
    and prj :: "udom -> 'a"
    and defl :: "'a itself => udom defl"
  assumes "ep_pair_emb_prj": "ep_pair emb prj"
  assumes "cast_DEFL": "cast$(defl TYPE('a)) = emb oo prj"
  assumes "liftemb_eq": "liftemb = u_map$emb"
  assumes "liftprj_eq": "liftprj = u_map$prj"
  assumes "liftdefl_eq": "LIFTDEFL('a) = liftdefl_of$(defl TYPE('a))"
instantiation
  convex_pd :: (bifinite) below
  below_convex_pd == below :: ('a)\<natural> => ('a)\<natural> => bool
### theory "HOLCF.ConvexPD"
### 0.442s elapsed time, 0.928s cpu time, 0.096s GC time
instantiation
  udom :: domain
  emb_udom == emb :: udom -> udom
  prj_udom == prj :: udom -> udom
  defl_udom == defl :: udom itself => udom defl
  liftemb_udom == liftemb :: udom\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_udom == liftprj :: udom\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftdefl_udom == liftdefl :: udom itself => (udom\<^sub>\<bottom>) defl
instantiation
  u :: (predomain) domain
  emb_u == emb :: 'a\<^sub>\<bottom> -> udom
  prj_u == prj :: udom -> 'a\<^sub>\<bottom>
  defl_u == defl :: ('a\<^sub>\<bottom>) itself => udom defl
  liftemb_u == liftemb ::
    ('a\<^sub>\<bottom>)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_u == liftprj ::
    udom\<^sub>\<bottom> -> ('a\<^sub>\<bottom>)\<^sub>\<bottom>
  liftdefl_u == liftdefl ::
    ('a\<^sub>\<bottom>) itself => (udom\<^sub>\<bottom>) defl
instantiation
  sfun :: (domain, domain) domain
  emb_sfun == emb :: ('a ->! 'b) -> udom
  prj_sfun == prj :: udom -> 'a ->! 'b
  defl_sfun == defl :: ('a ->! 'b) itself => udom defl
  liftemb_sfun == liftemb ::
    ('a ->! 'b)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_sfun == liftprj ::
    udom\<^sub>\<bottom> -> ('a ->! 'b)\<^sub>\<bottom>
  liftdefl_sfun == liftdefl ::
    ('a ->! 'b) itself => (udom\<^sub>\<bottom>) defl
instantiation
  cfun :: (predomain, domain) domain
  emb_cfun == emb :: ('a -> 'b) -> udom
  prj_cfun == prj :: udom -> 'a -> 'b
  defl_cfun == defl :: ('a -> 'b) itself => udom defl
  liftemb_cfun == liftemb ::
    ('a -> 'b)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_cfun == liftprj ::
    udom\<^sub>\<bottom> -> ('a -> 'b)\<^sub>\<bottom>
  liftdefl_cfun == liftdefl ::
    ('a -> 'b) itself => (udom\<^sub>\<bottom>) defl
instantiation
  sprod :: (domain, domain) domain
  emb_sprod == emb :: 'a ** 'b -> udom
  prj_sprod == prj :: udom -> 'a ** 'b
  defl_sprod == defl :: ('a ** 'b) itself => udom defl
  liftemb_sprod == liftemb ::
    ('a ** 'b)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_sprod == liftprj ::
    udom\<^sub>\<bottom> -> ('a ** 'b)\<^sub>\<bottom>
  liftdefl_sprod == liftdefl ::
    ('a ** 'b) itself => (udom\<^sub>\<bottom>) defl
instantiation
  prod :: (predomain, predomain) predomain
  liftemb_prod == liftemb ::
    ('a * 'b)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_prod == liftprj ::
    udom\<^sub>\<bottom> -> ('a * 'b)\<^sub>\<bottom>
  liftdefl_prod == liftdefl ::
    ('a * 'b) itself => (udom\<^sub>\<bottom>) defl
instantiation
  prod :: (domain, domain) domain
  emb_prod == emb :: 'a * 'b -> udom
  prj_prod == prj :: udom -> 'a * 'b
  defl_prod == defl :: ('a * 'b) itself => udom defl
instantiation
  unit :: domain
  emb_unit == emb :: unit -> udom
  prj_unit == prj :: udom -> unit
  defl_unit == defl :: unit itself => udom defl
  liftemb_unit == liftemb :: unit\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_unit == liftprj :: udom\<^sub>\<bottom> -> unit\<^sub>\<bottom>
  liftdefl_unit == liftdefl :: unit itself => (udom\<^sub>\<bottom>) defl
instantiation
  discr :: (countable) predomain
  liftemb_discr == liftemb ::
    'a discr\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_discr == liftprj ::
    udom\<^sub>\<bottom> -> 'a discr\<^sub>\<bottom>
  liftdefl_discr == liftdefl ::
    'a discr itself => (udom\<^sub>\<bottom>) defl
instantiation
  ssum :: (domain, domain) domain
  emb_ssum == emb :: 'a ++ 'b -> udom
  prj_ssum == prj :: udom -> 'a ++ 'b
  defl_ssum == defl :: ('a ++ 'b) itself => udom defl
  liftemb_ssum == liftemb ::
    ('a ++ 'b)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_ssum == liftprj ::
    udom\<^sub>\<bottom> -> ('a ++ 'b)\<^sub>\<bottom>
  liftdefl_ssum == liftdefl ::
    ('a ++ 'b) itself => (udom\<^sub>\<bottom>) defl
instantiation
  lift :: (countable) domain
  emb_lift == emb :: 'a lift -> udom
  prj_lift == prj :: udom -> 'a lift
  defl_lift == defl :: 'a lift itself => udom defl
  liftemb_lift == liftemb :: 'a lift\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_lift == liftprj :: udom\<^sub>\<bottom> -> 'a lift\<^sub>\<bottom>
  liftdefl_lift == liftdefl :: 'a lift itself => (udom\<^sub>\<bottom>) defl
### theory "HOLCF.Representable"
### 1.344s elapsed time, 2.226s cpu time, 0.190s GC time
Loading theory "HOLCF.Domain" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF")
signature DOMAINDEF =
  sig
    val add_domaindef:
       binding * (string * sort) list * mixfix ->
         term ->
           Typedef.bindings option ->
             theory ->
               (Typedef.info * Cpodef.cpo_info * Cpodef.pcpo_info *
                rep_info)
               *
               theory
    val domaindef_cmd:
       (binding * (string * string option) list * mixfix) * string *
       Typedef.bindings option
         -> theory -> theory
    type rep_info =
       {DEFL: thm,
        defl_def: thm,
        emb_def: thm,
        liftdefl_def: thm, liftemb_def: thm, liftprj_def: thm, prj_def: thm}
  end
structure Domaindef: DOMAINDEF
### ML warning (line 52 of "~~/src/HOL/HOLCF/Tools/Domain/domain_isomorphism.ML"):
### Value identifier (udomT) has not been referenced.
signature DOMAIN_ISOMORPHISM =
  sig
    val define_map_functions:
       (binding * Domain_Take_Proofs.iso_info) list ->
         theory ->
           {deflation_map_thms: thm list,
            map_apply_thms: thm list,
            map_consts: term list,
            map_cont_thm: thm, map_unfold_thms: thm list}
           *
           theory
    val domain_isomorphism:
       (string list * binding * mixfix * typ * (binding * binding) option)
       list
         ->
         theory ->
           (Domain_Take_Proofs.iso_info list *
            Domain_Take_Proofs.take_induct_info)
           *
           theory
    val domain_isomorphism_cmd:
       (string list * binding * mixfix * string * (binding * binding) option
       )
       list
         -> theory -> theory
  end
structure Domain_Isomorphism: DOMAIN_ISOMORPHISM
signature DOMAIN_AXIOMS =
  sig
    val add_axioms:
       (binding * mixfix * (typ * typ)) list ->
         theory ->
           (Domain_Take_Proofs.iso_info list *
            Domain_Take_Proofs.take_induct_info)
           *
           theory
    val axiomatize_isomorphism:
       binding * (typ * typ) ->
         theory -> Domain_Take_Proofs.iso_info * theory
    val axiomatize_lub_take: binding * term -> theory -> thm * theory
  end
structure Domain_Axioms: DOMAIN_AXIOMS
signature DOMAIN =
  sig
    val add_domain:
       ((string * sort) list * binding * mixfix *
        (binding * (bool * binding option * typ) list * mixfix) list
       )
       list
         -> theory -> theory
    val add_domain_cmd:
       ((string * string option) list * binding * mixfix *
        (binding * (bool * binding option * string) list * mixfix) list
       )
       list
         -> theory -> theory
    val add_new_domain:
       ((string * sort) list * binding * mixfix *
        (binding * (bool * binding option * typ) list * mixfix) list
       )
       list
         -> theory -> theory
    val add_new_domain_cmd:
       ((string * string option) list * binding * mixfix *
        (binding * (bool * binding option * string) list * mixfix) list
       )
       list
         -> theory -> theory
  end
structure Domain: DOMAIN
### theory "HOLCF.Domain"
### 0.652s elapsed time, 0.694s cpu time, 0.061s GC time
Loading theory "HOLCF.Powerdomains" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main" via "HOLCF")
instantiation
  upper_pd :: (domain) domain
  emb_upper_pd == emb :: ('a)\<sharp> -> udom
  prj_upper_pd == prj :: udom -> ('a)\<sharp>
  defl_upper_pd == defl :: ('a)\<sharp> itself => udom defl
  liftemb_upper_pd == liftemb ::
    ('a)\<sharp>\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_upper_pd == liftprj ::
    udom\<^sub>\<bottom> -> ('a)\<sharp>\<^sub>\<bottom>
  liftdefl_upper_pd == liftdefl ::
    ('a)\<sharp> itself => (udom\<^sub>\<bottom>) defl
instantiation
  lower_pd :: (domain) domain
  emb_lower_pd == emb :: ('a)\<flat> -> udom
  prj_lower_pd == prj :: udom -> ('a)\<flat>
  defl_lower_pd == defl :: ('a)\<flat> itself => udom defl
  liftemb_lower_pd == liftemb ::
    ('a)\<flat>\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_lower_pd == liftprj ::
    udom\<^sub>\<bottom> -> ('a)\<flat>\<^sub>\<bottom>
  liftdefl_lower_pd == liftdefl ::
    ('a)\<flat> itself => (udom\<^sub>\<bottom>) defl
instantiation
  convex_pd :: (domain) domain
  emb_convex_pd == emb :: ('a)\<natural> -> udom
  prj_convex_pd == prj :: udom -> ('a)\<natural>
  defl_convex_pd == defl :: ('a)\<natural> itself => udom defl
  liftemb_convex_pd == liftemb ::
    ('a)\<natural>\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_convex_pd == liftprj ::
    udom\<^sub>\<bottom> -> ('a)\<natural>\<^sub>\<bottom>
  liftdefl_convex_pd == liftdefl ::
    ('a)\<natural> itself => (udom\<^sub>\<bottom>) defl
### theory "HOLCF.Powerdomains"
### 0.444s elapsed time, 0.452s cpu time, 0.013s GC time
Loading theory "HOLCF" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main")
### theory "HOLCF"
### 0.022s elapsed time, 0.022s cpu time, 0.000s GC time
Loading theory "HOLCF-Library.Int_Discrete" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude" via "HOLCF-Prelude.HOLCF_Main")
instantiation
  int :: discrete_cpo
  below_int == below :: int => int => bool
instantiation
  int :: predomain
  liftemb_int == liftemb :: int\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_int == liftprj :: udom\<^sub>\<bottom> -> int\<^sub>\<bottom>
  liftdefl_int == liftdefl :: int itself => (udom\<^sub>\<bottom>) defl
### theory "HOLCF-Library.Int_Discrete"
### 0.065s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "HOLCF-Prelude.HOLCF_Main" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude")
### theory "HOLCF-Prelude.HOLCF_Main"
### 0.794s elapsed time, 0.874s cpu time, 0.117s GC time
Loading theory "HOLCF-Prelude.Data_Function" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude")
Loading theory "HOLCF-Prelude.Numeral_Cpo" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude")
Loading theory "HOLCF-Prelude.Type_Classes" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude")
class Eq = domain +
  fixes eq :: "'a -> 'a -> tr"
### theory "HOLCF-Prelude.Data_Function"
### 0.085s elapsed time, 0.251s cpu time, 0.000s GC time
class plus_cpo = plus + cpo +
  assumes "cont_plus1": "!!y. cont (%x. x + y)"
  assumes "cont_plus2": "!!x. cont ((+) x)"
### Ambiguous input (line 13 of "$AFP/HOLCF-Prelude/Numeral_Cpo.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>Groups.plus_class.plus")
###   ("_Lambda" ("_cargs" ("_position" x) ("_position" y))
###     ("\<^const>Groups.plus_class.plus" ("_position" x) ("_position" y))))
### ("\<^const>Pure.eq" ("\<^fixed>plus_section")
###   ("_Lambda" ("_cargs" ("_position" x) ("_position" y))
###     ("\<^const>Groups.plus_class.plus" ("_position" x) ("_position" y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class Eq_strict = Eq +
  assumes
    "eq_strict": "!!x. eq$x$\<bottom> = \<bottom>"
      "!!y. eq$\<bottom>$y = \<bottom>"
class Eq_sym = Eq_strict +
  assumes "eq_sym": "!!x y. eq$x$y = eq$y$x"
class minus_cpo = minus + cpo +
  assumes "cont_minus1": "!!y. cont (%x. x - y)"
  assumes "cont_minus2": "!!x. cont ((-) x)"
### Ambiguous input (line 29 of "$AFP/HOLCF-Prelude/Numeral_Cpo.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^const>Groups.minus_class.minus")
###   ("_Lambda" ("_cargs" ("_position" x) ("_position" y))
###     ("\<^const>Groups.minus_class.minus" ("_position" x) ("_position" y))))
### ("\<^const>Pure.eq" ("\<^fixed>minus_section")
###   ("_Lambda" ("_cargs" ("_position" x) ("_position" y))
###     ("\<^const>Groups.minus_class.minus" ("_position" x) ("_position" y))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class Eq_equiv = Eq_sym +
  assumes "eq_self_neq_FF": "!!x. eq$x$x ~= FF"
    and
    "eq_trans": "!!x y z. [| eq$x$y = TT; eq$y$z = TT |] ==> eq$x$z = TT"
class Eq_eq = Eq_sym +
  assumes "eq_self_neq_FF'": "!!x. eq$x$x ~= FF"
    and "eq_TT_dest": "!!x y. eq$x$y = TT ==> x = y"
class times_cpo = times + cpo +
  assumes "cont_times1": "!!y. cont (%x. x * y)"
  assumes "cont_times2": "!!x. cont ((*) x)"
instantiation
  u :: ({zero,cpo}) zero
  zero_u == zero_class.zero :: 'a\<^sub>\<bottom>
instantiation
  u :: ({one,cpo}) one
  one_u == one_class.one :: 'a\<^sub>\<bottom>
instantiation
  u :: (plus_cpo) plus
  plus_u == plus ::
    'a\<^sub>\<bottom> => 'a\<^sub>\<bottom> => 'a\<^sub>\<bottom>
instantiation
  u :: (minus_cpo) minus
  minus_u == minus ::
    'a\<^sub>\<bottom> => 'a\<^sub>\<bottom> => 'a\<^sub>\<bottom>
instantiation
  u :: (times_cpo) times
  times_u == times ::
    'a\<^sub>\<bottom> => 'a\<^sub>\<bottom> => 'a\<^sub>\<bottom>
### theory "HOLCF-Prelude.Numeral_Cpo"
### 0.384s elapsed time, 0.865s cpu time, 0.026s GC time
instantiation
  lift :: (countable) Eq_eq
  eq_lift == eq :: 'a lift -> 'a lift -> tr
Proving isomorphism properties of domain Ordering ...
Proving induction properties of domain Ordering ...
Proving finiteness rule for domain Ordering ...
class Ord = Eq +
  fixes compare :: "'a -> 'a -> Ordering"
class Ord_strict = Ord +
  assumes
    "compare_strict": "!!y. compare$\<bottom>$y = \<bottom>"
      "!!x. compare$x$\<bottom> = \<bottom>"
class Ord_linear = Ord_strict +
  assumes "eq_conv_compare": "!!x y. eq$x$y = is_EQ$(compare$x$y)"
    and
    "oppOrdering_compare": "!!x y. oppOrdering$(compare$x$y) = compare$y$x"
    and "compare_EQ_dest": "!!x y. compare$x$y = EQ ==> x = y"
    and "compare_self_below_EQ": "!!x. compare$x$x << EQ"
    and
    "compare_LT_trans":
      "!!x y z.
          [| compare$x$y = LT; compare$y$z = LT |] ==> compare$x$z = LT"
instantiation
  lift :: ({countable,linorder}) Ord_linear
  compare_lift == compare :: 'a lift -> 'a lift -> Ordering
### theory "HOLCF-Prelude.Type_Classes"
### 1.023s elapsed time, 1.525s cpu time, 0.052s GC time
Loading theory "HOLCF-Prelude.Data_Bool" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude")
### theory "HOLCF-Prelude.Data_Bool"
### 0.048s elapsed time, 0.058s cpu time, 0.000s GC time
Loading theory "HOLCF-Prelude.Data_Integer" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude")
Loading theory "HOLCF-Prelude.Data_Tuple" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude")
Proving isomorphism properties of domain Unit ...
Proving induction properties of domain Unit ...
Proving finiteness rule for domain Unit ...
Proving isomorphism properties of domain Integer ...
Proving induction properties of domain Integer ...
Proving finiteness rule for domain Integer ...
instantiation
  Integer :: {minus,one,plus,times,uminus,zero}
  zero_Integer == zero_class.zero :: Integer
  uminus_Integer == uminus :: Integer => Integer
  times_Integer == times :: Integer => Integer => Integer
  plus_Integer == plus :: Integer => Integer => Integer
  one_Integer == one_class.one :: Integer
  minus_Integer == minus :: Integer => Integer => Integer
Proving isomorphism properties of domain Tuple2 ...
instantiation
  Integer :: Ord_linear
  compare_Integer == compare :: Integer -> Integer -> Ordering
  eq_Integer == eq :: Integer -> Integer -> tr
Proving induction properties of domain Tuple2 ...
Proving finiteness rule for domain Tuple2 ...
### theory "HOLCF-Prelude.Data_Integer"
### 0.542s elapsed time, 1.110s cpu time, 0.079s GC time
Proving isomorphism properties of domain Tuple3 ...
Proving induction properties of domain Tuple3 ...
Proving finiteness rule for domain Tuple3 ...
instantiation
  \<langle>\<rangle> :: Ord_linear
  compare_Unit == compare ::
    \<langle>\<rangle> -> \<langle>\<rangle> -> Ordering
  eq_Unit == eq :: \<langle>\<rangle> -> \<langle>\<rangle> -> tr
instantiation
  Tuple2 :: (Eq, Eq) Eq_strict
  eq_Tuple2 == eq ::
    \<langle>'a, 'b\<rangle> -> \<langle>'a, 'b\<rangle> -> tr
instantiation
  Tuple2 :: (Ord, Ord) Ord_strict
  compare_Tuple2 == compare ::
    \<langle>'a, 'b\<rangle> -> \<langle>'a, 'b\<rangle> -> Ordering
instantiation
  Tuple3 :: (Eq, Eq, Eq) Eq_strict
  eq_Tuple3 == eq ::
    \<langle>'a, 'b, 'c\<rangle> -> \<langle>'a, 'b, 'c\<rangle> -> tr
instantiation
  Tuple3 :: (Ord, Ord, Ord) Ord_strict
  compare_Tuple3 == compare ::
    \<langle>'a, 'b, 'c\<rangle> -> \<langle>'a, 'b, 'c\<rangle> -> Ordering
### theory "HOLCF-Prelude.Data_Tuple"
### 0.916s elapsed time, 1.514s cpu time, 0.109s GC time
Loading theory "HOLCF-Prelude.Data_List" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude")
Proving isomorphism properties of domain list ...
Proving induction properties of domain list ...
instantiation
  list :: (Eq) Eq_strict
  eq_list == eq :: ['a] -> ['a] -> tr
instantiation
  list :: (Ord) Ord_strict
  compare_list == compare :: ['a] -> ['a] -> Ordering
### Ambiguous input (line 272 of "$AFP/HOLCF-Prelude/Data_List.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" reverse)
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###         ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###           ("_Cons_section")))
###       ("\<^const>Data_List.list.Nil_cont_syntax"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" reverse)
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###         ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###           ("\<^const>Data_List.list.Cons_cont_syntax")))
###       ("\<^const>Data_List.list.Nil_cont_syntax"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class Enum = domain +
  fixes toEnum :: "Integer -> 'a"
    and fromEnum :: "'a -> Integer"
instantiation
  Integer :: Enum
  toEnum_Integer == toEnum :: Integer -> Integer
  fromEnum_Integer == fromEnum :: Integer -> Integer
Proofs for inductive predicate(s) "finite_list"
  Proving monotonicity ...
Proofs for inductive predicate(s) "listmem"
  Proving monotonicity ...
Proofs for inductive predicate(s) "distinct"
  Proving monotonicity ...
### Ambiguous input (line 595 of "$AFP/HOLCF-Prelude/Data_List.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldr)
###           ("\<^const>Data_List.list.Cons_cont_syntax"))
###         ("\<^const>Data_List.list.Nil_cont_syntax"))
###       ("_position" xs))
###     ("_position" xs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldr)
###           ("_Cons_section"))
###         ("\<^const>Data_List.list.Nil_cont_syntax"))
###       ("_position" xs))
###     ("_position" xs)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1519 of "$AFP/HOLCF-Prelude/Data_List.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###           ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###             ("_Cons_section")))
###         ("_position" ys))
###       ("_position" xs))
###     ("\<^const>Data_List.append_syn"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun"
###           ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###             ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###               ("_Cons_section")))
###           ("\<^const>Data_List.list.Nil_cont_syntax"))
###         ("_position" xs))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###           ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###             ("\<^const>Data_List.list.Cons_cont_syntax")))
###         ("_position" ys))
###       ("_position" xs))
###     ("\<^const>Data_List.append_syn"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun"
###           ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###             ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###               ("_Cons_section")))
###           ("\<^const>Data_List.list.Nil_cont_syntax"))
###         ("_position" xs))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###           ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###             ("_Cons_section")))
###         ("_position" ys))
###       ("_position" xs))
###     ("\<^const>Data_List.append_syn"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun"
###           ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###             ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###               ("\<^const>Data_List.list.Cons_cont_syntax")))
###           ("\<^const>Data_List.list.Nil_cont_syntax"))
###         ("_position" xs))
###       ("_position" ys))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Cfun.cfun.Rep_cfun"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###           ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###             ("\<^const>Data_List.list.Cons_cont_syntax")))
###         ("_position" ys))
###       ("_position" xs))
###     ("\<^const>Data_List.append_syn"
###       ("\<^const>Cfun.cfun.Rep_cfun"
###         ("\<^const>Cfun.cfun.Rep_cfun"
###           ("\<^const>Cfun.cfun.Rep_cfun" ("_position" foldl)
###             ("\<^const>Cfun.cfun.Rep_cfun" ("_position" flip)
###               ("\<^const>Data_List.list.Cons_cont_syntax")))
###           ("\<^const>Data_List.list.Nil_cont_syntax"))
###         ("_position" xs))
###       ("_position" ys))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOLCF-Prelude.Data_List"
### 2.809s elapsed time, 2.992s cpu time, 0.262s GC time
Loading theory "HOLCF-Prelude.Data_Maybe" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT" via "HOLCF-Prelude.HOLCF_Prelude")
Proving isomorphism properties of domain Maybe ...
Proving induction properties of domain Maybe ...
Proving finiteness rule for domain Maybe ...
instantiation
  Maybe :: (Eq) Eq_strict
  eq_Maybe == eq :: 'a Maybe -> 'a Maybe -> tr
instantiation
  Maybe :: (Ord) Ord_strict
  compare_Maybe == compare :: 'a Maybe -> 'a Maybe -> Ordering
### theory "HOLCF-Prelude.Data_Maybe"
### 0.895s elapsed time, 1.947s cpu time, 1.420s GC time
Loading theory "HOLCF-Prelude.HOLCF_Prelude" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists" via "Draft.HOLCF_ROOT")
### theory "HOLCF-Prelude.HOLCF_Prelude"
### 0.031s elapsed time, 0.050s cpu time, 0.018s GC time
Loading theory "Draft.HOLCF_ROOT" (required by "Draft.KMPMoreTemplates" via "Draft.KMP" via "Draft.Theory_Of_Lists")
class Eq_def = Eq_eq +
  assumes
    "eq_defined":
      "!!x y. [| x ~= \<bottom>; y ~= \<bottom> |] ==> eq$x$y ~= \<bottom>"
### theory "Draft.HOLCF_ROOT"
### 0.220s elapsed time, 0.220s cpu time, 0.000s GC time
Loading theory "Draft.Theory_Of_Lists" (required by "Draft.KMPMoreTemplates" via "Draft.KMP")
Proving isomorphism properties of domain slist ...
Proving induction properties of domain slist ...
Proving finiteness rule for domain slist ...
instantiation
  slist :: (Eq) Eq_strict
  eq_slist == eq :: [:'a:] -> [:'a:] -> tr
Proofs for inductive predicate(s) "slistmem"
  Proving monotonicity ...
### theory "Draft.Theory_Of_Lists"
### 1.610s elapsed time, 1.734s cpu time, 0.176s GC time
Loading theory "Draft.KMP" (required by "Draft.KMPMoreTemplates")
Proving isomorphism properties of domain tree ...
Proving induction properties of domain tree ...
### Cannot skip proof of schematic goal statement
Proofs for coinductive predicate(s) "K"
  Proving monotonicity ...
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
Proofs for inductive predicate(s) "root_bisim"
  Proving monotonicity ...
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "Draft.KMP"
### 5.570s elapsed time, 7.193s cpu time, 2.248s GC time
Loading theory "Draft.KMPMoreTemplates"
val templateLemmas =
   [("KMP.tree_bisim_root_bisim", "tree_bisim (root_bisim ?pat)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("KMP.tree_map'_ID'", "tree_map'$ID$?xs = ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("KMP.tree_map'_strict", "tree_map'$?f$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.op2_rep2_left2_right2_strict", "rep2$?pat$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.left6_left5_strict", "left5$?pat$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.left6_left5_strict", "left6$?pat$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.next_strict", "next$?xs$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("KMP.next'_strict", "next'$?x$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("KMP.op2_rep2_left2_right2_strict", "op2$?pat$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.op5_grep5_strict", "op5$?pat$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.op6_grep6_strict", "op6$?pat$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.root8_op8_grep8_strict", "op8$?pat$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.op_strict", "op$?pat$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.op'_strict", "op'$?pat$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.endswith_strict", "endswith$?pat$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.split_strict", "split$?pat$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.matches_strict", "matches$?pat$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.deflation_tree_map", "deflation ?a ==> deflation (tree_map$?a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("KMP.op2_rep2_left2_right2_strict",
     "left2$?pat$(\<bottom>, ?vs) = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("KMP.op2_rep2_left2_right2_strict",
     "left2$?pat$(?us, \<bottom>) = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("KMP.op2_rep2_left2_right2_strict",
     "right2$?pat$(?us, \<bottom>) = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("KMP.op5_grep5_strict", "grep5$?pat$?l$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.op6_grep6_strict", "grep6$?pat$?l$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.root8_op8_grep8_strict", "grep8$?pat$?l$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.op_strict", "op$?pat$(?us, \<bottom>) = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("KMP.op'_strict", "op'$?pat$(?us, \<bottom>) = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("KMP.abs_rep2_ID", "abs2 oo rep2$?pat = ID",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_hole 3)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("KMP.op_strict", "op$?pat$?usvs$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.op'_strict", "op'$?pat$?usvs$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("KMP.abs_rep2_ID'", "abs2$(rep2$?pat$?usvs) = ?usvs",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)),
       template_var 0)),
    ("KMP.K_root2", "?pat ~= \<bottom> ==> K (root2$?pat)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("KMP.isodefl_tree",
     "isodefl ?fa ?da ==> isodefl (tree_map$?fa) (tree_defl$?da)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("KMP.r7_6", "?pat ~= \<bottom> ==> root7$?pat = root6$?pat",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 0),
           template_var 0)))),
    ("KMP.next_Null", "?xs ~= \<bottom> ==> next$?xs$Null = Null",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_hole 0),
         template_hole 0))),
    ("KMP.root_bisim_root",
     "?pat ~= \<bottom> ==> root_bisim ?pat (root6$?pat) (root5$?pat)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_hole 0),
               template_var 0))
           ))),
    ("KMP.split_bottom_iff",
     "(split$?pat$?xs = \<bottom>) = (?pat = \<bottom> | ?xs = \<bottom>)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 1)),
           template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("KMP.op2_rep2_left2_right2_strict",
     "op2$?pat$(KMP.tree.Node$?usvs$?l$?r)$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_var 2)),
                   template_var 1)),
               template_var 0))),
         template_hole 1),
       template_hole 0)),
    ("KMP.op5_grep5_strict",
     "op5$?pat$(KMP.tree.Node$?usvs$?l$?r)$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_var 2)),
                   template_var 1)),
               template_var 0))),
         template_hole 1),
       template_hole 0)),
    ("KMP.op6_grep6_strict",
     "op6$?pat$(KMP.tree.Node$?usvs$?l$?r)$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_var 2)),
                   template_var 1)),
               template_var 0))),
         template_hole 1),
       template_hole 0)),
    ("KMP.op2_rep2_left2_right2_strict",
     "op2$?pat$(KMP.tree.Node$(?us, \<bottom>)$?l$?r) = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_var 3)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_hole 1))),
               template_var 1)),
           template_var 0)),
       template_hole 0)),
    ("KMP.op5_grep5_strict",
     "op5$?pat$(KMP.tree.Node$(?us, \<bottom>)$?l$?r) = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_var 3)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_hole 1))),
               template_var 1)),
           template_var 0)),
       template_hole 0)),
    ("KMP.op6_grep6_strict",
     "op6$?pat$(KMP.tree.Node$(?us, \<bottom>)$?l$?r) = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_var 3)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_hole 1))),
               template_var 1)),
           template_var 0)),
       template_hole 0)),
    ("KMP.r6_5", "(root6$?pat, op6$?pat) = (root5$?pat, op5$?pat)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_hole 0),
           template_var 0)))),
    ("KMP.op'_op", "op'$?pat$?usvs$?x = op$?pat$?usvs$?x",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 0),
                 template_var 2)),
             template_var 1)),
         template_var 0))),
    ("KMP.split_snil",
     "?pat ~= \<bottom> ==> split$?pat$[::] = ([::], ?pat)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0)),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_hole 1),
           template_var 0)))),
    ("KMP.endswith_split", "endswith$?pat = snull oo csnd oo split$?pat",
     template_equation
      (template_app
        (template_app (template_hole 12, template_hole 11), template_var 0),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_hole 7)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("KMP.next'_strict",
     "next'$\<bottom>$(KMP.tree.Node$(?v :# ?vs)$?l$?r) = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_hole 7)),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_var 3)),
                     template_var 2))),
               template_var 1)),
           template_var 0)),
       template_hole 0)),
    ("KMP.next_strict",
     "next$(?x :# ?xs)$(KMP.tree.Node$(?us, \<bottom>)$?l$?r) = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 4)),
               template_var 3))),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_hole 1))),
               template_var 1)),
           template_var 0)),
       template_hole 0)),
    ("KMP.sfoldl_op'_strict",
     "op'$?pat$(sfoldl$(op'$?pat)$(?us, \<bottom>)$?xs)$?x = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_app
                        (template_app (template_hole 8, template_hole 7),
                         template_var 3))),
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_hole 1))),
               template_var 1))),
         template_var 0),
       template_hole 0)),
    ("KMP.root5_left5",
     "?v ~= \<bottom> ==> root5$?pat = left5$?pat$[:?v:]",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_hole 6), template_var 0),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1)),
             template_hole 0))))),
    ("KMP.split_sfoldl_op",
     "?pat ~= \<bottom> ==> sfoldl$(op$?pat)$([::], ?pat) = split$?pat",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 0))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("KMP.endswith_eq_sdrop",
     "endswith$?pat$?xs =
      eq$?pat$(Theory_Of_Lists.sdrop$(slength$?xs - slength$?pat)$?xs)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 6),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)))),
           template_var 0)))),
    ("KMP.match_Null_match_Node_tree_case",
     "match_Null$?t$?k1.0 +++ match_Node$?t$?k2.0 =
      tree_case$?k1.0$?k2.0$?t",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_var 2)),
               template_var 1))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 2)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0)),
         template_var 2))),
    ("KMP.K_rep2",
     "[| ?pat ~= \<bottom>; ?us :@ ?vs = ?pat |]
      ==> K (rep2$?pat$(?us, ?vs))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 8)),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1)),
            template_var 0),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("KMP.tree_map'_comp",
     "?f$\<bottom> = \<bottom> ==>
      tree_map'$?f oo tree_map'$?g = tree_map'$(?f oo ?g)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 15, template_var 1),
            template_hole 14),
          template_hole 13)],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 1))),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0))))),
    ("KMP.split_pattern",
     "[| ?xs ~= \<bottom>; split$?pat$?xs = (?us, ?vs) |]
      ==> ?us :@ ?vs = ?pat",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 8)),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 2)),
            template_var 3),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0),
         template_var 2))),
    ("KMP.split_snoc_op",
     "split$?pat$(?xs :@ [:?x:]) = op$?pat$(split$?pat$?xs)$?x",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_hole 10),
             template_var 2)),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_var 1)),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 0)),
             template_hole 4))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_hole 10),
                   template_var 2)),
               template_var 1))),
         template_var 0))),
    ("KMP.tree_take_smaller",
     "[| tree_take ?i$?t = tree_take ?i$?u; ?j <= ?i |]
      ==> tree_take ?j$?t = tree_take ?j$?u",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 3)),
            template_var 2),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 3)),
            template_var 1)),
        template_inequation (less_equals, template_var 0, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1)))),
    ("KMP.root_bisim_next_left",
     "?pat ~= \<bottom> ==>
      root_bisim ?pat (next$?vs$(left6$?pat$?us))
       (next$?vs$(left5$?pat$?us))",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 8))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, template_var 2),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 2)),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 0),
                     template_var 2)),
                 template_var 0)))
           ))),
    ("KMP.tree_map'_comp'",
     "?f$\<bottom> = \<bottom> ==>
      tree_map'$?f$(tree_map'$?g$?t) = tree_map'$(?f oo ?g)$?t",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 15, template_var 2),
            template_hole 14),
          template_hole 13)],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_var 2)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 2)),
                 template_var 1))),
           template_var 0)))),
    ("KMP.sfoldl_op2_root2_rep2_split",
     "?pat ~= \<bottom> ==>
      sfoldl$(op2$?pat)$(root2$?pat)$?xs = rep2$?pat$(split$?pat$?xs)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 14))],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_var 1))),
               template_app
                (template_app (template_hole 12, template_hole 6),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0))))),
    ("KMP.op_induct'",
     "(!!us. (!!us'. lt$(slength$us')$(slength$us) = TT ==> ?P us') ==>
             ?P us) ==>
      ?P ?us",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("KMP.r7_6",
     "[| ?pat ~= \<bottom>; ?x ~= \<bottom> |]
      ==> op7$?pat$?t$?x = op6$?pat$?t$?x",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 8)),
        template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2)),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 0),
                   template_var 2)),
               template_var 0)),
           template_var 1)))),
    ("KMP.root_bisim_op",
     "[| ?pat ~= \<bottom>; root_bisim ?pat ?t6.0 ?t5.0 |]
      ==> root_bisim ?pat (op6$?pat$?t6.0$?x) (op5$?pat$?t5.0$?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_var 3)),
                     template_var 2)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 0),
                       template_var 3)),
                   template_var 1)),
               template_var 0))
           ))),
    ("KMP.op_op2_refinement",
     "?pat ~= \<bottom> ==>
      rep2$?pat$(op$?pat$?usvs$?x) = op2$?pat$(rep2$?pat$?usvs)$?x",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 12))],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_var 2)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_var 2)),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_var 2)),
                 template_var 1))),
           template_var 0)))),
    ("KMP.next_snil",
     "?xs ~= \<bottom> ==>
      next$?xs$(KMP.tree.Node$(?us, [::])$?l$?r) =
      KMP.tree.Node$(?us, [::])$?l$?r",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 9))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 3)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_hole 0))),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0))),
               template_var 1)),
           template_var 0)))),
    ("KMP.split_length_lt",
     "[| ?pat ~= \<bottom>; ?xs ~= \<bottom> |]
      ==> lt$(slength$(prod.fst (split$?pat$?xs)))$(slength$?xs + 1) = TT",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 13)),
        template_negation
         (template_equation (template_var 0, template_hole 13))],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_hole 9),
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_var 1)),
                     template_var 0))))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 0)),
             template_hole 1)),
         template_hole 0))),
    ("KMP.tree_injects'",
     "(KMP.tree.Node$?a$?l$?r = KMP.tree.Node$?a'$?l'$?r') =
      (?a = ?a' & (?a ~= \<bottom> --> ?l = ?l' & ?r = ?r'))",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 5)),
               template_var 4)),
           template_var 3),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 2)),
               template_var 1)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_hole 0))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 9, template_var 4),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 9, template_var 3),
                   template_var 0))))
           ))),
    ("KMP.tree_case_distr",
     "tree_case$?g'$?h'$?t$?z =
      (case ?t of Null => ?g'$?z | KMP.tree.Node$x$l$r => ?h'$x$l$r$?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 13,
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_var 3)),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app (template_hole 13, template_var 3),
                   template_var 0))),
             template_app (template_hole 4, t_empty))),
         template_var 1))),
    ("KMP.tree_map_unfold",
     "tree_map$?a =
      tree_abs oo
      ssum_map$ID$
      (sprod_map$?a$
       (sprod_map$(u_map$(tree_map$?a))$(u_map$(tree_map$?a)))) oo
      tree_rep",
     template_equation
      (template_app
        (template_app (template_hole 21, template_hole 20), template_var 0),
       template_app
        (template_app
          (template_hole 19,
           template_app
            (template_app (template_hole 18, template_hole 17),
             template_hole 16)),
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app (template_hole 14, template_hole 13),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_hole 10),
                     template_hole 9)),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_var 0)),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_app
                          (template_app (template_hole 2, template_hole 1),
                           template_app
                            (template_app
                              (template_hole 21, template_hole 20),
                             template_var 0)))),
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_app
                        (template_app (template_hole 21, template_hole 20),
                         template_var 0))))))),
           template_hole 0)))),
    ("KMP.op_induct",
     "(!!usvs.
          (!!usvs'.
              lt$(slength$(cfst$usvs'))$(slength$(cfst$usvs)) = TT ==>
              ?P usvs') ==>
          ?P usvs) ==>
      ?P ?usvs",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("KMP.split_snoc",
     "split$?pat$(?xs :@ [:?x:]) =
      split$?pat$(cfst$(split$?pat$?xs) :@ [:?x:])",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_var 2)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 1)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 0)),
             template_hole 3))),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_var 2)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0)),
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_var 2)),
                   template_var 1)))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 5, template_hole 4),
                 template_var 0)),
             template_hole 3))))),
    ("KMP.tree_map'_strict_scons",
     "?f$\<bottom> = \<bottom> ==>
      tree_map'$?f$(KMP.tree.Node$?a$?l$?r) =
      KMP.tree.Node$(?f$?a)$(tree_map'$?f$?l)$(tree_map'$?f$?r)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 14, template_var 3),
            template_hole 13),
          template_hole 12)],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_var 3)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_var 2)),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_app
                    (template_app (template_hole 14, template_var 3),
                     template_var 2))),
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_var 3)),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_var 3)),
             template_var 0))))),
    ("KMP.next'_next",
     "[| ?v ~= \<bottom>; ?vs ~= \<bottom> |]
      ==> next'$?v$(tree_map'$csnd$?t) =
          tree_map'$csnd$(next$(?v :# ?vs)$?t)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 17)),
        template_negation
         (template_equation (template_var 1, template_hole 15))],
       template_equation
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app (template_hole 12, template_hole 11),
               template_var 2)),
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_hole 8),
                 template_app (template_hole 7, template_hole 6))),
             template_var 0)),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app (template_hole 7, template_hole 6))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 2)),
                   template_var 1))),
             template_var 0))))),
    ("KMP.op5_left5",
     "[| ?us ~= \<bottom>; ?v ~= \<bottom> |]
      ==> op5$?pat$(left5$?pat$?us)$?v = left5$?pat$(?us :@ [:?v:])",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 16)),
        template_negation
         (template_equation (template_var 1, template_hole 14))],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_var 0)),
                 template_var 2))),
           template_var 1),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)),
               template_hole 0)))))),
    ("KMP.op6_left6",
     "[| ?us ~= \<bottom>; ?v ~= \<bottom> |]
      ==> op6$?pat$(left6$?pat$?us)$?v = left6$?pat$(?us :@ [:?v:])",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 16)),
        template_negation
         (template_equation (template_var 1, template_hole 14))],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_var 0)),
                 template_var 2))),
           template_var 1),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)),
               template_hole 0)))))),
    ("KMP.rep2_snoc_right2",
     "prefix$[:?x:]$?vs = TT ==>
      rep2$?pat$(?us :@ [:?x:], stail$?vs) = right2$?pat$(?us, ?vs)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 16,
              template_app
               (template_app (template_hole 15, template_hole 14),
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_hole 11),
                      template_var 3)),
                  template_hole 10))),
            template_var 2),
          template_hole 9)],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_app (template_hole 12, template_hole 11),
                       template_var 3)),
                   template_hole 10))),
             template_app
              (template_app (template_hole 13, template_hole 1),
               template_var 2))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 0),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_var 2))))),
    ("KMP.fork_sfoldl",
     "sfoldl$?f1.0$?z1.0 && sfoldl$?f2.0$?z2.0 =
      sfoldl$(LAM (a, b) z. (?f1.0$a$z, ?f2.0$b$z))$(?z1.0, ?z2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 21,
           template_app
            (template_app (template_hole 20, template_hole 19),
             template_app
              (template_app
                (template_hole 18,
                 template_app
                  (template_app (template_hole 17, template_hole 16),
                   template_var 3)),
               template_var 2))),
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_app (template_hole 14, template_hole 13),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_hole 10),
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app (template_hole 7, t_empty)))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 0)))),
    ("KMP.tree_case_distr",
     "?f$\<bottom> = \<bottom> ==>
      ?f$(tree_case$?g$?h$?t) =
      (case ?t of Null => ?f$?g | KMP.tree.Node$x$l$r => ?f$(?h$x$l$r))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 15, template_var 3),
            template_hole 14),
          template_hole 13)],
       template_equation
        (template_app
          (template_app (template_hole 15, template_var 3),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_var 2)),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app (template_hole 15, template_var 3),
                     template_var 2))),
               template_app (template_hole 4, t_empty))),
           template_var 0)))),
    ("KMP.not_prefix_op2_next",
     "prefix$[:?x:]$?xs = FF ==>
      op2$?pat$(next$?xs$(rep2$?pat$?usvs))$?x =
      op2$?pat$(rep2$?pat$?usvs)$?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 18,
              template_app
               (template_app (template_hole 17, template_hole 16),
                template_app
                 (template_app
                   (template_hole 15,
                    template_app
                     (template_app (template_hole 14, template_hole 13),
                      template_var 3)),
                  template_hole 12))),
            template_var 2),
          template_hole 11)],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 1)),
                   template_var 0)))),
           template_var 3),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 1)),
                 template_var 0))),
           template_var 3)))),
    ("KMP.match_Node_mplus_match_Node",
     "match_Node$?x$?k1.0 +++ match_Node$?x$?k2.0 =
      match_Node$?x$(LAM v l r. ?k1.0$v$l$r +++ ?k2.0$v$l$r)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 2)),
               template_var 1))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 2)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_var 2)),
         template_app (template_hole 5, t_empty)))),
    ("KMP.tree_unique",
     "[| ?x = ?f$?x;
         !!i t u.
            tree_take i$t = tree_take i$u ==>
            tree_take (Suc i)$(?f$t) = tree_take (Suc i)$(?f$u) |]
      ==> ?x = fix$?f",
     template_implication
      ([template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 6, template_var 0),
            template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("KMP.matches8",
     "matches$?pat =
      Theory_Of_Lists.smap$cfst oo
      Theory_Of_Lists.sfilter$(ok8 oo csnd) oo
      sscanl$(LAM (n, x) y. (n + 1, op8$?pat$x$y))$(0, root8$?pat)",
     template_equation
      (template_app
        (template_app (template_hole 37, template_hole 36), template_var 0),
       template_app
        (template_app
          (template_hole 35,
           template_app
            (template_app (template_hole 34, template_hole 33),
             template_app
              (template_app (template_hole 32, template_hole 31),
               template_app (template_hole 30, template_hole 29)))),
         template_app
          (template_app
            (template_hole 28,
             template_app
              (template_app (template_hole 27, template_hole 26),
               template_app
                (template_app (template_hole 25, template_hole 24),
                 template_app
                  (template_app
                    (template_hole 23,
                     template_app
                      (template_app (template_hole 22, template_hole 21),
                       template_hole 20)),
                   template_app (template_hole 19, template_hole 18))))),
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app (template_hole 16, template_hole 15),
                 template_app
                  (template_app (template_hole 14, template_hole 13),
                   template_app (template_hole 12, t_empty)))),
             template_app
              (template_app (template_hole 9, template_hole 2),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))))))),
    ("KMP.sfilter_supto",
     "0 <= ?d ==>
      Theory_Of_Lists.sfilter$(LAM x. le$(MkI$?n - x)$(MkI$?d))$
      (supto$(MkI$?m)$(MkI$?n)) =
      supto$(MkI$(if ?m <= ?n - ?d then ?n - ?d else ?m))$(MkI$?n)",
     template_implication
      ([template_inequation
         (less_equals, template_hole 16, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 13, template_hole 12),
               template_app (template_hole 11, t_empty))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_var 0))),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 1))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 17, template_var 0),
                         template_app
                          (template_app (template_hole 0, template_var 1),
                           template_var 2))),
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 2)),
                   template_var 0)))),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 1))))),
    ("KMP.smap_sfilter_split_cfcomp",
     "[| ?f$\<bottom> = \<bottom>; ?p$\<bottom> = \<bottom> |]
      ==> Theory_Of_Lists.smap$?f oo Theory_Of_Lists.sfilter$(?p oo ?g) =
          Theory_Of_Lists.smap$cfst oo
          Theory_Of_Lists.sfilter$(?p oo csnd) oo
          Theory_Of_Lists.smap$(?f && ?g)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 39, template_var 2),
            template_hole 38),
          template_hole 37),
        template_equation
         (template_app
           (template_app (template_hole 35, template_var 1),
            template_hole 34),
          template_hole 33)],
       template_equation
        (template_app
          (template_app
            (template_hole 31,
             template_app
              (template_app (template_hole 30, template_hole 29),
               template_app
                (template_app (template_hole 28, template_hole 27),
                 template_var 2))),
           template_app
            (template_app (template_hole 26, template_hole 25),
             template_app
              (template_app
                (template_hole 24,
                 template_app
                  (template_app (template_hole 23, template_hole 22),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 21,
             template_app
              (template_app (template_hole 20, template_hole 19),
               template_app
                (template_app (template_hole 18, template_hole 17),
                 template_app (template_hole 16, template_hole 15)))),
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 13, template_hole 12),
                 template_app
                  (template_app (template_hole 11, template_hole 10),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 8, template_hole 7),
                         template_var 1)),
                     template_app (template_hole 6, template_hole 5))))),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 2)),
                 template_var 0))))))),
    ("KMP.op5_sfoldl_left5",
     "[| ?us ~= \<bottom>; ?u ~= \<bottom>; ?v ~= \<bottom> |]
      ==> op5$?pat$(sfoldl$(op5$?pat)$(root5$?pat)$?us)$?v =
          left5$?pat$(?u :# ?us :@ [:?v:])",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 20)),
        template_negation
         (template_equation (template_var 2, template_hole 18)),
        template_negation
         (template_equation (template_var 1, template_hole 18))],
       template_equation
        (template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app (template_hole 14, template_hole 13),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 10, template_hole 9),
                         template_app
                          (template_app
                            (template_hole 14, template_hole 13),
                           template_var 0))),
                     template_app
                      (template_app (template_hole 12, template_hole 8),
                       template_var 0))),
                 template_var 3))),
           template_var 1),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_var 1)),
                 template_hole 0))))))),
    ("KMP.matches_op",
     "matches$?pat =
      Theory_Of_Lists.smap$cfst oo
      Theory_Of_Lists.sfilter$(snull oo csnd oo csnd) oo
      sscanl$(LAM (n, usvs) x. (n + 1, op$?pat$usvs$x))$(0, [::], ?pat)",
     template_equation
      (template_app
        (template_app (template_hole 42, template_hole 41), template_var 0),
       template_app
        (template_app
          (template_hole 40,
           template_app
            (template_app (template_hole 39, template_hole 38),
             template_app
              (template_app (template_hole 37, template_hole 36),
               template_app (template_hole 35, template_hole 34)))),
         template_app
          (template_app
            (template_hole 33,
             template_app
              (template_app (template_hole 32, template_hole 31),
               template_app
                (template_app (template_hole 30, template_hole 29),
                 template_app
                  (template_app
                    (template_hole 28,
                     template_app
                      (template_app (template_hole 27, template_hole 26),
                       template_hole 25)),
                   template_app
                    (template_app
                      (template_hole 24,
                       template_app
                        (template_app (template_hole 23, template_hole 22),
                         template_app
                          (template_hole 21, template_hole 20))),
                     template_app (template_hole 19, template_hole 18)))))),
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app (template_hole 16, template_hole 15),
                 template_app
                  (template_app (template_hole 14, template_hole 13),
                   template_app (template_hole 12, t_empty)))),
             template_app
              (template_app (template_hole 9, template_hole 2),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))))))),
    ("KMP.root_bisim_op_next56",
     "[| root_bisim ?pat ?t6.0 ?t5.0; prefix$[:?x:]$?xs = FF |]
      ==> op6$?pat$(next$?xs$?t6.0)$?x = op6$?pat$?t6.0$?x &
          op5$?pat$(next$?xs$?t5.0)$?x = op5$?pat$?t5.0$?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 19, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 17,
              template_app
               (template_app (template_hole 16, template_hole 15),
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_hole 12),
                      template_var 1)),
                  template_hole 11))),
            template_var 0),
          template_hole 10)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_app
                          (template_hole 6,
                           template_app
                            (template_app
                              (template_hole 5, template_hole 4),
                             template_var 4)),
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_app
                                (template_hole 2, template_hole 1),
                               template_var 0)),
                           template_var 3))),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_hole 4),
                           template_var 4)),
                       template_var 3)),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_hole 0),
                           template_var 4)),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_app
                              (template_hole 2, template_hole 1),
                             template_var 0)),
                         template_var 2))),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_hole 0),
                         template_var 4)),
                     template_var 2)),
                 template_var 1)))
           ))),
    ("KMP.r8_7",
     "root8$?pat = tree_map'$csnd$(root7$?pat) &
      op8$?pat$(tree_map'$csnd$?t)$?x = tree_map'$csnd$(op7$?pat$?t$?x) &
      grep8$?pat$(tree_map'$csnd$?l)$(prod.snd ?usvs) =
      tree_map'$csnd$(grep7$?pat$?l$?usvs)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 25,
             template_app
              (template_app
                (template_hole 24,
                 template_app
                  (template_app (template_hole 23, template_hole 22),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 21,
                   template_app
                    (template_app (template_hole 20, template_hole 19),
                     template_app (template_hole 18, template_hole 17))),
                 template_app
                  (template_app (template_hole 16, template_hole 15),
                   template_var 4)))),
           template_app
            (template_app
              (template_hole 25,
               template_app
                (template_app
                  (template_hole 24,
                   template_app
                    (template_app
                      (template_hole 14,
                       template_app
                        (template_app
                          (template_hole 13,
                           template_app
                            (template_app
                              (template_hole 12, template_hole 11),
                             template_var 4)),
                         template_app
                          (template_app
                            (template_hole 21,
                             template_app
                              (template_app
                                (template_hole 20, template_hole 19),
                               template_app
                                (template_hole 18, template_hole 17))),
                           template_var 3))),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 21,
                     template_app
                      (template_app (template_hole 20, template_hole 19),
                       template_app (template_hole 18, template_hole 17))),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_app
                              (template_hole 8, template_hole 7),
                             template_var 4)),
                         template_var 3)),
                     template_var 2)))),
             template_app
              (template_app
                (template_hole 24,
                 template_app
                  (template_app
                    (template_hole 23,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_hole 4),
                           template_var 4)),
                       template_app
                        (template_app
                          (template_hole 21,
                           template_app
                            (template_app
                              (template_hole 20, template_hole 19),
                             template_app
                              (template_hole 18, template_hole 17))),
                         template_var 1))),
                   template_app (template_hole 17, template_var 0))),
               template_app
                (template_app
                  (template_hole 21,
                   template_app
                    (template_app (template_hole 20, template_hole 19),
                     template_app (template_hole 18, template_hole 17))),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 2,
                         template_app
                          (template_app (template_hole 1, template_hole 0),
                           template_var 4)),
                       template_var 1)),
                   template_var 0)))))
         )),
    ("KMP.next_grep6_cases",
     "[| ?vs ~= \<bottom>; ?xs ~= \<bottom>;
         ?P (next$?xs$(grep6$?pat$(left6$?pat$?us)$(?us, ?vs)));
         ?P (grep6$?pat$(left6$?pat$?us)$(?us, ?vs)) ==> ?thesis;
         ?P (next$?vs$(left6$?pat$?us)) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_hole 11)),
        template_negation
         (template_equation (template_var 4, template_hole 11)),
        template_predicate
         (
            template_app
             (template_var 3,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_var 4)),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app (template_hole 5, template_hole 4),
                          template_var 2)),
                      template_app
                       (template_app
                         (template_hole 3,
                          template_app
                           (template_app (template_hole 2, template_hole 1),
                            template_var 2)),
                        template_var 1))),
                  template_app
                   (template_app (template_hole 0, template_var 1),
                    template_var 5))))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_var 3,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_hole 4),
                           template_var 2)),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app
                            (template_app
                              (template_hole 2, template_hole 1),
                             template_var 2)),
                         template_var 1))),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 5)))
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_var 3,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_var 5)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_var 2)),
                     template_var 1)))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("KMP.tree_bisimI",
     "(!!x y.
          ?x x y ==>
          x = \<bottom> & y = \<bottom> |
          x = Null & y = Null |
          (EX a tree1 tree2 a' tree1' tree2'.
              a = a' &
              ?x tree1 tree1' &
              ?x tree2 tree2' &
              x = KMP.tree.Node$a$tree1$tree2 &
              y = KMP.tree.Node$a'$tree1'$tree2')) ==>
      tree_bisim ?x",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("KMP.Bird_strategy",
     "[| endswith$?pat = ?p oo sfoldl$?op$?z;
         ?step = (LAM (n, x) y. (n + 1, ?op$x$y));
         ?p$\<bottom> = \<bottom> |]
      ==> matches$?pat =
          Theory_Of_Lists.smap$cfst oo
          Theory_Of_Lists.sfilter$(?p oo csnd) oo sscanl$?step$(0, ?z)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 46, template_hole 45),
            template_var 4),
          template_app
           (template_app
             (template_hole 44,
              template_app
               (template_app (template_hole 43, template_hole 42),
                template_var 3)),
            template_app
             (template_app
               (template_hole 41,
                template_app
                 (template_app (template_hole 40, template_hole 39),
                  template_var 2)),
              template_var 1))),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 37, template_hole 36),
            template_app (template_hole 35, t_empty))),
        template_equation
         (template_app
           (template_app (template_hole 26, template_var 3),
            template_hole 25),
          template_hole 24)],
       template_equation
        (template_app
          (template_app (template_hole 22, template_hole 21),
           template_var 4),
         template_app
          (template_app
            (template_hole 20,
             template_app
              (template_app (template_hole 19, template_hole 18),
               template_app
                (template_app (template_hole 17, template_hole 16),
                 template_app (template_hole 15, template_hole 14)))),
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_hole 11),
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 7, template_hole 6),
                         template_var 3)),
                     template_app (template_hole 5, template_hole 4))))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 32, template_hole 0),
                 template_var 1))))))),
    ("KMP.r7_6_aux",
     "?pat ~= \<bottom> ==>
      (LAM (root, op, grep).
          (root$?pat, seq$?x$(op$?pat$?t$?x), grep$?pat$?l$(?us, ?vs)))$
      (root7, op7, grep7) =
      (LAM (root, op, grep).
          (root$?pat, seq$?x$(op$?pat$?t$?x),
           seq$?vs$(grep$?pat$?l$(?us, ?vs))))$
      (root6, op6, grep6)",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_hole 32))],
       template_equation
        (template_app
          (template_app
            (template_hole 30,
             template_app
              (template_app (template_hole 29, template_hole 28),
               template_app (template_hole 27, t_empty))),
           template_app
            (template_app (template_hole 9, template_hole 8),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_hole 5))),
         template_app
          (template_app
            (template_hole 30,
             template_app
              (template_app (template_hole 29, template_hole 28),
               template_app (template_hole 27, t_empty))),
           template_app
            (template_app (template_hole 9, template_hole 2),
             template_app
              (template_app (template_hole 7, template_hole 1),
               template_hole 0)))))),
    ("KMP.fused_driver'",
     "[| ?g$\<bottom> = \<bottom>; ?p$\<bottom> = \<bottom> |]
      ==> Theory_Of_Lists.smap$?g oo
          Theory_Of_Lists.sfilter$?p oo sscanl$?f$?z =
          (FIX x.
              LAM z xxs.
                 case xxs of [::] => If ?p$z then [:?g$z:] else [::]
                 | xa :# xs =>
                     let z' = ?f$z$xa
                     in If ?p$z then ?g$z :# x$z'$xs else x$z'$xs)$
          ?z",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 41, template_var 3),
            template_hole 40),
          template_hole 39),
        template_equation
         (template_app
           (template_app (template_hole 37, template_var 2),
            template_hole 40),
          template_hole 36)],
       template_equation
        (template_app
          (template_app
            (template_hole 34,
             template_app
              (template_app (template_hole 33, template_hole 32),
               template_app
                (template_app (template_hole 31, template_hole 30),
                 template_var 3))),
           template_app
            (template_app
              (template_hole 29,
               template_app
                (template_app (template_hole 28, template_hole 27),
                 template_app
                  (template_app (template_hole 26, template_hole 25),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 24,
                 template_app
                  (template_app (template_hole 23, template_hole 22),
                   template_var 1)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 21,
             template_app
              (template_app (template_hole 20, template_hole 19),
               template_app (template_hole 18, t_empty))),
           template_var 0)))),
    ("KMP.tree_case_cong",
     "[| ?t = ?t'; ?t' = Null ==> ?n = ?n';
         !!v l r.
            [| ?t' = KMP.tree.Node$v$l$r; v ~= \<bottom> |]
            ==> ?c v l r = ?c' v l r;
         cont (%(x, y, z). ?c x y z); cont (%(x, y, z). ?c' x y z) |]
      ==> (case ?t of Null => ?n | KMP.tree.Node$v$l$r => ?c v l r) =
          (case ?t' of Null => ?n' | KMP.tree.Node$v$l$r => ?c' v l r)",
     template_implication
      ([template_equation (template_var 5, template_var 4),
        template_implication
         ([template_equation (template_var 4, template_hole 20)],
          template_equation (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 9, template_app (template_hole 8, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 9, template_app (template_hole 8, t_empty))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 3)),
               template_app (template_hole 2, t_empty))),
           template_var 5),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 2)),
               template_app (template_hole 2, t_empty))),
           template_var 4)))),
    ("KMP.matchesf_8",
     "fix$
      (LAM (Rootf, Opf, Grepf).
          (Grepf$Null$?pat,
           LAM t x.
              case t of Null => Rootf
              | KMP.tree.Node$vs$l$r =>
                  case vs of [::] => Opf$l$x
                  | v :# vs => If eq$x$v then r else Opf$l$x,
           LAM l vs.
              case vs of [::] => KMP.tree.Node$[::]$l$Null
              | v :# vs =>
                  KMP.tree.Node$(v :# vs)$(next'$v$l)$
                  (Grepf$(Opf$l$v)$vs))) =
      (LAM (root, op, grep). (root$?pat, op$?pat, grep$?pat))$
      (root8, op8, grep8)",
     template_equation
      (template_app
        (template_app (template_hole 61, template_hole 60),
         template_app
          (template_app (template_hole 59, template_hole 58),
           template_app (template_hole 57, t_empty))),
       template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, template_hole 12),
             template_app (template_hole 11, t_empty))),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))))),
    ("KMP.fix_syn4_permute",
     "[| cont (%(X1, X2, X3, X4). ?F1.0 X1 X2 X3 X4);
         cont (%(X1, X2, X3, X4). ?F2.0 X1 X2 X3 X4);
         cont (%(X1, X2, X3, X4). ?F3.0 X1 X2 X3 X4);
         cont (%(X1, X2, X3, X4). ?F4.0 X1 X2 X3 X4) |]
      ==> (FIX x.
              case x of
              (X1, X2, X3, X4) =>
                (?F1.0 X1 X2 X3 X4, ?F2.0 X1 X2 X3 X4, ?F3.0 X1 X2 X3 X4,
                 ?F4.0 X1 X2 X3 X4)) =
          (case FIX x.
                   case x of
                   (X1, X2, X4, X3) =>
                     (?F1.0 X1 X2 X3 X4, ?F2.0 X1 X2 X3 X4,
                      ?F4.0 X1 X2 X3 X4, ?F3.0 X1 X2 X3 X4) of
           (x1, x2, x4, x3) => (x1, x2, x3, x4))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 37, template_app (template_hole 36, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 33, template_app (template_hole 32, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 29, template_app (template_hole 28, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 25, template_app (template_hole 24, t_empty))
            )],
       template_equation
        (template_app
          (template_app (template_hole 20, template_hole 19),
           template_app (template_hole 18, t_empty)),
         template_app
          (template_app (template_hole 11, t_empty),
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_app (template_hole 6, t_empty))))))]:
   (string * thm * template) list
### theory "Draft.KMPMoreTemplates"
### 0.585s elapsed time, 0.825s cpu time, 0.095s GC time
val it = (): unit
